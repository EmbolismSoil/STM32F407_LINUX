cscope 15 $HOME/stm32/stm32f4_dsp_stdperiph_lib/STM32F4xx_DSP_StdPeriph_Lib/Libraries -q 0000015853 0002398318
	@CMSIS/DSP_Lib/Examples/arm_class_marks_example/ARM/arm_class_marks_example_f32.c

84 
	~"¨m_m©h.h
"

86 
	#USE_STATIC_INIT


	)

92 
	#TEST_LENGTH_SAMPLES
 (20*4)

	)

97 c⁄° 
Êﬂt32_t
 
	gã°M¨ks_f32
[
TEST_LENGTH_SAMPLES
] =

125 c⁄° 
Êﬂt32_t
 
	gã°Unôy_f32
[4] =

134 
Êﬂt32_t
 
	gã°Ouçut
[
TEST_LENGTH_SAMPLES
];

140 
	#NUMSTUDENTS
 20

	)

141 
	#NUMSUBJECTS
 4

	)

147 
uöt32_t
 
	gnumStudíts
 = 20;

148 
uöt32_t
 
	gnumSubje˘s
 = 4;

149 
Êﬂt32_t
 
	gmax_m¨ks
, 
	gmö_m¨ks
, 
	gmón
, 
	g°d
, 
	gv¨
;

150 
uöt32_t
 
	g°udít_num
;

156 
öt32_t
 
	$maö
()

159 #i‚de‡ 
USE_STATIC_INIT


161 
¨m_m©rix_ö°™˚_f32
 
§cA
;

162 
¨m_m©rix_ö°™˚_f32
 
§cB
;

163 
¨m_m©rix_ö°™˚_f32
 
d°C
;

166 
	`¨m_m©_öô_f32
(&
§cA
, 
numStudíts
, 
numSubje˘s
, (
Êﬂt32_t
 *)
ã°M¨ks_f32
);

167 
	`¨m_m©_öô_f32
(&
§cB
, 
numSubje˘s
, 1, (
Êﬂt32_t
 *)
ã°Unôy_f32
);

168 
	`¨m_m©_öô_f32
(&
d°C
, 
numStudíts
, 1, 
ã°Ouçut
);

173 
¨m_m©rix_ö°™˚_f32
 
§cA
 = {
NUMSTUDENTS
, 
NUMSUBJECTS
, (
Êﬂt32_t
 *)
ã°M¨ks_f32
};

174 
¨m_m©rix_ö°™˚_f32
 
§cB
 = {
NUMSUBJECTS
, 1, (
Êﬂt32_t
 *)
ã°Unôy_f32
};

175 
¨m_m©rix_ö°™˚_f32
 
d°C
 = {
NUMSTUDENTS
, 1, 
ã°Ouçut
};

183 
	`¨m_m©_mu…_f32
(&
§cA
, &
§cB
, &
d°C
);

188 
	`¨m_max_f32
(
ã°Ouçut
, 
numStudíts
, &
max_m¨ks
, &
°udít_num
);

193 
	`¨m_mö_f32
(
ã°Ouçut
, 
numStudíts
, &
mö_m¨ks
, &
°udít_num
);

198 
	`¨m_món_f32
(
ã°Ouçut
, 
numStudíts
, &
món
);

203 
	`¨m_°d_f32
(
ã°Ouçut
, 
numStudíts
, &
°d
);

208 
	`¨m_v¨_f32
(
ã°Ouçut
, 
numStudíts
, &
v¨
);

211 
	}
}

	@CMSIS/DSP_Lib/Examples/arm_class_marks_example/GCC/arm_class_marks_example_f32.c

84 
	~"¨m_m©h.h
"

86 
	#USE_STATIC_INIT


	)

92 
	#TEST_LENGTH_SAMPLES
 (20*4)

	)

97 c⁄° 
Êﬂt32_t
 
	gã°M¨ks_f32
[
TEST_LENGTH_SAMPLES
] =

125 c⁄° 
Êﬂt32_t
 
	gã°Unôy_f32
[4] =

134 
Êﬂt32_t
 
	gã°Ouçut
[
TEST_LENGTH_SAMPLES
];

140 
	#NUMSTUDENTS
 20

	)

141 
	#NUMSUBJECTS
 4

	)

147 
uöt32_t
 
	gnumStudíts
 = 20;

148 
uöt32_t
 
	gnumSubje˘s
 = 4;

149 
Êﬂt32_t
 
	gmax_m¨ks
, 
	gmö_m¨ks
, 
	gmón
, 
	g°d
, 
	gv¨
;

150 
uöt32_t
 
	g°udít_num
;

156 
öt32_t
 
	$maö
()

159 #i‚de‡ 
USE_STATIC_INIT


161 
¨m_m©rix_ö°™˚_f32
 
§cA
;

162 
¨m_m©rix_ö°™˚_f32
 
§cB
;

163 
¨m_m©rix_ö°™˚_f32
 
d°C
;

166 
	`¨m_m©_öô_f32
(&
§cA
, 
numStudíts
, 
numSubje˘s
, (
Êﬂt32_t
 *)
ã°M¨ks_f32
);

167 
	`¨m_m©_öô_f32
(&
§cB
, 
numSubje˘s
, 1, (
Êﬂt32_t
 *)
ã°Unôy_f32
);

168 
	`¨m_m©_öô_f32
(&
d°C
, 
numStudíts
, 1, 
ã°Ouçut
);

173 
¨m_m©rix_ö°™˚_f32
 
§cA
 = {
NUMSTUDENTS
, 
NUMSUBJECTS
, (
Êﬂt32_t
 *)
ã°M¨ks_f32
};

174 
¨m_m©rix_ö°™˚_f32
 
§cB
 = {
NUMSUBJECTS
, 1, (
Êﬂt32_t
 *)
ã°Unôy_f32
};

175 
¨m_m©rix_ö°™˚_f32
 
d°C
 = {
NUMSTUDENTS
, 1, 
ã°Ouçut
};

183 
	`¨m_m©_mu…_f32
(&
§cA
, &
§cB
, &
d°C
);

188 
	`¨m_max_f32
(
ã°Ouçut
, 
numStudíts
, &
max_m¨ks
, &
°udít_num
);

193 
	`¨m_mö_f32
(
ã°Ouçut
, 
numStudíts
, &
mö_m¨ks
, &
°udít_num
);

198 
	`¨m_món_f32
(
ã°Ouçut
, 
numStudíts
, &
món
);

203 
	`¨m_°d_f32
(
ã°Ouçut
, 
numStudíts
, &
°d
);

208 
	`¨m_v¨_f32
(
ã°Ouçut
, 
numStudíts
, &
v¨
);

211 
	}
}

	@CMSIS/DSP_Lib/Examples/arm_convolution_example/ARM/arm_convolution_example_f32.c

105 
	~"¨m_m©h.h
"

106 
	~"m©h_hñ≥r.h
"

111 
	#MAX_BLOCKSIZE
 128

	)

112 
	#DELTA
 (0.000001f)

	)

113 
	#SNR_THRESHOLD
 90

	)

118 
Êﬂt32_t
 
	gAk
[
MAX_BLOCKSIZE
];

119 
Êﬂt32_t
 
	gBk
[
MAX_BLOCKSIZE
];

120 
Êﬂt32_t
 
	gAxB
[
MAX_BLOCKSIZE
 * 2];

126 
Êﬂt32_t
 
	gã°I≈utA_f32
[64] =

142 
Êﬂt32_t
 
	gã°I≈utB_f32
[64] =

157 c⁄° 
	gã°RefOuçut_f32
[127] =

186 
uöt32_t
 
	g§cALí
 = 64;

187 
uöt32_t
 
	g§cBLí
 = 64;

188 
uöt32_t
 
	goutLí
;

189 
Êﬂt32_t
 
	g¢r
;

191 
öt32_t
 
	$maö
()

193 
¨m_°©us
 
°©us
;

194 
¨m_cf·_ødix4_ö°™˚_f32
 
cf·_ö°™˚
;

197 
¨m_cf·_ødix4_ö°™˚_f32
 *
cf·_ö°™˚_±r
 =

198 (
¨m_cf·_ødix4_ö°™˚_f32
*Ë&
cf·_ö°™˚
;

201 
outLí
 = 
§cALí
 + 
§cBLí
 - 1;

204 
	`¨m_fûl_f32
(0.0, 
Ak
, 
MAX_BLOCKSIZE
);

205 
	`¨m_fûl_f32
(0.0, 
Bk
, 
MAX_BLOCKSIZE
);

208 
	`¨m_c›y_f32
(
ã°I≈utA_f32
, 
Ak
, 
MAX_BLOCKSIZE
/2);

209 
	`¨m_c›y_f32
(
ã°I≈utB_f32
, 
Bk
, 
MAX_BLOCKSIZE
/2);

212 
°©us
 = 
	`¨m_cf·_ødix4_öô_f32
(
cf·_ö°™˚_±r
, 64, 0, 1);

215 
	`¨m_cf·_ødix4_f32
(
cf·_ö°™˚_±r
, 
Ak
);

217 
	`¨m_cf·_ødix4_f32
(
cf·_ö°™˚_±r
, 
Bk
);

220 
	`¨m_cm∂x_mu…_cm∂x_f32
(
Ak
, 
Bk
, 
AxB
, 
MAX_BLOCKSIZE
/2);

223 
°©us
 = 
	`¨m_cf·_ødix4_öô_f32
(
cf·_ö°™˚_±r
, 64, 1, 1);

227 
	`¨m_cf·_ødix4_f32
(
cf·_ö°™˚_±r
, 
AxB
);

230 
¢r
 = 
	`¨m_¢r_f32
((
Êﬂt32_t
 *)
ã°RefOuçut_f32
, 
AxB
, 
§cALí
 + 
§cBLí
 - 1);

234 if–
¢r
 > 
SNR_THRESHOLD
)

236 
°©us
 = 
ARM_MATH_SUCCESS
;

239 if–
°©us
 !
ARM_MATH_SUCCESS
)

245 
	}
}

	@CMSIS/DSP_Lib/Examples/arm_convolution_example/ARM/math_helper.c

45 
	~<m©h.h
>

50 
	~"m©h_hñ≥r.h
"

62 
	$¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
)

64 
E√rgySig«l
 = 0.0, 
E√rgyEº‹
 = 0.0;

65 
uöt32_t
 
i
;

66 
SNR
;

67 
ãmp
;

68 *
ã°
;

70 
i
 = 0; i < 
buffSize
; i++)

73 
ã°
 = (*)(&
pRef
[
i
]);

74 
ãmp
 = *
ã°
;

76 if(
ãmp
 == 0x7FC00000)

82 
ã°
 = (*)(&
pTe°
[
i
]);

83 
ãmp
 = *
ã°
;

85 if(
ãmp
 == 0x7FC00000)

89 
E√rgySig«l
 +
pRef
[
i
] *ÖRef[i];

90 
E√rgyEº‹
 +(
pRef
[
i
] - 
pTe°
[i]) * (pRef[i] -ÖTest[i]);

94 
ã°
 = (*)(&
E√rgyEº‹
);

95 
ãmp
 = *
ã°
;

97 if(
ãmp
 == 0x7FC00000)

103 
SNR
 = 10 * 
	`log10
 (
E√rgySig«l
 / 
E√rgyEº‹
);

105  (
SNR
);

107 
	}
}

120 
	$¨m_¥ovide_gu¨d_bôs_q15
 (
q15_t
 * 
öput_buf
, 
uöt32_t
 
blockSize
,

121 
uöt32_t
 
gu¨d_bôs
)

123 
uöt32_t
 
i
;

125 
i
 = 0; i < 
blockSize
; i++)

127 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

129 
	}
}

138 
	$¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
)

140 
uöt32_t
 
i
;

142 
i
 = 0; i < 
numSam∂es
; i++)

145 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1048576.0f);

147 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

149 i‡(
pIn
[
i
] == () 1.0)

151 
pOut
[
i
] = 0x000FFFFF;

154 
	}
}

164 
uöt32_t
 
	$¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

166 
uöt32_t
 
i
;

167 
öt32_t
 
diff
, 
diffC∫t
 = 0;

168 
uöt32_t
 
maxDiff
 = 0;

170 
i
 = 0; i < 
numSam∂es
; i++)

172 
diff
 = 
pIn
[
i
] - 
pOut
[i];

173 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

175 if(
diffC∫t
 > 
maxDiff
)

177 
maxDiff
 = 
diffC∫t
;

181 (
maxDiff
);

182 
	}
}

192 
uöt32_t
 
	$¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

194 
uöt32_t
 
i
;

195 
öt32_t
 
diff
, 
diffC∫t
 = 0;

196 
uöt32_t
 
maxDiff
 = 0;

198 
i
 = 0; i < 
numSam∂es
; i++)

200 
diff
 = 
pIn
[
i
] - 
pOut
[i];

201 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

203 if(
diffC∫t
 > 
maxDiff
)

205 
maxDiff
 = 
diffC∫t
;

209 (
maxDiff
);

210 
	}
}

222 
	$¨m_¥ovide_gu¨d_bôs_q31
 (
q31_t
 * 
öput_buf
,

223 
uöt32_t
 
blockSize
,

224 
uöt32_t
 
gu¨d_bôs
)

226 
uöt32_t
 
i
;

228 
i
 = 0; i < 
blockSize
; i++)

230 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

232 
	}
}

244 
	$¨m_¥ovide_gu¨d_bôs_q7
 (
q7_t
 * 
öput_buf
,

245 
uöt32_t
 
blockSize
,

246 
uöt32_t
 
gu¨d_bôs
)

248 
uöt32_t
 
i
;

250 
i
 = 0; i < 
blockSize
; i++)

252 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

254 
	}
}

266 
uöt32_t
 
	$¨m_ˇlc_gu¨d_bôs
 (
uöt32_t
 
num_adds
)

268 
uöt32_t
 
i
 = 1, 
j
 = 0;

270 i‡(
num_adds
 == 1)

275 
i
 < 
num_adds
)

277 
i
 = i * 2;

278 
j
++;

281  (
j
);

282 
	}
}

290 
	$¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
,

291 
uöt32_t
 
numSam∂es
,

292 
uöt32_t
 
gu¨d_bôs
)

294 
uöt32_t
 
i
;

296 
i
 = 0; i < 
numSam∂es
; i++)

298 
pIn
[
i
] =ÖIn[i] * 
	`¨m_ˇlc_2pow
(
gu¨d_bôs
);

300 
	}
}

307 
uöt32_t
 
	$¨m_ˇlc_2pow
(
uöt32_t
 
numShi·s
)

310 
uöt32_t
 
i
, 
vÆ
 = 1;

312 
i
 = 0; i < 
numShi·s
; i++)

314 
vÆ
 = val * 2;

317 (
vÆ
);

318 
	}
}

329 
	$¨m_Êﬂt_to_q14
 (*
pIn
, 
q15_t
 * 
pOut
,

330 
uöt32_t
 
numSam∂es
)

332 
uöt32_t
 
i
;

334 
i
 = 0; i < 
numSam∂es
; i++)

337 
pOut
[
i
] = (
q15_t
Ë(
pIn
[i] * 16384.0f);

339 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

341 i‡(
pIn
[
i
] == () 2.0)

343 
pOut
[
i
] = 0x7FFF;

348 
	}
}

358 
	$¨m_Êﬂt_to_q30
 (*
pIn
, 
q31_t
 * 
pOut
,

359 
uöt32_t
 
numSam∂es
)

361 
uöt32_t
 
i
;

363 
i
 = 0; i < 
numSam∂es
; i++)

366 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1073741824.0f);

368 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

370 i‡(
pIn
[
i
] == () 2.0)

372 
pOut
[
i
] = 0x7FFFFFFF;

375 
	}
}

384 
	$¨m_Êﬂt_to_q29
 (*
pIn
, 
q31_t
 * 
pOut
,

385 
uöt32_t
 
numSam∂es
)

387 
uöt32_t
 
i
;

389 
i
 = 0; i < 
numSam∂es
; i++)

392 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 536870912.0f);

394 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

396 i‡(
pIn
[
i
] == () 4.0)

398 
pOut
[
i
] = 0x7FFFFFFF;

401 
	}
}

411 
	$¨m_Êﬂt_to_q28
 (*
pIn
, 
q31_t
 * 
pOut
,

412 
uöt32_t
 
numSam∂es
)

414 
uöt32_t
 
i
;

416 
i
 = 0; i < 
numSam∂es
; i++)

419 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 268435456.0f);

421 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

423 i‡(
pIn
[
i
] == () 8.0)

425 
pOut
[
i
] = 0x7FFFFFFF;

428 
	}
}

438 
	$¨m_˛ù_f32
 (*
pIn
, 
uöt32_t
 
numSam∂es
)

440 
uöt32_t
 
i
;

442 
i
 = 0; i < 
numSam∂es
; i++)

444 if(
pIn
[
i
] > 1.0f)

446 
pIn
[
i
] = 1.0;

448 if–
pIn
[
i
] < -1.0f)

450 
pIn
[
i
] = -1.0;

454 
	}
}

	@CMSIS/DSP_Lib/Examples/arm_convolution_example/ARM/math_helper.h

43 
	~"¨m_m©h.h
"

45 #i‚de‡
MATH_HELPER_H


46 
	#MATH_HELPER_H


	)

48 
¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
);

49 
¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
);

50 
¨m_¥ovide_gu¨d_bôs_q15
(
q15_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

51 
¨m_¥ovide_gu¨d_bôs_q31
(
q31_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

52 
¨m_Êﬂt_to_q14
(*
pIn
, 
q15_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

53 
¨m_Êﬂt_to_q29
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

54 
¨m_Êﬂt_to_q28
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

55 
¨m_Êﬂt_to_q30
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

56 
¨m_˛ù_f32
(*
pIn
, 
uöt32_t
 
numSam∂es
);

57 
uöt32_t
 
¨m_ˇlc_gu¨d_bôs
(uöt32_à
num_adds
);

58 
¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
, 
uöt32_t
 
numSam∂es
, uöt32_à
gu¨d_bôs
);

59 
uöt32_t
 
¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, uöt32_à
numSam∂es
);

60 
uöt32_t
 
¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à*
pOut
, uöt32_à
numSam∂es
);

61 
uöt32_t
 
¨m_ˇlc_2pow
(uöt32_à
gu¨d_bôs
);

	@CMSIS/DSP_Lib/Examples/arm_convolution_example/GCC/arm_convolution_example_f32.c

105 
	~"¨m_m©h.h
"

106 
	~"m©h_hñ≥r.h
"

111 
	#MAX_BLOCKSIZE
 128

	)

112 
	#DELTA
 (0.000001f)

	)

113 
	#SNR_THRESHOLD
 90

	)

118 
Êﬂt32_t
 
	gAk
[
MAX_BLOCKSIZE
];

119 
Êﬂt32_t
 
	gBk
[
MAX_BLOCKSIZE
];

120 
Êﬂt32_t
 
	gAxB
[
MAX_BLOCKSIZE
 * 2];

126 
Êﬂt32_t
 
	gã°I≈utA_f32
[64] =

142 
Êﬂt32_t
 
	gã°I≈utB_f32
[64] =

157 c⁄° 
	gã°RefOuçut_f32
[127] =

186 
uöt32_t
 
	g§cALí
 = 64;

187 
uöt32_t
 
	g§cBLí
 = 64;

188 
uöt32_t
 
	goutLí
;

189 
Êﬂt32_t
 
	g¢r
;

191 
öt32_t
 
	$maö
()

193 
¨m_°©us
 
°©us
;

194 
¨m_cf·_ødix4_ö°™˚_f32
 
cf·_ö°™˚
;

197 
¨m_cf·_ødix4_ö°™˚_f32
 *
cf·_ö°™˚_±r
 =

198 (
¨m_cf·_ødix4_ö°™˚_f32
*Ë&
cf·_ö°™˚
;

201 
outLí
 = 
§cALí
 + 
§cBLí
 - 1;

204 
	`¨m_fûl_f32
(0.0, 
Ak
, 
MAX_BLOCKSIZE
);

205 
	`¨m_fûl_f32
(0.0, 
Bk
, 
MAX_BLOCKSIZE
);

208 
	`¨m_c›y_f32
(
ã°I≈utA_f32
, 
Ak
, 
MAX_BLOCKSIZE
/2);

209 
	`¨m_c›y_f32
(
ã°I≈utB_f32
, 
Bk
, 
MAX_BLOCKSIZE
/2);

212 
°©us
 = 
	`¨m_cf·_ødix4_öô_f32
(
cf·_ö°™˚_±r
, 64, 0, 1);

215 
	`¨m_cf·_ødix4_f32
(
cf·_ö°™˚_±r
, 
Ak
);

217 
	`¨m_cf·_ødix4_f32
(
cf·_ö°™˚_±r
, 
Bk
);

220 
	`¨m_cm∂x_mu…_cm∂x_f32
(
Ak
, 
Bk
, 
AxB
, 
MAX_BLOCKSIZE
/2);

223 
°©us
 = 
	`¨m_cf·_ødix4_öô_f32
(
cf·_ö°™˚_±r
, 64, 1, 1);

227 
	`¨m_cf·_ødix4_f32
(
cf·_ö°™˚_±r
, 
AxB
);

230 
¢r
 = 
	`¨m_¢r_f32
((
Êﬂt32_t
 *)
ã°RefOuçut_f32
, 
AxB
, 
§cALí
 + 
§cBLí
 - 1);

234 if–
¢r
 > 
SNR_THRESHOLD
)

236 
°©us
 = 
ARM_MATH_SUCCESS
;

239 if–
°©us
 !
ARM_MATH_SUCCESS
)

245 
	}
}

	@CMSIS/DSP_Lib/Examples/arm_convolution_example/GCC/math_helper.c

45 
	~<m©h.h
>

50 
	~"m©h_hñ≥r.h
"

62 
	$¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
)

64 
E√rgySig«l
 = 0.0, 
E√rgyEº‹
 = 0.0;

65 
uöt32_t
 
i
;

66 
SNR
;

67 
ãmp
;

68 *
ã°
;

70 
i
 = 0; i < 
buffSize
; i++)

73 
ã°
 = (*)(&
pRef
[
i
]);

74 
ãmp
 = *
ã°
;

76 if(
ãmp
 == 0x7FC00000)

82 
ã°
 = (*)(&
pTe°
[
i
]);

83 
ãmp
 = *
ã°
;

85 if(
ãmp
 == 0x7FC00000)

89 
E√rgySig«l
 +
pRef
[
i
] *ÖRef[i];

90 
E√rgyEº‹
 +(
pRef
[
i
] - 
pTe°
[i]) * (pRef[i] -ÖTest[i]);

94 
ã°
 = (*)(&
E√rgyEº‹
);

95 
ãmp
 = *
ã°
;

97 if(
ãmp
 == 0x7FC00000)

103 
SNR
 = 10 * 
	`log10
 (
E√rgySig«l
 / 
E√rgyEº‹
);

105  (
SNR
);

107 
	}
}

120 
	$¨m_¥ovide_gu¨d_bôs_q15
 (
q15_t
 * 
öput_buf
, 
uöt32_t
 
blockSize
,

121 
uöt32_t
 
gu¨d_bôs
)

123 
uöt32_t
 
i
;

125 
i
 = 0; i < 
blockSize
; i++)

127 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

129 
	}
}

138 
	$¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
)

140 
uöt32_t
 
i
;

142 
i
 = 0; i < 
numSam∂es
; i++)

145 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1048576.0f);

147 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

149 i‡(
pIn
[
i
] == () 1.0)

151 
pOut
[
i
] = 0x000FFFFF;

154 
	}
}

164 
uöt32_t
 
	$¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

166 
uöt32_t
 
i
;

167 
öt32_t
 
diff
, 
diffC∫t
 = 0;

168 
uöt32_t
 
maxDiff
 = 0;

170 
i
 = 0; i < 
numSam∂es
; i++)

172 
diff
 = 
pIn
[
i
] - 
pOut
[i];

173 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

175 if(
diffC∫t
 > 
maxDiff
)

177 
maxDiff
 = 
diffC∫t
;

181 (
maxDiff
);

182 
	}
}

192 
uöt32_t
 
	$¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

194 
uöt32_t
 
i
;

195 
öt32_t
 
diff
, 
diffC∫t
 = 0;

196 
uöt32_t
 
maxDiff
 = 0;

198 
i
 = 0; i < 
numSam∂es
; i++)

200 
diff
 = 
pIn
[
i
] - 
pOut
[i];

201 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

203 if(
diffC∫t
 > 
maxDiff
)

205 
maxDiff
 = 
diffC∫t
;

209 (
maxDiff
);

210 
	}
}

222 
	$¨m_¥ovide_gu¨d_bôs_q31
 (
q31_t
 * 
öput_buf
,

223 
uöt32_t
 
blockSize
,

224 
uöt32_t
 
gu¨d_bôs
)

226 
uöt32_t
 
i
;

228 
i
 = 0; i < 
blockSize
; i++)

230 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

232 
	}
}

244 
	$¨m_¥ovide_gu¨d_bôs_q7
 (
q7_t
 * 
öput_buf
,

245 
uöt32_t
 
blockSize
,

246 
uöt32_t
 
gu¨d_bôs
)

248 
uöt32_t
 
i
;

250 
i
 = 0; i < 
blockSize
; i++)

252 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

254 
	}
}

266 
uöt32_t
 
	$¨m_ˇlc_gu¨d_bôs
 (
uöt32_t
 
num_adds
)

268 
uöt32_t
 
i
 = 1, 
j
 = 0;

270 i‡(
num_adds
 == 1)

275 
i
 < 
num_adds
)

277 
i
 = i * 2;

278 
j
++;

281  (
j
);

282 
	}
}

290 
	$¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
,

291 
uöt32_t
 
numSam∂es
,

292 
uöt32_t
 
gu¨d_bôs
)

294 
uöt32_t
 
i
;

296 
i
 = 0; i < 
numSam∂es
; i++)

298 
pIn
[
i
] =ÖIn[i] * 
	`¨m_ˇlc_2pow
(
gu¨d_bôs
);

300 
	}
}

307 
uöt32_t
 
	$¨m_ˇlc_2pow
(
uöt32_t
 
numShi·s
)

310 
uöt32_t
 
i
, 
vÆ
 = 1;

312 
i
 = 0; i < 
numShi·s
; i++)

314 
vÆ
 = val * 2;

317 (
vÆ
);

318 
	}
}

329 
	$¨m_Êﬂt_to_q14
 (*
pIn
, 
q15_t
 * 
pOut
,

330 
uöt32_t
 
numSam∂es
)

332 
uöt32_t
 
i
;

334 
i
 = 0; i < 
numSam∂es
; i++)

337 
pOut
[
i
] = (
q15_t
Ë(
pIn
[i] * 16384.0f);

339 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

341 i‡(
pIn
[
i
] == () 2.0)

343 
pOut
[
i
] = 0x7FFF;

348 
	}
}

358 
	$¨m_Êﬂt_to_q30
 (*
pIn
, 
q31_t
 * 
pOut
,

359 
uöt32_t
 
numSam∂es
)

361 
uöt32_t
 
i
;

363 
i
 = 0; i < 
numSam∂es
; i++)

366 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1073741824.0f);

368 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

370 i‡(
pIn
[
i
] == () 2.0)

372 
pOut
[
i
] = 0x7FFFFFFF;

375 
	}
}

384 
	$¨m_Êﬂt_to_q29
 (*
pIn
, 
q31_t
 * 
pOut
,

385 
uöt32_t
 
numSam∂es
)

387 
uöt32_t
 
i
;

389 
i
 = 0; i < 
numSam∂es
; i++)

392 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 536870912.0f);

394 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

396 i‡(
pIn
[
i
] == () 4.0)

398 
pOut
[
i
] = 0x7FFFFFFF;

401 
	}
}

411 
	$¨m_Êﬂt_to_q28
 (*
pIn
, 
q31_t
 * 
pOut
,

412 
uöt32_t
 
numSam∂es
)

414 
uöt32_t
 
i
;

416 
i
 = 0; i < 
numSam∂es
; i++)

419 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 268435456.0f);

421 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

423 i‡(
pIn
[
i
] == () 8.0)

425 
pOut
[
i
] = 0x7FFFFFFF;

428 
	}
}

438 
	$¨m_˛ù_f32
 (*
pIn
, 
uöt32_t
 
numSam∂es
)

440 
uöt32_t
 
i
;

442 
i
 = 0; i < 
numSam∂es
; i++)

444 if(
pIn
[
i
] > 1.0f)

446 
pIn
[
i
] = 1.0;

448 if–
pIn
[
i
] < -1.0f)

450 
pIn
[
i
] = -1.0;

454 
	}
}

	@CMSIS/DSP_Lib/Examples/arm_convolution_example/GCC/math_helper.h

43 
	~"¨m_m©h.h
"

45 #i‚de‡
MATH_HELPER_H


46 
	#MATH_HELPER_H


	)

48 
¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
);

49 
¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
);

50 
¨m_¥ovide_gu¨d_bôs_q15
(
q15_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

51 
¨m_¥ovide_gu¨d_bôs_q31
(
q31_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

52 
¨m_Êﬂt_to_q14
(*
pIn
, 
q15_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

53 
¨m_Êﬂt_to_q29
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

54 
¨m_Êﬂt_to_q28
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

55 
¨m_Êﬂt_to_q30
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

56 
¨m_˛ù_f32
(*
pIn
, 
uöt32_t
 
numSam∂es
);

57 
uöt32_t
 
¨m_ˇlc_gu¨d_bôs
(uöt32_à
num_adds
);

58 
¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
, 
uöt32_t
 
numSam∂es
, uöt32_à
gu¨d_bôs
);

59 
uöt32_t
 
¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, uöt32_à
numSam∂es
);

60 
uöt32_t
 
¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à*
pOut
, uöt32_à
numSam∂es
);

61 
uöt32_t
 
¨m_ˇlc_2pow
(uöt32_à
gu¨d_bôs
);

	@CMSIS/DSP_Lib/Examples/arm_dotproduct_example/ARM/arm_dotproduct_example_f32.c

86 
	~<m©h.h
>

87 
	~"¨m_m©h.h
"

92 
	#MAX_BLOCKSIZE
 32

	)

93 
	#DELTA
 (0.000001f)

	)

102 
Êﬂt32_t
 
	g§cA_buf_f32
[
MAX_BLOCKSIZE
] =

120 
Êﬂt32_t
 
	g§cB_buf_f32
[
MAX_BLOCKSIZE
] =

136 
Êﬂt32_t
 
	gªfDŸProdOut
 = 5.9273644806352142;

141 
Êﬂt32_t
 
	gmu…Ouçut
[
MAX_BLOCKSIZE
];

142 
Êﬂt32_t
 
	gã°Ouçut
;

144 
¨m_°©us
 
	g°©us
;

146 
öt32_t
 
	$maö
()

148 
uöt32_t
 
i
;

149 
Êﬂt32_t
 
diff
;

152 
	`¨m_mu…_f32
(
§cA_buf_f32
, 
§cB_buf_f32
, 
mu…Ouçut
, 
MAX_BLOCKSIZE
);

156 
i
=0; i< 
MAX_BLOCKSIZE
; i++)

158 
	`¨m_add_f32
(&
ã°Ouçut
, &
mu…Ouçut
[
i
], &testOutput, 1);

162 
diff
 = 
	`Ábsf
(
ªfDŸProdOut
 - 
ã°Ouçut
);

165 if(
diff
 > 
DELTA
)

167 
°©us
 = 
ARM_MATH_TEST_FAILURE
;

170 if–
°©us
 =
ARM_MATH_TEST_FAILURE
)

176 
	}
}

	@CMSIS/DSP_Lib/Examples/arm_dotproduct_example/GCC/arm_dotproduct_example_f32.c

86 
	~<m©h.h
>

87 
	~"¨m_m©h.h
"

92 
	#MAX_BLOCKSIZE
 32

	)

93 
	#DELTA
 (0.000001f)

	)

102 
Êﬂt32_t
 
	g§cA_buf_f32
[
MAX_BLOCKSIZE
] =

120 
Êﬂt32_t
 
	g§cB_buf_f32
[
MAX_BLOCKSIZE
] =

136 
Êﬂt32_t
 
	gªfDŸProdOut
 = 5.9273644806352142;

141 
Êﬂt32_t
 
	gmu…Ouçut
[
MAX_BLOCKSIZE
];

142 
Êﬂt32_t
 
	gã°Ouçut
;

144 
¨m_°©us
 
	g°©us
;

146 
öt32_t
 
	$maö
()

148 
uöt32_t
 
i
;

149 
Êﬂt32_t
 
diff
;

152 
	`¨m_mu…_f32
(
§cA_buf_f32
, 
§cB_buf_f32
, 
mu…Ouçut
, 
MAX_BLOCKSIZE
);

156 
i
=0; i< 
MAX_BLOCKSIZE
; i++)

158 
	`¨m_add_f32
(&
ã°Ouçut
, &
mu…Ouçut
[
i
], &testOutput, 1);

162 
diff
 = 
	`Ábsf
(
ªfDŸProdOut
 - 
ã°Ouçut
);

165 if(
diff
 > 
DELTA
)

167 
°©us
 = 
ARM_MATH_TEST_FAILURE
;

170 if–
°©us
 =
ARM_MATH_TEST_FAILURE
)

176 
	}
}

	@CMSIS/DSP_Lib/Examples/arm_fft_bin_example/ARM/arm_fft_bin_data.c

41 
	~"¨m_m©h.h
"

47 
Êﬂt32_t
 
	gã°I≈ut_f32_10khz
[2048] =

	@CMSIS/DSP_Lib/Examples/arm_fft_bin_example/ARM/arm_fft_bin_example_f32.c

97 
	~"¨m_m©h.h
"

98 
	~"¨m_c⁄°_°ru˘s.h
"

100 
	#TEST_LENGTH_SAMPLES
 2048

	)

105 
Êﬂt32_t
 
ã°I≈ut_f32_10khz
[
TEST_LENGTH_SAMPLES
];

106 
Êﬂt32_t
 
	gã°Ouçut
[
TEST_LENGTH_SAMPLES
/2];

111 
uöt32_t
 
	gf·Size
 = 1024;

112 
uöt32_t
 
	gif·Fœg
 = 0;

113 
uöt32_t
 
	gdoBôRevî£
 = 1;

116 
uöt32_t
 
	gªfIndex
 = 213, 
	gã°Index
 = 0;

122 
öt32_t
 
	$maö
()

125 
¨m_°©us
 
°©us
;

126 
Êﬂt32_t
 
maxVÆue
;

128 
°©us
 = 
ARM_MATH_SUCCESS
;

131 
	`¨m_cf·_f32
(&
¨m_cf·_sR_f32_Àn1024
, 
ã°I≈ut_f32_10khz
, 
if·Fœg
, 
doBôRevî£
);

135 
	`¨m_cm∂x_mag_f32
(
ã°I≈ut_f32_10khz
, 
ã°Ouçut
, 
f·Size
);

138 
	`¨m_max_f32
(
ã°Ouçut
, 
f·Size
, &
maxVÆue
, &
ã°Index
);

140 if(
ã°Index
 !
ªfIndex
)

142 
°©us
 = 
ARM_MATH_TEST_FAILURE
;

150 if–
°©us
 !
ARM_MATH_SUCCESS
)

156 
	}
}

	@CMSIS/DSP_Lib/Examples/arm_fft_bin_example/GCC/arm_fft_bin_data.c

41 
	~"¨m_m©h.h
"

47 
Êﬂt32_t
 
	gã°I≈ut_f32_10khz
[2048] =

	@CMSIS/DSP_Lib/Examples/arm_fft_bin_example/GCC/arm_fft_bin_example_f32.c

97 
	~"¨m_m©h.h
"

98 
	~"¨m_c⁄°_°ru˘s.h
"

100 
	#TEST_LENGTH_SAMPLES
 2048

	)

105 
Êﬂt32_t
 
ã°I≈ut_f32_10khz
[
TEST_LENGTH_SAMPLES
];

106 
Êﬂt32_t
 
	gã°Ouçut
[
TEST_LENGTH_SAMPLES
/2];

111 
uöt32_t
 
	gf·Size
 = 1024;

112 
uöt32_t
 
	gif·Fœg
 = 0;

113 
uöt32_t
 
	gdoBôRevî£
 = 1;

116 
uöt32_t
 
	gªfIndex
 = 213, 
	gã°Index
 = 0;

122 
öt32_t
 
	$maö
()

125 
¨m_°©us
 
°©us
;

126 
Êﬂt32_t
 
maxVÆue
;

128 
°©us
 = 
ARM_MATH_SUCCESS
;

131 
	`¨m_cf·_f32
(&
¨m_cf·_sR_f32_Àn1024
, 
ã°I≈ut_f32_10khz
, 
if·Fœg
, 
doBôRevî£
);

135 
	`¨m_cm∂x_mag_f32
(
ã°I≈ut_f32_10khz
, 
ã°Ouçut
, 
f·Size
);

138 
	`¨m_max_f32
(
ã°Ouçut
, 
f·Size
, &
maxVÆue
, &
ã°Index
);

140 if(
ã°Index
 !
ªfIndex
)

142 
°©us
 = 
ARM_MATH_TEST_FAILURE
;

150 if–
°©us
 !
ARM_MATH_SUCCESS
)

156 
	}
}

	@CMSIS/DSP_Lib/Examples/arm_fir_example/ARM/arm_fir_data.c

41 
	~"¨m_m©h.h
"

47 
Êﬂt32_t
 
	gã°I≈ut_f32_1kHz_15kHz
[320] =

91 
Êﬂt32_t
 
	gªfOuçut
[320] =

	@CMSIS/DSP_Lib/Examples/arm_fir_example/ARM/arm_fir_example_f32.c

125 
	~"¨m_m©h.h
"

126 
	~"m©h_hñ≥r.h
"

132 
	#TEST_LENGTH_SAMPLES
 320

	)

133 
	#SNR_THRESHOLD_F32
 140.0f

	)

134 
	#BLOCK_SIZE
 32

	)

135 
	#NUM_TAPS
 29

	)

142 
Êﬂt32_t
 
ã°I≈ut_f32_1kHz_15kHz
[
TEST_LENGTH_SAMPLES
];

143 
Êﬂt32_t
 
ªfOuçut
[
TEST_LENGTH_SAMPLES
];

149 
Êﬂt32_t
 
	gã°Ouçut
[
TEST_LENGTH_SAMPLES
];

155 
Êﬂt32_t
 
	gfúSèãF32
[
BLOCK_SIZE
 + 
NUM_TAPS
 - 1];

162 c⁄° 
Êﬂt32_t
 
	gfúC€ffs32
[
NUM_TAPS
] = {

173 
uöt32_t
 
	gblockSize
 = 
BLOCK_SIZE
;

174 
uöt32_t
 
	gnumBlocks
 = 
TEST_LENGTH_SAMPLES
/
BLOCK_SIZE
;

176 
Êﬂt32_t
 
	g¢r
;

182 
öt32_t
 
	$maö
()

184 
uöt32_t
 
i
;

185 
¨m_fú_ö°™˚_f32
 
S
;

186 
¨m_°©us
 
°©us
;

187 
Êﬂt32_t
 *
öputF32
, *
ouçutF32
;

190 
öputF32
 = &
ã°I≈ut_f32_1kHz_15kHz
[0];

191 
ouçutF32
 = &
ã°Ouçut
[0];

194 
	`¨m_fú_öô_f32
(&
S
, 
NUM_TAPS
, (
Êﬂt32_t
 *)&
fúC€ffs32
[0], &
fúSèãF32
[0], 
blockSize
);

200 
i
=0; i < 
numBlocks
; i++)

202 
	`¨m_fú_f32
(&
S
, 
öputF32
 + (
i
 * 
blockSize
), 
ouçutF32
 + (i * blockSize), blockSize);

210 
¢r
 = 
	`¨m_¢r_f32
(&
ªfOuçut
[0], &
ã°Ouçut
[0], 
TEST_LENGTH_SAMPLES
);

212 i‡(
¢r
 < 
SNR_THRESHOLD_F32
)

214 
°©us
 = 
ARM_MATH_TEST_FAILURE
;

218 
°©us
 = 
ARM_MATH_SUCCESS
;

225 if–
°©us
 !
ARM_MATH_SUCCESS
)

231 
	}
}

	@CMSIS/DSP_Lib/Examples/arm_fir_example/ARM/math_helper.c

45 
	~<m©h.h
>

50 
	~"m©h_hñ≥r.h
"

62 
	$¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
)

64 
E√rgySig«l
 = 0.0, 
E√rgyEº‹
 = 0.0;

65 
uöt32_t
 
i
;

66 
SNR
;

67 
ãmp
;

68 *
ã°
;

70 
i
 = 0; i < 
buffSize
; i++)

73 
ã°
 = (*)(&
pRef
[
i
]);

74 
ãmp
 = *
ã°
;

76 if(
ãmp
 == 0x7FC00000)

82 
ã°
 = (*)(&
pTe°
[
i
]);

83 
ãmp
 = *
ã°
;

85 if(
ãmp
 == 0x7FC00000)

89 
E√rgySig«l
 +
pRef
[
i
] *ÖRef[i];

90 
E√rgyEº‹
 +(
pRef
[
i
] - 
pTe°
[i]) * (pRef[i] -ÖTest[i]);

94 
ã°
 = (*)(&
E√rgyEº‹
);

95 
ãmp
 = *
ã°
;

97 if(
ãmp
 == 0x7FC00000)

103 
SNR
 = 10 * 
	`log10
 (
E√rgySig«l
 / 
E√rgyEº‹
);

105  (
SNR
);

107 
	}
}

120 
	$¨m_¥ovide_gu¨d_bôs_q15
 (
q15_t
 * 
öput_buf
, 
uöt32_t
 
blockSize
,

121 
uöt32_t
 
gu¨d_bôs
)

123 
uöt32_t
 
i
;

125 
i
 = 0; i < 
blockSize
; i++)

127 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

129 
	}
}

138 
	$¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
)

140 
uöt32_t
 
i
;

142 
i
 = 0; i < 
numSam∂es
; i++)

145 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1048576.0f);

147 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

149 i‡(
pIn
[
i
] == () 1.0)

151 
pOut
[
i
] = 0x000FFFFF;

154 
	}
}

164 
uöt32_t
 
	$¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

166 
uöt32_t
 
i
;

167 
öt32_t
 
diff
, 
diffC∫t
 = 0;

168 
uöt32_t
 
maxDiff
 = 0;

170 
i
 = 0; i < 
numSam∂es
; i++)

172 
diff
 = 
pIn
[
i
] - 
pOut
[i];

173 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

175 if(
diffC∫t
 > 
maxDiff
)

177 
maxDiff
 = 
diffC∫t
;

181 (
maxDiff
);

182 
	}
}

192 
uöt32_t
 
	$¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

194 
uöt32_t
 
i
;

195 
öt32_t
 
diff
, 
diffC∫t
 = 0;

196 
uöt32_t
 
maxDiff
 = 0;

198 
i
 = 0; i < 
numSam∂es
; i++)

200 
diff
 = 
pIn
[
i
] - 
pOut
[i];

201 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

203 if(
diffC∫t
 > 
maxDiff
)

205 
maxDiff
 = 
diffC∫t
;

209 (
maxDiff
);

210 
	}
}

222 
	$¨m_¥ovide_gu¨d_bôs_q31
 (
q31_t
 * 
öput_buf
,

223 
uöt32_t
 
blockSize
,

224 
uöt32_t
 
gu¨d_bôs
)

226 
uöt32_t
 
i
;

228 
i
 = 0; i < 
blockSize
; i++)

230 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

232 
	}
}

244 
	$¨m_¥ovide_gu¨d_bôs_q7
 (
q7_t
 * 
öput_buf
,

245 
uöt32_t
 
blockSize
,

246 
uöt32_t
 
gu¨d_bôs
)

248 
uöt32_t
 
i
;

250 
i
 = 0; i < 
blockSize
; i++)

252 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

254 
	}
}

266 
uöt32_t
 
	$¨m_ˇlc_gu¨d_bôs
 (
uöt32_t
 
num_adds
)

268 
uöt32_t
 
i
 = 1, 
j
 = 0;

270 i‡(
num_adds
 == 1)

275 
i
 < 
num_adds
)

277 
i
 = i * 2;

278 
j
++;

281  (
j
);

282 
	}
}

290 
	$¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
,

291 
uöt32_t
 
numSam∂es
,

292 
uöt32_t
 
gu¨d_bôs
)

294 
uöt32_t
 
i
;

296 
i
 = 0; i < 
numSam∂es
; i++)

298 
pIn
[
i
] =ÖIn[i] * 
	`¨m_ˇlc_2pow
(
gu¨d_bôs
);

300 
	}
}

307 
uöt32_t
 
	$¨m_ˇlc_2pow
(
uöt32_t
 
numShi·s
)

310 
uöt32_t
 
i
, 
vÆ
 = 1;

312 
i
 = 0; i < 
numShi·s
; i++)

314 
vÆ
 = val * 2;

317 (
vÆ
);

318 
	}
}

329 
	$¨m_Êﬂt_to_q14
 (*
pIn
, 
q15_t
 * 
pOut
,

330 
uöt32_t
 
numSam∂es
)

332 
uöt32_t
 
i
;

334 
i
 = 0; i < 
numSam∂es
; i++)

337 
pOut
[
i
] = (
q15_t
Ë(
pIn
[i] * 16384.0f);

339 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

341 i‡(
pIn
[
i
] == () 2.0)

343 
pOut
[
i
] = 0x7FFF;

348 
	}
}

358 
	$¨m_Êﬂt_to_q30
 (*
pIn
, 
q31_t
 * 
pOut
,

359 
uöt32_t
 
numSam∂es
)

361 
uöt32_t
 
i
;

363 
i
 = 0; i < 
numSam∂es
; i++)

366 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1073741824.0f);

368 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

370 i‡(
pIn
[
i
] == () 2.0)

372 
pOut
[
i
] = 0x7FFFFFFF;

375 
	}
}

384 
	$¨m_Êﬂt_to_q29
 (*
pIn
, 
q31_t
 * 
pOut
,

385 
uöt32_t
 
numSam∂es
)

387 
uöt32_t
 
i
;

389 
i
 = 0; i < 
numSam∂es
; i++)

392 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 536870912.0f);

394 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

396 i‡(
pIn
[
i
] == () 4.0)

398 
pOut
[
i
] = 0x7FFFFFFF;

401 
	}
}

411 
	$¨m_Êﬂt_to_q28
 (*
pIn
, 
q31_t
 * 
pOut
,

412 
uöt32_t
 
numSam∂es
)

414 
uöt32_t
 
i
;

416 
i
 = 0; i < 
numSam∂es
; i++)

419 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 268435456.0f);

421 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

423 i‡(
pIn
[
i
] == () 8.0)

425 
pOut
[
i
] = 0x7FFFFFFF;

428 
	}
}

438 
	$¨m_˛ù_f32
 (*
pIn
, 
uöt32_t
 
numSam∂es
)

440 
uöt32_t
 
i
;

442 
i
 = 0; i < 
numSam∂es
; i++)

444 if(
pIn
[
i
] > 1.0f)

446 
pIn
[
i
] = 1.0;

448 if–
pIn
[
i
] < -1.0f)

450 
pIn
[
i
] = -1.0;

454 
	}
}

	@CMSIS/DSP_Lib/Examples/arm_fir_example/ARM/math_helper.h

43 
	~"¨m_m©h.h
"

45 #i‚de‡
MATH_HELPER_H


46 
	#MATH_HELPER_H


	)

48 
¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
);

49 
¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
);

50 
¨m_¥ovide_gu¨d_bôs_q15
(
q15_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

51 
¨m_¥ovide_gu¨d_bôs_q31
(
q31_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

52 
¨m_Êﬂt_to_q14
(*
pIn
, 
q15_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

53 
¨m_Êﬂt_to_q29
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

54 
¨m_Êﬂt_to_q28
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

55 
¨m_Êﬂt_to_q30
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

56 
¨m_˛ù_f32
(*
pIn
, 
uöt32_t
 
numSam∂es
);

57 
uöt32_t
 
¨m_ˇlc_gu¨d_bôs
(uöt32_à
num_adds
);

58 
¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
, 
uöt32_t
 
numSam∂es
, uöt32_à
gu¨d_bôs
);

59 
uöt32_t
 
¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, uöt32_à
numSam∂es
);

60 
uöt32_t
 
¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à*
pOut
, uöt32_à
numSam∂es
);

61 
uöt32_t
 
¨m_ˇlc_2pow
(uöt32_à
gu¨d_bôs
);

	@CMSIS/DSP_Lib/Examples/arm_graphic_equalizer_example/ARM/arm_graphic_equalizer_data.c

41 
	~"¨m_m©h.h
"

43 
Êﬂt32_t
 
	gã°RefOuçut_f32
[320] = {

91 
Êﬂt32_t
 
	gã°I≈ut_f32
[320] =

	@CMSIS/DSP_Lib/Examples/arm_graphic_equalizer_example/ARM/arm_graphic_equalizer_example_q31.c

129 
	~"¨m_m©h.h
"

130 
	~"m©h_hñ≥r.h
"

133 
	#TESTLENGTH
 320

	)

136 
	#BLOCKSIZE
 32

	)

139 
	#NUMBLOCKS
 (
TESTLENGTH
/
BLOCKSIZE
)

	)

142 
	#NUMSTAGES
 2

	)

144 
	#SNR_THRESHOLD_F32
 98

	)

150 
Êﬂt32_t
 
ã°I≈ut_f32
[
TESTLENGTH
];

151 
Êﬂt32_t
 
	gã°Ouçut
[
TESTLENGTH
];

153 
Êﬂt32_t
 
ã°RefOuçut_f32
[
TESTLENGTH
];

159 
q63_t
 
	gbiquadSèãB™d1Q31
[4 * 2];

160 
q63_t
 
	gbiquadSèãB™d2Q31
[4 * 2];

161 
q31_t
 
	gbiquadSèãB™d3Q31
[4 * 2];

162 
q31_t
 
	gbiquadSèãB™d4Q31
[4 * 2];

163 
q31_t
 
	gbiquadSèãB™d5Q31
[4 * 2];

169 
q31_t
 
	göputQ31
[
BLOCKSIZE
];

170 
q31_t
 
	gouçutQ31
[
BLOCKSIZE
];

183 c⁄° 
q31_t
 
	gc€ffTabÀ
[950] = {

292 
	ggaöDB
[5] = {0, -3, 6, 4, -6};

294 
Êﬂt32_t
 
	g¢r
;

301 
öt32_t
 
	$maö
()

303 
Êﬂt32_t
 *
öputF32
, *
ouçutF32
;

304 
¨m_biquad_ˇs_df1_32x64_ös_q31
 
S1
;

305 
¨m_biquad_ˇs_df1_32x64_ös_q31
 
S2
;

306 
¨m_biquad_ˇsd_df1_ö°_q31
 
S3
;

307 
¨m_biquad_ˇsd_df1_ö°_q31
 
S4
;

308 
¨m_biquad_ˇsd_df1_ö°_q31
 
S5
;

309 
i
;

310 
öt32_t
 
°©us
;

312 
öputF32
 = &
ã°I≈ut_f32
[0];

313 
ouçutF32
 = &
ã°Ouçut
[0];

317 
	`¨m_biquad_ˇs_df1_32x64_öô_q31
(&
S1
, 
NUMSTAGES
,

318 (
q31_t
 *Ë&
c€ffTabÀ
[190*0 + 10*(
gaöDB
[0] + 9)],

319 &
biquadSèãB™d1Q31
[0], 2);

321 
	`¨m_biquad_ˇs_df1_32x64_öô_q31
(&
S2
, 
NUMSTAGES
,

322 (
q31_t
 *Ë&
c€ffTabÀ
[190*1 + 10*(
gaöDB
[1] + 9)],

323 &
biquadSèãB™d2Q31
[0], 2);

325 
	`¨m_biquad_ˇsˇde_df1_öô_q31
(&
S3
, 
NUMSTAGES
,

326 (
q31_t
 *Ë&
c€ffTabÀ
[190*2 + 10*(
gaöDB
[2] + 9)],

327 &
biquadSèãB™d3Q31
[0], 2);

329 
	`¨m_biquad_ˇsˇde_df1_öô_q31
(&
S4
, 
NUMSTAGES
,

330 (
q31_t
 *Ë&
c€ffTabÀ
[190*3 + 10*(
gaöDB
[3] + 9)],

331 &
biquadSèãB™d4Q31
[0], 2);

333 
	`¨m_biquad_ˇsˇde_df1_öô_q31
(&
S5
, 
NUMSTAGES
,

334 (
q31_t
 *Ë&
c€ffTabÀ
[190*4 + 10*(
gaöDB
[4] + 9)],

335 &
biquadSèãB™d5Q31
[0], 2);

341 
i
=0; i < 
NUMBLOCKS
; i++)

348 
	`¨m_Êﬂt_to_q31
(
öputF32
 + (
i
*
BLOCKSIZE
), 
öputQ31
, BLOCKSIZE);

355 
	`¨m_sˇÀ_q31
(
öputQ31
, 0x7FFFFFFF, -3, i≈utQ31, 
BLOCKSIZE
);

361 
	`¨m_biquad_ˇs_df1_32x64_q31
(&
S1
, 
öputQ31
, 
ouçutQ31
, 
BLOCKSIZE
);

362 
	`¨m_biquad_ˇs_df1_32x64_q31
(&
S2
, 
ouçutQ31
, ouçutQ31, 
BLOCKSIZE
);

368 
	`¨m_biquad_ˇsˇde_df1_q31
(&
S3
, 
ouçutQ31
, ouçutQ31, 
BLOCKSIZE
);

369 
	`¨m_biquad_ˇsˇde_df1_q31
(&
S4
, 
ouçutQ31
, ouçutQ31, 
BLOCKSIZE
);

370 
	`¨m_biquad_ˇsˇde_df1_q31
(&
S5
, 
ouçutQ31
, ouçutQ31, 
BLOCKSIZE
);

376 
	`¨m_q31_to_Êﬂt
(
ouçutQ31
, 
ouçutF32
 + (
i
 * 
BLOCKSIZE
), BLOCKSIZE);

382 
	`¨m_sˇÀ_f32
(
ouçutF32
 + (
i
 * 
BLOCKSIZE
), 8.0f, outputF32 + (i * BLOCKSIZE), BLOCKSIZE);

385 
¢r
 = 
	`¨m_¢r_f32
(
ã°RefOuçut_f32
, 
ã°Ouçut
, 
TESTLENGTH
);

387 i‡(
¢r
 < 
SNR_THRESHOLD_F32
)

389 
°©us
 = 
ARM_MATH_TEST_FAILURE
;

393 
°©us
 = 
ARM_MATH_SUCCESS
;

400 if–
°©us
 !
ARM_MATH_SUCCESS
)

406 
	}
}

	@CMSIS/DSP_Lib/Examples/arm_graphic_equalizer_example/ARM/math_helper.c

45 
	~<m©h.h
>

50 
	~"m©h_hñ≥r.h
"

62 
	$¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
)

64 
E√rgySig«l
 = 0.0, 
E√rgyEº‹
 = 0.0;

65 
uöt32_t
 
i
;

66 
SNR
;

67 
ãmp
;

68 *
ã°
;

70 
i
 = 0; i < 
buffSize
; i++)

73 
ã°
 = (*)(&
pRef
[
i
]);

74 
ãmp
 = *
ã°
;

76 if(
ãmp
 == 0x7FC00000)

82 
ã°
 = (*)(&
pTe°
[
i
]);

83 
ãmp
 = *
ã°
;

85 if(
ãmp
 == 0x7FC00000)

89 
E√rgySig«l
 +
pRef
[
i
] *ÖRef[i];

90 
E√rgyEº‹
 +(
pRef
[
i
] - 
pTe°
[i]) * (pRef[i] -ÖTest[i]);

94 
ã°
 = (*)(&
E√rgyEº‹
);

95 
ãmp
 = *
ã°
;

97 if(
ãmp
 == 0x7FC00000)

103 
SNR
 = 10 * 
	`log10
 (
E√rgySig«l
 / 
E√rgyEº‹
);

105  (
SNR
);

107 
	}
}

120 
	$¨m_¥ovide_gu¨d_bôs_q15
 (
q15_t
 * 
öput_buf
, 
uöt32_t
 
blockSize
,

121 
uöt32_t
 
gu¨d_bôs
)

123 
uöt32_t
 
i
;

125 
i
 = 0; i < 
blockSize
; i++)

127 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

129 
	}
}

138 
	$¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
)

140 
uöt32_t
 
i
;

142 
i
 = 0; i < 
numSam∂es
; i++)

145 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1048576.0f);

147 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

149 i‡(
pIn
[
i
] == () 1.0)

151 
pOut
[
i
] = 0x000FFFFF;

154 
	}
}

164 
uöt32_t
 
	$¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

166 
uöt32_t
 
i
;

167 
öt32_t
 
diff
, 
diffC∫t
 = 0;

168 
uöt32_t
 
maxDiff
 = 0;

170 
i
 = 0; i < 
numSam∂es
; i++)

172 
diff
 = 
pIn
[
i
] - 
pOut
[i];

173 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

175 if(
diffC∫t
 > 
maxDiff
)

177 
maxDiff
 = 
diffC∫t
;

181 (
maxDiff
);

182 
	}
}

192 
uöt32_t
 
	$¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

194 
uöt32_t
 
i
;

195 
öt32_t
 
diff
, 
diffC∫t
 = 0;

196 
uöt32_t
 
maxDiff
 = 0;

198 
i
 = 0; i < 
numSam∂es
; i++)

200 
diff
 = 
pIn
[
i
] - 
pOut
[i];

201 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

203 if(
diffC∫t
 > 
maxDiff
)

205 
maxDiff
 = 
diffC∫t
;

209 (
maxDiff
);

210 
	}
}

222 
	$¨m_¥ovide_gu¨d_bôs_q31
 (
q31_t
 * 
öput_buf
,

223 
uöt32_t
 
blockSize
,

224 
uöt32_t
 
gu¨d_bôs
)

226 
uöt32_t
 
i
;

228 
i
 = 0; i < 
blockSize
; i++)

230 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

232 
	}
}

244 
	$¨m_¥ovide_gu¨d_bôs_q7
 (
q7_t
 * 
öput_buf
,

245 
uöt32_t
 
blockSize
,

246 
uöt32_t
 
gu¨d_bôs
)

248 
uöt32_t
 
i
;

250 
i
 = 0; i < 
blockSize
; i++)

252 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

254 
	}
}

266 
uöt32_t
 
	$¨m_ˇlc_gu¨d_bôs
 (
uöt32_t
 
num_adds
)

268 
uöt32_t
 
i
 = 1, 
j
 = 0;

270 i‡(
num_adds
 == 1)

275 
i
 < 
num_adds
)

277 
i
 = i * 2;

278 
j
++;

281  (
j
);

282 
	}
}

290 
	$¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
,

291 
uöt32_t
 
numSam∂es
,

292 
uöt32_t
 
gu¨d_bôs
)

294 
uöt32_t
 
i
;

296 
i
 = 0; i < 
numSam∂es
; i++)

298 
pIn
[
i
] =ÖIn[i] * 
	`¨m_ˇlc_2pow
(
gu¨d_bôs
);

300 
	}
}

307 
uöt32_t
 
	$¨m_ˇlc_2pow
(
uöt32_t
 
numShi·s
)

310 
uöt32_t
 
i
, 
vÆ
 = 1;

312 
i
 = 0; i < 
numShi·s
; i++)

314 
vÆ
 = val * 2;

317 (
vÆ
);

318 
	}
}

329 
	$¨m_Êﬂt_to_q14
 (*
pIn
, 
q15_t
 * 
pOut
,

330 
uöt32_t
 
numSam∂es
)

332 
uöt32_t
 
i
;

334 
i
 = 0; i < 
numSam∂es
; i++)

337 
pOut
[
i
] = (
q15_t
Ë(
pIn
[i] * 16384.0f);

339 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

341 i‡(
pIn
[
i
] == () 2.0)

343 
pOut
[
i
] = 0x7FFF;

348 
	}
}

358 
	$¨m_Êﬂt_to_q30
 (*
pIn
, 
q31_t
 * 
pOut
,

359 
uöt32_t
 
numSam∂es
)

361 
uöt32_t
 
i
;

363 
i
 = 0; i < 
numSam∂es
; i++)

366 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1073741824.0f);

368 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

370 i‡(
pIn
[
i
] == () 2.0)

372 
pOut
[
i
] = 0x7FFFFFFF;

375 
	}
}

384 
	$¨m_Êﬂt_to_q29
 (*
pIn
, 
q31_t
 * 
pOut
,

385 
uöt32_t
 
numSam∂es
)

387 
uöt32_t
 
i
;

389 
i
 = 0; i < 
numSam∂es
; i++)

392 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 536870912.0f);

394 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

396 i‡(
pIn
[
i
] == () 4.0)

398 
pOut
[
i
] = 0x7FFFFFFF;

401 
	}
}

411 
	$¨m_Êﬂt_to_q28
 (*
pIn
, 
q31_t
 * 
pOut
,

412 
uöt32_t
 
numSam∂es
)

414 
uöt32_t
 
i
;

416 
i
 = 0; i < 
numSam∂es
; i++)

419 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 268435456.0f);

421 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

423 i‡(
pIn
[
i
] == () 8.0)

425 
pOut
[
i
] = 0x7FFFFFFF;

428 
	}
}

438 
	$¨m_˛ù_f32
 (*
pIn
, 
uöt32_t
 
numSam∂es
)

440 
uöt32_t
 
i
;

442 
i
 = 0; i < 
numSam∂es
; i++)

444 if(
pIn
[
i
] > 1.0f)

446 
pIn
[
i
] = 1.0;

448 if–
pIn
[
i
] < -1.0f)

450 
pIn
[
i
] = -1.0;

454 
	}
}

	@CMSIS/DSP_Lib/Examples/arm_graphic_equalizer_example/ARM/math_helper.h

43 
	~"¨m_m©h.h
"

45 #i‚de‡
MATH_HELPER_H


46 
	#MATH_HELPER_H


	)

48 
¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
);

49 
¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
);

50 
¨m_¥ovide_gu¨d_bôs_q15
(
q15_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

51 
¨m_¥ovide_gu¨d_bôs_q31
(
q31_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

52 
¨m_Êﬂt_to_q14
(*
pIn
, 
q15_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

53 
¨m_Êﬂt_to_q29
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

54 
¨m_Êﬂt_to_q28
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

55 
¨m_Êﬂt_to_q30
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

56 
¨m_˛ù_f32
(*
pIn
, 
uöt32_t
 
numSam∂es
);

57 
uöt32_t
 
¨m_ˇlc_gu¨d_bôs
(uöt32_à
num_adds
);

58 
¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
, 
uöt32_t
 
numSam∂es
, uöt32_à
gu¨d_bôs
);

59 
uöt32_t
 
¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, uöt32_à
numSam∂es
);

60 
uöt32_t
 
¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à*
pOut
, uöt32_à
numSam∂es
);

61 
uöt32_t
 
¨m_ˇlc_2pow
(uöt32_à
gu¨d_bôs
);

	@CMSIS/DSP_Lib/Examples/arm_linear_interp_example/ARM/arm_linear_interp_data.c

49 
	g¨m_löór_öãªp_èbÀ
[188495] = {

	@CMSIS/DSP_Lib/Examples/arm_linear_interp_example/ARM/arm_linear_interp_example_f32.c

87 
	~"¨m_m©h.h
"

88 
	~"m©h_hñ≥r.h
"

90 
	#SNR_THRESHOLD
 90

	)

91 
	#TEST_LENGTH_SAMPLES
 10

	)

92 
	#XSPACING
 (0.00005f)

	)

100 
Êﬂt32_t
 
	gã°I≈utSö_f32
[
TEST_LENGTH_SAMPLES
] =

113 
Êﬂt32_t
 
	gã°RefSöOuçut32_f32
[
TEST_LENGTH_SAMPLES
] =

125 
Êﬂt32_t
 
	gã°Ouçut
[
TEST_LENGTH_SAMPLES
];

130 
Êﬂt32_t
 
	gã°LöI¡Ouçut
[
TEST_LENGTH_SAMPLES
];

135 
¨m_löór_öãªp_èbÀ
[188495];

140 
Êﬂt32_t
 
	g¢r1
;

141 
Êﬂt32_t
 
	g¢r2
;

146 
öt32_t
 
	$maö
()

148 
uöt32_t
 
i
;

149 
¨m_°©us
 
°©us
;

151 
¨m_löór_öãΩ_ö°™˚_f32
 
S
 = {188495, -3.141592653589793238, 
XSPACING
, &
¨m_löór_öãªp_èbÀ
[0]};

156 
i
=0; i< 
TEST_LENGTH_SAMPLES
; i++)

158 
ã°Ouçut
[
i
] = 
	`¨m_sö_f32
(
ã°I≈utSö_f32
[i]);

165 
i
=0; i< 
TEST_LENGTH_SAMPLES
; i++)

167 
ã°LöI¡Ouçut
[
i
] = 
	`¨m_löór_öãΩ_f32
(&
S
, 
ã°I≈utSö_f32
[i]);

173 
¢r1
 = 
	`¨m_¢r_f32
(
ã°RefSöOuçut32_f32
, 
ã°Ouçut
, 2);

178 
¢r2
 = 
	`¨m_¢r_f32
(
ã°RefSöOuçut32_f32
, 
ã°LöI¡Ouçut
, 2);

183 if–
¢r2
 > 
¢r1
)

185 
°©us
 = 
ARM_MATH_SUCCESS
;

189 
°©us
 = 
ARM_MATH_TEST_FAILURE
;

196 if–
°©us
 !
ARM_MATH_SUCCESS
)

202 
	}
}

	@CMSIS/DSP_Lib/Examples/arm_linear_interp_example/ARM/math_helper.c

45 
	~<m©h.h
>

50 
	~"m©h_hñ≥r.h
"

62 
	$¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
)

64 
E√rgySig«l
 = 0.0, 
E√rgyEº‹
 = 0.0;

65 
uöt32_t
 
i
;

66 
SNR
;

67 
ãmp
;

68 *
ã°
;

70 
i
 = 0; i < 
buffSize
; i++)

73 
ã°
 = (*)(&
pRef
[
i
]);

74 
ãmp
 = *
ã°
;

76 if(
ãmp
 == 0x7FC00000)

82 
ã°
 = (*)(&
pTe°
[
i
]);

83 
ãmp
 = *
ã°
;

85 if(
ãmp
 == 0x7FC00000)

89 
E√rgySig«l
 +
pRef
[
i
] *ÖRef[i];

90 
E√rgyEº‹
 +(
pRef
[
i
] - 
pTe°
[i]) * (pRef[i] -ÖTest[i]);

94 
ã°
 = (*)(&
E√rgyEº‹
);

95 
ãmp
 = *
ã°
;

97 if(
ãmp
 == 0x7FC00000)

103 
SNR
 = 10 * 
	`log10
 (
E√rgySig«l
 / 
E√rgyEº‹
);

105  (
SNR
);

107 
	}
}

120 
	$¨m_¥ovide_gu¨d_bôs_q15
 (
q15_t
 * 
öput_buf
, 
uöt32_t
 
blockSize
,

121 
uöt32_t
 
gu¨d_bôs
)

123 
uöt32_t
 
i
;

125 
i
 = 0; i < 
blockSize
; i++)

127 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

129 
	}
}

138 
	$¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
)

140 
uöt32_t
 
i
;

142 
i
 = 0; i < 
numSam∂es
; i++)

145 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1048576.0f);

147 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

149 i‡(
pIn
[
i
] == () 1.0)

151 
pOut
[
i
] = 0x000FFFFF;

154 
	}
}

164 
uöt32_t
 
	$¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

166 
uöt32_t
 
i
;

167 
öt32_t
 
diff
, 
diffC∫t
 = 0;

168 
uöt32_t
 
maxDiff
 = 0;

170 
i
 = 0; i < 
numSam∂es
; i++)

172 
diff
 = 
pIn
[
i
] - 
pOut
[i];

173 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

175 if(
diffC∫t
 > 
maxDiff
)

177 
maxDiff
 = 
diffC∫t
;

181 (
maxDiff
);

182 
	}
}

192 
uöt32_t
 
	$¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

194 
uöt32_t
 
i
;

195 
öt32_t
 
diff
, 
diffC∫t
 = 0;

196 
uöt32_t
 
maxDiff
 = 0;

198 
i
 = 0; i < 
numSam∂es
; i++)

200 
diff
 = 
pIn
[
i
] - 
pOut
[i];

201 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

203 if(
diffC∫t
 > 
maxDiff
)

205 
maxDiff
 = 
diffC∫t
;

209 (
maxDiff
);

210 
	}
}

222 
	$¨m_¥ovide_gu¨d_bôs_q31
 (
q31_t
 * 
öput_buf
,

223 
uöt32_t
 
blockSize
,

224 
uöt32_t
 
gu¨d_bôs
)

226 
uöt32_t
 
i
;

228 
i
 = 0; i < 
blockSize
; i++)

230 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

232 
	}
}

244 
	$¨m_¥ovide_gu¨d_bôs_q7
 (
q7_t
 * 
öput_buf
,

245 
uöt32_t
 
blockSize
,

246 
uöt32_t
 
gu¨d_bôs
)

248 
uöt32_t
 
i
;

250 
i
 = 0; i < 
blockSize
; i++)

252 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

254 
	}
}

266 
uöt32_t
 
	$¨m_ˇlc_gu¨d_bôs
 (
uöt32_t
 
num_adds
)

268 
uöt32_t
 
i
 = 1, 
j
 = 0;

270 i‡(
num_adds
 == 1)

275 
i
 < 
num_adds
)

277 
i
 = i * 2;

278 
j
++;

281  (
j
);

282 
	}
}

290 
	$¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
,

291 
uöt32_t
 
numSam∂es
,

292 
uöt32_t
 
gu¨d_bôs
)

294 
uöt32_t
 
i
;

296 
i
 = 0; i < 
numSam∂es
; i++)

298 
pIn
[
i
] =ÖIn[i] * 
	`¨m_ˇlc_2pow
(
gu¨d_bôs
);

300 
	}
}

307 
uöt32_t
 
	$¨m_ˇlc_2pow
(
uöt32_t
 
numShi·s
)

310 
uöt32_t
 
i
, 
vÆ
 = 1;

312 
i
 = 0; i < 
numShi·s
; i++)

314 
vÆ
 = val * 2;

317 (
vÆ
);

318 
	}
}

329 
	$¨m_Êﬂt_to_q14
 (*
pIn
, 
q15_t
 * 
pOut
,

330 
uöt32_t
 
numSam∂es
)

332 
uöt32_t
 
i
;

334 
i
 = 0; i < 
numSam∂es
; i++)

337 
pOut
[
i
] = (
q15_t
Ë(
pIn
[i] * 16384.0f);

339 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

341 i‡(
pIn
[
i
] == () 2.0)

343 
pOut
[
i
] = 0x7FFF;

348 
	}
}

358 
	$¨m_Êﬂt_to_q30
 (*
pIn
, 
q31_t
 * 
pOut
,

359 
uöt32_t
 
numSam∂es
)

361 
uöt32_t
 
i
;

363 
i
 = 0; i < 
numSam∂es
; i++)

366 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1073741824.0f);

368 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

370 i‡(
pIn
[
i
] == () 2.0)

372 
pOut
[
i
] = 0x7FFFFFFF;

375 
	}
}

384 
	$¨m_Êﬂt_to_q29
 (*
pIn
, 
q31_t
 * 
pOut
,

385 
uöt32_t
 
numSam∂es
)

387 
uöt32_t
 
i
;

389 
i
 = 0; i < 
numSam∂es
; i++)

392 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 536870912.0f);

394 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

396 i‡(
pIn
[
i
] == () 4.0)

398 
pOut
[
i
] = 0x7FFFFFFF;

401 
	}
}

411 
	$¨m_Êﬂt_to_q28
 (*
pIn
, 
q31_t
 * 
pOut
,

412 
uöt32_t
 
numSam∂es
)

414 
uöt32_t
 
i
;

416 
i
 = 0; i < 
numSam∂es
; i++)

419 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 268435456.0f);

421 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

423 i‡(
pIn
[
i
] == () 8.0)

425 
pOut
[
i
] = 0x7FFFFFFF;

428 
	}
}

438 
	$¨m_˛ù_f32
 (*
pIn
, 
uöt32_t
 
numSam∂es
)

440 
uöt32_t
 
i
;

442 
i
 = 0; i < 
numSam∂es
; i++)

444 if(
pIn
[
i
] > 1.0f)

446 
pIn
[
i
] = 1.0;

448 if–
pIn
[
i
] < -1.0f)

450 
pIn
[
i
] = -1.0;

454 
	}
}

	@CMSIS/DSP_Lib/Examples/arm_linear_interp_example/ARM/math_helper.h

43 
	~"¨m_m©h.h
"

45 #i‚de‡
MATH_HELPER_H


46 
	#MATH_HELPER_H


	)

48 
¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
);

49 
¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
);

50 
¨m_¥ovide_gu¨d_bôs_q15
(
q15_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

51 
¨m_¥ovide_gu¨d_bôs_q31
(
q31_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

52 
¨m_Êﬂt_to_q14
(*
pIn
, 
q15_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

53 
¨m_Êﬂt_to_q29
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

54 
¨m_Êﬂt_to_q28
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

55 
¨m_Êﬂt_to_q30
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

56 
¨m_˛ù_f32
(*
pIn
, 
uöt32_t
 
numSam∂es
);

57 
uöt32_t
 
¨m_ˇlc_gu¨d_bôs
(uöt32_à
num_adds
);

58 
¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
, 
uöt32_t
 
numSam∂es
, uöt32_à
gu¨d_bôs
);

59 
uöt32_t
 
¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, uöt32_à
numSam∂es
);

60 
uöt32_t
 
¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à*
pOut
, uöt32_à
numSam∂es
);

61 
uöt32_t
 
¨m_ˇlc_2pow
(uöt32_à
gu¨d_bôs
);

	@CMSIS/DSP_Lib/Examples/arm_matrix_example/ARM/arm_matrix_example_f32.c

93 
	~"¨m_m©h.h
"

94 
	~"m©h_hñ≥r.h
"

96 
	#SNR_THRESHOLD
 90

	)

103 c⁄° 
Êﬂt32_t
 
	gB_f32
[4] =

112 c⁄° 
Êﬂt32_t
 
	gA_f32
[16] =

126 
Êﬂt32_t
 
	gAT_f32
[16];

128 
Êﬂt32_t
 
	gATMA_f32
[16];

130 
Êﬂt32_t
 
	gATMAI_f32
[16];

132 
Êﬂt32_t
 
	gX_f32
[4];

137 c⁄° 
Êﬂt32_t
 
	gxRef_f32
[4] = {73.0, 8.0, 21.25, 2.875};

139 
Êﬂt32_t
 
	g¢r
;

146 
öt32_t
 
	$maö
()

149 
¨m_m©rix_ö°™˚_f32
 
A
;

150 
¨m_m©rix_ö°™˚_f32
 
AT
;

151 
¨m_m©rix_ö°™˚_f32
 
ATMA
;

152 
¨m_m©rix_ö°™˚_f32
 
ATMAI
;

153 
¨m_m©rix_ö°™˚_f32
 
B
;

154 
¨m_m©rix_ö°™˚_f32
 
X
;

156 
uöt32_t
 
§cRows
, 
§cCﬁumns
;

157 
¨m_°©us
 
°©us
;

160 
§cRows
 = 4;

161 
§cCﬁumns
 = 4;

162 
	`¨m_m©_öô_f32
(&
A
, 
§cRows
, 
§cCﬁumns
, (
Êﬂt32_t
 *)
A_f32
);

165 
§cRows
 = 4;

166 
§cCﬁumns
 = 4;

167 
	`¨m_m©_öô_f32
(&
AT
, 
§cRows
, 
§cCﬁumns
, 
AT_f32
);

170 
°©us
 = 
	`¨m_m©_å™s_f32
(&
A
, &
AT
);

174 
§cRows
 = 4;

175 
§cCﬁumns
 = 4;

176 
	`¨m_m©_öô_f32
(&
ATMA
, 
§cRows
, 
§cCﬁumns
, 
ATMA_f32
);

179 
°©us
 = 
	`¨m_m©_mu…_f32
(&
AT
, &
A
, &
ATMA
);

182 
§cRows
 = 4;

183 
§cCﬁumns
 = 4;

184 
	`¨m_m©_öô_f32
(&
ATMAI
, 
§cRows
, 
§cCﬁumns
, 
ATMAI_f32
);

187 
°©us
 = 
	`¨m_m©_övî£_f32
(&
ATMA
, &
ATMAI
);

190 
°©us
 = 
	`¨m_m©_mu…_f32
(&
ATMAI
, &
AT
, &
ATMA
);

193 
§cRows
 = 4;

194 
§cCﬁumns
 = 1;

195 
	`¨m_m©_öô_f32
(&
B
, 
§cRows
, 
§cCﬁumns
, (
Êﬂt32_t
 *)
B_f32
);

198 
§cRows
 = 4;

199 
§cCﬁumns
 = 1;

200 
	`¨m_m©_öô_f32
(&
X
, 
§cRows
, 
§cCﬁumns
, 
X_f32
);

203 
°©us
 = 
	`¨m_m©_mu…_f32
(&
ATMA
, &
B
, &
X
);

206 
¢r
 = 
	`¨m_¢r_f32
((
Êﬂt32_t
 *)
xRef_f32
, 
X_f32
, 4);

211 if–
¢r
 > 
SNR_THRESHOLD
)

213 
°©us
 = 
ARM_MATH_SUCCESS
;

217 
°©us
 = 
ARM_MATH_TEST_FAILURE
;

225 if–
°©us
 !
ARM_MATH_SUCCESS
)

231 
	}
}

	@CMSIS/DSP_Lib/Examples/arm_matrix_example/ARM/math_helper.c

45 
	~<m©h.h
>

50 
	~"m©h_hñ≥r.h
"

62 
	$¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
)

64 
E√rgySig«l
 = 0.0, 
E√rgyEº‹
 = 0.0;

65 
uöt32_t
 
i
;

66 
SNR
;

67 
ãmp
;

68 *
ã°
;

70 
i
 = 0; i < 
buffSize
; i++)

73 
ã°
 = (*)(&
pRef
[
i
]);

74 
ãmp
 = *
ã°
;

76 if(
ãmp
 == 0x7FC00000)

82 
ã°
 = (*)(&
pTe°
[
i
]);

83 
ãmp
 = *
ã°
;

85 if(
ãmp
 == 0x7FC00000)

89 
E√rgySig«l
 +
pRef
[
i
] *ÖRef[i];

90 
E√rgyEº‹
 +(
pRef
[
i
] - 
pTe°
[i]) * (pRef[i] -ÖTest[i]);

94 
ã°
 = (*)(&
E√rgyEº‹
);

95 
ãmp
 = *
ã°
;

97 if(
ãmp
 == 0x7FC00000)

103 
SNR
 = 10 * 
	`log10
 (
E√rgySig«l
 / 
E√rgyEº‹
);

105  (
SNR
);

107 
	}
}

120 
	$¨m_¥ovide_gu¨d_bôs_q15
 (
q15_t
 * 
öput_buf
, 
uöt32_t
 
blockSize
,

121 
uöt32_t
 
gu¨d_bôs
)

123 
uöt32_t
 
i
;

125 
i
 = 0; i < 
blockSize
; i++)

127 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

129 
	}
}

138 
	$¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
)

140 
uöt32_t
 
i
;

142 
i
 = 0; i < 
numSam∂es
; i++)

145 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1048576.0f);

147 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

149 i‡(
pIn
[
i
] == () 1.0)

151 
pOut
[
i
] = 0x000FFFFF;

154 
	}
}

164 
uöt32_t
 
	$¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

166 
uöt32_t
 
i
;

167 
öt32_t
 
diff
, 
diffC∫t
 = 0;

168 
uöt32_t
 
maxDiff
 = 0;

170 
i
 = 0; i < 
numSam∂es
; i++)

172 
diff
 = 
pIn
[
i
] - 
pOut
[i];

173 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

175 if(
diffC∫t
 > 
maxDiff
)

177 
maxDiff
 = 
diffC∫t
;

181 (
maxDiff
);

182 
	}
}

192 
uöt32_t
 
	$¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

194 
uöt32_t
 
i
;

195 
öt32_t
 
diff
, 
diffC∫t
 = 0;

196 
uöt32_t
 
maxDiff
 = 0;

198 
i
 = 0; i < 
numSam∂es
; i++)

200 
diff
 = 
pIn
[
i
] - 
pOut
[i];

201 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

203 if(
diffC∫t
 > 
maxDiff
)

205 
maxDiff
 = 
diffC∫t
;

209 (
maxDiff
);

210 
	}
}

222 
	$¨m_¥ovide_gu¨d_bôs_q31
 (
q31_t
 * 
öput_buf
,

223 
uöt32_t
 
blockSize
,

224 
uöt32_t
 
gu¨d_bôs
)

226 
uöt32_t
 
i
;

228 
i
 = 0; i < 
blockSize
; i++)

230 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

232 
	}
}

244 
	$¨m_¥ovide_gu¨d_bôs_q7
 (
q7_t
 * 
öput_buf
,

245 
uöt32_t
 
blockSize
,

246 
uöt32_t
 
gu¨d_bôs
)

248 
uöt32_t
 
i
;

250 
i
 = 0; i < 
blockSize
; i++)

252 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

254 
	}
}

266 
uöt32_t
 
	$¨m_ˇlc_gu¨d_bôs
 (
uöt32_t
 
num_adds
)

268 
uöt32_t
 
i
 = 1, 
j
 = 0;

270 i‡(
num_adds
 == 1)

275 
i
 < 
num_adds
)

277 
i
 = i * 2;

278 
j
++;

281  (
j
);

282 
	}
}

290 
	$¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
,

291 
uöt32_t
 
numSam∂es
,

292 
uöt32_t
 
gu¨d_bôs
)

294 
uöt32_t
 
i
;

296 
i
 = 0; i < 
numSam∂es
; i++)

298 
pIn
[
i
] =ÖIn[i] * 
	`¨m_ˇlc_2pow
(
gu¨d_bôs
);

300 
	}
}

307 
uöt32_t
 
	$¨m_ˇlc_2pow
(
uöt32_t
 
numShi·s
)

310 
uöt32_t
 
i
, 
vÆ
 = 1;

312 
i
 = 0; i < 
numShi·s
; i++)

314 
vÆ
 = val * 2;

317 (
vÆ
);

318 
	}
}

329 
	$¨m_Êﬂt_to_q14
 (*
pIn
, 
q15_t
 * 
pOut
,

330 
uöt32_t
 
numSam∂es
)

332 
uöt32_t
 
i
;

334 
i
 = 0; i < 
numSam∂es
; i++)

337 
pOut
[
i
] = (
q15_t
Ë(
pIn
[i] * 16384.0f);

339 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

341 i‡(
pIn
[
i
] == () 2.0)

343 
pOut
[
i
] = 0x7FFF;

348 
	}
}

358 
	$¨m_Êﬂt_to_q30
 (*
pIn
, 
q31_t
 * 
pOut
,

359 
uöt32_t
 
numSam∂es
)

361 
uöt32_t
 
i
;

363 
i
 = 0; i < 
numSam∂es
; i++)

366 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1073741824.0f);

368 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

370 i‡(
pIn
[
i
] == () 2.0)

372 
pOut
[
i
] = 0x7FFFFFFF;

375 
	}
}

384 
	$¨m_Êﬂt_to_q29
 (*
pIn
, 
q31_t
 * 
pOut
,

385 
uöt32_t
 
numSam∂es
)

387 
uöt32_t
 
i
;

389 
i
 = 0; i < 
numSam∂es
; i++)

392 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 536870912.0f);

394 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

396 i‡(
pIn
[
i
] == () 4.0)

398 
pOut
[
i
] = 0x7FFFFFFF;

401 
	}
}

411 
	$¨m_Êﬂt_to_q28
 (*
pIn
, 
q31_t
 * 
pOut
,

412 
uöt32_t
 
numSam∂es
)

414 
uöt32_t
 
i
;

416 
i
 = 0; i < 
numSam∂es
; i++)

419 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 268435456.0f);

421 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

423 i‡(
pIn
[
i
] == () 8.0)

425 
pOut
[
i
] = 0x7FFFFFFF;

428 
	}
}

438 
	$¨m_˛ù_f32
 (*
pIn
, 
uöt32_t
 
numSam∂es
)

440 
uöt32_t
 
i
;

442 
i
 = 0; i < 
numSam∂es
; i++)

444 if(
pIn
[
i
] > 1.0f)

446 
pIn
[
i
] = 1.0;

448 if–
pIn
[
i
] < -1.0f)

450 
pIn
[
i
] = -1.0;

454 
	}
}

	@CMSIS/DSP_Lib/Examples/arm_matrix_example/ARM/math_helper.h

43 
	~"¨m_m©h.h
"

45 #i‚de‡
MATH_HELPER_H


46 
	#MATH_HELPER_H


	)

48 
¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
);

49 
¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
);

50 
¨m_¥ovide_gu¨d_bôs_q15
(
q15_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

51 
¨m_¥ovide_gu¨d_bôs_q31
(
q31_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

52 
¨m_Êﬂt_to_q14
(*
pIn
, 
q15_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

53 
¨m_Êﬂt_to_q29
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

54 
¨m_Êﬂt_to_q28
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

55 
¨m_Êﬂt_to_q30
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

56 
¨m_˛ù_f32
(*
pIn
, 
uöt32_t
 
numSam∂es
);

57 
uöt32_t
 
¨m_ˇlc_gu¨d_bôs
(uöt32_à
num_adds
);

58 
¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
, 
uöt32_t
 
numSam∂es
, uöt32_à
gu¨d_bôs
);

59 
uöt32_t
 
¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, uöt32_à
numSam∂es
);

60 
uöt32_t
 
¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à*
pOut
, uöt32_à
numSam∂es
);

61 
uöt32_t
 
¨m_ˇlc_2pow
(uöt32_à
gu¨d_bôs
);

	@CMSIS/DSP_Lib/Examples/arm_signal_converge_example/ARM/arm_signal_converge_data.c

41 
	~"¨m_m©h.h
"

48 
Êﬂt32_t
 
	gã°I≈ut_f32
[1536] =

250 
Êﬂt32_t
 
	glmsN‹mC€ff_f32
[32] = {

262 c⁄° 
Êﬂt32_t
 
	gFIRC€ff_f32
[32] = {

	@CMSIS/DSP_Lib/Examples/arm_signal_converge_example/ARM/arm_signal_converge_example_f32.c

109 
	~"¨m_m©h.h
"

110 
	~"m©h_hñ≥r.h
"

116 
	#TEST_LENGTH_SAMPLES
 1536

	)

117 
	#NUMTAPS
 32

	)

118 
	#BLOCKSIZE
 32

	)

119 
	#DELTA_ERROR
 0.000001f

	)

120 
	#DELTA_COEFF
 0.0001f

	)

121 
	#MU
 0.5f

	)

123 
	#NUMFRAMES
 (
TEST_LENGTH_SAMPLES
 / 
BLOCKSIZE
)

	)

129 
Êﬂt32_t
 
	gfúSèãF32
[
NUMTAPS
 + 
BLOCKSIZE
];

130 
¨m_fú_ö°™˚_f32
 
	gLPF_ö°™˚
;

136 
Êﬂt32_t
 
	glmsSèãF32
[
NUMTAPS
 + 
BLOCKSIZE
];

137 
Êﬂt32_t
 
	gîrOuçut
[
TEST_LENGTH_SAMPLES
];

138 
¨m_lms_n‹m_ö°™˚_f32
 
	glmsN‹m_ö°™˚
;

145 
¨m_°©us
 
ã°_sig«l_c⁄vîge_exam∂e
( );

151 
¨m_°©us
 
ã°_sig«l_c⁄vîge
(
Êﬂt32_t
* 
îr_sig«l
,

152 
uöt32_t
 
blockSize
);

154 
gëöput
(
Êﬂt32_t
* 
öput
,

155 
uöt32_t
 
‰_˙t
,

156 
uöt32_t
 
blockSize
);

161 
Êﬂt32_t
 
ã°I≈ut_f32
[
TEST_LENGTH_SAMPLES
];

162 
Êﬂt32_t
 
lmsN‹mC€ff_f32
[32];

163 c⁄° 
Êﬂt32_t
 
FIRC€ff_f32
[32];

164 
¨m_lms_n‹m_ö°™˚_f32
 
lmsN‹m_ö°™˚
;

170 
Êﬂt32_t
 
	gwúe1
[
BLOCKSIZE
];

171 
Êﬂt32_t
 
	gwúe2
[
BLOCKSIZE
];

172 
Êﬂt32_t
 
	gwúe3
[
BLOCKSIZE
];

173 
Êﬂt32_t
 
	gîr_sig«l
[
BLOCKSIZE
];

179 
öt32_t
 
	$maö
()

181 
uöt32_t
 
i
;

182 
¨m_°©us
 
°©us
;

183 
uöt32_t
 
ödex
;

184 
Êﬂt32_t
 
möVÆue
;

187 
	`¨m_lms_n‹m_öô_f32
(&
lmsN‹m_ö°™˚
, 
NUMTAPS
, 
lmsN‹mC€ff_f32
, 
lmsSèãF32
, 
MU
, 
BLOCKSIZE
);

190 
	`¨m_fú_öô_f32
(&
LPF_ö°™˚
, 
NUMTAPS
, (
Êﬂt32_t
 *)
FIRC€ff_f32
, 
fúSèãF32
, 
BLOCKSIZE
);

197 
i
=0; i < 
NUMFRAMES
; i++)

200 
	`¨m_c›y_f32
(
ã°I≈ut_f32
 + (
i
 * 
BLOCKSIZE
), 
wúe1
, BLOCKSIZE);

203 
	`¨m_fú_f32
(&
LPF_ö°™˚
, 
wúe1
, 
wúe2
, 
BLOCKSIZE
);

207 
	`¨m_lms_n‹m_f32
(&
lmsN‹m_ö°™˚
,

208 
wúe1
,

209 
wúe2
,

210 
wúe3
,

211 
îr_sig«l
,

212 
BLOCKSIZE
);

215 
	`¨m_sˇÀ_f32
(
wúe3
, 5, wúe3, 
BLOCKSIZE
);

218 
°©us
 = 
ARM_MATH_SUCCESS
;

224 
	`¨m_abs_f32
(
îr_sig«l
,Éº_sig«l, 
BLOCKSIZE
);

225 
	`¨m_mö_f32
(
îr_sig«l
, 
BLOCKSIZE
, &
möVÆue
, &
ödex
);

227 i‡(
möVÆue
 > 
DELTA_ERROR
)

229 
°©us
 = 
ARM_MATH_TEST_FAILURE
;

236 
	`¨m_sub_f32
((
Êﬂt32_t
 *)
FIRC€ff_f32
, 
lmsN‹mC€ff_f32
,ÜmsN‹mC€ff_f32, 
NUMTAPS
);

238 
	`¨m_abs_f32
(
lmsN‹mC€ff_f32
,ÜmsN‹mC€ff_f32, 
NUMTAPS
);

239 
	`¨m_mö_f32
(
lmsN‹mC€ff_f32
, 
NUMTAPS
, &
möVÆue
, &
ödex
);

241 i‡(
möVÆue
 > 
DELTA_COEFF
)

243 
°©us
 = 
ARM_MATH_TEST_FAILURE
;

251 if–
°©us
 !
ARM_MATH_SUCCESS
)

257 
	}
}

	@CMSIS/DSP_Lib/Examples/arm_signal_converge_example/ARM/math_helper.c

45 
	~<m©h.h
>

50 
	~"m©h_hñ≥r.h
"

62 
	$¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
)

64 
E√rgySig«l
 = 0.0, 
E√rgyEº‹
 = 0.0;

65 
uöt32_t
 
i
;

66 
SNR
;

67 
ãmp
;

68 *
ã°
;

70 
i
 = 0; i < 
buffSize
; i++)

73 
ã°
 = (*)(&
pRef
[
i
]);

74 
ãmp
 = *
ã°
;

76 if(
ãmp
 == 0x7FC00000)

82 
ã°
 = (*)(&
pTe°
[
i
]);

83 
ãmp
 = *
ã°
;

85 if(
ãmp
 == 0x7FC00000)

89 
E√rgySig«l
 +
pRef
[
i
] *ÖRef[i];

90 
E√rgyEº‹
 +(
pRef
[
i
] - 
pTe°
[i]) * (pRef[i] -ÖTest[i]);

94 
ã°
 = (*)(&
E√rgyEº‹
);

95 
ãmp
 = *
ã°
;

97 if(
ãmp
 == 0x7FC00000)

103 
SNR
 = 10 * 
	`log10
 (
E√rgySig«l
 / 
E√rgyEº‹
);

105  (
SNR
);

107 
	}
}

120 
	$¨m_¥ovide_gu¨d_bôs_q15
 (
q15_t
 * 
öput_buf
, 
uöt32_t
 
blockSize
,

121 
uöt32_t
 
gu¨d_bôs
)

123 
uöt32_t
 
i
;

125 
i
 = 0; i < 
blockSize
; i++)

127 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

129 
	}
}

138 
	$¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
)

140 
uöt32_t
 
i
;

142 
i
 = 0; i < 
numSam∂es
; i++)

145 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1048576.0f);

147 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

149 i‡(
pIn
[
i
] == () 1.0)

151 
pOut
[
i
] = 0x000FFFFF;

154 
	}
}

164 
uöt32_t
 
	$¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

166 
uöt32_t
 
i
;

167 
öt32_t
 
diff
, 
diffC∫t
 = 0;

168 
uöt32_t
 
maxDiff
 = 0;

170 
i
 = 0; i < 
numSam∂es
; i++)

172 
diff
 = 
pIn
[
i
] - 
pOut
[i];

173 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

175 if(
diffC∫t
 > 
maxDiff
)

177 
maxDiff
 = 
diffC∫t
;

181 (
maxDiff
);

182 
	}
}

192 
uöt32_t
 
	$¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

194 
uöt32_t
 
i
;

195 
öt32_t
 
diff
, 
diffC∫t
 = 0;

196 
uöt32_t
 
maxDiff
 = 0;

198 
i
 = 0; i < 
numSam∂es
; i++)

200 
diff
 = 
pIn
[
i
] - 
pOut
[i];

201 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

203 if(
diffC∫t
 > 
maxDiff
)

205 
maxDiff
 = 
diffC∫t
;

209 (
maxDiff
);

210 
	}
}

222 
	$¨m_¥ovide_gu¨d_bôs_q31
 (
q31_t
 * 
öput_buf
,

223 
uöt32_t
 
blockSize
,

224 
uöt32_t
 
gu¨d_bôs
)

226 
uöt32_t
 
i
;

228 
i
 = 0; i < 
blockSize
; i++)

230 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

232 
	}
}

244 
	$¨m_¥ovide_gu¨d_bôs_q7
 (
q7_t
 * 
öput_buf
,

245 
uöt32_t
 
blockSize
,

246 
uöt32_t
 
gu¨d_bôs
)

248 
uöt32_t
 
i
;

250 
i
 = 0; i < 
blockSize
; i++)

252 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

254 
	}
}

266 
uöt32_t
 
	$¨m_ˇlc_gu¨d_bôs
 (
uöt32_t
 
num_adds
)

268 
uöt32_t
 
i
 = 1, 
j
 = 0;

270 i‡(
num_adds
 == 1)

275 
i
 < 
num_adds
)

277 
i
 = i * 2;

278 
j
++;

281  (
j
);

282 
	}
}

290 
	$¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
,

291 
uöt32_t
 
numSam∂es
,

292 
uöt32_t
 
gu¨d_bôs
)

294 
uöt32_t
 
i
;

296 
i
 = 0; i < 
numSam∂es
; i++)

298 
pIn
[
i
] =ÖIn[i] * 
	`¨m_ˇlc_2pow
(
gu¨d_bôs
);

300 
	}
}

307 
uöt32_t
 
	$¨m_ˇlc_2pow
(
uöt32_t
 
numShi·s
)

310 
uöt32_t
 
i
, 
vÆ
 = 1;

312 
i
 = 0; i < 
numShi·s
; i++)

314 
vÆ
 = val * 2;

317 (
vÆ
);

318 
	}
}

329 
	$¨m_Êﬂt_to_q14
 (*
pIn
, 
q15_t
 * 
pOut
,

330 
uöt32_t
 
numSam∂es
)

332 
uöt32_t
 
i
;

334 
i
 = 0; i < 
numSam∂es
; i++)

337 
pOut
[
i
] = (
q15_t
Ë(
pIn
[i] * 16384.0f);

339 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

341 i‡(
pIn
[
i
] == () 2.0)

343 
pOut
[
i
] = 0x7FFF;

348 
	}
}

358 
	$¨m_Êﬂt_to_q30
 (*
pIn
, 
q31_t
 * 
pOut
,

359 
uöt32_t
 
numSam∂es
)

361 
uöt32_t
 
i
;

363 
i
 = 0; i < 
numSam∂es
; i++)

366 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1073741824.0f);

368 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

370 i‡(
pIn
[
i
] == () 2.0)

372 
pOut
[
i
] = 0x7FFFFFFF;

375 
	}
}

384 
	$¨m_Êﬂt_to_q29
 (*
pIn
, 
q31_t
 * 
pOut
,

385 
uöt32_t
 
numSam∂es
)

387 
uöt32_t
 
i
;

389 
i
 = 0; i < 
numSam∂es
; i++)

392 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 536870912.0f);

394 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

396 i‡(
pIn
[
i
] == () 4.0)

398 
pOut
[
i
] = 0x7FFFFFFF;

401 
	}
}

411 
	$¨m_Êﬂt_to_q28
 (*
pIn
, 
q31_t
 * 
pOut
,

412 
uöt32_t
 
numSam∂es
)

414 
uöt32_t
 
i
;

416 
i
 = 0; i < 
numSam∂es
; i++)

419 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 268435456.0f);

421 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

423 i‡(
pIn
[
i
] == () 8.0)

425 
pOut
[
i
] = 0x7FFFFFFF;

428 
	}
}

438 
	$¨m_˛ù_f32
 (*
pIn
, 
uöt32_t
 
numSam∂es
)

440 
uöt32_t
 
i
;

442 
i
 = 0; i < 
numSam∂es
; i++)

444 if(
pIn
[
i
] > 1.0f)

446 
pIn
[
i
] = 1.0;

448 if–
pIn
[
i
] < -1.0f)

450 
pIn
[
i
] = -1.0;

454 
	}
}

	@CMSIS/DSP_Lib/Examples/arm_signal_converge_example/ARM/math_helper.h

43 
	~"¨m_m©h.h
"

45 #i‚de‡
MATH_HELPER_H


46 
	#MATH_HELPER_H


	)

48 
¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
);

49 
¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
);

50 
¨m_¥ovide_gu¨d_bôs_q15
(
q15_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

51 
¨m_¥ovide_gu¨d_bôs_q31
(
q31_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

52 
¨m_Êﬂt_to_q14
(*
pIn
, 
q15_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

53 
¨m_Êﬂt_to_q29
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

54 
¨m_Êﬂt_to_q28
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

55 
¨m_Êﬂt_to_q30
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

56 
¨m_˛ù_f32
(*
pIn
, 
uöt32_t
 
numSam∂es
);

57 
uöt32_t
 
¨m_ˇlc_gu¨d_bôs
(uöt32_à
num_adds
);

58 
¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
, 
uöt32_t
 
numSam∂es
, uöt32_à
gu¨d_bôs
);

59 
uöt32_t
 
¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, uöt32_à
numSam∂es
);

60 
uöt32_t
 
¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à*
pOut
, uöt32_à
numSam∂es
);

61 
uöt32_t
 
¨m_ˇlc_2pow
(uöt32_à
gu¨d_bôs
);

	@CMSIS/DSP_Lib/Examples/arm_sin_cos_example/ARM/arm_sin_cos_example_f32.c

84 
	~<m©h.h
>

85 
	~"¨m_m©h.h
"

90 
	#MAX_BLOCKSIZE
 32

	)

91 
	#DELTA
 (0.0001f)

	)

99 c⁄° 
Êﬂt32_t
 
	gã°I≈ut_f32
[
MAX_BLOCKSIZE
] =

109 c⁄° 
Êﬂt32_t
 
	gã°RefOuçut_f32
 = 1.000000000;

114 
uöt32_t
 
	gblockSize
 = 32;

115 
Êﬂt32_t
 
	gã°Ouçut
;

116 
Êﬂt32_t
 
	gcosOuçut
;

117 
Êﬂt32_t
 
	gsöOuçut
;

118 
Êﬂt32_t
 
	gcosSqu¨eOuçut
;

119 
Êﬂt32_t
 
	gsöSqu¨eOuçut
;

125 
¨m_°©us
 
	g°©us
;

127 
öt32_t
 
	$maö
()

129 
Êﬂt32_t
 
diff
;

130 
uöt32_t
 
i
;

132 
i
=0; i< 
blockSize
; i++)

134 
cosOuçut
 = 
	`¨m_cos_f32
(
ã°I≈ut_f32
[
i
]);

135 
söOuçut
 = 
	`¨m_sö_f32
(
ã°I≈ut_f32
[
i
]);

137 
	`¨m_mu…_f32
(&
cosOuçut
, &cosOuçut, &
cosSqu¨eOuçut
, 1);

138 
	`¨m_mu…_f32
(&
söOuçut
, &söOuçut, &
söSqu¨eOuçut
, 1);

140 
	`¨m_add_f32
(&
cosSqu¨eOuçut
, &
söSqu¨eOuçut
, &
ã°Ouçut
, 1);

143 
diff
 = 
	`Ábsf
(
ã°RefOuçut_f32
 - 
ã°Ouçut
);

146 if(
diff
 > 
DELTA
)

148 
°©us
 = 
ARM_MATH_TEST_FAILURE
;

151 if–
°©us
 =
ARM_MATH_TEST_FAILURE
)

159 
	}
}

	@CMSIS/DSP_Lib/Examples/arm_variance_example/ARM/arm_variance_example_f32.c

93 
	~<m©h.h
>

94 
	~"¨m_m©h.h
"

99 
	#MAX_BLOCKSIZE
 32

	)

100 
	#DELTA
 (0.000001f)

	)

106 
Êﬂt32_t
 
	gwúe1
[
MAX_BLOCKSIZE
];

107 
Êﬂt32_t
 
	gwúe2
[
MAX_BLOCKSIZE
];

108 
Êﬂt32_t
 
	gwúe3
[
MAX_BLOCKSIZE
];

115 
Êﬂt32_t
 
	gã°I≈ut_f32
[32] =

131 
uöt32_t
 
	gblockSize
 = 32;

132 
Êﬂt32_t
 
	gªfV¨ün˚Out
 = 0.903941793931839;

138 
öt32_t
 
	$maö
()

140 
¨m_°©us
 
°©us
;

141 
Êﬂt32_t
 
món
, 
⁄eByBlockSize
;

142 
Êﬂt32_t
 
v¨ün˚
;

143 
Êﬂt32_t
 
diff
;

145 
°©us
 = 
ARM_MATH_SUCCESS
;

152 
	`¨m_fûl_f32
(1.0, 
wúe1
, 
blockSize
);

156 
	`¨m_dŸ_¥od_f32
(
ã°I≈ut_f32
, 
wúe1
, 
blockSize
, &
món
);

159 
⁄eByBlockSize
 = 1.0 / (
blockSize
);

162 
	`¨m_mu…_f32
(&
món
, &
⁄eByBlockSize
, &mean, 1);

170 
	`¨m_fûl_f32
(
món
, 
wúe2
, 
blockSize
);

173 
	`¨m_sub_f32
(
ã°I≈ut_f32
, 
wúe2
, 
wúe3
, 
blockSize
);

176 
	`¨m_c›y_f32
(
wúe3
, 
wúe2
, 
blockSize
);

179 
	`¨m_dŸ_¥od_f32
(
wúe2
, 
wúe3
, 
blockSize
, &
v¨ün˚
);

182 
⁄eByBlockSize
 = 1.0 / (
blockSize
 - 1);

185 
	`¨m_mu…_f32
(&
v¨ün˚
, &
⁄eByBlockSize
, &variance, 1);

188 
diff
 = 
	`Ábsf
(
ªfV¨ün˚Out
 - 
v¨ün˚
);

191 if(
diff
 > 
DELTA
)

193 
°©us
 = 
ARM_MATH_TEST_FAILURE
;

196 if–
°©us
 !
ARM_MATH_SUCCESS
)

202 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_abs_f32.c

41 
	~"¨m_m©h.h
"

42 
	~<m©h.h
>

75 
	$¨m_abs_f32
(

76 
Êﬂt32_t
 * 
pSrc
,

77 
Êﬂt32_t
 * 
pD°
,

78 
uöt32_t
 
blockSize
)

80 
uöt32_t
 
blkC¡
;

82 #i‚de‡
ARM_MATH_CM0_FAMILY


85 
Êﬂt32_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

88 
blkC¡
 = 
blockSize
 >> 2u;

92 
blkC¡
 > 0u)

97 
ö1
 = *
pSrc
;

98 
ö2
 = *(
pSrc
 + 1);

99 
ö3
 = *(
pSrc
 + 2);

102 
ö1
 = 
	`Ábsf
(in1);

105 
ö4
 = *(
pSrc
 + 3);

108 
ö2
 = 
	`Ábsf
(in2);

111 *
pD°
 = 
ö1
;

114 
ö3
 = 
	`Ábsf
(in3);

117 
ö4
 = 
	`Ábsf
(in4);

120 *(
pD°
 + 1Ë
ö2
;

123 *(
pD°
 + 2Ë
ö3
;

126 *(
pD°
 + 3Ë
ö4
;

130 
pSrc
 += 4u;

133 
pD°
 += 4u;

136 
blkC¡
--;

141 
blkC¡
 = 
blockSize
 % 0x4u;

148 
blkC¡
 = 
blockSize
;

152 
blkC¡
 > 0u)

156 *
pD°
++ = 
	`Ábsf
(*
pSrc
++);

159 
blkC¡
--;

161 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_abs_q15.c

41 
	~"¨m_m©h.h
"

65 
	$¨m_abs_q15
(

66 
q15_t
 * 
pSrc
,

67 
q15_t
 * 
pD°
,

68 
uöt32_t
 
blockSize
)

70 
uöt32_t
 
blkC¡
;

72 #i‚de‡
ARM_MATH_CM0_FAMILY


73 
__SIMD32_TYPE
 *
simd
;

77 
q15_t
 
ö1
;

78 
q15_t
 
ö2
;

82 
blkC¡
 = 
blockSize
 >> 2u;

86 
simd
 = 
	`__SIMD32_CONST
(
pD°
);

87 
blkC¡
 > 0u)

91 
ö1
 = *
pSrc
++;

92 
ö2
 = *
pSrc
++;

96 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


97 *
simd
++ =

98 
	`__PKHBT
(((
ö1
 > 0Ë? in1 : (
q15_t
)
	`__QSUB16
(0, in1)),

99 ((
ö2
 > 0Ë? in2 : (
q15_t
)
	`__QSUB16
(0, in2)), 16);

104 *
simd
++ =

105 
	`__PKHBT
(((
ö2
 > 0Ë? in2 : (
q15_t
)
	`__QSUB16
(0, in2)),

106 ((
ö1
 > 0Ë? in1 : (
q15_t
)
	`__QSUB16
(0, in1)), 16);

110 
ö1
 = *
pSrc
++;

111 
ö2
 = *
pSrc
++;

114 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


116 *
simd
++ =

117 
	`__PKHBT
(((
ö1
 > 0Ë? in1 : (
q15_t
)
	`__QSUB16
(0, in1)),

118 ((
ö2
 > 0Ë? in2 : (
q15_t
)
	`__QSUB16
(0, in2)), 16);

123 *
simd
++ =

124 
	`__PKHBT
(((
ö2
 > 0Ë? in2 : (
q15_t
)
	`__QSUB16
(0, in2)),

125 ((
ö1
 > 0Ë? in1 : (
q15_t
)
	`__QSUB16
(0, in1)), 16);

130 
blkC¡
--;

132 
pD°
 = (
q15_t
 *)
simd
;

136 
blkC¡
 = 
blockSize
 % 0x4u;

138 
blkC¡
 > 0u)

142 
ö1
 = *
pSrc
++;

145 *
pD°
++ = (
ö1
 > 0Ë? in1 : (
q15_t
)
	`__QSUB16
(0, in1);

148 
blkC¡
--;

155 
q15_t
 
ö
;

158 
blkC¡
 = 
blockSize
;

160 
blkC¡
 > 0u)

164 
ö
 = *
pSrc
++;

167 *
pD°
++ = (
ö
 > 0Ë? i¿: ((ö =(
q15_t
) 0x8000) ? 0x7fff : -in);

170 
blkC¡
--;

175 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_abs_q31.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_abs_q31
(

67 
q31_t
 * 
pSrc
,

68 
q31_t
 * 
pD°
,

69 
uöt32_t
 
blockSize
)

71 
uöt32_t
 
blkC¡
;

72 
q31_t
 
ö
;

74 #i‚de‡
ARM_MATH_CM0_FAMILY


77 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

80 
blkC¡
 = 
blockSize
 >> 2u;

84 
blkC¡
 > 0u)

88 
ö1
 = *
pSrc
++;

89 
ö2
 = *
pSrc
++;

90 
ö3
 = *
pSrc
++;

91 
ö4
 = *
pSrc
++;

93 *
pD°
++ = (
ö1
 > 0Ë? in1 : (
q31_t
)
	`__QSUB
(0, in1);

94 *
pD°
++ = (
ö2
 > 0Ë? in2 : (
q31_t
)
	`__QSUB
(0, in2);

95 *
pD°
++ = (
ö3
 > 0Ë? in3 : (
q31_t
)
	`__QSUB
(0, in3);

96 *
pD°
++ = (
ö4
 > 0Ë? in4 : (
q31_t
)
	`__QSUB
(0, in4);

99 
blkC¡
--;

104 
blkC¡
 = 
blockSize
 % 0x4u;

111 
blkC¡
 = 
blockSize
;

115 
blkC¡
 > 0u)

119 
ö
 = *
pSrc
++;

120 *
pD°
++ = (
ö
 > 0Ë? i¿: ((ö =
INT32_MIN
Ë? 
INT32_MAX
 : -in);

123 
blkC¡
--;

126 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_abs_q7.c

41 
	~"¨m_m©h.h
"

69 
	$¨m_abs_q7
(

70 
q7_t
 * 
pSrc
,

71 
q7_t
 * 
pD°
,

72 
uöt32_t
 
blockSize
)

74 
uöt32_t
 
blkC¡
;

75 
q7_t
 
ö
;

77 #i‚de‡
ARM_MATH_CM0_FAMILY


80 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

81 
q31_t
 
out1
, 
out2
, 
out3
, 
out4
;

84 
blkC¡
 = 
blockSize
 >> 2u;

88 
blkC¡
 > 0u)

92 
ö1
 = (
q31_t
Ë* 
pSrc
;

93 
ö2
 = (
q31_t
Ë* (
pSrc
 + 1);

94 
ö3
 = (
q31_t
Ë* (
pSrc
 + 2);

97 
out1
 = (
ö1
 > 0Ë? in1 : (
q31_t
)
	`__QSUB8
(0, in1);

100 
ö4
 = (
q31_t
Ë* (
pSrc
 + 3);

103 
out2
 = (
ö2
 > 0Ë? in2 : (
q31_t
)
	`__QSUB8
(0, in2);

106 *
pD°
 = (
q7_t
Ë
out1
;

109 
out3
 = (
ö3
 > 0Ë? in3 : (
q31_t
)
	`__QSUB8
(0, in3);

112 
out4
 = (
ö4
 > 0Ë? in4 : (
q31_t
)
	`__QSUB8
(0, in4);

115 *(
pD°
 + 1Ë(
q7_t
Ë
out2
;

118 *(
pD°
 + 2Ë(
q7_t
Ë
out3
;

121 *(
pD°
 + 3Ë(
q7_t
Ë
out4
;

124 
pSrc
 += 4u;

125 
pD°
 += 4u;

128 
blkC¡
--;

133 
blkC¡
 = 
blockSize
 % 0x4u;

137 
blkC¡
 = 
blockSize
;

141 
blkC¡
 > 0u)

145 
ö
 = *
pSrc
++;

148 *
pD°
++ = (
ö
 > 0Ë? i¿: ((ö =(
q7_t
) 0x80) ? 0x7f : -in);

151 
blkC¡
--;

153 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_add_f32.c

41 
	~"¨m_m©h.h
"

73 
	$¨m_add_f32
(

74 
Êﬂt32_t
 * 
pSrcA
,

75 
Êﬂt32_t
 * 
pSrcB
,

76 
Êﬂt32_t
 * 
pD°
,

77 
uöt32_t
 
blockSize
)

79 
uöt32_t
 
blkC¡
;

81 #i‚de‡
ARM_MATH_CM0_FAMILY


84 
Êﬂt32_t
 
öA1
, 
öA2
, 
öA3
, 
öA4
;

85 
Êﬂt32_t
 
öB1
, 
öB2
, 
öB3
, 
öB4
;

88 
blkC¡
 = 
blockSize
 >> 2u;

92 
blkC¡
 > 0u)

98 
öA1
 = *
pSrcA
;

99 
öB1
 = *
pSrcB
;

100 
öA2
 = *(
pSrcA
 + 1);

101 
öB2
 = *(
pSrcB
 + 1);

102 
öA3
 = *(
pSrcA
 + 2);

103 
öB3
 = *(
pSrcB
 + 2);

104 
öA4
 = *(
pSrcA
 + 3);

105 
öB4
 = *(
pSrcB
 + 3);

109 *
pD°
 = 
öA1
 + 
öB1
;

110 *(
pD°
 + 1Ë
öA2
 + 
öB2
;

111 *(
pD°
 + 2Ë
öA3
 + 
öB3
;

112 *(
pD°
 + 3Ë
öA4
 + 
öB4
;

115 
pSrcA
 += 4u;

116 
pSrcB
 += 4u;

117 
pD°
 += 4u;

121 
blkC¡
--;

126 
blkC¡
 = 
blockSize
 % 0x4u;

133 
blkC¡
 = 
blockSize
;

137 
blkC¡
 > 0u)

141 *
pD°
++ = (*
pSrcA
++Ë+ (*
pSrcB
++);

144 
blkC¡
--;

146 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_add_q15.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_add_q15
(

67 
q15_t
 * 
pSrcA
,

68 
q15_t
 * 
pSrcB
,

69 
q15_t
 * 
pD°
,

70 
uöt32_t
 
blockSize
)

72 
uöt32_t
 
blkC¡
;

74 #i‚de‡
ARM_MATH_CM0_FAMILY


77 
q31_t
 
öA1
, 
öA2
, 
öB1
, 
öB2
;

80 
blkC¡
 = 
blockSize
 >> 2u;

84 
blkC¡
 > 0u)

88 
öA1
 = *
	`__SIMD32
(
pSrcA
)++;

89 
öA2
 = *
	`__SIMD32
(
pSrcA
)++;

90 
öB1
 = *
	`__SIMD32
(
pSrcB
)++;

91 
öB2
 = *
	`__SIMD32
(
pSrcB
)++;

93 *
	`__SIMD32
(
pD°
)++ = 
	`__QADD16
(
öA1
, 
öB1
);

94 *
	`__SIMD32
(
pD°
)++ = 
	`__QADD16
(
öA2
, 
öB2
);

97 
blkC¡
--;

102 
blkC¡
 = 
blockSize
 % 0x4u;

104 
blkC¡
 > 0u)

108 *
pD°
++ = (
q15_t
Ë
	`__QADD16
(*
pSrcA
++, *
pSrcB
++);

111 
blkC¡
--;

121 
blkC¡
 = 
blockSize
;

123 
blkC¡
 > 0u)

127 *
pD°
++ = (
q15_t
Ë
	`__SSAT
(((
q31_t
Ë* 
pSrcA
++ + *
pSrcB
++), 16);

130 
blkC¡
--;

136 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_add_q31.c

41 
	~"¨m_m©h.h
"

67 
	$¨m_add_q31
(

68 
q31_t
 * 
pSrcA
,

69 
q31_t
 * 
pSrcB
,

70 
q31_t
 * 
pD°
,

71 
uöt32_t
 
blockSize
)

73 
uöt32_t
 
blkC¡
;

75 #i‚de‡
ARM_MATH_CM0_FAMILY


78 
q31_t
 
öA1
, 
öA2
, 
öA3
, 
öA4
;

79 
q31_t
 
öB1
, 
öB2
, 
öB3
, 
öB4
;

82 
blkC¡
 = 
blockSize
 >> 2u;

86 
blkC¡
 > 0u)

90 
öA1
 = *
pSrcA
++;

91 
öA2
 = *
pSrcA
++;

92 
öB1
 = *
pSrcB
++;

93 
öB2
 = *
pSrcB
++;

95 
öA3
 = *
pSrcA
++;

96 
öA4
 = *
pSrcA
++;

97 
öB3
 = *
pSrcB
++;

98 
öB4
 = *
pSrcB
++;

100 *
pD°
++ = 
	`__QADD
(
öA1
, 
öB1
);

101 *
pD°
++ = 
	`__QADD
(
öA2
, 
öB2
);

102 *
pD°
++ = 
	`__QADD
(
öA3
, 
öB3
);

103 *
pD°
++ = 
	`__QADD
(
öA4
, 
öB4
);

106 
blkC¡
--;

111 
blkC¡
 = 
blockSize
 % 0x4u;

113 
blkC¡
 > 0u)

117 *
pD°
++ = 
	`__QADD
(*
pSrcA
++, *
pSrcB
++);

120 
blkC¡
--;

130 
blkC¡
 = 
blockSize
;

132 
blkC¡
 > 0u)

136 *
pD°
++ = (
q31_t
Ë
	`˛ù_q63_to_q31
((
q63_t
Ë* 
pSrcA
++ + *
pSrcB
++);

139 
blkC¡
--;

144 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_add_q7.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_add_q7
(

67 
q7_t
 * 
pSrcA
,

68 
q7_t
 * 
pSrcB
,

69 
q7_t
 * 
pD°
,

70 
uöt32_t
 
blockSize
)

72 
uöt32_t
 
blkC¡
;

74 #i‚de‡
ARM_MATH_CM0_FAMILY


80 
blkC¡
 = 
blockSize
 >> 2u;

84 
blkC¡
 > 0u)

88 *
	`__SIMD32
(
pD°
)++ = 
	`__QADD8
(*__SIMD32(
pSrcA
)++, *__SIMD32(
pSrcB
)++);

91 
blkC¡
--;

96 
blkC¡
 = 
blockSize
 % 0x4u;

98 
blkC¡
 > 0u)

102 *
pD°
++ = (
q7_t
Ë
	`__SSAT
(*
pSrcA
++ + *
pSrcB
++, 8);

105 
blkC¡
--;

115 
blkC¡
 = 
blockSize
;

117 
blkC¡
 > 0u)

121 *
pD°
++ = (
q7_t
Ë
	`__SSAT
((
q15_t
Ë* 
pSrcA
++ + *
pSrcB
++, 8);

124 
blkC¡
--;

130 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_dot_prod_f32.c

41 
	~"¨m_m©h.h
"

75 
	$¨m_dŸ_¥od_f32
(

76 
Êﬂt32_t
 * 
pSrcA
,

77 
Êﬂt32_t
 * 
pSrcB
,

78 
uöt32_t
 
blockSize
,

79 
Êﬂt32_t
 * 
ªsu…
)

81 
Êﬂt32_t
 
sum
 = 0.0f;

82 
uöt32_t
 
blkC¡
;

85 #i‚de‡
ARM_MATH_CM0_FAMILY


89 
blkC¡
 = 
blockSize
 >> 2u;

93 
blkC¡
 > 0u)

97 
sum
 +(*
pSrcA
++Ë* (*
pSrcB
++);

98 
sum
 +(*
pSrcA
++Ë* (*
pSrcB
++);

99 
sum
 +(*
pSrcA
++Ë* (*
pSrcB
++);

100 
sum
 +(*
pSrcA
++Ë* (*
pSrcB
++);

103 
blkC¡
--;

108 
blkC¡
 = 
blockSize
 % 0x4u;

115 
blkC¡
 = 
blockSize
;

120 
blkC¡
 > 0u)

124 
sum
 +(*
pSrcA
++Ë* (*
pSrcB
++);

127 
blkC¡
--;

130 *
ªsu…
 = 
sum
;

131 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_dot_prod_q15.c

41 
	~"¨m_m©h.h
"

69 
	$¨m_dŸ_¥od_q15
(

70 
q15_t
 * 
pSrcA
,

71 
q15_t
 * 
pSrcB
,

72 
uöt32_t
 
blockSize
,

73 
q63_t
 * 
ªsu…
)

75 
q63_t
 
sum
 = 0;

76 
uöt32_t
 
blkC¡
;

78 #i‚de‡
ARM_MATH_CM0_FAMILY


84 
blkC¡
 = 
blockSize
 >> 2u;

88 
blkC¡
 > 0u)

92 
sum
 = 
	`__SMLALD
(*
	`__SIMD32
(
pSrcA
)++, *__SIMD32(
pSrcB
)++, sum);

93 
sum
 = 
	`__SMLALD
(*
	`__SIMD32
(
pSrcA
)++, *__SIMD32(
pSrcB
)++, sum);

96 
blkC¡
--;

101 
blkC¡
 = 
blockSize
 % 0x4u;

103 
blkC¡
 > 0u)

107 
sum
 = 
	`__SMLALD
(*
pSrcA
++, *
pSrcB
++, sum);

110 
blkC¡
--;

119 
blkC¡
 = 
blockSize
;

121 
blkC¡
 > 0u)

125 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
pSrcA
++ * *
pSrcB
++);

128 
blkC¡
--;

134 *
ªsu…
 = 
sum
;

136 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_dot_prod_q31.c

41 
	~"¨m_m©h.h
"

70 
	$¨m_dŸ_¥od_q31
(

71 
q31_t
 * 
pSrcA
,

72 
q31_t
 * 
pSrcB
,

73 
uöt32_t
 
blockSize
,

74 
q63_t
 * 
ªsu…
)

76 
q63_t
 
sum
 = 0;

77 
uöt32_t
 
blkC¡
;

80 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
q31_t
 
öA1
, 
öA2
, 
öA3
, 
öA4
;

84 
q31_t
 
öB1
, 
öB2
, 
öB3
, 
öB4
;

87 
blkC¡
 = 
blockSize
 >> 2u;

91 
blkC¡
 > 0u)

95 
öA1
 = *
pSrcA
++;

96 
öA2
 = *
pSrcA
++;

97 
öA3
 = *
pSrcA
++;

98 
öA4
 = *
pSrcA
++;

99 
öB1
 = *
pSrcB
++;

100 
öB2
 = *
pSrcB
++;

101 
öB3
 = *
pSrcB
++;

102 
öB4
 = *
pSrcB
++;

104 
sum
 +((
q63_t
Ë
öA1
 * 
öB1
) >> 14u;

105 
sum
 +((
q63_t
Ë
öA2
 * 
öB2
) >> 14u;

106 
sum
 +((
q63_t
Ë
öA3
 * 
öB3
) >> 14u;

107 
sum
 +((
q63_t
Ë
öA4
 * 
öB4
) >> 14u;

110 
blkC¡
--;

115 
blkC¡
 = 
blockSize
 % 0x4u;

122 
blkC¡
 = 
blockSize
;

127 
blkC¡
 > 0u)

131 
sum
 +((
q63_t
Ë* 
pSrcA
++ * *
pSrcB
++) >> 14u;

134 
blkC¡
--;

138 *
ªsu…
 = 
sum
;

139 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_dot_prod_q7.c

41 
	~"¨m_m©h.h
"

69 
	$¨m_dŸ_¥od_q7
(

70 
q7_t
 * 
pSrcA
,

71 
q7_t
 * 
pSrcB
,

72 
uöt32_t
 
blockSize
,

73 
q31_t
 * 
ªsu…
)

75 
uöt32_t
 
blkC¡
;

77 
q31_t
 
sum
 = 0;

79 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
q31_t
 
öput1
, 
öput2
;

84 
q31_t
 
öA1
, 
öA2
, 
öB1
, 
öB2
;

89 
blkC¡
 = 
blockSize
 >> 2u;

93 
blkC¡
 > 0u)

96 
öput1
 = *
	`__SIMD32
(
pSrcA
)++;

98 
öput2
 = *
	`__SIMD32
(
pSrcB
)++;

101 
öA1
 = 
	`__SXTB16
(
	`__ROR
(
öput1
, 8));

103 
öA2
 = 
	`__SXTB16
(
öput1
);

105 
öB1
 = 
	`__SXTB16
(
	`__ROR
(
öput2
, 8));

107 
öB2
 = 
	`__SXTB16
(
öput2
);

110 
sum
 = 
	`__SMLAD
(
öA1
, 
öB1
, sum);

111 
sum
 = 
	`__SMLAD
(
öA2
, 
öB2
, sum);

114 
blkC¡
--;

119 
blkC¡
 = 
blockSize
 % 0x4u;

121 
blkC¡
 > 0u)

125 
sum
 = 
	`__SMLAD
(*
pSrcA
++, *
pSrcB
++, sum);

128 
blkC¡
--;

138 
blkC¡
 = 
blockSize
;

140 
blkC¡
 > 0u)

144 
sum
 +(
q31_t
Ë((
q15_t
Ë* 
pSrcA
++ * *
pSrcB
++);

147 
blkC¡
--;

154 *
ªsu…
 = 
sum
;

155 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_mult_f32.c

41 
	~"¨m_m©h.h
"

73 
	$¨m_mu…_f32
(

74 
Êﬂt32_t
 * 
pSrcA
,

75 
Êﬂt32_t
 * 
pSrcB
,

76 
Êﬂt32_t
 * 
pD°
,

77 
uöt32_t
 
blockSize
)

79 
uöt32_t
 
blkC¡
;

80 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
Êﬂt32_t
 
öA1
, 
öA2
, 
öA3
, 
öA4
;

84 
Êﬂt32_t
 
öB1
, 
öB2
, 
öB3
, 
öB4
;

85 
Êﬂt32_t
 
out1
, 
out2
, 
out3
, 
out4
;

88 
blkC¡
 = 
blockSize
 >> 2u;

92 
blkC¡
 > 0u)

97 
öA1
 = *
pSrcA
;

99 
öB1
 = *
pSrcB
;

101 
öA2
 = *(
pSrcA
 + 1);

103 
öB2
 = *(
pSrcB
 + 1);

106 
out1
 = 
öA1
 * 
öB1
;

109 
öA3
 = *(
pSrcA
 + 2);

111 
öB3
 = *(
pSrcB
 + 2);

114 
out2
 = 
öA2
 * 
öB2
;

117 
öA4
 = *(
pSrcA
 + 3);

120 *
pD°
 = 
out1
;

123 
öB4
 = *(
pSrcB
 + 3);

126 
out3
 = 
öA3
 * 
öB3
;

129 *(
pD°
 + 1Ë
out2
;

132 
out4
 = 
öA4
 * 
öB4
;

134 *(
pD°
 + 2Ë
out3
;

136 *(
pD°
 + 3Ë
out4
;

140 
pSrcA
 += 4u;

141 
pSrcB
 += 4u;

142 
pD°
 += 4u;

145 
blkC¡
--;

150 
blkC¡
 = 
blockSize
 % 0x4u;

157 
blkC¡
 = 
blockSize
;

161 
blkC¡
 > 0u)

165 *
pD°
++ = (*
pSrcA
++Ë* (*
pSrcB
++);

168 
blkC¡
--;

170 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_mult_q15.c

41 
	~"¨m_m©h.h
"

67 
	$¨m_mu…_q15
(

68 
q15_t
 * 
pSrcA
,

69 
q15_t
 * 
pSrcB
,

70 
q15_t
 * 
pD°
,

71 
uöt32_t
 
blockSize
)

73 
uöt32_t
 
blkC¡
;

75 #i‚de‡
ARM_MATH_CM0_FAMILY


78 
q31_t
 
öA1
, 
öA2
, 
öB1
, 
öB2
;

79 
q15_t
 
out1
, 
out2
, 
out3
, 
out4
;

80 
q31_t
 
mul1
, 
mul2
, 
mul3
, 
mul4
;

83 
blkC¡
 = 
blockSize
 >> 2u;

87 
blkC¡
 > 0u)

90 
öA1
 = *
	`__SIMD32
(
pSrcA
)++;

92 
öB1
 = *
	`__SIMD32
(
pSrcB
)++;

94 
öA2
 = *
	`__SIMD32
(
pSrcA
)++;

96 
öB2
 = *
	`__SIMD32
(
pSrcB
)++;

99 
mul1
 = (
q31_t
Ë((
q15_t
Ë(
öA1
 >> 16Ë* (q15_tË(
öB1
 >> 16));

100 
mul2
 = (
q31_t
Ë((
q15_t
Ë
öA1
 * (q15_tË
öB1
);

101 
mul3
 = (
q31_t
Ë((
q15_t
Ë(
öA2
 >> 16Ë* (q15_tË(
öB2
 >> 16));

102 
mul4
 = (
q31_t
Ë((
q15_t
Ë
öA2
 * (q15_tË
öB2
);

105 
out1
 = (
q15_t
Ë
	`__SSAT
(
mul1
 >> 15, 16);

106 
out2
 = (
q15_t
Ë
	`__SSAT
(
mul2
 >> 15, 16);

107 
out3
 = (
q15_t
Ë
	`__SSAT
(
mul3
 >> 15, 16);

108 
out4
 = (
q15_t
Ë
	`__SSAT
(
mul4
 >> 15, 16);

111 #i‚de‡
ARM_MATH_BIG_ENDIAN


113 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
out2
, 
out1
, 16);

114 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
out4
, 
out3
, 16);

118 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
out2
, 
out1
, 16);

119 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
out4
, 
out3
, 16);

124 
blkC¡
--;

129 
blkC¡
 = 
blockSize
 % 0x4u;

136 
blkC¡
 = 
blockSize
;

141 
blkC¡
 > 0u)

145 *
pD°
++ = (
q15_t
Ë
	`__SSAT
((((
q31_t
Ë(*
pSrcA
++Ë* (*
pSrcB
++)) >> 15), 16);

148 
blkC¡
--;

150 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_mult_q31.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_mu…_q31
(

67 
q31_t
 * 
pSrcA
,

68 
q31_t
 * 
pSrcB
,

69 
q31_t
 * 
pD°
,

70 
uöt32_t
 
blockSize
)

72 
uöt32_t
 
blkC¡
;

74 #i‚de‡
ARM_MATH_CM0_FAMILY


77 
q31_t
 
öA1
, 
öA2
, 
öA3
, 
öA4
;

78 
q31_t
 
öB1
, 
öB2
, 
öB3
, 
öB4
;

79 
q31_t
 
out1
, 
out2
, 
out3
, 
out4
;

82 
blkC¡
 = 
blockSize
 >> 2u;

86 
blkC¡
 > 0u)

90 
öA1
 = *
pSrcA
++;

91 
öA2
 = *
pSrcA
++;

92 
öA3
 = *
pSrcA
++;

93 
öA4
 = *
pSrcA
++;

94 
öB1
 = *
pSrcB
++;

95 
öB2
 = *
pSrcB
++;

96 
öB3
 = *
pSrcB
++;

97 
öB4
 = *
pSrcB
++;

99 
out1
 = ((
q63_t
Ë
öA1
 * 
öB1
) >> 32;

100 
out2
 = ((
q63_t
Ë
öA2
 * 
öB2
) >> 32;

101 
out3
 = ((
q63_t
Ë
öA3
 * 
öB3
) >> 32;

102 
out4
 = ((
q63_t
Ë
öA4
 * 
öB4
) >> 32;

104 
out1
 = 
	`__SSAT
(out1, 31);

105 
out2
 = 
	`__SSAT
(out2, 31);

106 
out3
 = 
	`__SSAT
(out3, 31);

107 
out4
 = 
	`__SSAT
(out4, 31);

109 *
pD°
++ = 
out1
 << 1u;

110 *
pD°
++ = 
out2
 << 1u;

111 *
pD°
++ = 
out3
 << 1u;

112 *
pD°
++ = 
out4
 << 1u;

115 
blkC¡
--;

120 
blkC¡
 = 
blockSize
 % 0x4u;

122 
blkC¡
 > 0u)

126 
öA1
 = *
pSrcA
++;

127 
öB1
 = *
pSrcB
++;

128 
out1
 = ((
q63_t
Ë
öA1
 * 
öB1
) >> 32;

129 
out1
 = 
	`__SSAT
(out1, 31);

130 *
pD°
++ = 
out1
 << 1u;

133 
blkC¡
--;

141 
blkC¡
 = 
blockSize
;

144 
blkC¡
 > 0u)

148 *
pD°
++ =

149 (
q31_t
Ë
	`˛ù_q63_to_q31
(((
q63_t
Ë(*
pSrcA
++Ë* (*
pSrcB
++)) >> 31);

152 
blkC¡
--;

156 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_mult_q7.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_mu…_q7
(

67 
q7_t
 * 
pSrcA
,

68 
q7_t
 * 
pSrcB
,

69 
q7_t
 * 
pD°
,

70 
uöt32_t
 
blockSize
)

72 
uöt32_t
 
blkC¡
;

74 #i‚de‡
ARM_MATH_CM0_FAMILY


77 
q7_t
 
out1
, 
out2
, 
out3
, 
out4
;

80 
blkC¡
 = 
blockSize
 >> 2u;

84 
blkC¡
 > 0u)

88 
out1
 = (
q7_t
Ë
	`__SSAT
((((
q15_t
Ë(*
pSrcA
++Ë* (*
pSrcB
++)) >> 7), 8);

89 
out2
 = (
q7_t
Ë
	`__SSAT
((((
q15_t
Ë(*
pSrcA
++Ë* (*
pSrcB
++)) >> 7), 8);

90 
out3
 = (
q7_t
Ë
	`__SSAT
((((
q15_t
Ë(*
pSrcA
++Ë* (*
pSrcB
++)) >> 7), 8);

91 
out4
 = (
q7_t
Ë
	`__SSAT
((((
q15_t
Ë(*
pSrcA
++Ë* (*
pSrcB
++)) >> 7), 8);

94 *
	`__SIMD32
(
pD°
)++ = 
	`__PACKq7
(
out1
, 
out2
, 
out3
, 
out4
);

97 
blkC¡
--;

102 
blkC¡
 = 
blockSize
 % 0x4u;

109 
blkC¡
 = 
blockSize
;

114 
blkC¡
 > 0u)

118 *
pD°
++ = (
q7_t
Ë
	`__SSAT
((((
q15_t
Ë(*
pSrcA
++Ë* (*
pSrcB
++)) >> 7), 8);

121 
blkC¡
--;

123 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_negate_f32.c

41 
	~"¨m_m©h.h
"

74 
	$¨m_√g©e_f32
(

75 
Êﬂt32_t
 * 
pSrc
,

76 
Êﬂt32_t
 * 
pD°
,

77 
uöt32_t
 
blockSize
)

79 
uöt32_t
 
blkC¡
;

82 #i‚de‡
ARM_MATH_CM0_FAMILY


85 
Êﬂt32_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

88 
blkC¡
 = 
blockSize
 >> 2u;

92 
blkC¡
 > 0u)

95 
ö1
 = *
pSrc
;

96 
ö2
 = *(
pSrc
 + 1);

97 
ö3
 = *(
pSrc
 + 2);

98 
ö4
 = *(
pSrc
 + 3);

101 
ö1
 = -in1;

102 
ö2
 = -in2;

103 
ö3
 = -in3;

104 
ö4
 = -in4;

107 *
pD°
 = 
ö1
;

108 *(
pD°
 + 1Ë
ö2
;

109 *(
pD°
 + 2Ë
ö3
;

110 *(
pD°
 + 3Ë
ö4
;

113 
pSrc
 += 4u;

114 
pD°
 += 4u;

117 
blkC¡
--;

122 
blkC¡
 = 
blockSize
 % 0x4u;

129 
blkC¡
 = 
blockSize
;

133 
blkC¡
 > 0u)

137 *
pD°
++ = -*
pSrc
++;

140 
blkC¡
--;

142 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_negate_q15.c

40 
	~"¨m_m©h.h
"

68 
	$¨m_√g©e_q15
(

69 
q15_t
 * 
pSrc
,

70 
q15_t
 * 
pD°
,

71 
uöt32_t
 
blockSize
)

73 
uöt32_t
 
blkC¡
;

74 
q15_t
 
ö
;

76 #i‚de‡
ARM_MATH_CM0_FAMILY


80 
q31_t
 
ö1
, 
ö2
;

84 
blkC¡
 = 
blockSize
 >> 2u;

88 
blkC¡
 > 0u)

92 
ö1
 = 
	`_SIMD32_OFFSET
(
pSrc
);

93 
ö2
 = 
	`_SIMD32_OFFSET
(
pSrc
 + 2);

96 
ö1
 = 
	`__QSUB16
(0, in1);

99 
ö2
 = 
	`__QSUB16
(0, in2);

102 
	`_SIMD32_OFFSET
(
pD°
Ë
ö1
;

104 
	`_SIMD32_OFFSET
(
pD°
 + 2Ë
ö2
;

108 
pSrc
 += 4u;

109 
pD°
 += 4u;

112 
blkC¡
--;

117 
blkC¡
 = 
blockSize
 % 0x4u;

124 
blkC¡
 = 
blockSize
;

128 
blkC¡
 > 0u)

132 
ö
 = *
pSrc
++;

133 *
pD°
++ = (
ö
 =(
q15_t
) 0x8000) ? 0x7fff : -in;

136 
blkC¡
--;

138 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_negate_q31.c

41 
	~"¨m_m©h.h
"

65 
	$¨m_√g©e_q31
(

66 
q31_t
 * 
pSrc
,

67 
q31_t
 * 
pD°
,

68 
uöt32_t
 
blockSize
)

70 
q31_t
 
ö
;

71 
uöt32_t
 
blkC¡
;

73 #i‚de‡
ARM_MATH_CM0_FAMILY


76 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

79 
blkC¡
 = 
blockSize
 >> 2u;

83 
blkC¡
 > 0u)

87 
ö1
 = *
pSrc
++;

88 
ö2
 = *
pSrc
++;

89 
ö3
 = *
pSrc
++;

90 
ö4
 = *
pSrc
++;

92 *
pD°
++ = 
	`__QSUB
(0, 
ö1
);

93 *
pD°
++ = 
	`__QSUB
(0, 
ö2
);

94 *
pD°
++ = 
	`__QSUB
(0, 
ö3
);

95 *
pD°
++ = 
	`__QSUB
(0, 
ö4
);

98 
blkC¡
--;

103 
blkC¡
 = 
blockSize
 % 0x4u;

110 
blkC¡
 = 
blockSize
;

115 
blkC¡
 > 0u)

119 
ö
 = *
pSrc
++;

120 *
pD°
++ = (
ö
 =
INT32_MIN
Ë? 
INT32_MAX
 : -in;

123 
blkC¡
--;

125 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_negate_q7.c

41 
	~"¨m_m©h.h
"

65 
	$¨m_√g©e_q7
(

66 
q7_t
 * 
pSrc
,

67 
q7_t
 * 
pD°
,

68 
uöt32_t
 
blockSize
)

70 
uöt32_t
 
blkC¡
;

71 
q7_t
 
ö
;

73 #i‚de‡
ARM_MATH_CM0_FAMILY


76 
q31_t
 
öput
;

77 
q31_t
 
zîo
 = 0x00000000;

81 
blkC¡
 = 
blockSize
 >> 2u;

85 
blkC¡
 > 0u)

89 
öput
 = *
	`__SIMD32
(
pSrc
)++;

92 *
	`__SIMD32
(
pD°
)++ = 
	`__QSUB8
(
zîo
, 
öput
);

95 
blkC¡
--;

100 
blkC¡
 = 
blockSize
 % 0x4u;

107 
blkC¡
 = 
blockSize
;

111 
blkC¡
 > 0u)

115 
ö
 = *
pSrc
++;

116 *
pD°
++ = (
ö
 =(
q7_t
) 0x80) ? 0x7f : -in;

119 
blkC¡
--;

121 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_offset_f32.c

40 
	~"¨m_m©h.h
"

75 
	$¨m_off£t_f32
(

76 
Êﬂt32_t
 * 
pSrc
,

77 
Êﬂt32_t
 
off£t
,

78 
Êﬂt32_t
 * 
pD°
,

79 
uöt32_t
 
blockSize
)

81 
uöt32_t
 
blkC¡
;

83 #i‚de‡
ARM_MATH_CM0_FAMILY


86 
Êﬂt32_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

89 
blkC¡
 = 
blockSize
 >> 2u;

93 
blkC¡
 > 0u)

98 
ö1
 = *
pSrc
;

99 
ö2
 = *(
pSrc
 + 1);

102 
ö1
 = in1 + 
off£t
;

105 
ö3
 = *(
pSrc
 + 2);

108 
ö2
 = in2 + 
off£t
;

111 
ö4
 = *(
pSrc
 + 3);

114 
ö3
 = in3 + 
off£t
;

117 *
pD°
 = 
ö1
;

120 
ö4
 = in4 + 
off£t
;

123 *(
pD°
 + 1Ë
ö2
;

126 *(
pD°
 + 2Ë
ö3
;

129 *(
pD°
 + 3Ë
ö4
;

132 
pSrc
 += 4u;

133 
pD°
 += 4u;

136 
blkC¡
--;

141 
blkC¡
 = 
blockSize
 % 0x4u;

148 
blkC¡
 = 
blockSize
;

152 
blkC¡
 > 0u)

156 *
pD°
++ = (*
pSrc
++Ë+ 
off£t
;

159 
blkC¡
--;

161 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_offset_q15.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_off£t_q15
(

67 
q15_t
 * 
pSrc
,

68 
q15_t
 
off£t
,

69 
q15_t
 * 
pD°
,

70 
uöt32_t
 
blockSize
)

72 
uöt32_t
 
blkC¡
;

74 #i‚de‡
ARM_MATH_CM0_FAMILY


77 
q31_t
 
off£t_∑cked
;

81 
blkC¡
 = 
blockSize
 >> 2u;

84 
off£t_∑cked
 = 
	`__PKHBT
(
off£t
, offset, 16);

88 
blkC¡
 > 0u)

92 *
	`__SIMD32
(
pD°
)++ = 
	`__QADD16
(*__SIMD32(
pSrc
)++, 
off£t_∑cked
);

93 *
	`__SIMD32
(
pD°
)++ = 
	`__QADD16
(*__SIMD32(
pSrc
)++, 
off£t_∑cked
);

96 
blkC¡
--;

101 
blkC¡
 = 
blockSize
 % 0x4u;

103 
blkC¡
 > 0u)

107 *
pD°
++ = (
q15_t
Ë
	`__QADD16
(*
pSrc
++, 
off£t
);

110 
blkC¡
--;

118 
blkC¡
 = 
blockSize
;

120 
blkC¡
 > 0u)

124 *
pD°
++ = (
q15_t
Ë
	`__SSAT
(((
q31_t
Ë* 
pSrc
++ + 
off£t
), 16);

127 
blkC¡
--;

132 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_offset_q31.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_off£t_q31
(

67 
q31_t
 * 
pSrc
,

68 
q31_t
 
off£t
,

69 
q31_t
 * 
pD°
,

70 
uöt32_t
 
blockSize
)

72 
uöt32_t
 
blkC¡
;

74 #i‚de‡
ARM_MATH_CM0_FAMILY


77 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

81 
blkC¡
 = 
blockSize
 >> 2u;

85 
blkC¡
 > 0u)

89 
ö1
 = *
pSrc
++;

90 
ö2
 = *
pSrc
++;

91 
ö3
 = *
pSrc
++;

92 
ö4
 = *
pSrc
++;

94 *
pD°
++ = 
	`__QADD
(
ö1
, 
off£t
);

95 *
pD°
++ = 
	`__QADD
(
ö2
, 
off£t
);

96 *
pD°
++ = 
	`__QADD
(
ö3
, 
off£t
);

97 *
pD°
++ = 
	`__QADD
(
ö4
, 
off£t
);

100 
blkC¡
--;

105 
blkC¡
 = 
blockSize
 % 0x4u;

107 
blkC¡
 > 0u)

111 *
pD°
++ = 
	`__QADD
(*
pSrc
++, 
off£t
);

114 
blkC¡
--;

122 
blkC¡
 = 
blockSize
;

124 
blkC¡
 > 0u)

128 *
pD°
++ = (
q31_t
Ë
	`˛ù_q63_to_q31
((
q63_t
Ë* 
pSrc
++ + 
off£t
);

131 
blkC¡
--;

136 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_offset_q7.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_off£t_q7
(

67 
q7_t
 * 
pSrc
,

68 
q7_t
 
off£t
,

69 
q7_t
 * 
pD°
,

70 
uöt32_t
 
blockSize
)

72 
uöt32_t
 
blkC¡
;

74 #i‚de‡
ARM_MATH_CM0_FAMILY


77 
q31_t
 
off£t_∑cked
;

81 
blkC¡
 = 
blockSize
 >> 2u;

84 
off£t_∑cked
 = 
	`__PACKq7
(
off£t
, offset, offset, offset);

88 
blkC¡
 > 0u)

92 *
	`__SIMD32
(
pD°
)++ = 
	`__QADD8
(*__SIMD32(
pSrc
)++, 
off£t_∑cked
);

95 
blkC¡
--;

100 
blkC¡
 = 
blockSize
 % 0x4u;

102 
blkC¡
 > 0u)

106 *
pD°
++ = (
q7_t
Ë
	`__SSAT
(*
pSrc
++ + 
off£t
, 8);

109 
blkC¡
--;

117 
blkC¡
 = 
blockSize
;

119 
blkC¡
 > 0u)

123 *
pD°
++ = (
q7_t
Ë
	`__SSAT
((
q15_t
Ë* 
pSrc
++ + 
off£t
, 8);

126 
blkC¡
--;

131 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_scale_f32.c

41 
	~"¨m_m©h.h
"

89 
	$¨m_sˇÀ_f32
(

90 
Êﬂt32_t
 * 
pSrc
,

91 
Êﬂt32_t
 
sˇÀ
,

92 
Êﬂt32_t
 * 
pD°
,

93 
uöt32_t
 
blockSize
)

95 
uöt32_t
 
blkC¡
;

96 #i‚de‡
ARM_MATH_CM0_FAMILY


99 
Êﬂt32_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

102 
blkC¡
 = 
blockSize
 >> 2u;

106 
blkC¡
 > 0u)

111 
ö1
 = *
pSrc
;

112 
ö2
 = *(
pSrc
 + 1);

115 
ö1
 = in1 * 
sˇÀ
;

118 
ö3
 = *(
pSrc
 + 2);

121 
ö2
 = in2 * 
sˇÀ
;

124 
ö4
 = *(
pSrc
 + 3);

127 
ö3
 = in3 * 
sˇÀ
;

128 
ö4
 = in4 * 
sˇÀ
;

130 *
pD°
 = 
ö1
;

131 *(
pD°
 + 1Ë
ö2
;

132 *(
pD°
 + 2Ë
ö3
;

133 *(
pD°
 + 3Ë
ö4
;

136 
pSrc
 += 4u;

137 
pD°
 += 4u;

140 
blkC¡
--;

145 
blkC¡
 = 
blockSize
 % 0x4u;

152 
blkC¡
 = 
blockSize
;

156 
blkC¡
 > 0u)

160 *
pD°
++ = (*
pSrc
++Ë* 
sˇÀ
;

163 
blkC¡
--;

165 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_scale_q15.c

41 
	~"¨m_m©h.h
"

68 
	$¨m_sˇÀ_q15
(

69 
q15_t
 * 
pSrc
,

70 
q15_t
 
sˇÀFø˘
,

71 
öt8_t
 
shi·
,

72 
q15_t
 * 
pD°
,

73 
uöt32_t
 
blockSize
)

75 
öt8_t
 
kShi·
 = 15 - 
shi·
;

76 
uöt32_t
 
blkC¡
;

78 #i‚de‡
ARM_MATH_CM0_FAMILY


81 
q15_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

82 
q31_t
 
öA1
, 
öA2
;

83 
q31_t
 
out1
, 
out2
, 
out3
, 
out4
;

87 
blkC¡
 = 
blockSize
 >> 2u;

91 
blkC¡
 > 0u)

94 
öA1
 = *
	`__SIMD32
(
pSrc
)++;

95 
öA2
 = *
	`__SIMD32
(
pSrc
)++;

100 
out1
 = (
q31_t
Ë((
q15_t
Ë(
öA1
 >> 16Ë* 
sˇÀFø˘
);

101 
out2
 = (
q31_t
Ë((
q15_t
Ë
öA1
 * 
sˇÀFø˘
);

102 
out3
 = (
q31_t
Ë((
q15_t
Ë(
öA2
 >> 16Ë* 
sˇÀFø˘
);

103 
out4
 = (
q31_t
Ë((
q15_t
Ë
öA2
 * 
sˇÀFø˘
);

106 
out1
 = out1 >> 
kShi·
;

107 
out2
 = out2 >> 
kShi·
;

108 
out3
 = out3 >> 
kShi·
;

109 
out4
 = out4 >> 
kShi·
;

112 
ö1
 = (
q15_t
Ë(
	`__SSAT
(
out1
, 16));

113 
ö2
 = (
q15_t
Ë(
	`__SSAT
(
out2
, 16));

114 
ö3
 = (
q15_t
Ë(
	`__SSAT
(
out3
, 16));

115 
ö4
 = (
q15_t
Ë(
	`__SSAT
(
out4
, 16));

118 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
ö2
, 
ö1
, 16);

119 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
ö4
, 
ö3
, 16);

122 
blkC¡
--;

127 
blkC¡
 = 
blockSize
 % 0x4u;

129 
blkC¡
 > 0u)

133 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
(((*
pSrc
++Ë* 
sˇÀFø˘
Ë>> 
kShi·
, 16));

136 
blkC¡
--;

144 
blkC¡
 = 
blockSize
;

146 
blkC¡
 > 0u)

150 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
(((
q31_t
Ë* 
pSrc
++ * 
sˇÀFø˘
Ë>> 
kShi·
, 16));

153 
blkC¡
--;

158 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_scale_q31.c

41 
	~"¨m_m©h.h
"

67 
	$¨m_sˇÀ_q31
(

68 
q31_t
 * 
pSrc
,

69 
q31_t
 
sˇÀFø˘
,

70 
öt8_t
 
shi·
,

71 
q31_t
 * 
pD°
,

72 
uöt32_t
 
blockSize
)

74 
öt8_t
 
kShi·
 = 
shi·
 + 1;

75 
öt8_t
 
sign
 = (
kShi·
 & 0x80);

76 
uöt32_t
 
blkC¡
;

77 
q31_t
 
ö
, 
out
;

79 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

84 
q31_t
 
out1
, 
out2
, 
out3
, 
out4
;

88 
blkC¡
 = 
blockSize
 >> 2u;

90 if(
sign
 == 0u)

94 
blkC¡
 > 0u)

97 
ö1
 = *
pSrc
;

98 
ö2
 = *(
pSrc
 + 1);

99 
ö3
 = *(
pSrc
 + 2);

100 
ö4
 = *(
pSrc
 + 3);

103 
ö1
 = ((
q63_t
Ëö1 * 
sˇÀFø˘
) >> 32;

104 
ö2
 = ((
q63_t
Ëö2 * 
sˇÀFø˘
) >> 32;

105 
ö3
 = ((
q63_t
Ëö3 * 
sˇÀFø˘
) >> 32;

106 
ö4
 = ((
q63_t
Ëö4 * 
sˇÀFø˘
) >> 32;

109 
out1
 = 
ö1
 << 
kShi·
;

110 
out2
 = 
ö2
 << 
kShi·
;

113 if(
ö1
 !(
out1
 >> 
kShi·
))

114 
out1
 = 0x7FFFFFFF ^ (
ö1
 >> 31);

116 if(
ö2
 !(
out2
 >> 
kShi·
))

117 
out2
 = 0x7FFFFFFF ^ (
ö2
 >> 31);

119 
out3
 = 
ö3
 << 
kShi·
;

120 
out4
 = 
ö4
 << 
kShi·
;

122 *
pD°
 = 
out1
;

123 *(
pD°
 + 1Ë
out2
;

125 if(
ö3
 !(
out3
 >> 
kShi·
))

126 
out3
 = 0x7FFFFFFF ^ (
ö3
 >> 31);

128 if(
ö4
 !(
out4
 >> 
kShi·
))

129 
out4
 = 0x7FFFFFFF ^ (
ö4
 >> 31);

132 *(
pD°
 + 2Ë
out3
;

133 *(
pD°
 + 3Ë
out4
;

136 
pSrc
 += 4u;

137 
pD°
 += 4u;

140 
blkC¡
--;

148 
blkC¡
 > 0u)

151 
ö1
 = *
pSrc
;

152 
ö2
 = *(
pSrc
 + 1);

153 
ö3
 = *(
pSrc
 + 2);

154 
ö4
 = *(
pSrc
 + 3);

157 
ö1
 = ((
q63_t
Ëö1 * 
sˇÀFø˘
) >> 32;

158 
ö2
 = ((
q63_t
Ëö2 * 
sˇÀFø˘
) >> 32;

159 
ö3
 = ((
q63_t
Ëö3 * 
sˇÀFø˘
) >> 32;

160 
ö4
 = ((
q63_t
Ëö4 * 
sˇÀFø˘
) >> 32;

163 
out1
 = 
ö1
 >> -
kShi·
;

164 
out2
 = 
ö2
 >> -
kShi·
;

166 
out3
 = 
ö3
 >> -
kShi·
;

167 
out4
 = 
ö4
 >> -
kShi·
;

170 *
pD°
 = 
out1
;

171 *(
pD°
 + 1Ë
out2
;

173 *(
pD°
 + 2Ë
out3
;

174 *(
pD°
 + 3Ë
out4
;

177 
pSrc
 += 4u;

178 
pD°
 += 4u;

181 
blkC¡
--;

186 
blkC¡
 = 
blockSize
 % 0x4u;

193 
blkC¡
 = 
blockSize
;

197 if(
sign
 == 0)

199 
blkC¡
 > 0u)

203 
ö
 = *
pSrc
++;

204 
ö
 = ((
q63_t
Ëö * 
sˇÀFø˘
) >> 32;

206 
out
 = 
ö
 << 
kShi·
;

208 if(
ö
 !(
out
 >> 
kShi·
))

209 
out
 = 0x7FFFFFFF ^ (
ö
 >> 31);

211 *
pD°
++ = 
out
;

214 
blkC¡
--;

219 
blkC¡
 > 0u)

223 
ö
 = *
pSrc
++;

224 
ö
 = ((
q63_t
Ëö * 
sˇÀFø˘
) >> 32;

226 
out
 = 
ö
 >> -
kShi·
;

228 *
pD°
++ = 
out
;

231 
blkC¡
--;

235 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_scale_q7.c

41 
	~"¨m_m©h.h
"

67 
	$¨m_sˇÀ_q7
(

68 
q7_t
 * 
pSrc
,

69 
q7_t
 
sˇÀFø˘
,

70 
öt8_t
 
shi·
,

71 
q7_t
 * 
pD°
,

72 
uöt32_t
 
blockSize
)

74 
öt8_t
 
kShi·
 = 7 - 
shi·
;

75 
uöt32_t
 
blkC¡
;

77 #i‚de‡
ARM_MATH_CM0_FAMILY


80 
q7_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
, 
out1
, 
out2
, 
out3
, 
out4
;

84 
blkC¡
 = 
blockSize
 >> 2u;

89 
blkC¡
 > 0u)

92 
ö1
 = *
pSrc
++;

93 
ö2
 = *
pSrc
++;

94 
ö3
 = *
pSrc
++;

95 
ö4
 = *
pSrc
++;

99 
out1
 = (
q7_t
Ë(
	`__SSAT
(((
ö1
Ë* 
sˇÀFø˘
Ë>> 
kShi·
, 8));

100 
out2
 = (
q7_t
Ë(
	`__SSAT
(((
ö2
Ë* 
sˇÀFø˘
Ë>> 
kShi·
, 8));

101 
out3
 = (
q7_t
Ë(
	`__SSAT
(((
ö3
Ë* 
sˇÀFø˘
Ë>> 
kShi·
, 8));

102 
out4
 = (
q7_t
Ë(
	`__SSAT
(((
ö4
Ë* 
sˇÀFø˘
Ë>> 
kShi·
, 8));

106 *
	`__SIMD32
(
pD°
)++ = 
	`__PACKq7
(
out1
, 
out2
, 
out3
, 
out4
);

109 
blkC¡
--;

114 
blkC¡
 = 
blockSize
 % 0x4u;

116 
blkC¡
 > 0u)

120 *
pD°
++ = (
q7_t
Ë(
	`__SSAT
(((*
pSrc
++Ë* 
sˇÀFø˘
Ë>> 
kShi·
, 8));

123 
blkC¡
--;

131 
blkC¡
 = 
blockSize
;

133 
blkC¡
 > 0u)

137 *
pD°
++ = (
q7_t
Ë(
	`__SSAT
((((
q15_t
Ë* 
pSrc
++ * 
sˇÀFø˘
Ë>> 
kShi·
), 8));

140 
blkC¡
--;

145 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_shift_q15.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_shi·_q15
(

67 
q15_t
 * 
pSrc
,

68 
öt8_t
 
shi·Bôs
,

69 
q15_t
 * 
pD°
,

70 
uöt32_t
 
blockSize
)

72 
uöt32_t
 
blkC¡
;

73 
uöt8_t
 
sign
;

75 #i‚de‡
ARM_MATH_CM0_FAMILY


79 
q15_t
 
ö1
, 
ö2
;

83 
blkC¡
 = 
blockSize
 >> 2u;

86 
sign
 = (
shi·Bôs
 & 0x80);

89 if(
sign
 == 0u)

93 
blkC¡
 > 0u)

96 
ö1
 = *
pSrc
++;

97 
ö2
 = *
pSrc
++;

100 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


102 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
	`__SSAT
((
ö1
 << 
shi·Bôs
), 16),

103 
	`__SSAT
((
ö2
 << 
shi·Bôs
), 16), 16);

107 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
	`__SSAT
((
ö2
 << 
shi·Bôs
), 16),

108 
	`__SSAT
((
ö1
 << 
shi·Bôs
), 16), 16);

112 
ö1
 = *
pSrc
++;

113 
ö2
 = *
pSrc
++;

115 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


117 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
	`__SSAT
((
ö1
 << 
shi·Bôs
), 16),

118 
	`__SSAT
((
ö2
 << 
shi·Bôs
), 16), 16);

122 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
	`__SSAT
((
ö2
 << 
shi·Bôs
), 16),

123 
	`__SSAT
((
ö1
 << 
shi·Bôs
), 16), 16);

128 
blkC¡
--;

133 
blkC¡
 = 
blockSize
 % 0x4u;

135 
blkC¡
 > 0u)

139 *
pD°
++ = 
	`__SSAT
((*
pSrc
++ << 
shi·Bôs
), 16);

142 
blkC¡
--;

149 
blkC¡
 > 0u)

152 
ö1
 = *
pSrc
++;

153 
ö2
 = *
pSrc
++;

157 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


159 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
((
ö1
 >> -
shi·Bôs
),

160 (
ö2
 >> -
shi·Bôs
), 16);

164 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
((
ö2
 >> -
shi·Bôs
),

165 (
ö1
 >> -
shi·Bôs
), 16);

169 
ö1
 = *
pSrc
++;

170 
ö2
 = *
pSrc
++;

172 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


174 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
((
ö1
 >> -
shi·Bôs
),

175 (
ö2
 >> -
shi·Bôs
), 16);

179 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
((
ö2
 >> -
shi·Bôs
),

180 (
ö1
 >> -
shi·Bôs
), 16);

185 
blkC¡
--;

190 
blkC¡
 = 
blockSize
 % 0x4u;

192 
blkC¡
 > 0u)

196 *
pD°
++ = (*
pSrc
++ >> -
shi·Bôs
);

199 
blkC¡
--;

208 
sign
 = (
shi·Bôs
 & 0x80);

211 if(
sign
 == 0u)

214 
blkC¡
 = 
blockSize
;

216 
blkC¡
 > 0u)

220 *
pD°
++ = 
	`__SSAT
(((
q31_t
Ë* 
pSrc
++ << 
shi·Bôs
), 16);

223 
blkC¡
--;

229 
blkC¡
 = 
blockSize
;

231 
blkC¡
 > 0u)

235 *
pD°
++ = (*
pSrc
++ >> -
shi·Bôs
);

238 
blkC¡
--;

244 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_shift_q31.c

41 
	~"¨m_m©h.h
"

84 
	$¨m_shi·_q31
(

85 
q31_t
 * 
pSrc
,

86 
öt8_t
 
shi·Bôs
,

87 
q31_t
 * 
pD°
,

88 
uöt32_t
 
blockSize
)

90 
uöt32_t
 
blkC¡
;

91 
uöt8_t
 
sign
 = (
shi·Bôs
 & 0x80);

93 #i‚de‡
ARM_MATH_CM0_FAMILY


95 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

96 
q31_t
 
out1
, 
out2
, 
out3
, 
out4
;

99 
blkC¡
 = 
blockSize
 >> 2u;

102 if(
sign
 == 0u)

106 
blkC¡
 > 0u)

110 
ö1
 = *
pSrc
;

111 
ö2
 = *(
pSrc
 + 1);

112 
out1
 = 
ö1
 << 
shi·Bôs
;

113 
ö3
 = *(
pSrc
 + 2);

114 
out2
 = 
ö2
 << 
shi·Bôs
;

115 
ö4
 = *(
pSrc
 + 3);

116 if(
ö1
 !(
out1
 >> 
shi·Bôs
))

117 
out1
 = 0x7FFFFFFF ^ (
ö1
 >> 31);

119 if(
ö2
 !(
out2
 >> 
shi·Bôs
))

120 
out2
 = 0x7FFFFFFF ^ (
ö2
 >> 31);

122 *
pD°
 = 
out1
;

123 
out3
 = 
ö3
 << 
shi·Bôs
;

124 *(
pD°
 + 1Ë
out2
;

125 
out4
 = 
ö4
 << 
shi·Bôs
;

127 if(
ö3
 !(
out3
 >> 
shi·Bôs
))

128 
out3
 = 0x7FFFFFFF ^ (
ö3
 >> 31);

130 if(
ö4
 !(
out4
 >> 
shi·Bôs
))

131 
out4
 = 0x7FFFFFFF ^ (
ö4
 >> 31);

133 *(
pD°
 + 2Ë
out3
;

134 *(
pD°
 + 3Ë
out4
;

137 
pSrc
 += 4u;

138 
pD°
 += 4u;

141 
blkC¡
--;

149 
blkC¡
 > 0u)

153 
ö1
 = *
pSrc
;

154 
ö2
 = *(
pSrc
 + 1);

155 
ö3
 = *(
pSrc
 + 2);

156 
ö4
 = *(
pSrc
 + 3);

158 *
pD°
 = (
ö1
 >> -
shi·Bôs
);

159 *(
pD°
 + 1Ë(
ö2
 >> -
shi·Bôs
);

160 *(
pD°
 + 2Ë(
ö3
 >> -
shi·Bôs
);

161 *(
pD°
 + 3Ë(
ö4
 >> -
shi·Bôs
);

164 
pSrc
 += 4u;

165 
pD°
 += 4u;

167 
blkC¡
--;

174 
blkC¡
 = 
blockSize
 % 0x4u;

182 
blkC¡
 = 
blockSize
;

187 
blkC¡
 > 0u)

191 *
pD°
++ = (
sign
 =0uË? 
	`˛ù_q63_to_q31
((
q63_t
Ë* 
pSrc
++ << 
shi·Bôs
) :

192 (*
pSrc
++ >> -
shi·Bôs
);

195 
blkC¡
--;

199 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_shift_q7.c

41 
	~"¨m_m©h.h
"

71 
	$¨m_shi·_q7
(

72 
q7_t
 * 
pSrc
,

73 
öt8_t
 
shi·Bôs
,

74 
q7_t
 * 
pD°
,

75 
uöt32_t
 
blockSize
)

77 
uöt32_t
 
blkC¡
;

78 
uöt8_t
 
sign
;

80 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
q7_t
 
ö1
;

84 
q7_t
 
ö2
;

85 
q7_t
 
ö3
;

86 
q7_t
 
ö4
;

90 
blkC¡
 = 
blockSize
 >> 2u;

93 
sign
 = (
shi·Bôs
 & 0x80);

96 if(
sign
 == 0u)

100 
blkC¡
 > 0u)

104 
ö1
 = *
pSrc
;

105 
ö2
 = *(
pSrc
 + 1);

106 
ö3
 = *(
pSrc
 + 2);

107 
ö4
 = *(
pSrc
 + 3);

110 *
	`__SIMD32
(
pD°
)++ = 
	`__PACKq7
(
	`__SSAT
((
ö1
 << 
shi·Bôs
), 8),

111 
	`__SSAT
((
ö2
 << 
shi·Bôs
), 8),

112 
	`__SSAT
((
ö3
 << 
shi·Bôs
), 8),

113 
	`__SSAT
((
ö4
 << 
shi·Bôs
), 8));

115 
pSrc
 += 4u;

118 
blkC¡
--;

123 
blkC¡
 = 
blockSize
 % 0x4u;

125 
blkC¡
 > 0u)

129 *
pD°
++ = (
q7_t
Ë
	`__SSAT
((*
pSrc
++ << 
shi·Bôs
), 8);

132 
blkC¡
--;

137 
shi·Bôs
 = -shiftBits;

140 
blkC¡
 > 0u)

144 
ö1
 = *
pSrc
;

145 
ö2
 = *(
pSrc
 + 1);

146 
ö3
 = *(
pSrc
 + 2);

147 
ö4
 = *(
pSrc
 + 3);

150 *
	`__SIMD32
(
pD°
)++ = 
	`__PACKq7
((
ö1
 >> 
shi·Bôs
), (
ö2
 >> shiftBits),

151 (
ö3
 >> 
shi·Bôs
), (
ö4
 >> shiftBits));

154 
pSrc
 += 4u;

157 
blkC¡
--;

162 
blkC¡
 = 
blockSize
 % 0x4u;

164 
blkC¡
 > 0u)

168 
ö1
 = *
pSrc
++;

169 *
pD°
++ = (
ö1
 >> 
shi·Bôs
);

172 
blkC¡
--;

181 
sign
 = (
shi·Bôs
 & 0x80);

184 if(
sign
 == 0u)

187 
blkC¡
 = 
blockSize
;

189 
blkC¡
 > 0u)

193 *
pD°
++ = (
q7_t
Ë
	`__SSAT
(((
q15_t
Ë* 
pSrc
++ << 
shi·Bôs
), 8);

196 
blkC¡
--;

202 
blkC¡
 = 
blockSize
;

204 
blkC¡
 > 0u)

208 *
pD°
++ = (*
pSrc
++ >> -
shi·Bôs
);

211 
blkC¡
--;

216 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_sub_f32.c

41 
	~"¨m_m©h.h
"

74 
	$¨m_sub_f32
(

75 
Êﬂt32_t
 * 
pSrcA
,

76 
Êﬂt32_t
 * 
pSrcB
,

77 
Êﬂt32_t
 * 
pD°
,

78 
uöt32_t
 
blockSize
)

80 
uöt32_t
 
blkC¡
;

82 #i‚de‡
ARM_MATH_CM0_FAMILY


85 
Êﬂt32_t
 
öA1
, 
öA2
, 
öA3
, 
öA4
;

86 
Êﬂt32_t
 
öB1
, 
öB2
, 
öB3
, 
öB4
;

89 
blkC¡
 = 
blockSize
 >> 2u;

93 
blkC¡
 > 0u)

98 
öA1
 = *
pSrcA
;

99 
öB1
 = *
pSrcB
;

100 
öA2
 = *(
pSrcA
 + 1);

101 
öB2
 = *(
pSrcB
 + 1);

102 
öA3
 = *(
pSrcA
 + 2);

103 
öB3
 = *(
pSrcB
 + 2);

104 
öA4
 = *(
pSrcA
 + 3);

105 
öB4
 = *(
pSrcB
 + 3);

109 *
pD°
 = 
öA1
 - 
öB1
;

110 *(
pD°
 + 1Ë
öA2
 - 
öB2
;

111 *(
pD°
 + 2Ë
öA3
 - 
öB3
;

112 *(
pD°
 + 3Ë
öA4
 - 
öB4
;

116 
pSrcA
 += 4u;

117 
pSrcB
 += 4u;

118 
pD°
 += 4u;

121 
blkC¡
--;

126 
blkC¡
 = 
blockSize
 % 0x4u;

133 
blkC¡
 = 
blockSize
;

137 
blkC¡
 > 0u)

141 *
pD°
++ = (*
pSrcA
++Ë- (*
pSrcB
++);

144 
blkC¡
--;

146 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_sub_q15.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_sub_q15
(

67 
q15_t
 * 
pSrcA
,

68 
q15_t
 * 
pSrcB
,

69 
q15_t
 * 
pD°
,

70 
uöt32_t
 
blockSize
)

72 
uöt32_t
 
blkC¡
;

75 #i‚de‡
ARM_MATH_CM0_FAMILY


78 
q31_t
 
öA1
, 
öA2
;

79 
q31_t
 
öB1
, 
öB2
;

82 
blkC¡
 = 
blockSize
 >> 2u;

86 
blkC¡
 > 0u)

90 
öA1
 = *
	`__SIMD32
(
pSrcA
)++;

91 
öA2
 = *
	`__SIMD32
(
pSrcA
)++;

92 
öB1
 = *
	`__SIMD32
(
pSrcB
)++;

93 
öB2
 = *
	`__SIMD32
(
pSrcB
)++;

95 *
	`__SIMD32
(
pD°
)++ = 
	`__QSUB16
(
öA1
, 
öB1
);

96 *
	`__SIMD32
(
pD°
)++ = 
	`__QSUB16
(
öA2
, 
öB2
);

99 
blkC¡
--;

104 
blkC¡
 = 
blockSize
 % 0x4u;

106 
blkC¡
 > 0u)

110 *
pD°
++ = (
q15_t
Ë
	`__QSUB16
(*
pSrcA
++, *
pSrcB
++);

113 
blkC¡
--;

121 
blkC¡
 = 
blockSize
;

123 
blkC¡
 > 0u)

127 *
pD°
++ = (
q15_t
Ë
	`__SSAT
(((
q31_t
Ë* 
pSrcA
++ - *
pSrcB
++), 16);

130 
blkC¡
--;

136 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_sub_q31.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_sub_q31
(

67 
q31_t
 * 
pSrcA
,

68 
q31_t
 * 
pSrcB
,

69 
q31_t
 * 
pD°
,

70 
uöt32_t
 
blockSize
)

72 
uöt32_t
 
blkC¡
;

75 #i‚de‡
ARM_MATH_CM0_FAMILY


78 
q31_t
 
öA1
, 
öA2
, 
öA3
, 
öA4
;

79 
q31_t
 
öB1
, 
öB2
, 
öB3
, 
öB4
;

82 
blkC¡
 = 
blockSize
 >> 2u;

86 
blkC¡
 > 0u)

90 
öA1
 = *
pSrcA
++;

91 
öA2
 = *
pSrcA
++;

92 
öB1
 = *
pSrcB
++;

93 
öB2
 = *
pSrcB
++;

95 
öA3
 = *
pSrcA
++;

96 
öA4
 = *
pSrcA
++;

97 
öB3
 = *
pSrcB
++;

98 
öB4
 = *
pSrcB
++;

100 *
pD°
++ = 
	`__QSUB
(
öA1
, 
öB1
);

101 *
pD°
++ = 
	`__QSUB
(
öA2
, 
öB2
);

102 *
pD°
++ = 
	`__QSUB
(
öA3
, 
öB3
);

103 *
pD°
++ = 
	`__QSUB
(
öA4
, 
öB4
);

106 
blkC¡
--;

111 
blkC¡
 = 
blockSize
 % 0x4u;

113 
blkC¡
 > 0u)

117 *
pD°
++ = 
	`__QSUB
(*
pSrcA
++, *
pSrcB
++);

120 
blkC¡
--;

128 
blkC¡
 = 
blockSize
;

130 
blkC¡
 > 0u)

134 *
pD°
++ = (
q31_t
Ë
	`˛ù_q63_to_q31
((
q63_t
Ë* 
pSrcA
++ - *
pSrcB
++);

137 
blkC¡
--;

142 
	}
}

	@CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_sub_q7.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_sub_q7
(

67 
q7_t
 * 
pSrcA
,

68 
q7_t
 * 
pSrcB
,

69 
q7_t
 * 
pD°
,

70 
uöt32_t
 
blockSize
)

72 
uöt32_t
 
blkC¡
;

74 #i‚de‡
ARM_MATH_CM0_FAMILY


79 
blkC¡
 = 
blockSize
 >> 2u;

83 
blkC¡
 > 0u)

87 *
	`__SIMD32
(
pD°
)++ = 
	`__QSUB8
(*__SIMD32(
pSrcA
)++, *__SIMD32(
pSrcB
)++);

90 
blkC¡
--;

95 
blkC¡
 = 
blockSize
 % 0x4u;

97 
blkC¡
 > 0u)

101 *
pD°
++ = 
	`__SSAT
(*
pSrcA
++ - *
pSrcB
++, 8);

104 
blkC¡
--;

112 
blkC¡
 = 
blockSize
;

114 
blkC¡
 > 0u)

118 *
pD°
++ = (
q7_t
Ë
	`__SSAT
((
q15_t
Ë* 
pSrcA
++ - *
pSrcB
++, 8);

121 
blkC¡
--;

127 
	}
}

	@CMSIS/DSP_Lib/Source/CommonTables/arm_common_tables.c

42 
	~"¨m_m©h.h
"

43 
	~"¨m_comm⁄_èbÀs.h
"

80 c⁄° 
uöt16_t
 
	g¨mBôRevTabÀ
[1024] = {

206 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_16
[32] = {

240 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_32
[64] = {

290 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_64
[128] = {

373 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_128
[256] = {

519 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_256
[512] = {

793 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_512
[1024] = {

1322 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_1024
[2048] = {

2364 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_2048
[4096] = {

4430 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_4096
[8192] = {

8552 c⁄° 
q31_t
 
	gtwiddÀC€f_16_q31
[24] = {

8585 c⁄° 
q31_t
 
	gtwiddÀC€f_32_q31
[48] = {

8630 c⁄° 
q31_t
 
	gtwiddÀC€f_64_q31
[96] = {

8699 c⁄° 
q31_t
 
	gtwiddÀC€f_128_q31
[192] = {

8816 c⁄° 
q31_t
 
	gtwiddÀC€f_256_q31
[384] = {

9029 c⁄° 
q31_t
 
	gtwiddÀC€f_512_q31
[768] = {

9434 c⁄° 
q31_t
 
	gtwiddÀC€f_1024_q31
[1536] = {

10223 c⁄° 
q31_t
 
	gtwiddÀC€f_2048_q31
[3072] = {

11780 c⁄° 
q31_t
 
	gtwiddÀC€f_4096_q31
[6144] =

14881 c⁄° 
q15_t
 
	gtwiddÀC€f_16_q15
[24] = {

14914 c⁄° 
q15_t
 
	gtwiddÀC€f_32_q15
[48] = {

14959 c⁄° 
q15_t
 
	gtwiddÀC€f_64_q15
[96] = {

15028 c⁄° 
q15_t
 
	gtwiddÀC€f_128_q15
[192] = {

15145 c⁄° 
q15_t
 
	gtwiddÀC€f_256_q15
[384] = {

15358 c⁄° 
q15_t
 
	gtwiddÀC€f_512_q15
[768] = {

15763 c⁄° 
q15_t
 
	gtwiddÀC€f_1024_q15
[1536] = {

16552 c⁄° 
q15_t
 
	gtwiddÀC€f_2048_q15
[3072] = {

18109 c⁄° 
q15_t
 
	gtwiddÀC€f_4096_q15
[6144] =

21193 c⁄° 
q15_t
 
ALIGN4
 
	g¨mRecùTabÀQ15
[64] = {

21210 c⁄° 
q31_t
 
	g¨mRecùTabÀQ31
[64] = {

21224 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ16
[
ARMBITREVINDEXTABLE__16_TABLE_LENGTH
] =

21230 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ32
[
ARMBITREVINDEXTABLE__32_TABLE_LENGTH
] =

21238 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ64
[
ARMBITREVINDEXTABLE__64_TABLE_LENGTH
] =

21247 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ128
[
ARMBITREVINDEXTABLE_128_TABLE_LENGTH
] =

21265 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ256
[
ARMBITREVINDEXTABLE_256_TABLE_LENGTH
] =

21303 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ512
[
ARMBITREVINDEXTABLE_512_TABLE_LENGTH
] =

21343 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ1024
[
ARMBITREVINDEXTABLE1024_TABLE_LENGTH
] =

21495 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ2048
[
ARMBITREVINDEXTABLE2048_TABLE_LENGTH
] =

21837 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ4096
[
ARMBITREVINDEXTABLE4096_TABLE_LENGTH
] =

22209 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ_fixed_16
[
ARMBITREVINDEXTABLE_FIXED___16_TABLE_LENGTH
] =

22215 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ_fixed_32
[
ARMBITREVINDEXTABLE_FIXED___32_TABLE_LENGTH
] =

22222 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ_fixed_64
[
ARMBITREVINDEXTABLE_FIXED___64_TABLE_LENGTH
] =

22230 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ_fixed_128
[
ARMBITREVINDEXTABLE_FIXED__128_TABLE_LENGTH
] =

22241 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ_fixed_256
[
ARMBITREVINDEXTABLE_FIXED__256_TABLE_LENGTH
] =

22260 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ_fixed_512
[
ARMBITREVINDEXTABLE_FIXED__512_TABLE_LENGTH
] =

22294 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ_fixed_1024
[
ARMBITREVINDEXTABLE_FIXED_1024_TABLE_LENGTH
] =

22368 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ_fixed_2048
[
ARMBITREVINDEXTABLE_FIXED_2048_TABLE_LENGTH
] =

22524 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ_fixed_4096
[
ARMBITREVINDEXTABLE_FIXED_4096_TABLE_LENGTH
] =

22870 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_rf·_32
[32] = {

22889 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_rf·_64
[64] = {

22924 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_rf·_128
[128] = {

22991 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_rf·_256
[256] = {

23122 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_rf·_512
[512] = {

23381 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_rf·_1024
[1024] = {

23896 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_rf·_2048
[2048] = {

24923 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_rf·_4096
[4096] = {

26988 c⁄° 
Êﬂt32_t
 
	gsöTabÀ_f32
[
FAST_MATH_TABLE_SIZE
 + 1] = {

27103 c⁄° 
q31_t
 
	gsöTabÀ_q31
[
FAST_MATH_TABLE_SIZE
 + 1] = {

27210 c⁄° 
q15_t
 
	gsöTabÀ_q15
[
FAST_MATH_TABLE_SIZE
 + 1] = {

	@CMSIS/DSP_Lib/Source/CommonTables/arm_const_structs.c

43 
	~"¨m_c⁄°_°ru˘s.h
"

47 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn16
 = {

48 16, 
twiddÀC€f_16
, 
¨mBôRevIndexTabÀ16
, 
ARMBITREVINDEXTABLE__16_TABLE_LENGTH


51 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn32
 = {

52 32, 
twiddÀC€f_32
, 
¨mBôRevIndexTabÀ32
, 
ARMBITREVINDEXTABLE__32_TABLE_LENGTH


55 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn64
 = {

56 64, 
twiddÀC€f_64
, 
¨mBôRevIndexTabÀ64
, 
ARMBITREVINDEXTABLE__64_TABLE_LENGTH


59 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn128
 = {

60 128, 
twiddÀC€f_128
, 
¨mBôRevIndexTabÀ128
, 
ARMBITREVINDEXTABLE_128_TABLE_LENGTH


63 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn256
 = {

64 256, 
twiddÀC€f_256
, 
¨mBôRevIndexTabÀ256
, 
ARMBITREVINDEXTABLE_256_TABLE_LENGTH


67 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn512
 = {

68 512, 
twiddÀC€f_512
, 
¨mBôRevIndexTabÀ512
, 
ARMBITREVINDEXTABLE_512_TABLE_LENGTH


71 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn1024
 = {

72 1024, 
twiddÀC€f_1024
, 
¨mBôRevIndexTabÀ1024
, 
ARMBITREVINDEXTABLE1024_TABLE_LENGTH


75 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn2048
 = {

76 2048, 
twiddÀC€f_2048
, 
¨mBôRevIndexTabÀ2048
, 
ARMBITREVINDEXTABLE2048_TABLE_LENGTH


79 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn4096
 = {

80 4096, 
twiddÀC€f_4096
, 
¨mBôRevIndexTabÀ4096
, 
ARMBITREVINDEXTABLE4096_TABLE_LENGTH


85 c⁄° 
¨m_cf·_ö°™˚_q31
 
	g¨m_cf·_sR_q31_Àn16
 = {

86 16, 
twiddÀC€f_16_q31
, 
¨mBôRevIndexTabÀ_fixed_16
, 
ARMBITREVINDEXTABLE_FIXED___16_TABLE_LENGTH


89 c⁄° 
¨m_cf·_ö°™˚_q31
 
	g¨m_cf·_sR_q31_Àn32
 = {

90 32, 
twiddÀC€f_32_q31
, 
¨mBôRevIndexTabÀ_fixed_32
, 
ARMBITREVINDEXTABLE_FIXED___32_TABLE_LENGTH


93 c⁄° 
¨m_cf·_ö°™˚_q31
 
	g¨m_cf·_sR_q31_Àn64
 = {

94 64, 
twiddÀC€f_64_q31
, 
¨mBôRevIndexTabÀ_fixed_64
, 
ARMBITREVINDEXTABLE_FIXED___64_TABLE_LENGTH


97 c⁄° 
¨m_cf·_ö°™˚_q31
 
	g¨m_cf·_sR_q31_Àn128
 = {

98 128, 
twiddÀC€f_128_q31
, 
¨mBôRevIndexTabÀ_fixed_128
, 
ARMBITREVINDEXTABLE_FIXED__128_TABLE_LENGTH


101 c⁄° 
¨m_cf·_ö°™˚_q31
 
	g¨m_cf·_sR_q31_Àn256
 = {

102 256, 
twiddÀC€f_256_q31
, 
¨mBôRevIndexTabÀ_fixed_256
, 
ARMBITREVINDEXTABLE_FIXED__256_TABLE_LENGTH


105 c⁄° 
¨m_cf·_ö°™˚_q31
 
	g¨m_cf·_sR_q31_Àn512
 = {

106 512, 
twiddÀC€f_512_q31
, 
¨mBôRevIndexTabÀ_fixed_512
, 
ARMBITREVINDEXTABLE_FIXED__512_TABLE_LENGTH


109 c⁄° 
¨m_cf·_ö°™˚_q31
 
	g¨m_cf·_sR_q31_Àn1024
 = {

110 1024, 
twiddÀC€f_1024_q31
, 
¨mBôRevIndexTabÀ_fixed_1024
, 
ARMBITREVINDEXTABLE_FIXED_1024_TABLE_LENGTH


113 c⁄° 
¨m_cf·_ö°™˚_q31
 
	g¨m_cf·_sR_q31_Àn2048
 = {

114 2048, 
twiddÀC€f_2048_q31
, 
¨mBôRevIndexTabÀ_fixed_2048
, 
ARMBITREVINDEXTABLE_FIXED_2048_TABLE_LENGTH


117 c⁄° 
¨m_cf·_ö°™˚_q31
 
	g¨m_cf·_sR_q31_Àn4096
 = {

118 4096, 
twiddÀC€f_4096_q31
, 
¨mBôRevIndexTabÀ_fixed_4096
, 
ARMBITREVINDEXTABLE_FIXED_4096_TABLE_LENGTH


122 c⁄° 
¨m_cf·_ö°™˚_q15
 
	g¨m_cf·_sR_q15_Àn16
 = {

123 16, 
twiddÀC€f_16_q15
, 
¨mBôRevIndexTabÀ_fixed_16
, 
ARMBITREVINDEXTABLE_FIXED___16_TABLE_LENGTH


126 c⁄° 
¨m_cf·_ö°™˚_q15
 
	g¨m_cf·_sR_q15_Àn32
 = {

127 32, 
twiddÀC€f_32_q15
, 
¨mBôRevIndexTabÀ_fixed_32
, 
ARMBITREVINDEXTABLE_FIXED___32_TABLE_LENGTH


130 c⁄° 
¨m_cf·_ö°™˚_q15
 
	g¨m_cf·_sR_q15_Àn64
 = {

131 64, 
twiddÀC€f_64_q15
, 
¨mBôRevIndexTabÀ_fixed_64
, 
ARMBITREVINDEXTABLE_FIXED___64_TABLE_LENGTH


134 c⁄° 
¨m_cf·_ö°™˚_q15
 
	g¨m_cf·_sR_q15_Àn128
 = {

135 128, 
twiddÀC€f_128_q15
, 
¨mBôRevIndexTabÀ_fixed_128
, 
ARMBITREVINDEXTABLE_FIXED__128_TABLE_LENGTH


138 c⁄° 
¨m_cf·_ö°™˚_q15
 
	g¨m_cf·_sR_q15_Àn256
 = {

139 256, 
twiddÀC€f_256_q15
, 
¨mBôRevIndexTabÀ_fixed_256
, 
ARMBITREVINDEXTABLE_FIXED__256_TABLE_LENGTH


142 c⁄° 
¨m_cf·_ö°™˚_q15
 
	g¨m_cf·_sR_q15_Àn512
 = {

143 512, 
twiddÀC€f_512_q15
, 
¨mBôRevIndexTabÀ_fixed_512
, 
ARMBITREVINDEXTABLE_FIXED__512_TABLE_LENGTH


146 c⁄° 
¨m_cf·_ö°™˚_q15
 
	g¨m_cf·_sR_q15_Àn1024
 = {

147 1024, 
twiddÀC€f_1024_q15
, 
¨mBôRevIndexTabÀ_fixed_1024
, 
ARMBITREVINDEXTABLE_FIXED_1024_TABLE_LENGTH


150 c⁄° 
¨m_cf·_ö°™˚_q15
 
	g¨m_cf·_sR_q15_Àn2048
 = {

151 2048, 
twiddÀC€f_2048_q15
, 
¨mBôRevIndexTabÀ_fixed_2048
, 
ARMBITREVINDEXTABLE_FIXED_2048_TABLE_LENGTH


154 c⁄° 
¨m_cf·_ö°™˚_q15
 
	g¨m_cf·_sR_q15_Àn4096
 = {

155 4096, 
twiddÀC€f_4096_q15
, 
¨mBôRevIndexTabÀ_fixed_4096
, 
ARMBITREVINDEXTABLE_FIXED_4096_TABLE_LENGTH


	@CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_conj_f32.c

40 
	~"¨m_m©h.h
"

82 
	$¨m_cm∂x_c⁄j_f32
(

83 
Êﬂt32_t
 * 
pSrc
,

84 
Êﬂt32_t
 * 
pD°
,

85 
uöt32_t
 
numSam∂es
)

87 
uöt32_t
 
blkC¡
;

89 #i‚de‡
ARM_MATH_CM0_FAMILY


92 
Êﬂt32_t
 
öR1
, 
öR2
, 
öR3
, 
öR4
;

93 
Êﬂt32_t
 
öI1
, 
öI2
, 
öI3
, 
öI4
;

96 
blkC¡
 = 
numSam∂es
 >> 2u;

100 
blkC¡
 > 0u)

105 
öR1
 = 
pSrc
[0];

107 
pD°
[0] = 
öR1
;

108 
öR2
 = 
pSrc
[2];

109 
pD°
[2] = 
öR2
;

110 
öR3
 = 
pSrc
[4];

111 
pD°
[4] = 
öR3
;

112 
öR4
 = 
pSrc
[6];

113 
pD°
[6] = 
öR4
;

116 
öI1
 = 
pSrc
[1];

117 
öI2
 = 
pSrc
[3];

120 
öI1
 = -inI1;

123 
öI3
 = 
pSrc
[5];

126 
öI2
 = -inI2;

129 
öI4
 = 
pSrc
[7];

132 
öI3
 = -inI3;

135 
pD°
[1] = 
öI1
;

136 
pD°
[3] = 
öI2
;

139 
öI4
 = -inI4;

142 
pD°
[5] = 
öI3
;

145 
pSrc
 += 8u;

148 
pD°
[7] = 
öI4
;

151 
pD°
 += 8u;

154 
blkC¡
--;

159 
blkC¡
 = 
numSam∂es
 % 0x4u;

164 
blkC¡
 = 
numSam∂es
;

168 
blkC¡
 > 0u)

172 *
pD°
++ = *
pSrc
++;

173 *
pD°
++ = -*
pSrc
++;

176 
blkC¡
--;

178 
	}
}

	@CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_conj_q15.c

41 
	~"¨m_m©h.h
"

65 
	$¨m_cm∂x_c⁄j_q15
(

66 
q15_t
 * 
pSrc
,

67 
q15_t
 * 
pD°
,

68 
uöt32_t
 
numSam∂es
)

71 #i‚de‡
ARM_MATH_CM0_FAMILY


74 
uöt32_t
 
blkC¡
;

75 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

76 
q31_t
 
zîo
 = 0;

79 
blkC¡
 = 
numSam∂es
 >> 2u;

83 
blkC¡
 > 0u)

87 
ö1
 = *
	`__SIMD32
(
pSrc
)++;

88 
ö2
 = *
	`__SIMD32
(
pSrc
)++;

89 
ö3
 = *
	`__SIMD32
(
pSrc
)++;

90 
ö4
 = *
	`__SIMD32
(
pSrc
)++;

92 #i‚de‡
ARM_MATH_BIG_ENDIAN


94 
ö1
 = 
	`__QASX
(
zîo
, in1);

95 
ö2
 = 
	`__QASX
(
zîo
, in2);

96 
ö3
 = 
	`__QASX
(
zîo
, in3);

97 
ö4
 = 
	`__QASX
(
zîo
, in4);

101 
ö1
 = 
	`__QSAX
(
zîo
, in1);

102 
ö2
 = 
	`__QSAX
(
zîo
, in2);

103 
ö3
 = 
	`__QSAX
(
zîo
, in3);

104 
ö4
 = 
	`__QSAX
(
zîo
, in4);

108 
ö1
 = ((
uöt32_t
) in1 >> 16) | ((uint32_t) in1 << 16);

109 
ö2
 = ((
uöt32_t
) in2 >> 16) | ((uint32_t) in2 << 16);

110 
ö3
 = ((
uöt32_t
) in3 >> 16) | ((uint32_t) in3 << 16);

111 
ö4
 = ((
uöt32_t
) in4 >> 16) | ((uint32_t) in4 << 16);

113 *
	`__SIMD32
(
pD°
)++ = 
ö1
;

114 *
	`__SIMD32
(
pD°
)++ = 
ö2
;

115 *
	`__SIMD32
(
pD°
)++ = 
ö3
;

116 *
	`__SIMD32
(
pD°
)++ = 
ö4
;

119 
blkC¡
--;

124 
blkC¡
 = 
numSam∂es
 % 0x4u;

126 
blkC¡
 > 0u)

130 *
pD°
++ = *
pSrc
++;

131 *
pD°
++ = 
	`__SSAT
(-*
pSrc
++, 16);

134 
blkC¡
--;

139 
q15_t
 
ö
;

143 
numSam∂es
 > 0u)

147 *
pD°
++ = *
pSrc
++;

148 
ö
 = *
pSrc
++;

149 *
pD°
++ = (
ö
 =(
q15_t
) 0x8000) ? 0x7fff : -in;

152 
numSam∂es
--;

157 
	}
}

	@CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_conj_q31.c

40 
	~"¨m_m©h.h
"

64 
	$¨m_cm∂x_c⁄j_q31
(

65 
q31_t
 * 
pSrc
,

66 
q31_t
 * 
pD°
,

67 
uöt32_t
 
numSam∂es
)

69 
uöt32_t
 
blkC¡
;

70 
q31_t
 
ö
;

72 #i‚de‡
ARM_MATH_CM0_FAMILY


75 
q31_t
 
öR1
, 
öR2
, 
öR3
, 
öR4
;

76 
q31_t
 
öI1
, 
öI2
, 
öI3
, 
öI4
;

79 
blkC¡
 = 
numSam∂es
 >> 2u;

83 
blkC¡
 > 0u)

89 
öR1
 = 
pSrc
[0];

91 
pD°
[0] = 
öR1
;

94 
öI1
 = 
pSrc
[1];

97 
öR2
 = 
pSrc
[2];

99 
pD°
[2] = 
öR2
;

102 
öI2
 = 
pSrc
[3];

105 
öI1
 = 
	`__QSUB
(0, inI1);

108 
öR3
 = 
pSrc
[4];

110 
pD°
[4] = 
öR3
;

113 
öI3
 = 
pSrc
[5];

116 
öI2
 = 
	`__QSUB
(0, inI2);

119 
öR4
 = 
pSrc
[6];

121 
pD°
[6] = 
öR4
;

124 
öI3
 = 
	`__QSUB
(0, inI3);

127 
öI4
 = 
pSrc
[7];

130 
pD°
[1] = 
öI1
;

133 
öI4
 = 
	`__QSUB
(0, inI4);

136 
pD°
[3] = 
öI2
;

139 
pSrc
 += 8u;

142 
pD°
[5] = 
öI3
;

143 
pD°
[7] = 
öI4
;

146 
pD°
 += 8u;

149 
blkC¡
--;

154 
blkC¡
 = 
numSam∂es
 % 0x4u;

159 
blkC¡
 = 
numSam∂es
;

164 
blkC¡
 > 0u)

169 *
pD°
++ = *
pSrc
++;

170 
ö
 = *
pSrc
++;

171 *
pD°
++ = (
ö
 =
INT32_MIN
Ë? 
INT32_MAX
 : -in;

174 
blkC¡
--;

176 
	}
}

	@CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c

41 
	~"¨m_m©h.h
"

88 
	$¨m_cm∂x_dŸ_¥od_f32
(

89 
Êﬂt32_t
 * 
pSrcA
,

90 
Êﬂt32_t
 * 
pSrcB
,

91 
uöt32_t
 
numSam∂es
,

92 
Êﬂt32_t
 * 
ªÆResu…
,

93 
Êﬂt32_t
 * 
imagResu…
)

95 
Êﬂt32_t
 
ªÆ_sum
 = 0.0f, 
imag_sum
 = 0.0f;

96 
Êﬂt32_t
 
a0
,
b0
,
c0
,
d0
;

98 #i‚de‡
ARM_MATH_CM0_FAMILY


101 
uöt32_t
 
blkC¡
;

104 
blkC¡
 = 
numSam∂es
 >> 2u;

108 
blkC¡
 > 0u)

110 
a0
 = *
pSrcA
++;

111 
b0
 = *
pSrcA
++;

112 
c0
 = *
pSrcB
++;

113 
d0
 = *
pSrcB
++;

115 
ªÆ_sum
 +
a0
 * 
c0
;

116 
imag_sum
 +
a0
 * 
d0
;

117 
ªÆ_sum
 -
b0
 * 
d0
;

118 
imag_sum
 +
b0
 * 
c0
;

120 
a0
 = *
pSrcA
++;

121 
b0
 = *
pSrcA
++;

122 
c0
 = *
pSrcB
++;

123 
d0
 = *
pSrcB
++;

125 
ªÆ_sum
 +
a0
 * 
c0
;

126 
imag_sum
 +
a0
 * 
d0
;

127 
ªÆ_sum
 -
b0
 * 
d0
;

128 
imag_sum
 +
b0
 * 
c0
;

130 
a0
 = *
pSrcA
++;

131 
b0
 = *
pSrcA
++;

132 
c0
 = *
pSrcB
++;

133 
d0
 = *
pSrcB
++;

135 
ªÆ_sum
 +
a0
 * 
c0
;

136 
imag_sum
 +
a0
 * 
d0
;

137 
ªÆ_sum
 -
b0
 * 
d0
;

138 
imag_sum
 +
b0
 * 
c0
;

140 
a0
 = *
pSrcA
++;

141 
b0
 = *
pSrcA
++;

142 
c0
 = *
pSrcB
++;

143 
d0
 = *
pSrcB
++;

145 
ªÆ_sum
 +
a0
 * 
c0
;

146 
imag_sum
 +
a0
 * 
d0
;

147 
ªÆ_sum
 -
b0
 * 
d0
;

148 
imag_sum
 +
b0
 * 
c0
;

151 
blkC¡
--;

156 
blkC¡
 = 
numSam∂es
 & 0x3u;

158 
blkC¡
 > 0u)

160 
a0
 = *
pSrcA
++;

161 
b0
 = *
pSrcA
++;

162 
c0
 = *
pSrcB
++;

163 
d0
 = *
pSrcB
++;

165 
ªÆ_sum
 +
a0
 * 
c0
;

166 
imag_sum
 +
a0
 * 
d0
;

167 
ªÆ_sum
 -
b0
 * 
d0
;

168 
imag_sum
 +
b0
 * 
c0
;

171 
blkC¡
--;

178 
numSam∂es
 > 0u)

180 
a0
 = *
pSrcA
++;

181 
b0
 = *
pSrcA
++;

182 
c0
 = *
pSrcB
++;

183 
d0
 = *
pSrcB
++;

185 
ªÆ_sum
 +
a0
 * 
c0
;

186 
imag_sum
 +
a0
 * 
d0
;

187 
ªÆ_sum
 -
b0
 * 
d0
;

188 
imag_sum
 +
b0
 * 
c0
;

191 
numSam∂es
--;

197 *
ªÆResu…
 = 
ªÆ_sum
;

198 *
imagResu…
 = 
imag_sum
;

199 
	}
}

	@CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_dot_prod_q15.c

41 
	~"¨m_m©h.h
"

70 
	$¨m_cm∂x_dŸ_¥od_q15
(

71 
q15_t
 * 
pSrcA
,

72 
q15_t
 * 
pSrcB
,

73 
uöt32_t
 
numSam∂es
,

74 
q31_t
 * 
ªÆResu…
,

75 
q31_t
 * 
imagResu…
)

77 
q63_t
 
ªÆ_sum
 = 0, 
imag_sum
 = 0;

78 
q15_t
 
a0
,
b0
,
c0
,
d0
;

80 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
uöt32_t
 
blkC¡
;

87 
blkC¡
 = 
numSam∂es
 >> 2u;

91 
blkC¡
 > 0u)

93 
a0
 = *
pSrcA
++;

94 
b0
 = *
pSrcA
++;

95 
c0
 = *
pSrcB
++;

96 
d0
 = *
pSrcB
++;

98 
ªÆ_sum
 +(
q31_t
)
a0
 * 
c0
;

99 
imag_sum
 +(
q31_t
)
a0
 * 
d0
;

100 
ªÆ_sum
 -(
q31_t
)
b0
 * 
d0
;

101 
imag_sum
 +(
q31_t
)
b0
 * 
c0
;

103 
a0
 = *
pSrcA
++;

104 
b0
 = *
pSrcA
++;

105 
c0
 = *
pSrcB
++;

106 
d0
 = *
pSrcB
++;

108 
ªÆ_sum
 +(
q31_t
)
a0
 * 
c0
;

109 
imag_sum
 +(
q31_t
)
a0
 * 
d0
;

110 
ªÆ_sum
 -(
q31_t
)
b0
 * 
d0
;

111 
imag_sum
 +(
q31_t
)
b0
 * 
c0
;

113 
a0
 = *
pSrcA
++;

114 
b0
 = *
pSrcA
++;

115 
c0
 = *
pSrcB
++;

116 
d0
 = *
pSrcB
++;

118 
ªÆ_sum
 +(
q31_t
)
a0
 * 
c0
;

119 
imag_sum
 +(
q31_t
)
a0
 * 
d0
;

120 
ªÆ_sum
 -(
q31_t
)
b0
 * 
d0
;

121 
imag_sum
 +(
q31_t
)
b0
 * 
c0
;

123 
a0
 = *
pSrcA
++;

124 
b0
 = *
pSrcA
++;

125 
c0
 = *
pSrcB
++;

126 
d0
 = *
pSrcB
++;

128 
ªÆ_sum
 +(
q31_t
)
a0
 * 
c0
;

129 
imag_sum
 +(
q31_t
)
a0
 * 
d0
;

130 
ªÆ_sum
 -(
q31_t
)
b0
 * 
d0
;

131 
imag_sum
 +(
q31_t
)
b0
 * 
c0
;

134 
blkC¡
--;

139 
blkC¡
 = 
numSam∂es
 % 0x4u;

141 
blkC¡
 > 0u)

143 
a0
 = *
pSrcA
++;

144 
b0
 = *
pSrcA
++;

145 
c0
 = *
pSrcB
++;

146 
d0
 = *
pSrcB
++;

148 
ªÆ_sum
 +(
q31_t
)
a0
 * 
c0
;

149 
imag_sum
 +(
q31_t
)
a0
 * 
d0
;

150 
ªÆ_sum
 -(
q31_t
)
b0
 * 
d0
;

151 
imag_sum
 +(
q31_t
)
b0
 * 
c0
;

154 
blkC¡
--;

161 
numSam∂es
 > 0u)

163 
a0
 = *
pSrcA
++;

164 
b0
 = *
pSrcA
++;

165 
c0
 = *
pSrcB
++;

166 
d0
 = *
pSrcB
++;

168 
ªÆ_sum
 +
a0
 * 
c0
;

169 
imag_sum
 +
a0
 * 
d0
;

170 
ªÆ_sum
 -
b0
 * 
d0
;

171 
imag_sum
 +
b0
 * 
c0
;

175 
numSam∂es
--;

182 *
ªÆResu…
 = (
q31_t
Ë(
ªÆ_sum
 >> 6);

184 *
imagResu…
 = (
q31_t
Ë(
imag_sum
 >> 6);

185 
	}
}

	@CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_dot_prod_q31.c

41 
	~"¨m_m©h.h
"

71 
	$¨m_cm∂x_dŸ_¥od_q31
(

72 
q31_t
 * 
pSrcA
,

73 
q31_t
 * 
pSrcB
,

74 
uöt32_t
 
numSam∂es
,

75 
q63_t
 * 
ªÆResu…
,

76 
q63_t
 * 
imagResu…
)

78 
q63_t
 
ªÆ_sum
 = 0, 
imag_sum
 = 0;

79 
q31_t
 
a0
,
b0
,
c0
,
d0
;

81 #i‚de‡
ARM_MATH_CM0_FAMILY


84 
uöt32_t
 
blkC¡
;

88 
blkC¡
 = 
numSam∂es
 >> 2u;

92 
blkC¡
 > 0u)

94 
a0
 = *
pSrcA
++;

95 
b0
 = *
pSrcA
++;

96 
c0
 = *
pSrcB
++;

97 
d0
 = *
pSrcB
++;

99 
ªÆ_sum
 +((
q63_t
)
a0
 * 
c0
) >> 14;

100 
imag_sum
 +((
q63_t
)
a0
 * 
d0
) >> 14;

101 
ªÆ_sum
 -((
q63_t
)
b0
 * 
d0
) >> 14;

102 
imag_sum
 +((
q63_t
)
b0
 * 
c0
) >> 14;

104 
a0
 = *
pSrcA
++;

105 
b0
 = *
pSrcA
++;

106 
c0
 = *
pSrcB
++;

107 
d0
 = *
pSrcB
++;

109 
ªÆ_sum
 +((
q63_t
)
a0
 * 
c0
) >> 14;

110 
imag_sum
 +((
q63_t
)
a0
 * 
d0
) >> 14;

111 
ªÆ_sum
 -((
q63_t
)
b0
 * 
d0
) >> 14;

112 
imag_sum
 +((
q63_t
)
b0
 * 
c0
) >> 14;

114 
a0
 = *
pSrcA
++;

115 
b0
 = *
pSrcA
++;

116 
c0
 = *
pSrcB
++;

117 
d0
 = *
pSrcB
++;

119 
ªÆ_sum
 +((
q63_t
)
a0
 * 
c0
) >> 14;

120 
imag_sum
 +((
q63_t
)
a0
 * 
d0
) >> 14;

121 
ªÆ_sum
 -((
q63_t
)
b0
 * 
d0
) >> 14;

122 
imag_sum
 +((
q63_t
)
b0
 * 
c0
) >> 14;

124 
a0
 = *
pSrcA
++;

125 
b0
 = *
pSrcA
++;

126 
c0
 = *
pSrcB
++;

127 
d0
 = *
pSrcB
++;

129 
ªÆ_sum
 +((
q63_t
)
a0
 * 
c0
) >> 14;

130 
imag_sum
 +((
q63_t
)
a0
 * 
d0
) >> 14;

131 
ªÆ_sum
 -((
q63_t
)
b0
 * 
d0
) >> 14;

132 
imag_sum
 +((
q63_t
)
b0
 * 
c0
) >> 14;

135 
blkC¡
--;

140 
blkC¡
 = 
numSam∂es
 % 0x4u;

142 
blkC¡
 > 0u)

144 
a0
 = *
pSrcA
++;

145 
b0
 = *
pSrcA
++;

146 
c0
 = *
pSrcB
++;

147 
d0
 = *
pSrcB
++;

149 
ªÆ_sum
 +((
q63_t
)
a0
 * 
c0
) >> 14;

150 
imag_sum
 +((
q63_t
)
a0
 * 
d0
) >> 14;

151 
ªÆ_sum
 -((
q63_t
)
b0
 * 
d0
) >> 14;

152 
imag_sum
 +((
q63_t
)
b0
 * 
c0
) >> 14;

155 
blkC¡
--;

162 
numSam∂es
 > 0u)

164 
a0
 = *
pSrcA
++;

165 
b0
 = *
pSrcA
++;

166 
c0
 = *
pSrcB
++;

167 
d0
 = *
pSrcB
++;

169 
ªÆ_sum
 +((
q63_t
)
a0
 * 
c0
) >> 14;

170 
imag_sum
 +((
q63_t
)
a0
 * 
d0
) >> 14;

171 
ªÆ_sum
 -((
q63_t
)
b0
 * 
d0
) >> 14;

172 
imag_sum
 +((
q63_t
)
b0
 * 
c0
) >> 14;

175 
numSam∂es
--;

181 *
ªÆResu…
 = 
ªÆ_sum
;

182 *
imagResu…
 = 
imag_sum
;

183 
	}
}

	@CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mag_f32.c

41 
	~"¨m_m©h.h
"

84 
	$¨m_cm∂x_mag_f32
(

85 
Êﬂt32_t
 * 
pSrc
,

86 
Êﬂt32_t
 * 
pD°
,

87 
uöt32_t
 
numSam∂es
)

89 
Êﬂt32_t
 
ªÆIn
, 
imagIn
;

91 #i‚de‡
ARM_MATH_CM0_FAMILY


94 
uöt32_t
 
blkC¡
;

97 
blkC¡
 = 
numSam∂es
 >> 2u;

101 
blkC¡
 > 0u)

105 
ªÆIn
 = *
pSrc
++;

106 
imagIn
 = *
pSrc
++;

108 
	`¨m_sqπ_f32
((
ªÆIn
 *ÑólInË+ (
imagIn
 * imagIn), 
pD°
++);

110 
ªÆIn
 = *
pSrc
++;

111 
imagIn
 = *
pSrc
++;

112 
	`¨m_sqπ_f32
((
ªÆIn
 *ÑólInË+ (
imagIn
 * imagIn), 
pD°
++);

114 
ªÆIn
 = *
pSrc
++;

115 
imagIn
 = *
pSrc
++;

116 
	`¨m_sqπ_f32
((
ªÆIn
 *ÑólInË+ (
imagIn
 * imagIn), 
pD°
++);

118 
ªÆIn
 = *
pSrc
++;

119 
imagIn
 = *
pSrc
++;

120 
	`¨m_sqπ_f32
((
ªÆIn
 *ÑólInË+ (
imagIn
 * imagIn), 
pD°
++);

124 
blkC¡
--;

129 
blkC¡
 = 
numSam∂es
 % 0x4u;

131 
blkC¡
 > 0u)

134 
ªÆIn
 = *
pSrc
++;

135 
imagIn
 = *
pSrc
++;

137 
	`¨m_sqπ_f32
((
ªÆIn
 *ÑólInË+ (
imagIn
 * imagIn), 
pD°
++);

140 
blkC¡
--;

147 
numSam∂es
 > 0u)

150 
ªÆIn
 = *
pSrc
++;

151 
imagIn
 = *
pSrc
++;

153 
	`¨m_sqπ_f32
((
ªÆIn
 *ÑólInË+ (
imagIn
 * imagIn), 
pD°
++);

156 
numSam∂es
--;

161 
	}
}

	@CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mag_q15.c

41 
	~"¨m_m©h.h
"

65 
	$¨m_cm∂x_mag_q15
(

66 
q15_t
 * 
pSrc
,

67 
q15_t
 * 
pD°
,

68 
uöt32_t
 
numSam∂es
)

70 
q31_t
 
acc0
, 
acc1
;

72 #i‚de‡
ARM_MATH_CM0_FAMILY


75 
uöt32_t
 
blkC¡
;

76 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

77 
q31_t
 
acc2
, 
acc3
;

81 
blkC¡
 = 
numSam∂es
 >> 2u;

85 
blkC¡
 > 0u)

89 
ö1
 = *
	`__SIMD32
(
pSrc
)++;

90 
ö2
 = *
	`__SIMD32
(
pSrc
)++;

91 
ö3
 = *
	`__SIMD32
(
pSrc
)++;

92 
ö4
 = *
	`__SIMD32
(
pSrc
)++;

94 
acc0
 = 
	`__SMUAD
(
ö1
, in1);

95 
acc1
 = 
	`__SMUAD
(
ö2
, in2);

96 
acc2
 = 
	`__SMUAD
(
ö3
, in3);

97 
acc3
 = 
	`__SMUAD
(
ö4
, in4);

100 
	`¨m_sqπ_q15
((
q15_t
Ë((
acc0
Ë>> 17), 
pD°
++);

101 
	`¨m_sqπ_q15
((
q15_t
Ë((
acc1
Ë>> 17), 
pD°
++);

102 
	`¨m_sqπ_q15
((
q15_t
Ë((
acc2
Ë>> 17), 
pD°
++);

103 
	`¨m_sqπ_q15
((
q15_t
Ë((
acc3
Ë>> 17), 
pD°
++);

106 
blkC¡
--;

111 
blkC¡
 = 
numSam∂es
 % 0x4u;

113 
blkC¡
 > 0u)

116 
ö1
 = *
	`__SIMD32
(
pSrc
)++;

117 
acc0
 = 
	`__SMUAD
(
ö1
, in1);

120 
	`¨m_sqπ_q15
((
q15_t
Ë(
acc0
 >> 17), 
pD°
++);

123 
blkC¡
--;

129 
q15_t
 
ªÆ
, 
imag
;

131 
numSam∂es
 > 0u)

134 
ªÆ
 = *
pSrc
++;

135 
imag
 = *
pSrc
++;

137 
acc0
 = (
ªÆ
 *Ñeal);

138 
acc1
 = (
imag
 * imag);

141 
	`¨m_sqπ_q15
((
q15_t
Ë(((
q63_t
Ë
acc0
 + 
acc1
Ë>> 17), 
pD°
++);

144 
numSam∂es
--;

149 
	}
}

	@CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mag_q31.c

41 
	~"¨m_m©h.h
"

65 
	$¨m_cm∂x_mag_q31
(

66 
q31_t
 * 
pSrc
,

67 
q31_t
 * 
pD°
,

68 
uöt32_t
 
numSam∂es
)

70 
q31_t
 
ªÆ
, 
imag
;

71 
q31_t
 
acc0
, 
acc1
;

72 
uöt32_t
 
blkC¡
;

74 #i‚de‡
ARM_MATH_CM0_FAMILY


77 
q31_t
 
ªÆ1
, 
ªÆ2
, 
imag1
, 
imag2
;

78 
q31_t
 
out1
, 
out2
, 
out3
, 
out4
;

79 
q63_t
 
mul1
, 
mul2
, 
mul3
, 
mul4
;

83 
blkC¡
 = 
numSam∂es
 >> 2u;

87 
blkC¡
 > 0u)

90 
ªÆ1
 = 
pSrc
[0];

91 
imag1
 = 
pSrc
[1];

92 
ªÆ2
 = 
pSrc
[2];

93 
imag2
 = 
pSrc
[3];

96 
mul1
 = (
q63_t
Ë
ªÆ1
 *real1;

97 
mul2
 = (
q63_t
Ë
imag1
 *imag1;

98 
mul3
 = (
q63_t
Ë
ªÆ2
 *real2;

99 
mul4
 = (
q63_t
Ë
imag2
 *imag2;

102 
out1
 = (
q31_t
Ë(
mul1
 >> 33);

103 
out2
 = (
q31_t
Ë(
mul2
 >> 33);

104 
out3
 = (
q31_t
Ë(
mul3
 >> 33);

105 
out4
 = (
q31_t
Ë(
mul4
 >> 33);

108 
out1
 = out1 + 
out2
;

109 
out3
 = out3 + 
out4
;

112 
ªÆ1
 = 
pSrc
[4];

113 
imag1
 = 
pSrc
[5];

114 
ªÆ2
 = 
pSrc
[6];

115 
imag2
 = 
pSrc
[7];

118 
	`¨m_sqπ_q31
(
out1
, &
pD°
[0]);

121 
mul1
 = (
q63_t
Ë
ªÆ1
 *real1;

124 
	`¨m_sqπ_q31
(
out3
, &
pD°
[1]);

127 
mul2
 = (
q63_t
Ë
imag1
 *imag1;

128 
mul3
 = (
q63_t
Ë
ªÆ2
 *real2;

129 
mul4
 = (
q63_t
Ë
imag2
 *imag2;

132 
out1
 = (
q31_t
Ë(
mul1
 >> 33);

133 
out2
 = (
q31_t
Ë(
mul2
 >> 33);

134 
out3
 = (
q31_t
Ë(
mul3
 >> 33);

135 
out4
 = (
q31_t
Ë(
mul4
 >> 33);

138 
out1
 = out1 + 
out2
;

139 
out3
 = out3 + 
out4
;

142 
	`¨m_sqπ_q31
(
out1
, &
pD°
[2]);

145 
pSrc
 += 8u;

148 
	`¨m_sqπ_q31
(
out3
, &
pD°
[3]);

151 
pD°
 += 4u;

154 
blkC¡
--;

159 
blkC¡
 = 
numSam∂es
 % 0x4u;

164 
blkC¡
 = 
numSam∂es
;

168 
blkC¡
 > 0u)

171 
ªÆ
 = *
pSrc
++;

172 
imag
 = *
pSrc
++;

173 
acc0
 = (
q31_t
Ë(((
q63_t
Ë
ªÆ
 *Ñeal) >> 33);

174 
acc1
 = (
q31_t
Ë(((
q63_t
Ë
imag
 * imag) >> 33);

176 
	`¨m_sqπ_q31
(
acc0
 + 
acc1
, 
pD°
++);

179 
blkC¡
--;

181 
	}
}

	@CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c

40 
	~"¨m_m©h.h
"

84 
	$¨m_cm∂x_mag_squ¨ed_f32
(

85 
Êﬂt32_t
 * 
pSrc
,

86 
Êﬂt32_t
 * 
pD°
,

87 
uöt32_t
 
numSam∂es
)

89 
Êﬂt32_t
 
ªÆ
, 
imag
;

90 
uöt32_t
 
blkC¡
;

92 #i‚de‡
ARM_MATH_CM0_FAMILY


93 
Êﬂt32_t
 
ªÆ1
, 
ªÆ2
, 
ªÆ3
, 
ªÆ4
;

94 
Êﬂt32_t
 
imag1
, 
imag2
, 
imag3
, 
imag4
;

95 
Êﬂt32_t
 
mul1
, 
mul2
, 
mul3
, 
mul4
;

96 
Êﬂt32_t
 
mul5
, 
mul6
, 
mul7
, 
mul8
;

97 
Êﬂt32_t
 
out1
, 
out2
, 
out3
, 
out4
;

100 
blkC¡
 = 
numSam∂es
 >> 2u;

104 
blkC¡
 > 0u)

108 
ªÆ1
 = 
pSrc
[0];

110 
imag1
 = 
pSrc
[1];

113 
mul1
 = 
ªÆ1
 *Ñeal1;

116 
ªÆ2
 = 
pSrc
[2];

119 
mul2
 = 
imag1
 * imag1;

122 
imag2
 = 
pSrc
[3];

125 
mul3
 = 
ªÆ2
 *Ñeal2;

128 
ªÆ3
 = 
pSrc
[4];

131 
mul4
 = 
imag2
 * imag2;

134 
imag3
 = 
pSrc
[5];

137 
mul5
 = 
ªÆ3
 *Ñeal3;

139 
mul6
 = 
imag3
 * imag3;

142 
ªÆ4
 = 
pSrc
[6];

145 
out1
 = 
mul1
 + 
mul2
;

148 
imag4
 = 
pSrc
[7];

151 
out2
 = 
mul3
 + 
mul4
;

154 
mul7
 = 
ªÆ4
 *Ñeal4;

156 
mul8
 = 
imag4
 * imag4;

159 
pD°
[0] = 
out1
;

162 
out3
 = 
mul5
 + 
mul6
;

165 
pD°
[1] = 
out2
;

168 
out4
 = 
mul7
 + 
mul8
;

171 
pD°
[2] = 
out3
;

174 
pSrc
 += 8u;

177 
pD°
[3] = 
out4
;

180 
pD°
 += 4u;

183 
blkC¡
--;

188 
blkC¡
 = 
numSam∂es
 % 0x4u;

194 
blkC¡
 = 
numSam∂es
;

198 
blkC¡
 > 0u)

201 
ªÆ
 = *
pSrc
++;

202 
imag
 = *
pSrc
++;

206 *
pD°
++ = (
ªÆ
 *ÑólË+ (
imag
 * imag);

209 
blkC¡
--;

211 
	}
}

	@CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mag_squared_q15.c

41 
	~"¨m_m©h.h
"

64 
	$¨m_cm∂x_mag_squ¨ed_q15
(

65 
q15_t
 * 
pSrc
,

66 
q15_t
 * 
pD°
,

67 
uöt32_t
 
numSam∂es
)

69 
q31_t
 
acc0
, 
acc1
;

71 #i‚de‡
ARM_MATH_CM0_FAMILY


74 
uöt32_t
 
blkC¡
;

75 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

76 
q31_t
 
acc2
, 
acc3
;

79 
blkC¡
 = 
numSam∂es
 >> 2u;

83 
blkC¡
 > 0u)

86 
ö1
 = *
	`__SIMD32
(
pSrc
)++;

87 
ö2
 = *
	`__SIMD32
(
pSrc
)++;

88 
ö3
 = *
	`__SIMD32
(
pSrc
)++;

89 
ö4
 = *
	`__SIMD32
(
pSrc
)++;

91 
acc0
 = 
	`__SMUAD
(
ö1
, in1);

92 
acc1
 = 
	`__SMUAD
(
ö2
, in2);

93 
acc2
 = 
	`__SMUAD
(
ö3
, in3);

94 
acc3
 = 
	`__SMUAD
(
ö4
, in4);

97 *
pD°
++ = (
q15_t
Ë(
acc0
 >> 17);

98 *
pD°
++ = (
q15_t
Ë(
acc1
 >> 17);

99 *
pD°
++ = (
q15_t
Ë(
acc2
 >> 17);

100 *
pD°
++ = (
q15_t
Ë(
acc3
 >> 17);

103 
blkC¡
--;

108 
blkC¡
 = 
numSam∂es
 % 0x4u;

110 
blkC¡
 > 0u)

113 
ö1
 = *
	`__SIMD32
(
pSrc
)++;

114 
acc0
 = 
	`__SMUAD
(
ö1
, in1);

117 *
pD°
++ = (
q15_t
Ë(
acc0
 >> 17);

120 
blkC¡
--;

126 
q15_t
 
ªÆ
, 
imag
;

128 
numSam∂es
 > 0u)

131 
ªÆ
 = *
pSrc
++;

132 
imag
 = *
pSrc
++;

133 
acc0
 = (
ªÆ
 *Ñeal);

134 
acc1
 = (
imag
 * imag);

136 *
pD°
++ = (
q15_t
Ë(((
q63_t
Ë
acc0
 + 
acc1
) >> 17);

139 
numSam∂es
--;

144 
	}
}

	@CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_cm∂x_mag_squ¨ed_q31
(

67 
q31_t
 * 
pSrc
,

68 
q31_t
 * 
pD°
,

69 
uöt32_t
 
numSam∂es
)

71 
q31_t
 
ªÆ
, 
imag
;

72 
q31_t
 
acc0
, 
acc1
;

74 #i‚de‡
ARM_MATH_CM0_FAMILY


77 
uöt32_t
 
blkC¡
;

80 
blkC¡
 = 
numSam∂es
 >> 2u;

84 
blkC¡
 > 0u)

87 
ªÆ
 = *
pSrc
++;

88 
imag
 = *
pSrc
++;

89 
acc0
 = (
q31_t
Ë(((
q63_t
Ë
ªÆ
 *Ñeal) >> 33);

90 
acc1
 = (
q31_t
Ë(((
q63_t
Ë
imag
 * imag) >> 33);

92 *
pD°
++ = 
acc0
 + 
acc1
;

94 
ªÆ
 = *
pSrc
++;

95 
imag
 = *
pSrc
++;

96 
acc0
 = (
q31_t
Ë(((
q63_t
Ë
ªÆ
 *Ñeal) >> 33);

97 
acc1
 = (
q31_t
Ë(((
q63_t
Ë
imag
 * imag) >> 33);

99 *
pD°
++ = 
acc0
 + 
acc1
;

101 
ªÆ
 = *
pSrc
++;

102 
imag
 = *
pSrc
++;

103 
acc0
 = (
q31_t
Ë(((
q63_t
Ë
ªÆ
 *Ñeal) >> 33);

104 
acc1
 = (
q31_t
Ë(((
q63_t
Ë
imag
 * imag) >> 33);

106 *
pD°
++ = 
acc0
 + 
acc1
;

108 
ªÆ
 = *
pSrc
++;

109 
imag
 = *
pSrc
++;

110 
acc0
 = (
q31_t
Ë(((
q63_t
Ë
ªÆ
 *Ñeal) >> 33);

111 
acc1
 = (
q31_t
Ë(((
q63_t
Ë
imag
 * imag) >> 33);

113 *
pD°
++ = 
acc0
 + 
acc1
;

116 
blkC¡
--;

121 
blkC¡
 = 
numSam∂es
 % 0x4u;

123 
blkC¡
 > 0u)

126 
ªÆ
 = *
pSrc
++;

127 
imag
 = *
pSrc
++;

128 
acc0
 = (
q31_t
Ë(((
q63_t
Ë
ªÆ
 *Ñeal) >> 33);

129 
acc1
 = (
q31_t
Ë(((
q63_t
Ë
imag
 * imag) >> 33);

131 *
pD°
++ = 
acc0
 + 
acc1
;

134 
blkC¡
--;

141 
numSam∂es
 > 0u)

144 
ªÆ
 = *
pSrc
++;

145 
imag
 = *
pSrc
++;

146 
acc0
 = (
q31_t
Ë(((
q63_t
Ë
ªÆ
 *Ñeal) >> 33);

147 
acc1
 = (
q31_t
Ë(((
q63_t
Ë
imag
 * imag) >> 33);

149 *
pD°
++ = 
acc0
 + 
acc1
;

152 
numSam∂es
--;

157 
	}
}

	@CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c

40 
	~"¨m_m©h.h
"

83 
	$¨m_cm∂x_mu…_cm∂x_f32
(

84 
Êﬂt32_t
 * 
pSrcA
,

85 
Êﬂt32_t
 * 
pSrcB
,

86 
Êﬂt32_t
 * 
pD°
,

87 
uöt32_t
 
numSam∂es
)

89 
Êﬂt32_t
 
a1
, 
b1
, 
c1
, 
d1
;

90 
uöt32_t
 
blkC¡
;

92 #i‚de‡
ARM_MATH_CM0_FAMILY


95 
Êﬂt32_t
 
a2
, 
b2
, 
c2
, 
d2
;

96 
Êﬂt32_t
 
acc1
, 
acc2
, 
acc3
, 
acc4
;

100 
blkC¡
 = 
numSam∂es
 >> 2u;

104 
blkC¡
 > 0u)

108 
a1
 = *
pSrcA
;

109 
c1
 = *
pSrcB
;

111 
b1
 = *(
pSrcA
 + 1);

112 
acc1
 = 
a1
 * 
c1
;

114 
a2
 = *(
pSrcA
 + 2);

115 
acc2
 = (
b1
 * 
c1
);

117 
d1
 = *(
pSrcB
 + 1);

118 
c2
 = *(
pSrcB
 + 2);

119 
acc1
 -
b1
 * 
d1
;

121 
d2
 = *(
pSrcB
 + 3);

122 
acc3
 = 
a2
 * 
c2
;

124 
b2
 = *(
pSrcA
 + 3);

125 
acc2
 +(
a1
 * 
d1
);

127 
a1
 = *(
pSrcA
 + 4);

128 
acc4
 = (
a2
 * 
d2
);

130 
c1
 = *(
pSrcB
 + 4);

131 
acc3
 -(
b2
 * 
d2
);

132 *
pD°
 = 
acc1
;

134 
b1
 = *(
pSrcA
 + 5);

135 
acc4
 +
b2
 * 
c2
;

137 *(
pD°
 + 1Ë
acc2
;

138 
acc1
 = (
a1
 * 
c1
);

140 
d1
 = *(
pSrcB
 + 5);

141 
acc2
 = (
b1
 * 
c1
);

143 *(
pD°
 + 2Ë
acc3
;

144 *(
pD°
 + 3Ë
acc4
;

146 
a2
 = *(
pSrcA
 + 6);

147 
acc1
 -(
b1
 * 
d1
);

149 
c2
 = *(
pSrcB
 + 6);

150 
acc2
 +(
a1
 * 
d1
);

152 
b2
 = *(
pSrcA
 + 7);

153 
acc3
 = (
a2
 * 
c2
);

155 
d2
 = *(
pSrcB
 + 7);

156 
acc4
 = (
b2
 * 
c2
);

158 *(
pD°
 + 4Ë
acc1
;

159 
pSrcA
 += 8u;

161 
acc3
 -(
b2
 * 
d2
);

162 
acc4
 +(
a2
 * 
d2
);

164 *(
pD°
 + 5Ë
acc2
;

165 
pSrcB
 += 8u;

167 *(
pD°
 + 6Ë
acc3
;

168 *(
pD°
 + 7Ë
acc4
;

170 
pD°
 += 8u;

173 
blkC¡
--;

178 
blkC¡
 = 
numSam∂es
 % 0x4u;

183 
blkC¡
 = 
numSam∂es
;

187 
blkC¡
 > 0u)

191 
a1
 = *
pSrcA
++;

192 
b1
 = *
pSrcA
++;

193 
c1
 = *
pSrcB
++;

194 
d1
 = *
pSrcB
++;

197 *
pD°
++ = (
a1
 * 
c1
Ë- (
b1
 * 
d1
);

198 *
pD°
++ = (
a1
 * 
d1
Ë+ (
b1
 * 
c1
);

201 
blkC¡
--;

203 
	}
}

	@CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c

41 
	~"¨m_m©h.h
"

65 
	$¨m_cm∂x_mu…_cm∂x_q15
(

66 
q15_t
 * 
pSrcA
,

67 
q15_t
 * 
pSrcB
,

68 
q15_t
 * 
pD°
,

69 
uöt32_t
 
numSam∂es
)

71 
q15_t
 
a
, 
b
, 
c
, 
d
;

73 #i‚de‡
ARM_MATH_CM0_FAMILY


76 
uöt32_t
 
blkC¡
;

79 
blkC¡
 = 
numSam∂es
 >> 2u;

83 
blkC¡
 > 0u)

87 
a
 = *
pSrcA
++;

88 
b
 = *
pSrcA
++;

89 
c
 = *
pSrcB
++;

90 
d
 = *
pSrcB
++;

93 *
pD°
++ =

94 (
q15_t
Ë(
q31_t
Ë(((q31_tË
a
 * 
c
Ë>> 17Ë- (((q31_tË
b
 * 
d
) >> 17);

96 *
pD°
++ =

97 (
q15_t
Ë(
q31_t
Ë(((q31_tË
a
 * 
d
Ë>> 17Ë+ (((q31_tË
b
 * 
c
) >> 17);

99 
a
 = *
pSrcA
++;

100 
b
 = *
pSrcA
++;

101 
c
 = *
pSrcB
++;

102 
d
 = *
pSrcB
++;

105 *
pD°
++ =

106 (
q15_t
Ë(
q31_t
Ë(((q31_tË
a
 * 
c
Ë>> 17Ë- (((q31_tË
b
 * 
d
) >> 17);

108 *
pD°
++ =

109 (
q15_t
Ë(
q31_t
Ë(((q31_tË
a
 * 
d
Ë>> 17Ë+ (((q31_tË
b
 * 
c
) >> 17);

111 
a
 = *
pSrcA
++;

112 
b
 = *
pSrcA
++;

113 
c
 = *
pSrcB
++;

114 
d
 = *
pSrcB
++;

117 *
pD°
++ =

118 (
q15_t
Ë(
q31_t
Ë(((q31_tË
a
 * 
c
Ë>> 17Ë- (((q31_tË
b
 * 
d
) >> 17);

120 *
pD°
++ =

121 (
q15_t
Ë(
q31_t
Ë(((q31_tË
a
 * 
d
Ë>> 17Ë+ (((q31_tË
b
 * 
c
) >> 17);

123 
a
 = *
pSrcA
++;

124 
b
 = *
pSrcA
++;

125 
c
 = *
pSrcB
++;

126 
d
 = *
pSrcB
++;

129 *
pD°
++ =

130 (
q15_t
Ë(
q31_t
Ë(((q31_tË
a
 * 
c
Ë>> 17Ë- (((q31_tË
b
 * 
d
) >> 17);

132 *
pD°
++ =

133 (
q15_t
Ë(
q31_t
Ë(((q31_tË
a
 * 
d
Ë>> 17Ë+ (((q31_tË
b
 * 
c
) >> 17);

136 
blkC¡
--;

141 
blkC¡
 = 
numSam∂es
 % 0x4u;

143 
blkC¡
 > 0u)

147 
a
 = *
pSrcA
++;

148 
b
 = *
pSrcA
++;

149 
c
 = *
pSrcB
++;

150 
d
 = *
pSrcB
++;

153 *
pD°
++ =

154 (
q15_t
Ë(
q31_t
Ë(((q31_tË
a
 * 
c
Ë>> 17Ë- (((q31_tË
b
 * 
d
) >> 17);

156 *
pD°
++ =

157 (
q15_t
Ë(
q31_t
Ë(((q31_tË
a
 * 
d
Ë>> 17Ë+ (((q31_tË
b
 * 
c
) >> 17);

160 
blkC¡
--;

167 
numSam∂es
 > 0u)

171 
a
 = *
pSrcA
++;

172 
b
 = *
pSrcA
++;

173 
c
 = *
pSrcB
++;

174 
d
 = *
pSrcB
++;

177 *
pD°
++ =

178 (
q15_t
Ë(
q31_t
Ë(((q31_tË
a
 * 
c
Ë>> 17Ë- (((q31_tË
b
 * 
d
) >> 17);

180 *
pD°
++ =

181 (
q15_t
Ë(
q31_t
Ë(((q31_tË
a
 * 
d
Ë>> 17Ë+ (((q31_tË
b
 * 
c
) >> 17);

184 
numSam∂es
--;

189 
	}
}

	@CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c

41 
	~"¨m_m©h.h
"

67 
	$¨m_cm∂x_mu…_cm∂x_q31
(

68 
q31_t
 * 
pSrcA
,

69 
q31_t
 * 
pSrcB
,

70 
q31_t
 * 
pD°
,

71 
uöt32_t
 
numSam∂es
)

73 
q31_t
 
a
, 
b
, 
c
, 
d
;

74 
uöt32_t
 
blkC¡
;

75 
q31_t
 
mul1
, 
mul2
, 
mul3
, 
mul4
;

76 
q31_t
 
out1
, 
out2
;

78 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
blkC¡
 = 
numSam∂es
 >> 2u;

87 
blkC¡
 > 0u)

91 
a
 = *
pSrcA
++;

92 
b
 = *
pSrcA
++;

93 
c
 = *
pSrcB
++;

94 
d
 = *
pSrcB
++;

96 
mul1
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
c
) >> 32);

97 
mul2
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
d
) >> 32);

98 
mul3
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
d
) >> 32);

99 
mul4
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
c
) >> 32);

101 
mul1
 = (mul1 >> 1);

102 
mul2
 = (mul2 >> 1);

103 
mul3
 = (mul3 >> 1);

104 
mul4
 = (mul4 >> 1);

106 
out1
 = 
mul1
 - 
mul2
;

107 
out2
 = 
mul3
 + 
mul4
;

110 *
pD°
++ = 
out1
;

112 *
pD°
++ = 
out2
;

114 
a
 = *
pSrcA
++;

115 
b
 = *
pSrcA
++;

116 
c
 = *
pSrcB
++;

117 
d
 = *
pSrcB
++;

119 
mul1
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
c
) >> 32);

120 
mul2
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
d
) >> 32);

121 
mul3
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
d
) >> 32);

122 
mul4
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
c
) >> 32);

124 
mul1
 = (mul1 >> 1);

125 
mul2
 = (mul2 >> 1);

126 
mul3
 = (mul3 >> 1);

127 
mul4
 = (mul4 >> 1);

129 
out1
 = 
mul1
 - 
mul2
;

130 
out2
 = 
mul3
 + 
mul4
;

133 *
pD°
++ = 
out1
;

135 *
pD°
++ = 
out2
;

137 
a
 = *
pSrcA
++;

138 
b
 = *
pSrcA
++;

139 
c
 = *
pSrcB
++;

140 
d
 = *
pSrcB
++;

142 
mul1
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
c
) >> 32);

143 
mul2
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
d
) >> 32);

144 
mul3
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
d
) >> 32);

145 
mul4
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
c
) >> 32);

147 
mul1
 = (mul1 >> 1);

148 
mul2
 = (mul2 >> 1);

149 
mul3
 = (mul3 >> 1);

150 
mul4
 = (mul4 >> 1);

152 
out1
 = 
mul1
 - 
mul2
;

153 
out2
 = 
mul3
 + 
mul4
;

156 *
pD°
++ = 
out1
;

158 *
pD°
++ = 
out2
;

160 
a
 = *
pSrcA
++;

161 
b
 = *
pSrcA
++;

162 
c
 = *
pSrcB
++;

163 
d
 = *
pSrcB
++;

165 
mul1
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
c
) >> 32);

166 
mul2
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
d
) >> 32);

167 
mul3
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
d
) >> 32);

168 
mul4
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
c
) >> 32);

170 
mul1
 = (mul1 >> 1);

171 
mul2
 = (mul2 >> 1);

172 
mul3
 = (mul3 >> 1);

173 
mul4
 = (mul4 >> 1);

175 
out1
 = 
mul1
 - 
mul2
;

176 
out2
 = 
mul3
 + 
mul4
;

179 *
pD°
++ = 
out1
;

181 *
pD°
++ = 
out2
;

184 
blkC¡
--;

189 
blkC¡
 = 
numSam∂es
 % 0x4u;

191 
blkC¡
 > 0u)

195 
a
 = *
pSrcA
++;

196 
b
 = *
pSrcA
++;

197 
c
 = *
pSrcB
++;

198 
d
 = *
pSrcB
++;

200 
mul1
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
c
) >> 32);

201 
mul2
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
d
) >> 32);

202 
mul3
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
d
) >> 32);

203 
mul4
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
c
) >> 32);

205 
mul1
 = (mul1 >> 1);

206 
mul2
 = (mul2 >> 1);

207 
mul3
 = (mul3 >> 1);

208 
mul4
 = (mul4 >> 1);

210 
out1
 = 
mul1
 - 
mul2
;

211 
out2
 = 
mul3
 + 
mul4
;

214 *
pD°
++ = 
out1
;

216 *
pD°
++ = 
out2
;

219 
blkC¡
--;

227 
blkC¡
 = 
numSam∂es
 >> 1u;

231 
blkC¡
 > 0u)

235 
a
 = *
pSrcA
++;

236 
b
 = *
pSrcA
++;

237 
c
 = *
pSrcB
++;

238 
d
 = *
pSrcB
++;

240 
mul1
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
c
) >> 32);

241 
mul2
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
d
) >> 32);

242 
mul3
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
d
) >> 32);

243 
mul4
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
c
) >> 32);

245 
mul1
 = (mul1 >> 1);

246 
mul2
 = (mul2 >> 1);

247 
mul3
 = (mul3 >> 1);

248 
mul4
 = (mul4 >> 1);

250 
out1
 = 
mul1
 - 
mul2
;

251 
out2
 = 
mul3
 + 
mul4
;

254 *
pD°
++ = 
out1
;

256 *
pD°
++ = 
out2
;

258 
a
 = *
pSrcA
++;

259 
b
 = *
pSrcA
++;

260 
c
 = *
pSrcB
++;

261 
d
 = *
pSrcB
++;

263 
mul1
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
c
) >> 32);

264 
mul2
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
d
) >> 32);

265 
mul3
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
d
) >> 32);

266 
mul4
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
c
) >> 32);

268 
mul1
 = (mul1 >> 1);

269 
mul2
 = (mul2 >> 1);

270 
mul3
 = (mul3 >> 1);

271 
mul4
 = (mul4 >> 1);

273 
out1
 = 
mul1
 - 
mul2
;

274 
out2
 = 
mul3
 + 
mul4
;

277 *
pD°
++ = 
out1
;

279 *
pD°
++ = 
out2
;

282 
blkC¡
--;

287 
blkC¡
 = 
numSam∂es
 % 0x2u;

289 
blkC¡
 > 0u)

293 
a
 = *
pSrcA
++;

294 
b
 = *
pSrcA
++;

295 
c
 = *
pSrcB
++;

296 
d
 = *
pSrcB
++;

298 
mul1
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
c
) >> 32);

299 
mul2
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
d
) >> 32);

300 
mul3
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
d
) >> 32);

301 
mul4
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
c
) >> 32);

303 
mul1
 = (mul1 >> 1);

304 
mul2
 = (mul2 >> 1);

305 
mul3
 = (mul3 >> 1);

306 
mul4
 = (mul4 >> 1);

308 
out1
 = 
mul1
 - 
mul2
;

309 
out2
 = 
mul3
 + 
mul4
;

312 *
pD°
++ = 
out1
;

314 *
pD°
++ = 
out2
;

317 
blkC¡
--;

322 
	}
}

	@CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c

41 
	~"¨m_m©h.h
"

85 
	$¨m_cm∂x_mu…_ªÆ_f32
(

86 
Êﬂt32_t
 * 
pSrcCm∂x
,

87 
Êﬂt32_t
 * 
pSrcRól
,

88 
Êﬂt32_t
 * 
pCm∂xD°
,

89 
uöt32_t
 
numSam∂es
)

91 
Êﬂt32_t
 
ö
;

92 
uöt32_t
 
blkC¡
;

94 #i‚de‡
ARM_MATH_CM0_FAMILY


97 
Êﬂt32_t
 
öA1
, 
öA2
, 
öA3
, 
öA4
;

98 
Êﬂt32_t
 
öA5
, 
öA6
, 
öA7
, 
öA8
;

99 
Êﬂt32_t
 
öB1
, 
öB2
, 
öB3
, 
öB4
;

100 
Êﬂt32_t
 
out1
, 
out2
, 
out3
, 
out4
;

101 
Êﬂt32_t
 
out5
, 
out6
, 
out7
, 
out8
;

104 
blkC¡
 = 
numSam∂es
 >> 2u;

108 
blkC¡
 > 0u)

113 
öA1
 = 
pSrcCm∂x
[0];

114 
öA2
 = 
pSrcCm∂x
[1];

116 
öB1
 = 
pSrcRól
[0];

119 
öA3
 = 
pSrcCm∂x
[2];

122 
out1
 = 
öA1
 * 
öB1
;

125 
öA4
 = 
pSrcCm∂x
[3];

128 
out2
 = 
öA2
 * 
öB1
;

131 
öB2
 = 
pSrcRól
[1];

133 
öA5
 = 
pSrcCm∂x
[4];

136 
out3
 = 
öA3
 * 
öB2
;

139 
öA6
 = 
pSrcCm∂x
[5];

141 
öB3
 = 
pSrcRól
[2];

144 
out4
 = 
öA4
 * 
öB2
;

147 
öA7
 = 
pSrcCm∂x
[6];

150 
out5
 = 
öA5
 * 
öB3
;

153 
öA8
 = 
pSrcCm∂x
[7];

156 
out6
 = 
öA6
 * 
öB3
;

159 
öB4
 = 
pSrcRól
[3];

162 
pCm∂xD°
[0] = 
out1
;

165 
out7
 = 
öA7
 * 
öB4
;

168 
pCm∂xD°
[1] = 
out2
;

171 
out8
 = 
öA8
 * 
öB4
;

174 
pCm∂xD°
[2] = 
out3
;

175 
pCm∂xD°
[3] = 
out4
;

176 
pCm∂xD°
[4] = 
out5
;

179 
pSrcCm∂x
 += 8u;

182 
pCm∂xD°
[5] = 
out6
;

185 
pSrcRól
 += 4u;

188 
pCm∂xD°
[6] = 
out7
;

189 
pCm∂xD°
[7] = 
out8
;

192 
pCm∂xD°
 += 8u;

195 
blkC¡
--;

200 
blkC¡
 = 
numSam∂es
 % 0x4u;

205 
blkC¡
 = 
numSam∂es
;

209 
blkC¡
 > 0u)

213 
ö
 = *
pSrcRól
++;

215 *
pCm∂xD°
++ = (*
pSrcCm∂x
++Ë* (
ö
);

216 *
pCm∂xD°
++ = (*
pSrcCm∂x
++Ë* (
ö
);

219 
blkC¡
--;

221 
	}
}

	@CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mult_real_q15.c

41 
	~"¨m_m©h.h
"

67 
	$¨m_cm∂x_mu…_ªÆ_q15
(

68 
q15_t
 * 
pSrcCm∂x
,

69 
q15_t
 * 
pSrcRól
,

70 
q15_t
 * 
pCm∂xD°
,

71 
uöt32_t
 
numSam∂es
)

73 
q15_t
 
ö
;

75 #i‚de‡
ARM_MATH_CM0_FAMILY


78 
uöt32_t
 
blkC¡
;

79 
q31_t
 
öA1
, 
öA2
;

80 
q31_t
 
öB1
;

81 
q15_t
 
out1
, 
out2
, 
out3
, 
out4
;

82 
q31_t
 
mul1
, 
mul2
, 
mul3
, 
mul4
;

85 
blkC¡
 = 
numSam∂es
 >> 2u;

89 
blkC¡
 > 0u)

94 
öA1
 = *
	`__SIMD32
(
pSrcCm∂x
)++;

96 
öB1
 = *
	`__SIMD32
(
pSrcRól
)++;

98 
öA2
 = *
	`__SIMD32
(
pSrcCm∂x
)++;

101 #i‚de‡
ARM_MATH_BIG_ENDIAN


103 
mul1
 = (
q31_t
Ë((
q15_t
Ë(
öA1
Ë* (q15_tË(
öB1
));

104 
mul2
 = (
q31_t
Ë((
q15_t
Ë(
öA1
 >> 16Ë* (q15_tË(
öB1
));

105 
mul3
 = (
q31_t
Ë((
q15_t
Ë(
öA2
Ë* (q15_tË(
öB1
 >> 16));

106 
mul4
 = (
q31_t
Ë((
q15_t
Ë(
öA2
 >> 16Ë* (q15_tË(
öB1
 >> 16));

110 
mul2
 = (
q31_t
Ë((
q15_t
Ë(
öA1
 >> 16Ë* (q15_tË(
öB1
 >> 16));

111 
mul1
 = (
q31_t
Ë((
q15_t
Ë
öA1
 * (q15_tË(
öB1
 >> 16));

112 
mul4
 = (
q31_t
Ë((
q15_t
Ë(
öA2
 >> 16Ë* (q15_tË
öB1
);

113 
mul3
 = (
q31_t
Ë((
q15_t
Ë
öA2
 * (q15_tË
öB1
);

118 
out1
 = (
q15_t
Ë
	`__SSAT
(
mul1
 >> 15u, 16);

119 
out2
 = (
q15_t
Ë
	`__SSAT
(
mul2
 >> 15u, 16);

120 
out3
 = (
q15_t
Ë
	`__SSAT
(
mul3
 >> 15u, 16);

121 
out4
 = (
q15_t
Ë
	`__SSAT
(
mul4
 >> 15u, 16);

124 *
	`__SIMD32
(
pCm∂xD°
)++ = 
	`__PKHBT
(
out1
, 
out2
, 16);

125 *
	`__SIMD32
(
pCm∂xD°
)++ = 
	`__PKHBT
(
out3
, 
out4
, 16);

127 
öA1
 = *
	`__SIMD32
(
pSrcCm∂x
)++;

128 
öB1
 = *
	`__SIMD32
(
pSrcRól
)++;

129 
öA2
 = *
	`__SIMD32
(
pSrcCm∂x
)++;

131 #i‚de‡
ARM_MATH_BIG_ENDIAN


133 
mul1
 = (
q31_t
Ë((
q15_t
Ë(
öA1
Ë* (q15_tË(
öB1
));

134 
mul2
 = (
q31_t
Ë((
q15_t
Ë(
öA1
 >> 16Ë* (q15_tË(
öB1
));

135 
mul3
 = (
q31_t
Ë((
q15_t
Ë(
öA2
Ë* (q15_tË(
öB1
 >> 16));

136 
mul4
 = (
q31_t
Ë((
q15_t
Ë(
öA2
 >> 16Ë* (q15_tË(
öB1
 >> 16));

140 
mul2
 = (
q31_t
Ë((
q15_t
Ë(
öA1
 >> 16Ë* (q15_tË(
öB1
 >> 16));

141 
mul1
 = (
q31_t
Ë((
q15_t
Ë
öA1
 * (q15_tË(
öB1
 >> 16));

142 
mul4
 = (
q31_t
Ë((
q15_t
Ë(
öA2
 >> 16Ë* (q15_tË
öB1
);

143 
mul3
 = (
q31_t
Ë((
q15_t
Ë
öA2
 * (q15_tË
öB1
);

147 
out1
 = (
q15_t
Ë
	`__SSAT
(
mul1
 >> 15u, 16);

148 
out2
 = (
q15_t
Ë
	`__SSAT
(
mul2
 >> 15u, 16);

149 
out3
 = (
q15_t
Ë
	`__SSAT
(
mul3
 >> 15u, 16);

150 
out4
 = (
q15_t
Ë
	`__SSAT
(
mul4
 >> 15u, 16);

152 *
	`__SIMD32
(
pCm∂xD°
)++ = 
	`__PKHBT
(
out1
, 
out2
, 16);

153 *
	`__SIMD32
(
pCm∂xD°
)++ = 
	`__PKHBT
(
out3
, 
out4
, 16);

156 
blkC¡
--;

161 
blkC¡
 = 
numSam∂es
 % 0x4u;

163 
blkC¡
 > 0u)

167 
ö
 = *
pSrcRól
++;

169 *
pCm∂xD°
++ =

170 (
q15_t
Ë
	`__SSAT
((((
q31_t
Ë(*
pSrcCm∂x
++Ë* (
ö
)) >> 15), 16);

171 *
pCm∂xD°
++ =

172 (
q15_t
Ë
	`__SSAT
((((
q31_t
Ë(*
pSrcCm∂x
++Ë* (
ö
)) >> 15), 16);

175 
blkC¡
--;

182 
numSam∂es
 > 0u)

186 
ö
 = *
pSrcRól
++;

188 *
pCm∂xD°
++ =

189 (
q15_t
Ë
	`__SSAT
((((
q31_t
Ë(*
pSrcCm∂x
++Ë* (
ö
)) >> 15), 16);

190 *
pCm∂xD°
++ =

191 (
q15_t
Ë
	`__SSAT
((((
q31_t
Ë(*
pSrcCm∂x
++Ë* (
ö
)) >> 15), 16);

194 
numSam∂es
--;

199 
	}
}

	@CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mult_real_q31.c

41 
	~"¨m_m©h.h
"

67 
	$¨m_cm∂x_mu…_ªÆ_q31
(

68 
q31_t
 * 
pSrcCm∂x
,

69 
q31_t
 * 
pSrcRól
,

70 
q31_t
 * 
pCm∂xD°
,

71 
uöt32_t
 
numSam∂es
)

73 
q31_t
 
öA1
;

75 #i‚de‡
ARM_MATH_CM0_FAMILY


78 
uöt32_t
 
blkC¡
;

79 
q31_t
 
öA2
, 
öA3
, 
öA4
;

80 
q31_t
 
öB1
, 
öB2
;

81 
q31_t
 
out1
, 
out2
, 
out3
, 
out4
;

84 
blkC¡
 = 
numSam∂es
 >> 2u;

88 
blkC¡
 > 0u)

93 
öA1
 = *
pSrcCm∂x
++;

94 
öA2
 = *
pSrcCm∂x
++;

96 
öB1
 = *
pSrcRól
++;

97 
öB2
 = *
pSrcRól
++;

99 
öA3
 = *
pSrcCm∂x
++;

100 
öA4
 = *
pSrcCm∂x
++;

103 
out1
 = ((
q63_t
Ë
öA1
 * 
öB1
) >> 32;

104 
out2
 = ((
q63_t
Ë
öA2
 * 
öB1
) >> 32;

105 
out3
 = ((
q63_t
Ë
öA3
 * 
öB2
) >> 32;

106 
out4
 = ((
q63_t
Ë
öA4
 * 
öB2
) >> 32;

109 
out1
 = 
	`__SSAT
(out1, 31);

110 
out2
 = 
	`__SSAT
(out2, 31);

111 
out3
 = 
	`__SSAT
(out3, 31);

112 
out4
 = 
	`__SSAT
(out4, 31);

115 
out1
 = out1 << 1;

116 
out2
 = out2 << 1;

117 
out3
 = out3 << 1;

118 
out4
 = out4 << 1;

121 *
pCm∂xD°
++ = 
out1
;

122 *
pCm∂xD°
++ = 
out2
;

123 *
pCm∂xD°
++ = 
out3
;

124 *
pCm∂xD°
++ = 
out4
;

127 
öA1
 = *
pSrcCm∂x
++;

128 
öA2
 = *
pSrcCm∂x
++;

130 
öB1
 = *
pSrcRól
++;

131 
öB2
 = *
pSrcRól
++;

133 
öA3
 = *
pSrcCm∂x
++;

134 
öA4
 = *
pSrcCm∂x
++;

137 
out1
 = ((
q63_t
Ë
öA1
 * 
öB1
) >> 32;

138 
out2
 = ((
q63_t
Ë
öA2
 * 
öB1
) >> 32;

139 
out3
 = ((
q63_t
Ë
öA3
 * 
öB2
) >> 32;

140 
out4
 = ((
q63_t
Ë
öA4
 * 
öB2
) >> 32;

143 
out1
 = 
	`__SSAT
(out1, 31);

144 
out2
 = 
	`__SSAT
(out2, 31);

145 
out3
 = 
	`__SSAT
(out3, 31);

146 
out4
 = 
	`__SSAT
(out4, 31);

149 
out1
 = out1 << 1;

150 
out2
 = out2 << 1;

151 
out3
 = out3 << 1;

152 
out4
 = out4 << 1;

155 *
pCm∂xD°
++ = 
out1
;

156 *
pCm∂xD°
++ = 
out2
;

157 *
pCm∂xD°
++ = 
out3
;

158 *
pCm∂xD°
++ = 
out4
;

161 
blkC¡
--;

166 
blkC¡
 = 
numSam∂es
 % 0x4u;

168 
blkC¡
 > 0u)

173 
öA1
 = *
pSrcCm∂x
++;

174 
öA2
 = *
pSrcCm∂x
++;

176 
öB1
 = *
pSrcRól
++;

179 
out1
 = ((
q63_t
Ë
öA1
 * 
öB1
) >> 32;

180 
out2
 = ((
q63_t
Ë
öA2
 * 
öB1
) >> 32;

183 
out1
 = 
	`__SSAT
(out1, 31);

184 
out2
 = 
	`__SSAT
(out2, 31);

187 
out1
 = out1 << 1;

188 
out2
 = out2 << 1;

191 *
pCm∂xD°
++ = 
out1
;

192 *
pCm∂xD°
++ = 
out2
;

195 
blkC¡
--;

202 
numSam∂es
 > 0u)

206 
öA1
 = *
pSrcRól
++;

208 *
pCm∂xD°
++ =

209 (
q31_t
Ë
	`˛ù_q63_to_q31
(((
q63_t
Ë* 
pSrcCm∂x
++ * 
öA1
) >> 31);

210 *
pCm∂xD°
++ =

211 (
q31_t
Ë
	`˛ù_q63_to_q31
(((
q63_t
Ë* 
pSrcCm∂x
++ * 
öA1
) >> 31);

214 
numSam∂es
--;

219 
	}
}

	@CMSIS/DSP_Lib/Source/ControllerFunctions/arm_pid_init_f32.c

42 
	~"¨m_m©h.h
"

62 
	$¨m_pid_öô_f32
(

63 
¨m_pid_ö°™˚_f32
 * 
S
,

64 
öt32_t
 
ª£tSèãFœg
)

68 
S
->
A0
 = S->
Kp
 + S->
Ki
 + S->
Kd
;

71 
S
->
A1
 = (-S->
Kp
Ë- ((
Êﬂt32_t
Ë2.0 * S->
Kd
);

74 
S
->
A2
 = S->
Kd
;

77 if(
ª£tSèãFœg
)

80 
	`mem£t
(
S
->
°©e
, 0, 3u * (
Êﬂt32_t
));

83 
	}
}

	@CMSIS/DSP_Lib/Source/ControllerFunctions/arm_pid_init_q15.c

41 
	~"¨m_m©h.h
"

61 
	$¨m_pid_öô_q15
(

62 
¨m_pid_ö°™˚_q15
 * 
S
,

63 
öt32_t
 
ª£tSèãFœg
)

66 #i‚de‡
ARM_MATH_CM0_FAMILY


71 
S
->
A0
 = 
	`__QADD16
(__QADD16(S->
Kp
, S->
Ki
), S->
Kd
);

75 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


77 
S
->
A1
 = 
	`__PKHBT
(-
	`__QADD16
(__QADD16(S->
Kd
, S->Kd), S->
Kp
), S->Kd, 16);

81 
S
->
A1
 = 
	`__PKHBT
(S->
Kd
, -
	`__QADD16
(__QADD16(S->Kd, S->Kd), S->
Kp
), 16);

86 if(
ª£tSèãFœg
)

89 
	`mem£t
(
S
->
°©e
, 0, 3u * (
q15_t
));

96 
q31_t
 
ãmp
;

99 
ãmp
 = 
S
->
Kp
 + S->
Ki
 + S->
Kd
;

100 
S
->
A0
 = (
q15_t
Ë
	`__SSAT
(
ãmp
, 16);

103 
ãmp
 = -(
S
->
Kd
 + S->Kd + S->
Kp
);

104 
S
->
A1
 = (
q15_t
Ë
	`__SSAT
(
ãmp
, 16);

105 
S
->
A2
 = S->
Kd
;

110 if(
ª£tSèãFœg
)

113 
	`mem£t
(
S
->
°©e
, 0, 3u * (
q15_t
));

118 
	}
}

	@CMSIS/DSP_Lib/Source/ControllerFunctions/arm_pid_init_q31.c

41 
	~"¨m_m©h.h
"

61 
	$¨m_pid_öô_q31
(

62 
¨m_pid_ö°™˚_q31
 * 
S
,

63 
öt32_t
 
ª£tSèãFœg
)

66 #i‚de‡
ARM_MATH_CM0_FAMILY


71 
S
->
A0
 = 
	`__QADD
(__QADD(S->
Kp
, S->
Ki
), S->
Kd
);

74 
S
->
A1
 = -
	`__QADD
(__QADD(S->
Kd
, S->Kd), S->
Kp
);

81 
q31_t
 
ãmp
;

84 
ãmp
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë
S
->
Kp
 + S->
Ki
);

85 
S
->
A0
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë
ãmp
 + S->
Kd
);

88 
ãmp
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë
S
->
Kd
 + S->Kd);

89 
S
->
A1
 = -
	`˛ù_q63_to_q31
((
q63_t
Ë
ãmp
 + S->
Kp
);

94 
S
->
A2
 = S->
Kd
;

97 if(
ª£tSèãFœg
)

100 
	`mem£t
(
S
->
°©e
, 0, 3u * (
q31_t
));

103 
	}
}

	@CMSIS/DSP_Lib/Source/ControllerFunctions/arm_pid_reset_f32.c

41 
	~"¨m_m©h.h
"

55 
	$¨m_pid_ª£t_f32
(

56 
¨m_pid_ö°™˚_f32
 * 
S
)

60 
	`mem£t
(
S
->
°©e
, 0, 3u * (
Êﬂt32_t
));

61 
	}
}

	@CMSIS/DSP_Lib/Source/ControllerFunctions/arm_pid_reset_q15.c

41 
	~"¨m_m©h.h
"

55 
	$¨m_pid_ª£t_q15
(

56 
¨m_pid_ö°™˚_q15
 * 
S
)

59 
	`mem£t
(
S
->
°©e
, 0, 3u * (
q15_t
));

60 
	}
}

	@CMSIS/DSP_Lib/Source/ControllerFunctions/arm_pid_reset_q31.c

41 
	~"¨m_m©h.h
"

55 
	$¨m_pid_ª£t_q31
(

56 
¨m_pid_ö°™˚_q31
 * 
S
)

60 
	`mem£t
(
S
->
°©e
, 0, 3u * (
q31_t
));

61 
	}
}

	@CMSIS/DSP_Lib/Source/ControllerFunctions/arm_sin_cos_f32.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

84 
	$¨m_sö_cos_f32
(

85 
Êﬂt32_t
 
thëa
,

86 
Êﬂt32_t
 * 
pSöVÆ
,

87 
Êﬂt32_t
 * 
pCosVÆ
)

89 
Êﬂt32_t
 
‰a˘
, 
ö
;

90 
uöt16_t
 
ödexS
, 
ödexC
;

91 
Êﬂt32_t
 
f1
, 
f2
, 
d1
, 
d2
;

92 
öt32_t
 
n
;

93 
Êﬂt32_t
 
födex
, 
Dn
, 
Df
, 
ãmp
;

97 
ö
 = 
thëa
 * 0.00277777777778f;

100 
n
 = (
öt32_t
Ë
ö
;

103 if(
ö
 < 0.0f)

105 
n
--;

108 
ö
 = i¿- (
Êﬂt32_t
Ë
n
;

111 
födex
 = (
Êﬂt32_t
Ë
FAST_MATH_TABLE_SIZE
 * 
ö
;

112 
ödexS
 = ((
uöt16_t
)
födex
) & 0x1ff;

113 
ödexC
 = (
ödexS
 + (
FAST_MATH_TABLE_SIZE
 / 4)) & 0x1ff;

116 
‰a˘
 = 
födex
 - (
Êﬂt32_t
Ë
ödexS
;

119 
f1
 = 
söTabÀ_f32
[
ödexC
+0];

120 
f2
 = 
söTabÀ_f32
[
ödexC
+1];

121 
d1
 = -
söTabÀ_f32
[
ödexS
+0];

122 
d2
 = -
söTabÀ_f32
[
ödexS
+1];

124 
Dn
 = 0.0122718463030f;

125 
Df
 = 
f2
 - 
f1
;

126 
ãmp
 = 
Dn
*(
d1
 + 
d2
Ë- 2*
Df
;

127 
ãmp
 = 
‰a˘
*ãm∞+ (3*
Df
 - (
d2
 + 2*
d1
)*
Dn
);

128 
ãmp
 = 
‰a˘
*ãm∞+ 
d1
*
Dn
;

131 *
pCosVÆ
 = 
‰a˘
*
ãmp
 + 
f1
;

134 
f1
 = 
söTabÀ_f32
[
ödexS
+0];

135 
f2
 = 
söTabÀ_f32
[
ödexS
+1];

136 
d1
 = 
söTabÀ_f32
[
ödexC
+0];

137 
d2
 = 
söTabÀ_f32
[
ödexC
+1];

139 
Df
 = 
f2
 - 
f1
;

140 
ãmp
 = 
Dn
*(
d1
 + 
d2
Ë- 2*
Df
;

141 
ãmp
 = 
‰a˘
*ãm∞+ (3*
Df
 - (
d2
 + 2*
d1
)*
Dn
);

142 
ãmp
 = 
‰a˘
*ãm∞+ 
d1
*
Dn
;

145 *
pSöVÆ
 = 
‰a˘
*
ãmp
 + 
f1
;

146 
	}
}

	@CMSIS/DSP_Lib/Source/ControllerFunctions/arm_sin_cos_q31.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

64 
	$¨m_sö_cos_q31
(

65 
q31_t
 
thëa
,

66 
q31_t
 * 
pSöVÆ
,

67 
q31_t
 * 
pCosVÆ
)

69 
q31_t
 
‰a˘
;

70 
uöt16_t
 
ödexS
, 
ödexC
;

71 
q31_t
 
f1
, 
f2
, 
d1
, 
d2
;

72 
q31_t
 
Dn
, 
Df
;

73 
q63_t
 
ãmp
;

76 
ödexS
 = (
uöt32_t
)
thëa
 >> 
CONTROLLER_Q31_SHIFT
;

77 
ödexC
 = (
ödexS
 + 128) & 0x1ff;

80 
‰a˘
 = (
thëa
 - (
ödexS
 << 
CONTROLLER_Q31_SHIFT
)) << 8;

83 
f1
 = 
söTabÀ_q31
[
ödexC
+0];

84 
f2
 = 
söTabÀ_q31
[
ödexC
+1];

85 
d1
 = -
söTabÀ_q31
[
ödexS
+0];

86 
d2
 = -
söTabÀ_q31
[
ödexS
+1];

88 
Dn
 = 0x1921FB5;

89 
Df
 = 
f2
 - 
f1
;

90 
ãmp
 = 
Dn
*((
q63_t
)
d1
 + 
d2
);

91 
ãmp
 =Åem∞- ((
q63_t
)
Df
 << 32);

92 
ãmp
 = (
q63_t
)
‰a˘
*(temp >> 31);

93 
ãmp
 =Åem∞+ ((3*(
q63_t
)
Df
 << 31Ë- (
d2
 + ((q63_t)
d1
 << 1))*
Dn
);

94 
ãmp
 = (
q63_t
)
‰a˘
*(temp >> 31);

95 
ãmp
 =Åem∞+ (
q63_t
)
d1
*
Dn
;

96 
ãmp
 = (
q63_t
)
‰a˘
*(temp >> 31);

99 *
pCosVÆ
 = 
	`˛ù_q63_to_q31
((
ãmp
 >> 31Ë+ (
q63_t
)
f1
);

102 
f1
 = 
söTabÀ_q31
[
ödexS
+0];

103 
f2
 = 
söTabÀ_q31
[
ödexS
+1];

104 
d1
 = 
söTabÀ_q31
[
ödexC
+0];

105 
d2
 = 
söTabÀ_q31
[
ödexC
+1];

107 
Df
 = 
f2
 - 
f1
;

108 
ãmp
 = 
Dn
*((
q63_t
)
d1
 + 
d2
);

109 
ãmp
 =Åem∞- ((
q63_t
)
Df
 << 32);

110 
ãmp
 = (
q63_t
)
‰a˘
*(temp >> 31);

111 
ãmp
 =Åem∞+ ((3*(
q63_t
)
Df
 << 31Ë- (
d2
 + ((q63_t)
d1
 << 1))*
Dn
);

112 
ãmp
 = (
q63_t
)
‰a˘
*(temp >> 31);

113 
ãmp
 =Åem∞+ (
q63_t
)
d1
*
Dn
;

114 
ãmp
 = (
q63_t
)
‰a˘
*(temp >> 31);

117 *
pSöVÆ
 = 
	`˛ù_q63_to_q31
((
ãmp
 >> 31Ë+ (
q63_t
)
f1
);

118 
	}
}

	@CMSIS/DSP_Lib/Source/FastMathFunctions/arm_cos_f32.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

93 
Êﬂt32_t
 
	$¨m_cos_f32
(

94 
Êﬂt32_t
 
x
)

96 
Êﬂt32_t
 
cosVÆ
, 
‰a˘
, 
ö
;

97 
uöt16_t
 
ödex
;

98 
Êﬂt32_t
 
a
, 
b
;

99 
öt32_t
 
n
;

100 
Êﬂt32_t
 
födex
;

104 
ö
 = 
x
 * 0.159154943092f + 0.25f;

107 
n
 = (
öt32_t
Ë
ö
;

110 if(
ö
 < 0.0f)

112 
n
--;

116 
ö
 = i¿- (
Êﬂt32_t
Ë
n
;

119 
födex
 = (
Êﬂt32_t
Ë
FAST_MATH_TABLE_SIZE
 * 
ö
;

120 
ödex
 = ((
uöt16_t
)
födex
) & 0x1ff;

123 
‰a˘
 = 
födex
 - (
Êﬂt32_t
Ë
ödex
;

126 
a
 = 
söTabÀ_f32
[
ödex
];

127 
b
 = 
söTabÀ_f32
[
ödex
+1];

130 
cosVÆ
 = (1.0f-
‰a˘
)*
a
 + fø˘*
b
;

133  (
cosVÆ
);

134 
	}
}

	@CMSIS/DSP_Lib/Source/FastMathFunctions/arm_cos_q15.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

62 
q15_t
 
	$¨m_cos_q15
(

63 
q15_t
 
x
)

65 
q15_t
 
söVÆ
;

66 
öt32_t
 
ödex
;

67 
q15_t
 
a
, 
b
;

68 
q15_t
 
‰a˘
;

71 
x
 += 0x2000;

72 if(
x
 < 0)

74 
x
 = x + 0x8000;

78 
ödex
 = (
uöt32_t
)
x
 >> 
FAST_MATH_Q15_SHIFT
;

81 
‰a˘
 = (
x
 - (
ödex
 << 
FAST_MATH_Q15_SHIFT
)) << 9;

84 
a
 = 
söTabÀ_q15
[
ödex
];

85 
b
 = 
söTabÀ_q15
[
ödex
+1];

88 
söVÆ
 = (
q31_t
)(0x8000-
‰a˘
)*
a
 >> 16;

89 
söVÆ
 = (
q15_t
)((((
q31_t
)söVÆ << 16Ë+ ((q31_t)
‰a˘
*
b
)) >> 16);

91  
söVÆ
 << 1;

92 
	}
}

	@CMSIS/DSP_Lib/Source/FastMathFunctions/arm_cos_q31.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

62 
q31_t
 
	$¨m_cos_q31
(

63 
q31_t
 
x
)

65 
q31_t
 
cosVÆ
;

66 
öt32_t
 
ödex
;

67 
q31_t
 
a
, 
b
;

68 
q31_t
 
‰a˘
;

71 
x
 += 0x20000000;

72 if(
x
 < 0)

74 
x
 = x + 0x80000000;

78 
ödex
 = (
uöt32_t
)
x
 >> 
FAST_MATH_Q31_SHIFT
;

81 
‰a˘
 = (
x
 - (
ödex
 << 
FAST_MATH_Q31_SHIFT
)) << 9;

84 
a
 = 
söTabÀ_q31
[
ödex
];

85 
b
 = 
söTabÀ_q31
[
ödex
+1];

88 
cosVÆ
 = (
q63_t
)(0x80000000-
‰a˘
)*
a
 >> 32;

89 
cosVÆ
 = (
q31_t
)((((
q63_t
)cosVÆ << 32Ë+ ((q63_t)
‰a˘
*
b
)) >> 32);

91  
cosVÆ
 << 1;

92 
	}
}

	@CMSIS/DSP_Lib/Source/FastMathFunctions/arm_sin_f32.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

94 
Êﬂt32_t
 
	$¨m_sö_f32
(

95 
Êﬂt32_t
 
x
)

97 
Êﬂt32_t
 
söVÆ
, 
‰a˘
, 
ö
;

98 
uöt16_t
 
ödex
;

99 
Êﬂt32_t
 
a
, 
b
;

100 
öt32_t
 
n
;

101 
Êﬂt32_t
 
födex
;

105 
ö
 = 
x
 * 0.159154943092f;

108 
n
 = (
öt32_t
Ë
ö
;

111 if(
x
 < 0.0f)

113 
n
--;

117 
ö
 = i¿- (
Êﬂt32_t
Ë
n
;

120 
födex
 = (
Êﬂt32_t
Ë
FAST_MATH_TABLE_SIZE
 * 
ö
;

121 
ödex
 = ((
uöt16_t
)
födex
) & 0x1ff;

124 
‰a˘
 = 
födex
 - (
Êﬂt32_t
Ë
ödex
;

127 
a
 = 
söTabÀ_f32
[
ödex
];

128 
b
 = 
söTabÀ_f32
[
ödex
+1];

131 
söVÆ
 = (1.0f-
‰a˘
)*
a
 + fø˘*
b
;

134  (
söVÆ
);

135 
	}
}

	@CMSIS/DSP_Lib/Source/FastMathFunctions/arm_sin_q15.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

61 
q15_t
 
	$¨m_sö_q15
(

62 
q15_t
 
x
)

64 
q15_t
 
söVÆ
;

65 
öt32_t
 
ödex
;

66 
q15_t
 
a
, 
b
;

67 
q15_t
 
‰a˘
;

70 
ödex
 = (
uöt32_t
)
x
 >> 
FAST_MATH_Q15_SHIFT
;

73 
‰a˘
 = (
x
 - (
ödex
 << 
FAST_MATH_Q15_SHIFT
)) << 9;

76 
a
 = 
söTabÀ_q15
[
ödex
];

77 
b
 = 
söTabÀ_q15
[
ödex
+1];

80 
söVÆ
 = (
q31_t
)(0x8000-
‰a˘
)*
a
 >> 16;

81 
söVÆ
 = (
q15_t
)((((
q31_t
)söVÆ << 16Ë+ ((q31_t)
‰a˘
*
b
)) >> 16);

83  
söVÆ
 << 1;

84 
	}
}

	@CMSIS/DSP_Lib/Source/FastMathFunctions/arm_sin_q31.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

60 
q31_t
 
	$¨m_sö_q31
(

61 
q31_t
 
x
)

63 
q31_t
 
söVÆ
;

64 
öt32_t
 
ödex
;

65 
q31_t
 
a
, 
b
;

66 
q31_t
 
‰a˘
;

69 
ödex
 = (
uöt32_t
)
x
 >> 
FAST_MATH_Q31_SHIFT
;

72 
‰a˘
 = (
x
 - (
ödex
 << 
FAST_MATH_Q31_SHIFT
)) << 9;

75 
a
 = 
söTabÀ_q31
[
ödex
];

76 
b
 = 
söTabÀ_q31
[
ödex
+1];

79 
söVÆ
 = (
q63_t
)(0x80000000-
‰a˘
)*
a
 >> 32;

80 
söVÆ
 = (
q31_t
)((((
q63_t
)söVÆ << 32Ë+ ((q63_t)
‰a˘
*
b
)) >> 32);

82  
söVÆ
 << 1;

83 
	}
}

	@CMSIS/DSP_Lib/Source/FastMathFunctions/arm_sqrt_q15.c

40 
	~"¨m_m©h.h
"

41 
	~"¨m_comm⁄_èbÀs.h
"

62 
¨m_°©us
 
	$¨m_sqπ_q15
(

63 
q15_t
 
ö
,

64 
q15_t
 * 
pOut
)

66 
q15_t
 
numbî
, 
ãmp1
, 
v¨1
, 
signBôs1
, 
hÆf
;

67 
q31_t
 
bôs_vÆ1
;

68 
Êﬂt32_t
 
ãmp_Êﬂt1
;

71 
q31_t
 
‰acvÆ
;

72 
Êﬂt32_t
 
ÊﬂtvÆ
;

73 } 
ãmpc⁄v
;

75 
numbî
 = 
ö
;

78 if(
numbî
 > 0)

80 
signBôs1
 = 
	`__CLZ
(
numbî
) - 17;

83 if((
signBôs1
 % 2) == 0)

85 
numbî
 =Çumbî << 
signBôs1
;

89 
numbî
 =Çumbî << (
signBôs1
 - 1);

93 
hÆf
 = 
numbî
 >> 1;

95 
ãmp1
 = 
numbî
;

98 
ãmp_Êﬂt1
 = 
numbî
 * 3.051757812500000e-005f;

100 
ãmpc⁄v
.
ÊﬂtvÆ
 = 
ãmp_Êﬂt1
;

101 
bôs_vÆ1
 = 
ãmpc⁄v
.
‰acvÆ
;

103 
bôs_vÆ1
 = 0x5f3759df - (bits_val1 >> 1);

105 
ãmpc⁄v
.
‰acvÆ
 = 
bôs_vÆ1
;

106 
ãmp_Êﬂt1
 = 
ãmpc⁄v
.
ÊﬂtvÆ
;

108 
v¨1
 = (
q31_t
Ë(
ãmp_Êﬂt1
 * 16384);

111 
v¨1
 = ((
q15_t
Ë((
q31_t
) var1 * (0x3000 -

112 ((
q15_t
)

113 ((((
q15_t
)

114 (((
q31_t
Ë
v¨1
 * var1) >> 15)) *

115 (
q31_t
Ë
hÆf
) >> 15))) >> 15)) << 2;

117 
v¨1
 = ((
q15_t
Ë((
q31_t
) var1 * (0x3000 -

118 ((
q15_t
)

119 ((((
q15_t
)

120 (((
q31_t
Ë
v¨1
 * var1) >> 15)) *

121 (
q31_t
Ë
hÆf
) >> 15))) >> 15)) << 2;

123 
v¨1
 = ((
q15_t
Ë((
q31_t
) var1 * (0x3000 -

124 ((
q15_t
)

125 ((((
q15_t
)

126 (((
q31_t
Ë
v¨1
 * var1) >> 15)) *

127 (
q31_t
Ë
hÆf
) >> 15))) >> 15)) << 2;

130 
v¨1
 = ((
q15_t
Ë(((
q31_t
Ë
ãmp1
 * var1) >> 15)) << 1;

133 if((
signBôs1
 % 2) == 0)

135 
v¨1
 = v¨1 >> (
signBôs1
 / 2);

139 
v¨1
 = v¨1 >> ((
signBôs1
 - 1) / 2);

141 *
pOut
 = 
v¨1
;

143  (
ARM_MATH_SUCCESS
);

148 *
pOut
 = 0;

149  (
ARM_MATH_ARGUMENT_ERROR
);

151 
	}
}

	@CMSIS/DSP_Lib/Source/FastMathFunctions/arm_sqrt_q31.c

40 
	~"¨m_m©h.h
"

41 
	~"¨m_comm⁄_èbÀs.h
"

61 
¨m_°©us
 
	$¨m_sqπ_q31
(

62 
q31_t
 
ö
,

63 
q31_t
 * 
pOut
)

65 
q31_t
 
numbî
, 
ãmp1
, 
bôs_vÆ1
, 
v¨1
, 
signBôs1
, 
hÆf
;

66 
Êﬂt32_t
 
ãmp_Êﬂt1
;

69 
q31_t
 
‰acvÆ
;

70 
Êﬂt32_t
 
ÊﬂtvÆ
;

71 } 
ãmpc⁄v
;

73 
numbî
 = 
ö
;

76 if(
numbî
 > 0)

78 
signBôs1
 = 
	`__CLZ
(
numbî
) - 1;

81 if((
signBôs1
 % 2) == 0)

83 
numbî
 =Çumbî << 
signBôs1
;

87 
numbî
 =Çumbî << (
signBôs1
 - 1);

91 
hÆf
 = 
numbî
 >> 1;

93 
ãmp1
 = 
numbî
;

96 
ãmp_Êﬂt1
 = 
numbî
 * 4.6566128731e-010f;

98 
ãmpc⁄v
.
ÊﬂtvÆ
 = 
ãmp_Êﬂt1
;

99 
bôs_vÆ1
 = 
ãmpc⁄v
.
‰acvÆ
;

101 
bôs_vÆ1
 = 0x5f3759df - (bits_val1 >> 1);

103 
ãmpc⁄v
.
‰acvÆ
 = 
bôs_vÆ1
;

104 
ãmp_Êﬂt1
 = 
ãmpc⁄v
.
ÊﬂtvÆ
;

106 
v¨1
 = (
q31_t
Ë(
ãmp_Êﬂt1
 * 1073741824);

109 
v¨1
 = ((
q31_t
Ë((
q63_t
) var1 * (0x30000000 -

110 ((
q31_t
)

111 ((((
q31_t
)

112 (((
q63_t
Ë
v¨1
 * var1) >> 31)) *

113 (
q63_t
Ë
hÆf
) >> 31))) >> 31)) << 2;

115 
v¨1
 = ((
q31_t
Ë((
q63_t
) var1 * (0x30000000 -

116 ((
q31_t
)

117 ((((
q31_t
)

118 (((
q63_t
Ë
v¨1
 * var1) >> 31)) *

119 (
q63_t
Ë
hÆf
) >> 31))) >> 31)) << 2;

121 
v¨1
 = ((
q31_t
Ë((
q63_t
) var1 * (0x30000000 -

122 ((
q31_t
)

123 ((((
q31_t
)

124 (((
q63_t
Ë
v¨1
 * var1) >> 31)) *

125 (
q63_t
Ë
hÆf
) >> 31))) >> 31)) << 2;

128 
v¨1
 = ((
q31_t
Ë(((
q63_t
Ë
ãmp1
 * var1) >> 31)) << 1;

131 if((
signBôs1
 % 2) == 0)

133 
v¨1
 = v¨1 >> (
signBôs1
 / 2);

137 
v¨1
 = v¨1 >> ((
signBôs1
 - 1) / 2);

139 *
pOut
 = 
v¨1
;

141  (
ARM_MATH_SUCCESS
);

146 *
pOut
 = 0;

147  (
ARM_MATH_ARGUMENT_ERROR
);

149 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_32x64_init_q31.c

41 
	~"¨m_m©h.h
"

85 
	$¨m_biquad_ˇs_df1_32x64_öô_q31
(

86 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

87 
uöt8_t
 
numSèges
,

88 
q31_t
 * 
pC€ffs
,

89 
q63_t
 * 
pSèã
,

90 
uöt8_t
 
po°Shi·
)

93 
S
->
numSèges
 =ÇumStages;

96 
S
->
po°Shi·
 =ÖostShift;

99 
S
->
pC€ffs
 =ÖCoeffs;

102 
	`mem£t
(
pSèã
, 0, (4u * (
uöt32_t
Ë
numSèges
Ë* (
q63_t
));

105 
S
->
pSèã
 =ÖState;

106 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_32x64_q31.c

41 
	~"¨m_m©h.h
"

187 
	$¨m_biquad_ˇs_df1_32x64_q31
(

188 c⁄° 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

189 
q31_t
 * 
pSrc
,

190 
q31_t
 * 
pD°
,

191 
uöt32_t
 
blockSize
)

193 
q31_t
 *
pIn
 = 
pSrc
;

194 
q31_t
 *
pOut
 = 
pD°
;

195 
q63_t
 *
pSèã
 = 
S
->pState;

196 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

197 
q63_t
 
acc
;

198 
q31_t
 
Xn1
, 
Xn2
;

199 
q63_t
 
Yn1
, 
Yn2
;

200 
q31_t
 
b0
, 
b1
, 
b2
, 
a1
, 
a2
;

201 
q31_t
 
Xn
;

202 
öt32_t
 
shi·
 = (öt32_tË
S
->
po°Shi·
 + 1;

203 
uöt32_t
 
ßm∂e
, 
°age
 = 
S
->
numSèges
;

204 
q31_t
 
acc_l
, 
acc_h
;

205 
uöt32_t
 
uShi·
 = ((uöt32_tË
S
->
po°Shi·
 + 1u);

206 
uöt32_t
 
lShi·
 = 32u - 
uShi·
;

209 #i‚de‡
ARM_MATH_CM0_FAMILY


216 
b0
 = *
pC€ffs
++;

217 
b1
 = *
pC€ffs
++;

218 
b2
 = *
pC€ffs
++;

219 
a1
 = *
pC€ffs
++;

220 
a2
 = *
pC€ffs
++;

223 
Xn1
 = (
q31_t
Ë(
pSèã
[0]);

224 
Xn2
 = (
q31_t
Ë(
pSèã
[1]);

225 
Yn1
 = 
pSèã
[2];

226 
Yn2
 = 
pSèã
[3];

234 
ßm∂e
 = 
blockSize
 >> 2u;

238 
ßm∂e
 > 0u)

241 
Xn
 = *
pIn
++;

246 
acc
 = (
q63_t
Ë
Xn
 *
b0
;

249 
acc
 +(
q63_t
Ë
Xn1
 *
b1
;

252 
acc
 +(
q63_t
Ë
Xn2
 *
b2
;

255 
acc
 +
	`mu…32x64
(
Yn1
, 
a1
);

258 
acc
 +
	`mu…32x64
(
Yn2
, 
a2
);

261 
Yn2
 = 
acc
 << 
shi·
;

264 
acc_l
 = 
acc
 & 0xffffffff;

267 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

270 
acc_h
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 |ácc_h << 
uShi·
;

273 *
pOut
 = 
acc_h
;

276 
Xn2
 = *
pIn
++;

281 
acc
 = (
q63_t
Ë
Xn
 *
b1
;

284 
acc
 +(
q63_t
Ë
Xn2
 *
b0
;

287 
acc
 +(
q63_t
Ë
Xn1
 *
b2
;

290 
acc
 +
	`mu…32x64
(
Yn2
, 
a1
);

293 
acc
 +
	`mu…32x64
(
Yn1
, 
a2
);

296 
Yn1
 = 
acc
 << 
shi·
;

299 
acc_l
 = 
acc
 & 0xffffffff;

302 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

305 
acc_h
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 |ácc_h << 
uShi·
;

308 
Xn1
 = *
pIn
++;

312 *(
pOut
 + 1uË
acc_h
;

317 
acc
 = (
q63_t
Ë
Xn1
 *
b0
;

320 
acc
 +(
q63_t
Ë
Xn2
 *
b1
;

323 
acc
 +(
q63_t
Ë
Xn
 *
b2
;

326 
acc
 +
	`mu…32x64
(
Yn1
, 
a1
);

329 
acc
 +
	`mu…32x64
(
Yn2
, 
a2
);

332 
Yn2
 = 
acc
 << 
shi·
;

335 
acc_l
 = 
acc
 & 0xffffffff;

338 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

341 
acc_h
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 |ácc_h << 
uShi·
;

344 *(
pOut
 + 2uË
acc_h
;

347 
Xn
 = *
pIn
++;

351 
acc
 = (
q63_t
Ë
Xn
 *
b0
;

354 
acc
 +(
q63_t
Ë
Xn1
 *
b1
;

357 
acc
 +(
q63_t
Ë
Xn2
 *
b2
;

360 
acc
 +
	`mu…32x64
(
Yn2
, 
a1
);

363 
acc
 +
	`mu…32x64
(
Yn1
, 
a2
);

366 
Yn1
 = 
acc
 << 
shi·
;

369 
acc_l
 = 
acc
 & 0xffffffff;

372 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

375 
acc_h
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 |ácc_h << 
uShi·
;

378 *(
pOut
 + 3uË
acc_h
;

386 
Xn2
 = 
Xn1
;

387 
Xn1
 = 
Xn
;

390 
pOut
 += 4u;

393 
ßm∂e
--;

398 
ßm∂e
 = (
blockSize
 & 0x3u);

400 
ßm∂e
 > 0u)

403 
Xn
 = *
pIn
++;

408 
acc
 = (
q63_t
Ë
Xn
 *
b0
;

410 
acc
 +(
q63_t
Ë
Xn1
 *
b1
;

412 
acc
 +(
q63_t
Ë
Xn2
 *
b2
;

414 
acc
 +
	`mu…32x64
(
Yn1
, 
a1
);

416 
acc
 +
	`mu…32x64
(
Yn2
, 
a2
);

424 
Xn2
 = 
Xn1
;

425 
Xn1
 = 
Xn
;

426 
Yn2
 = 
Yn1
;

428 
Yn1
 = 
acc
 << 
shi·
;

431 
acc_l
 = 
acc
 & 0xffffffff;

434 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

437 
acc_h
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 |ácc_h << 
uShi·
;

440 *
pOut
++ = 
acc_h
;

447 
ßm∂e
--;

451 
pIn
 = 
pD°
;

454 
pOut
 = 
pD°
;

458 *
pSèã
++ = (
q63_t
Ë
Xn1
;

459 *
pSèã
++ = (
q63_t
Ë
Xn2
;

460 *
pSèã
++ = 
Yn1
;

461 *
pSèã
++ = 
Yn2
;

463 } --
°age
);

472 
b0
 = *
pC€ffs
++;

473 
b1
 = *
pC€ffs
++;

474 
b2
 = *
pC€ffs
++;

475 
a1
 = *
pC€ffs
++;

476 
a2
 = *
pC€ffs
++;

479 
Xn1
 = 
pSèã
[0];

480 
Xn2
 = 
pSèã
[1];

481 
Yn1
 = 
pSèã
[2];

482 
Yn2
 = 
pSèã
[3];

489 
ßm∂e
 = 
blockSize
;

491 
ßm∂e
 > 0u)

494 
Xn
 = *
pIn
++;

498 
acc
 = (
q63_t
Ë
Xn
 *
b0
;

500 
acc
 +(
q63_t
Ë
Xn1
 *
b1
;

502 
acc
 +(
q63_t
Ë
Xn2
 *
b2
;

504 
acc
 +
	`mu…32x64
(
Yn1
, 
a1
);

506 
acc
 +
	`mu…32x64
(
Yn2
, 
a2
);

514 
Xn2
 = 
Xn1
;

515 
Xn1
 = 
Xn
;

516 
Yn2
 = 
Yn1
;

519 
Yn1
 = 
acc
 << 
shi·
;

522 
acc_l
 = 
acc
 & 0xffffffff;

525 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

528 
acc_h
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 |ácc_h << 
uShi·
;

531 *
pOut
++ = 
acc_h
;

539 
ßm∂e
--;

543 
pIn
 = 
pD°
;

546 
pOut
 = 
pD°
;

549 *
pSèã
++ = (
q63_t
Ë
Xn1
;

550 *
pSèã
++ = (
q63_t
Ë
Xn2
;

551 *
pSèã
++ = 
Yn1
;

552 *
pSèã
++ = 
Yn2
;

554 } --
°age
);

557 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c

42 
	~"¨m_m©h.h
"

178 
	$¨m_biquad_ˇsˇde_df1_f32
(

179 c⁄° 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

180 
Êﬂt32_t
 * 
pSrc
,

181 
Êﬂt32_t
 * 
pD°
,

182 
uöt32_t
 
blockSize
)

184 
Êﬂt32_t
 *
pIn
 = 
pSrc
;

185 
Êﬂt32_t
 *
pOut
 = 
pD°
;

186 
Êﬂt32_t
 *
pSèã
 = 
S
->pState;

187 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

188 
Êﬂt32_t
 
acc
;

189 
Êﬂt32_t
 
b0
, 
b1
, 
b2
, 
a1
, 
a2
;

190 
Êﬂt32_t
 
Xn1
, 
Xn2
, 
Yn1
, 
Yn2
;

191 
Êﬂt32_t
 
Xn
;

192 
uöt32_t
 
ßm∂e
, 
°age
 = 
S
->
numSèges
;

195 #i‚de‡
ARM_MATH_CM0_FAMILY


202 
b0
 = *
pC€ffs
++;

203 
b1
 = *
pC€ffs
++;

204 
b2
 = *
pC€ffs
++;

205 
a1
 = *
pC€ffs
++;

206 
a2
 = *
pC€ffs
++;

209 
Xn1
 = 
pSèã
[0];

210 
Xn2
 = 
pSèã
[1];

211 
Yn1
 = 
pSèã
[2];

212 
Yn2
 = 
pSèã
[3];

223 
ßm∂e
 = 
blockSize
 >> 2u;

227 
ßm∂e
 > 0u)

230 
Xn
 = *
pIn
++;

233 
Yn2
 = (
b0
 * 
Xn
Ë+ (
b1
 * 
Xn1
Ë+ (
b2
 * 
Xn2
Ë+ (
a1
 * 
Yn1
Ë+ (
a2
 * Yn2);

236 *
pOut
++ = 
Yn2
;

246 
Xn2
 = *
pIn
++;

249 
Yn1
 = (
b0
 * 
Xn2
Ë+ (
b1
 * 
Xn
Ë+ (
b2
 * 
Xn1
Ë+ (
a1
 * 
Yn2
Ë+ (
a2
 * Yn1);

252 *
pOut
++ = 
Yn1
;

262 
Xn1
 = *
pIn
++;

265 
Yn2
 = (
b0
 * 
Xn1
Ë+ (
b1
 * 
Xn2
Ë+ (
b2
 * 
Xn
Ë+ (
a1
 * 
Yn1
Ë+ (
a2
 * Yn2);

268 *
pOut
++ = 
Yn2
;

278 
Xn
 = *
pIn
++;

281 
Yn1
 = (
b0
 * 
Xn
Ë+ (
b1
 * 
Xn1
Ë+ (
b2
 * 
Xn2
Ë+ (
a1
 * 
Yn2
Ë+ (
a2
 * Yn1);

284 *
pOut
++ = 
Yn1
;

292 
Xn2
 = 
Xn1
;

293 
Xn1
 = 
Xn
;

296 
ßm∂e
--;

302 
ßm∂e
 = 
blockSize
 & 0x3u;

304 
ßm∂e
 > 0u)

307 
Xn
 = *
pIn
++;

310 
acc
 = (
b0
 * 
Xn
Ë+ (
b1
 * 
Xn1
Ë+ (
b2
 * 
Xn2
Ë+ (
a1
 * 
Yn1
Ë+ (
a2
 * 
Yn2
);

313 *
pOut
++ = 
acc
;

321 
Xn2
 = 
Xn1
;

322 
Xn1
 = 
Xn
;

323 
Yn2
 = 
Yn1
;

324 
Yn1
 = 
acc
;

327 
ßm∂e
--;

332 *
pSèã
++ = 
Xn1
;

333 *
pSèã
++ = 
Xn2
;

334 *
pSèã
++ = 
Yn1
;

335 *
pSèã
++ = 
Yn2
;

339 
pIn
 = 
pD°
;

342 
pOut
 = 
pD°
;

345 
°age
--;

347 } 
°age
 > 0u);

356 
b0
 = *
pC€ffs
++;

357 
b1
 = *
pC€ffs
++;

358 
b2
 = *
pC€ffs
++;

359 
a1
 = *
pC€ffs
++;

360 
a2
 = *
pC€ffs
++;

363 
Xn1
 = 
pSèã
[0];

364 
Xn2
 = 
pSèã
[1];

365 
Yn1
 = 
pSèã
[2];

366 
Yn2
 = 
pSèã
[3];

372 
ßm∂e
 = 
blockSize
;

374 
ßm∂e
 > 0u)

377 
Xn
 = *
pIn
++;

380 
acc
 = (
b0
 * 
Xn
Ë+ (
b1
 * 
Xn1
Ë+ (
b2
 * 
Xn2
Ë+ (
a1
 * 
Yn1
Ë+ (
a2
 * 
Yn2
);

383 *
pOut
++ = 
acc
;

391 
Xn2
 = 
Xn1
;

392 
Xn1
 = 
Xn
;

393 
Yn2
 = 
Yn1
;

394 
Yn1
 = 
acc
;

397 
ßm∂e
--;

401 *
pSèã
++ = 
Xn1
;

402 *
pSèã
++ = 
Xn2
;

403 *
pSèã
++ = 
Yn1
;

404 *
pSèã
++ = 
Yn2
;

408 
pIn
 = 
pD°
;

411 
pOut
 = 
pD°
;

414 
°age
--;

416 } 
°age
 > 0u);

420 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_fast_q15.c

42 
	~"¨m_m©h.h
"

75 
	$¨m_biquad_ˇsˇde_df1_Á°_q15
(

76 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

77 
q15_t
 * 
pSrc
,

78 
q15_t
 * 
pD°
,

79 
uöt32_t
 
blockSize
)

81 
q15_t
 *
pIn
 = 
pSrc
;

82 
q15_t
 *
pOut
 = 
pD°
;

83 
q31_t
 
ö
;

84 
q31_t
 
out
;

85 
q31_t
 
b0
;

86 
q31_t
 
b1
, 
a1
;

87 
q31_t
 
°©e_ö
, 
°©e_out
;

88 
q31_t
 
acc
;

89 
öt32_t
 
shi·
 = (öt32_tË(15 - 
S
->
po°Shi·
);

90 
q15_t
 *
pSèã
 = 
S
->pState;

91 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

92 
uöt32_t
 
ßm∂e
, 
°age
 = 
S
->
numSèges
;

100 
b0
 = *
	`__SIMD32
(
pC€ffs
)++;

103 
b1
 = *
	`__SIMD32
(
pC€ffs
)++;

106 
a1
 = *
	`__SIMD32
(
pC€ffs
)++;

109 
°©e_ö
 = *
	`__SIMD32
(
pSèã
)++;

112 
°©e_out
 = *
	`__SIMD32
(
pSèã
)--;

120 
ßm∂e
 = 
blockSize
 >> 1u;

124 
ßm∂e
 > 0u)

128 
ö
 = *
	`__SIMD32
(
pIn
)++;

131 
out
 = 
	`__SMUAD
(
b0
, 
ö
);

133 
acc
 = 
	`__SMLAD
(
b1
, 
°©e_ö
, 
out
);

135 
acc
 = 
	`__SMLAD
(
a1
, 
°©e_out
,ácc);

138 
out
 = 
	`__SSAT
((
acc
 >> 
shi·
), 16);

149 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


151 
°©e_ö
 = 
	`__PKHBT
(
ö
, state_in, 16);

152 
°©e_out
 = 
	`__PKHBT
(
out
, state_out, 16);

156 
°©e_ö
 = 
	`__PKHBT
(°©e_ö >> 16, (
ö
 >> 16), 16);

157 
°©e_out
 = 
	`__PKHBT
(°©e_ouà>> 16, (
out
), 16);

162 
out
 = 
	`__SMUADX
(
b0
, 
ö
);

164 
acc
 = 
	`__SMLAD
(
b1
, 
°©e_ö
, 
out
);

166 
acc
 = 
	`__SMLAD
(
a1
, 
°©e_out
,ácc);

169 
out
 = 
	`__SSAT
((
acc
 >> 
shi·
), 16);

174 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


176 *
	`__SIMD32
(
pOut
)++ = 
	`__PKHBT
(
°©e_out
, 
out
, 16);

180 *
	`__SIMD32
(
pOut
)++ = 
	`__PKHBT
(
out
, 
°©e_out
 >> 16, 16);

193 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


195 
°©e_ö
 = 
	`__PKHBT
(
ö
 >> 16, state_in, 16);

196 
°©e_out
 = 
	`__PKHBT
(
out
, state_out, 16);

200 
°©e_ö
 = 
	`__PKHBT
(°©e_ö >> 16, 
ö
, 16);

201 
°©e_out
 = 
	`__PKHBT
(°©e_ouà>> 16, 
out
, 16);

207 
ßm∂e
--;

214 if((
blockSize
 & 0x1u) != 0u)

217 
ö
 = *
pIn
++;

221 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


223 
out
 = 
	`__SMUAD
(
b0
, 
ö
);

227 
out
 = 
	`__SMUADX
(
b0
, 
ö
);

232 
acc
 = 
	`__SMLAD
(
b1
, 
°©e_ö
, 
out
);

234 
acc
 = 
	`__SMLAD
(
a1
, 
°©e_out
,ácc);

237 
out
 = 
	`__SSAT
((
acc
 >> 
shi·
), 16);

240 *
pOut
++ = (
q15_t
Ë
out
;

251 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


253 
°©e_ö
 = 
	`__PKHBT
(
ö
, state_in, 16);

254 
°©e_out
 = 
	`__PKHBT
(
out
, state_out, 16);

258 
°©e_ö
 = 
	`__PKHBT
(°©e_ö >> 16, 
ö
, 16);

259 
°©e_out
 = 
	`__PKHBT
(°©e_ouà>> 16, 
out
, 16);

267 
pIn
 = 
pD°
;

270 
pOut
 = 
pD°
;

273 *
	`__SIMD32
(
pSèã
)++ = 
°©e_ö
;

274 *
	`__SIMD32
(
pSèã
)++ = 
°©e_out
;

278 
°age
--;

280 } 
°age
 > 0u);

281 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_fast_q31.c

42 
	~"¨m_m©h.h
"

77 
	$¨m_biquad_ˇsˇde_df1_Á°_q31
(

78 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

79 
q31_t
 * 
pSrc
,

80 
q31_t
 * 
pD°
,

81 
uöt32_t
 
blockSize
)

83 
q31_t
 
acc
 = 0;

84 
q31_t
 
Xn1
, 
Xn2
, 
Yn1
, 
Yn2
;

85 
q31_t
 
b0
, 
b1
, 
b2
, 
a1
, 
a2
;

86 
q31_t
 *
pIn
 = 
pSrc
;

87 
q31_t
 *
pOut
 = 
pD°
;

88 
q31_t
 *
pSèã
 = 
S
->pState;

89 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

90 
q31_t
 
Xn
;

91 
öt32_t
 
shi·
 = (öt32_tË
S
->
po°Shi·
 + 1;

92 
uöt32_t
 
ßm∂e
, 
°age
 = 
S
->
numSèges
;

98 
b0
 = *
pC€ffs
++;

99 
b1
 = *
pC€ffs
++;

100 
b2
 = *
pC€ffs
++;

101 
a1
 = *
pC€ffs
++;

102 
a2
 = *
pC€ffs
++;

105 
Xn1
 = 
pSèã
[0];

106 
Xn2
 = 
pSèã
[1];

107 
Yn1
 = 
pSèã
[2];

108 
Yn2
 = 
pSèã
[3];

116 
ßm∂e
 = 
blockSize
 >> 2u;

120 
ßm∂e
 > 0u)

123 
Xn
 = *
pIn
;

128 
	`mu…_32x32_kìp32_R
(
acc
, 
b1
, 
Xn1
);

131 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
b0
, 
Xn
);

134 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
b2
, 
Xn2
);

137 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
a1
, 
Yn1
);

140 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
a2
, 
Yn2
);

143 
Yn2
 = 
acc
 << 
shi·
;

146 
Xn2
 = *(
pIn
 + 1u);

149 *
pOut
 = 
Yn2
;

154 
	`mu…_32x32_kìp32_R
(
acc
, 
b0
, 
Xn2
);

157 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
b1
, 
Xn
);

160 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
b2
, 
Xn1
);

163 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
a1
, 
Yn2
);

166 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
a2
, 
Yn1
);

169 
Yn1
 = 
acc
 << 
shi·
;

172 
Xn1
 = *(
pIn
 + 2u);

175 *(
pOut
 + 1uË
Yn1
;

180 
	`mu…_32x32_kìp32_R
(
acc
, 
b0
, 
Xn1
);

183 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
b1
, 
Xn2
);

186 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
b2
, 
Xn
);

189 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
a1
, 
Yn1
);

192 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
a2
, 
Yn2
);

195 
Yn2
 = 
acc
 << 
shi·
;

198 
Xn
 = *(
pIn
 + 3u);

201 *(
pOut
 + 2uË
Yn2
;

202 
pIn
 += 4u;

207 
	`mu…_32x32_kìp32_R
(
acc
, 
b0
, 
Xn
);

210 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
b1
, 
Xn1
);

213 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
b2
, 
Xn2
);

216 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
a1
, 
Yn2
);

219 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
a2
, 
Yn1
);

224 
Xn2
 = 
Xn1
;

227 
Yn1
 = 
acc
 << 
shi·
;

230 
Xn1
 = 
Xn
;

233 *(
pOut
 + 3uË
Yn1
;

234 
pOut
 += 4u;

237 
ßm∂e
--;

242 
ßm∂e
 = (
blockSize
 & 0x3u);

244 
ßm∂e
 > 0u)

247 
Xn
 = *
pIn
++;

252 
	`mu…_32x32_kìp32_R
(
acc
, 
b0
, 
Xn
);

255 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
b1
, 
Xn1
);

258 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
b2
, 
Xn2
);

261 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
a1
, 
Yn1
);

264 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
a2
, 
Yn2
);

267 
acc
 =ác¯<< 
shi·
;

275 
Xn2
 = 
Xn1
;

276 
Xn1
 = 
Xn
;

277 
Yn2
 = 
Yn1
;

278 
Yn1
 = 
acc
;

281 *
pOut
++ = 
acc
;

284 
ßm∂e
--;

289 
pIn
 = 
pD°
;

292 
pOut
 = 
pD°
;

295 *
pSèã
++ = 
Xn1
;

296 *
pSèã
++ = 
Xn2
;

297 *
pSèã
++ = 
Yn1
;

298 *
pSèã
++ = 
Yn2
;

300 } --
°age
);

301 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_init_f32.c

41 
	~"¨m_m©h.h
"

88 
	$¨m_biquad_ˇsˇde_df1_öô_f32
(

89 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

90 
uöt8_t
 
numSèges
,

91 
Êﬂt32_t
 * 
pC€ffs
,

92 
Êﬂt32_t
 * 
pSèã
)

95 
S
->
numSèges
 =ÇumStages;

98 
S
->
pC€ffs
 =ÖCoeffs;

101 
	`mem£t
(
pSèã
, 0, (4u * (
uöt32_t
Ë
numSèges
Ë* (
Êﬂt32_t
));

104 
S
->
pSèã
 =ÖState;

105 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_init_q15.c

41 
	~"¨m_m©h.h
"

86 
	$¨m_biquad_ˇsˇde_df1_öô_q15
(

87 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

88 
uöt8_t
 
numSèges
,

89 
q15_t
 * 
pC€ffs
,

90 
q15_t
 * 
pSèã
,

91 
öt8_t
 
po°Shi·
)

94 
S
->
numSèges
 =ÇumStages;

97 
S
->
po°Shi·
 =ÖostShift;

100 
S
->
pC€ffs
 =ÖCoeffs;

103 
	`mem£t
(
pSèã
, 0, (4u * (
uöt32_t
Ë
numSèges
Ë* (
q15_t
));

106 
S
->
pSèã
 =ÖState;

107 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_init_q31.c

42 
	~"¨m_m©h.h
"

86 
	$¨m_biquad_ˇsˇde_df1_öô_q31
(

87 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

88 
uöt8_t
 
numSèges
,

89 
q31_t
 * 
pC€ffs
,

90 
q31_t
 * 
pSèã
,

91 
öt8_t
 
po°Shi·
)

94 
S
->
numSèges
 =ÇumStages;

97 
S
->
po°Shi·
 =ÖostShift;

100 
S
->
pC€ffs
 =ÖCoeffs;

103 
	`mem£t
(
pSèã
, 0, (4u * (
uöt32_t
Ë
numSèges
Ë* (
q31_t
));

106 
S
->
pSèã
 =ÖState;

107 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_q15.c

42 
	~"¨m_m©h.h
"

75 
	$¨m_biquad_ˇsˇde_df1_q15
(

76 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

77 
q15_t
 * 
pSrc
,

78 
q15_t
 * 
pD°
,

79 
uöt32_t
 
blockSize
)

83 #i‚de‡
ARM_MATH_CM0_FAMILY


87 
q15_t
 *
pIn
 = 
pSrc
;

88 
q15_t
 *
pOut
 = 
pD°
;

89 
q31_t
 
ö
;

90 
q31_t
 
out
;

91 
q31_t
 
b0
;

92 
q31_t
 
b1
, 
a1
;

93 
q31_t
 
°©e_ö
, 
°©e_out
;

94 
q31_t
 
acc_l
, 
acc_h
;

95 
q63_t
 
acc
;

96 
öt32_t
 
lShi·
 = (15 - (öt32_tË
S
->
po°Shi·
);

97 
q15_t
 *
pSèã
 = 
S
->pState;

98 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

99 
uöt32_t
 
ßm∂e
, 
°age
 = (uöt32_tË
S
->
numSèges
;

100 
öt32_t
 
uShi·
 = (32 - 
lShi·
);

105 
b0
 = *
	`__SIMD32
(
pC€ffs
)++;

108 
b1
 = *
	`__SIMD32
(
pC€ffs
)++;

111 
a1
 = *
	`__SIMD32
(
pC€ffs
)++;

114 
°©e_ö
 = *
	`__SIMD32
(
pSèã
)++;

117 
°©e_out
 = *
	`__SIMD32
(
pSèã
)--;

125 
ßm∂e
 = 
blockSize
 >> 1u;

129 
ßm∂e
 > 0u)

133 
ö
 = *
	`__SIMD32
(
pIn
)++;

136 
out
 = 
	`__SMUAD
(
b0
, 
ö
);

139 
acc
 = 
	`__SMLALD
(
b1
, 
°©e_ö
, 
out
);

141 
acc
 = 
	`__SMLALD
(
a1
, 
°©e_out
,ácc);

145 
acc_l
 = 
acc
 & 0xffffffff;

148 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

151 
out
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

153 
out
 = 
	`__SSAT
(out, 16);

164 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


166 
°©e_ö
 = 
	`__PKHBT
(
ö
, state_in, 16);

167 
°©e_out
 = 
	`__PKHBT
(
out
, state_out, 16);

171 
°©e_ö
 = 
	`__PKHBT
(°©e_ö >> 16, (
ö
 >> 16), 16);

172 
°©e_out
 = 
	`__PKHBT
(°©e_ouà>> 16, (
out
), 16);

177 
out
 = 
	`__SMUADX
(
b0
, 
ö
);

179 
acc
 = 
	`__SMLALD
(
b1
, 
°©e_ö
, 
out
);

181 
acc
 = 
	`__SMLALD
(
a1
, 
°©e_out
,ácc);

185 
acc_l
 = 
acc
 & 0xffffffff;

188 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

191 
out
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

193 
out
 = 
	`__SSAT
(out, 16);

197 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


199 *
	`__SIMD32
(
pOut
)++ = 
	`__PKHBT
(
°©e_out
, 
out
, 16);

203 *
	`__SIMD32
(
pOut
)++ = 
	`__PKHBT
(
out
, 
°©e_out
 >> 16, 16);

215 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


217 
°©e_ö
 = 
	`__PKHBT
(
ö
 >> 16, state_in, 16);

218 
°©e_out
 = 
	`__PKHBT
(
out
, state_out, 16);

222 
°©e_ö
 = 
	`__PKHBT
(°©e_ö >> 16, 
ö
, 16);

223 
°©e_out
 = 
	`__PKHBT
(°©e_ouà>> 16, 
out
, 16);

229 
ßm∂e
--;

236 if((
blockSize
 & 0x1u) != 0u)

239 
ö
 = *
pIn
++;

243 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


245 
out
 = 
	`__SMUAD
(
b0
, 
ö
);

249 
out
 = 
	`__SMUADX
(
b0
, 
ö
);

254 
acc
 = 
	`__SMLALD
(
b1
, 
°©e_ö
, 
out
);

256 
acc
 = 
	`__SMLALD
(
a1
, 
°©e_out
,ácc);

260 
acc_l
 = 
acc
 & 0xffffffff;

263 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

266 
out
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

268 
out
 = 
	`__SSAT
(out, 16);

271 *
pOut
++ = (
q15_t
Ë
out
;

282 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


284 
°©e_ö
 = 
	`__PKHBT
(
ö
, state_in, 16);

285 
°©e_out
 = 
	`__PKHBT
(
out
, state_out, 16);

289 
°©e_ö
 = 
	`__PKHBT
(°©e_ö >> 16, 
ö
, 16);

290 
°©e_out
 = 
	`__PKHBT
(°©e_ouà>> 16, 
out
, 16);

298 
pIn
 = 
pD°
;

301 
pOut
 = 
pD°
;

304 *
	`__SIMD32
(
pSèã
)++ = 
°©e_ö
;

305 *
	`__SIMD32
(
pSèã
)++ = 
°©e_out
;

309 
°age
--;

311 } 
°age
 > 0u);

317 
q15_t
 *
pIn
 = 
pSrc
;

318 
q15_t
 *
pOut
 = 
pD°
;

319 
q15_t
 
b0
, 
b1
, 
b2
, 
a1
, 
a2
;

320 
q15_t
 
Xn1
, 
Xn2
, 
Yn1
, 
Yn2
;

321 
q15_t
 
Xn
;

322 
q63_t
 
acc
;

323 
öt32_t
 
shi·
 = (15 - (öt32_tË
S
->
po°Shi·
);

324 
q15_t
 *
pSèã
 = 
S
->pState;

325 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

326 
uöt32_t
 
ßm∂e
, 
°age
 = (uöt32_tË
S
->
numSèges
;

331 
b0
 = *
pC€ffs
++;

332 
pC€ffs
++;

333 
b1
 = *
pC€ffs
++;

334 
b2
 = *
pC€ffs
++;

335 
a1
 = *
pC€ffs
++;

336 
a2
 = *
pC€ffs
++;

339 
Xn1
 = 
pSèã
[0];

340 
Xn2
 = 
pSèã
[1];

341 
Yn1
 = 
pSèã
[2];

342 
Yn2
 = 
pSèã
[3];

348 
ßm∂e
 = 
blockSize
;

350 
ßm∂e
 > 0u)

353 
Xn
 = *
pIn
++;

357 
acc
 = (
q31_t
Ë
b0
 *
Xn
;

360 
acc
 +(
q31_t
Ë
b1
 *
Xn1
;

362 
acc
 +(
q31_t
Ë
b2
 *
Xn2
;

364 
acc
 +(
q31_t
Ë
a1
 *
Yn1
;

366 
acc
 +(
q31_t
Ë
a2
 *
Yn2
;

369 
acc
 = 
	`__SSAT
(◊c¯>> 
shi·
), 16);

377 
Xn2
 = 
Xn1
;

378 
Xn1
 = 
Xn
;

379 
Yn2
 = 
Yn1
;

380 
Yn1
 = (
q15_t
Ë
acc
;

383 *
pOut
++ = (
q15_t
Ë
acc
;

386 
ßm∂e
--;

391 
pIn
 = 
pD°
;

394 
pOut
 = 
pD°
;

397 *
pSèã
++ = 
Xn1
;

398 *
pSèã
++ = 
Xn2
;

399 *
pSèã
++ = 
Yn1
;

400 *
pSèã
++ = 
Yn2
;

402 } --
°age
);

406 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_q31.c

42 
	~"¨m_m©h.h
"

74 
	$¨m_biquad_ˇsˇde_df1_q31
(

75 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

76 
q31_t
 * 
pSrc
,

77 
q31_t
 * 
pD°
,

78 
uöt32_t
 
blockSize
)

80 
q63_t
 
acc
;

81 
uöt32_t
 
uShi·
 = ((uöt32_tË
S
->
po°Shi·
 + 1u);

82 
uöt32_t
 
lShi·
 = 32u - 
uShi·
;

83 
q31_t
 *
pIn
 = 
pSrc
;

84 
q31_t
 *
pOut
 = 
pD°
;

85 
q31_t
 *
pSèã
 = 
S
->pState;

86 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

87 
q31_t
 
Xn1
, 
Xn2
, 
Yn1
, 
Yn2
;

88 
q31_t
 
b0
, 
b1
, 
b2
, 
a1
, 
a2
;

89 
q31_t
 
Xn
;

90 
uöt32_t
 
ßm∂e
, 
°age
 = 
S
->
numSèges
;

93 #i‚de‡
ARM_MATH_CM0_FAMILY_FAMILY


95 
q31_t
 
acc_l
, 
acc_h
;

102 
b0
 = *
pC€ffs
++;

103 
b1
 = *
pC€ffs
++;

104 
b2
 = *
pC€ffs
++;

105 
a1
 = *
pC€ffs
++;

106 
a2
 = *
pC€ffs
++;

109 
Xn1
 = 
pSèã
[0];

110 
Xn2
 = 
pSèã
[1];

111 
Yn1
 = 
pSèã
[2];

112 
Yn2
 = 
pSèã
[3];

120 
ßm∂e
 = 
blockSize
 >> 2u;

124 
ßm∂e
 > 0u)

127 
Xn
 = *
pIn
++;

132 
acc
 = (
q63_t
Ë
b0
 *
Xn
;

134 
acc
 +(
q63_t
Ë
b1
 *
Xn1
;

136 
acc
 +(
q63_t
Ë
b2
 *
Xn2
;

138 
acc
 +(
q63_t
Ë
a1
 *
Yn1
;

140 
acc
 +(
q63_t
Ë
a2
 *
Yn2
;

145 
acc_l
 = 
acc
 & 0xffffffff;

148 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

151 
Yn2
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

154 *
pOut
++ = 
Yn2
;

157 
Xn2
 = *
pIn
++;

162 
acc
 = (
q63_t
Ë
b0
 *
Xn2
;

164 
acc
 +(
q63_t
Ë
b1
 *
Xn
;

166 
acc
 +(
q63_t
Ë
b2
 *
Xn1
;

168 
acc
 +(
q63_t
Ë
a1
 *
Yn2
;

170 
acc
 +(
q63_t
Ë
a2
 *
Yn1
;

176 
acc_l
 = 
acc
 & 0xffffffff;

179 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

183 
Yn1
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

186 *
pOut
++ = 
Yn1
;

189 
Xn1
 = *
pIn
++;

194 
acc
 = (
q63_t
Ë
b0
 *
Xn1
;

196 
acc
 +(
q63_t
Ë
b1
 *
Xn2
;

198 
acc
 +(
q63_t
Ë
b2
 *
Xn
;

200 
acc
 +(
q63_t
Ë
a1
 *
Yn1
;

202 
acc
 +(
q63_t
Ë
a2
 *
Yn2
;

206 
acc_l
 = 
acc
 & 0xffffffff;

209 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

213 
Yn2
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

216 *
pOut
++ = 
Yn2
;

219 
Xn
 = *
pIn
++;

224 
acc
 = (
q63_t
Ë
b0
 *
Xn
;

226 
acc
 +(
q63_t
Ë
b1
 *
Xn1
;

228 
acc
 +(
q63_t
Ë
b2
 *
Xn2
;

230 
acc
 +(
q63_t
Ë
a1
 *
Yn2
;

232 
acc
 +(
q63_t
Ë
a2
 *
Yn1
;

236 
acc_l
 = 
acc
 & 0xffffffff;

239 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

242 
Yn1
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

250 
Xn2
 = 
Xn1
;

251 
Xn1
 = 
Xn
;

254 *
pOut
++ = 
Yn1
;

257 
ßm∂e
--;

262 
ßm∂e
 = (
blockSize
 & 0x3u);

264 
ßm∂e
 > 0u)

267 
Xn
 = *
pIn
++;

272 
acc
 = (
q63_t
Ë
b0
 *
Xn
;

274 
acc
 +(
q63_t
Ë
b1
 *
Xn1
;

276 
acc
 +(
q63_t
Ë
b2
 *
Xn2
;

278 
acc
 +(
q63_t
Ë
a1
 *
Yn1
;

280 
acc
 +(
q63_t
Ë
a2
 *
Yn2
;

283 
acc
 =ác¯>> 
lShi·
;

291 
Xn2
 = 
Xn1
;

292 
Xn1
 = 
Xn
;

293 
Yn2
 = 
Yn1
;

294 
Yn1
 = (
q31_t
Ë
acc
;

297 *
pOut
++ = (
q31_t
Ë
acc
;

300 
ßm∂e
--;

305 
pIn
 = 
pD°
;

308 
pOut
 = 
pD°
;

311 *
pSèã
++ = 
Xn1
;

312 *
pSèã
++ = 
Xn2
;

313 *
pSèã
++ = 
Yn1
;

314 *
pSèã
++ = 
Yn2
;

316 } --
°age
);

325 
b0
 = *
pC€ffs
++;

326 
b1
 = *
pC€ffs
++;

327 
b2
 = *
pC€ffs
++;

328 
a1
 = *
pC€ffs
++;

329 
a2
 = *
pC€ffs
++;

332 
Xn1
 = 
pSèã
[0];

333 
Xn2
 = 
pSèã
[1];

334 
Yn1
 = 
pSèã
[2];

335 
Yn2
 = 
pSèã
[3];

341 
ßm∂e
 = 
blockSize
;

343 
ßm∂e
 > 0u)

346 
Xn
 = *
pIn
++;

350 
acc
 = (
q63_t
Ë
b0
 *
Xn
;

353 
acc
 +(
q63_t
Ë
b1
 *
Xn1
;

355 
acc
 +(
q63_t
Ë
b2
 *
Xn2
;

357 
acc
 +(
q63_t
Ë
a1
 *
Yn1
;

359 
acc
 +(
q63_t
Ë
a2
 *
Yn2
;

362 
acc
 =ác¯>> 
lShi·
;

370 
Xn2
 = 
Xn1
;

371 
Xn1
 = 
Xn
;

372 
Yn2
 = 
Yn1
;

373 
Yn1
 = (
q31_t
Ë
acc
;

376 *
pOut
++ = (
q31_t
Ë
acc
;

379 
ßm∂e
--;

384 
pIn
 = 
pD°
;

387 
pOut
 = 
pD°
;

390 *
pSèã
++ = 
Xn1
;

391 *
pSèã
++ = 
Xn2
;

392 *
pSèã
++ = 
Yn1
;

393 *
pSèã
++ = 
Yn2
;

395 } --
°age
);

398 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df2T_f32.c

42 
	~"¨m_m©h.h
"

154 
LOW_OPTIMIZATION_ENTER


155 
	$¨m_biquad_ˇsˇde_df2T_f32
(

156 c⁄° 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

157 
Êﬂt32_t
 * 
pSrc
,

158 
Êﬂt32_t
 * 
pD°
,

159 
uöt32_t
 
blockSize
)

162 
Êﬂt32_t
 *
pIn
 = 
pSrc
;

163 
Êﬂt32_t
 *
pOut
 = 
pD°
;

164 
Êﬂt32_t
 *
pSèã
 = 
S
->pState;

165 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

166 
Êﬂt32_t
 
acc1
;

167 
Êﬂt32_t
 
b0
, 
b1
, 
b2
, 
a1
, 
a2
;

168 
Êﬂt32_t
 
Xn1
;

169 
Êﬂt32_t
 
d1
, 
d2
;

170 
uöt32_t
 
ßm∂e
, 
°age
 = 
S
->
numSèges
;

172 #i‡
	`deföed
(
ARM_MATH_CM7
)

174 
Êﬂt32_t
 
Xn2
, 
Xn3
, 
Xn4
, 
Xn5
, 
Xn6
, 
Xn7
, 
Xn8
;

175 
Êﬂt32_t
 
Xn9
, 
Xn10
, 
Xn11
, 
Xn12
, 
Xn13
, 
Xn14
, 
Xn15
, 
Xn16
;

176 
Êﬂt32_t
 
acc2
, 
acc3
, 
acc4
, 
acc5
, 
acc6
, 
acc7
;

177 
Êﬂt32_t
 
acc8
, 
acc9
, 
acc10
, 
acc11
, 
acc12
, 
acc13
, 
acc14
, 
acc15
, 
acc16
;

182 
b0
 = 
pC€ffs
[0];

183 
b1
 = 
pC€ffs
[1];

184 
b2
 = 
pC€ffs
[2];

185 
a1
 = 
pC€ffs
[3];

187 
ßm∂e
 = 
blockSize
 >> 4u;

188 
a2
 = 
pC€ffs
[4];

191 
d1
 = 
pSèã
[0];

192 
d2
 = 
pSèã
[1];

194 
pC€ffs
 += 5u;

199 
ßm∂e
 > 0u) {

206 
Xn1
 = 
pIn
[0 ];

207 
Xn2
 = 
pIn
[1 ];

210 
Xn3
 = 
pIn
[2 ];

211 
acc1
 = 
b0
 * 
Xn1
 + 
d1
;

213 
Xn4
 = 
pIn
[3 ];

214 
d1
 = 
b1
 * 
Xn1
 + 
d2
;

216 
Xn5
 = 
pIn
[4 ];

217 
d2
 = 
b2
 * 
Xn1
;

219 
Xn6
 = 
pIn
[5 ];

220 
d1
 +
a1
 * 
acc1
;

222 
Xn7
 = 
pIn
[6 ];

223 
d2
 +
a2
 * 
acc1
;

226 
Xn8
 = 
pIn
[7 ];

227 
acc2
 = 
b0
 * 
Xn2
 + 
d1
;

229 
Xn9
 = 
pIn
[8 ];

230 
d1
 = 
b1
 * 
Xn2
 + 
d2
;

232 
Xn10
 = 
pIn
[9 ];

233 
d2
 = 
b2
 * 
Xn2
;

235 
Xn11
 = 
pIn
[10];

236 
d1
 +
a1
 * 
acc2
;

238 
Xn12
 = 
pIn
[11];

239 
d2
 +
a2
 * 
acc2
;

242 
Xn13
 = 
pIn
[12];

243 
acc3
 = 
b0
 * 
Xn3
 + 
d1
;

245 
Xn14
 = 
pIn
[13];

246 
d1
 = 
b1
 * 
Xn3
 + 
d2
;

248 
Xn15
 = 
pIn
[14];

249 
d2
 = 
b2
 * 
Xn3
;

251 
Xn16
 = 
pIn
[15];

252 
d1
 +
a1
 * 
acc3
;

254 
pIn
 += 16;

255 
d2
 +
a2
 * 
acc3
;

258 
acc4
 = 
b0
 * 
Xn4
 + 
d1
;

259 
d1
 = 
b1
 * 
Xn4
 + 
d2
;

260 
d2
 = 
b2
 * 
Xn4
;

261 
d1
 +
a1
 * 
acc4
;

262 
d2
 +
a2
 * 
acc4
;

265 
acc5
 = 
b0
 * 
Xn5
 + 
d1
;

266 
d1
 = 
b1
 * 
Xn5
 + 
d2
;

267 
d2
 = 
b2
 * 
Xn5
;

268 
d1
 +
a1
 * 
acc5
;

269 
d2
 +
a2
 * 
acc5
;

272 
acc6
 = 
b0
 * 
Xn6
 + 
d1
;

273 
d1
 = 
b1
 * 
Xn6
 + 
d2
;

274 
d2
 = 
b2
 * 
Xn6
;

275 
d1
 +
a1
 * 
acc6
;

276 
d2
 +
a2
 * 
acc6
;

279 
acc7
 = 
b0
 * 
Xn7
 + 
d1
;

280 
d1
 = 
b1
 * 
Xn7
 + 
d2
;

281 
d2
 = 
b2
 * 
Xn7
;

282 
d1
 +
a1
 * 
acc7
;

283 
d2
 +
a2
 * 
acc7
;

286 
acc8
 = 
b0
 * 
Xn8
 + 
d1
;

287 
d1
 = 
b1
 * 
Xn8
 + 
d2
;

288 
d2
 = 
b2
 * 
Xn8
;

289 
d1
 +
a1
 * 
acc8
;

290 
d2
 +
a2
 * 
acc8
;

293 
acc9
 = 
b0
 * 
Xn9
 + 
d1
;

294 
d1
 = 
b1
 * 
Xn9
 + 
d2
;

295 
d2
 = 
b2
 * 
Xn9
;

296 
d1
 +
a1
 * 
acc9
;

297 
d2
 +
a2
 * 
acc9
;

300 
acc10
 = 
b0
 * 
Xn10
 + 
d1
;

301 
d1
 = 
b1
 * 
Xn10
 + 
d2
;

302 
d2
 = 
b2
 * 
Xn10
;

303 
d1
 +
a1
 * 
acc10
;

304 
d2
 +
a2
 * 
acc10
;

307 
acc11
 = 
b0
 * 
Xn11
 + 
d1
;

308 
d1
 = 
b1
 * 
Xn11
 + 
d2
;

309 
d2
 = 
b2
 * 
Xn11
;

310 
d1
 +
a1
 * 
acc11
;

311 
d2
 +
a2
 * 
acc11
;

314 
acc12
 = 
b0
 * 
Xn12
 + 
d1
;

315 
d1
 = 
b1
 * 
Xn12
 + 
d2
;

316 
d2
 = 
b2
 * 
Xn12
;

317 
d1
 +
a1
 * 
acc12
;

318 
d2
 +
a2
 * 
acc12
;

321 
acc13
 = 
b0
 * 
Xn13
 + 
d1
;

322 
d1
 = 
b1
 * 
Xn13
 + 
d2
;

323 
d2
 = 
b2
 * 
Xn13
;

325 
pOut
[0 ] = 
acc1
 ;

326 
d1
 +
a1
 * 
acc13
;

328 
pOut
[1 ] = 
acc2
 ;

329 
d2
 +
a2
 * 
acc13
;

332 
pOut
[2 ] = 
acc3
 ;

333 
acc14
 = 
b0
 * 
Xn14
 + 
d1
;

335 
pOut
[3 ] = 
acc4
 ;

336 
d1
 = 
b1
 * 
Xn14
 + 
d2
;

338 
pOut
[4 ] = 
acc5
 ;

339 
d2
 = 
b2
 * 
Xn14
;

341 
pOut
[5 ] = 
acc6
 ;

342 
d1
 +
a1
 * 
acc14
;

344 
pOut
[6 ] = 
acc7
 ;

345 
d2
 +
a2
 * 
acc14
;

348 
pOut
[7 ] = 
acc8
 ;

349 
pOut
[8 ] = 
acc9
 ;

350 
acc15
 = 
b0
 * 
Xn15
 + 
d1
;

352 
pOut
[9 ] = 
acc10
;

353 
d1
 = 
b1
 * 
Xn15
 + 
d2
;

355 
pOut
[10] = 
acc11
;

356 
d2
 = 
b2
 * 
Xn15
;

358 
pOut
[11] = 
acc12
;

359 
d1
 +
a1
 * 
acc15
;

361 
pOut
[12] = 
acc13
;

362 
d2
 +
a2
 * 
acc15
;

365 
pOut
[13] = 
acc14
;

366 
acc16
 = 
b0
 * 
Xn16
 + 
d1
;

368 
pOut
[14] = 
acc15
;

369 
d1
 = 
b1
 * 
Xn16
 + 
d2
;

371 
pOut
[15] = 
acc16
;

372 
d2
 = 
b2
 * 
Xn16
;

374 
ßm∂e
--;

375 
d1
 +
a1
 * 
acc16
;

377 
pOut
 += 16;

378 
d2
 +
a2
 * 
acc16
;

381 
ßm∂e
 = 
blockSize
 & 0xFu;

382 
ßm∂e
 > 0u) {

383 
Xn1
 = *
pIn
;

384 
acc1
 = 
b0
 * 
Xn1
 + 
d1
;

386 
pIn
++;

387 
d1
 = 
b1
 * 
Xn1
 + 
d2
;

389 *
pOut
 = 
acc1
;

390 
d2
 = 
b2
 * 
Xn1
;

392 
pOut
++;

393 
d1
 +
a1
 * 
acc1
;

395 
ßm∂e
--;

396 
d2
 +
a2
 * 
acc1
;

400 
pSèã
[0] = 
d1
;

402 
pIn
 = 
pD°
;

404 
pSèã
[1] = 
d2
;

406 
°age
--;

408 
pSèã
 += 2u;

411 
pOut
 = 
pD°
;

413 } 
°age
 > 0u);

415 #ñi‡
	`deföed
(
ARM_MATH_CM0_FAMILY
)

422 
b0
 = *
pC€ffs
++;

423 
b1
 = *
pC€ffs
++;

424 
b2
 = *
pC€ffs
++;

425 
a1
 = *
pC€ffs
++;

426 
a2
 = *
pC€ffs
++;

429 
d1
 = 
pSèã
[0];

430 
d2
 = 
pSèã
[1];

433 
ßm∂e
 = 
blockSize
;

435 
ßm∂e
 > 0u)

438 
Xn1
 = *
pIn
++;

441 
acc1
 = (
b0
 * 
Xn1
Ë+ 
d1
;

444 *
pOut
++ = 
acc1
;

448 
d1
 = ((
b1
 * 
Xn1
Ë+ (
a1
 * 
acc1
)Ë+ 
d2
;

451 
d2
 = (
b2
 * 
Xn1
Ë+ (
a2
 * 
acc1
);

454 
ßm∂e
--;

458 *
pSèã
++ = 
d1
;

459 *
pSèã
++ = 
d2
;

462 
pIn
 = 
pD°
;

465 
pOut
 = 
pD°
;

468 
°age
--;

470 } 
°age
 > 0u);

474 
Êﬂt32_t
 
Xn2
, 
Xn3
, 
Xn4
;

475 
Êﬂt32_t
 
acc2
, 
acc3
, 
acc4
;

478 
Êﬂt32_t
 
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
A1
;

484 
b0
 = *
pC€ffs
++;

485 
b1
 = *
pC€ffs
++;

486 
b2
 = *
pC€ffs
++;

487 
a1
 = *
pC€ffs
++;

488 
a2
 = *
pC€ffs
++;

492 
d1
 = 
pSèã
[0];

493 
d2
 = 
pSèã
[1];

496 
ßm∂e
 = 
blockSize
 >> 2u;

500 
ßm∂e
 > 0u) {

507 
Xn1
 = 
pIn
[0];

508 
Xn2
 = 
pIn
[1];

509 
Xn3
 = 
pIn
[2];

510 
Xn4
 = 
pIn
[3];

511 
pIn
 += 4;

513 
p0
 = 
b0
 * 
Xn1
;

514 
p1
 = 
b1
 * 
Xn1
;

515 
acc1
 = 
p0
 + 
d1
;

516 
p0
 = 
b0
 * 
Xn2
;

517 
p3
 = 
a1
 * 
acc1
;

518 
p2
 = 
b2
 * 
Xn1
;

519 
A1
 = 
p1
 + 
p3
;

520 
p4
 = 
a2
 * 
acc1
;

521 
d1
 = 
A1
 + 
d2
;

522 
d2
 = 
p2
 + 
p4
;

524 
p1
 = 
b1
 * 
Xn2
;

525 
acc2
 = 
p0
 + 
d1
;

526 
p0
 = 
b0
 * 
Xn3
;

527 
p3
 = 
a1
 * 
acc2
;

528 
p2
 = 
b2
 * 
Xn2
;

529 
A1
 = 
p1
 + 
p3
;

530 
p4
 = 
a2
 * 
acc2
;

531 
d1
 = 
A1
 + 
d2
;

532 
d2
 = 
p2
 + 
p4
;

534 
p1
 = 
b1
 * 
Xn3
;

535 
acc3
 = 
p0
 + 
d1
;

536 
p0
 = 
b0
 * 
Xn4
;

537 
p3
 = 
a1
 * 
acc3
;

538 
p2
 = 
b2
 * 
Xn3
;

539 
A1
 = 
p1
 + 
p3
;

540 
p4
 = 
a2
 * 
acc3
;

541 
d1
 = 
A1
 + 
d2
;

542 
d2
 = 
p2
 + 
p4
;

544 
acc4
 = 
p0
 + 
d1
;

545 
p1
 = 
b1
 * 
Xn4
;

546 
p3
 = 
a1
 * 
acc4
;

547 
p2
 = 
b2
 * 
Xn4
;

548 
A1
 = 
p1
 + 
p3
;

549 
p4
 = 
a2
 * 
acc4
;

550 
d1
 = 
A1
 + 
d2
;

551 
d2
 = 
p2
 + 
p4
;

553 
pOut
[0] = 
acc1
;

554 
pOut
[1] = 
acc2
;

555 
pOut
[2] = 
acc3
;

556 
pOut
[3] = 
acc4
;

557 
pOut
 += 4;

559 
ßm∂e
--;

562 
ßm∂e
 = 
blockSize
 & 0x3u;

563 
ßm∂e
 > 0u) {

564 
Xn1
 = *
pIn
++;

566 
p0
 = 
b0
 * 
Xn1
;

567 
p1
 = 
b1
 * 
Xn1
;

568 
acc1
 = 
p0
 + 
d1
;

569 
p3
 = 
a1
 * 
acc1
;

570 
p2
 = 
b2
 * 
Xn1
;

571 
A1
 = 
p1
 + 
p3
;

572 
p4
 = 
a2
 * 
acc1
;

573 
d1
 = 
A1
 + 
d2
;

574 
d2
 = 
p2
 + 
p4
;

576 *
pOut
++ = 
acc1
;

578 
ßm∂e
--;

582 *
pSèã
++ = 
d1
;

583 *
pSèã
++ = 
d2
;

586 
pIn
 = 
pD°
;

589 
pOut
 = 
pD°
;

592 
°age
--;

594 } 
°age
 > 0u);

598 
	}
}

599 
	gLOW_OPTIMIZATION_EXIT


	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df2T_f64.c

42 
	~"¨m_m©h.h
"

154 
LOW_OPTIMIZATION_ENTER


155 
	$¨m_biquad_ˇsˇde_df2T_f64
(

156 c⁄° 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f64
 * 
S
,

157 
Êﬂt64_t
 * 
pSrc
,

158 
Êﬂt64_t
 * 
pD°
,

159 
uöt32_t
 
blockSize
)

162 
Êﬂt64_t
 *
pIn
 = 
pSrc
;

163 
Êﬂt64_t
 *
pOut
 = 
pD°
;

164 
Êﬂt64_t
 *
pSèã
 = 
S
->pState;

165 
Êﬂt64_t
 *
pC€ffs
 = 
S
->pCoeffs;

166 
Êﬂt64_t
 
acc1
;

167 
Êﬂt64_t
 
b0
, 
b1
, 
b2
, 
a1
, 
a2
;

168 
Êﬂt64_t
 
Xn1
;

169 
Êﬂt64_t
 
d1
, 
d2
;

170 
uöt32_t
 
ßm∂e
, 
°age
 = 
S
->
numSèges
;

172 #i‡
	`deföed
(
ARM_MATH_CM7
)

174 
Êﬂt64_t
 
Xn2
, 
Xn3
, 
Xn4
, 
Xn5
, 
Xn6
, 
Xn7
, 
Xn8
;

175 
Êﬂt64_t
 
Xn9
, 
Xn10
, 
Xn11
, 
Xn12
, 
Xn13
, 
Xn14
, 
Xn15
, 
Xn16
;

176 
Êﬂt64_t
 
acc2
, 
acc3
, 
acc4
, 
acc5
, 
acc6
, 
acc7
;

177 
Êﬂt64_t
 
acc8
, 
acc9
, 
acc10
, 
acc11
, 
acc12
, 
acc13
, 
acc14
, 
acc15
, 
acc16
;

182 
b0
 = 
pC€ffs
[0];

183 
b1
 = 
pC€ffs
[1];

184 
b2
 = 
pC€ffs
[2];

185 
a1
 = 
pC€ffs
[3];

187 
ßm∂e
 = 
blockSize
 >> 4u;

188 
a2
 = 
pC€ffs
[4];

191 
d1
 = 
pSèã
[0];

192 
d2
 = 
pSèã
[1];

194 
pC€ffs
 += 5u;

199 
ßm∂e
 > 0u) {

206 
Xn1
 = 
pIn
[0 ];

207 
Xn2
 = 
pIn
[1 ];

210 
Xn3
 = 
pIn
[2 ];

211 
acc1
 = 
b0
 * 
Xn1
 + 
d1
;

213 
Xn4
 = 
pIn
[3 ];

214 
d1
 = 
b1
 * 
Xn1
 + 
d2
;

216 
Xn5
 = 
pIn
[4 ];

217 
d2
 = 
b2
 * 
Xn1
;

219 
Xn6
 = 
pIn
[5 ];

220 
d1
 +
a1
 * 
acc1
;

222 
Xn7
 = 
pIn
[6 ];

223 
d2
 +
a2
 * 
acc1
;

226 
Xn8
 = 
pIn
[7 ];

227 
acc2
 = 
b0
 * 
Xn2
 + 
d1
;

229 
Xn9
 = 
pIn
[8 ];

230 
d1
 = 
b1
 * 
Xn2
 + 
d2
;

232 
Xn10
 = 
pIn
[9 ];

233 
d2
 = 
b2
 * 
Xn2
;

235 
Xn11
 = 
pIn
[10];

236 
d1
 +
a1
 * 
acc2
;

238 
Xn12
 = 
pIn
[11];

239 
d2
 +
a2
 * 
acc2
;

242 
Xn13
 = 
pIn
[12];

243 
acc3
 = 
b0
 * 
Xn3
 + 
d1
;

245 
Xn14
 = 
pIn
[13];

246 
d1
 = 
b1
 * 
Xn3
 + 
d2
;

248 
Xn15
 = 
pIn
[14];

249 
d2
 = 
b2
 * 
Xn3
;

251 
Xn16
 = 
pIn
[15];

252 
d1
 +
a1
 * 
acc3
;

254 
pIn
 += 16;

255 
d2
 +
a2
 * 
acc3
;

258 
acc4
 = 
b0
 * 
Xn4
 + 
d1
;

259 
d1
 = 
b1
 * 
Xn4
 + 
d2
;

260 
d2
 = 
b2
 * 
Xn4
;

261 
d1
 +
a1
 * 
acc4
;

262 
d2
 +
a2
 * 
acc4
;

265 
acc5
 = 
b0
 * 
Xn5
 + 
d1
;

266 
d1
 = 
b1
 * 
Xn5
 + 
d2
;

267 
d2
 = 
b2
 * 
Xn5
;

268 
d1
 +
a1
 * 
acc5
;

269 
d2
 +
a2
 * 
acc5
;

272 
acc6
 = 
b0
 * 
Xn6
 + 
d1
;

273 
d1
 = 
b1
 * 
Xn6
 + 
d2
;

274 
d2
 = 
b2
 * 
Xn6
;

275 
d1
 +
a1
 * 
acc6
;

276 
d2
 +
a2
 * 
acc6
;

279 
acc7
 = 
b0
 * 
Xn7
 + 
d1
;

280 
d1
 = 
b1
 * 
Xn7
 + 
d2
;

281 
d2
 = 
b2
 * 
Xn7
;

282 
d1
 +
a1
 * 
acc7
;

283 
d2
 +
a2
 * 
acc7
;

286 
acc8
 = 
b0
 * 
Xn8
 + 
d1
;

287 
d1
 = 
b1
 * 
Xn8
 + 
d2
;

288 
d2
 = 
b2
 * 
Xn8
;

289 
d1
 +
a1
 * 
acc8
;

290 
d2
 +
a2
 * 
acc8
;

293 
acc9
 = 
b0
 * 
Xn9
 + 
d1
;

294 
d1
 = 
b1
 * 
Xn9
 + 
d2
;

295 
d2
 = 
b2
 * 
Xn9
;

296 
d1
 +
a1
 * 
acc9
;

297 
d2
 +
a2
 * 
acc9
;

300 
acc10
 = 
b0
 * 
Xn10
 + 
d1
;

301 
d1
 = 
b1
 * 
Xn10
 + 
d2
;

302 
d2
 = 
b2
 * 
Xn10
;

303 
d1
 +
a1
 * 
acc10
;

304 
d2
 +
a2
 * 
acc10
;

307 
acc11
 = 
b0
 * 
Xn11
 + 
d1
;

308 
d1
 = 
b1
 * 
Xn11
 + 
d2
;

309 
d2
 = 
b2
 * 
Xn11
;

310 
d1
 +
a1
 * 
acc11
;

311 
d2
 +
a2
 * 
acc11
;

314 
acc12
 = 
b0
 * 
Xn12
 + 
d1
;

315 
d1
 = 
b1
 * 
Xn12
 + 
d2
;

316 
d2
 = 
b2
 * 
Xn12
;

317 
d1
 +
a1
 * 
acc12
;

318 
d2
 +
a2
 * 
acc12
;

321 
acc13
 = 
b0
 * 
Xn13
 + 
d1
;

322 
d1
 = 
b1
 * 
Xn13
 + 
d2
;

323 
d2
 = 
b2
 * 
Xn13
;

325 
pOut
[0 ] = 
acc1
 ;

326 
d1
 +
a1
 * 
acc13
;

328 
pOut
[1 ] = 
acc2
 ;

329 
d2
 +
a2
 * 
acc13
;

332 
pOut
[2 ] = 
acc3
 ;

333 
acc14
 = 
b0
 * 
Xn14
 + 
d1
;

335 
pOut
[3 ] = 
acc4
 ;

336 
d1
 = 
b1
 * 
Xn14
 + 
d2
;

338 
pOut
[4 ] = 
acc5
 ;

339 
d2
 = 
b2
 * 
Xn14
;

341 
pOut
[5 ] = 
acc6
 ;

342 
d1
 +
a1
 * 
acc14
;

344 
pOut
[6 ] = 
acc7
 ;

345 
d2
 +
a2
 * 
acc14
;

348 
pOut
[7 ] = 
acc8
 ;

349 
pOut
[8 ] = 
acc9
 ;

350 
acc15
 = 
b0
 * 
Xn15
 + 
d1
;

352 
pOut
[9 ] = 
acc10
;

353 
d1
 = 
b1
 * 
Xn15
 + 
d2
;

355 
pOut
[10] = 
acc11
;

356 
d2
 = 
b2
 * 
Xn15
;

358 
pOut
[11] = 
acc12
;

359 
d1
 +
a1
 * 
acc15
;

361 
pOut
[12] = 
acc13
;

362 
d2
 +
a2
 * 
acc15
;

365 
pOut
[13] = 
acc14
;

366 
acc16
 = 
b0
 * 
Xn16
 + 
d1
;

368 
pOut
[14] = 
acc15
;

369 
d1
 = 
b1
 * 
Xn16
 + 
d2
;

371 
pOut
[15] = 
acc16
;

372 
d2
 = 
b2
 * 
Xn16
;

374 
ßm∂e
--;

375 
d1
 +
a1
 * 
acc16
;

377 
pOut
 += 16;

378 
d2
 +
a2
 * 
acc16
;

381 
ßm∂e
 = 
blockSize
 & 0xFu;

382 
ßm∂e
 > 0u) {

383 
Xn1
 = *
pIn
;

384 
acc1
 = 
b0
 * 
Xn1
 + 
d1
;

386 
pIn
++;

387 
d1
 = 
b1
 * 
Xn1
 + 
d2
;

389 *
pOut
 = 
acc1
;

390 
d2
 = 
b2
 * 
Xn1
;

392 
pOut
++;

393 
d1
 +
a1
 * 
acc1
;

395 
ßm∂e
--;

396 
d2
 +
a2
 * 
acc1
;

400 
pSèã
[0] = 
d1
;

402 
pIn
 = 
pD°
;

404 
pSèã
[1] = 
d2
;

406 
°age
--;

408 
pSèã
 += 2u;

411 
pOut
 = 
pD°
;

413 } 
°age
 > 0u);

415 #ñi‡
	`deföed
(
ARM_MATH_CM0_FAMILY
)

422 
b0
 = *
pC€ffs
++;

423 
b1
 = *
pC€ffs
++;

424 
b2
 = *
pC€ffs
++;

425 
a1
 = *
pC€ffs
++;

426 
a2
 = *
pC€ffs
++;

429 
d1
 = 
pSèã
[0];

430 
d2
 = 
pSèã
[1];

433 
ßm∂e
 = 
blockSize
;

435 
ßm∂e
 > 0u)

438 
Xn1
 = *
pIn
++;

441 
acc1
 = (
b0
 * 
Xn1
Ë+ 
d1
;

444 *
pOut
++ = 
acc1
;

448 
d1
 = ((
b1
 * 
Xn1
Ë+ (
a1
 * 
acc1
)Ë+ 
d2
;

451 
d2
 = (
b2
 * 
Xn1
Ë+ (
a2
 * 
acc1
);

454 
ßm∂e
--;

458 *
pSèã
++ = 
d1
;

459 *
pSèã
++ = 
d2
;

462 
pIn
 = 
pD°
;

465 
pOut
 = 
pD°
;

468 
°age
--;

470 } 
°age
 > 0u);

474 
Êﬂt64_t
 
Xn2
, 
Xn3
, 
Xn4
;

475 
Êﬂt64_t
 
acc2
, 
acc3
, 
acc4
;

478 
Êﬂt64_t
 
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
A1
;

484 
b0
 = *
pC€ffs
++;

485 
b1
 = *
pC€ffs
++;

486 
b2
 = *
pC€ffs
++;

487 
a1
 = *
pC€ffs
++;

488 
a2
 = *
pC€ffs
++;

492 
d1
 = 
pSèã
[0];

493 
d2
 = 
pSèã
[1];

496 
ßm∂e
 = 
blockSize
 >> 2u;

500 
ßm∂e
 > 0u) {

507 
Xn1
 = 
pIn
[0];

508 
Xn2
 = 
pIn
[1];

509 
Xn3
 = 
pIn
[2];

510 
Xn4
 = 
pIn
[3];

511 
pIn
 += 4;

513 
p0
 = 
b0
 * 
Xn1
;

514 
p1
 = 
b1
 * 
Xn1
;

515 
acc1
 = 
p0
 + 
d1
;

516 
p0
 = 
b0
 * 
Xn2
;

517 
p3
 = 
a1
 * 
acc1
;

518 
p2
 = 
b2
 * 
Xn1
;

519 
A1
 = 
p1
 + 
p3
;

520 
p4
 = 
a2
 * 
acc1
;

521 
d1
 = 
A1
 + 
d2
;

522 
d2
 = 
p2
 + 
p4
;

524 
p1
 = 
b1
 * 
Xn2
;

525 
acc2
 = 
p0
 + 
d1
;

526 
p0
 = 
b0
 * 
Xn3
;

527 
p3
 = 
a1
 * 
acc2
;

528 
p2
 = 
b2
 * 
Xn2
;

529 
A1
 = 
p1
 + 
p3
;

530 
p4
 = 
a2
 * 
acc2
;

531 
d1
 = 
A1
 + 
d2
;

532 
d2
 = 
p2
 + 
p4
;

534 
p1
 = 
b1
 * 
Xn3
;

535 
acc3
 = 
p0
 + 
d1
;

536 
p0
 = 
b0
 * 
Xn4
;

537 
p3
 = 
a1
 * 
acc3
;

538 
p2
 = 
b2
 * 
Xn3
;

539 
A1
 = 
p1
 + 
p3
;

540 
p4
 = 
a2
 * 
acc3
;

541 
d1
 = 
A1
 + 
d2
;

542 
d2
 = 
p2
 + 
p4
;

544 
acc4
 = 
p0
 + 
d1
;

545 
p1
 = 
b1
 * 
Xn4
;

546 
p3
 = 
a1
 * 
acc4
;

547 
p2
 = 
b2
 * 
Xn4
;

548 
A1
 = 
p1
 + 
p3
;

549 
p4
 = 
a2
 * 
acc4
;

550 
d1
 = 
A1
 + 
d2
;

551 
d2
 = 
p2
 + 
p4
;

553 
pOut
[0] = 
acc1
;

554 
pOut
[1] = 
acc2
;

555 
pOut
[2] = 
acc3
;

556 
pOut
[3] = 
acc4
;

557 
pOut
 += 4;

559 
ßm∂e
--;

562 
ßm∂e
 = 
blockSize
 & 0x3u;

563 
ßm∂e
 > 0u) {

564 
Xn1
 = *
pIn
++;

566 
p0
 = 
b0
 * 
Xn1
;

567 
p1
 = 
b1
 * 
Xn1
;

568 
acc1
 = 
p0
 + 
d1
;

569 
p3
 = 
a1
 * 
acc1
;

570 
p2
 = 
b2
 * 
Xn1
;

571 
A1
 = 
p1
 + 
p3
;

572 
p4
 = 
a2
 * 
acc1
;

573 
d1
 = 
A1
 + 
d2
;

574 
d2
 = 
p2
 + 
p4
;

576 *
pOut
++ = 
acc1
;

578 
ßm∂e
--;

582 *
pSèã
++ = 
d1
;

583 *
pSèã
++ = 
d2
;

586 
pIn
 = 
pD°
;

589 
pOut
 = 
pD°
;

592 
°age
--;

594 } 
°age
 > 0u);

598 
	}
}

599 
	gLOW_OPTIMIZATION_EXIT


	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df2T_init_f32.c

42 
	~"¨m_m©h.h
"

81 
	$¨m_biquad_ˇsˇde_df2T_öô_f32
(

82 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

83 
uöt8_t
 
numSèges
,

84 
Êﬂt32_t
 * 
pC€ffs
,

85 
Êﬂt32_t
 * 
pSèã
)

88 
S
->
numSèges
 =ÇumStages;

91 
S
->
pC€ffs
 =ÖCoeffs;

94 
	`mem£t
(
pSèã
, 0, (2u * (
uöt32_t
Ë
numSèges
Ë* (
Êﬂt32_t
));

97 
S
->
pSèã
 =ÖState;

98 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df2T_init_f64.c

42 
	~"¨m_m©h.h
"

81 
	$¨m_biquad_ˇsˇde_df2T_öô_f64
(

82 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f64
 * 
S
,

83 
uöt8_t
 
numSèges
,

84 
Êﬂt64_t
 * 
pC€ffs
,

85 
Êﬂt64_t
 * 
pSèã
)

88 
S
->
numSèges
 =ÇumStages;

91 
S
->
pC€ffs
 =ÖCoeffs;

94 
	`mem£t
(
pSèã
, 0, (2u * (
uöt32_t
Ë
numSèges
Ë* (
Êﬂt64_t
));

97 
S
->
pSèã
 =ÖState;

98 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_stereo_df2T_f32.c

42 
	~"¨m_m©h.h
"

154 
LOW_OPTIMIZATION_ENTER


155 
	$¨m_biquad_ˇsˇde_°îeo_df2T_f32
(

156 c⁄° 
¨m_biquad_ˇsˇde_°îeo_df2T_ö°™˚_f32
 * 
S
,

157 
Êﬂt32_t
 * 
pSrc
,

158 
Êﬂt32_t
 * 
pD°
,

159 
uöt32_t
 
blockSize
)

162 
Êﬂt32_t
 *
pIn
 = 
pSrc
;

163 
Êﬂt32_t
 *
pOut
 = 
pD°
;

164 
Êﬂt32_t
 *
pSèã
 = 
S
->pState;

165 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

166 
Êﬂt32_t
 
acc1a
, 
acc1b
;

167 
Êﬂt32_t
 
b0
, 
b1
, 
b2
, 
a1
, 
a2
;

168 
Êﬂt32_t
 
Xn1a
, 
Xn1b
;

169 
Êﬂt32_t
 
d1a
, 
d2a
, 
d1b
, 
d2b
;

170 
uöt32_t
 
ßm∂e
, 
°age
 = 
S
->
numSèges
;

172 #i‡
	`deföed
(
ARM_MATH_CM7
)

174 
Êﬂt32_t
 
Xn2a
, 
Xn3a
, 
Xn4a
, 
Xn5a
, 
Xn6a
, 
Xn7a
, 
Xn8a
;

175 
Êﬂt32_t
 
Xn2b
, 
Xn3b
, 
Xn4b
, 
Xn5b
, 
Xn6b
, 
Xn7b
, 
Xn8b
;

176 
Êﬂt32_t
 
acc2a
, 
acc3a
, 
acc4a
, 
acc5a
, 
acc6a
, 
acc7a
, 
acc8a
;

177 
Êﬂt32_t
 
acc2b
, 
acc3b
, 
acc4b
, 
acc5b
, 
acc6b
, 
acc7b
, 
acc8b
;

182 
b0
 = 
pC€ffs
[0];

183 
b1
 = 
pC€ffs
[1];

184 
b2
 = 
pC€ffs
[2];

185 
a1
 = 
pC€ffs
[3];

187 
ßm∂e
 = 
blockSize
 >> 3u;

188 
a2
 = 
pC€ffs
[4];

191 
d1a
 = 
pSèã
[0];

192 
d2a
 = 
pSèã
[1];

193 
d1b
 = 
pSèã
[2];

194 
d2b
 = 
pSèã
[3];

196 
pC€ffs
 += 5u;

200 
ßm∂e
 > 0u) {

207 
Xn1a
 = 
pIn
[0 ];

208 
Xn1b
 = 
pIn
[1 ];

211 
Xn2a
 = 
pIn
[2 ];

212 
acc1a
 = 
b0
 * 
Xn1a
 + 
d1a
;

214 
Xn2b
 = 
pIn
[3 ];

215 
d1a
 = 
b1
 * 
Xn1a
 + 
d2a
;

217 
Xn3a
 = 
pIn
[4 ];

218 
d2a
 = 
b2
 * 
Xn1a
;

220 
Xn3b
 = 
pIn
[5 ];

221 
d1a
 +
a1
 * 
acc1a
;

223 
Xn4a
 = 
pIn
[6 ];

224 
d2a
 +
a2
 * 
acc1a
;

227 
Xn4b
 = 
pIn
[7 ];

228 
acc1b
 = 
b0
 * 
Xn1b
 + 
d1b
;

230 
Xn5a
 = 
pIn
[8 ];

231 
d1b
 = 
b1
 * 
Xn1b
 + 
d2b
;

233 
Xn5b
 = 
pIn
[9 ];

234 
d2b
 = 
b2
 * 
Xn1b
;

236 
Xn6a
 = 
pIn
[10];

237 
d1b
 +
a1
 * 
acc1b
;

239 
Xn6b
 = 
pIn
[11];

240 
d2b
 +
a2
 * 
acc1b
;

243 
Xn7a
 = 
pIn
[12];

244 
acc2a
 = 
b0
 * 
Xn2a
 + 
d1a
;

246 
Xn7b
 = 
pIn
[13];

247 
d1a
 = 
b1
 * 
Xn2a
 + 
d2a
;

249 
Xn8a
 = 
pIn
[14];

250 
d2a
 = 
b2
 * 
Xn2a
;

252 
Xn8b
 = 
pIn
[15];

253 
d1a
 +
a1
 * 
acc2a
;

255 
pIn
 += 16;

256 
d2a
 +
a2
 * 
acc2a
;

259 
acc2b
 = 
b0
 * 
Xn2b
 + 
d1b
;

260 
d1b
 = 
b1
 * 
Xn2b
 + 
d2b
;

261 
d2b
 = 
b2
 * 
Xn2b
;

262 
d1b
 +
a1
 * 
acc2b
;

263 
d2b
 +
a2
 * 
acc2b
;

266 
acc3a
 = 
b0
 * 
Xn3a
 + 
d1a
;

267 
d1a
 = 
b1
 * 
Xn3a
 + 
d2a
;

268 
d2a
 = 
b2
 * 
Xn3a
;

269 
d1a
 +
a1
 * 
acc3a
;

270 
d2a
 +
a2
 * 
acc3a
;

273 
acc3b
 = 
b0
 * 
Xn3b
 + 
d1b
;

274 
d1b
 = 
b1
 * 
Xn3b
 + 
d2b
;

275 
d2b
 = 
b2
 * 
Xn3b
;

276 
d1b
 +
a1
 * 
acc3b
;

277 
d2b
 +
a2
 * 
acc3b
;

280 
acc4a
 = 
b0
 * 
Xn4a
 + 
d1a
;

281 
d1a
 = 
b1
 * 
Xn4a
 + 
d2a
;

282 
d2a
 = 
b2
 * 
Xn4a
;

283 
d1a
 +
a1
 * 
acc4a
;

284 
d2a
 +
a2
 * 
acc4a
;

287 
acc4b
 = 
b0
 * 
Xn4b
 + 
d1b
;

288 
d1b
 = 
b1
 * 
Xn4b
 + 
d2b
;

289 
d2b
 = 
b2
 * 
Xn4b
;

290 
d1b
 +
a1
 * 
acc4b
;

291 
d2b
 +
a2
 * 
acc4b
;

294 
acc5a
 = 
b0
 * 
Xn5a
 + 
d1a
;

295 
d1a
 = 
b1
 * 
Xn5a
 + 
d2a
;

296 
d2a
 = 
b2
 * 
Xn5a
;

297 
d1a
 +
a1
 * 
acc5a
;

298 
d2a
 +
a2
 * 
acc5a
;

301 
acc5b
 = 
b0
 * 
Xn5b
 + 
d1b
;

302 
d1b
 = 
b1
 * 
Xn5b
 + 
d2b
;

303 
d2b
 = 
b2
 * 
Xn5b
;

304 
d1b
 +
a1
 * 
acc5b
;

305 
d2b
 +
a2
 * 
acc5b
;

308 
acc6a
 = 
b0
 * 
Xn6a
 + 
d1a
;

309 
d1a
 = 
b1
 * 
Xn6a
 + 
d2a
;

310 
d2a
 = 
b2
 * 
Xn6a
;

311 
d1a
 +
a1
 * 
acc6a
;

312 
d2a
 +
a2
 * 
acc6a
;

315 
acc6b
 = 
b0
 * 
Xn6b
 + 
d1b
;

316 
d1b
 = 
b1
 * 
Xn6b
 + 
d2b
;

317 
d2b
 = 
b2
 * 
Xn6b
;

318 
d1b
 +
a1
 * 
acc6b
;

319 
d2b
 +
a2
 * 
acc6b
;

322 
acc7a
 = 
b0
 * 
Xn7a
 + 
d1a
;

323 
d1a
 = 
b1
 * 
Xn7a
 + 
d2a
;

325 
pOut
[0 ] = 
acc1a
 ;

326 
d2a
 = 
b2
 * 
Xn7a
;

328 
pOut
[1 ] = 
acc1b
 ;

329 
d1a
 +
a1
 * 
acc7a
;

331 
pOut
[2 ] = 
acc2a
 ;

332 
d2a
 +
a2
 * 
acc7a
;

335 
pOut
[3 ] = 
acc2b
 ;

336 
acc7b
 = 
b0
 * 
Xn7b
 + 
d1b
;

338 
pOut
[4 ] = 
acc3a
 ;

339 
d1b
 = 
b1
 * 
Xn7b
 + 
d2b
;

341 
pOut
[5 ] = 
acc3b
 ;

342 
d2b
 = 
b2
 * 
Xn7b
;

344 
pOut
[6 ] = 
acc4a
 ;

345 
d1b
 +
a1
 * 
acc7b
;

347 
pOut
[7 ] = 
acc4b
 ;

348 
d2b
 +
a2
 * 
acc7b
;

351 
pOut
[8 ] = 
acc5a
 ;

352 
acc8a
 = 
b0
 * 
Xn8a
 + 
d1a
;

354 
pOut
[9 ] = 
acc5b
;

355 
d1a
 = 
b1
 * 
Xn8a
 + 
d2a
;

357 
pOut
[10] = 
acc6a
;

358 
d2a
 = 
b2
 * 
Xn8a
;

360 
pOut
[11] = 
acc6b
;

361 
d1a
 +
a1
 * 
acc8a
;

363 
pOut
[12] = 
acc7a
;

364 
d2a
 +
a2
 * 
acc8a
;

367 
pOut
[13] = 
acc7b
;

368 
acc8b
 = 
b0
 * 
Xn8b
 + 
d1b
;

370 
pOut
[14] = 
acc8a
;

371 
d1b
 = 
b1
 * 
Xn8b
 + 
d2b
;

373 
pOut
[15] = 
acc8b
;

374 
d2b
 = 
b2
 * 
Xn8b
;

376 
ßm∂e
--;

377 
d1b
 +
a1
 * 
acc8b
;

379 
pOut
 += 16;

380 
d2b
 +
a2
 * 
acc8b
;

383 
ßm∂e
 = 
blockSize
 & 0x7u;

384 
ßm∂e
 > 0u) {

386 
Xn1a
 = *
pIn
++;

387 
Xn1b
 = *
pIn
++;

390 
acc1a
 = (
b0
 * 
Xn1a
Ë+ 
d1a
;

391 
acc1b
 = (
b0
 * 
Xn1b
Ë+ 
d1b
;

394 *
pOut
++ = 
acc1a
;

395 *
pOut
++ = 
acc1b
;

399 
d1a
 = ((
b1
 * 
Xn1a
Ë+ (
a1
 * 
acc1a
)Ë+ 
d2a
;

400 
d1b
 = ((
b1
 * 
Xn1b
Ë+ (
a1
 * 
acc1b
)Ë+ 
d2b
;

403 
d2a
 = (
b2
 * 
Xn1a
Ë+ (
a2
 * 
acc1a
);

404 
d2b
 = (
b2
 * 
Xn1b
Ë+ (
a2
 * 
acc1b
);

406 
ßm∂e
--;

410 
pSèã
[0] = 
d1a
;

411 
pSèã
[1] = 
d2a
;

413 
pSèã
[2] = 
d1b
;

414 
pSèã
[3] = 
d2b
;

417 
pIn
 = 
pD°
;

419 
°age
--;

421 
pSèã
 += 4u;

423 
pOut
 = 
pD°
;

425 } 
°age
 > 0u);

427 #ñi‡
	`deföed
(
ARM_MATH_CM0_FAMILY
)

434 
b0
 = *
pC€ffs
++;

435 
b1
 = *
pC€ffs
++;

436 
b2
 = *
pC€ffs
++;

437 
a1
 = *
pC€ffs
++;

438 
a2
 = *
pC€ffs
++;

441 
d1a
 = 
pSèã
[0];

442 
d2a
 = 
pSèã
[1];

443 
d1b
 = 
pSèã
[2];

444 
d2b
 = 
pSèã
[3];

447 
ßm∂e
 = 
blockSize
;

449 
ßm∂e
 > 0u)

452 
Xn1a
 = *
pIn
++;

453 
Xn1b
 = *
pIn
++;

456 
acc1a
 = (
b0
 * 
Xn1a
Ë+ 
d1a
;

457 
acc1b
 = (
b0
 * 
Xn1b
Ë+ 
d1b
;

460 *
pOut
++ = 
acc1a
;

461 *
pOut
++ = 
acc1b
;

465 
d1a
 = ((
b1
 * 
Xn1a
Ë+ (
a1
 * 
acc1a
)Ë+ 
d2a
;

466 
d1b
 = ((
b1
 * 
Xn1b
Ë+ (
a1
 * 
acc1b
)Ë+ 
d2b
;

469 
d2a
 = (
b2
 * 
Xn1a
Ë+ (
a2
 * 
acc1a
);

470 
d2b
 = (
b2
 * 
Xn1b
Ë+ (
a2
 * 
acc1b
);

473 
ßm∂e
--;

477 *
pSèã
++ = 
d1a
;

478 *
pSèã
++ = 
d2a
;

479 *
pSèã
++ = 
d1b
;

480 *
pSèã
++ = 
d2b
;

483 
pIn
 = 
pD°
;

486 
pOut
 = 
pD°
;

489 
°age
--;

491 } 
°age
 > 0u);

495 
Êﬂt32_t
 
Xn2a
, 
Xn3a
, 
Xn4a
;

496 
Êﬂt32_t
 
Xn2b
, 
Xn3b
, 
Xn4b
;

497 
Êﬂt32_t
 
acc2a
, 
acc3a
, 
acc4a
;

498 
Êﬂt32_t
 
acc2b
, 
acc3b
, 
acc4b
;

499 
Êﬂt32_t
 
p0a
, 
p1a
, 
p2a
, 
p3a
, 
p4a
, 
A1a
;

500 
Êﬂt32_t
 
p0b
, 
p1b
, 
p2b
, 
p3b
, 
p4b
, 
A1b
;

506 
b0
 = *
pC€ffs
++;

507 
b1
 = *
pC€ffs
++;

508 
b2
 = *
pC€ffs
++;

509 
a1
 = *
pC€ffs
++;

510 
a2
 = *
pC€ffs
++;

513 
d1a
 = 
pSèã
[0];

514 
d2a
 = 
pSèã
[1];

515 
d1b
 = 
pSèã
[2];

516 
d2b
 = 
pSèã
[3];

519 
ßm∂e
 = 
blockSize
 >> 2u;

523 
ßm∂e
 > 0u) {

530 
Xn1a
 = 
pIn
[0];

531 
Xn1b
 = 
pIn
[1];

532 
Xn2a
 = 
pIn
[2];

533 
Xn2b
 = 
pIn
[3];

534 
Xn3a
 = 
pIn
[4];

535 
Xn3b
 = 
pIn
[5];

536 
Xn4a
 = 
pIn
[6];

537 
Xn4b
 = 
pIn
[7];

538 
pIn
 += 8;

540 
p0a
 = 
b0
 * 
Xn1a
;

541 
p0b
 = 
b0
 * 
Xn1b
;

542 
p1a
 = 
b1
 * 
Xn1a
;

543 
p1b
 = 
b1
 * 
Xn1b
;

544 
acc1a
 = 
p0a
 + 
d1a
;

545 
acc1b
 = 
p0b
 + 
d1b
;

546 
p0a
 = 
b0
 * 
Xn2a
;

547 
p0b
 = 
b0
 * 
Xn2b
;

548 
p3a
 = 
a1
 * 
acc1a
;

549 
p3b
 = 
a1
 * 
acc1b
;

550 
p2a
 = 
b2
 * 
Xn1a
;

551 
p2b
 = 
b2
 * 
Xn1b
;

552 
A1a
 = 
p1a
 + 
p3a
;

553 
A1b
 = 
p1b
 + 
p3b
;

554 
p4a
 = 
a2
 * 
acc1a
;

555 
p4b
 = 
a2
 * 
acc1b
;

556 
d1a
 = 
A1a
 + 
d2a
;

557 
d1b
 = 
A1b
 + 
d2b
;

558 
d2a
 = 
p2a
 + 
p4a
;

559 
d2b
 = 
p2b
 + 
p4b
;

561 
p1a
 = 
b1
 * 
Xn2a
;

562 
p1b
 = 
b1
 * 
Xn2b
;

563 
acc2a
 = 
p0a
 + 
d1a
;

564 
acc2b
 = 
p0b
 + 
d1b
;

565 
p0a
 = 
b0
 * 
Xn3a
;

566 
p0b
 = 
b0
 * 
Xn3b
;

567 
p3a
 = 
a1
 * 
acc2a
;

568 
p3b
 = 
a1
 * 
acc2b
;

569 
p2a
 = 
b2
 * 
Xn2a
;

570 
p2b
 = 
b2
 * 
Xn2b
;

571 
A1a
 = 
p1a
 + 
p3a
;

572 
A1b
 = 
p1b
 + 
p3b
;

573 
p4a
 = 
a2
 * 
acc2a
;

574 
p4b
 = 
a2
 * 
acc2b
;

575 
d1a
 = 
A1a
 + 
d2a
;

576 
d1b
 = 
A1b
 + 
d2b
;

577 
d2a
 = 
p2a
 + 
p4a
;

578 
d2b
 = 
p2b
 + 
p4b
;

580 
p1a
 = 
b1
 * 
Xn3a
;

581 
p1b
 = 
b1
 * 
Xn3b
;

582 
acc3a
 = 
p0a
 + 
d1a
;

583 
acc3b
 = 
p0b
 + 
d1b
;

584 
p0a
 = 
b0
 * 
Xn4a
;

585 
p0b
 = 
b0
 * 
Xn4b
;

586 
p3a
 = 
a1
 * 
acc3a
;

587 
p3b
 = 
a1
 * 
acc3b
;

588 
p2a
 = 
b2
 * 
Xn3a
;

589 
p2b
 = 
b2
 * 
Xn3b
;

590 
A1a
 = 
p1a
 + 
p3a
;

591 
A1b
 = 
p1b
 + 
p3b
;

592 
p4a
 = 
a2
 * 
acc3a
;

593 
p4b
 = 
a2
 * 
acc3b
;

594 
d1a
 = 
A1a
 + 
d2a
;

595 
d1b
 = 
A1b
 + 
d2b
;

596 
d2a
 = 
p2a
 + 
p4a
;

597 
d2b
 = 
p2b
 + 
p4b
;

599 
acc4a
 = 
p0a
 + 
d1a
;

600 
acc4b
 = 
p0b
 + 
d1b
;

601 
p1a
 = 
b1
 * 
Xn4a
;

602 
p1b
 = 
b1
 * 
Xn4b
;

603 
p3a
 = 
a1
 * 
acc4a
;

604 
p3b
 = 
a1
 * 
acc4b
;

605 
p2a
 = 
b2
 * 
Xn4a
;

606 
p2b
 = 
b2
 * 
Xn4b
;

607 
A1a
 = 
p1a
 + 
p3a
;

608 
A1b
 = 
p1b
 + 
p3b
;

609 
p4a
 = 
a2
 * 
acc4a
;

610 
p4b
 = 
a2
 * 
acc4b
;

611 
d1a
 = 
A1a
 + 
d2a
;

612 
d1b
 = 
A1b
 + 
d2b
;

613 
d2a
 = 
p2a
 + 
p4a
;

614 
d2b
 = 
p2b
 + 
p4b
;

616 
pOut
[0] = 
acc1a
;

617 
pOut
[1] = 
acc1b
;

618 
pOut
[2] = 
acc2a
;

619 
pOut
[3] = 
acc2b
;

620 
pOut
[4] = 
acc3a
;

621 
pOut
[5] = 
acc3b
;

622 
pOut
[6] = 
acc4a
;

623 
pOut
[7] = 
acc4b
;

624 
pOut
 += 8;

626 
ßm∂e
--;

629 
ßm∂e
 = 
blockSize
 & 0x3u;

630 
ßm∂e
 > 0u) {

631 
Xn1a
 = *
pIn
++;

632 
Xn1b
 = *
pIn
++;

634 
p0a
 = 
b0
 * 
Xn1a
;

635 
p0b
 = 
b0
 * 
Xn1b
;

636 
p1a
 = 
b1
 * 
Xn1a
;

637 
p1b
 = 
b1
 * 
Xn1b
;

638 
acc1a
 = 
p0a
 + 
d1a
;

639 
acc1b
 = 
p0b
 + 
d1b
;

640 
p3a
 = 
a1
 * 
acc1a
;

641 
p3b
 = 
a1
 * 
acc1b
;

642 
p2a
 = 
b2
 * 
Xn1a
;

643 
p2b
 = 
b2
 * 
Xn1b
;

644 
A1a
 = 
p1a
 + 
p3a
;

645 
A1b
 = 
p1b
 + 
p3b
;

646 
p4a
 = 
a2
 * 
acc1a
;

647 
p4b
 = 
a2
 * 
acc1b
;

648 
d1a
 = 
A1a
 + 
d2a
;

649 
d1b
 = 
A1b
 + 
d2b
;

650 
d2a
 = 
p2a
 + 
p4a
;

651 
d2b
 = 
p2b
 + 
p4b
;

653 *
pOut
++ = 
acc1a
;

654 *
pOut
++ = 
acc1b
;

656 
ßm∂e
--;

660 *
pSèã
++ = 
d1a
;

661 *
pSèã
++ = 
d2a
;

662 *
pSèã
++ = 
d1b
;

663 *
pSèã
++ = 
d2b
;

666 
pIn
 = 
pD°
;

669 
pOut
 = 
pD°
;

672 
°age
--;

674 } 
°age
 > 0u);

678 
	}
}

679 
	gLOW_OPTIMIZATION_EXIT


	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_stereo_df2T_init_f32.c

42 
	~"¨m_m©h.h
"

81 
	$¨m_biquad_ˇsˇde_°îeo_df2T_öô_f32
(

82 
¨m_biquad_ˇsˇde_°îeo_df2T_ö°™˚_f32
 * 
S
,

83 
uöt8_t
 
numSèges
,

84 
Êﬂt32_t
 * 
pC€ffs
,

85 
Êﬂt32_t
 * 
pSèã
)

88 
S
->
numSèges
 =ÇumStages;

91 
S
->
pC€ffs
 =ÖCoeffs;

94 
	`mem£t
(
pSèã
, 0, (4u * (
uöt32_t
Ë
numSèges
Ë* (
Êﬂt32_t
));

97 
S
->
pSèã
 =ÖState;

98 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_f32.c

41 
	~"¨m_m©h.h
"

124 
	$¨m_c⁄v_f32
(

125 
Êﬂt32_t
 * 
pSrcA
,

126 
uöt32_t
 
§cALí
,

127 
Êﬂt32_t
 * 
pSrcB
,

128 
uöt32_t
 
§cBLí
,

129 
Êﬂt32_t
 * 
pD°
)

133 #i‚de‡
ARM_MATH_CM0_FAMILY


137 
Êﬂt32_t
 *
pIn1
;

138 
Êﬂt32_t
 *
pIn2
;

139 
Êﬂt32_t
 *
pOut
 = 
pD°
;

140 
Êﬂt32_t
 *
px
;

141 
Êﬂt32_t
 *
py
;

142 
Êﬂt32_t
 *
pSrc1
, *
pSrc2
;

143 
Êﬂt32_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

144 
Êﬂt32_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

145 
uöt32_t
 
j
, 
k
, 
cou¡
, 
blkC¡
, 
blockSize1
, 
blockSize2
, 
blockSize3
;

150 if(
§cALí
 >
§cBLí
)

153 
pIn1
 = 
pSrcA
;

156 
pIn2
 = 
pSrcB
;

161 
pIn1
 = 
pSrcB
;

164 
pIn2
 = 
pSrcA
;

167 
j
 = 
§cBLí
;

168 
§cBLí
 = 
§cALí
;

169 
§cALí
 = 
j
;

183 
blockSize1
 = 
§cBLí
 - 1u;

184 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

185 
blockSize3
 = 
blockSize1
;

199 
cou¡
 = 1u;

202 
px
 = 
pIn1
;

205 
py
 = 
pIn2
;

213 
blockSize1
 > 0u)

216 
sum
 = 0.0f;

219 
k
 = 
cou¡
 >> 2u;

223 
k
 > 0u)

226 
sum
 +*
px
++ * *
py
--;

229 
sum
 +*
px
++ * *
py
--;

232 
sum
 +*
px
++ * *
py
--;

235 
sum
 +*
px
++ * *
py
--;

238 
k
--;

243 
k
 = 
cou¡
 % 0x4u;

245 
k
 > 0u)

248 
sum
 +*
px
++ * *
py
--;

251 
k
--;

255 *
pOut
++ = 
sum
;

258 
py
 = 
pIn2
 + 
cou¡
;

259 
px
 = 
pIn1
;

262 
cou¡
++;

265 
blockSize1
--;

279 
px
 = 
pIn1
;

282 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

283 
py
 = 
pSrc2
;

286 
cou¡
 = 0u;

295 if(
§cBLí
 >= 4u)

298 
blkC¡
 = 
blockSize2
 >> 2u;

300 
blkC¡
 > 0u)

303 
acc0
 = 0.0f;

304 
acc1
 = 0.0f;

305 
acc2
 = 0.0f;

306 
acc3
 = 0.0f;

309 
x0
 = *(
px
++);

310 
x1
 = *(
px
++);

311 
x2
 = *(
px
++);

314 
k
 = 
§cBLí
 >> 2u;

321 
c0
 = *(
py
--);

324 
x3
 = *(
px
);

328 
acc0
 +
x0
 * 
c0
;

331 
acc1
 +
x1
 * 
c0
;

334 
acc2
 +
x2
 * 
c0
;

337 
acc3
 +
x3
 * 
c0
;

340 
c0
 = *(
py
--);

343 
x0
 = *(
px
 + 1u);

347 
acc0
 +
x1
 * 
c0
;

349 
acc1
 +
x2
 * 
c0
;

351 
acc2
 +
x3
 * 
c0
;

353 
acc3
 +
x0
 * 
c0
;

356 
c0
 = *(
py
--);

359 
x1
 = *(
px
 + 2u);

363 
acc0
 +
x2
 * 
c0
;

365 
acc1
 +
x3
 * 
c0
;

367 
acc2
 +
x0
 * 
c0
;

369 
acc3
 +
x1
 * 
c0
;

372 
c0
 = *(
py
--);

375 
x2
 = *(
px
 + 3u);

376 
px
 += 4u;

380 
acc0
 +
x3
 * 
c0
;

382 
acc1
 +
x0
 * 
c0
;

384 
acc2
 +
x1
 * 
c0
;

386 
acc3
 +
x2
 * 
c0
;

389 } --
k
);

393 
k
 = 
§cBLí
 % 0x4u;

395 
k
 > 0u)

398 
c0
 = *(
py
--);

401 
x3
 = *(
px
++);

405 
acc0
 +
x0
 * 
c0
;

407 
acc1
 +
x1
 * 
c0
;

409 
acc2
 +
x2
 * 
c0
;

411 
acc3
 +
x3
 * 
c0
;

414 
x0
 = 
x1
;

415 
x1
 = 
x2
;

416 
x2
 = 
x3
;

419 
k
--;

423 *
pOut
++ = 
acc0
;

424 *
pOut
++ = 
acc1
;

425 *
pOut
++ = 
acc2
;

426 *
pOut
++ = 
acc3
;

429 
cou¡
 += 4u;

432 
px
 = 
pIn1
 + 
cou¡
;

433 
py
 = 
pSrc2
;

437 
blkC¡
--;

443 
blkC¡
 = 
blockSize2
 % 0x4u;

445 
blkC¡
 > 0u)

448 
sum
 = 0.0f;

451 
k
 = 
§cBLí
 >> 2u;

455 
k
 > 0u)

458 
sum
 +*
px
++ * *
py
--;

459 
sum
 +*
px
++ * *
py
--;

460 
sum
 +*
px
++ * *
py
--;

461 
sum
 +*
px
++ * *
py
--;

464 
k
--;

469 
k
 = 
§cBLí
 % 0x4u;

471 
k
 > 0u)

474 
sum
 +*
px
++ * *
py
--;

477 
k
--;

481 *
pOut
++ = 
sum
;

484 
cou¡
++;

487 
px
 = 
pIn1
 + 
cou¡
;

488 
py
 = 
pSrc2
;

491 
blkC¡
--;

498 
blkC¡
 = 
blockSize2
;

500 
blkC¡
 > 0u)

503 
sum
 = 0.0f;

506 
k
 = 
§cBLí
;

508 
k
 > 0u)

511 
sum
 +*
px
++ * *
py
--;

514 
k
--;

518 *
pOut
++ = 
sum
;

521 
cou¡
++;

524 
px
 = 
pIn1
 + 
cou¡
;

525 
py
 = 
pSrc2
;

528 
blkC¡
--;

548 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

549 
px
 = 
pSrc1
;

552 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

553 
py
 = 
pSrc2
;

559 
blockSize3
 > 0u)

562 
sum
 = 0.0f;

565 
k
 = 
blockSize3
 >> 2u;

569 
k
 > 0u)

572 
sum
 +*
px
++ * *
py
--;

575 
sum
 +*
px
++ * *
py
--;

578 
sum
 +*
px
++ * *
py
--;

581 
sum
 +*
px
++ * *
py
--;

584 
k
--;

589 
k
 = 
blockSize3
 % 0x4u;

591 
k
 > 0u)

595 
sum
 +*
px
++ * *
py
--;

598 
k
--;

602 *
pOut
++ = 
sum
;

605 
px
 = ++
pSrc1
;

606 
py
 = 
pSrc2
;

609 
blockSize3
--;

616 
Êﬂt32_t
 *
pIn1
 = 
pSrcA
;

617 
Êﬂt32_t
 *
pIn2
 = 
pSrcB
;

618 
Êﬂt32_t
 
sum
;

619 
uöt32_t
 
i
, 
j
;

622 
i
 = 0u; i < ((
§cALí
 + 
§cBLí
) - 1u); i++)

625 
sum
 = 0.0f;

628 
j
 = 0u; j <
i
; j++)

631 if((((
i
 - 
j
Ë< 
§cBLí
Ë&& (j < 
§cALí
)))

634 
sum
 +
pIn1
[
j
] * 
pIn2
[
i
 - j];

638 
pD°
[
i
] = 
sum
;

643 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_fast_opt_q15.c

41 
	~"¨m_m©h.h
"

83 
	$¨m_c⁄v_Á°_›t_q15
(

84 
q15_t
 * 
pSrcA
,

85 
uöt32_t
 
§cALí
,

86 
q15_t
 * 
pSrcB
,

87 
uöt32_t
 
§cBLí
,

88 
q15_t
 * 
pD°
,

89 
q15_t
 * 
pS¸©ch1
,

90 
q15_t
 * 
pS¸©ch2
)

92 
q31_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

93 
q31_t
 
x1
, 
x2
, 
x3
;

94 
q31_t
 
y1
, 
y2
;

95 
q15_t
 *
pOut
 = 
pD°
;

96 
q15_t
 *
pS¸1
 = 
pS¸©ch1
;

97 
q15_t
 *
pS¸2
 = 
pS¸©ch2
;

98 
q15_t
 *
pIn1
;

99 
q15_t
 *
pIn2
;

100 
q15_t
 *
px
;

101 
q15_t
 *
py
;

102 
uöt32_t
 
j
, 
k
, 
blkC¡
;

103 
uöt32_t
 
èpC¡
;

104 #ifde‡
UNALIGNED_SUPPORT_DISABLE


106 
q15_t
 
a
, 
b
;

113 if(
§cALí
 >
§cBLí
)

116 
pIn1
 = 
pSrcA
;

119 
pIn2
 = 
pSrcB
;

124 
pIn1
 = 
pSrcB
;

127 
pIn2
 = 
pSrcA
;

130 
j
 = 
§cBLí
;

131 
§cBLí
 = 
§cALí
;

132 
§cALí
 = 
j
;

136 
pS¸2
 = 
pS¸©ch2
 + 
§cBLí
 - 1;

139 
px
 = 
pIn2
;

142 
k
 = 
§cBLí
 >> 2u;

148 
k
 > 0u)

151 *
pS¸2
-- = *
px
++;

152 *
pS¸2
-- = *
px
++;

153 *
pS¸2
-- = *
px
++;

154 *
pS¸2
-- = *
px
++;

157 
k
--;

162 
k
 = 
§cBLí
 % 0x4u;

164 
k
 > 0u)

167 *
pS¸2
-- = *
px
++;

170 
k
--;

174 
pS¸1
 = 
pS¸©ch1
;

178 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

181 
pS¸1
 +(
§cBLí
 - 1u);

185 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


188 
	`¨m_c›y_q15
(
pIn1
, 
pS¸1
, 
§cALí
);

191 
pS¸1
 +
§cALí
;

196 
k
 = 
§cALí
 >> 2u;

200 
k
 > 0u)

203 *
pS¸1
++ = *
pIn1
++;

204 *
pS¸1
++ = *
pIn1
++;

205 *
pS¸1
++ = *
pIn1
++;

206 *
pS¸1
++ = *
pIn1
++;

209 
k
--;

214 
k
 = 
§cALí
 % 0x4u;

216 
k
 > 0u)

219 *
pS¸1
++ = *
pIn1
++;

222 
k
--;

228 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


231 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

234 
pS¸1
 +(
§cBLí
 - 1u);

239 
k
 = (
§cBLí
 - 1u) >> 2u;

243 
k
 > 0u)

246 *
pS¸1
++ = 0;

247 *
pS¸1
++ = 0;

248 *
pS¸1
++ = 0;

249 *
pS¸1
++ = 0;

252 
k
--;

257 
k
 = (
§cBLí
 - 1u) % 0x4u;

259 
k
 > 0u)

262 *
pS¸1
++ = 0;

265 
k
--;

271 
py
 = 
pS¸©ch2
;

275 
pIn2
 = 
py
;

281 
blkC¡
 = (
§cALí
 + 
§cBLí
 - 1u) >> 2;

283 
blkC¡
 > 0)

286 
pS¸1
 = 
pS¸©ch1
;

289 
acc0
 = 0;

290 
acc1
 = 0;

291 
acc2
 = 0;

292 
acc3
 = 0;

295 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

298 
x2
 = *
	`__SIMD32
(
pS¸1
)++;

300 
èpC¡
 = (
§cBLí
) >> 2u;

302 
èpC¡
 > 0u)

305 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


308 
y1
 = 
	`_SIMD32_OFFSET
(
pIn2
);

309 
y2
 = 
	`_SIMD32_OFFSET
(
pIn2
 + 2u);

312 
acc0
 = 
	`__SMLAD
(
x1
, 
y1
,ácc0);

313 
acc2
 = 
	`__SMLAD
(
x2
, 
y1
,ácc2);

316 #i‚de‡
ARM_MATH_BIG_ENDIAN


317 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

319 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

323 
acc1
 = 
	`__SMLADX
(
x3
, 
y1
,ácc1);

326 
x1
 = 
	`_SIMD32_OFFSET
(
pS¸1
);

329 
acc0
 = 
	`__SMLAD
(
x2
, 
y2
,ácc0);

330 
acc2
 = 
	`__SMLAD
(
x1
, 
y2
,ácc2);

333 #i‚de‡
ARM_MATH_BIG_ENDIAN


334 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

336 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

339 
acc3
 = 
	`__SMLADX
(
x3
, 
y1
,ácc3);

340 
acc1
 = 
	`__SMLADX
(
x3
, 
y2
,ácc1);

342 
x2
 = 
	`_SIMD32_OFFSET
(
pS¸1
 + 2u);

344 #i‚de‡
ARM_MATH_BIG_ENDIAN


345 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

347 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

350 
acc3
 = 
	`__SMLADX
(
x3
, 
y2
,ácc3);

355 
a
 = *
pIn2
;

356 
b
 = *(
pIn2
 + 1);

358 #i‚de‡
ARM_MATH_BIG_ENDIAN


359 
y1
 = 
	`__PKHBT
(
a
, 
b
, 16);

361 
y1
 = 
	`__PKHBT
(
b
, 
a
, 16);

364 
a
 = *(
pIn2
 + 2);

365 
b
 = *(
pIn2
 + 3);

366 #i‚de‡
ARM_MATH_BIG_ENDIAN


367 
y2
 = 
	`__PKHBT
(
a
, 
b
, 16);

369 
y2
 = 
	`__PKHBT
(
b
, 
a
, 16);

372 
acc0
 = 
	`__SMLAD
(
x1
, 
y1
,ácc0);

374 
acc2
 = 
	`__SMLAD
(
x2
, 
y1
,ácc2);

376 #i‚de‡
ARM_MATH_BIG_ENDIAN


377 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

379 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

382 
acc1
 = 
	`__SMLADX
(
x3
, 
y1
,ácc1);

384 
a
 = *
pS¸1
;

385 
b
 = *(
pS¸1
 + 1);

387 #i‚de‡
ARM_MATH_BIG_ENDIAN


388 
x1
 = 
	`__PKHBT
(
a
, 
b
, 16);

390 
x1
 = 
	`__PKHBT
(
b
, 
a
, 16);

393 
acc0
 = 
	`__SMLAD
(
x2
, 
y2
,ácc0);

395 
acc2
 = 
	`__SMLAD
(
x1
, 
y2
,ácc2);

397 #i‚de‡
ARM_MATH_BIG_ENDIAN


398 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

400 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

403 
acc3
 = 
	`__SMLADX
(
x3
, 
y1
,ácc3);

405 
acc1
 = 
	`__SMLADX
(
x3
, 
y2
,ácc1);

407 
a
 = *(
pS¸1
 + 2);

408 
b
 = *(
pS¸1
 + 3);

410 #i‚de‡
ARM_MATH_BIG_ENDIAN


411 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

413 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

416 #i‚de‡
ARM_MATH_BIG_ENDIAN


417 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

419 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

422 
acc3
 = 
	`__SMLADX
(
x3
, 
y2
,ácc3);

427 
pIn2
 += 4u;

428 
pS¸1
 += 4u;

432 
èpC¡
--;

436 
pS¸1
 -= 4u;

439 
èpC¡
 = (
§cBLí
) & 3u;

441 
èpC¡
 > 0u)

445 
acc0
 +(*
pS¸1
++ * *
pIn2
);

446 
acc1
 +(*
pS¸1
++ * *
pIn2
);

447 
acc2
 +(*
pS¸1
++ * *
pIn2
);

448 
acc3
 +(*
pS¸1
++ * *
pIn2
++);

450 
pS¸1
 -= 3u;

453 
èpC¡
--;

456 
blkC¡
--;

461 #i‚de‡
ARM_MATH_BIG_ENDIAN


463 *
	`__SIMD32
(
pOut
)++ =

464 
	`__PKHBT
(
	`__SSAT
((
acc0
 >> 15), 16), __SSAT((
acc1
 >> 15), 16), 16);

466 *
	`__SIMD32
(
pOut
)++ =

467 
	`__PKHBT
(
	`__SSAT
((
acc2
 >> 15), 16), __SSAT((
acc3
 >> 15), 16), 16);

472 *
	`__SIMD32
(
pOut
)++ =

473 
	`__PKHBT
(
	`__SSAT
((
acc1
 >> 15), 16), __SSAT((
acc0
 >> 15), 16), 16);

475 *
	`__SIMD32
(
pOut
)++ =

476 
	`__PKHBT
(
	`__SSAT
((
acc3
 >> 15), 16), __SSAT((
acc2
 >> 15), 16), 16);

483 
pIn2
 = 
py
;

485 
pS¸©ch1
 += 4u;

490 
blkC¡
 = (
§cALí
 + 
§cBLí
 - 1u) & 0x3;

493 
blkC¡
 > 0)

496 
pS¸1
 = 
pS¸©ch1
;

499 
acc0
 = 0;

501 
èpC¡
 = (
§cBLí
) >> 1u;

503 
èpC¡
 > 0u)

506 
acc0
 +(*
pS¸1
++ * *
pIn2
++);

507 
acc0
 +(*
pS¸1
++ * *
pIn2
++);

510 
èpC¡
--;

513 
èpC¡
 = (
§cBLí
) & 1u;

516 
èpC¡
 > 0u)

520 
acc0
 +(*
pS¸1
++ * *
pIn2
++);

523 
èpC¡
--;

526 
blkC¡
--;

530 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

533 
pIn2
 = 
py
;

535 
pS¸©ch1
 += 1u;

539 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_fast_q15.c

41 
	~"¨m_m©h.h
"

77 
	$¨m_c⁄v_Á°_q15
(

78 
q15_t
 * 
pSrcA
,

79 
uöt32_t
 
§cALí
,

80 
q15_t
 * 
pSrcB
,

81 
uöt32_t
 
§cBLí
,

82 
q15_t
 * 
pD°
)

84 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


85 
q15_t
 *
pIn1
;

86 
q15_t
 *
pIn2
;

87 
q15_t
 *
pOut
 = 
pD°
;

88 
q31_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

89 
q15_t
 *
px
;

90 
q15_t
 *
py
;

91 
q15_t
 *
pSrc1
, *
pSrc2
;

92 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

93 
uöt32_t
 
blockSize1
, 
blockSize2
, 
blockSize3
, 
j
, 
k
, 
cou¡
, 
blkC¡
;

98 if(
§cALí
 >
§cBLí
)

101 
pIn1
 = 
pSrcA
;

104 
pIn2
 = 
pSrcB
;

109 
pIn1
 = 
pSrcB
;

112 
pIn2
 = 
pSrcA
;

115 
j
 = 
§cBLí
;

116 
§cBLí
 = 
§cALí
;

117 
§cALí
 = 
j
;

131 
blockSize1
 = 
§cBLí
 - 1u;

132 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

133 
blockSize3
 = 
blockSize1
;

147 
cou¡
 = 1u;

150 
px
 = 
pIn1
;

153 
py
 = 
pIn2
;

165 (
cou¡
 < 4uË&& (
blockSize1
 > 0u))

168 
sum
 = 0;

172 
k
 = 
cou¡
;

174 
k
 > 0u)

177 
sum
 = 
	`__SMLAD
(*
px
++, *
py
--, sum);

180 
k
--;

184 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

187 
py
 = 
pIn2
 + 
cou¡
;

188 
px
 = 
pIn1
;

191 
cou¡
++;

194 
blockSize1
--;

201 
py
 =Öy - 1;

203 
blockSize1
 > 0u)

206 
sum
 = 0;

209 
k
 = 
cou¡
 >> 2u;

213 
k
 > 0u)

217 
sum
 = 
	`__SMLADX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

219 
sum
 = 
	`__SMLADX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

222 
k
--;

227 
py
 =Öy + 1u;

231 
k
 = 
cou¡
 % 0x4u;

233 
k
 > 0u)

236 
sum
 = 
	`__SMLAD
(*
px
++, *
py
--, sum);

239 
k
--;

243 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

246 
py
 = 
pIn2
 + (
cou¡
 - 1u);

247 
px
 = 
pIn1
;

250 
cou¡
++;

253 
blockSize1
--;

267 
px
 = 
pIn1
;

270 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

271 
py
 = 
pSrc2
;

274 
cou¡
 = 0u;

284 if(
§cBLí
 >= 4u)

287 
blkC¡
 = 
blockSize2
 >> 2u;

289 
blkC¡
 > 0u)

291 
py
 =Öy - 1u;

294 
acc0
 = 0;

295 
acc1
 = 0;

296 
acc2
 = 0;

297 
acc3
 = 0;

301 
x0
 = *
	`__SIMD32
(
px
);

303 
x1
 = 
	`_SIMD32_OFFSET
(
px
+1);

304 
px
+= 2u;

308 
k
 = 
§cBLí
 >> 2u;

316 
c0
 = *
	`__SIMD32
(
py
)--;

319 
acc0
 = 
	`__SMLADX
(
x0
, 
c0
,ácc0);

322 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

325 
x2
 = *
	`__SIMD32
(
px
);

328 
x3
 = 
	`_SIMD32_OFFSET
(
px
+1);

331 
acc2
 = 
	`__SMLADX
(
x2
, 
c0
,ácc2);

334 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

337 
c0
 = *
	`__SIMD32
(
py
)--;

340 
acc0
 = 
	`__SMLADX
(
x2
, 
c0
,ácc0);

343 
acc1
 = 
	`__SMLADX
(
x3
, 
c0
,ácc1);

346 
x0
 = 
	`_SIMD32_OFFSET
(
px
+2);

349 
x1
 = 
	`_SIMD32_OFFSET
(
px
+3);

350 
px
 += 4u;

353 
acc2
 = 
	`__SMLADX
(
x0
, 
c0
,ácc2);

356 
acc3
 = 
	`__SMLADX
(
x1
, 
c0
,ácc3);

358 } --
k
);

365 
k
 = 
§cBLí
 % 0x4u;

367 if(
k
 == 1u)

370 
c0
 = *(
py
+1);

372 #ifde‡ 
ARM_MATH_BIG_ENDIAN


374 
c0
 = c0 << 16u;

378 
c0
 = c0 & 0x0000FFFF;

383 
x3
 = *
	`__SIMD32
(
px
);

384 
px
++;

387 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

388 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

389 
acc2
 = 
	`__SMLADX
(
x1
, 
c0
,ácc2);

390 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

393 if(
k
 == 2u)

396 
c0
 = 
	`_SIMD32_OFFSET
(
py
);

399 
x3
 = *
	`__SIMD32
(
px
);

402 
x2
 = 
	`_SIMD32_OFFSET
(
px
+1);

403 
px
 += 2u;

406 
acc0
 = 
	`__SMLADX
(
x0
, 
c0
,ácc0);

407 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

408 
acc2
 = 
	`__SMLADX
(
x3
, 
c0
,ácc2);

409 
acc3
 = 
	`__SMLADX
(
x2
, 
c0
,ácc3);

412 if(
k
 == 3u)

415 
c0
 = 
	`_SIMD32_OFFSET
(
py
);

418 
x3
 = *
	`__SIMD32
(
px
);

421 
x2
 = 
	`_SIMD32_OFFSET
(
px
+1);

424 
acc0
 = 
	`__SMLADX
(
x0
, 
c0
,ácc0);

425 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

426 
acc2
 = 
	`__SMLADX
(
x3
, 
c0
,ácc2);

427 
acc3
 = 
	`__SMLADX
(
x2
, 
c0
,ácc3);

430 
c0
 = *(
py
-1);

431 #ifde‡ 
ARM_MATH_BIG_ENDIAN


433 
c0
 = c0 << 16u;

436 
c0
 = c0 & 0x0000FFFF;

440 
x3
 = 
	`_SIMD32_OFFSET
(
px
+2);

441 
px
 += 3u;

444 
acc0
 = 
	`__SMLADX
(
x1
, 
c0
,ácc0);

445 
acc1
 = 
	`__SMLAD
(
x2
, 
c0
,ácc1);

446 
acc2
 = 
	`__SMLADX
(
x2
, 
c0
,ácc2);

447 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

451 #i‚de‡
ARM_MATH_BIG_ENDIAN


453 *
	`__SIMD32
(
pOut
)++ = 
	`__PKHBT
((
acc0
 >> 15), (
acc1
 >> 15), 16);

454 *
	`__SIMD32
(
pOut
)++ = 
	`__PKHBT
((
acc2
 >> 15), (
acc3
 >> 15), 16);

458 *
	`__SIMD32
(
pOut
)++ = 
	`__PKHBT
((
acc1
 >> 15), (
acc0
 >> 15), 16);

459 *
	`__SIMD32
(
pOut
)++ = 
	`__PKHBT
((
acc3
 >> 15), (
acc2
 >> 15), 16);

464 
cou¡
 += 4u;

467 
px
 = 
pIn1
 + 
cou¡
;

468 
py
 = 
pSrc2
;

471 
blkC¡
--;

476 
blkC¡
 = 
blockSize2
 % 0x4u;

478 
blkC¡
 > 0u)

481 
sum
 = 0;

484 
k
 = 
§cBLí
 >> 2u;

488 
k
 > 0u)

491 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

492 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

493 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

494 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

497 
k
--;

502 
k
 = 
§cBLí
 % 0x4u;

504 
k
 > 0u)

507 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

510 
k
--;

514 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

517 
cou¡
++;

520 
px
 = 
pIn1
 + 
cou¡
;

521 
py
 = 
pSrc2
;

524 
blkC¡
--;

531 
blkC¡
 = 
blockSize2
;

533 
blkC¡
 > 0u)

536 
sum
 = 0;

539 
k
 = 
§cBLí
;

541 
k
 > 0u)

544 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

547 
k
--;

551 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

554 
cou¡
++;

557 
px
 = 
pIn1
 + 
cou¡
;

558 
py
 = 
pSrc2
;

561 
blkC¡
--;

581 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

582 
px
 = 
pSrc1
;

585 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

586 
pIn2
 = 
pSrc2
 - 1u;

587 
py
 = 
pIn2
;

598 
j
 = 
blockSize3
 >> 2u;

600 (
j
 > 0uË&& (
blockSize3
 > 0u))

603 
sum
 = 0;

606 
k
 = 
blockSize3
 >> 2u;

610 
k
 > 0u)

614 
sum
 = 
	`__SMLADX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

617 
sum
 = 
	`__SMLADX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

620 
k
--;

625 
py
 =Öy + 1u;

629 
k
 = 
blockSize3
 % 0x4u;

631 
k
 > 0u)

634 
sum
 = 
	`__SMLAD
(*
px
++, *
py
--, sum);

637 
k
--;

641 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

644 
px
 = ++
pSrc1
;

645 
py
 = 
pIn2
;

648 
blockSize3
--;

650 
j
--;

656 
py
 =Öy + 1u;

658 
blockSize3
 > 0u)

661 
sum
 = 0;

664 
k
 = 
blockSize3
;

666 
k
 > 0u)

670 
sum
 = 
	`__SMLAD
(*
px
++, *
py
--, sum);

673 
k
--;

677 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

680 
px
 = ++
pSrc1
;

681 
py
 = 
pSrc2
;

684 
blockSize3
--;

688 
q15_t
 *
pIn1
;

689 
q15_t
 *
pIn2
;

690 
q15_t
 *
pOut
 = 
pD°
;

691 
q31_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

692 
q15_t
 *
px
;

693 
q15_t
 *
py
;

694 
q15_t
 *
pSrc1
, *
pSrc2
;

695 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

696 
uöt32_t
 
blockSize1
, 
blockSize2
, 
blockSize3
, 
j
, 
k
, 
cou¡
, 
blkC¡
;

697 
q15_t
 
a
, 
b
;

702 if(
§cALí
 >
§cBLí
)

705 
pIn1
 = 
pSrcA
;

708 
pIn2
 = 
pSrcB
;

713 
pIn1
 = 
pSrcB
;

716 
pIn2
 = 
pSrcA
;

719 
j
 = 
§cBLí
;

720 
§cBLí
 = 
§cALí
;

721 
§cALí
 = 
j
;

735 
blockSize1
 = 
§cBLí
 - 1u;

736 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

737 
blockSize3
 = 
blockSize1
;

751 
cou¡
 = 1u;

754 
px
 = 
pIn1
;

757 
py
 = 
pIn2
;

769 (
cou¡
 < 4uË&& (
blockSize1
 > 0u))

772 
sum
 = 0;

776 
k
 = 
cou¡
;

778 
k
 > 0u)

781 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

784 
k
--;

788 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

791 
py
 = 
pIn2
 + 
cou¡
;

792 
px
 = 
pIn1
;

795 
cou¡
++;

798 
blockSize1
--;

805 
py
 =Öy - 1;

807 
blockSize1
 > 0u)

810 
sum
 = 0;

813 
k
 = 
cou¡
 >> 2u;

817 
py
++;

819 
k
 > 0u)

822 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

823 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

824 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

825 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

828 
k
--;

833 
k
 = 
cou¡
 % 0x4u;

835 
k
 > 0u)

838 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

841 
k
--;

845 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

848 
py
 = 
pIn2
 + (
cou¡
 - 1u);

849 
px
 = 
pIn1
;

852 
cou¡
++;

855 
blockSize1
--;

869 
px
 = 
pIn1
;

872 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

873 
py
 = 
pSrc2
;

876 
cou¡
 = 0u;

886 if(
§cBLí
 >= 4u)

889 
blkC¡
 = 
blockSize2
 >> 2u;

891 
blkC¡
 > 0u)

893 
py
 =Öy - 1u;

896 
acc0
 = 0;

897 
acc1
 = 0;

898 
acc2
 = 0;

899 
acc3
 = 0;

902 
a
 = *
px
++;

903 
b
 = *
px
++;

905 #i‚de‡
ARM_MATH_BIG_ENDIAN


907 
x0
 = 
	`__PKHBT
(
a
, 
b
, 16);

908 
a
 = *
px
;

909 
x1
 = 
	`__PKHBT
(
b
, 
a
, 16);

913 
x0
 = 
	`__PKHBT
(
b
, 
a
, 16);

914 
a
 = *
px
;

915 
x1
 = 
	`__PKHBT
(
a
, 
b
, 16);

920 
k
 = 
§cBLí
 >> 2u;

928 
a
 = *
py
;

929 
b
 = *(
py
+1);

930 
py
 -= 2;

932 #i‚de‡
ARM_MATH_BIG_ENDIAN


934 
c0
 = 
	`__PKHBT
(
a
, 
b
, 16);

938 
c0
 = 
	`__PKHBT
(
b
, 
a
, 16);;

943 
acc0
 = 
	`__SMLADX
(
x0
, 
c0
,ácc0);

946 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

948 
a
 = *
px
;

949 
b
 = *(
px
 + 1);

951 #i‚de‡
ARM_MATH_BIG_ENDIAN


953 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

954 
a
 = *(
px
 + 2);

955 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);

959 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

960 
a
 = *(
px
 + 2);

961 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

966 
acc2
 = 
	`__SMLADX
(
x2
, 
c0
,ácc2);

969 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

972 
a
 = *
py
;

973 
b
 = *(
py
+1);

974 
py
 -= 2;

976 #i‚de‡
ARM_MATH_BIG_ENDIAN


978 
c0
 = 
	`__PKHBT
(
a
, 
b
, 16);

982 
c0
 = 
	`__PKHBT
(
b
, 
a
, 16);;

987 
acc0
 = 
	`__SMLADX
(
x2
, 
c0
,ácc0);

990 
acc1
 = 
	`__SMLADX
(
x3
, 
c0
,ácc1);

993 
a
 = *(
px
 + 2);

994 
b
 = *(
px
 + 3);

996 #i‚de‡
ARM_MATH_BIG_ENDIAN


998 
x0
 = 
	`__PKHBT
(
a
, 
b
, 16);

999 
a
 = *(
px
 + 4);

1000 
x1
 = 
	`__PKHBT
(
b
, 
a
, 16);

1004 
x0
 = 
	`__PKHBT
(
b
, 
a
, 16);

1005 
a
 = *(
px
 + 4);

1006 
x1
 = 
	`__PKHBT
(
a
, 
b
, 16);

1010 
px
 += 4u;

1013 
acc2
 = 
	`__SMLADX
(
x0
, 
c0
,ácc2);

1016 
acc3
 = 
	`__SMLADX
(
x1
, 
c0
,ácc3);

1018 } --
k
);

1025 
k
 = 
§cBLí
 % 0x4u;

1027 if(
k
 == 1u)

1030 
c0
 = *(
py
+1);

1032 #ifde‡ 
ARM_MATH_BIG_ENDIAN


1034 
c0
 = c0 << 16u;

1038 
c0
 = c0 & 0x0000FFFF;

1043 
a
 = *
px
;

1044 
b
 = *(
px
+1);

1045 
px
++;

1047 #i‚de‡
ARM_MATH_BIG_ENDIAN


1049 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

1053 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);;

1059 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

1060 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

1061 
acc2
 = 
	`__SMLADX
(
x1
, 
c0
,ácc2);

1062 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

1065 if(
k
 == 2u)

1068 
a
 = *
py
;

1069 
b
 = *(
py
+1);

1071 #i‚de‡
ARM_MATH_BIG_ENDIAN


1073 
c0
 = 
	`__PKHBT
(
a
, 
b
, 16);

1077 
c0
 = 
	`__PKHBT
(
b
, 
a
, 16);;

1082 
a
 = *
px
;

1083 
b
 = *(
px
 + 1);

1085 #i‚de‡
ARM_MATH_BIG_ENDIAN


1087 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

1088 
a
 = *(
px
 + 2);

1089 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

1093 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);

1094 
a
 = *(
px
 + 2);

1095 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

1098 
px
 += 2u;

1101 
acc0
 = 
	`__SMLADX
(
x0
, 
c0
,ácc0);

1102 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

1103 
acc2
 = 
	`__SMLADX
(
x3
, 
c0
,ácc2);

1104 
acc3
 = 
	`__SMLADX
(
x2
, 
c0
,ácc3);

1107 if(
k
 == 3u)

1110 
a
 = *
py
;

1111 
b
 = *(
py
+1);

1113 #i‚de‡
ARM_MATH_BIG_ENDIAN


1115 
c0
 = 
	`__PKHBT
(
a
, 
b
, 16);

1119 
c0
 = 
	`__PKHBT
(
b
, 
a
, 16);;

1124 
a
 = *
px
;

1125 
b
 = *(
px
 + 1);

1127 #i‚de‡
ARM_MATH_BIG_ENDIAN


1129 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

1130 
a
 = *(
px
 + 2);

1131 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

1135 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);

1136 
a
 = *(
px
 + 2);

1137 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

1142 
acc0
 = 
	`__SMLADX
(
x0
, 
c0
,ácc0);

1143 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

1144 
acc2
 = 
	`__SMLADX
(
x3
, 
c0
,ácc2);

1145 
acc3
 = 
	`__SMLADX
(
x2
, 
c0
,ácc3);

1148 
c0
 = *(
py
-1);

1149 #ifde‡ 
ARM_MATH_BIG_ENDIAN


1151 
c0
 = c0 << 16u;

1154 
c0
 = c0 & 0x0000FFFF;

1158 
a
 = *(
px
+2);

1159 
b
 = *(
px
+3);

1161 #i‚de‡
ARM_MATH_BIG_ENDIAN


1163 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

1167 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);;

1171 
px
 += 3u;

1174 
acc0
 = 
	`__SMLADX
(
x1
, 
c0
,ácc0);

1175 
acc1
 = 
	`__SMLAD
(
x2
, 
c0
,ácc1);

1176 
acc2
 = 
	`__SMLADX
(
x2
, 
c0
,ácc2);

1177 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

1181 *
pOut
++ = (
q15_t
)(
acc0
 >> 15);

1182 *
pOut
++ = (
q15_t
)(
acc1
 >> 15);

1183 *
pOut
++ = (
q15_t
)(
acc2
 >> 15);

1184 *
pOut
++ = (
q15_t
)(
acc3
 >> 15);

1187 
cou¡
 += 4u;

1190 
px
 = 
pIn1
 + 
cou¡
;

1191 
py
 = 
pSrc2
;

1194 
blkC¡
--;

1199 
blkC¡
 = 
blockSize2
 % 0x4u;

1201 
blkC¡
 > 0u)

1204 
sum
 = 0;

1207 
k
 = 
§cBLí
 >> 2u;

1211 
k
 > 0u)

1214 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1215 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1216 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1217 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1220 
k
--;

1225 
k
 = 
§cBLí
 % 0x4u;

1227 
k
 > 0u)

1230 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1233 
k
--;

1237 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

1240 
cou¡
++;

1243 
px
 = 
pIn1
 + 
cou¡
;

1244 
py
 = 
pSrc2
;

1247 
blkC¡
--;

1254 
blkC¡
 = 
blockSize2
;

1256 
blkC¡
 > 0u)

1259 
sum
 = 0;

1262 
k
 = 
§cBLí
;

1264 
k
 > 0u)

1267 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1270 
k
--;

1274 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

1277 
cou¡
++;

1280 
px
 = 
pIn1
 + 
cou¡
;

1281 
py
 = 
pSrc2
;

1284 
blkC¡
--;

1304 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

1305 
px
 = 
pSrc1
;

1308 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

1309 
pIn2
 = 
pSrc2
 - 1u;

1310 
py
 = 
pIn2
;

1321 
j
 = 
blockSize3
 >> 2u;

1323 (
j
 > 0uË&& (
blockSize3
 > 0u))

1326 
sum
 = 0;

1329 
k
 = 
blockSize3
 >> 2u;

1333 
py
++;

1335 
k
 > 0u)

1337 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1338 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1339 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1340 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1342 
k
--;

1347 
k
 = 
blockSize3
 % 0x4u;

1349 
k
 > 0u)

1352 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1355 
k
--;

1359 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

1362 
px
 = ++
pSrc1
;

1363 
py
 = 
pIn2
;

1366 
blockSize3
--;

1368 
j
--;

1374 
py
 =Öy + 1u;

1376 
blockSize3
 > 0u)

1379 
sum
 = 0;

1382 
k
 = 
blockSize3
;

1384 
k
 > 0u)

1388 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1391 
k
--;

1395 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

1398 
px
 = ++
pSrc1
;

1399 
py
 = 
pSrc2
;

1402 
blockSize3
--;

1406 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_fast_q31.c

41 
	~"¨m_m©h.h
"

79 
	$¨m_c⁄v_Á°_q31
(

80 
q31_t
 * 
pSrcA
,

81 
uöt32_t
 
§cALí
,

82 
q31_t
 * 
pSrcB
,

83 
uöt32_t
 
§cBLí
,

84 
q31_t
 * 
pD°
)

86 
q31_t
 *
pIn1
;

87 
q31_t
 *
pIn2
;

88 
q31_t
 *
pOut
 = 
pD°
;

89 
q31_t
 *
px
;

90 
q31_t
 *
py
;

91 
q31_t
 *
pSrc1
, *
pSrc2
;

92 
q31_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

93 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

94 
uöt32_t
 
j
, 
k
, 
cou¡
, 
blkC¡
, 
blockSize1
, 
blockSize2
, 
blockSize3
;

99 if(
§cALí
 >
§cBLí
)

102 
pIn1
 = 
pSrcA
;

105 
pIn2
 = 
pSrcB
;

110 
pIn1
 = 
pSrcB
;

113 
pIn2
 = 
pSrcA
;

116 
j
 = 
§cBLí
;

117 
§cBLí
 = 
§cALí
;

118 
§cALí
 = 
j
;

132 
blockSize1
 = 
§cBLí
 - 1u;

133 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

134 
blockSize3
 = 
blockSize1
;

148 
cou¡
 = 1u;

151 
px
 = 
pIn1
;

154 
py
 = 
pIn2
;

162 
blockSize1
 > 0u)

165 
sum
 = 0;

168 
k
 = 
cou¡
 >> 2u;

172 
k
 > 0u)

175 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

176 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

179 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

180 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

183 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

184 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

187 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

188 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

191 
k
--;

196 
k
 = 
cou¡
 % 0x4u;

198 
k
 > 0u)

201 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

202 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

205 
k
--;

209 *
pOut
++ = 
sum
 << 1;

212 
py
 = 
pIn2
 + 
cou¡
;

213 
px
 = 
pIn1
;

216 
cou¡
++;

219 
blockSize1
--;

233 
px
 = 
pIn1
;

236 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

237 
py
 = 
pSrc2
;

240 
cou¡
 = 0u;

249 if(
§cBLí
 >= 4u)

252 
blkC¡
 = 
blockSize2
 >> 2u;

254 
blkC¡
 > 0u)

257 
acc0
 = 0;

258 
acc1
 = 0;

259 
acc2
 = 0;

260 
acc3
 = 0;

263 
x0
 = *(
px
++);

264 
x1
 = *(
px
++);

265 
x2
 = *(
px
++);

268 
k
 = 
§cBLí
 >> 2u;

275 
c0
 = *(
py
--);

278 
x3
 = *(
px
++);

282 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

285 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

288 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

291 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

294 
c0
 = *(
py
--);

297 
x0
 = *(
px
++);

301 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

303 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

305 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

307 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

310 
c0
 = *(
py
--);

313 
x1
 = *(
px
++);

317 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

319 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

321 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

323 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

326 
c0
 = *(
py
--);

329 
x2
 = *(
px
++);

333 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

335 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

337 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

339 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

342 } --
k
);

346 
k
 = 
§cBLí
 % 0x4u;

348 
k
 > 0u)

351 
c0
 = *(
py
--);

354 
x3
 = *(
px
++);

358 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

360 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

362 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

364 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

367 
x0
 = 
x1
;

368 
x1
 = 
x2
;

369 
x2
 = 
x3
;

372 
k
--;

376 *
pOut
++ = (
q31_t
Ë(
acc0
 << 1);

377 *
pOut
++ = (
q31_t
Ë(
acc1
 << 1);

378 *
pOut
++ = (
q31_t
Ë(
acc2
 << 1);

379 *
pOut
++ = (
q31_t
Ë(
acc3
 << 1);

382 
cou¡
 += 4u;

385 
px
 = 
pIn1
 + 
cou¡
;

386 
py
 = 
pSrc2
;

389 
blkC¡
--;

394 
blkC¡
 = 
blockSize2
 % 0x4u;

396 
blkC¡
 > 0u)

399 
sum
 = 0;

402 
k
 = 
§cBLí
 >> 2u;

406 
k
 > 0u)

409 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

410 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

411 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

412 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

413 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

414 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

415 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

416 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

419 
k
--;

424 
k
 = 
§cBLí
 % 0x4u;

426 
k
 > 0u)

429 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

430 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

433 
k
--;

437 *
pOut
++ = 
sum
 << 1;

440 
cou¡
++;

443 
px
 = 
pIn1
 + 
cou¡
;

444 
py
 = 
pSrc2
;

447 
blkC¡
--;

454 
blkC¡
 = 
blockSize2
;

456 
blkC¡
 > 0u)

459 
sum
 = 0;

462 
k
 = 
§cBLí
;

464 
k
 > 0u)

467 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

468 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

471 
k
--;

475 *
pOut
++ = 
sum
 << 1;

478 
cou¡
++;

481 
px
 = 
pIn1
 + 
cou¡
;

482 
py
 = 
pSrc2
;

485 
blkC¡
--;

505 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

506 
px
 = 
pSrc1
;

509 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

510 
py
 = 
pSrc2
;

516 
blockSize3
 > 0u)

519 
sum
 = 0;

522 
k
 = 
blockSize3
 >> 2u;

526 
k
 > 0u)

529 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

530 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

533 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

534 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

537 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

538 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

541 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

542 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

545 
k
--;

550 
k
 = 
blockSize3
 % 0x4u;

552 
k
 > 0u)

555 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

556 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

559 
k
--;

563 *
pOut
++ = 
sum
 << 1;

566 
px
 = ++
pSrc1
;

567 
py
 = 
pSrc2
;

570 
blockSize3
--;

573 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_opt_q15.c

41 
	~"¨m_m©h.h
"

85 
	$¨m_c⁄v_›t_q15
(

86 
q15_t
 * 
pSrcA
,

87 
uöt32_t
 
§cALí
,

88 
q15_t
 * 
pSrcB
,

89 
uöt32_t
 
§cBLí
,

90 
q15_t
 * 
pD°
,

91 
q15_t
 * 
pS¸©ch1
,

92 
q15_t
 * 
pS¸©ch2
)

94 
q63_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

95 
q31_t
 
x1
, 
x2
, 
x3
;

96 
q31_t
 
y1
, 
y2
;

97 
q15_t
 *
pOut
 = 
pD°
;

98 
q15_t
 *
pS¸1
 = 
pS¸©ch1
;

99 
q15_t
 *
pS¸2
 = 
pS¸©ch2
;

100 
q15_t
 *
pIn1
;

101 
q15_t
 *
pIn2
;

102 
q15_t
 *
px
;

103 
q15_t
 *
py
;

104 
uöt32_t
 
j
, 
k
, 
blkC¡
;

105 
uöt32_t
 
èpC¡
;

106 #ifde‡
UNALIGNED_SUPPORT_DISABLE


108 
q15_t
 
a
, 
b
;

115 if(
§cALí
 >
§cBLí
)

118 
pIn1
 = 
pSrcA
;

121 
pIn2
 = 
pSrcB
;

127 
pIn1
 = 
pSrcB
;

130 
pIn2
 = 
pSrcA
;

133 
j
 = 
§cBLí
;

134 
§cBLí
 = 
§cALí
;

135 
§cALí
 = 
j
;

139 
pS¸2
 = 
pS¸©ch2
 + 
§cBLí
 - 1;

142 
px
 = 
pIn2
;

145 
k
 = 
§cBLí
 >> 2u;

150 
k
 > 0u)

153 *
pS¸2
-- = *
px
++;

154 *
pS¸2
-- = *
px
++;

155 *
pS¸2
-- = *
px
++;

156 *
pS¸2
-- = *
px
++;

159 
k
--;

164 
k
 = 
§cBLí
 % 0x4u;

166 
k
 > 0u)

169 *
pS¸2
-- = *
px
++;

172 
k
--;

176 
pS¸1
 = 
pS¸©ch1
;

180 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

183 
pS¸1
 +(
§cBLí
 - 1u);

187 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


190 
	`¨m_c›y_q15
(
pIn1
, 
pS¸1
, 
§cALí
);

193 
pS¸1
 +
§cALí
;

198 
k
 = 
§cALí
 >> 2u;

202 
k
 > 0u)

205 *
pS¸1
++ = *
pIn1
++;

206 *
pS¸1
++ = *
pIn1
++;

207 *
pS¸1
++ = *
pIn1
++;

208 *
pS¸1
++ = *
pIn1
++;

211 
k
--;

216 
k
 = 
§cALí
 % 0x4u;

218 
k
 > 0u)

221 *
pS¸1
++ = *
pIn1
++;

224 
k
--;

230 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


233 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

236 
pS¸1
 +(
§cBLí
 - 1u);

241 
k
 = (
§cBLí
 - 1u) >> 2u;

245 
k
 > 0u)

248 *
pS¸1
++ = 0;

249 *
pS¸1
++ = 0;

250 *
pS¸1
++ = 0;

251 *
pS¸1
++ = 0;

254 
k
--;

259 
k
 = (
§cBLí
 - 1u) % 0x4u;

261 
k
 > 0u)

264 *
pS¸1
++ = 0;

267 
k
--;

273 
py
 = 
pS¸©ch2
;

277 
pIn2
 = 
py
;

283 
blkC¡
 = (
§cALí
 + 
§cBLí
 - 1u) >> 2;

285 
blkC¡
 > 0)

288 
pS¸1
 = 
pS¸©ch1
;

291 
acc0
 = 0;

292 
acc1
 = 0;

293 
acc2
 = 0;

294 
acc3
 = 0;

297 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

300 
x2
 = *
	`__SIMD32
(
pS¸1
)++;

302 
èpC¡
 = (
§cBLí
) >> 2u;

304 
èpC¡
 > 0u)

307 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


310 
y1
 = 
	`_SIMD32_OFFSET
(
pIn2
);

311 
y2
 = 
	`_SIMD32_OFFSET
(
pIn2
 + 2u);

314 
acc0
 = 
	`__SMLALD
(
x1
, 
y1
,ácc0);

315 
acc2
 = 
	`__SMLALD
(
x2
, 
y1
,ácc2);

318 #i‚de‡
ARM_MATH_BIG_ENDIAN


319 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

321 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

325 
acc1
 = 
	`__SMLALDX
(
x3
, 
y1
,ácc1);

328 
x1
 = 
	`_SIMD32_OFFSET
(
pS¸1
);

331 
acc0
 = 
	`__SMLALD
(
x2
, 
y2
,ácc0);

332 
acc2
 = 
	`__SMLALD
(
x1
, 
y2
,ácc2);

335 #i‚de‡
ARM_MATH_BIG_ENDIAN


336 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

338 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

341 
acc3
 = 
	`__SMLALDX
(
x3
, 
y1
,ácc3);

342 
acc1
 = 
	`__SMLALDX
(
x3
, 
y2
,ácc1);

344 
x2
 = 
	`_SIMD32_OFFSET
(
pS¸1
 + 2u);

346 #i‚de‡
ARM_MATH_BIG_ENDIAN


347 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

349 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

352 
acc3
 = 
	`__SMLALDX
(
x3
, 
y2
,ácc3);

357 
a
 = *
pIn2
;

358 
b
 = *(
pIn2
 + 1);

360 #i‚de‡
ARM_MATH_BIG_ENDIAN


361 
y1
 = 
	`__PKHBT
(
a
, 
b
, 16);

363 
y1
 = 
	`__PKHBT
(
b
, 
a
, 16);

366 
a
 = *(
pIn2
 + 2);

367 
b
 = *(
pIn2
 + 3);

368 #i‚de‡
ARM_MATH_BIG_ENDIAN


369 
y2
 = 
	`__PKHBT
(
a
, 
b
, 16);

371 
y2
 = 
	`__PKHBT
(
b
, 
a
, 16);

374 
acc0
 = 
	`__SMLALD
(
x1
, 
y1
,ácc0);

376 
acc2
 = 
	`__SMLALD
(
x2
, 
y1
,ácc2);

378 #i‚de‡
ARM_MATH_BIG_ENDIAN


379 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

381 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

384 
acc1
 = 
	`__SMLALDX
(
x3
, 
y1
,ácc1);

386 
a
 = *
pS¸1
;

387 
b
 = *(
pS¸1
 + 1);

389 #i‚de‡
ARM_MATH_BIG_ENDIAN


390 
x1
 = 
	`__PKHBT
(
a
, 
b
, 16);

392 
x1
 = 
	`__PKHBT
(
b
, 
a
, 16);

395 
acc0
 = 
	`__SMLALD
(
x2
, 
y2
,ácc0);

397 
acc2
 = 
	`__SMLALD
(
x1
, 
y2
,ácc2);

399 #i‚de‡
ARM_MATH_BIG_ENDIAN


400 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

402 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

405 
acc3
 = 
	`__SMLALDX
(
x3
, 
y1
,ácc3);

407 
acc1
 = 
	`__SMLALDX
(
x3
, 
y2
,ácc1);

409 
a
 = *(
pS¸1
 + 2);

410 
b
 = *(
pS¸1
 + 3);

412 #i‚de‡
ARM_MATH_BIG_ENDIAN


413 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

415 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

418 #i‚de‡
ARM_MATH_BIG_ENDIAN


419 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

421 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

424 
acc3
 = 
	`__SMLALDX
(
x3
, 
y2
,ácc3);

428 
pIn2
 += 4u;

429 
pS¸1
 += 4u;

433 
èpC¡
--;

437 
pS¸1
 -= 4u;

440 
èpC¡
 = (
§cBLí
) & 3u;

442 
èpC¡
 > 0u)

446 
acc0
 +(*
pS¸1
++ * *
pIn2
);

447 
acc1
 +(*
pS¸1
++ * *
pIn2
);

448 
acc2
 +(*
pS¸1
++ * *
pIn2
);

449 
acc3
 +(*
pS¸1
++ * *
pIn2
++);

451 
pS¸1
 -= 3u;

454 
èpC¡
--;

457 
blkC¡
--;

462 #i‚de‡
ARM_MATH_BIG_ENDIAN


464 *
	`__SIMD32
(
pOut
)++ =

465 
	`__PKHBT
(
	`__SSAT
((
acc0
 >> 15), 16), __SSAT((
acc1
 >> 15), 16), 16);

467 *
	`__SIMD32
(
pOut
)++ =

468 
	`__PKHBT
(
	`__SSAT
((
acc2
 >> 15), 16), __SSAT((
acc3
 >> 15), 16), 16);

472 *
	`__SIMD32
(
pOut
)++ =

473 
	`__PKHBT
(
	`__SSAT
((
acc1
 >> 15), 16), __SSAT((
acc0
 >> 15), 16), 16);

475 *
	`__SIMD32
(
pOut
)++ =

476 
	`__PKHBT
(
	`__SSAT
((
acc3
 >> 15), 16), __SSAT((
acc2
 >> 15), 16), 16);

482 
pIn2
 = 
py
;

484 
pS¸©ch1
 += 4u;

489 
blkC¡
 = (
§cALí
 + 
§cBLí
 - 1u) & 0x3;

492 
blkC¡
 > 0)

495 
pS¸1
 = 
pS¸©ch1
;

498 
acc0
 = 0;

500 
èpC¡
 = (
§cBLí
) >> 1u;

502 
èpC¡
 > 0u)

506 
acc0
 +(*
pS¸1
++ * *
pIn2
++);

507 
acc0
 +(*
pS¸1
++ * *
pIn2
++);

510 
èpC¡
--;

513 
èpC¡
 = (
§cBLí
) & 1u;

516 
èpC¡
 > 0u)

520 
acc0
 +(*
pS¸1
++ * *
pIn2
++);

523 
èpC¡
--;

526 
blkC¡
--;

530 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

534 
pIn2
 = 
py
;

536 
pS¸©ch1
 += 1u;

540 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_opt_q7.c

41 
	~"¨m_m©h.h
"

79 
	$¨m_c⁄v_›t_q7
(

80 
q7_t
 * 
pSrcA
,

81 
uöt32_t
 
§cALí
,

82 
q7_t
 * 
pSrcB
,

83 
uöt32_t
 
§cBLí
,

84 
q7_t
 * 
pD°
,

85 
q15_t
 * 
pS¸©ch1
,

86 
q15_t
 * 
pS¸©ch2
)

89 
q15_t
 *
pS¸2
, *
pS¸1
;

90 
q15_t
 
x4
;

91 
q7_t
 *
pIn1
, *
pIn2
;

92 
uöt32_t
 
j
, 
k
, 
blkC¡
, 
èpC¡
;

93 
q7_t
 *
px
;

94 
q15_t
 *
py
;

95 
q31_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

96 
q31_t
 
x1
, 
x2
, 
x3
, 
y1
;

97 
q7_t
 *
pOut
 = 
pD°
;

98 
q7_t
 
out0
, 
out1
, 
out2
, 
out3
;

103 if(
§cALí
 >
§cBLí
)

106 
pIn1
 = 
pSrcA
;

109 
pIn2
 = 
pSrcB
;

114 
pIn1
 = 
pSrcB
;

117 
pIn2
 = 
pSrcA
;

120 
j
 = 
§cBLí
;

121 
§cBLí
 = 
§cALí
;

122 
§cALí
 = 
j
;

126 
pS¸2
 = 
pS¸©ch2
;

129 
px
 = 
pIn2
 + 
§cBLí
 - 1;

132 
k
 = 
§cBLí
 >> 2u;

136 
k
 > 0u)

139 
x4
 = (
q15_t
Ë* 
px
--;

140 *
pS¸2
++ = 
x4
;

141 
x4
 = (
q15_t
Ë* 
px
--;

142 *
pS¸2
++ = 
x4
;

143 
x4
 = (
q15_t
Ë* 
px
--;

144 *
pS¸2
++ = 
x4
;

145 
x4
 = (
q15_t
Ë* 
px
--;

146 *
pS¸2
++ = 
x4
;

149 
k
--;

154 
k
 = 
§cBLí
 % 0x4u;

156 
k
 > 0u)

159 
x4
 = (
q15_t
Ë* 
px
--;

160 *
pS¸2
++ = 
x4
;

163 
k
--;

167 
pS¸1
 = 
pS¸©ch1
;

170 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

173 
pS¸1
 +(
§cBLí
 - 1u);

177 
k
 = 
§cALí
 >> 2u;

181 
k
 > 0u)

184 
x4
 = (
q15_t
Ë* 
pIn1
++;

185 *
pS¸1
++ = 
x4
;

186 
x4
 = (
q15_t
Ë* 
pIn1
++;

187 *
pS¸1
++ = 
x4
;

188 
x4
 = (
q15_t
Ë* 
pIn1
++;

189 *
pS¸1
++ = 
x4
;

190 
x4
 = (
q15_t
Ë* 
pIn1
++;

191 *
pS¸1
++ = 
x4
;

194 
k
--;

199 
k
 = 
§cALí
 % 0x4u;

201 
k
 > 0u)

204 
x4
 = (
q15_t
Ë* 
pIn1
++;

205 *
pS¸1
++ = 
x4
;

208 
k
--;

211 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


214 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

217 
pS¸1
 +(
§cBLí
 - 1u);

222 
k
 = (
§cBLí
 - 1u) >> 2u;

226 
k
 > 0u)

229 *
pS¸1
++ = 0;

230 *
pS¸1
++ = 0;

231 *
pS¸1
++ = 0;

232 *
pS¸1
++ = 0;

235 
k
--;

240 
k
 = (
§cBLí
 - 1u) % 0x4u;

242 
k
 > 0u)

245 *
pS¸1
++ = 0;

248 
k
--;

254 
py
 = 
pS¸©ch2
;

257 
pIn2
 = (
q7_t
 *Ë
py
;

259 
pS¸2
 = 
py
;

262 
blkC¡
 = (
§cALí
 + 
§cBLí
 - 1u) >> 2;

264 
blkC¡
 > 0)

267 
pS¸1
 = 
pS¸©ch1
;

270 
acc0
 = 0;

271 
acc1
 = 0;

272 
acc2
 = 0;

273 
acc3
 = 0;

276 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

279 
x2
 = *
	`__SIMD32
(
pS¸1
)++;

281 
èpC¡
 = (
§cBLí
) >> 2u;

283 
èpC¡
 > 0u)

287 
y1
 = 
	`_SIMD32_OFFSET
(
pS¸2
);

290 
acc0
 = 
	`__SMLAD
(
x1
, 
y1
,ácc0);

291 
acc2
 = 
	`__SMLAD
(
x2
, 
y1
,ácc2);

294 #i‚de‡
ARM_MATH_BIG_ENDIAN


295 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

297 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

301 
acc1
 = 
	`__SMLADX
(
x3
, 
y1
,ácc1);

304 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

307 #i‚de‡
ARM_MATH_BIG_ENDIAN


308 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

310 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

313 
acc3
 = 
	`__SMLADX
(
x3
, 
y1
,ácc3);

316 
y1
 = 
	`_SIMD32_OFFSET
(
pS¸2
 + 2u);

318 
acc0
 = 
	`__SMLAD
(
x2
, 
y1
,ácc0);

320 
acc2
 = 
	`__SMLAD
(
x1
, 
y1
,ácc2);

322 
acc1
 = 
	`__SMLADX
(
x3
, 
y1
,ácc1);

324 
x2
 = *
	`__SIMD32
(
pS¸1
)++;

326 #i‚de‡
ARM_MATH_BIG_ENDIAN


327 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

329 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

332 
acc3
 = 
	`__SMLADX
(
x3
, 
y1
,ácc3);

334 
pS¸2
 += 4u;

338 
èpC¡
--;

344 
pS¸1
 -= 4u;

348 
èpC¡
 = (
§cBLí
) & 3u;

350 
èpC¡
 > 0u)

354 
acc0
 +(*
pS¸1
++ * *
pS¸2
);

355 
acc1
 +(*
pS¸1
++ * *
pS¸2
);

356 
acc2
 +(*
pS¸1
++ * *
pS¸2
);

357 
acc3
 +(*
pS¸1
++ * *
pS¸2
++);

359 
pS¸1
 -= 3u;

362 
èpC¡
--;

365 
blkC¡
--;

368 
out0
 = (
q7_t
Ë(
	`__SSAT
(
acc0
 >> 7u, 8));

369 
out1
 = (
q7_t
Ë(
	`__SSAT
(
acc1
 >> 7u, 8));

370 
out2
 = (
q7_t
Ë(
	`__SSAT
(
acc2
 >> 7u, 8));

371 
out3
 = (
q7_t
Ë(
	`__SSAT
(
acc3
 >> 7u, 8));

373 *
	`__SIMD32
(
pOut
)++ = 
	`__PACKq7
(
out0
, 
out1
, 
out2
, 
out3
);

376 
pS¸2
 = 
py
;

378 
pS¸©ch1
 += 4u;

383 
blkC¡
 = (
§cALí
 + 
§cBLí
 - 1u) & 0x3;

386 
blkC¡
 > 0)

389 
pS¸1
 = 
pS¸©ch1
;

392 
acc0
 = 0;

394 
èpC¡
 = (
§cBLí
) >> 1u;

396 
èpC¡
 > 0u)

398 
acc0
 +(*
pS¸1
++ * *
pS¸2
++);

399 
acc0
 +(*
pS¸1
++ * *
pS¸2
++);

402 
èpC¡
--;

405 
èpC¡
 = (
§cBLí
) & 1u;

408 
èpC¡
 > 0u)

412 
acc0
 +(*
pS¸1
++ * *
pS¸2
++);

415 
èpC¡
--;

418 
blkC¡
--;

421 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc0
 >> 7u, 8));

424 
pS¸2
 = 
py
;

426 
pS¸©ch1
 += 1u;

430 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_f32.c

41 
	~"¨m_m©h.h
"

95 
¨m_°©us
 
	$¨m_c⁄v_∑πül_f32
(

96 
Êﬂt32_t
 * 
pSrcA
,

97 
uöt32_t
 
§cALí
,

98 
Êﬂt32_t
 * 
pSrcB
,

99 
uöt32_t
 
§cBLí
,

100 
Êﬂt32_t
 * 
pD°
,

101 
uöt32_t
 
fú°Index
,

102 
uöt32_t
 
numPoöts
)

106 #i‚de‡
ARM_MATH_CM0_FAMILY


110 
Êﬂt32_t
 *
pIn1
 = 
pSrcA
;

111 
Êﬂt32_t
 *
pIn2
 = 
pSrcB
;

112 
Êﬂt32_t
 *
pOut
 = 
pD°
;

113 
Êﬂt32_t
 *
px
;

114 
Êﬂt32_t
 *
py
;

115 
Êﬂt32_t
 *
pSrc1
, *
pSrc2
;

116 
Êﬂt32_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

117 
Êﬂt32_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

118 
uöt32_t
 
j
, 
k
, 
cou¡
 = 0u, 
blkC¡
, 
check
;

119 
öt32_t
 
blockSize1
, 
blockSize2
, 
blockSize3
;

120 
¨m_°©us
 
°©us
;

124 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

127 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

135 if(
§cALí
 >
§cBLí
)

138 
pIn1
 = 
pSrcA
;

141 
pIn2
 = 
pSrcB
;

146 
pIn1
 = 
pSrcB
;

149 
pIn2
 = 
pSrcA
;

152 
j
 = 
§cBLí
;

153 
§cBLí
 = 
§cALí
;

154 
§cALí
 = 
j
;

159 
check
 = 
fú°Index
 + 
numPoöts
;

160 
blockSize3
 = ((
öt32_t
)
check
 > (öt32_t)
§cALí
) ? (int32_t)check - (int32_t)srcALen : 0;

161 
blockSize3
 = ((
öt32_t
)
fú°Index
 > (öt32_t)
§cALí
 - 1) ? blockSize3 - (int32_t)firstIndex + (int32_t)srcALen : blockSize3;

162 
blockSize1
 = ((
öt32_t
Ë
§cBLí
 - 1Ë- (öt32_tË
fú°Index
;

163 
blockSize1
 = (blockSize1 > 0Ë? ((
check
 > (
§cBLí
 - 1u)) ? blockSize1 :

164 (
öt32_t
Ë
numPoöts
) : 0;

165 
blockSize2
 = ((
öt32_t
Ë
check
 - 
blockSize3
) -

166 (
blockSize1
 + (
öt32_t
Ë
fú°Index
);

167 
blockSize2
 = (blockSize2 > 0) ? blockSize2 : 0;

180 
pOut
 = 
pD°
 + 
fú°Index
;

196 
cou¡
 = 1u + 
fú°Index
;

199 
px
 = 
pIn1
;

202 
pSrc1
 = 
pIn2
 + 
fú°Index
;

203 
py
 = 
pSrc1
;

210 
blockSize1
 > 0)

213 
sum
 = 0.0f;

216 
k
 = 
cou¡
 >> 2u;

220 
k
 > 0u)

223 
sum
 +*
px
++ * *
py
--;

226 
sum
 +*
px
++ * *
py
--;

229 
sum
 +*
px
++ * *
py
--;

232 
sum
 +*
px
++ * *
py
--;

235 
k
--;

240 
k
 = 
cou¡
 % 0x4u;

242 
k
 > 0u)

245 
sum
 +*
px
++ * *
py
--;

248 
k
--;

252 *
pOut
++ = 
sum
;

255 
py
 = ++
pSrc1
;

256 
px
 = 
pIn1
;

259 
cou¡
++;

262 
blockSize1
--;

276 if((
öt32_t
)
fú°Index
 - (öt32_t)
§cBLí
 + 1 > 0)

278 
px
 = 
pIn1
 + 
fú°Index
 - 
§cBLí
 + 1;

282 
px
 = 
pIn1
;

286 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

287 
py
 = 
pSrc2
;

290 
cou¡
 = 0u;

299 if(
§cBLí
 >= 4u)

302 
blkC¡
 = ((
uöt32_t
Ë
blockSize2
 >> 2u);

304 
blkC¡
 > 0u)

307 
acc0
 = 0.0f;

308 
acc1
 = 0.0f;

309 
acc2
 = 0.0f;

310 
acc3
 = 0.0f;

313 
x0
 = *(
px
++);

314 
x1
 = *(
px
++);

315 
x2
 = *(
px
++);

318 
k
 = 
§cBLí
 >> 2u;

325 
c0
 = *(
py
--);

328 
x3
 = *(
px
++);

332 
acc0
 +
x0
 * 
c0
;

335 
acc1
 +
x1
 * 
c0
;

338 
acc2
 +
x2
 * 
c0
;

341 
acc3
 +
x3
 * 
c0
;

344 
c0
 = *(
py
--);

347 
x0
 = *(
px
++);

351 
acc0
 +
x1
 * 
c0
;

353 
acc1
 +
x2
 * 
c0
;

355 
acc2
 +
x3
 * 
c0
;

357 
acc3
 +
x0
 * 
c0
;

360 
c0
 = *(
py
--);

363 
x1
 = *(
px
++);

367 
acc0
 +
x2
 * 
c0
;

369 
acc1
 +
x3
 * 
c0
;

371 
acc2
 +
x0
 * 
c0
;

373 
acc3
 +
x1
 * 
c0
;

376 
c0
 = *(
py
--);

379 
x2
 = *(
px
++);

383 
acc0
 +
x3
 * 
c0
;

385 
acc1
 +
x0
 * 
c0
;

387 
acc2
 +
x1
 * 
c0
;

389 
acc3
 +
x2
 * 
c0
;

392 } --
k
);

396 
k
 = 
§cBLí
 % 0x4u;

398 
k
 > 0u)

401 
c0
 = *(
py
--);

404 
x3
 = *(
px
++);

408 
acc0
 +
x0
 * 
c0
;

410 
acc1
 +
x1
 * 
c0
;

412 
acc2
 +
x2
 * 
c0
;

414 
acc3
 +
x3
 * 
c0
;

417 
x0
 = 
x1
;

418 
x1
 = 
x2
;

419 
x2
 = 
x3
;

422 
k
--;

426 *
pOut
++ = 
acc0
;

427 *
pOut
++ = 
acc1
;

428 *
pOut
++ = 
acc2
;

429 *
pOut
++ = 
acc3
;

432 
cou¡
 += 4u;

435 
px
 = 
pIn1
 + 
cou¡
;

436 
py
 = 
pSrc2
;

439 
blkC¡
--;

444 
blkC¡
 = (
uöt32_t
Ë
blockSize2
 % 0x4u;

446 
blkC¡
 > 0u)

449 
sum
 = 0.0f;

452 
k
 = 
§cBLí
 >> 2u;

456 
k
 > 0u)

459 
sum
 +*
px
++ * *
py
--;

460 
sum
 +*
px
++ * *
py
--;

461 
sum
 +*
px
++ * *
py
--;

462 
sum
 +*
px
++ * *
py
--;

465 
k
--;

470 
k
 = 
§cBLí
 % 0x4u;

472 
k
 > 0u)

475 
sum
 +*
px
++ * *
py
--;

478 
k
--;

482 *
pOut
++ = 
sum
;

485 
cou¡
++;

488 
px
 = 
pIn1
 + 
cou¡
;

489 
py
 = 
pSrc2
;

492 
blkC¡
--;

499 
blkC¡
 = (
uöt32_t
Ë
blockSize2
;

501 
blkC¡
 > 0u)

504 
sum
 = 0.0f;

507 
k
 = 
§cBLí
;

509 
k
 > 0u)

512 
sum
 +*
px
++ * *
py
--;

515 
k
--;

519 *
pOut
++ = 
sum
;

522 
cou¡
++;

525 
px
 = 
pIn1
 + 
cou¡
;

526 
py
 = 
pSrc2
;

529 
blkC¡
--;

547 
cou¡
 = 
§cBLí
 - 1u;

550 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

551 
px
 = 
pSrc1
;

554 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

555 
py
 = 
pSrc2
;

557 
blockSize3
 > 0)

560 
sum
 = 0.0f;

563 
k
 = 
cou¡
 >> 2u;

567 
k
 > 0u)

570 
sum
 +*
px
++ * *
py
--;

573 
sum
 +*
px
++ * *
py
--;

576 
sum
 +*
px
++ * *
py
--;

579 
sum
 +*
px
++ * *
py
--;

582 
k
--;

587 
k
 = 
cou¡
 % 0x4u;

589 
k
 > 0u)

593 
sum
 +*
px
++ * *
py
--;

596 
k
--;

600 *
pOut
++ = 
sum
;

603 
px
 = ++
pSrc1
;

604 
py
 = 
pSrc2
;

607 
cou¡
--;

610 
blockSize3
--;

615 
°©us
 = 
ARM_MATH_SUCCESS
;

619  (
°©us
);

625 
Êﬂt32_t
 *
pIn1
 = 
pSrcA
;

626 
Êﬂt32_t
 *
pIn2
 = 
pSrcB
;

627 
Êﬂt32_t
 
sum
;

628 
uöt32_t
 
i
, 
j
;

629 
¨m_°©us
 
°©us
;

632 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

635 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

640 
i
 = 
fú°Index
; i <(fú°Index + 
numPoöts
 - 1); i++)

643 
sum
 = 0.0f;

646 
j
 = 0u; j <
i
; j++)

649 if((((
i
 - 
j
Ë< 
§cBLí
Ë&& (j < 
§cALí
)))

652 
sum
 +
pIn1
[
j
] * 
pIn2
[
i
 - j];

656 
pD°
[
i
] = 
sum
;

659 
°©us
 = 
ARM_MATH_SUCCESS
;

661  (
°©us
);

665 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_fast_opt_q15.c

41 
	~"¨m_m©h.h
"

73 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


75 
¨m_°©us
 
	$¨m_c⁄v_∑πül_Á°_›t_q15
(

76 
q15_t
 * 
pSrcA
,

77 
uöt32_t
 
§cALí
,

78 
q15_t
 * 
pSrcB
,

79 
uöt32_t
 
§cBLí
,

80 
q15_t
 * 
pD°
,

81 
uöt32_t
 
fú°Index
,

82 
uöt32_t
 
numPoöts
,

83 
q15_t
 * 
pS¸©ch1
,

84 
q15_t
 * 
pS¸©ch2
)

87 
q15_t
 *
pOut
 = 
pD°
;

88 
q15_t
 *
pS¸1
 = 
pS¸©ch1
;

89 
q15_t
 *
pS¸2
 = 
pS¸©ch2
;

90 
q31_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

91 
q31_t
 
x1
, 
x2
, 
x3
;

92 
q31_t
 
y1
, 
y2
;

93 
q15_t
 *
pIn1
;

94 
q15_t
 *
pIn2
;

95 
q15_t
 *
px
;

96 
q15_t
 *
py
;

97 
uöt32_t
 
j
, 
k
, 
blkC¡
;

98 
¨m_°©us
 
°©us
;

100 
uöt32_t
 
èpC¡
;

103 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

106 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

114 if(
§cALí
 >
§cBLí
)

117 
pIn1
 = 
pSrcA
;

120 
pIn2
 = 
pSrcB
;

125 
pIn1
 = 
pSrcB
;

128 
pIn2
 = 
pSrcA
;

131 
j
 = 
§cBLí
;

132 
§cBLí
 = 
§cALí
;

133 
§cALí
 = 
j
;

137 
py
 = 
pS¸©ch2
;

140 
pS¸2
 = 
pS¸©ch2
 + 
§cBLí
 - 1;

143 
px
 = 
pIn2
;

146 
k
 = 
§cBLí
 >> 2u;

152 
k
 > 0u)

155 *
pS¸2
-- = *
px
++;

156 *
pS¸2
-- = *
px
++;

157 *
pS¸2
-- = *
px
++;

158 *
pS¸2
-- = *
px
++;

161 
k
--;

166 
k
 = 
§cBLí
 % 0x4u;

168 
k
 > 0u)

171 *
pS¸2
-- = *
px
++;

174 
k
--;

178 
pS¸1
 = 
pS¸©ch1
;

182 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

185 
pS¸1
 +(
§cBLí
 - 1u);

190 
	`¨m_c›y_q15
(
pIn1
, 
pS¸1
, 
§cALí
);

193 
pS¸1
 +
§cALí
;

196 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

199 
pS¸1
 +(
§cBLí
 - 1u);

202 
pIn2
 = 
py
;

204 
pS¸©ch1
 +
fú°Index
;

206 
pOut
 = 
pD°
 + 
fú°Index
;

212 
blkC¡
 = (
numPoöts
) >> 2;

214 
blkC¡
 > 0)

217 
pS¸1
 = 
pS¸©ch1
;

220 
acc0
 = 0;

221 
acc1
 = 0;

222 
acc2
 = 0;

223 
acc3
 = 0;

226 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

229 
x2
 = *
	`__SIMD32
(
pS¸1
)++;

231 
èpC¡
 = (
§cBLí
) >> 2u;

233 
èpC¡
 > 0u)

237 
y1
 = 
	`_SIMD32_OFFSET
(
pIn2
);

238 
y2
 = 
	`_SIMD32_OFFSET
(
pIn2
 + 2u);

241 
acc0
 = 
	`__SMLAD
(
x1
, 
y1
,ácc0);

242 
acc2
 = 
	`__SMLAD
(
x2
, 
y1
,ácc2);

245 #i‚de‡
ARM_MATH_BIG_ENDIAN


246 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

248 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

252 
acc1
 = 
	`__SMLADX
(
x3
, 
y1
,ácc1);

255 
x1
 = 
	`_SIMD32_OFFSET
(
pS¸1
);

258 
acc0
 = 
	`__SMLAD
(
x2
, 
y2
,ácc0);

260 
acc2
 = 
	`__SMLAD
(
x1
, 
y2
,ácc2);

263 #i‚de‡
ARM_MATH_BIG_ENDIAN


264 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

266 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

269 
acc3
 = 
	`__SMLADX
(
x3
, 
y1
,ácc3);

270 
acc1
 = 
	`__SMLADX
(
x3
, 
y2
,ácc1);

272 
x2
 = 
	`_SIMD32_OFFSET
(
pS¸1
 + 2u);

274 #i‚de‡
ARM_MATH_BIG_ENDIAN


275 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

277 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

280 
acc3
 = 
	`__SMLADX
(
x3
, 
y2
,ácc3);

283 
pIn2
 += 4u;

284 
pS¸1
 += 4u;

288 
èpC¡
--;

292 
pS¸1
 -= 4u;

295 
èpC¡
 = (
§cBLí
) & 3u;

297 
èpC¡
 > 0u)

301 
acc0
 +(*
pS¸1
++ * *
pIn2
);

302 
acc1
 +(*
pS¸1
++ * *
pIn2
);

303 
acc2
 +(*
pS¸1
++ * *
pIn2
);

304 
acc3
 +(*
pS¸1
++ * *
pIn2
++);

306 
pS¸1
 -= 3u;

309 
èpC¡
--;

312 
blkC¡
--;

317 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


319 *
	`__SIMD32
(
pOut
)++ =

320 
	`__PKHBT
(
	`__SSAT
((
acc0
 >> 15), 16), __SSAT((
acc1
 >> 15), 16), 16);

321 *
	`__SIMD32
(
pOut
)++ =

322 
	`__PKHBT
(
	`__SSAT
((
acc2
 >> 15), 16), __SSAT((
acc3
 >> 15), 16), 16);

326 *
	`__SIMD32
(
pOut
)++ =

327 
	`__PKHBT
(
	`__SSAT
((
acc1
 >> 15), 16), __SSAT((
acc0
 >> 15), 16), 16);

328 *
	`__SIMD32
(
pOut
)++ =

329 
	`__PKHBT
(
	`__SSAT
((
acc3
 >> 15), 16), __SSAT((
acc2
 >> 15), 16), 16);

334 
pIn2
 = 
py
;

336 
pS¸©ch1
 += 4u;

341 
blkC¡
 = 
numPoöts
 & 0x3;

344 
blkC¡
 > 0)

347 
pS¸1
 = 
pS¸©ch1
;

350 
acc0
 = 0;

352 
èpC¡
 = (
§cBLí
) >> 1u;

354 
èpC¡
 > 0u)

358 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

361 
y1
 = *
	`__SIMD32
(
pIn2
)++;

363 
acc0
 = 
	`__SMLAD
(
x1
, 
y1
,ácc0);

366 
èpC¡
--;

369 
èpC¡
 = (
§cBLí
) & 1u;

372 
èpC¡
 > 0u)

376 
acc0
 +(*
pS¸1
++ * *
pIn2
++);

379 
èpC¡
--;

382 
blkC¡
--;

386 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

389 
pIn2
 = 
py
;

391 
pS¸©ch1
 += 1u;

395 
°©us
 = 
ARM_MATH_SUCCESS
;

398  (
°©us
);

399 
	}
}

403 
¨m_°©us
 
	$¨m_c⁄v_∑πül_Á°_›t_q15
(

404 
q15_t
 * 
pSrcA
,

405 
uöt32_t
 
§cALí
,

406 
q15_t
 * 
pSrcB
,

407 
uöt32_t
 
§cBLí
,

408 
q15_t
 * 
pD°
,

409 
uöt32_t
 
fú°Index
,

410 
uöt32_t
 
numPoöts
,

411 
q15_t
 * 
pS¸©ch1
,

412 
q15_t
 * 
pS¸©ch2
)

415 
q15_t
 *
pOut
 = 
pD°
;

416 
q15_t
 *
pS¸1
 = 
pS¸©ch1
;

417 
q15_t
 *
pS¸2
 = 
pS¸©ch2
;

418 
q31_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

419 
q15_t
 *
pIn1
;

420 
q15_t
 *
pIn2
;

421 
q15_t
 *
px
;

422 
q15_t
 *
py
;

423 
uöt32_t
 
j
, 
k
, 
blkC¡
;

424 
¨m_°©us
 
°©us
;

425 
uöt32_t
 
èpC¡
;

426 
q15_t
 
x10
, 
x11
, 
x20
, 
x21
;

427 
q15_t
 
y10
, 
y11
;

431 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

434 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

442 if(
§cALí
 >
§cBLí
)

445 
pIn1
 = 
pSrcA
;

448 
pIn2
 = 
pSrcB
;

453 
pIn1
 = 
pSrcB
;

456 
pIn2
 = 
pSrcA
;

459 
j
 = 
§cBLí
;

460 
§cBLí
 = 
§cALí
;

461 
§cALí
 = 
j
;

465 
py
 = 
pS¸©ch2
;

468 
pS¸2
 = 
pS¸©ch2
 + 
§cBLí
 - 1;

471 
px
 = 
pIn2
;

474 
k
 = 
§cBLí
 >> 2u;

478 
k
 > 0u)

481 *
pS¸2
-- = *
px
++;

482 *
pS¸2
-- = *
px
++;

483 *
pS¸2
-- = *
px
++;

484 *
pS¸2
-- = *
px
++;

487 
k
--;

492 
k
 = 
§cBLí
 % 0x4u;

494 
k
 > 0u)

497 *
pS¸2
-- = *
px
++;

500 
k
--;

504 
pS¸1
 = 
pS¸©ch1
;

507 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

510 
pS¸1
 +(
§cBLí
 - 1u);

516 
k
 = 
§cALí
 >> 2u;

520 
k
 > 0u)

523 *
pS¸1
++ = *
pIn1
++;

524 *
pS¸1
++ = *
pIn1
++;

525 *
pS¸1
++ = *
pIn1
++;

526 *
pS¸1
++ = *
pIn1
++;

529 
k
--;

534 
k
 = 
§cALí
 % 0x4u;

536 
k
 > 0u)

539 *
pS¸1
++ = *
pIn1
++;

542 
k
--;

547 
k
 = (
§cBLí
 - 1u) >> 2u;

551 
k
 > 0u)

554 *
pS¸1
++ = 0;

555 *
pS¸1
++ = 0;

556 *
pS¸1
++ = 0;

557 *
pS¸1
++ = 0;

560 
k
--;

565 
k
 = (
§cBLí
 - 1u) % 0x4u;

567 
k
 > 0u)

570 *
pS¸1
++ = 0;

573 
k
--;

578 
pIn2
 = 
py
;

580 
pS¸©ch1
 +
fú°Index
;

582 
pOut
 = 
pD°
 + 
fú°Index
;

585 
blkC¡
 = (
numPoöts
) >> 2;

587 
blkC¡
 > 0)

590 
pS¸1
 = 
pS¸©ch1
;

593 
acc0
 = 0;

594 
acc1
 = 0;

595 
acc2
 = 0;

596 
acc3
 = 0;

599 
x10
 = *
pS¸1
++;

600 
x11
 = *
pS¸1
++;

603 
x20
 = *
pS¸1
++;

604 
x21
 = *
pS¸1
++;

606 
èpC¡
 = (
§cBLí
) >> 2u;

608 
èpC¡
 > 0u)

612 
y10
 = *
pIn2
;

613 
y11
 = *(
pIn2
 + 1u);

616 
acc0
 +(
q31_t
Ë
x10
 *
y10
;

617 
acc0
 +(
q31_t
Ë
x11
 *
y11
;

618 
acc2
 +(
q31_t
Ë
x20
 *
y10
;

619 
acc2
 +(
q31_t
Ë
x21
 *
y11
;

622 
acc1
 +(
q31_t
Ë
x11
 *
y10
;

623 
acc1
 +(
q31_t
Ë
x20
 *
y11
;

626 
x10
 = *
pS¸1
;

627 
x11
 = *(
pS¸1
 + 1u);

630 
acc3
 +(
q31_t
Ë
x21
 *
y10
;

631 
acc3
 +(
q31_t
Ë
x10
 *
y11
;

634 
y10
 = *(
pIn2
 + 2u);

635 
y11
 = *(
pIn2
 + 3u);

638 
acc0
 +(
q31_t
Ë
x20
 *
y10
;

639 
acc0
 +(
q31_t
Ë
x21
 *
y11
;

640 
acc2
 +(
q31_t
Ë
x10
 *
y10
;

641 
acc2
 +(
q31_t
Ë
x11
 *
y11
;

642 
acc1
 +(
q31_t
Ë
x21
 *
y10
;

643 
acc1
 +(
q31_t
Ë
x10
 *
y11
;

646 
x20
 = *(
pS¸1
 + 2);

647 
x21
 = *(
pS¸1
 + 3);

650 
acc3
 +(
q31_t
Ë
x11
 *
y10
;

651 
acc3
 +(
q31_t
Ë
x20
 *
y11
;

654 
pIn2
 += 4u;

655 
pS¸1
 += 4u;

658 
èpC¡
--;

662 
pS¸1
 -= 4u;

665 
èpC¡
 = (
§cBLí
) & 3u;

667 
èpC¡
 > 0u)

670 
acc0
 +(*
pS¸1
++ * *
pIn2
);

671 
acc1
 +(*
pS¸1
++ * *
pIn2
);

672 
acc2
 +(*
pS¸1
++ * *
pIn2
);

673 
acc3
 +(*
pS¸1
++ * *
pIn2
++);

675 
pS¸1
 -= 3u;

678 
èpC¡
--;

681 
blkC¡
--;

685 *
pOut
++ = 
	`__SSAT
((
acc0
 >> 15), 16);

686 *
pOut
++ = 
	`__SSAT
((
acc1
 >> 15), 16);

687 *
pOut
++ = 
	`__SSAT
((
acc2
 >> 15), 16);

688 *
pOut
++ = 
	`__SSAT
((
acc3
 >> 15), 16);

691 
pIn2
 = 
py
;

693 
pS¸©ch1
 += 4u;

698 
blkC¡
 = 
numPoöts
 & 0x3;

701 
blkC¡
 > 0)

704 
pS¸1
 = 
pS¸©ch1
;

707 
acc0
 = 0;

709 
èpC¡
 = (
§cBLí
) >> 1u;

711 
èpC¡
 > 0u)

715 
x10
 = *
pS¸1
++;

716 
x11
 = *
pS¸1
++;

719 
y10
 = *
pIn2
++;

720 
y11
 = *
pIn2
++;

723 
acc0
 +(
q31_t
Ë
x10
 *
y10
;

724 
acc0
 +(
q31_t
Ë
x11
 *
y11
;

727 
èpC¡
--;

730 
èpC¡
 = (
§cBLí
) & 1u;

733 
èpC¡
 > 0u)

737 
acc0
 +(*
pS¸1
++ * *
pIn2
++);

740 
èpC¡
--;

743 
blkC¡
--;

746 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

749 
pIn2
 = 
py
;

751 
pS¸©ch1
 += 1u;

756 
°©us
 = 
ARM_MATH_SUCCESS
;

761  (
°©us
);

762 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_fast_q15.c

41 
	~"¨m_m©h.h
"

67 
¨m_°©us
 
	$¨m_c⁄v_∑πül_Á°_q15
(

68 
q15_t
 * 
pSrcA
,

69 
uöt32_t
 
§cALí
,

70 
q15_t
 * 
pSrcB
,

71 
uöt32_t
 
§cBLí
,

72 
q15_t
 * 
pD°
,

73 
uöt32_t
 
fú°Index
,

74 
uöt32_t
 
numPoöts
)

76 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


78 
q15_t
 *
pIn1
;

79 
q15_t
 *
pIn2
;

80 
q15_t
 *
pOut
 = 
pD°
;

81 
q31_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

82 
q15_t
 *
px
;

83 
q15_t
 *
py
;

84 
q15_t
 *
pSrc1
, *
pSrc2
;

85 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

86 
uöt32_t
 
j
, 
k
, 
cou¡
, 
check
, 
blkC¡
;

87 
öt32_t
 
blockSize1
, 
blockSize2
, 
blockSize3
;

88 
¨m_°©us
 
°©us
;

91 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

94 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

102 if(
§cALí
 >=
§cBLí
)

105 
pIn1
 = 
pSrcA
;

108 
pIn2
 = 
pSrcB
;

113 
pIn1
 = 
pSrcB
;

116 
pIn2
 = 
pSrcA
;

119 
j
 = 
§cBLí
;

120 
§cBLí
 = 
§cALí
;

121 
§cALí
 = 
j
;

126 
check
 = 
fú°Index
 + 
numPoöts
;

127 
blockSize3
 = ((
öt32_t
)
check
 > (öt32_t)
§cALí
) ? (int32_t)check - (int32_t)srcALen : 0;

128 
blockSize3
 = ((
öt32_t
)
fú°Index
 > (öt32_t)
§cALí
 - 1) ? blockSize3 - (int32_t)firstIndex + (int32_t)srcALen : blockSize3;

129 
blockSize1
 = (((
öt32_t
Ë
§cBLí
 - 1Ë- (öt32_tË
fú°Index
);

130 
blockSize1
 = (blockSize1 > 0Ë? ((
check
 > (
§cBLí
 - 1u)) ? blockSize1 :

131 (
öt32_t
Ë
numPoöts
) : 0;

132 
blockSize2
 = (
öt32_t
Ë
check
 - ((
blockSize3
 + 
blockSize1
) +

133 (
öt32_t
Ë
fú°Index
);

134 
blockSize2
 = (blockSize2 > 0) ? blockSize2 : 0;

147 
pOut
 = 
pD°
 + 
fú°Index
;

163 
cou¡
 = 1u + 
fú°Index
;

166 
px
 = 
pIn1
;

169 
pSrc2
 = 
pIn2
 + 
fú°Index
;

170 
py
 = 
pSrc2
;

181 (
cou¡
 < 4uË&& (
blockSize1
 > 0))

184 
sum
 = 0;

188 
k
 = 
cou¡
;

190 
k
 > 0u)

193 
sum
 = 
	`__SMLAD
(*
px
++, *
py
--, sum);

196 
k
--;

200 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

203 
py
 = ++
pSrc2
;

204 
px
 = 
pIn1
;

207 
cou¡
++;

210 
blockSize1
--;

217 
py
 =Öy - 1;

219 
blockSize1
 > 0)

222 
sum
 = 0;

225 
k
 = 
cou¡
 >> 2u;

229 
k
 > 0u)

233 
sum
 = 
	`__SMLADX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

235 
sum
 = 
	`__SMLADX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

238 
k
--;

243 
py
 =Öy + 1u;

247 
k
 = 
cou¡
 % 0x4u;

249 
k
 > 0u)

252 
sum
 = 
	`__SMLAD
(*
px
++, *
py
--, sum);

255 
k
--;

259 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

262 
py
 = ++
pSrc2
 - 1u;

263 
px
 = 
pIn1
;

266 
cou¡
++;

269 
blockSize1
--;

283 if((
öt32_t
)
fú°Index
 - (öt32_t)
§cBLí
 + 1 > 0)

285 
px
 = 
pIn1
 + 
fú°Index
 - 
§cBLí
 + 1;

289 
px
 = 
pIn1
;

293 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

294 
py
 = 
pSrc2
;

297 
cou¡
 = 0u;

307 if(
§cBLí
 >= 4u)

310 
blkC¡
 = ((
uöt32_t
Ë
blockSize2
 >> 2u);

312 
blkC¡
 > 0u)

314 
py
 =Öy - 1u;

317 
acc0
 = 0;

318 
acc1
 = 0;

319 
acc2
 = 0;

320 
acc3
 = 0;

324 
x0
 = *
	`__SIMD32
(
px
);

326 
x1
 = 
	`_SIMD32_OFFSET
(
px
+1);

327 
px
+= 2u;

331 
k
 = 
§cBLí
 >> 2u;

339 
c0
 = *
	`__SIMD32
(
py
)--;

342 
acc0
 = 
	`__SMLADX
(
x0
, 
c0
,ácc0);

345 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

348 
x2
 = *
	`__SIMD32
(
px
);

351 
x3
 = 
	`_SIMD32_OFFSET
(
px
+1);

354 
acc2
 = 
	`__SMLADX
(
x2
, 
c0
,ácc2);

357 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

360 
c0
 = *
	`__SIMD32
(
py
)--;

363 
acc0
 = 
	`__SMLADX
(
x2
, 
c0
,ácc0);

366 
acc1
 = 
	`__SMLADX
(
x3
, 
c0
,ácc1);

369 
x0
 = 
	`_SIMD32_OFFSET
(
px
+2);

372 
x1
 = 
	`_SIMD32_OFFSET
(
px
+3);

373 
px
 += 4u;

376 
acc2
 = 
	`__SMLADX
(
x0
, 
c0
,ácc2);

379 
acc3
 = 
	`__SMLADX
(
x1
, 
c0
,ácc3);

381 } --
k
);

388 
k
 = 
§cBLí
 % 0x4u;

390 if(
k
 == 1u)

393 
c0
 = *(
py
+1);

394 #ifde‡ 
ARM_MATH_BIG_ENDIAN


396 
c0
 = c0 << 16u;

400 
c0
 = c0 & 0x0000FFFF;

405 
x3
 = *
	`__SIMD32
(
px
);

406 
px
++;

409 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

410 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

411 
acc2
 = 
	`__SMLADX
(
x1
, 
c0
,ácc2);

412 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

415 if(
k
 == 2u)

418 
c0
 = 
	`_SIMD32_OFFSET
(
py
);

421 
x3
 = *
	`__SIMD32
(
px
);

424 
x2
 = 
	`_SIMD32_OFFSET
(
px
+1);

425 
px
 += 2u;

428 
acc0
 = 
	`__SMLADX
(
x0
, 
c0
,ácc0);

429 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

430 
acc2
 = 
	`__SMLADX
(
x3
, 
c0
,ácc2);

431 
acc3
 = 
	`__SMLADX
(
x2
, 
c0
,ácc3);

434 if(
k
 == 3u)

437 
c0
 = 
	`_SIMD32_OFFSET
(
py
);

440 
x3
 = *
	`__SIMD32
(
px
);

443 
x2
 = 
	`_SIMD32_OFFSET
(
px
+1);

446 
acc0
 = 
	`__SMLADX
(
x0
, 
c0
,ácc0);

447 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

448 
acc2
 = 
	`__SMLADX
(
x3
, 
c0
,ácc2);

449 
acc3
 = 
	`__SMLADX
(
x2
, 
c0
,ácc3);

451 
c0
 = *(
py
-1);

452 #ifde‡ 
ARM_MATH_BIG_ENDIAN


454 
c0
 = c0 << 16u;

457 
c0
 = c0 & 0x0000FFFF;

461 
x3
 = 
	`_SIMD32_OFFSET
(
px
+2);

462 
px
 += 3u;

465 
acc0
 = 
	`__SMLADX
(
x1
, 
c0
,ácc0);

466 
acc1
 = 
	`__SMLAD
(
x2
, 
c0
,ácc1);

467 
acc2
 = 
	`__SMLADX
(
x2
, 
c0
,ácc2);

468 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

472 #i‚de‡
ARM_MATH_BIG_ENDIAN


474 *
	`__SIMD32
(
pOut
)++ = 
	`__PKHBT
(
acc0
 >> 15, 
acc1
 >> 15, 16);

475 *
	`__SIMD32
(
pOut
)++ = 
	`__PKHBT
(
acc2
 >> 15, 
acc3
 >> 15, 16);

479 *
	`__SIMD32
(
pOut
)++ = 
	`__PKHBT
(
acc1
 >> 15, 
acc0
 >> 15, 16);

480 *
	`__SIMD32
(
pOut
)++ = 
	`__PKHBT
(
acc3
 >> 15, 
acc2
 >> 15, 16);

485 
cou¡
 += 4u;

488 
px
 = 
pIn1
 + 
cou¡
;

489 
py
 = 
pSrc2
;

492 
blkC¡
--;

497 
blkC¡
 = (
uöt32_t
Ë
blockSize2
 % 0x4u;

499 
blkC¡
 > 0u)

502 
sum
 = 0;

505 
k
 = 
§cBLí
 >> 2u;

509 
k
 > 0u)

512 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

513 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

514 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

515 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

518 
k
--;

523 
k
 = 
§cBLí
 % 0x4u;

525 
k
 > 0u)

528 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

531 
k
--;

535 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

538 
cou¡
++;

541 
px
 = 
pIn1
 + 
cou¡
;

542 
py
 = 
pSrc2
;

545 
blkC¡
--;

552 
blkC¡
 = (
uöt32_t
Ë
blockSize2
;

554 
blkC¡
 > 0u)

557 
sum
 = 0;

560 
k
 = 
§cBLí
;

562 
k
 > 0u)

565 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

568 
k
--;

572 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

575 
cou¡
++;

578 
px
 = 
pIn1
 + 
cou¡
;

579 
py
 = 
pSrc2
;

582 
blkC¡
--;

600 
cou¡
 = 
§cBLí
 - 1u;

603 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

604 
px
 = 
pSrc1
;

607 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

608 
pIn2
 = 
pSrc2
 - 1u;

609 
py
 = 
pIn2
;

620 
j
 = 
cou¡
 >> 2u;

622 (
j
 > 0uË&& (
blockSize3
 > 0))

625 
sum
 = 0;

628 
k
 = 
cou¡
 >> 2u;

632 
k
 > 0u)

636 
sum
 = 
	`__SMLADX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

639 
sum
 = 
	`__SMLADX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

642 
k
--;

647 
py
 =Öy + 1u;

651 
k
 = 
cou¡
 % 0x4u;

653 
k
 > 0u)

656 
sum
 = 
	`__SMLAD
(*
px
++, *
py
--, sum);

659 
k
--;

663 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

666 
px
 = ++
pSrc1
;

667 
py
 = 
pIn2
;

670 
cou¡
--;

673 
blockSize3
--;

675 
j
--;

681 
py
 =Öy + 1u;

683 
blockSize3
 > 0)

686 
sum
 = 0;

689 
k
 = 
cou¡
;

691 
k
 > 0u)

695 
sum
 = 
	`__SMLAD
(*
px
++, *
py
--, sum);

698 
k
--;

702 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

705 
px
 = ++
pSrc1
;

706 
py
 = 
pSrc2
;

709 
cou¡
--;

712 
blockSize3
--;

716 
°©us
 = 
ARM_MATH_SUCCESS
;

720  (
°©us
);

724 
q15_t
 *
pIn1
;

725 
q15_t
 *
pIn2
;

726 
q15_t
 *
pOut
 = 
pD°
;

727 
q31_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

728 
q15_t
 *
px
;

729 
q15_t
 *
py
;

730 
q15_t
 *
pSrc1
, *
pSrc2
;

731 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

732 
uöt32_t
 
j
, 
k
, 
cou¡
, 
check
, 
blkC¡
;

733 
öt32_t
 
blockSize1
, 
blockSize2
, 
blockSize3
;

734 
¨m_°©us
 
°©us
;

735 
q15_t
 
a
, 
b
;

738 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

741 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

749 if(
§cALí
 >=
§cBLí
)

752 
pIn1
 = 
pSrcA
;

755 
pIn2
 = 
pSrcB
;

760 
pIn1
 = 
pSrcB
;

763 
pIn2
 = 
pSrcA
;

766 
j
 = 
§cBLí
;

767 
§cBLí
 = 
§cALí
;

768 
§cALí
 = 
j
;

773 
check
 = 
fú°Index
 + 
numPoöts
;

774 
blockSize3
 = ((
öt32_t
)
check
 > (öt32_t)
§cALí
) ? (int32_t)check - (int32_t)srcALen : 0;

775 
blockSize3
 = ((
öt32_t
)
fú°Index
 > (öt32_t)
§cALí
 - 1) ? blockSize3 - (int32_t)firstIndex + (int32_t)srcALen : blockSize3;

776 
blockSize1
 = ((
öt32_t
Ë
§cBLí
 - 1Ë- (öt32_tË
fú°Index
;

777 
blockSize1
 = (blockSize1 > 0Ë? ((
check
 > (
§cBLí
 - 1u)) ? blockSize1 :

778 (
öt32_t
Ë
numPoöts
) : 0;

779 
blockSize2
 = ((
öt32_t
Ë
check
 - 
blockSize3
) -

780 (
blockSize1
 + (
öt32_t
Ë
fú°Index
);

781 
blockSize2
 = (blockSize2 > 0) ? blockSize2 : 0;

794 
pOut
 = 
pD°
 + 
fú°Index
;

810 
cou¡
 = 1u + 
fú°Index
;

813 
px
 = 
pIn1
;

816 
pSrc2
 = 
pIn2
 + 
fú°Index
;

817 
py
 = 
pSrc2
;

828 (
cou¡
 < 4uË&& (
blockSize1
 > 0))

831 
sum
 = 0;

835 
k
 = 
cou¡
;

837 
k
 > 0u)

840 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

843 
k
--;

847 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

850 
py
 = ++
pSrc2
;

851 
px
 = 
pIn1
;

854 
cou¡
++;

857 
blockSize1
--;

864 
py
 =Öy - 1;

866 
blockSize1
 > 0)

869 
sum
 = 0;

872 
k
 = 
cou¡
 >> 2u;

876 
py
++;

878 
k
 > 0u)

881 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

882 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

883 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

884 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

887 
k
--;

892 
k
 = 
cou¡
 % 0x4u;

894 
k
 > 0u)

897 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

900 
k
--;

904 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

907 
py
 = ++
pSrc2
 - 1u;

908 
px
 = 
pIn1
;

911 
cou¡
++;

914 
blockSize1
--;

928 if((
öt32_t
)
fú°Index
 - (öt32_t)
§cBLí
 + 1 > 0)

930 
px
 = 
pIn1
 + 
fú°Index
 - 
§cBLí
 + 1;

934 
px
 = 
pIn1
;

938 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

939 
py
 = 
pSrc2
;

942 
cou¡
 = 0u;

952 if(
§cBLí
 >= 4u)

955 
blkC¡
 = ((
uöt32_t
Ë
blockSize2
 >> 2u);

957 
blkC¡
 > 0u)

959 
py
 =Öy - 1u;

962 
acc0
 = 0;

963 
acc1
 = 0;

964 
acc2
 = 0;

965 
acc3
 = 0;

968 
a
 = *
px
++;

969 
b
 = *
px
++;

971 #i‚de‡
ARM_MATH_BIG_ENDIAN


973 
x0
 = 
	`__PKHBT
(
a
, 
b
, 16);

974 
a
 = *
px
;

975 
x1
 = 
	`__PKHBT
(
b
, 
a
, 16);

979 
x0
 = 
	`__PKHBT
(
b
, 
a
, 16);

980 
a
 = *
px
;

981 
x1
 = 
	`__PKHBT
(
a
, 
b
, 16);

986 
k
 = 
§cBLí
 >> 2u;

994 
a
 = *
py
;

995 
b
 = *(
py
+1);

996 
py
 -= 2;

998 #i‚de‡
ARM_MATH_BIG_ENDIAN


1000 
c0
 = 
	`__PKHBT
(
a
, 
b
, 16);

1004 
c0
 = 
	`__PKHBT
(
b
, 
a
, 16);;

1009 
acc0
 = 
	`__SMLADX
(
x0
, 
c0
,ácc0);

1012 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

1014 
a
 = *
px
;

1015 
b
 = *(
px
 + 1);

1017 #i‚de‡
ARM_MATH_BIG_ENDIAN


1019 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

1020 
a
 = *(
px
 + 2);

1021 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);

1025 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

1026 
a
 = *(
px
 + 2);

1027 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

1032 
acc2
 = 
	`__SMLADX
(
x2
, 
c0
,ácc2);

1035 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

1038 
a
 = *
py
;

1039 
b
 = *(
py
+1);

1040 
py
 -= 2;

1042 #i‚de‡
ARM_MATH_BIG_ENDIAN


1044 
c0
 = 
	`__PKHBT
(
a
, 
b
, 16);

1048 
c0
 = 
	`__PKHBT
(
b
, 
a
, 16);;

1053 
acc0
 = 
	`__SMLADX
(
x2
, 
c0
,ácc0);

1056 
acc1
 = 
	`__SMLADX
(
x3
, 
c0
,ácc1);

1059 
a
 = *(
px
 + 2);

1060 
b
 = *(
px
 + 3);

1062 #i‚de‡
ARM_MATH_BIG_ENDIAN


1064 
x0
 = 
	`__PKHBT
(
a
, 
b
, 16);

1065 
a
 = *(
px
 + 4);

1066 
x1
 = 
	`__PKHBT
(
b
, 
a
, 16);

1070 
x0
 = 
	`__PKHBT
(
b
, 
a
, 16);

1071 
a
 = *(
px
 + 4);

1072 
x1
 = 
	`__PKHBT
(
a
, 
b
, 16);

1076 
px
 += 4u;

1079 
acc2
 = 
	`__SMLADX
(
x0
, 
c0
,ácc2);

1082 
acc3
 = 
	`__SMLADX
(
x1
, 
c0
,ácc3);

1084 } --
k
);

1091 
k
 = 
§cBLí
 % 0x4u;

1093 if(
k
 == 1u)

1096 
c0
 = *(
py
+1);

1098 #ifde‡ 
ARM_MATH_BIG_ENDIAN


1100 
c0
 = c0 << 16u;

1104 
c0
 = c0 & 0x0000FFFF;

1109 
a
 = *
px
;

1110 
b
 = *(
px
+1);

1111 
px
++;

1113 #i‚de‡
ARM_MATH_BIG_ENDIAN


1115 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

1119 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);;

1125 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

1126 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

1127 
acc2
 = 
	`__SMLADX
(
x1
, 
c0
,ácc2);

1128 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

1131 if(
k
 == 2u)

1134 
a
 = *
py
;

1135 
b
 = *(
py
+1);

1137 #i‚de‡
ARM_MATH_BIG_ENDIAN


1139 
c0
 = 
	`__PKHBT
(
a
, 
b
, 16);

1143 
c0
 = 
	`__PKHBT
(
b
, 
a
, 16);;

1148 
a
 = *
px
;

1149 
b
 = *(
px
 + 1);

1151 #i‚de‡
ARM_MATH_BIG_ENDIAN


1153 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

1154 
a
 = *(
px
 + 2);

1155 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

1159 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);

1160 
a
 = *(
px
 + 2);

1161 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

1164 
px
 += 2u;

1167 
acc0
 = 
	`__SMLADX
(
x0
, 
c0
,ácc0);

1168 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

1169 
acc2
 = 
	`__SMLADX
(
x3
, 
c0
,ácc2);

1170 
acc3
 = 
	`__SMLADX
(
x2
, 
c0
,ácc3);

1173 if(
k
 == 3u)

1176 
a
 = *
py
;

1177 
b
 = *(
py
+1);

1179 #i‚de‡
ARM_MATH_BIG_ENDIAN


1181 
c0
 = 
	`__PKHBT
(
a
, 
b
, 16);

1185 
c0
 = 
	`__PKHBT
(
b
, 
a
, 16);;

1190 
a
 = *
px
;

1191 
b
 = *(
px
 + 1);

1193 #i‚de‡
ARM_MATH_BIG_ENDIAN


1195 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

1196 
a
 = *(
px
 + 2);

1197 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

1201 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);

1202 
a
 = *(
px
 + 2);

1203 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

1208 
acc0
 = 
	`__SMLADX
(
x0
, 
c0
,ácc0);

1209 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

1210 
acc2
 = 
	`__SMLADX
(
x3
, 
c0
,ácc2);

1211 
acc3
 = 
	`__SMLADX
(
x2
, 
c0
,ácc3);

1214 
c0
 = *(
py
-1);

1215 #ifde‡ 
ARM_MATH_BIG_ENDIAN


1217 
c0
 = c0 << 16u;

1220 
c0
 = c0 & 0x0000FFFF;

1224 
a
 = *(
px
+2);

1225 
b
 = *(
px
+3);

1227 #i‚de‡
ARM_MATH_BIG_ENDIAN


1229 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

1233 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);;

1237 
px
 += 3u;

1240 
acc0
 = 
	`__SMLADX
(
x1
, 
c0
,ácc0);

1241 
acc1
 = 
	`__SMLAD
(
x2
, 
c0
,ácc1);

1242 
acc2
 = 
	`__SMLADX
(
x2
, 
c0
,ácc2);

1243 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

1247 *
pOut
++ = (
q15_t
)(
acc0
 >> 15);

1248 *
pOut
++ = (
q15_t
)(
acc1
 >> 15);

1249 *
pOut
++ = (
q15_t
)(
acc2
 >> 15);

1250 *
pOut
++ = (
q15_t
)(
acc3
 >> 15);

1253 
cou¡
 += 4u;

1256 
px
 = 
pIn1
 + 
cou¡
;

1257 
py
 = 
pSrc2
;

1260 
blkC¡
--;

1265 
blkC¡
 = (
uöt32_t
Ë
blockSize2
 % 0x4u;

1267 
blkC¡
 > 0u)

1270 
sum
 = 0;

1273 
k
 = 
§cBLí
 >> 2u;

1277 
k
 > 0u)

1280 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1281 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1282 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1283 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1286 
k
--;

1291 
k
 = 
§cBLí
 % 0x4u;

1293 
k
 > 0u)

1296 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1299 
k
--;

1303 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

1306 
cou¡
++;

1309 
px
 = 
pIn1
 + 
cou¡
;

1310 
py
 = 
pSrc2
;

1313 
blkC¡
--;

1320 
blkC¡
 = (
uöt32_t
Ë
blockSize2
;

1322 
blkC¡
 > 0u)

1325 
sum
 = 0;

1328 
k
 = 
§cBLí
;

1330 
k
 > 0u)

1333 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1336 
k
--;

1340 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

1343 
cou¡
++;

1346 
px
 = 
pIn1
 + 
cou¡
;

1347 
py
 = 
pSrc2
;

1350 
blkC¡
--;

1368 
cou¡
 = 
§cBLí
 - 1u;

1371 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

1372 
px
 = 
pSrc1
;

1375 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

1376 
pIn2
 = 
pSrc2
 - 1u;

1377 
py
 = 
pIn2
;

1388 
j
 = 
cou¡
 >> 2u;

1390 (
j
 > 0uË&& (
blockSize3
 > 0))

1393 
sum
 = 0;

1396 
k
 = 
cou¡
 >> 2u;

1400 
py
++;

1402 
k
 > 0u)

1405 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1406 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1407 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1408 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1410 
k
--;

1416 
k
 = 
cou¡
 % 0x4u;

1418 
k
 > 0u)

1421 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1424 
k
--;

1428 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

1431 
px
 = ++
pSrc1
;

1432 
py
 = 
pIn2
;

1435 
cou¡
--;

1438 
blockSize3
--;

1440 
j
--;

1446 
py
 =Öy + 1u;

1448 
blockSize3
 > 0)

1451 
sum
 = 0;

1454 
k
 = 
cou¡
;

1456 
k
 > 0u)

1460 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1463 
k
--;

1467 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

1470 
px
 = ++
pSrc1
;

1471 
py
 = 
pSrc2
;

1474 
cou¡
--;

1477 
blockSize3
--;

1481 
°©us
 = 
ARM_MATH_SUCCESS
;

1485  (
°©us
);

1488 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_fast_q31.c

41 
	~"¨m_m©h.h
"

67 
¨m_°©us
 
	$¨m_c⁄v_∑πül_Á°_q31
(

68 
q31_t
 * 
pSrcA
,

69 
uöt32_t
 
§cALí
,

70 
q31_t
 * 
pSrcB
,

71 
uöt32_t
 
§cBLí
,

72 
q31_t
 * 
pD°
,

73 
uöt32_t
 
fú°Index
,

74 
uöt32_t
 
numPoöts
)

76 
q31_t
 *
pIn1
;

77 
q31_t
 *
pIn2
;

78 
q31_t
 *
pOut
 = 
pD°
;

79 
q31_t
 *
px
;

80 
q31_t
 *
py
;

81 
q31_t
 *
pSrc1
, *
pSrc2
;

82 
q31_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

83 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

84 
uöt32_t
 
j
, 
k
, 
cou¡
, 
check
, 
blkC¡
;

85 
öt32_t
 
blockSize1
, 
blockSize2
, 
blockSize3
;

86 
¨m_°©us
 
°©us
;

90 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

93 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

101 if(
§cALí
 >
§cBLí
)

104 
pIn1
 = 
pSrcA
;

107 
pIn2
 = 
pSrcB
;

112 
pIn1
 = 
pSrcB
;

115 
pIn2
 = 
pSrcA
;

118 
j
 = 
§cBLí
;

119 
§cBLí
 = 
§cALí
;

120 
§cALí
 = 
j
;

125 
check
 = 
fú°Index
 + 
numPoöts
;

126 
blockSize3
 = ((
öt32_t
)
check
 > (öt32_t)
§cALí
) ? (int32_t)check - (int32_t)srcALen : 0;

127 
blockSize3
 = ((
öt32_t
)
fú°Index
 > (öt32_t)
§cALí
 - 1) ? blockSize3 - (int32_t)firstIndex + (int32_t)srcALen : blockSize3;

128 
blockSize1
 = (((
öt32_t
Ë
§cBLí
 - 1Ë- (öt32_tË
fú°Index
);

129 
blockSize1
 = (blockSize1 > 0Ë? ((
check
 > (
§cBLí
 - 1u)) ? blockSize1 :

130 (
öt32_t
Ë
numPoöts
) : 0;

131 
blockSize2
 = (
öt32_t
Ë
check
 - ((
blockSize3
 + 
blockSize1
) +

132 (
öt32_t
Ë
fú°Index
);

133 
blockSize2
 = (blockSize2 > 0) ? blockSize2 : 0;

146 
pOut
 = 
pD°
 + 
fú°Index
;

162 
cou¡
 = 1u + 
fú°Index
;

165 
px
 = 
pIn1
;

168 
pSrc2
 = 
pIn2
 + 
fú°Index
;

169 
py
 = 
pSrc2
;

176 
blockSize1
 > 0)

179 
sum
 = 0;

182 
k
 = 
cou¡
 >> 2u;

186 
k
 > 0u)

189 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

190 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

193 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

194 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

197 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

198 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

201 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

202 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

205 
k
--;

210 
k
 = 
cou¡
 % 0x4u;

212 
k
 > 0u)

215 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

216 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

219 
k
--;

223 *
pOut
++ = 
sum
 << 1;

226 
py
 = ++
pSrc2
;

227 
px
 = 
pIn1
;

230 
cou¡
++;

233 
blockSize1
--;

247 if((
öt32_t
)
fú°Index
 - (öt32_t)
§cBLí
 + 1 > 0)

249 
px
 = 
pIn1
 + 
fú°Index
 - 
§cBLí
 + 1;

253 
px
 = 
pIn1
;

257 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

258 
py
 = 
pSrc2
;

261 
cou¡
 = 0u;

270 if(
§cBLí
 >= 4u)

273 
blkC¡
 = ((
uöt32_t
Ë
blockSize2
 >> 2u);

275 
blkC¡
 > 0u)

278 
acc0
 = 0;

279 
acc1
 = 0;

280 
acc2
 = 0;

281 
acc3
 = 0;

284 
x0
 = *(
px
++);

285 
x1
 = *(
px
++);

286 
x2
 = *(
px
++);

289 
k
 = 
§cBLí
 >> 2u;

296 
c0
 = *(
py
--);

299 
x3
 = *(
px
++);

303 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

306 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

309 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

312 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

315 
c0
 = *(
py
--);

318 
x0
 = *(
px
++);

322 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

324 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

326 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

328 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

331 
c0
 = *(
py
--);

334 
x1
 = *(
px
++);

338 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

340 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

342 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

344 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

347 
c0
 = *(
py
--);

350 
x2
 = *(
px
++);

354 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

356 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

358 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

360 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

363 } --
k
);

367 
k
 = 
§cBLí
 % 0x4u;

369 
k
 > 0u)

372 
c0
 = *(
py
--);

375 
x3
 = *(
px
++);

379 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

381 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

383 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

385 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

388 
x0
 = 
x1
;

389 
x1
 = 
x2
;

390 
x2
 = 
x3
;

393 
k
--;

397 *
pOut
++ = (
q31_t
Ë(
acc0
 << 1);

398 *
pOut
++ = (
q31_t
Ë(
acc1
 << 1);

399 *
pOut
++ = (
q31_t
Ë(
acc2
 << 1);

400 *
pOut
++ = (
q31_t
Ë(
acc3
 << 1);

403 
cou¡
 += 4u;

406 
px
 = 
pIn1
 + 
cou¡
;

407 
py
 = 
pSrc2
;

410 
blkC¡
--;

415 
blkC¡
 = (
uöt32_t
Ë
blockSize2
 % 0x4u;

417 
blkC¡
 > 0u)

420 
sum
 = 0;

423 
k
 = 
§cBLí
 >> 2u;

427 
k
 > 0u)

430 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

431 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

432 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

433 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

434 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

435 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

436 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

437 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

440 
k
--;

445 
k
 = 
§cBLí
 % 0x4u;

447 
k
 > 0u)

450 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

451 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

454 
k
--;

458 *
pOut
++ = 
sum
 << 1;

461 
cou¡
++;

464 
px
 = 
pIn1
 + 
cou¡
;

465 
py
 = 
pSrc2
;

468 
blkC¡
--;

475 
blkC¡
 = (
uöt32_t
Ë
blockSize2
;

477 
blkC¡
 > 0u)

480 
sum
 = 0;

483 
k
 = 
§cBLí
;

485 
k
 > 0u)

488 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

489 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

492 
k
--;

496 *
pOut
++ = 
sum
 << 1;

499 
cou¡
++;

502 
px
 = 
pIn1
 + 
cou¡
;

503 
py
 = 
pSrc2
;

506 
blkC¡
--;

524 
cou¡
 = 
§cBLí
 - 1u;

527 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

528 
px
 = 
pSrc1
;

531 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

532 
py
 = 
pSrc2
;

538 
blockSize3
 > 0)

541 
sum
 = 0;

544 
k
 = 
cou¡
 >> 2u;

548 
k
 > 0u)

551 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

552 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

555 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

556 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

559 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

560 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

563 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

564 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

567 
k
--;

572 
k
 = 
cou¡
 % 0x4u;

574 
k
 > 0u)

578 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

579 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

582 
k
--;

586 *
pOut
++ = 
sum
 << 1;

589 
px
 = ++
pSrc1
;

590 
py
 = 
pSrc2
;

593 
cou¡
--;

596 
blockSize3
--;

601 
°©us
 = 
ARM_MATH_SUCCESS
;

605  (
°©us
);

607 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_opt_q15.c

41 
	~"¨m_m©h.h
"

74 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


76 
¨m_°©us
 
	$¨m_c⁄v_∑πül_›t_q15
(

77 
q15_t
 * 
pSrcA
,

78 
uöt32_t
 
§cALí
,

79 
q15_t
 * 
pSrcB
,

80 
uöt32_t
 
§cBLí
,

81 
q15_t
 * 
pD°
,

82 
uöt32_t
 
fú°Index
,

83 
uöt32_t
 
numPoöts
,

84 
q15_t
 * 
pS¸©ch1
,

85 
q15_t
 * 
pS¸©ch2
)

88 
q15_t
 *
pOut
 = 
pD°
;

89 
q15_t
 *
pS¸1
 = 
pS¸©ch1
;

90 
q15_t
 *
pS¸2
 = 
pS¸©ch2
;

91 
q63_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

92 
q31_t
 
x1
, 
x2
, 
x3
;

93 
q31_t
 
y1
, 
y2
;

94 
q15_t
 *
pIn1
;

95 
q15_t
 *
pIn2
;

96 
q15_t
 *
px
;

97 
q15_t
 *
py
;

98 
uöt32_t
 
j
, 
k
, 
blkC¡
;

99 
¨m_°©us
 
°©us
;

100 
uöt32_t
 
èpC¡
;

103 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

106 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

114 if(
§cALí
 >
§cBLí
)

117 
pIn1
 = 
pSrcA
;

120 
pIn2
 = 
pSrcB
;

125 
pIn1
 = 
pSrcB
;

128 
pIn2
 = 
pSrcA
;

131 
j
 = 
§cBLí
;

132 
§cBLí
 = 
§cALí
;

133 
§cALí
 = 
j
;

137 
py
 = 
pS¸©ch2
;

140 
pS¸2
 = 
pS¸©ch2
 + 
§cBLí
 - 1;

143 
px
 = 
pIn2
;

146 
k
 = 
§cBLí
 >> 2u;

150 
k
 > 0u)

153 *
pS¸2
-- = *
px
++;

154 *
pS¸2
-- = *
px
++;

155 *
pS¸2
-- = *
px
++;

156 *
pS¸2
-- = *
px
++;

159 
k
--;

164 
k
 = 
§cBLí
 % 0x4u;

166 
k
 > 0u)

169 *
pS¸2
-- = *
px
++;

172 
k
--;

176 
pS¸1
 = 
pS¸©ch1
;

179 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

182 
pS¸1
 +(
§cBLí
 - 1u);

187 
	`¨m_c›y_q15
(
pIn1
, 
pS¸1
, 
§cALí
);

190 
pS¸1
 +
§cALí
;

193 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

196 
pS¸1
 +(
§cBLí
 - 1u);

199 
pIn2
 = 
py
;

201 
pS¸©ch1
 +
fú°Index
;

203 
pOut
 = 
pD°
 + 
fú°Index
;

206 
blkC¡
 = (
numPoöts
) >> 2;

208 
blkC¡
 > 0)

211 
pS¸1
 = 
pS¸©ch1
;

214 
acc0
 = 0;

215 
acc1
 = 0;

216 
acc2
 = 0;

217 
acc3
 = 0;

220 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

223 
x2
 = *
	`__SIMD32
(
pS¸1
)++;

225 
èpC¡
 = (
§cBLí
) >> 2u;

227 
èpC¡
 > 0u)

231 
y1
 = 
	`_SIMD32_OFFSET
(
pIn2
);

232 
y2
 = 
	`_SIMD32_OFFSET
(
pIn2
 + 2u);

235 
acc0
 = 
	`__SMLALD
(
x1
, 
y1
,ácc0);

236 
acc2
 = 
	`__SMLALD
(
x2
, 
y1
,ácc2);

239 #i‚de‡
ARM_MATH_BIG_ENDIAN


240 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

242 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

246 
acc1
 = 
	`__SMLALDX
(
x3
, 
y1
,ácc1);

249 
x1
 = 
	`_SIMD32_OFFSET
(
pS¸1
);

252 
acc0
 = 
	`__SMLALD
(
x2
, 
y2
,ácc0);

253 
acc2
 = 
	`__SMLALD
(
x1
, 
y2
,ácc2);

256 #i‚de‡
ARM_MATH_BIG_ENDIAN


257 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

259 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

262 
acc3
 = 
	`__SMLALDX
(
x3
, 
y1
,ácc3);

263 
acc1
 = 
	`__SMLALDX
(
x3
, 
y2
,ácc1);

265 
x2
 = 
	`_SIMD32_OFFSET
(
pS¸1
 + 2u);

267 #i‚de‡
ARM_MATH_BIG_ENDIAN


268 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

270 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

273 
acc3
 = 
	`__SMLALDX
(
x3
, 
y2
,ácc3);

276 
pIn2
 += 4u;

277 
pS¸1
 += 4u;

281 
èpC¡
--;

285 
pS¸1
 -= 4u;

288 
èpC¡
 = (
§cBLí
) & 3u;

290 
èpC¡
 > 0u)

293 
acc0
 +(*
pS¸1
++ * *
pIn2
);

294 
acc1
 +(*
pS¸1
++ * *
pIn2
);

295 
acc2
 +(*
pS¸1
++ * *
pIn2
);

296 
acc3
 +(*
pS¸1
++ * *
pIn2
++);

298 
pS¸1
 -= 3u;

301 
èpC¡
--;

304 
blkC¡
--;

309 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


311 *
	`__SIMD32
(
pOut
)++ =

312 
	`__PKHBT
(
	`__SSAT
((
acc0
 >> 15), 16), __SSAT((
acc1
 >> 15), 16), 16);

313 *
	`__SIMD32
(
pOut
)++ =

314 
	`__PKHBT
(
	`__SSAT
((
acc2
 >> 15), 16), __SSAT((
acc3
 >> 15), 16), 16);

318 *
	`__SIMD32
(
pOut
)++ =

319 
	`__PKHBT
(
	`__SSAT
((
acc1
 >> 15), 16), __SSAT((
acc0
 >> 15), 16), 16);

320 *
	`__SIMD32
(
pOut
)++ =

321 
	`__PKHBT
(
	`__SSAT
((
acc3
 >> 15), 16), __SSAT((
acc2
 >> 15), 16), 16);

326 
pIn2
 = 
py
;

328 
pS¸©ch1
 += 4u;

333 
blkC¡
 = 
numPoöts
 & 0x3;

336 
blkC¡
 > 0)

339 
pS¸1
 = 
pS¸©ch1
;

342 
acc0
 = 0;

344 
èpC¡
 = (
§cBLí
) >> 1u;

346 
èpC¡
 > 0u)

350 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

353 
y1
 = *
	`__SIMD32
(
pIn2
)++;

355 
acc0
 = 
	`__SMLALD
(
x1
, 
y1
,ácc0);

358 
èpC¡
--;

361 
èpC¡
 = (
§cBLí
) & 1u;

364 
èpC¡
 > 0u)

368 
acc0
 +(*
pS¸1
++ * *
pIn2
++);

371 
èpC¡
--;

374 
blkC¡
--;

377 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

380 
pIn2
 = 
py
;

382 
pS¸©ch1
 += 1u;

387 
°©us
 = 
ARM_MATH_SUCCESS
;

392  (
°©us
);

393 
	}
}

397 
¨m_°©us
 
	$¨m_c⁄v_∑πül_›t_q15
(

398 
q15_t
 * 
pSrcA
,

399 
uöt32_t
 
§cALí
,

400 
q15_t
 * 
pSrcB
,

401 
uöt32_t
 
§cBLí
,

402 
q15_t
 * 
pD°
,

403 
uöt32_t
 
fú°Index
,

404 
uöt32_t
 
numPoöts
,

405 
q15_t
 * 
pS¸©ch1
,

406 
q15_t
 * 
pS¸©ch2
)

409 
q15_t
 *
pOut
 = 
pD°
;

410 
q15_t
 *
pS¸1
 = 
pS¸©ch1
;

411 
q15_t
 *
pS¸2
 = 
pS¸©ch2
;

412 
q63_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

413 
q15_t
 *
pIn1
;

414 
q15_t
 *
pIn2
;

415 
q15_t
 *
px
;

416 
q15_t
 *
py
;

417 
uöt32_t
 
j
, 
k
, 
blkC¡
;

418 
¨m_°©us
 
°©us
;

419 
uöt32_t
 
èpC¡
;

420 
q15_t
 
x10
, 
x11
, 
x20
, 
x21
;

421 
q15_t
 
y10
, 
y11
;

425 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

428 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

436 if(
§cALí
 >
§cBLí
)

439 
pIn1
 = 
pSrcA
;

442 
pIn2
 = 
pSrcB
;

447 
pIn1
 = 
pSrcB
;

450 
pIn2
 = 
pSrcA
;

453 
j
 = 
§cBLí
;

454 
§cBLí
 = 
§cALí
;

455 
§cALí
 = 
j
;

459 
py
 = 
pS¸©ch2
;

462 
pS¸2
 = 
pS¸©ch2
 + 
§cBLí
 - 1;

465 
px
 = 
pIn2
;

468 
k
 = 
§cBLí
 >> 2u;

472 
k
 > 0u)

475 *
pS¸2
-- = *
px
++;

476 *
pS¸2
-- = *
px
++;

477 *
pS¸2
-- = *
px
++;

478 *
pS¸2
-- = *
px
++;

481 
k
--;

486 
k
 = 
§cBLí
 % 0x4u;

488 
k
 > 0u)

491 *
pS¸2
-- = *
px
++;

494 
k
--;

498 
pS¸1
 = 
pS¸©ch1
;

501 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

504 
pS¸1
 +(
§cBLí
 - 1u);

510 
k
 = 
§cALí
 >> 2u;

514 
k
 > 0u)

517 *
pS¸1
++ = *
pIn1
++;

518 *
pS¸1
++ = *
pIn1
++;

519 *
pS¸1
++ = *
pIn1
++;

520 *
pS¸1
++ = *
pIn1
++;

523 
k
--;

528 
k
 = 
§cALí
 % 0x4u;

530 
k
 > 0u)

533 *
pS¸1
++ = *
pIn1
++;

536 
k
--;

541 
k
 = (
§cBLí
 - 1u) >> 2u;

545 
k
 > 0u)

548 *
pS¸1
++ = 0;

549 *
pS¸1
++ = 0;

550 *
pS¸1
++ = 0;

551 *
pS¸1
++ = 0;

554 
k
--;

559 
k
 = (
§cBLí
 - 1u) % 0x4u;

561 
k
 > 0u)

564 *
pS¸1
++ = 0;

567 
k
--;

572 
pIn2
 = 
py
;

574 
pS¸©ch1
 +
fú°Index
;

576 
pOut
 = 
pD°
 + 
fú°Index
;

579 
blkC¡
 = (
numPoöts
) >> 2;

581 
blkC¡
 > 0)

584 
pS¸1
 = 
pS¸©ch1
;

587 
acc0
 = 0;

588 
acc1
 = 0;

589 
acc2
 = 0;

590 
acc3
 = 0;

593 
x10
 = *
pS¸1
++;

594 
x11
 = *
pS¸1
++;

597 
x20
 = *
pS¸1
++;

598 
x21
 = *
pS¸1
++;

600 
èpC¡
 = (
§cBLí
) >> 2u;

602 
èpC¡
 > 0u)

606 
y10
 = *
pIn2
;

607 
y11
 = *(
pIn2
 + 1u);

610 
acc0
 +(
q63_t
Ë
x10
 *
y10
;

611 
acc0
 +(
q63_t
Ë
x11
 *
y11
;

612 
acc2
 +(
q63_t
Ë
x20
 *
y10
;

613 
acc2
 +(
q63_t
Ë
x21
 *
y11
;

616 
acc1
 +(
q63_t
Ë
x11
 *
y10
;

617 
acc1
 +(
q63_t
Ë
x20
 *
y11
;

620 
x10
 = *
pS¸1
;

621 
x11
 = *(
pS¸1
 + 1u);

624 
acc3
 +(
q63_t
Ë
x21
 *
y10
;

625 
acc3
 +(
q63_t
Ë
x10
 *
y11
;

628 
y10
 = *(
pIn2
 + 2u);

629 
y11
 = *(
pIn2
 + 3u);

632 
acc0
 +(
q63_t
Ë
x20
 *
y10
;

633 
acc0
 +(
q63_t
Ë
x21
 *
y11
;

634 
acc2
 +(
q63_t
Ë
x10
 *
y10
;

635 
acc2
 +(
q63_t
Ë
x11
 *
y11
;

636 
acc1
 +(
q63_t
Ë
x21
 *
y10
;

637 
acc1
 +(
q63_t
Ë
x10
 *
y11
;

640 
x20
 = *(
pS¸1
 + 2);

641 
x21
 = *(
pS¸1
 + 3);

644 
acc3
 +(
q63_t
Ë
x11
 *
y10
;

645 
acc3
 +(
q63_t
Ë
x20
 *
y11
;

648 
pIn2
 += 4u;

649 
pS¸1
 += 4u;

652 
èpC¡
--;

656 
pS¸1
 -= 4u;

659 
èpC¡
 = (
§cBLí
) & 3u;

661 
èpC¡
 > 0u)

664 
acc0
 +(*
pS¸1
++ * *
pIn2
);

665 
acc1
 +(*
pS¸1
++ * *
pIn2
);

666 
acc2
 +(*
pS¸1
++ * *
pIn2
);

667 
acc3
 +(*
pS¸1
++ * *
pIn2
++);

669 
pS¸1
 -= 3u;

672 
èpC¡
--;

675 
blkC¡
--;

679 *
pOut
++ = 
	`__SSAT
((
acc0
 >> 15), 16);

680 *
pOut
++ = 
	`__SSAT
((
acc1
 >> 15), 16);

681 *
pOut
++ = 
	`__SSAT
((
acc2
 >> 15), 16);

682 *
pOut
++ = 
	`__SSAT
((
acc3
 >> 15), 16);

686 
pIn2
 = 
py
;

688 
pS¸©ch1
 += 4u;

693 
blkC¡
 = 
numPoöts
 & 0x3;

696 
blkC¡
 > 0)

699 
pS¸1
 = 
pS¸©ch1
;

702 
acc0
 = 0;

704 
èpC¡
 = (
§cBLí
) >> 1u;

706 
èpC¡
 > 0u)

710 
x10
 = *
pS¸1
++;

711 
x11
 = *
pS¸1
++;

714 
y10
 = *
pIn2
++;

715 
y11
 = *
pIn2
++;

718 
acc0
 +(
q63_t
Ë
x10
 *
y10
;

719 
acc0
 +(
q63_t
Ë
x11
 *
y11
;

722 
èpC¡
--;

725 
èpC¡
 = (
§cBLí
) & 1u;

728 
èpC¡
 > 0u)

732 
acc0
 +(*
pS¸1
++ * *
pIn2
++);

735 
èpC¡
--;

738 
blkC¡
--;

741 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

745 
pIn2
 = 
py
;

747 
pS¸©ch1
 += 1u;

752 
°©us
 = 
ARM_MATH_SUCCESS
;

757  (
°©us
);

758 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_opt_q7.c

41 
	~"¨m_m©h.h
"

74 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


76 
¨m_°©us
 
	$¨m_c⁄v_∑πül_›t_q7
(

77 
q7_t
 * 
pSrcA
,

78 
uöt32_t
 
§cALí
,

79 
q7_t
 * 
pSrcB
,

80 
uöt32_t
 
§cBLí
,

81 
q7_t
 * 
pD°
,

82 
uöt32_t
 
fú°Index
,

83 
uöt32_t
 
numPoöts
,

84 
q15_t
 * 
pS¸©ch1
,

85 
q15_t
 * 
pS¸©ch2
)

88 
q15_t
 *
pS¸2
, *
pS¸1
;

89 
q15_t
 
x4
;

90 
q7_t
 *
pIn1
, *
pIn2
;

91 
uöt32_t
 
j
, 
k
, 
blkC¡
, 
èpC¡
;

92 
q7_t
 *
px
;

93 
q15_t
 *
py
;

94 
q31_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

95 
q31_t
 
x1
, 
x2
, 
x3
, 
y1
;

96 
¨m_°©us
 
°©us
;

97 
q7_t
 *
pOut
 = 
pD°
;

98 
q7_t
 
out0
, 
out1
, 
out2
, 
out3
;

101 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

104 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

112 if(
§cALí
 >
§cBLí
)

115 
pIn1
 = 
pSrcA
;

118 
pIn2
 = 
pSrcB
;

123 
pIn1
 = 
pSrcB
;

126 
pIn2
 = 
pSrcA
;

129 
j
 = 
§cBLí
;

130 
§cBLí
 = 
§cALí
;

131 
§cALí
 = 
j
;

135 
pS¸2
 = 
pS¸©ch2
;

138 
px
 = 
pIn2
 + 
§cBLí
 - 1;

141 
k
 = 
§cBLí
 >> 2u;

145 
k
 > 0u)

148 
x4
 = (
q15_t
Ë* 
px
--;

149 *
pS¸2
++ = 
x4
;

150 
x4
 = (
q15_t
Ë* 
px
--;

151 *
pS¸2
++ = 
x4
;

152 
x4
 = (
q15_t
Ë* 
px
--;

153 *
pS¸2
++ = 
x4
;

154 
x4
 = (
q15_t
Ë* 
px
--;

155 *
pS¸2
++ = 
x4
;

158 
k
--;

163 
k
 = 
§cBLí
 % 0x4u;

165 
k
 > 0u)

168 
x4
 = (
q15_t
Ë* 
px
--;

169 *
pS¸2
++ = 
x4
;

172 
k
--;

176 
pS¸1
 = 
pS¸©ch1
;

179 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

182 
pS¸1
 +(
§cBLí
 - 1u);

186 
k
 = 
§cALí
 >> 2u;

190 
k
 > 0u)

193 
x4
 = (
q15_t
Ë* 
pIn1
++;

194 *
pS¸1
++ = 
x4
;

195 
x4
 = (
q15_t
Ë* 
pIn1
++;

196 *
pS¸1
++ = 
x4
;

197 
x4
 = (
q15_t
Ë* 
pIn1
++;

198 *
pS¸1
++ = 
x4
;

199 
x4
 = (
q15_t
Ë* 
pIn1
++;

200 *
pS¸1
++ = 
x4
;

203 
k
--;

208 
k
 = 
§cALí
 % 0x4u;

210 
k
 > 0u)

213 
x4
 = (
q15_t
Ë* 
pIn1
++;

214 *
pS¸1
++ = 
x4
;

217 
k
--;

221 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

224 
pS¸1
 +(
§cBLí
 - 1u);

228 
py
 = 
pS¸©ch2
;

231 
pIn2
 = (
q7_t
 *Ë
py
;

233 
pS¸2
 = 
py
;

235 
pOut
 = 
pD°
 + 
fú°Index
;

237 
pS¸©ch1
 +
fú°Index
;

240 
blkC¡
 = (
numPoöts
) >> 2;

243 
blkC¡
 > 0)

246 
pS¸1
 = 
pS¸©ch1
;

249 
acc0
 = 0;

250 
acc1
 = 0;

251 
acc2
 = 0;

252 
acc3
 = 0;

255 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

258 
x2
 = *
	`__SIMD32
(
pS¸1
)++;

260 
èpC¡
 = (
§cBLí
) >> 2u;

262 
èpC¡
 > 0u)

266 
y1
 = 
	`_SIMD32_OFFSET
(
pS¸2
);

269 
acc0
 = 
	`__SMLAD
(
x1
, 
y1
,ácc0);

270 
acc2
 = 
	`__SMLAD
(
x2
, 
y1
,ácc2);

273 #i‚de‡
ARM_MATH_BIG_ENDIAN


274 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

276 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

280 
acc1
 = 
	`__SMLADX
(
x3
, 
y1
,ácc1);

283 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

286 #i‚de‡
ARM_MATH_BIG_ENDIAN


287 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

289 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

292 
acc3
 = 
	`__SMLADX
(
x3
, 
y1
,ácc3);

295 
y1
 = 
	`_SIMD32_OFFSET
(
pS¸2
 + 2u);

297 
acc0
 = 
	`__SMLAD
(
x2
, 
y1
,ácc0);

299 
acc2
 = 
	`__SMLAD
(
x1
, 
y1
,ácc2);

301 
acc1
 = 
	`__SMLADX
(
x3
, 
y1
,ácc1);

303 
x2
 = *
	`__SIMD32
(
pS¸1
)++;

305 #i‚de‡
ARM_MATH_BIG_ENDIAN


306 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

308 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

311 
acc3
 = 
	`__SMLADX
(
x3
, 
y1
,ácc3);

313 
pS¸2
 += 4u;

317 
èpC¡
--;

323 
pS¸1
 -= 4u;

327 
èpC¡
 = (
§cBLí
) & 3u;

329 
èpC¡
 > 0u)

333 
acc0
 +(*
pS¸1
++ * *
pS¸2
);

334 
acc1
 +(*
pS¸1
++ * *
pS¸2
);

335 
acc2
 +(*
pS¸1
++ * *
pS¸2
);

336 
acc3
 +(*
pS¸1
++ * *
pS¸2
++);

338 
pS¸1
 -= 3u;

341 
èpC¡
--;

344 
blkC¡
--;

347 
out0
 = (
q7_t
Ë(
	`__SSAT
(
acc0
 >> 7u, 8));

348 
out1
 = (
q7_t
Ë(
	`__SSAT
(
acc1
 >> 7u, 8));

349 
out2
 = (
q7_t
Ë(
	`__SSAT
(
acc2
 >> 7u, 8));

350 
out3
 = (
q7_t
Ë(
	`__SSAT
(
acc3
 >> 7u, 8));

352 *
	`__SIMD32
(
pOut
)++ = 
	`__PACKq7
(
out0
, 
out1
, 
out2
, 
out3
);

355 
pS¸2
 = 
py
;

357 
pS¸©ch1
 += 4u;

361 
blkC¡
 = (
numPoöts
) & 0x3;

364 
blkC¡
 > 0)

367 
pS¸1
 = 
pS¸©ch1
;

370 
acc0
 = 0;

372 
èpC¡
 = (
§cBLí
) >> 1u;

374 
èpC¡
 > 0u)

378 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

381 
y1
 = *
	`__SIMD32
(
pS¸2
)++;

383 
acc0
 = 
	`__SMLAD
(
x1
, 
y1
,ácc0);

386 
èpC¡
--;

389 
èpC¡
 = (
§cBLí
) & 1u;

392 
èpC¡
 > 0u)

396 
acc0
 +(*
pS¸1
++ * *
pS¸2
++);

399 
èpC¡
--;

402 
blkC¡
--;

405 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc0
 >> 7u, 8));

408 
pS¸2
 = 
py
;

410 
pS¸©ch1
 += 1u;

415 
°©us
 = 
ARM_MATH_SUCCESS
;

420  (
°©us
);

422 
	}
}

426 
¨m_°©us
 
	$¨m_c⁄v_∑πül_›t_q7
(

427 
q7_t
 * 
pSrcA
,

428 
uöt32_t
 
§cALí
,

429 
q7_t
 * 
pSrcB
,

430 
uöt32_t
 
§cBLí
,

431 
q7_t
 * 
pD°
,

432 
uöt32_t
 
fú°Index
,

433 
uöt32_t
 
numPoöts
,

434 
q15_t
 * 
pS¸©ch1
,

435 
q15_t
 * 
pS¸©ch2
)

438 
q15_t
 *
pS¸2
, *
pS¸1
;

439 
q15_t
 
x4
;

440 
q7_t
 *
pIn1
, *
pIn2
;

441 
uöt32_t
 
j
, 
k
, 
blkC¡
, 
èpC¡
;

442 
q7_t
 *
px
;

443 
q15_t
 *
py
;

444 
q31_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

445 
¨m_°©us
 
°©us
;

446 
q7_t
 *
pOut
 = 
pD°
;

447 
q15_t
 
x10
, 
x11
, 
x20
, 
x21
;

448 
q15_t
 
y10
, 
y11
;

451 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

454 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

462 if(
§cALí
 >
§cBLí
)

465 
pIn1
 = 
pSrcA
;

468 
pIn2
 = 
pSrcB
;

473 
pIn1
 = 
pSrcB
;

476 
pIn2
 = 
pSrcA
;

479 
j
 = 
§cBLí
;

480 
§cBLí
 = 
§cALí
;

481 
§cALí
 = 
j
;

485 
pS¸2
 = 
pS¸©ch2
;

488 
px
 = 
pIn2
 + 
§cBLí
 - 1;

491 
k
 = 
§cBLí
 >> 2u;

495 
k
 > 0u)

498 
x4
 = (
q15_t
Ë* 
px
--;

499 *
pS¸2
++ = 
x4
;

500 
x4
 = (
q15_t
Ë* 
px
--;

501 *
pS¸2
++ = 
x4
;

502 
x4
 = (
q15_t
Ë* 
px
--;

503 *
pS¸2
++ = 
x4
;

504 
x4
 = (
q15_t
Ë* 
px
--;

505 *
pS¸2
++ = 
x4
;

508 
k
--;

513 
k
 = 
§cBLí
 % 0x4u;

515 
k
 > 0u)

518 
x4
 = (
q15_t
Ë* 
px
--;

519 *
pS¸2
++ = 
x4
;

522 
k
--;

526 
pS¸1
 = 
pS¸©ch1
;

529 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

532 
pS¸1
 +(
§cBLí
 - 1u);

536 
k
 = 
§cALí
 >> 2u;

540 
k
 > 0u)

543 
x4
 = (
q15_t
Ë* 
pIn1
++;

544 *
pS¸1
++ = 
x4
;

545 
x4
 = (
q15_t
Ë* 
pIn1
++;

546 *
pS¸1
++ = 
x4
;

547 
x4
 = (
q15_t
Ë* 
pIn1
++;

548 *
pS¸1
++ = 
x4
;

549 
x4
 = (
q15_t
Ë* 
pIn1
++;

550 *
pS¸1
++ = 
x4
;

553 
k
--;

558 
k
 = 
§cALí
 % 0x4u;

560 
k
 > 0u)

563 
x4
 = (
q15_t
Ë* 
pIn1
++;

564 *
pS¸1
++ = 
x4
;

567 
k
--;

571 
k
 = (
§cBLí
 - 1u) >> 2u;

575 
k
 > 0u)

578 *
pS¸1
++ = 0;

579 *
pS¸1
++ = 0;

580 *
pS¸1
++ = 0;

581 *
pS¸1
++ = 0;

584 
k
--;

589 
k
 = (
§cBLí
 - 1u) % 0x4u;

591 
k
 > 0u)

594 *
pS¸1
++ = 0;

597 
k
--;

602 
py
 = 
pS¸©ch2
;

605 
pIn2
 = (
q7_t
 *Ë
py
;

607 
pS¸2
 = 
py
;

609 
pOut
 = 
pD°
 + 
fú°Index
;

611 
pS¸©ch1
 +
fú°Index
;

614 
blkC¡
 = (
numPoöts
) >> 2;

617 
blkC¡
 > 0)

620 
pS¸1
 = 
pS¸©ch1
;

623 
acc0
 = 0;

624 
acc1
 = 0;

625 
acc2
 = 0;

626 
acc3
 = 0;

629 
x10
 = *
pS¸1
++;

630 
x11
 = *
pS¸1
++;

633 
x20
 = *
pS¸1
++;

634 
x21
 = *
pS¸1
++;

636 
èpC¡
 = (
§cBLí
) >> 2u;

638 
èpC¡
 > 0u)

642 
y10
 = *
pS¸2
;

643 
y11
 = *(
pS¸2
 + 1u);

646 
acc0
 +(
q31_t
Ë
x10
 *
y10
;

647 
acc0
 +(
q31_t
Ë
x11
 *
y11
;

648 
acc2
 +(
q31_t
Ë
x20
 *
y10
;

649 
acc2
 +(
q31_t
Ë
x21
 *
y11
;

652 
acc1
 +(
q31_t
Ë
x11
 *
y10
;

653 
acc1
 +(
q31_t
Ë
x20
 *
y11
;

656 
x10
 = *
pS¸1
;

657 
x11
 = *(
pS¸1
 + 1u);

660 
acc3
 +(
q31_t
Ë
x21
 *
y10
;

661 
acc3
 +(
q31_t
Ë
x10
 *
y11
;

664 
y10
 = *(
pS¸2
 + 2u);

665 
y11
 = *(
pS¸2
 + 3u);

668 
acc0
 +(
q31_t
Ë
x20
 *
y10
;

669 
acc0
 +(
q31_t
Ë
x21
 *
y11
;

670 
acc2
 +(
q31_t
Ë
x10
 *
y10
;

671 
acc2
 +(
q31_t
Ë
x11
 *
y11
;

672 
acc1
 +(
q31_t
Ë
x21
 *
y10
;

673 
acc1
 +(
q31_t
Ë
x10
 *
y11
;

676 
x20
 = *(
pS¸1
 + 2);

677 
x21
 = *(
pS¸1
 + 3);

680 
acc3
 +(
q31_t
Ë
x11
 *
y10
;

681 
acc3
 +(
q31_t
Ë
x20
 *
y11
;

685 
pS¸1
 += 4u;

686 
pS¸2
 += 4u;

689 
èpC¡
--;

695 
pS¸1
 -= 4u;

699 
èpC¡
 = (
§cBLí
) & 3u;

701 
èpC¡
 > 0u)

705 
acc0
 +(*
pS¸1
++ * *
pS¸2
);

706 
acc1
 +(*
pS¸1
++ * *
pS¸2
);

707 
acc2
 +(*
pS¸1
++ * *
pS¸2
);

708 
acc3
 +(*
pS¸1
++ * *
pS¸2
++);

710 
pS¸1
 -= 3u;

713 
èpC¡
--;

716 
blkC¡
--;

719 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc0
 >> 7u, 8));

720 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc1
 >> 7u, 8));

721 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc2
 >> 7u, 8));

722 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc3
 >> 7u, 8));

725 
pS¸2
 = 
py
;

727 
pS¸©ch1
 += 4u;

731 
blkC¡
 = (
numPoöts
) & 0x3;

734 
blkC¡
 > 0)

737 
pS¸1
 = 
pS¸©ch1
;

740 
acc0
 = 0;

742 
èpC¡
 = (
§cBLí
) >> 1u;

744 
èpC¡
 > 0u)

748 
x10
 = *
pS¸1
++;

749 
x11
 = *
pS¸1
++;

752 
y10
 = *
pS¸2
++;

753 
y11
 = *
pS¸2
++;

756 
acc0
 +(
q31_t
Ë
x10
 *
y10
;

757 
acc0
 +(
q31_t
Ë
x11
 *
y11
;

760 
èpC¡
--;

763 
èpC¡
 = (
§cBLí
) & 1u;

766 
èpC¡
 > 0u)

770 
acc0
 +(*
pS¸1
++ * *
pS¸2
++);

773 
èpC¡
--;

776 
blkC¡
--;

779 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc0
 >> 7u, 8));

782 
pS¸2
 = 
py
;

784 
pS¸©ch1
 += 1u;

789 
°©us
 = 
ARM_MATH_SUCCESS
;

793  (
°©us
);

795 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_q15.c

41 
	~"¨m_m©h.h
"

71 
¨m_°©us
 
	$¨m_c⁄v_∑πül_q15
(

72 
q15_t
 * 
pSrcA
,

73 
uöt32_t
 
§cALí
,

74 
q15_t
 * 
pSrcB
,

75 
uöt32_t
 
§cBLí
,

76 
q15_t
 * 
pD°
,

77 
uöt32_t
 
fú°Index
,

78 
uöt32_t
 
numPoöts
)

81 #i‡(
	`deföed
(
ARM_MATH_CM4
Ë|| deföed(
ARM_MATH_CM3
)Ë&& !deföed(
UNALIGNED_SUPPORT_DISABLE
)

85 
q15_t
 *
pIn1
;

86 
q15_t
 *
pIn2
;

87 
q15_t
 *
pOut
 = 
pD°
;

88 
q63_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

89 
q15_t
 *
px
;

90 
q15_t
 *
py
;

91 
q15_t
 *
pSrc1
, *
pSrc2
;

92 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

93 
uöt32_t
 
j
, 
k
, 
cou¡
, 
check
, 
blkC¡
;

94 
öt32_t
 
blockSize1
, 
blockSize2
, 
blockSize3
;

95 
¨m_°©us
 
°©us
;

98 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

101 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

109 if(
§cALí
 >
§cBLí
)

112 
pIn1
 = 
pSrcA
;

115 
pIn2
 = 
pSrcB
;

120 
pIn1
 = 
pSrcB
;

123 
pIn2
 = 
pSrcA
;

126 
j
 = 
§cBLí
;

127 
§cBLí
 = 
§cALí
;

128 
§cALí
 = 
j
;

133 
check
 = 
fú°Index
 + 
numPoöts
;

134 
blockSize3
 = ((
öt32_t
)
check
 > (öt32_t)
§cALí
) ? (int32_t)check - (int32_t)srcALen : 0;

135 
blockSize3
 = ((
öt32_t
)
fú°Index
 > (öt32_t)
§cALí
 - 1) ? blockSize3 - (int32_t)firstIndex + (int32_t)srcALen : blockSize3;

136 
blockSize1
 = (((
öt32_t
Ë
§cBLí
 - 1Ë- (öt32_tË
fú°Index
);

137 
blockSize1
 = (blockSize1 > 0Ë? ((
check
 > (
§cBLí
 - 1u)) ? blockSize1 :

138 (
öt32_t
Ë
numPoöts
) : 0;

139 
blockSize2
 = (
öt32_t
Ë
check
 - ((
blockSize3
 + 
blockSize1
) +

140 (
öt32_t
Ë
fú°Index
);

141 
blockSize2
 = (blockSize2 > 0) ? blockSize2 : 0;

154 
pOut
 = 
pD°
 + 
fú°Index
;

170 
cou¡
 = 1u + 
fú°Index
;

173 
px
 = 
pIn1
;

176 
pSrc2
 = 
pIn2
 + 
fú°Index
;

177 
py
 = 
pSrc2
;

188 (
cou¡
 < 4uË&& (
blockSize1
 > 0))

191 
sum
 = 0;

195 
k
 = 
cou¡
;

197 
k
 > 0u)

200 
sum
 = 
	`__SMLALD
(*
px
++, *
py
--, sum);

203 
k
--;

207 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
sum
 >> 15), 16));

210 
py
 = ++
pSrc2
;

211 
px
 = 
pIn1
;

214 
cou¡
++;

217 
blockSize1
--;

224 
py
 =Öy - 1;

226 
blockSize1
 > 0)

229 
sum
 = 0;

232 
k
 = 
cou¡
 >> 2u;

236 
k
 > 0u)

240 
sum
 = 
	`__SMLALDX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

242 
sum
 = 
	`__SMLALDX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

245 
k
--;

250 
py
 =Öy + 1u;

254 
k
 = 
cou¡
 % 0x4u;

256 
k
 > 0u)

259 
sum
 = 
	`__SMLALD
(*
px
++, *
py
--, sum);

262 
k
--;

266 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
sum
 >> 15), 16));

269 
py
 = ++
pSrc2
 - 1u;

270 
px
 = 
pIn1
;

273 
cou¡
++;

276 
blockSize1
--;

290 if((
öt32_t
)
fú°Index
 - (öt32_t)
§cBLí
 + 1 > 0)

292 
px
 = 
pIn1
 + 
fú°Index
 - 
§cBLí
 + 1;

296 
px
 = 
pIn1
;

300 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

301 
py
 = 
pSrc2
;

304 
cou¡
 = 0u;

314 if(
§cBLí
 >= 4u)

317 
blkC¡
 = 
blockSize2
 >> 2u;

319 
blkC¡
 > 0u)

321 
py
 =Öy - 1u;

324 
acc0
 = 0;

325 
acc1
 = 0;

326 
acc2
 = 0;

327 
acc3
 = 0;

331 
x0
 = *
	`__SIMD32
(
px
);

333 
x1
 = 
	`_SIMD32_OFFSET
(
px
+1);

334 
px
+= 2u;

338 
k
 = 
§cBLí
 >> 2u;

346 
c0
 = *
	`__SIMD32
(
py
)--;

349 
acc0
 = 
	`__SMLALDX
(
x0
, 
c0
,ácc0);

352 
acc1
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc1);

355 
x2
 = *
	`__SIMD32
(
px
);

358 
x3
 = 
	`_SIMD32_OFFSET
(
px
+1);

361 
acc2
 = 
	`__SMLALDX
(
x2
, 
c0
,ácc2);

364 
acc3
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc3);

367 
c0
 = *
	`__SIMD32
(
py
)--;

370 
acc0
 = 
	`__SMLALDX
(
x2
, 
c0
,ácc0);

373 
acc1
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc1);

376 
x0
 = 
	`_SIMD32_OFFSET
(
px
+2);

379 
x1
 = 
	`_SIMD32_OFFSET
(
px
+3);

380 
px
 += 4u;

383 
acc2
 = 
	`__SMLALDX
(
x0
, 
c0
,ácc2);

386 
acc3
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc3);

388 } --
k
);

395 
k
 = 
§cBLí
 % 0x4u;

397 if(
k
 == 1u)

400 
c0
 = *(
py
+1);

402 #ifde‡ 
ARM_MATH_BIG_ENDIAN


404 
c0
 = c0 << 16u;

408 
c0
 = c0 & 0x0000FFFF;

413 
x3
 = *
	`__SIMD32
(
px
);

414 
px
++;

417 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

418 
acc1
 = 
	`__SMLALD
(
x1
, 
c0
,ácc1);

419 
acc2
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc2);

420 
acc3
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc3);

423 if(
k
 == 2u)

426 
c0
 = 
	`_SIMD32_OFFSET
(
py
);

429 
x3
 = *
	`__SIMD32
(
px
);

432 
x2
 = 
	`_SIMD32_OFFSET
(
px
+1);

433 
px
 += 2u;

436 
acc0
 = 
	`__SMLALDX
(
x0
, 
c0
,ácc0);

437 
acc1
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc1);

438 
acc2
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc2);

439 
acc3
 = 
	`__SMLALDX
(
x2
, 
c0
,ácc3);

442 if(
k
 == 3u)

445 
c0
 = 
	`_SIMD32_OFFSET
(
py
);

448 
x3
 = *
	`__SIMD32
(
px
);

451 
x2
 = 
	`_SIMD32_OFFSET
(
px
+1);

454 
acc0
 = 
	`__SMLALDX
(
x0
, 
c0
,ácc0);

455 
acc1
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc1);

456 
acc2
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc2);

457 
acc3
 = 
	`__SMLALDX
(
x2
, 
c0
,ácc3);

459 
c0
 = *(
py
-1);

461 #ifde‡ 
ARM_MATH_BIG_ENDIAN


463 
c0
 = c0 << 16u;

466 
c0
 = c0 & 0x0000FFFF;

470 
x3
 = 
	`_SIMD32_OFFSET
(
px
+2);

471 
px
 += 3u;

474 
acc0
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc0);

475 
acc1
 = 
	`__SMLALD
(
x2
, 
c0
,ácc1);

476 
acc2
 = 
	`__SMLALDX
(
x2
, 
c0
,ácc2);

477 
acc3
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc3);

483 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


485 *
	`__SIMD32
(
pOut
)++ =

486 
	`__PKHBT
(
	`__SSAT
((
acc0
 >> 15), 16), __SSAT((
acc1
 >> 15), 16), 16);

487 *
	`__SIMD32
(
pOut
)++ =

488 
	`__PKHBT
(
	`__SSAT
((
acc2
 >> 15), 16), __SSAT((
acc3
 >> 15), 16), 16);

492 *
	`__SIMD32
(
pOut
)++ =

493 
	`__PKHBT
(
	`__SSAT
((
acc1
 >> 15), 16), __SSAT((
acc0
 >> 15), 16), 16);

494 *
	`__SIMD32
(
pOut
)++ =

495 
	`__PKHBT
(
	`__SSAT
((
acc3
 >> 15), 16), __SSAT((
acc2
 >> 15), 16), 16);

500 
cou¡
 += 4u;

503 
px
 = 
pIn1
 + 
cou¡
;

504 
py
 = 
pSrc2
;

507 
blkC¡
--;

512 
blkC¡
 = (
uöt32_t
Ë
blockSize2
 % 0x4u;

514 
blkC¡
 > 0u)

517 
sum
 = 0;

520 
k
 = 
§cBLí
 >> 2u;

524 
k
 > 0u)

527 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
px
++ * *
py
--);

528 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
px
++ * *
py
--);

529 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
px
++ * *
py
--);

530 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
px
++ * *
py
--);

533 
k
--;

538 
k
 = 
§cBLí
 % 0x4u;

540 
k
 > 0u)

543 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
px
++ * *
py
--);

546 
k
--;

550 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
(
sum
 >> 15, 16));

553 
cou¡
++;

556 
px
 = 
pIn1
 + 
cou¡
;

557 
py
 = 
pSrc2
;

560 
blkC¡
--;

567 
blkC¡
 = (
uöt32_t
Ë
blockSize2
;

569 
blkC¡
 > 0u)

572 
sum
 = 0;

575 
k
 = 
§cBLí
;

577 
k
 > 0u)

580 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
px
++ * *
py
--);

583 
k
--;

587 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
(
sum
 >> 15, 16));

590 
cou¡
++;

593 
px
 = 
pIn1
 + 
cou¡
;

594 
py
 = 
pSrc2
;

597 
blkC¡
--;

615 
cou¡
 = 
§cBLí
 - 1u;

618 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

619 
px
 = 
pSrc1
;

622 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

623 
pIn2
 = 
pSrc2
 - 1u;

624 
py
 = 
pIn2
;

635 
j
 = 
cou¡
 >> 2u;

637 (
j
 > 0uË&& (
blockSize3
 > 0))

640 
sum
 = 0;

643 
k
 = 
cou¡
 >> 2u;

647 
k
 > 0u)

651 
sum
 = 
	`__SMLALDX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

654 
sum
 = 
	`__SMLALDX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

657 
k
--;

662 
py
 =Öy + 1u;

666 
k
 = 
cou¡
 % 0x4u;

668 
k
 > 0u)

671 
sum
 = 
	`__SMLALD
(*
px
++, *
py
--, sum);

674 
k
--;

678 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
sum
 >> 15), 16));

681 
px
 = ++
pSrc1
;

682 
py
 = 
pIn2
;

685 
cou¡
--;

688 
blockSize3
--;

690 
j
--;

696 
py
 =Öy + 1u;

698 
blockSize3
 > 0)

701 
sum
 = 0;

704 
k
 = 
cou¡
;

706 
k
 > 0u)

710 
sum
 = 
	`__SMLALD
(*
px
++, *
py
--, sum);

713 
k
--;

717 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
sum
 >> 15), 16));

720 
px
 = ++
pSrc1
;

721 
py
 = 
pSrc2
;

724 
cou¡
--;

727 
blockSize3
--;

731 
°©us
 = 
ARM_MATH_SUCCESS
;

735  (
°©us
);

741 
q15_t
 *
pIn1
 = 
pSrcA
;

742 
q15_t
 *
pIn2
 = 
pSrcB
;

743 
q63_t
 
sum
;

744 
uöt32_t
 
i
, 
j
;

745 
¨m_°©us
 
°©us
;

748 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

751 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

756 
i
 = 
fú°Index
; i <(fú°Index + 
numPoöts
 - 1); i++)

759 
sum
 = 0;

762 
j
 = 0; j <
i
; j++)

765 if(((
i
 - 
j
Ë< 
§cBLí
Ë&& (j < 
§cALí
))

768 
sum
 +((
q31_t
Ë
pIn1
[
j
] * (
pIn2
[
i
 - j]));

773 
pD°
[
i
] = (
q15_t
Ë
	`__SSAT
((
sum
 >> 15u), 16u);

776 
°©us
 = 
ARM_MATH_SUCCESS
;

778  (
°©us
);

782 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_q31.c

41 
	~"¨m_m©h.h
"

66 
¨m_°©us
 
	$¨m_c⁄v_∑πül_q31
(

67 
q31_t
 * 
pSrcA
,

68 
uöt32_t
 
§cALí
,

69 
q31_t
 * 
pSrcB
,

70 
uöt32_t
 
§cBLí
,

71 
q31_t
 * 
pD°
,

72 
uöt32_t
 
fú°Index
,

73 
uöt32_t
 
numPoöts
)

77 #i‚de‡
ARM_MATH_CM0_FAMILY


81 
q31_t
 *
pIn1
;

82 
q31_t
 *
pIn2
;

83 
q31_t
 *
pOut
 = 
pD°
;

84 
q31_t
 *
px
;

85 
q31_t
 *
py
;

86 
q31_t
 *
pSrc1
, *
pSrc2
;

87 
q63_t
 
sum
, 
acc0
, 
acc1
, 
acc2
;

88 
q31_t
 
x0
, 
x1
, 
x2
, 
c0
;

89 
uöt32_t
 
j
, 
k
, 
cou¡
, 
check
, 
blkC¡
;

90 
öt32_t
 
blockSize1
, 
blockSize2
, 
blockSize3
;

91 
¨m_°©us
 
°©us
;

95 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

98 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

106 if(
§cALí
 >
§cBLí
)

109 
pIn1
 = 
pSrcA
;

112 
pIn2
 = 
pSrcB
;

117 
pIn1
 = 
pSrcB
;

120 
pIn2
 = 
pSrcA
;

123 
j
 = 
§cBLí
;

124 
§cBLí
 = 
§cALí
;

125 
§cALí
 = 
j
;

130 
check
 = 
fú°Index
 + 
numPoöts
;

131 
blockSize3
 = ((
öt32_t
)
check
 > (öt32_t)
§cALí
) ? (int32_t)check - (int32_t)srcALen : 0;

132 
blockSize3
 = ((
öt32_t
)
fú°Index
 > (öt32_t)
§cALí
 - 1) ? blockSize3 - (int32_t)firstIndex + (int32_t)srcALen : blockSize3;

133 
blockSize1
 = (((
öt32_t
Ë
§cBLí
 - 1Ë- (öt32_tË
fú°Index
);

134 
blockSize1
 = (blockSize1 > 0Ë? ((
check
 > (
§cBLí
 - 1u)) ? blockSize1 :

135 (
öt32_t
Ë
numPoöts
) : 0;

136 
blockSize2
 = (
öt32_t
Ë
check
 - ((
blockSize3
 + 
blockSize1
) +

137 (
öt32_t
Ë
fú°Index
);

138 
blockSize2
 = (blockSize2 > 0) ? blockSize2 : 0;

151 
pOut
 = 
pD°
 + 
fú°Index
;

167 
cou¡
 = 1u + 
fú°Index
;

170 
px
 = 
pIn1
;

173 
pSrc2
 = 
pIn2
 + 
fú°Index
;

174 
py
 = 
pSrc2
;

181 
blockSize1
 > 0)

184 
sum
 = 0;

187 
k
 = 
cou¡
 >> 2u;

191 
k
 > 0u)

194 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

196 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

198 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

200 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

203 
k
--;

208 
k
 = 
cou¡
 % 0x4u;

210 
k
 > 0u)

213 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

216 
k
--;

220 *
pOut
++ = (
q31_t
Ë(
sum
 >> 31);

223 
py
 = ++
pSrc2
;

224 
px
 = 
pIn1
;

227 
cou¡
++;

230 
blockSize1
--;

244 if((
öt32_t
)
fú°Index
 - (öt32_t)
§cBLí
 + 1 > 0)

246 
px
 = 
pIn1
 + 
fú°Index
 - 
§cBLí
 + 1;

250 
px
 = 
pIn1
;

254 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

255 
py
 = 
pSrc2
;

258 
cou¡
 = 0u;

267 if(
§cBLí
 >= 4u)

271 
blkC¡
 = 
blockSize2
 / 3;

272 
blkC¡
 > 0u)

275 
acc0
 = 0;

276 
acc1
 = 0;

277 
acc2
 = 0;

280 
x0
 = *(
px
++);

281 
x1
 = *(
px
++);

284 
k
 = 
§cBLí
 / 3;

291 
c0
 = *(
py
);

294 
x2
 = *(
px
);

298 
acc0
 +(
q63_t
Ë
x0
 *
c0
;

300 
acc1
 +(
q63_t
Ë
x1
 *
c0
;

302 
acc2
 +(
q63_t
Ë
x2
 *
c0
;

305 
c0
 = *(
py
 - 1u);

308 
x0
 = *(
px
 + 1u);

312 
acc0
 +(
q63_t
Ë
x1
 *
c0
;

314 
acc1
 +(
q63_t
Ë
x2
 *
c0
;

316 
acc2
 +(
q63_t
Ë
x0
 *
c0
;

319 
c0
 = *(
py
 - 2u);

322 
x1
 = *(
px
 + 2u);

326 
acc0
 +(
q63_t
Ë
x2
 *
c0
;

328 
acc1
 +(
q63_t
Ë
x0
 *
c0
;

330 
acc2
 +(
q63_t
Ë
x1
 *
c0
;

333 
px
 += 3u;

335 
py
 -= 3u;

337 } --
k
);

341 
k
 = 
§cBLí
 - (3 * (srcBLen / 3));

343 
k
 > 0u)

346 
c0
 = *(
py
--);

349 
x2
 = *(
px
++);

353 
acc0
 +(
q63_t
Ë
x0
 *
c0
;

355 
acc1
 +(
q63_t
Ë
x1
 *
c0
;

357 
acc2
 +(
q63_t
Ë
x2
 *
c0
;

360 
x0
 = 
x1
;

361 
x1
 = 
x2
;

364 
k
--;

368 *
pOut
++ = (
q31_t
Ë(
acc0
 >> 31);

369 *
pOut
++ = (
q31_t
Ë(
acc1
 >> 31);

370 *
pOut
++ = (
q31_t
Ë(
acc2
 >> 31);

373 
cou¡
 += 3u;

376 
px
 = 
pIn1
 + 
cou¡
;

377 
py
 = 
pSrc2
;

380 
blkC¡
--;

385 
blkC¡
 = 
blockSize2
 - 3 * (blockSize2 / 3);

387 
blkC¡
 > 0u)

390 
sum
 = 0;

393 
k
 = 
§cBLí
 >> 2u;

397 
k
 > 0u)

400 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

401 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

402 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

403 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

406 
k
--;

411 
k
 = 
§cBLí
 % 0x4u;

413 
k
 > 0u)

416 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

419 
k
--;

423 *
pOut
++ = (
q31_t
Ë(
sum
 >> 31);

426 
cou¡
++;

429 
px
 = 
pIn1
 + 
cou¡
;

430 
py
 = 
pSrc2
;

433 
blkC¡
--;

440 
blkC¡
 = (
uöt32_t
Ë
blockSize2
;

442 
blkC¡
 > 0u)

445 
sum
 = 0;

448 
k
 = 
§cBLí
;

450 
k
 > 0u)

453 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

456 
k
--;

460 *
pOut
++ = (
q31_t
Ë(
sum
 >> 31);

463 
cou¡
++;

466 
px
 = 
pIn1
 + 
cou¡
;

467 
py
 = 
pSrc2
;

470 
blkC¡
--;

488 
cou¡
 = 
§cBLí
 - 1u;

491 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

492 
px
 = 
pSrc1
;

495 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

496 
py
 = 
pSrc2
;

502 
blockSize3
 > 0)

505 
sum
 = 0;

508 
k
 = 
cou¡
 >> 2u;

512 
k
 > 0u)

514 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

515 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

516 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

517 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

520 
k
--;

525 
k
 = 
cou¡
 % 0x4u;

527 
k
 > 0u)

530 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

533 
k
--;

537 *
pOut
++ = (
q31_t
Ë(
sum
 >> 31);

540 
px
 = ++
pSrc1
;

541 
py
 = 
pSrc2
;

544 
cou¡
--;

547 
blockSize3
--;

552 
°©us
 = 
ARM_MATH_SUCCESS
;

556  (
°©us
);

562 
q31_t
 *
pIn1
 = 
pSrcA
;

563 
q31_t
 *
pIn2
 = 
pSrcB
;

564 
q63_t
 
sum
;

565 
uöt32_t
 
i
, 
j
;

566 
¨m_°©us
 
°©us
;

569 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

572 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

577 
i
 = 
fú°Index
; i <(fú°Index + 
numPoöts
 - 1); i++)

580 
sum
 = 0;

583 
j
 = 0; j <
i
; j++)

586 if(((
i
 - 
j
Ë< 
§cBLí
Ë&& (j < 
§cALí
))

589 
sum
 +((
q63_t
Ë
pIn1
[
j
] * (
pIn2
[
i
 - j]));

594 
pD°
[
i
] = (
q31_t
Ë(
sum
 >> 31u);

597 
°©us
 = 
ARM_MATH_SUCCESS
;

599  (
°©us
);

603 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_q7.c

41 
	~"¨m_m©h.h
"

68 
¨m_°©us
 
	$¨m_c⁄v_∑πül_q7
(

69 
q7_t
 * 
pSrcA
,

70 
uöt32_t
 
§cALí
,

71 
q7_t
 * 
pSrcB
,

72 
uöt32_t
 
§cBLí
,

73 
q7_t
 * 
pD°
,

74 
uöt32_t
 
fú°Index
,

75 
uöt32_t
 
numPoöts
)

79 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
q7_t
 *
pIn1
;

84 
q7_t
 *
pIn2
;

85 
q7_t
 *
pOut
 = 
pD°
;

86 
q7_t
 *
px
;

87 
q7_t
 *
py
;

88 
q7_t
 *
pSrc1
, *
pSrc2
;

89 
q31_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

90 
q31_t
 
öput1
, 
öput2
;

91 
q15_t
 
ö1
, 
ö2
;

92 
q7_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
, 
c1
;

93 
uöt32_t
 
j
, 
k
, 
cou¡
, 
check
, 
blkC¡
;

94 
öt32_t
 
blockSize1
, 
blockSize2
, 
blockSize3
;

95 
¨m_°©us
 
°©us
;

99 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

102 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

110 if(
§cALí
 >
§cBLí
)

113 
pIn1
 = 
pSrcA
;

116 
pIn2
 = 
pSrcB
;

121 
pIn1
 = 
pSrcB
;

124 
pIn2
 = 
pSrcA
;

127 
j
 = 
§cBLí
;

128 
§cBLí
 = 
§cALí
;

129 
§cALí
 = 
j
;

134 
check
 = 
fú°Index
 + 
numPoöts
;

135 
blockSize3
 = ((
öt32_t
)
check
 > (öt32_t)
§cALí
) ? (int32_t)check - (int32_t)srcALen : 0;

136 
blockSize3
 = ((
öt32_t
)
fú°Index
 > (öt32_t)
§cALí
 - 1) ? blockSize3 - (int32_t)firstIndex + (int32_t)srcALen : blockSize3;

137 
blockSize1
 = (((
öt32_t
Ë
§cBLí
 - 1Ë- (öt32_tË
fú°Index
);

138 
blockSize1
 = (blockSize1 > 0Ë? ((
check
 > (
§cBLí
 - 1u)) ? blockSize1 :

139 (
öt32_t
Ë
numPoöts
) : 0;

140 
blockSize2
 = (
öt32_t
Ë
check
 - ((
blockSize3
 + 
blockSize1
) +

141 (
öt32_t
Ë
fú°Index
);

142 
blockSize2
 = (blockSize2 > 0) ? blockSize2 : 0;

155 
pOut
 = 
pD°
 + 
fú°Index
;

171 
cou¡
 = 1u + 
fú°Index
;

174 
px
 = 
pIn1
;

177 
pSrc2
 = 
pIn2
 + 
fú°Index
;

178 
py
 = 
pSrc2
;

185 
blockSize1
 > 0)

188 
sum
 = 0;

191 
k
 = 
cou¡
 >> 2u;

195 
k
 > 0u)

198 
ö1
 = (
q15_t
Ë* 
px
++;

199 
ö2
 = (
q15_t
Ë* 
px
++;

200 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

203 
ö1
 = (
q15_t
Ë* 
py
--;

204 
ö2
 = (
q15_t
Ë* 
py
--;

205 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

209 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

212 
ö1
 = (
q15_t
Ë* 
px
++;

213 
ö2
 = (
q15_t
Ë* 
px
++;

214 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

217 
ö1
 = (
q15_t
Ë* 
py
--;

218 
ö2
 = (
q15_t
Ë* 
py
--;

219 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

223 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

226 
k
--;

231 
k
 = 
cou¡
 % 0x4u;

233 
k
 > 0u)

236 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

239 
k
--;

243 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
sum
 >> 7, 8));

246 
py
 = ++
pSrc2
;

247 
px
 = 
pIn1
;

250 
cou¡
++;

253 
blockSize1
--;

267 if((
öt32_t
)
fú°Index
 - (öt32_t)
§cBLí
 + 1 > 0)

269 
px
 = 
pIn1
 + 
fú°Index
 - 
§cBLí
 + 1;

273 
px
 = 
pIn1
;

277 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

278 
py
 = 
pSrc2
;

281 
cou¡
 = 0u;

290 if(
§cBLí
 >= 4u)

293 
blkC¡
 = ((
uöt32_t
Ë
blockSize2
 >> 2u);

295 
blkC¡
 > 0u)

298 
acc0
 = 0;

299 
acc1
 = 0;

300 
acc2
 = 0;

301 
acc3
 = 0;

304 
x0
 = *(
px
++);

305 
x1
 = *(
px
++);

306 
x2
 = *(
px
++);

309 
k
 = 
§cBLí
 >> 2u;

316 
c0
 = *(
py
--);

318 
c1
 = *(
py
--);

321 
x3
 = *(
px
++);

324 
ö1
 = (
q15_t
Ë
x0
;

325 
ö2
 = (
q15_t
Ë
x1
;

327 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

330 
ö1
 = (
q15_t
Ë
c0
;

331 
ö2
 = (
q15_t
Ë
c1
;

333 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

336 
acc0
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc0);

339 
ö1
 = (
q15_t
Ë
x1
;

340 
ö2
 = (
q15_t
Ë
x2
;

342 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

345 
acc1
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc1);

348 
ö1
 = (
q15_t
Ë
x2
;

349 
ö2
 = (
q15_t
Ë
x3
;

351 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

354 
acc2
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc2);

357 
x0
 = *(
px
++);

360 
ö1
 = (
q15_t
Ë
x3
;

361 
ö2
 = (
q15_t
Ë
x0
;

363 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

366 
acc3
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc3);

369 
c0
 = *(
py
--);

371 
c1
 = *(
py
--);

374 
x1
 = *(
px
++);

377 
ö1
 = (
q15_t
Ë
x2
;

378 
ö2
 = (
q15_t
Ë
x3
;

380 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

383 
ö1
 = (
q15_t
Ë
c0
;

384 
ö2
 = (
q15_t
Ë
c1
;

386 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

389 
acc0
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc0);

392 
ö1
 = (
q15_t
Ë
x3
;

393 
ö2
 = (
q15_t
Ë
x0
;

395 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

398 
acc1
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc1);

401 
ö1
 = (
q15_t
Ë
x0
;

402 
ö2
 = (
q15_t
Ë
x1
;

404 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

407 
acc2
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc2);

410 
x2
 = *(
px
++);

413 
ö1
 = (
q15_t
Ë
x1
;

414 
ö2
 = (
q15_t
Ë
x2
;

416 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

419 
acc3
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc3);

421 } --
k
);

425 
k
 = 
§cBLí
 % 0x4u;

427 
k
 > 0u)

430 
c0
 = *(
py
--);

433 
x3
 = *(
px
++);

437 
acc0
 +((
q31_t
Ë
x0
 * 
c0
);

439 
acc1
 +((
q31_t
Ë
x1
 * 
c0
);

441 
acc2
 +((
q31_t
Ë
x2
 * 
c0
);

443 
acc3
 +((
q31_t
Ë
x3
 * 
c0
);

446 
x0
 = 
x1
;

447 
x1
 = 
x2
;

448 
x2
 = 
x3
;

451 
k
--;

455 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc0
 >> 7, 8));

456 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc1
 >> 7, 8));

457 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc2
 >> 7, 8));

458 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc3
 >> 7, 8));

461 
cou¡
 += 4u;

464 
px
 = 
pIn1
 + 
cou¡
;

465 
py
 = 
pSrc2
;

469 
blkC¡
--;

474 
blkC¡
 = (
uöt32_t
Ë
blockSize2
 % 0x4u;

476 
blkC¡
 > 0u)

479 
sum
 = 0;

482 
k
 = 
§cBLí
 >> 2u;

486 
k
 > 0u)

490 
ö1
 = (
q15_t
Ë* 
px
++;

491 
ö2
 = (
q15_t
Ë* 
px
++;

492 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

495 
ö1
 = (
q15_t
Ë* 
py
--;

496 
ö2
 = (
q15_t
Ë* 
py
--;

497 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

500 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

503 
ö1
 = (
q15_t
Ë* 
px
++;

504 
ö2
 = (
q15_t
Ë* 
px
++;

505 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

508 
ö1
 = (
q15_t
Ë* 
py
--;

509 
ö2
 = (
q15_t
Ë* 
py
--;

510 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

513 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

516 
k
--;

521 
k
 = 
§cBLí
 % 0x4u;

523 
k
 > 0u)

526 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

529 
k
--;

533 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
sum
 >> 7, 8));

536 
cou¡
++;

539 
px
 = 
pIn1
 + 
cou¡
;

540 
py
 = 
pSrc2
;

543 
blkC¡
--;

550 
blkC¡
 = (
uöt32_t
Ë
blockSize2
;

552 
blkC¡
 > 0u)

555 
sum
 = 0;

558 
k
 = 
§cBLí
;

560 
k
 > 0u)

563 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

566 
k
--;

570 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
sum
 >> 7, 8));

573 
cou¡
++;

576 
px
 = 
pIn1
 + 
cou¡
;

577 
py
 = 
pSrc2
;

580 
blkC¡
--;

598 
cou¡
 = 
§cBLí
 - 1u;

601 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

602 
px
 = 
pSrc1
;

605 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

606 
py
 = 
pSrc2
;

612 
blockSize3
 > 0)

615 
sum
 = 0;

618 
k
 = 
cou¡
 >> 2u;

622 
k
 > 0u)

625 
ö1
 = (
q15_t
Ë* 
px
++;

626 
ö2
 = (
q15_t
Ë* 
px
++;

627 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

630 
ö1
 = (
q15_t
Ë* 
py
--;

631 
ö2
 = (
q15_t
Ë* 
py
--;

632 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

636 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

639 
ö1
 = (
q15_t
Ë* 
px
++;

640 
ö2
 = (
q15_t
Ë* 
px
++;

641 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

644 
ö1
 = (
q15_t
Ë* 
py
--;

645 
ö2
 = (
q15_t
Ë* 
py
--;

646 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

650 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

653 
k
--;

658 
k
 = 
cou¡
 % 0x4u;

660 
k
 > 0u)

664 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

667 
k
--;

671 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
sum
 >> 7, 8));

674 
px
 = ++
pSrc1
;

675 
py
 = 
pSrc2
;

678 
cou¡
--;

681 
blockSize3
--;

686 
°©us
 = 
ARM_MATH_SUCCESS
;

690  (
°©us
);

696 
q7_t
 *
pIn1
 = 
pSrcA
;

697 
q7_t
 *
pIn2
 = 
pSrcB
;

698 
q31_t
 
sum
;

699 
uöt32_t
 
i
, 
j
;

700 
¨m_°©us
 
°©us
;

703 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

706 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

711 
i
 = 
fú°Index
; i <(fú°Index + 
numPoöts
 - 1); i++)

714 
sum
 = 0;

717 
j
 = 0; j <
i
; j++)

720 if(((
i
 - 
j
Ë< 
§cBLí
Ë&& (j < 
§cALí
))

723 
sum
 +((
q15_t
Ë
pIn1
[
j
] * (
pIn2
[
i
 - j]));

728 
pD°
[
i
] = (
q7_t
Ë
	`__SSAT
((
sum
 >> 7u), 8u);

731 
°©us
 = 
ARM_MATH_SUCCESS
;

733  (
°©us
);

737 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_q15.c

41 
	~"¨m_m©h.h
"

79 
	$¨m_c⁄v_q15
(

80 
q15_t
 * 
pSrcA
,

81 
uöt32_t
 
§cALí
,

82 
q15_t
 * 
pSrcB
,

83 
uöt32_t
 
§cBLí
,

84 
q15_t
 * 
pD°
)

87 #i‡(
	`deföed
(
ARM_MATH_CM4
Ë|| deföed(
ARM_MATH_CM3
)Ë&& !deföed(
UNALIGNED_SUPPORT_DISABLE
)

91 
q15_t
 *
pIn1
;

92 
q15_t
 *
pIn2
;

93 
q15_t
 *
pOut
 = 
pD°
;

94 
q63_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

95 
q15_t
 *
px
;

96 
q15_t
 *
py
;

97 
q15_t
 *
pSrc1
, *
pSrc2
;

98 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

99 
uöt32_t
 
blockSize1
, 
blockSize2
, 
blockSize3
, 
j
, 
k
, 
cou¡
, 
blkC¡
;

104 if(
§cALí
 >
§cBLí
)

107 
pIn1
 = 
pSrcA
;

110 
pIn2
 = 
pSrcB
;

115 
pIn1
 = 
pSrcB
;

118 
pIn2
 = 
pSrcA
;

121 
j
 = 
§cBLí
;

122 
§cBLí
 = 
§cALí
;

123 
§cALí
 = 
j
;

137 
blockSize1
 = 
§cBLí
 - 1u;

138 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

152 
cou¡
 = 1u;

155 
px
 = 
pIn1
;

158 
py
 = 
pIn2
;

170 (
cou¡
 < 4uË&& (
blockSize1
 > 0u))

173 
sum
 = 0;

177 
k
 = 
cou¡
;

179 
k
 > 0u)

182 
sum
 = 
	`__SMLALD
(*
px
++, *
py
--, sum);

185 
k
--;

189 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
sum
 >> 15), 16));

192 
py
 = 
pIn2
 + 
cou¡
;

193 
px
 = 
pIn1
;

196 
cou¡
++;

199 
blockSize1
--;

206 
py
 =Öy - 1;

208 
blockSize1
 > 0u)

211 
sum
 = 0;

214 
k
 = 
cou¡
 >> 2u;

218 
k
 > 0u)

222 
sum
 = 
	`__SMLALDX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

224 
sum
 = 
	`__SMLALDX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

227 
k
--;

232 
py
 =Öy + 1u;

236 
k
 = 
cou¡
 % 0x4u;

238 
k
 > 0u)

241 
sum
 = 
	`__SMLALD
(*
px
++, *
py
--, sum);

244 
k
--;

248 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
sum
 >> 15), 16));

251 
py
 = 
pIn2
 + (
cou¡
 - 1u);

252 
px
 = 
pIn1
;

255 
cou¡
++;

258 
blockSize1
--;

272 
px
 = 
pIn1
;

275 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

276 
py
 = 
pSrc2
;

279 
cou¡
 = 0u;

289 if(
§cBLí
 >= 4u)

292 
blkC¡
 = 
blockSize2
 >> 2u;

294 
blkC¡
 > 0u)

296 
py
 =Öy - 1u;

299 
acc0
 = 0;

300 
acc1
 = 0;

301 
acc2
 = 0;

302 
acc3
 = 0;

306 
x0
 = *
	`__SIMD32
(
px
);

308 
x1
 = 
	`_SIMD32_OFFSET
(
px
+1);

309 
px
+= 2u;

313 
k
 = 
§cBLí
 >> 2u;

321 
c0
 = *
	`__SIMD32
(
py
)--;

324 
acc0
 = 
	`__SMLALDX
(
x0
, 
c0
,ácc0);

327 
acc1
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc1);

330 
x2
 = *
	`__SIMD32
(
px
);

333 
x3
 = 
	`_SIMD32_OFFSET
(
px
+1);

336 
acc2
 = 
	`__SMLALDX
(
x2
, 
c0
,ácc2);

339 
acc3
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc3);

342 
c0
 = *
	`__SIMD32
(
py
)--;

345 
acc0
 = 
	`__SMLALDX
(
x2
, 
c0
,ácc0);

348 
acc1
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc1);

351 
x0
 = 
	`_SIMD32_OFFSET
(
px
+2);

354 
x1
 = 
	`_SIMD32_OFFSET
(
px
+3);

355 
px
 += 4u;

358 
acc2
 = 
	`__SMLALDX
(
x0
, 
c0
,ácc2);

361 
acc3
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc3);

363 } --
k
);

370 
k
 = 
§cBLí
 % 0x4u;

372 if(
k
 == 1u)

375 
c0
 = *(
py
+1);

377 #ifde‡ 
ARM_MATH_BIG_ENDIAN


379 
c0
 = c0 << 16u;

383 
c0
 = c0 & 0x0000FFFF;

387 
x3
 = *
	`__SIMD32
(
px
);

388 
px
++;

391 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

392 
acc1
 = 
	`__SMLALD
(
x1
, 
c0
,ácc1);

393 
acc2
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc2);

394 
acc3
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc3);

397 if(
k
 == 2u)

400 
c0
 = 
	`_SIMD32_OFFSET
(
py
);

403 
x3
 = *
	`__SIMD32
(
px
);

406 
x2
 = 
	`_SIMD32_OFFSET
(
px
+1);

407 
px
 += 2u;

410 
acc0
 = 
	`__SMLALDX
(
x0
, 
c0
,ácc0);

411 
acc1
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc1);

412 
acc2
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc2);

413 
acc3
 = 
	`__SMLALDX
(
x2
, 
c0
,ácc3);

416 if(
k
 == 3u)

419 
c0
 = 
	`_SIMD32_OFFSET
(
py
);

422 
x3
 = *
	`__SIMD32
(
px
);

425 
x2
 = 
	`_SIMD32_OFFSET
(
px
+1);

428 
acc0
 = 
	`__SMLALDX
(
x0
, 
c0
,ácc0);

429 
acc1
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc1);

430 
acc2
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc2);

431 
acc3
 = 
	`__SMLALDX
(
x2
, 
c0
,ácc3);

433 
c0
 = *(
py
-1);

435 #ifde‡ 
ARM_MATH_BIG_ENDIAN


437 
c0
 = c0 << 16u;

440 
c0
 = c0 & 0x0000FFFF;

443 
x3
 = 
	`_SIMD32_OFFSET
(
px
+2);

444 
px
 += 3u;

447 
acc0
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc0);

448 
acc1
 = 
	`__SMLALD
(
x2
, 
c0
,ácc1);

449 
acc2
 = 
	`__SMLALDX
(
x2
, 
c0
,ácc2);

450 
acc3
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc3);

456 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


458 *
	`__SIMD32
(
pOut
)++ =

459 
	`__PKHBT
(
	`__SSAT
((
acc0
 >> 15), 16), __SSAT((
acc1
 >> 15), 16), 16);

460 *
	`__SIMD32
(
pOut
)++ =

461 
	`__PKHBT
(
	`__SSAT
((
acc2
 >> 15), 16), __SSAT((
acc3
 >> 15), 16), 16);

465 *
	`__SIMD32
(
pOut
)++ =

466 
	`__PKHBT
(
	`__SSAT
((
acc1
 >> 15), 16), __SSAT((
acc0
 >> 15), 16), 16);

467 *
	`__SIMD32
(
pOut
)++ =

468 
	`__PKHBT
(
	`__SSAT
((
acc3
 >> 15), 16), __SSAT((
acc2
 >> 15), 16), 16);

473 
cou¡
 += 4u;

476 
px
 = 
pIn1
 + 
cou¡
;

477 
py
 = 
pSrc2
;

480 
blkC¡
--;

485 
blkC¡
 = 
blockSize2
 % 0x4u;

487 
blkC¡
 > 0u)

490 
sum
 = 0;

493 
k
 = 
§cBLí
 >> 2u;

497 
k
 > 0u)

500 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
px
++ * *
py
--);

501 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
px
++ * *
py
--);

502 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
px
++ * *
py
--);

503 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
px
++ * *
py
--);

506 
k
--;

511 
k
 = 
§cBLí
 % 0x4u;

513 
k
 > 0u)

516 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
px
++ * *
py
--);

519 
k
--;

523 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
(
sum
 >> 15, 16));

526 
cou¡
++;

529 
px
 = 
pIn1
 + 
cou¡
;

530 
py
 = 
pSrc2
;

533 
blkC¡
--;

540 
blkC¡
 = 
blockSize2
;

542 
blkC¡
 > 0u)

545 
sum
 = 0;

548 
k
 = 
§cBLí
;

550 
k
 > 0u)

553 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
px
++ * *
py
--);

556 
k
--;

560 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
(
sum
 >> 15, 16));

563 
cou¡
++;

566 
px
 = 
pIn1
 + 
cou¡
;

567 
py
 = 
pSrc2
;

570 
blkC¡
--;

589 
blockSize3
 = 
§cBLí
 - 1u;

592 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

593 
px
 = 
pSrc1
;

596 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

597 
pIn2
 = 
pSrc2
 - 1u;

598 
py
 = 
pIn2
;

609 
j
 = 
blockSize3
 >> 2u;

611 (
j
 > 0uË&& (
blockSize3
 > 0u))

614 
sum
 = 0;

617 
k
 = 
blockSize3
 >> 2u;

621 
k
 > 0u)

625 
sum
 = 
	`__SMLALDX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

628 
sum
 = 
	`__SMLALDX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

631 
k
--;

636 
py
 =Öy + 1u;

640 
k
 = 
blockSize3
 % 0x4u;

642 
k
 > 0u)

645 
sum
 = 
	`__SMLALD
(*
px
++, *
py
--, sum);

648 
k
--;

652 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
sum
 >> 15), 16));

655 
px
 = ++
pSrc1
;

656 
py
 = 
pIn2
;

659 
blockSize3
--;

661 
j
--;

667 
py
 =Öy + 1u;

669 
blockSize3
 > 0u)

672 
sum
 = 0;

675 
k
 = 
blockSize3
;

677 
k
 > 0u)

681 
sum
 = 
	`__SMLALD
(*
px
++, *
py
--, sum);

684 
k
--;

688 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
sum
 >> 15), 16));

691 
px
 = ++
pSrc1
;

692 
py
 = 
pSrc2
;

695 
blockSize3
--;

702 
q15_t
 *
pIn1
 = 
pSrcA
;

703 
q15_t
 *
pIn2
 = 
pSrcB
;

704 
q63_t
 
sum
;

705 
uöt32_t
 
i
, 
j
;

708 
i
 = 0; i < (
§cALí
 + 
§cBLí
 - 1); i++)

711 
sum
 = 0;

714 
j
 = 0; j <
i
; j++)

717 if(((
i
 - 
j
Ë< 
§cBLí
Ë&& (j < 
§cALí
))

720 
sum
 +(
q31_t
Ë
pIn1
[
j
] * (
pIn2
[
i
 - j]);

725 
pD°
[
i
] = (
q15_t
Ë
	`__SSAT
((
sum
 >> 15u), 16u);

730 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_q31.c

41 
	~"¨m_m©h.h
"

78 
	$¨m_c⁄v_q31
(

79 
q31_t
 * 
pSrcA
,

80 
uöt32_t
 
§cALí
,

81 
q31_t
 * 
pSrcB
,

82 
uöt32_t
 
§cBLí
,

83 
q31_t
 * 
pD°
)

87 #i‚de‡
ARM_MATH_CM0_FAMILY


91 
q31_t
 *
pIn1
;

92 
q31_t
 *
pIn2
;

93 
q31_t
 *
pOut
 = 
pD°
;

94 
q31_t
 *
px
;

95 
q31_t
 *
py
;

96 
q31_t
 *
pSrc1
, *
pSrc2
;

97 
q63_t
 
sum
;

98 
q63_t
 
acc0
, 
acc1
, 
acc2
;

99 
q31_t
 
x0
, 
x1
, 
x2
, 
c0
;

100 
uöt32_t
 
j
, 
k
, 
cou¡
, 
blkC¡
, 
blockSize1
, 
blockSize2
, 
blockSize3
;

105 if(
§cALí
 >
§cBLí
)

108 
pIn1
 = 
pSrcA
;

111 
pIn2
 = 
pSrcB
;

116 
pIn1
 = (
q31_t
 *Ë
pSrcB
;

119 
pIn2
 = (
q31_t
 *Ë
pSrcA
;

122 
j
 = 
§cBLí
;

123 
§cBLí
 = 
§cALí
;

124 
§cALí
 = 
j
;

138 
blockSize1
 = 
§cBLí
 - 1u;

139 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

140 
blockSize3
 = 
blockSize1
;

154 
cou¡
 = 1u;

157 
px
 = 
pIn1
;

160 
py
 = 
pIn2
;

168 
blockSize1
 > 0u)

171 
sum
 = 0;

174 
k
 = 
cou¡
 >> 2u;

178 
k
 > 0u)

181 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

183 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

185 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

187 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

190 
k
--;

195 
k
 = 
cou¡
 % 0x4u;

197 
k
 > 0u)

200 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

203 
k
--;

207 *
pOut
++ = (
q31_t
Ë(
sum
 >> 31);

210 
py
 = 
pIn2
 + 
cou¡
;

211 
px
 = 
pIn1
;

214 
cou¡
++;

217 
blockSize1
--;

231 
px
 = 
pIn1
;

234 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

235 
py
 = 
pSrc2
;

238 
cou¡
 = 0u;

247 if(
§cBLí
 >= 4u)

250 
blkC¡
 = 
blockSize2
 / 3;

252 
blkC¡
 > 0u)

255 
acc0
 = 0;

256 
acc1
 = 0;

257 
acc2
 = 0;

260 
x0
 = *(
px
++);

261 
x1
 = *(
px
++);

264 
k
 = 
§cBLí
 / 3;

271 
c0
 = *(
py
);

274 
x2
 = *(
px
);

278 
acc0
 +((
q63_t
Ë
x0
 * 
c0
);

280 
acc1
 +((
q63_t
Ë
x1
 * 
c0
);

282 
acc2
 +((
q63_t
Ë
x2
 * 
c0
);

285 
c0
 = *(
py
 - 1u);

288 
x0
 = *(
px
 + 1u);

292 
acc0
 +((
q63_t
Ë
x1
 * 
c0
);

294 
acc1
 +((
q63_t
Ë
x2
 * 
c0
);

296 
acc2
 +((
q63_t
Ë
x0
 * 
c0
);

299 
c0
 = *(
py
 - 2u);

302 
x1
 = *(
px
 + 2u);

306 
acc0
 +((
q63_t
Ë
x2
 * 
c0
);

308 
acc1
 +((
q63_t
Ë
x0
 * 
c0
);

310 
acc2
 +((
q63_t
Ë
x1
 * 
c0
);

313 
px
 += 3u;

314 
py
 -= 3u;

316 } --
k
);

320 
k
 = 
§cBLí
 - (3 * (srcBLen / 3));

322 
k
 > 0u)

325 
c0
 = *(
py
--);

328 
x2
 = *(
px
++);

332 
acc0
 +((
q63_t
Ë
x0
 * 
c0
);

334 
acc1
 +((
q63_t
Ë
x1
 * 
c0
);

336 
acc2
 +((
q63_t
Ë
x2
 * 
c0
);

339 
x0
 = 
x1
;

340 
x1
 = 
x2
;

343 
k
--;

347 *
pOut
++ = (
q31_t
Ë(
acc0
 >> 31);

348 *
pOut
++ = (
q31_t
Ë(
acc1
 >> 31);

349 *
pOut
++ = (
q31_t
Ë(
acc2
 >> 31);

352 
cou¡
 += 3u;

355 
px
 = 
pIn1
 + 
cou¡
;

356 
py
 = 
pSrc2
;

359 
blkC¡
--;

364 
blkC¡
 = 
blockSize2
 - 3 * (blockSize2 / 3);

366 
blkC¡
 > 0u)

369 
sum
 = 0;

372 
k
 = 
§cBLí
 >> 2u;

376 
k
 > 0u)

379 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

380 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

381 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

382 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

385 
k
--;

390 
k
 = 
§cBLí
 % 0x4u;

392 
k
 > 0u)

395 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

398 
k
--;

402 *
pOut
++ = (
q31_t
Ë(
sum
 >> 31);

405 
cou¡
++;

408 
px
 = 
pIn1
 + 
cou¡
;

409 
py
 = 
pSrc2
;

412 
blkC¡
--;

419 
blkC¡
 = 
blockSize2
;

421 
blkC¡
 > 0u)

424 
sum
 = 0;

427 
k
 = 
§cBLí
;

429 
k
 > 0u)

432 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

435 
k
--;

439 *
pOut
++ = (
q31_t
Ë(
sum
 >> 31);

442 
cou¡
++;

445 
px
 = 
pIn1
 + 
cou¡
;

446 
py
 = 
pSrc2
;

449 
blkC¡
--;

469 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

470 
px
 = 
pSrc1
;

473 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

474 
py
 = 
pSrc2
;

480 
blockSize3
 > 0u)

483 
sum
 = 0;

486 
k
 = 
blockSize3
 >> 2u;

490 
k
 > 0u)

493 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

495 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

497 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

499 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

502 
k
--;

507 
k
 = 
blockSize3
 % 0x4u;

509 
k
 > 0u)

512 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

515 
k
--;

519 *
pOut
++ = (
q31_t
Ë(
sum
 >> 31);

522 
px
 = ++
pSrc1
;

523 
py
 = 
pSrc2
;

526 
blockSize3
--;

533 
q31_t
 *
pIn1
 = 
pSrcA
;

534 
q31_t
 *
pIn2
 = 
pSrcB
;

535 
q63_t
 
sum
;

536 
uöt32_t
 
i
, 
j
;

539 
i
 = 0; i < (
§cALí
 + 
§cBLí
 - 1); i++)

542 
sum
 = 0;

545 
j
 = 0; j <
i
; j++)

548 if(((
i
 - 
j
Ë< 
§cBLí
Ë&& (j < 
§cALí
))

551 
sum
 +((
q63_t
Ë
pIn1
[
j
] * (
pIn2
[
i
 - j]));

556 
pD°
[
i
] = (
q31_t
Ë(
sum
 >> 31u);

561 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_q7.c

41 
	~"¨m_m©h.h
"

76 
	$¨m_c⁄v_q7
(

77 
q7_t
 * 
pSrcA
,

78 
uöt32_t
 
§cALí
,

79 
q7_t
 * 
pSrcB
,

80 
uöt32_t
 
§cBLí
,

81 
q7_t
 * 
pD°
)

85 #i‚de‡
ARM_MATH_CM0_FAMILY


89 
q7_t
 *
pIn1
;

90 
q7_t
 *
pIn2
;

91 
q7_t
 *
pOut
 = 
pD°
;

92 
q7_t
 *
px
;

93 
q7_t
 *
py
;

94 
q7_t
 *
pSrc1
, *
pSrc2
;

95 
q7_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
, 
c1
;

96 
q31_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

97 
q31_t
 
öput1
, 
öput2
;

98 
q15_t
 
ö1
, 
ö2
;

99 
uöt32_t
 
j
, 
k
, 
cou¡
, 
blkC¡
, 
blockSize1
, 
blockSize2
, 
blockSize3
;

104 if(
§cALí
 >
§cBLí
)

107 
pIn1
 = 
pSrcA
;

110 
pIn2
 = 
pSrcB
;

115 
pIn1
 = 
pSrcB
;

118 
pIn2
 = 
pSrcA
;

121 
j
 = 
§cBLí
;

122 
§cBLí
 = 
§cALí
;

123 
§cALí
 = 
j
;

137 
blockSize1
 = 
§cBLí
 - 1u;

138 
blockSize2
 = (
§cALí
 - 
§cBLí
) + 1u;

139 
blockSize3
 = 
blockSize1
;

153 
cou¡
 = 1u;

156 
px
 = 
pIn1
;

159 
py
 = 
pIn2
;

167 
blockSize1
 > 0u)

170 
sum
 = 0;

173 
k
 = 
cou¡
 >> 2u;

177 
k
 > 0u)

180 
ö1
 = (
q15_t
Ë* 
px
++;

181 
ö2
 = (
q15_t
Ë* 
px
++;

182 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

185 
ö1
 = (
q15_t
Ë* 
py
--;

186 
ö2
 = (
q15_t
Ë* 
py
--;

187 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

191 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

194 
ö1
 = (
q15_t
Ë* 
px
++;

195 
ö2
 = (
q15_t
Ë* 
px
++;

196 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

199 
ö1
 = (
q15_t
Ë* 
py
--;

200 
ö2
 = (
q15_t
Ë* 
py
--;

201 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

205 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

208 
k
--;

213 
k
 = 
cou¡
 % 0x4u;

215 
k
 > 0u)

218 
sum
 +((
q15_t
Ë* 
px
++ * *
py
--);

221 
k
--;

225 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
sum
 >> 7u, 8));

228 
py
 = 
pIn2
 + 
cou¡
;

229 
px
 = 
pIn1
;

232 
cou¡
++;

235 
blockSize1
--;

249 
px
 = 
pIn1
;

252 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

253 
py
 = 
pSrc2
;

256 
cou¡
 = 0u;

265 if(
§cBLí
 >= 4u)

268 
blkC¡
 = 
blockSize2
 >> 2u;

270 
blkC¡
 > 0u)

273 
acc0
 = 0;

274 
acc1
 = 0;

275 
acc2
 = 0;

276 
acc3
 = 0;

279 
x0
 = *(
px
++);

280 
x1
 = *(
px
++);

281 
x2
 = *(
px
++);

284 
k
 = 
§cBLí
 >> 2u;

291 
c0
 = *(
py
--);

293 
c1
 = *(
py
--);

296 
x3
 = *(
px
++);

299 
ö1
 = (
q15_t
Ë
x0
;

300 
ö2
 = (
q15_t
Ë
x1
;

302 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

305 
ö1
 = (
q15_t
Ë
c0
;

306 
ö2
 = (
q15_t
Ë
c1
;

308 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

311 
acc0
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc0);

314 
ö1
 = (
q15_t
Ë
x1
;

315 
ö2
 = (
q15_t
Ë
x2
;

317 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

320 
acc1
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc1);

323 
ö1
 = (
q15_t
Ë
x2
;

324 
ö2
 = (
q15_t
Ë
x3
;

326 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

329 
acc2
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc2);

332 
x0
 = *(
px
++);

335 
ö1
 = (
q15_t
Ë
x3
;

336 
ö2
 = (
q15_t
Ë
x0
;

338 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

341 
acc3
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc3);

344 
c0
 = *(
py
--);

346 
c1
 = *(
py
--);

349 
x1
 = *(
px
++);

352 
ö1
 = (
q15_t
Ë
x2
;

353 
ö2
 = (
q15_t
Ë
x3
;

355 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

358 
ö1
 = (
q15_t
Ë
c0
;

359 
ö2
 = (
q15_t
Ë
c1
;

361 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

364 
acc0
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc0);

367 
ö1
 = (
q15_t
Ë
x3
;

368 
ö2
 = (
q15_t
Ë
x0
;

370 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

373 
acc1
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc1);

376 
ö1
 = (
q15_t
Ë
x0
;

377 
ö2
 = (
q15_t
Ë
x1
;

379 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

382 
acc2
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc2);

385 
x2
 = *(
px
++);

388 
ö1
 = (
q15_t
Ë
x1
;

389 
ö2
 = (
q15_t
Ë
x2
;

391 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

394 
acc3
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc3);

396 } --
k
);

400 
k
 = 
§cBLí
 % 0x4u;

402 
k
 > 0u)

405 
c0
 = *(
py
--);

408 
x3
 = *(
px
++);

412 
acc0
 +((
q15_t
Ë
x0
 * 
c0
);

414 
acc1
 +((
q15_t
Ë
x1
 * 
c0
);

416 
acc2
 +((
q15_t
Ë
x2
 * 
c0
);

418 
acc3
 +((
q15_t
Ë
x3
 * 
c0
);

421 
x0
 = 
x1
;

422 
x1
 = 
x2
;

423 
x2
 = 
x3
;

426 
k
--;

431 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc0
 >> 7u, 8));

432 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc1
 >> 7u, 8));

433 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc2
 >> 7u, 8));

434 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc3
 >> 7u, 8));

437 
cou¡
 += 4u;

440 
px
 = 
pIn1
 + 
cou¡
;

441 
py
 = 
pSrc2
;

444 
blkC¡
--;

449 
blkC¡
 = 
blockSize2
 % 0x4u;

451 
blkC¡
 > 0u)

454 
sum
 = 0;

457 
k
 = 
§cBLí
 >> 2u;

461 
k
 > 0u)

465 
ö1
 = (
q15_t
Ë* 
px
++;

466 
ö2
 = (
q15_t
Ë* 
px
++;

467 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

470 
ö1
 = (
q15_t
Ë* 
py
--;

471 
ö2
 = (
q15_t
Ë* 
py
--;

472 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

475 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

478 
ö1
 = (
q15_t
Ë* 
px
++;

479 
ö2
 = (
q15_t
Ë* 
px
++;

480 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

483 
ö1
 = (
q15_t
Ë* 
py
--;

484 
ö2
 = (
q15_t
Ë* 
py
--;

485 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

488 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

491 
k
--;

496 
k
 = 
§cBLí
 % 0x4u;

498 
k
 > 0u)

501 
sum
 +((
q15_t
Ë* 
px
++ * *
py
--);

504 
k
--;

508 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
sum
 >> 7u, 8));

511 
cou¡
++;

514 
px
 = 
pIn1
 + 
cou¡
;

515 
py
 = 
pSrc2
;

518 
blkC¡
--;

525 
blkC¡
 = 
blockSize2
;

527 
blkC¡
 > 0u)

530 
sum
 = 0;

533 
k
 = 
§cBLí
;

535 
k
 > 0u)

538 
sum
 +((
q15_t
Ë* 
px
++ * *
py
--);

541 
k
--;

545 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
sum
 >> 7u, 8));

548 
cou¡
++;

551 
px
 = 
pIn1
 + 
cou¡
;

552 
py
 = 
pSrc2
;

555 
blkC¡
--;

575 
pSrc1
 = 
pIn1
 + (
§cALí
 - (
§cBLí
 - 1u));

576 
px
 = 
pSrc1
;

579 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

580 
py
 = 
pSrc2
;

586 
blockSize3
 > 0u)

589 
sum
 = 0;

592 
k
 = 
blockSize3
 >> 2u;

596 
k
 > 0u)

599 
ö1
 = (
q15_t
Ë* 
px
++;

600 
ö2
 = (
q15_t
Ë* 
px
++;

601 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

604 
ö1
 = (
q15_t
Ë* 
py
--;

605 
ö2
 = (
q15_t
Ë* 
py
--;

606 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

610 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

613 
ö1
 = (
q15_t
Ë* 
px
++;

614 
ö2
 = (
q15_t
Ë* 
px
++;

615 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

618 
ö1
 = (
q15_t
Ë* 
py
--;

619 
ö2
 = (
q15_t
Ë* 
py
--;

620 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

624 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

627 
k
--;

632 
k
 = 
blockSize3
 % 0x4u;

634 
k
 > 0u)

637 
sum
 +((
q15_t
Ë* 
px
++ * *
py
--);

640 
k
--;

644 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
sum
 >> 7u, 8));

647 
px
 = ++
pSrc1
;

648 
py
 = 
pSrc2
;

651 
blockSize3
--;

658 
q7_t
 *
pIn1
 = 
pSrcA
;

659 
q7_t
 *
pIn2
 = 
pSrcB
;

660 
q31_t
 
sum
;

661 
uöt32_t
 
i
, 
j
;

664 
i
 = 0; i < (
§cALí
 + 
§cBLí
 - 1); i++)

667 
sum
 = 0;

670 
j
 = 0; j <
i
; j++)

673 if(((
i
 - 
j
Ë< 
§cBLí
Ë&& (j < 
§cALí
))

676 
sum
 +(
q15_t
Ë
pIn1
[
j
] * (
pIn2
[
i
 - j]);

681 
pD°
[
i
] = (
q7_t
Ë
	`__SSAT
((
sum
 >> 7u), 8u);

686 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_f32.c

41 
	~"¨m_m©h.h
"

116 
	$¨m_c‹ªœã_f32
(

117 
Êﬂt32_t
 * 
pSrcA
,

118 
uöt32_t
 
§cALí
,

119 
Êﬂt32_t
 * 
pSrcB
,

120 
uöt32_t
 
§cBLí
,

121 
Êﬂt32_t
 * 
pD°
)

125 #i‚de‡
ARM_MATH_CM0_FAMILY


129 
Êﬂt32_t
 *
pIn1
;

130 
Êﬂt32_t
 *
pIn2
;

131 
Êﬂt32_t
 *
pOut
 = 
pD°
;

132 
Êﬂt32_t
 *
px
;

133 
Êﬂt32_t
 *
py
;

134 
Êﬂt32_t
 *
pSrc1
;

135 
Êﬂt32_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

136 
Êﬂt32_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

137 
uöt32_t
 
j
, 
k
 = 0u, 
cou¡
, 
blkC¡
, 
outBlockSize
, 
blockSize1
, 
blockSize2
, 
blockSize3
;

138 
öt32_t
 
öc
 = 1;

154 if(
§cALí
 >
§cBLí
)

157 
pIn1
 = 
pSrcA
;

160 
pIn2
 = 
pSrcB
;

163 
outBlockSize
 = (2u * 
§cALí
) - 1u;

169 
j
 = 
outBlockSize
 - (
§cALí
 + (
§cBLí
 - 1u));

172 
pOut
 +
j
;

187 
pIn1
 = 
pSrcB
;

190 
pIn2
 = 
pSrcA
;

193 
j
 = 
§cBLí
;

194 
§cBLí
 = 
§cALí
;

195 
§cALí
 = 
j
;

199 
pOut
 = 
pD°
 + ((
§cALí
 + 
§cBLí
) - 2u);

202 
öc
 = -1;

215 
blockSize1
 = 
§cBLí
 - 1u;

216 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

217 
blockSize3
 = 
blockSize1
;

231 
cou¡
 = 1u;

234 
px
 = 
pIn1
;

237 
pSrc1
 = 
pIn2
 + (
§cBLí
 - 1u);

238 
py
 = 
pSrc1
;

245 
blockSize1
 > 0u)

248 
sum
 = 0.0f;

251 
k
 = 
cou¡
 >> 2u;

255 
k
 > 0u)

258 
sum
 +*
px
++ * *
py
++;

260 
sum
 +*
px
++ * *
py
++;

262 
sum
 +*
px
++ * *
py
++;

264 
sum
 +*
px
++ * *
py
++;

267 
k
--;

272 
k
 = 
cou¡
 % 0x4u;

274 
k
 > 0u)

278 
sum
 +*
px
++ * *
py
++;

281 
k
--;

285 *
pOut
 = 
sum
;

287 
pOut
 +
öc
;

290 
py
 = 
pSrc1
 - 
cou¡
;

291 
px
 = 
pIn1
;

294 
cou¡
++;

297 
blockSize1
--;

311 
px
 = 
pIn1
;

314 
py
 = 
pIn2
;

317 
cou¡
 = 0u;

326 if(
§cBLí
 >= 4u)

329 
blkC¡
 = 
blockSize2
 >> 2u;

331 
blkC¡
 > 0u)

334 
acc0
 = 0.0f;

335 
acc1
 = 0.0f;

336 
acc2
 = 0.0f;

337 
acc3
 = 0.0f;

340 
x0
 = *(
px
++);

341 
x1
 = *(
px
++);

342 
x2
 = *(
px
++);

345 
k
 = 
§cBLí
 >> 2u;

352 
c0
 = *(
py
++);

355 
x3
 = *(
px
++);

359 
acc0
 +
x0
 * 
c0
;

361 
acc1
 +
x1
 * 
c0
;

363 
acc2
 +
x2
 * 
c0
;

365 
acc3
 +
x3
 * 
c0
;

368 
c0
 = *(
py
++);

371 
x0
 = *(
px
++);

375 
acc0
 +
x1
 * 
c0
;

377 
acc1
 +
x2
 * 
c0
;

379 
acc2
 +
x3
 * 
c0
;

381 
acc3
 +
x0
 * 
c0
;

384 
c0
 = *(
py
++);

387 
x1
 = *(
px
++);

391 
acc0
 +
x2
 * 
c0
;

393 
acc1
 +
x3
 * 
c0
;

395 
acc2
 +
x0
 * 
c0
;

397 
acc3
 +
x1
 * 
c0
;

400 
c0
 = *(
py
++);

403 
x2
 = *(
px
++);

407 
acc0
 +
x3
 * 
c0
;

409 
acc1
 +
x0
 * 
c0
;

411 
acc2
 +
x1
 * 
c0
;

413 
acc3
 +
x2
 * 
c0
;

416 } --
k
);

420 
k
 = 
§cBLí
 % 0x4u;

422 
k
 > 0u)

425 
c0
 = *(
py
++);

428 
x3
 = *(
px
++);

432 
acc0
 +
x0
 * 
c0
;

434 
acc1
 +
x1
 * 
c0
;

436 
acc2
 +
x2
 * 
c0
;

438 
acc3
 +
x3
 * 
c0
;

441 
x0
 = 
x1
;

442 
x1
 = 
x2
;

443 
x2
 = 
x3
;

446 
k
--;

450 *
pOut
 = 
acc0
;

452 
pOut
 +
öc
;

454 *
pOut
 = 
acc1
;

455 
pOut
 +
öc
;

457 *
pOut
 = 
acc2
;

458 
pOut
 +
öc
;

460 *
pOut
 = 
acc3
;

461 
pOut
 +
öc
;

464 
cou¡
 += 4u;

467 
px
 = 
pIn1
 + 
cou¡
;

468 
py
 = 
pIn2
;

471 
blkC¡
--;

476 
blkC¡
 = 
blockSize2
 % 0x4u;

478 
blkC¡
 > 0u)

481 
sum
 = 0.0f;

484 
k
 = 
§cBLí
 >> 2u;

488 
k
 > 0u)

491 
sum
 +*
px
++ * *
py
++;

492 
sum
 +*
px
++ * *
py
++;

493 
sum
 +*
px
++ * *
py
++;

494 
sum
 +*
px
++ * *
py
++;

497 
k
--;

502 
k
 = 
§cBLí
 % 0x4u;

504 
k
 > 0u)

507 
sum
 +*
px
++ * *
py
++;

510 
k
--;

514 *
pOut
 = 
sum
;

516 
pOut
 +
öc
;

519 
cou¡
++;

522 
px
 = 
pIn1
 + 
cou¡
;

523 
py
 = 
pIn2
;

526 
blkC¡
--;

533 
blkC¡
 = 
blockSize2
;

535 
blkC¡
 > 0u)

538 
sum
 = 0.0f;

541 
k
 = 
§cBLí
;

543 
k
 > 0u)

546 
sum
 +*
px
++ * *
py
++;

549 
k
--;

553 *
pOut
 = 
sum
;

555 
pOut
 +
öc
;

558 
cou¡
++;

561 
px
 = 
pIn1
 + 
cou¡
;

562 
py
 = 
pIn2
;

565 
blkC¡
--;

582 
cou¡
 = 
§cBLí
 - 1u;

585 
pSrc1
 = 
pIn1
 + (
§cALí
 - (
§cBLí
 - 1u));

586 
px
 = 
pSrc1
;

589 
py
 = 
pIn2
;

595 
blockSize3
 > 0u)

598 
sum
 = 0.0f;

601 
k
 = 
cou¡
 >> 2u;

605 
k
 > 0u)

609 
sum
 +*
px
++ * *
py
++;

611 
sum
 +*
px
++ * *
py
++;

613 
sum
 +*
px
++ * *
py
++;

615 
sum
 +*
px
++ * *
py
++;

618 
k
--;

623 
k
 = 
cou¡
 % 0x4u;

625 
k
 > 0u)

628 
sum
 +*
px
++ * *
py
++;

631 
k
--;

635 *
pOut
 = 
sum
;

637 
pOut
 +
öc
;

640 
px
 = ++
pSrc1
;

641 
py
 = 
pIn2
;

644 
cou¡
--;

647 
blockSize3
--;

654 
Êﬂt32_t
 *
pIn1
 = 
pSrcA
;

655 
Êﬂt32_t
 *
pIn2
 = 
pSrcB
 + (
§cBLí
 - 1u);

656 
Êﬂt32_t
 
sum
;

657 
uöt32_t
 
i
 = 0u, 
j
;

658 
uöt32_t
 
öv
 = 0u;

659 
uöt32_t
 
tŸ
 = 0u;

678 
tŸ
 = ((
§cALí
 + 
§cBLí
) - 2u);

680 if(
§cALí
 > 
§cBLí
)

683 
j
 = 
§cALí
 - 
§cBLí
;

686 
pD°
 +
j
;

689 if(
§cALí
 < 
§cBLí
)

692 
pIn1
 = 
pSrcB
;

695 
pIn2
 = 
pSrcA
 + (
§cALí
 - 1u);

698 
pD°
 =ÖD° + 
tŸ
;

701 
j
 = 
§cALí
;

702 
§cALí
 = 
§cBLí
;

703 
§cBLí
 = 
j
;

706 
öv
 = 1;

711 
i
 = 0u; i <
tŸ
; i++)

714 
sum
 = 0.0f;

717 
j
 = 0u; j <
i
; j++)

720 if((((
i
 - 
j
Ë< 
§cBLí
Ë&& (j < 
§cALí
)))

723 
sum
 +
pIn1
[
j
] * 
pIn2
[-((
öt32_t
Ë
i
 - j)];

727 if(
öv
 == 1)

728 *
pD°
-- = 
sum
;

730 *
pD°
++ = 
sum
;

735 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_fast_opt_q15.c

41 
	~"¨m_m©h.h
"

84 
	$¨m_c‹ªœã_Á°_›t_q15
(

85 
q15_t
 * 
pSrcA
,

86 
uöt32_t
 
§cALí
,

87 
q15_t
 * 
pSrcB
,

88 
uöt32_t
 
§cBLí
,

89 
q15_t
 * 
pD°
,

90 
q15_t
 * 
pS¸©ch
)

92 
q15_t
 *
pIn1
;

93 
q15_t
 *
pIn2
;

94 
q31_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

95 
q15_t
 *
py
;

96 
q31_t
 
x1
, 
x2
, 
x3
;

97 
uöt32_t
 
j
, 
blkC¡
, 
outBlockSize
;

98 
öt32_t
 
öc
 = 1;

99 
uöt32_t
 
èpC¡
;

100 
q31_t
 
y1
, 
y2
;

101 
q15_t
 *
pS¸
;

102 
q15_t
 *
pOut
 = 
pD°
;

103 #ifde‡
UNALIGNED_SUPPORT_DISABLE


105 
q15_t
 
a
, 
b
;

122 if(
§cALí
 >
§cBLí
)

125 
pIn1
 = (
pSrcA
);

128 
pIn2
 = (
pSrcB
);

131 
outBlockSize
 = (2u * 
§cALí
) - 1u;

137 
j
 = 
outBlockSize
 - (
§cALí
 + (
§cBLí
 - 1u));

140 
pOut
 +
j
;

146 
pIn1
 = (
pSrcB
);

149 
pIn2
 = (
pSrcA
);

152 
j
 = 
§cBLí
;

153 
§cBLí
 = 
§cALí
;

154 
§cALí
 = 
j
;

158 
pOut
 = 
pD°
 + ((
§cALí
 + 
§cBLí
) - 2u);

161 
öc
 = -1;

165 
pS¸
 = 
pS¸©ch
;

168 
	`¨m_fûl_q15
(0, 
pS¸
, (
§cBLí
 - 1u));

171 
pS¸
 +(
§cBLí
 - 1u);

173 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


176 
	`¨m_c›y_q15
(
pIn1
, 
pS¸
, 
§cALí
);

179 
pS¸
 +
§cALí
;

184 
j
 = 
§cALí
 >> 2u;

188 
j
 > 0u)

191 *
pS¸
++ = *
pIn1
++;

192 *
pS¸
++ = *
pIn1
++;

193 *
pS¸
++ = *
pIn1
++;

194 *
pS¸
++ = *
pIn1
++;

197 
j
--;

202 
j
 = 
§cALí
 % 0x4u;

204 
j
 > 0u)

207 *
pS¸
++ = *
pIn1
++;

210 
j
--;

215 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


218 
	`¨m_fûl_q15
(0, 
pS¸
, (
§cBLí
 - 1u));

221 
pS¸
 +(
§cBLí
 - 1u);

226 
j
 = (
§cBLí
 - 1u) >> 2u;

230 
j
 > 0u)

233 *
pS¸
++ = 0;

234 *
pS¸
++ = 0;

235 *
pS¸
++ = 0;

236 *
pS¸
++ = 0;

239 
j
--;

244 
j
 = (
§cBLí
 - 1u) % 0x4u;

246 
j
 > 0u)

249 *
pS¸
++ = 0;

252 
j
--;

258 
py
 = 
pIn2
;

262 
blkC¡
 = (
§cALí
 + 
§cBLí
 - 1u) >> 2;

264 
blkC¡
 > 0)

267 
pS¸
 = 
pS¸©ch
;

270 
acc0
 = 0;

271 
acc1
 = 0;

272 
acc2
 = 0;

273 
acc3
 = 0;

276 
x1
 = *
	`__SIMD32
(
pS¸
)++;

279 
x2
 = *
	`__SIMD32
(
pS¸
)++;

281 
èpC¡
 = (
§cBLí
) >> 2u;

283 
èpC¡
 > 0u)

286 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


289 
y1
 = 
	`_SIMD32_OFFSET
(
pIn2
);

290 
y2
 = 
	`_SIMD32_OFFSET
(
pIn2
 + 2u);

292 
acc0
 = 
	`__SMLAD
(
x1
, 
y1
,ácc0);

294 
acc2
 = 
	`__SMLAD
(
x2
, 
y1
,ácc2);

296 #i‚de‡
ARM_MATH_BIG_ENDIAN


297 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

299 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

302 
acc1
 = 
	`__SMLADX
(
x3
, 
y1
,ácc1);

304 
x1
 = 
	`_SIMD32_OFFSET
(
pS¸
);

306 
acc0
 = 
	`__SMLAD
(
x2
, 
y2
,ácc0);

308 
acc2
 = 
	`__SMLAD
(
x1
, 
y2
,ácc2);

310 #i‚de‡
ARM_MATH_BIG_ENDIAN


311 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

313 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

316 
acc3
 = 
	`__SMLADX
(
x3
, 
y1
,ácc3);

318 
acc1
 = 
	`__SMLADX
(
x3
, 
y2
,ácc1);

320 
x2
 = 
	`_SIMD32_OFFSET
(
pS¸
 + 2u);

322 #i‚de‡
ARM_MATH_BIG_ENDIAN


323 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

325 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

328 
acc3
 = 
	`__SMLADX
(
x3
, 
y2
,ácc3);

332 
a
 = *
pIn2
;

333 
b
 = *(
pIn2
 + 1);

335 #i‚de‡
ARM_MATH_BIG_ENDIAN


336 
y1
 = 
	`__PKHBT
(
a
, 
b
, 16);

338 
y1
 = 
	`__PKHBT
(
b
, 
a
, 16);

341 
a
 = *(
pIn2
 + 2);

342 
b
 = *(
pIn2
 + 3);

343 #i‚de‡
ARM_MATH_BIG_ENDIAN


344 
y2
 = 
	`__PKHBT
(
a
, 
b
, 16);

346 
y2
 = 
	`__PKHBT
(
b
, 
a
, 16);

349 
acc0
 = 
	`__SMLAD
(
x1
, 
y1
,ácc0);

351 
acc2
 = 
	`__SMLAD
(
x2
, 
y1
,ácc2);

353 #i‚de‡
ARM_MATH_BIG_ENDIAN


354 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

356 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

359 
acc1
 = 
	`__SMLADX
(
x3
, 
y1
,ácc1);

361 
a
 = *
pS¸
;

362 
b
 = *(
pS¸
 + 1);

364 #i‚de‡
ARM_MATH_BIG_ENDIAN


365 
x1
 = 
	`__PKHBT
(
a
, 
b
, 16);

367 
x1
 = 
	`__PKHBT
(
b
, 
a
, 16);

370 
acc0
 = 
	`__SMLAD
(
x2
, 
y2
,ácc0);

372 
acc2
 = 
	`__SMLAD
(
x1
, 
y2
,ácc2);

374 #i‚de‡
ARM_MATH_BIG_ENDIAN


375 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

377 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

380 
acc3
 = 
	`__SMLADX
(
x3
, 
y1
,ácc3);

382 
acc1
 = 
	`__SMLADX
(
x3
, 
y2
,ácc1);

384 
a
 = *(
pS¸
 + 2);

385 
b
 = *(
pS¸
 + 3);

387 #i‚de‡
ARM_MATH_BIG_ENDIAN


388 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

390 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

393 #i‚de‡
ARM_MATH_BIG_ENDIAN


394 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

396 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

399 
acc3
 = 
	`__SMLADX
(
x3
, 
y2
,ácc3);

403 
pIn2
 += 4u;

405 
pS¸
 += 4u;

409 
èpC¡
--;

415 
pS¸
 -= 4u;

419 
èpC¡
 = (
§cBLí
) & 3u;

421 
èpC¡
 > 0u)

425 
acc0
 +(*
pS¸
++ * *
pIn2
);

426 
acc1
 +(*
pS¸
++ * *
pIn2
);

427 
acc2
 +(*
pS¸
++ * *
pIn2
);

428 
acc3
 +(*
pS¸
++ * *
pIn2
++);

430 
pS¸
 -= 3u;

433 
èpC¡
--;

436 
blkC¡
--;

440 *
pOut
 = (
	`__SSAT
(
acc0
 >> 15u, 16));

441 
pOut
 +
öc
;

442 *
pOut
 = (
	`__SSAT
(
acc1
 >> 15u, 16));

443 
pOut
 +
öc
;

444 *
pOut
 = (
	`__SSAT
(
acc2
 >> 15u, 16));

445 
pOut
 +
öc
;

446 *
pOut
 = (
	`__SSAT
(
acc3
 >> 15u, 16));

447 
pOut
 +
öc
;

451 
pIn2
 = 
py
;

453 
pS¸©ch
 += 4u;

458 
blkC¡
 = (
§cALí
 + 
§cBLí
 - 1u) & 0x3;

461 
blkC¡
 > 0)

464 
pS¸
 = 
pS¸©ch
;

467 
acc0
 = 0;

469 
èpC¡
 = (
§cBLí
) >> 1u;

471 
èpC¡
 > 0u)

474 
acc0
 +(*
pS¸
++ * *
pIn2
++);

475 
acc0
 +(*
pS¸
++ * *
pIn2
++);

478 
èpC¡
--;

481 
èpC¡
 = (
§cBLí
) & 1u;

484 
èpC¡
 > 0u)

488 
acc0
 +(*
pS¸
++ * *
pIn2
++);

491 
èpC¡
--;

494 
blkC¡
--;

498 *
pOut
 = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

500 
pOut
 +
öc
;

503 
pIn2
 = 
py
;

505 
pS¸©ch
 += 1u;

508 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_fast_q15.c

41 
	~"¨m_m©h.h
"

77 
	$¨m_c‹ªœã_Á°_q15
(

78 
q15_t
 * 
pSrcA
,

79 
uöt32_t
 
§cALí
,

80 
q15_t
 * 
pSrcB
,

81 
uöt32_t
 
§cBLí
,

82 
q15_t
 * 
pD°
)

84 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


86 
q15_t
 *
pIn1
;

87 
q15_t
 *
pIn2
;

88 
q15_t
 *
pOut
 = 
pD°
;

89 
q31_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

90 
q15_t
 *
px
;

91 
q15_t
 *
py
;

92 
q15_t
 *
pSrc1
;

93 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

94 
uöt32_t
 
j
, 
k
 = 0u, 
cou¡
, 
blkC¡
, 
outBlockSize
, 
blockSize1
, 
blockSize2
, 
blockSize3
;

95 
öt32_t
 
öc
 = 1;

111 if(
§cALí
 >
§cBLí
)

114 
pIn1
 = (
pSrcA
);

117 
pIn2
 = (
pSrcB
);

120 
outBlockSize
 = (2u * 
§cALí
) - 1u;

126 
j
 = 
outBlockSize
 - (
§cALí
 + (
§cBLí
 - 1u));

129 
pOut
 +
j
;

135 
pIn1
 = (
pSrcB
);

138 
pIn2
 = (
pSrcA
);

141 
j
 = 
§cBLí
;

142 
§cBLí
 = 
§cALí
;

143 
§cALí
 = 
j
;

147 
pOut
 = 
pD°
 + ((
§cALí
 + 
§cBLí
) - 2u);

150 
öc
 = -1;

163 
blockSize1
 = 
§cBLí
 - 1u;

164 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

165 
blockSize3
 = 
blockSize1
;

179 
cou¡
 = 1u;

182 
px
 = 
pIn1
;

185 
pSrc1
 = 
pIn2
 + (
§cBLí
 - 1u);

186 
py
 = 
pSrc1
;

193 
blockSize1
 > 0u)

196 
sum
 = 0;

199 
k
 = 
cou¡
 >> 2;

203 
k
 > 0u)

206 
sum
 = 
	`__SMLAD
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)++, sum);

208 
sum
 = 
	`__SMLAD
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)++, sum);

211 
k
--;

216 
k
 = 
cou¡
 % 0x4u;

218 
k
 > 0u)

222 
sum
 = 
	`__SMLAD
(*
px
++, *
py
++, sum);

225 
k
--;

229 *
pOut
 = (
q15_t
Ë(
sum
 >> 15);

231 
pOut
 +
öc
;

234 
py
 = 
pSrc1
 - 
cou¡
;

235 
px
 = 
pIn1
;

238 
cou¡
++;

241 
blockSize1
--;

255 
px
 = 
pIn1
;

258 
py
 = 
pIn2
;

261 
cou¡
 = 0u;

270 if(
§cBLí
 >= 4u)

273 
blkC¡
 = 
blockSize2
 >> 2u;

275 
blkC¡
 > 0u)

278 
acc0
 = 0;

279 
acc1
 = 0;

280 
acc2
 = 0;

281 
acc3
 = 0;

284 
x0
 = *
	`__SIMD32
(
px
);

286 
x1
 = 
	`_SIMD32_OFFSET
(
px
 + 1);

287 
px
 += 2u;

290 
k
 = 
§cBLí
 >> 2u;

298 
c0
 = *
	`__SIMD32
(
py
)++;

301 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

304 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

307 
x2
 = *
	`__SIMD32
(
px
);

310 
x3
 = 
	`_SIMD32_OFFSET
(
px
 + 1);

313 
acc2
 = 
	`__SMLAD
(
x2
, 
c0
,ácc2);

316 
acc3
 = 
	`__SMLAD
(
x3
, 
c0
,ácc3);

319 
c0
 = *
	`__SIMD32
(
py
)++;

322 
acc0
 = 
	`__SMLAD
(
x2
, 
c0
,ácc0);

325 
acc1
 = 
	`__SMLAD
(
x3
, 
c0
,ácc1);

328 
x0
 = 
	`_SIMD32_OFFSET
(
px
 + 2);

331 
x1
 = 
	`_SIMD32_OFFSET
(
px
 + 3);

332 
px
 += 4u;

335 
acc2
 = 
	`__SMLAD
(
x0
, 
c0
,ácc2);

338 
acc3
 = 
	`__SMLAD
(
x1
, 
c0
,ácc3);

340 } --
k
);

347 
k
 = 
§cBLí
 % 0x4u;

349 if(
k
 == 1u)

352 
c0
 = *
py
;

353 #ifde‡ 
ARM_MATH_BIG_ENDIAN


355 
c0
 = c0 << 16u;

359 
c0
 = c0 & 0x0000FFFF;

364 
x3
 = *
	`__SIMD32
(
px
);

365 
px
++;

368 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

369 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

370 
acc2
 = 
	`__SMLADX
(
x1
, 
c0
,ácc2);

371 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

374 if(
k
 == 2u)

377 
c0
 = *
	`__SIMD32
(
py
);

380 
x3
 = *
	`__SIMD32
(
px
);

383 
x2
 = 
	`_SIMD32_OFFSET
(
px
 + 1);

384 
px
 += 2u;

387 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

388 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

389 
acc2
 = 
	`__SMLAD
(
x3
, 
c0
,ácc2);

390 
acc3
 = 
	`__SMLAD
(
x2
, 
c0
,ácc3);

393 if(
k
 == 3u)

396 
c0
 = *
	`__SIMD32
(
py
)++;

399 
x3
 = *
	`__SIMD32
(
px
);

402 
x2
 = 
	`_SIMD32_OFFSET
(
px
 + 1);

405 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

406 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

407 
acc2
 = 
	`__SMLAD
(
x3
, 
c0
,ácc2);

408 
acc3
 = 
	`__SMLAD
(
x2
, 
c0
,ácc3);

410 
c0
 = (*
py
);

412 #ifde‡ 
ARM_MATH_BIG_ENDIAN


414 
c0
 = c0 << 16u;

417 
c0
 = c0 & 0x0000FFFF;

421 
x3
 = 
	`_SIMD32_OFFSET
(
px
 + 2);

422 
px
 += 3u;

425 
acc0
 = 
	`__SMLADX
(
x1
, 
c0
,ácc0);

426 
acc1
 = 
	`__SMLAD
(
x2
, 
c0
,ácc1);

427 
acc2
 = 
	`__SMLADX
(
x2
, 
c0
,ácc2);

428 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

432 *
pOut
 = (
q15_t
Ë(
acc0
 >> 15);

434 
pOut
 +
öc
;

436 *
pOut
 = (
q15_t
Ë(
acc1
 >> 15);

437 
pOut
 +
öc
;

439 *
pOut
 = (
q15_t
Ë(
acc2
 >> 15);

440 
pOut
 +
öc
;

442 *
pOut
 = (
q15_t
Ë(
acc3
 >> 15);

443 
pOut
 +
öc
;

446 
cou¡
 += 4u;

449 
px
 = 
pIn1
 + 
cou¡
;

450 
py
 = 
pIn2
;

454 
blkC¡
--;

459 
blkC¡
 = 
blockSize2
 % 0x4u;

461 
blkC¡
 > 0u)

464 
sum
 = 0;

467 
k
 = 
§cBLí
 >> 2u;

471 
k
 > 0u)

474 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

475 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

476 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

477 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

480 
k
--;

485 
k
 = 
§cBLí
 % 0x4u;

487 
k
 > 0u)

490 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

493 
k
--;

497 *
pOut
 = (
q15_t
Ë(
sum
 >> 15);

499 
pOut
 +
öc
;

502 
cou¡
++;

505 
px
 = 
pIn1
 + 
cou¡
;

506 
py
 = 
pIn2
;

509 
blkC¡
--;

516 
blkC¡
 = 
blockSize2
;

518 
blkC¡
 > 0u)

521 
sum
 = 0;

524 
k
 = 
§cBLí
;

526 
k
 > 0u)

529 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

532 
k
--;

536 *
pOut
 = (
q15_t
Ë(
sum
 >> 15);

538 
pOut
 +
öc
;

541 
cou¡
++;

544 
px
 = 
pIn1
 + 
cou¡
;

545 
py
 = 
pIn2
;

548 
blkC¡
--;

565 
cou¡
 = 
§cBLí
 - 1u;

568 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

569 
px
 = 
pSrc1
;

572 
py
 = 
pIn2
;

578 
blockSize3
 > 0u)

581 
sum
 = 0;

584 
k
 = 
cou¡
 >> 2u;

588 
k
 > 0u)

592 
sum
 = 
	`__SMLAD
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)++, sum);

594 
sum
 = 
	`__SMLAD
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)++, sum);

597 
k
--;

602 
k
 = 
cou¡
 % 0x4u;

604 
k
 > 0u)

607 
sum
 = 
	`__SMLAD
(*
px
++, *
py
++, sum);

610 
k
--;

614 *
pOut
 = (
q15_t
Ë(
sum
 >> 15);

616 
pOut
 +
öc
;

619 
px
 = ++
pSrc1
;

620 
py
 = 
pIn2
;

623 
cou¡
--;

626 
blockSize3
--;

631 
q15_t
 *
pIn1
;

632 
q15_t
 *
pIn2
;

633 
q15_t
 *
pOut
 = 
pD°
;

634 
q31_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

635 
q15_t
 *
px
;

636 
q15_t
 *
py
;

637 
q15_t
 *
pSrc1
;

638 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

639 
uöt32_t
 
j
, 
k
 = 0u, 
cou¡
, 
blkC¡
, 
outBlockSize
, 
blockSize1
, 
blockSize2
, 
blockSize3
;

640 
öt32_t
 
öc
 = 1;

641 
q15_t
 
a
, 
b
;

657 if(
§cALí
 >
§cBLí
)

660 
pIn1
 = (
pSrcA
);

663 
pIn2
 = (
pSrcB
);

666 
outBlockSize
 = (2u * 
§cALí
) - 1u;

672 
j
 = 
outBlockSize
 - (
§cALí
 + (
§cBLí
 - 1u));

675 
pOut
 +
j
;

681 
pIn1
 = (
pSrcB
);

684 
pIn2
 = (
pSrcA
);

687 
j
 = 
§cBLí
;

688 
§cBLí
 = 
§cALí
;

689 
§cALí
 = 
j
;

693 
pOut
 = 
pD°
 + ((
§cALí
 + 
§cBLí
) - 2u);

696 
öc
 = -1;

709 
blockSize1
 = 
§cBLí
 - 1u;

710 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

711 
blockSize3
 = 
blockSize1
;

725 
cou¡
 = 1u;

728 
px
 = 
pIn1
;

731 
pSrc1
 = 
pIn2
 + (
§cBLí
 - 1u);

732 
py
 = 
pSrc1
;

739 
blockSize1
 > 0u)

742 
sum
 = 0;

745 
k
 = 
cou¡
 >> 2;

749 
k
 > 0u)

752 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

753 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

754 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

755 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

758 
k
--;

763 
k
 = 
cou¡
 % 0x4u;

765 
k
 > 0u)

769 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

772 
k
--;

776 *
pOut
 = (
q15_t
Ë(
sum
 >> 15);

778 
pOut
 +
öc
;

781 
py
 = 
pSrc1
 - 
cou¡
;

782 
px
 = 
pIn1
;

785 
cou¡
++;

788 
blockSize1
--;

802 
px
 = 
pIn1
;

805 
py
 = 
pIn2
;

808 
cou¡
 = 0u;

817 if(
§cBLí
 >= 4u)

820 
blkC¡
 = 
blockSize2
 >> 2u;

822 
blkC¡
 > 0u)

825 
acc0
 = 0;

826 
acc1
 = 0;

827 
acc2
 = 0;

828 
acc3
 = 0;

831 
a
 = *
px
;

832 
b
 = *(
px
 + 1);

834 #i‚de‡
ARM_MATH_BIG_ENDIAN


836 
x0
 = 
	`__PKHBT
(
a
, 
b
, 16);

837 
a
 = *(
px
 + 2);

838 
x1
 = 
	`__PKHBT
(
b
, 
a
, 16);

842 
x0
 = 
	`__PKHBT
(
b
, 
a
, 16);

843 
a
 = *(
px
 + 2);

844 
x1
 = 
	`__PKHBT
(
a
, 
b
, 16);

848 
px
 += 2u;

851 
k
 = 
§cBLí
 >> 2u;

859 
a
 = *
py
;

860 
b
 = *(
py
 + 1);

862 #i‚de‡
ARM_MATH_BIG_ENDIAN


864 
c0
 = 
	`__PKHBT
(
a
, 
b
, 16);

868 
c0
 = 
	`__PKHBT
(
b
, 
a
, 16);

873 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

876 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

879 
a
 = *
px
;

880 
b
 = *(
px
 + 1);

882 #i‚de‡
ARM_MATH_BIG_ENDIAN


884 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

885 
a
 = *(
px
 + 2);

886 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);

890 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

891 
a
 = *(
px
 + 2);

892 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

897 
acc2
 = 
	`__SMLAD
(
x2
, 
c0
,ácc2);

900 
acc3
 = 
	`__SMLAD
(
x3
, 
c0
,ácc3);

903 
a
 = *(
py
 + 2);

904 
b
 = *(
py
 + 3);

906 
py
 += 4u;

908 #i‚de‡
ARM_MATH_BIG_ENDIAN


910 
c0
 = 
	`__PKHBT
(
a
, 
b
, 16);

914 
c0
 = 
	`__PKHBT
(
b
, 
a
, 16);

919 
acc0
 = 
	`__SMLAD
(
x2
, 
c0
,ácc0);

922 
acc1
 = 
	`__SMLAD
(
x3
, 
c0
,ácc1);

925 
a
 = *(
px
 + 2);

926 
b
 = *(
px
 + 3);

928 #i‚de‡
ARM_MATH_BIG_ENDIAN


930 
x0
 = 
	`__PKHBT
(
a
, 
b
, 16);

931 
a
 = *(
px
 + 4);

932 
x1
 = 
	`__PKHBT
(
b
, 
a
, 16);

936 
x0
 = 
	`__PKHBT
(
b
, 
a
, 16);

937 
a
 = *(
px
 + 4);

938 
x1
 = 
	`__PKHBT
(
a
, 
b
, 16);

942 
px
 += 4u;

945 
acc2
 = 
	`__SMLAD
(
x0
, 
c0
,ácc2);

948 
acc3
 = 
	`__SMLAD
(
x1
, 
c0
,ácc3);

950 } --
k
);

957 
k
 = 
§cBLí
 % 0x4u;

959 if(
k
 == 1u)

962 
c0
 = *
py
;

963 #ifde‡ 
ARM_MATH_BIG_ENDIAN


965 
c0
 = c0 << 16u;

969 
c0
 = c0 & 0x0000FFFF;

974 
a
 = *
px
;

975 
b
 = *(
px
 + 1);

977 
px
++;;

979 #i‚de‡
ARM_MATH_BIG_ENDIAN


981 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

985 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);

989 
px
++;

992 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

993 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

994 
acc2
 = 
	`__SMLADX
(
x1
, 
c0
,ácc2);

995 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

998 if(
k
 == 2u)

1001 
a
 = *
py
;

1002 
b
 = *(
py
 + 1);

1004 #i‚de‡
ARM_MATH_BIG_ENDIAN


1006 
c0
 = 
	`__PKHBT
(
a
, 
b
, 16);

1010 
c0
 = 
	`__PKHBT
(
b
, 
a
, 16);

1015 
a
 = *
px
;

1016 
b
 = *(
px
 + 1);

1018 #i‚de‡
ARM_MATH_BIG_ENDIAN


1020 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

1021 
a
 = *(
px
 + 2);

1022 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

1026 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);

1027 
a
 = *(
px
 + 2);

1028 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

1032 
px
 += 2u;

1035 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

1036 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

1037 
acc2
 = 
	`__SMLAD
(
x3
, 
c0
,ácc2);

1038 
acc3
 = 
	`__SMLAD
(
x2
, 
c0
,ácc3);

1041 if(
k
 == 3u)

1044 
a
 = *
py
;

1045 
b
 = *(
py
 + 1);

1047 #i‚de‡
ARM_MATH_BIG_ENDIAN


1049 
c0
 = 
	`__PKHBT
(
a
, 
b
, 16);

1053 
c0
 = 
	`__PKHBT
(
b
, 
a
, 16);

1057 
py
 += 2u;

1060 
a
 = *
px
;

1061 
b
 = *(
px
 + 1);

1063 #i‚de‡
ARM_MATH_BIG_ENDIAN


1065 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

1066 
a
 = *(
px
 + 2);

1067 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

1071 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);

1072 
a
 = *(
px
 + 2);

1073 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

1078 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

1079 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

1080 
acc2
 = 
	`__SMLAD
(
x3
, 
c0
,ácc2);

1081 
acc3
 = 
	`__SMLAD
(
x2
, 
c0
,ácc3);

1083 
c0
 = (*
py
);

1085 #ifde‡ 
ARM_MATH_BIG_ENDIAN


1087 
c0
 = c0 << 16u;

1090 
c0
 = c0 & 0x0000FFFF;

1094 
b
 = *(
px
 + 3);

1096 #i‚de‡
ARM_MATH_BIG_ENDIAN


1098 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

1102 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);

1106 
px
 += 3u;

1109 
acc0
 = 
	`__SMLADX
(
x1
, 
c0
,ácc0);

1110 
acc1
 = 
	`__SMLAD
(
x2
, 
c0
,ácc1);

1111 
acc2
 = 
	`__SMLADX
(
x2
, 
c0
,ácc2);

1112 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

1116 *
pOut
 = (
q15_t
Ë(
acc0
 >> 15);

1118 
pOut
 +
öc
;

1120 *
pOut
 = (
q15_t
Ë(
acc1
 >> 15);

1121 
pOut
 +
öc
;

1123 *
pOut
 = (
q15_t
Ë(
acc2
 >> 15);

1124 
pOut
 +
öc
;

1126 *
pOut
 = (
q15_t
Ë(
acc3
 >> 15);

1127 
pOut
 +
öc
;

1130 
cou¡
 += 4u;

1133 
px
 = 
pIn1
 + 
cou¡
;

1134 
py
 = 
pIn2
;

1138 
blkC¡
--;

1143 
blkC¡
 = 
blockSize2
 % 0x4u;

1145 
blkC¡
 > 0u)

1148 
sum
 = 0;

1151 
k
 = 
§cBLí
 >> 2u;

1155 
k
 > 0u)

1158 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

1159 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

1160 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

1161 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

1164 
k
--;

1169 
k
 = 
§cBLí
 % 0x4u;

1171 
k
 > 0u)

1174 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

1177 
k
--;

1181 *
pOut
 = (
q15_t
Ë(
sum
 >> 15);

1183 
pOut
 +
öc
;

1186 
cou¡
++;

1189 
px
 = 
pIn1
 + 
cou¡
;

1190 
py
 = 
pIn2
;

1193 
blkC¡
--;

1200 
blkC¡
 = 
blockSize2
;

1202 
blkC¡
 > 0u)

1205 
sum
 = 0;

1208 
k
 = 
§cBLí
;

1210 
k
 > 0u)

1213 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

1216 
k
--;

1220 *
pOut
 = (
q15_t
Ë(
sum
 >> 15);

1222 
pOut
 +
öc
;

1225 
cou¡
++;

1228 
px
 = 
pIn1
 + 
cou¡
;

1229 
py
 = 
pIn2
;

1232 
blkC¡
--;

1249 
cou¡
 = 
§cBLí
 - 1u;

1252 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

1253 
px
 = 
pSrc1
;

1256 
py
 = 
pIn2
;

1262 
blockSize3
 > 0u)

1265 
sum
 = 0;

1268 
k
 = 
cou¡
 >> 2u;

1272 
k
 > 0u)

1275 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

1276 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

1277 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

1278 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

1281 
k
--;

1286 
k
 = 
cou¡
 % 0x4u;

1288 
k
 > 0u)

1291 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

1294 
k
--;

1298 *
pOut
 = (
q15_t
Ë(
sum
 >> 15);

1300 
pOut
 +
öc
;

1303 
px
 = ++
pSrc1
;

1304 
py
 = 
pIn2
;

1307 
cou¡
--;

1310 
blockSize3
--;

1315 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_fast_q31.c

41 
	~"¨m_m©h.h
"

81 
	$¨m_c‹ªœã_Á°_q31
(

82 
q31_t
 * 
pSrcA
,

83 
uöt32_t
 
§cALí
,

84 
q31_t
 * 
pSrcB
,

85 
uöt32_t
 
§cBLí
,

86 
q31_t
 * 
pD°
)

88 
q31_t
 *
pIn1
;

89 
q31_t
 *
pIn2
;

90 
q31_t
 *
pOut
 = 
pD°
;

91 
q31_t
 *
px
;

92 
q31_t
 *
py
;

93 
q31_t
 *
pSrc1
;

94 
q31_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

95 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

96 
uöt32_t
 
j
, 
k
 = 0u, 
cou¡
, 
blkC¡
, 
outBlockSize
, 
blockSize1
, 
blockSize2
, 
blockSize3
;

97 
öt32_t
 
öc
 = 1;

103 if(
§cALí
 >
§cBLí
)

106 
pIn1
 = (
pSrcA
);

109 
pIn2
 = (
pSrcB
);

112 
outBlockSize
 = (2u * 
§cALí
) - 1u;

118 
j
 = 
outBlockSize
 - (
§cALí
 + (
§cBLí
 - 1u));

121 
pOut
 +
j
;

127 
pIn1
 = (
pSrcB
);

130 
pIn2
 = (
pSrcA
);

133 
j
 = 
§cBLí
;

134 
§cBLí
 = 
§cALí
;

135 
§cALí
 = 
j
;

139 
pOut
 = 
pD°
 + ((
§cALí
 + 
§cBLí
) - 2u);

142 
öc
 = -1;

155 
blockSize1
 = 
§cBLí
 - 1u;

156 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

157 
blockSize3
 = 
blockSize1
;

171 
cou¡
 = 1u;

174 
px
 = 
pIn1
;

177 
pSrc1
 = 
pIn2
 + (
§cBLí
 - 1u);

178 
py
 = 
pSrc1
;

185 
blockSize1
 > 0u)

188 
sum
 = 0;

191 
k
 = 
cou¡
 >> 2;

195 
k
 > 0u)

198 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

199 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

201 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

202 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

204 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

205 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

207 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

208 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

211 
k
--;

216 
k
 = 
cou¡
 % 0x4u;

218 
k
 > 0u)

222 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

223 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

226 
k
--;

230 *
pOut
 = 
sum
 << 1;

232 
pOut
 +
öc
;

235 
py
 = 
pSrc1
 - 
cou¡
;

236 
px
 = 
pIn1
;

239 
cou¡
++;

242 
blockSize1
--;

256 
px
 = 
pIn1
;

259 
py
 = 
pIn2
;

262 
cou¡
 = 0u;

271 if(
§cBLí
 >= 4u)

274 
blkC¡
 = 
blockSize2
 >> 2u;

276 
blkC¡
 > 0u)

279 
acc0
 = 0;

280 
acc1
 = 0;

281 
acc2
 = 0;

282 
acc3
 = 0;

285 
x0
 = *(
px
++);

286 
x1
 = *(
px
++);

287 
x2
 = *(
px
++);

290 
k
 = 
§cBLí
 >> 2u;

297 
c0
 = *(
py
++);

300 
x3
 = *(
px
++);

304 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

306 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

308 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

310 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

313 
c0
 = *(
py
++);

316 
x0
 = *(
px
++);

320 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

322 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

324 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

326 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

329 
c0
 = *(
py
++);

332 
x1
 = *(
px
++);

336 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

338 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

340 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

342 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

345 
c0
 = *(
py
++);

348 
x2
 = *(
px
++);

352 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

354 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

356 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

358 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

361 } --
k
);

365 
k
 = 
§cBLí
 % 0x4u;

367 
k
 > 0u)

370 
c0
 = *(
py
++);

373 
x3
 = *(
px
++);

377 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

379 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

381 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

383 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

386 
x0
 = 
x1
;

387 
x1
 = 
x2
;

388 
x2
 = 
x3
;

391 
k
--;

395 *
pOut
 = (
q31_t
Ë(
acc0
 << 1);

397 
pOut
 +
öc
;

399 *
pOut
 = (
q31_t
Ë(
acc1
 << 1);

400 
pOut
 +
öc
;

402 *
pOut
 = (
q31_t
Ë(
acc2
 << 1);

403 
pOut
 +
öc
;

405 *
pOut
 = (
q31_t
Ë(
acc3
 << 1);

406 
pOut
 +
öc
;

409 
cou¡
 += 4u;

412 
px
 = 
pIn1
 + 
cou¡
;

413 
py
 = 
pIn2
;

417 
blkC¡
--;

422 
blkC¡
 = 
blockSize2
 % 0x4u;

424 
blkC¡
 > 0u)

427 
sum
 = 0;

430 
k
 = 
§cBLí
 >> 2u;

434 
k
 > 0u)

437 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

438 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

439 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

440 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

441 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

442 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

443 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

444 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

447 
k
--;

452 
k
 = 
§cBLí
 % 0x4u;

454 
k
 > 0u)

457 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

458 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

461 
k
--;

465 *
pOut
 = 
sum
 << 1;

467 
pOut
 +
öc
;

470 
cou¡
++;

473 
px
 = 
pIn1
 + 
cou¡
;

474 
py
 = 
pIn2
;

478 
blkC¡
--;

485 
blkC¡
 = 
blockSize2
;

487 
blkC¡
 > 0u)

490 
sum
 = 0;

493 
k
 = 
§cBLí
;

495 
k
 > 0u)

498 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

499 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

502 
k
--;

506 *
pOut
 = 
sum
 << 1;

508 
pOut
 +
öc
;

511 
cou¡
++;

514 
px
 = 
pIn1
 + 
cou¡
;

515 
py
 = 
pIn2
;

518 
blkC¡
--;

535 
cou¡
 = 
§cBLí
 - 1u;

538 
pSrc1
 = ((
pIn1
 + 
§cALí
Ë- 
§cBLí
) + 1u;

539 
px
 = 
pSrc1
;

542 
py
 = 
pIn2
;

548 
blockSize3
 > 0u)

551 
sum
 = 0;

554 
k
 = 
cou¡
 >> 2u;

558 
k
 > 0u)

562 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

563 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

565 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

566 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

568 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

569 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

571 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

572 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

575 
k
--;

580 
k
 = 
cou¡
 % 0x4u;

582 
k
 > 0u)

585 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

586 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

589 
k
--;

593 *
pOut
 = 
sum
 << 1;

595 
pOut
 +
öc
;

598 
px
 = ++
pSrc1
;

599 
py
 = 
pIn2
;

602 
cou¡
--;

605 
blockSize3
--;

608 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_opt_q15.c

41 
	~"¨m_m©h.h
"

83 
	$¨m_c‹ªœã_›t_q15
(

84 
q15_t
 * 
pSrcA
,

85 
uöt32_t
 
§cALí
,

86 
q15_t
 * 
pSrcB
,

87 
uöt32_t
 
§cBLí
,

88 
q15_t
 * 
pD°
,

89 
q15_t
 * 
pS¸©ch
)

91 
q15_t
 *
pIn1
;

92 
q15_t
 *
pIn2
;

93 
q63_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

94 
q15_t
 *
py
;

95 
q31_t
 
x1
, 
x2
, 
x3
;

96 
uöt32_t
 
j
, 
blkC¡
, 
outBlockSize
;

97 
öt32_t
 
öc
 = 1;

98 
uöt32_t
 
èpC¡
;

99 
q31_t
 
y1
, 
y2
;

100 
q15_t
 *
pS¸
;

101 
q15_t
 *
pOut
 = 
pD°
;

102 #ifde‡
UNALIGNED_SUPPORT_DISABLE


104 
q15_t
 
a
, 
b
;

121 if(
§cALí
 >
§cBLí
)

124 
pIn1
 = (
pSrcA
);

127 
pIn2
 = (
pSrcB
);

130 
outBlockSize
 = (2u * 
§cALí
) - 1u;

136 
j
 = 
outBlockSize
 - (
§cALí
 + (
§cBLí
 - 1u));

139 
pOut
 +
j
;

145 
pIn1
 = (
pSrcB
);

148 
pIn2
 = (
pSrcA
);

151 
j
 = 
§cBLí
;

152 
§cBLí
 = 
§cALí
;

153 
§cALí
 = 
j
;

157 
pOut
 = 
pD°
 + ((
§cALí
 + 
§cBLí
) - 2u);

160 
öc
 = -1;

164 
pS¸
 = 
pS¸©ch
;

167 
	`¨m_fûl_q15
(0, 
pS¸
, (
§cBLí
 - 1u));

170 
pS¸
 +(
§cBLí
 - 1u);

172 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


175 
	`¨m_c›y_q15
(
pIn1
, 
pS¸
, 
§cALí
);

179 
pS¸
 +
§cALí
;

184 
j
 = 
§cALí
 >> 2u;

188 
j
 > 0u)

191 *
pS¸
++ = *
pIn1
++;

192 *
pS¸
++ = *
pIn1
++;

193 *
pS¸
++ = *
pIn1
++;

194 *
pS¸
++ = *
pIn1
++;

197 
j
--;

202 
j
 = 
§cALí
 % 0x4u;

204 
j
 > 0u)

207 *
pS¸
++ = *
pIn1
++;

210 
j
--;

215 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


218 
	`¨m_fûl_q15
(0, 
pS¸
, (
§cBLí
 - 1u));

221 
pS¸
 +(
§cBLí
 - 1u);

226 
j
 = (
§cBLí
 - 1u) >> 2u;

230 
j
 > 0u)

233 *
pS¸
++ = 0;

234 *
pS¸
++ = 0;

235 *
pS¸
++ = 0;

236 *
pS¸
++ = 0;

239 
j
--;

244 
j
 = (
§cBLí
 - 1u) % 0x4u;

246 
j
 > 0u)

249 *
pS¸
++ = 0;

252 
j
--;

258 
py
 = 
pIn2
;

262 
blkC¡
 = (
§cALí
 + 
§cBLí
 - 1u) >> 2;

264 
blkC¡
 > 0)

267 
pS¸
 = 
pS¸©ch
;

270 
acc0
 = 0;

271 
acc1
 = 0;

272 
acc2
 = 0;

273 
acc3
 = 0;

276 
x1
 = *
	`__SIMD32
(
pS¸
)++;

279 
x2
 = *
	`__SIMD32
(
pS¸
)++;

281 
èpC¡
 = (
§cBLí
) >> 2u;

283 
èpC¡
 > 0u)

286 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


289 
y1
 = 
	`_SIMD32_OFFSET
(
pIn2
);

290 
y2
 = 
	`_SIMD32_OFFSET
(
pIn2
 + 2u);

292 
acc0
 = 
	`__SMLALD
(
x1
, 
y1
,ácc0);

294 
acc2
 = 
	`__SMLALD
(
x2
, 
y1
,ácc2);

296 #i‚de‡
ARM_MATH_BIG_ENDIAN


297 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

299 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

302 
acc1
 = 
	`__SMLALDX
(
x3
, 
y1
,ácc1);

304 
x1
 = 
	`_SIMD32_OFFSET
(
pS¸
);

306 
acc0
 = 
	`__SMLALD
(
x2
, 
y2
,ácc0);

308 
acc2
 = 
	`__SMLALD
(
x1
, 
y2
,ácc2);

310 #i‚de‡
ARM_MATH_BIG_ENDIAN


311 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

313 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

316 
acc3
 = 
	`__SMLALDX
(
x3
, 
y1
,ácc3);

318 
acc1
 = 
	`__SMLALDX
(
x3
, 
y2
,ácc1);

320 
x2
 = 
	`_SIMD32_OFFSET
(
pS¸
 + 2u);

322 #i‚de‡
ARM_MATH_BIG_ENDIAN


323 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

325 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

328 
acc3
 = 
	`__SMLALDX
(
x3
, 
y2
,ácc3);

333 
a
 = *
pIn2
;

334 
b
 = *(
pIn2
 + 1);

336 #i‚de‡
ARM_MATH_BIG_ENDIAN


337 
y1
 = 
	`__PKHBT
(
a
, 
b
, 16);

339 
y1
 = 
	`__PKHBT
(
b
, 
a
, 16);

342 
a
 = *(
pIn2
 + 2);

343 
b
 = *(
pIn2
 + 3);

344 #i‚de‡
ARM_MATH_BIG_ENDIAN


345 
y2
 = 
	`__PKHBT
(
a
, 
b
, 16);

347 
y2
 = 
	`__PKHBT
(
b
, 
a
, 16);

350 
acc0
 = 
	`__SMLALD
(
x1
, 
y1
,ácc0);

352 
acc2
 = 
	`__SMLALD
(
x2
, 
y1
,ácc2);

354 #i‚de‡
ARM_MATH_BIG_ENDIAN


355 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

357 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

360 
acc1
 = 
	`__SMLALDX
(
x3
, 
y1
,ácc1);

362 
a
 = *
pS¸
;

363 
b
 = *(
pS¸
 + 1);

365 #i‚de‡
ARM_MATH_BIG_ENDIAN


366 
x1
 = 
	`__PKHBT
(
a
, 
b
, 16);

368 
x1
 = 
	`__PKHBT
(
b
, 
a
, 16);

371 
acc0
 = 
	`__SMLALD
(
x2
, 
y2
,ácc0);

373 
acc2
 = 
	`__SMLALD
(
x1
, 
y2
,ácc2);

375 #i‚de‡
ARM_MATH_BIG_ENDIAN


376 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

378 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

381 
acc3
 = 
	`__SMLALDX
(
x3
, 
y1
,ácc3);

383 
acc1
 = 
	`__SMLALDX
(
x3
, 
y2
,ácc1);

385 
a
 = *(
pS¸
 + 2);

386 
b
 = *(
pS¸
 + 3);

388 #i‚de‡
ARM_MATH_BIG_ENDIAN


389 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

391 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

394 #i‚de‡
ARM_MATH_BIG_ENDIAN


395 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

397 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

400 
acc3
 = 
	`__SMLALDX
(
x3
, 
y2
,ácc3);

404 
pIn2
 += 4u;

406 
pS¸
 += 4u;

410 
èpC¡
--;

416 
pS¸
 -= 4u;

420 
èpC¡
 = (
§cBLí
) & 3u;

422 
èpC¡
 > 0u)

426 
acc0
 +(*
pS¸
++ * *
pIn2
);

427 
acc1
 +(*
pS¸
++ * *
pIn2
);

428 
acc2
 +(*
pS¸
++ * *
pIn2
);

429 
acc3
 +(*
pS¸
++ * *
pIn2
++);

431 
pS¸
 -= 3u;

434 
èpC¡
--;

437 
blkC¡
--;

441 *
pOut
 = (
	`__SSAT
(
acc0
 >> 15u, 16));

442 
pOut
 +
öc
;

443 *
pOut
 = (
	`__SSAT
(
acc1
 >> 15u, 16));

444 
pOut
 +
öc
;

445 *
pOut
 = (
	`__SSAT
(
acc2
 >> 15u, 16));

446 
pOut
 +
öc
;

447 *
pOut
 = (
	`__SSAT
(
acc3
 >> 15u, 16));

448 
pOut
 +
öc
;

451 
pIn2
 = 
py
;

453 
pS¸©ch
 += 4u;

458 
blkC¡
 = (
§cALí
 + 
§cBLí
 - 1u) & 0x3;

461 
blkC¡
 > 0)

464 
pS¸
 = 
pS¸©ch
;

467 
acc0
 = 0;

469 
èpC¡
 = (
§cBLí
) >> 1u;

471 
èpC¡
 > 0u)

474 
acc0
 +(*
pS¸
++ * *
pIn2
++);

475 
acc0
 +(*
pS¸
++ * *
pIn2
++);

478 
èpC¡
--;

481 
èpC¡
 = (
§cBLí
) & 1u;

484 
èpC¡
 > 0u)

488 
acc0
 +(*
pS¸
++ * *
pIn2
++);

491 
èpC¡
--;

494 
blkC¡
--;

497 *
pOut
 = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

499 
pOut
 +
öc
;

502 
pIn2
 = 
py
;

504 
pS¸©ch
 += 1u;

509 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_opt_q7.c

41 
	~"¨m_m©h.h
"

83 
	$¨m_c‹ªœã_›t_q7
(

84 
q7_t
 * 
pSrcA
,

85 
uöt32_t
 
§cALí
,

86 
q7_t
 * 
pSrcB
,

87 
uöt32_t
 
§cBLí
,

88 
q7_t
 * 
pD°
,

89 
q15_t
 * 
pS¸©ch1
,

90 
q15_t
 * 
pS¸©ch2
)

92 
q7_t
 *
pOut
 = 
pD°
;

93 
q15_t
 *
pS¸1
 = 
pS¸©ch1
;

94 
q15_t
 *
pS¸2
 = 
pS¸©ch2
;

95 
q7_t
 *
pIn1
;

96 
q7_t
 *
pIn2
;

97 
q15_t
 *
py
;

98 
q31_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

99 
uöt32_t
 
j
, 
k
 = 0u, 
blkC¡
;

100 
öt32_t
 
öc
 = 1;

101 
uöt32_t
 
outBlockSize
;

102 
q15_t
 
x4
;

103 
uöt32_t
 
èpC¡
;

104 
q31_t
 
x1
, 
x2
, 
x3
, 
y1
;

119 if(
§cALí
 >
§cBLí
)

122 
pIn1
 = (
pSrcA
);

125 
pIn2
 = (
pSrcB
);

128 
outBlockSize
 = (2u * 
§cALí
) - 1u;

134 
j
 = 
outBlockSize
 - (
§cALí
 + (
§cBLí
 - 1u));

137 
pOut
 +
j
;

143 
pIn1
 = (
pSrcB
);

146 
pIn2
 = (
pSrcA
);

149 
j
 = 
§cBLí
;

150 
§cBLí
 = 
§cALí
;

151 
§cALí
 = 
j
;

155 
pOut
 = 
pD°
 + ((
§cALí
 + 
§cBLí
) - 2u);

158 
öc
 = -1;

164 
k
 = 
§cBLí
 >> 2u;

168 
k
 > 0u)

171 
x4
 = (
q15_t
Ë* 
pIn2
++;

172 *
pS¸2
++ = 
x4
;

173 
x4
 = (
q15_t
Ë* 
pIn2
++;

174 *
pS¸2
++ = 
x4
;

175 
x4
 = (
q15_t
Ë* 
pIn2
++;

176 *
pS¸2
++ = 
x4
;

177 
x4
 = (
q15_t
Ë* 
pIn2
++;

178 *
pS¸2
++ = 
x4
;

181 
k
--;

186 
k
 = 
§cBLí
 % 0x4u;

188 
k
 > 0u)

191 
x4
 = (
q15_t
Ë* 
pIn2
++;

192 *
pS¸2
++ = 
x4
;

195 
k
--;

199 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

202 
pS¸1
 +(
§cBLí
 - 1u);

205 
k
 = 
§cALí
 >> 2u;

209 
k
 > 0u)

212 
x4
 = (
q15_t
Ë* 
pIn1
++;

213 *
pS¸1
++ = 
x4
;

214 
x4
 = (
q15_t
Ë* 
pIn1
++;

215 *
pS¸1
++ = 
x4
;

216 
x4
 = (
q15_t
Ë* 
pIn1
++;

217 *
pS¸1
++ = 
x4
;

218 
x4
 = (
q15_t
Ë* 
pIn1
++;

219 *
pS¸1
++ = 
x4
;

222 
k
--;

227 
k
 = 
§cALí
 % 0x4u;

229 
k
 > 0u)

232 
x4
 = (
q15_t
Ë* 
pIn1
++;

233 *
pS¸1
++ = 
x4
;

236 
k
--;

239 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


242 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

245 
pS¸1
 +(
§cBLí
 - 1u);

250 
k
 = (
§cBLí
 - 1u) >> 2u;

254 
k
 > 0u)

257 *
pS¸1
++ = 0;

258 *
pS¸1
++ = 0;

259 *
pS¸1
++ = 0;

260 *
pS¸1
++ = 0;

263 
k
--;

268 
k
 = (
§cBLí
 - 1u) % 0x4u;

270 
k
 > 0u)

273 *
pS¸1
++ = 0;

276 
k
--;

282 
py
 = 
pS¸©ch2
;

285 
pS¸2
 = 
pS¸©ch2
;

288 
blkC¡
 = (
§cALí
 + 
§cBLí
 - 1u) >> 2;

290 
blkC¡
 > 0)

293 
pS¸1
 = 
pS¸©ch1
;

296 
acc0
 = 0;

297 
acc1
 = 0;

298 
acc2
 = 0;

299 
acc3
 = 0;

302 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

305 
x2
 = *
	`__SIMD32
(
pS¸1
)++;

307 
èpC¡
 = (
§cBLí
) >> 2u;

309 
èpC¡
 > 0u)

313 
y1
 = 
	`_SIMD32_OFFSET
(
pS¸2
);

316 
acc0
 = 
	`__SMLAD
(
x1
, 
y1
,ácc0);

317 
acc2
 = 
	`__SMLAD
(
x2
, 
y1
,ácc2);

320 #i‚de‡
ARM_MATH_BIG_ENDIAN


321 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

323 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

327 
acc1
 = 
	`__SMLADX
(
x3
, 
y1
,ácc1);

330 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

333 #i‚de‡
ARM_MATH_BIG_ENDIAN


334 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

336 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

339 
acc3
 = 
	`__SMLADX
(
x3
, 
y1
,ácc3);

342 
y1
 = 
	`_SIMD32_OFFSET
(
pS¸2
 + 2u);

344 
acc0
 = 
	`__SMLAD
(
x2
, 
y1
,ácc0);

346 
acc2
 = 
	`__SMLAD
(
x1
, 
y1
,ácc2);

348 
acc1
 = 
	`__SMLADX
(
x3
, 
y1
,ácc1);

350 
x2
 = *
	`__SIMD32
(
pS¸1
)++;

352 #i‚de‡
ARM_MATH_BIG_ENDIAN


353 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

355 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

358 
acc3
 = 
	`__SMLADX
(
x3
, 
y1
,ácc3);

360 
pS¸2
 += 4u;

364 
èpC¡
--;

370 
pS¸1
 -= 4u;

374 
èpC¡
 = (
§cBLí
) & 3u;

376 
èpC¡
 > 0u)

380 
acc0
 +(*
pS¸1
++ * *
pS¸2
);

381 
acc1
 +(*
pS¸1
++ * *
pS¸2
);

382 
acc2
 +(*
pS¸1
++ * *
pS¸2
);

383 
acc3
 +(*
pS¸1
++ * *
pS¸2
++);

385 
pS¸1
 -= 3u;

388 
èpC¡
--;

391 
blkC¡
--;

394 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
acc0
 >> 7u, 8));

395 
pOut
 +
öc
;

396 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
acc1
 >> 7u, 8));

397 
pOut
 +
öc
;

398 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
acc2
 >> 7u, 8));

399 
pOut
 +
öc
;

400 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
acc3
 >> 7u, 8));

401 
pOut
 +
öc
;

404 
pS¸2
 = 
py
;

406 
pS¸©ch1
 += 4u;

411 
blkC¡
 = (
§cALí
 + 
§cBLí
 - 1u) & 0x3;

414 
blkC¡
 > 0)

417 
pS¸1
 = 
pS¸©ch1
;

420 
acc0
 = 0;

422 
èpC¡
 = (
§cBLí
) >> 1u;

424 
èpC¡
 > 0u)

426 
acc0
 +(*
pS¸1
++ * *
pS¸2
++);

427 
acc0
 +(*
pS¸1
++ * *
pS¸2
++);

430 
èpC¡
--;

433 
èpC¡
 = (
§cBLí
) & 1u;

436 
èpC¡
 > 0u)

440 
acc0
 +(*
pS¸1
++ * *
pS¸2
++);

443 
èpC¡
--;

446 
blkC¡
--;

449 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
acc0
 >> 7u, 8));

451 
pOut
 +
öc
;

454 
pS¸2
 = 
py
;

456 
pS¸©ch1
 += 1u;

460 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_q15.c

41 
	~"¨m_m©h.h
"

79 
	$¨m_c‹ªœã_q15
(

80 
q15_t
 * 
pSrcA
,

81 
uöt32_t
 
§cALí
,

82 
q15_t
 * 
pSrcB
,

83 
uöt32_t
 
§cBLí
,

84 
q15_t
 * 
pD°
)

87 #i‡(
	`deföed
(
ARM_MATH_CM4
Ë|| deföed(
ARM_MATH_CM3
)Ë&& !deföed(
UNALIGNED_SUPPORT_DISABLE
)

91 
q15_t
 *
pIn1
;

92 
q15_t
 *
pIn2
;

93 
q15_t
 *
pOut
 = 
pD°
;

94 
q63_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

95 
q15_t
 *
px
;

96 
q15_t
 *
py
;

97 
q15_t
 *
pSrc1
;

98 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

99 
uöt32_t
 
j
, 
k
 = 0u, 
cou¡
, 
blkC¡
, 
outBlockSize
, 
blockSize1
, 
blockSize2
, 
blockSize3
;

100 
öt32_t
 
öc
 = 1;

116 if(
§cALí
 >
§cBLí
)

119 
pIn1
 = (
pSrcA
);

122 
pIn2
 = (
pSrcB
);

125 
outBlockSize
 = (2u * 
§cALí
) - 1u;

131 
j
 = 
outBlockSize
 - (
§cALí
 + (
§cBLí
 - 1u));

134 
pOut
 +
j
;

140 
pIn1
 = (
pSrcB
);

143 
pIn2
 = (
pSrcA
);

146 
j
 = 
§cBLí
;

147 
§cBLí
 = 
§cALí
;

148 
§cALí
 = 
j
;

152 
pOut
 = 
pD°
 + ((
§cALí
 + 
§cBLí
) - 2u);

155 
öc
 = -1;

168 
blockSize1
 = 
§cBLí
 - 1u;

169 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

170 
blockSize3
 = 
blockSize1
;

184 
cou¡
 = 1u;

187 
px
 = 
pIn1
;

190 
pSrc1
 = 
pIn2
 + (
§cBLí
 - 1u);

191 
py
 = 
pSrc1
;

198 
blockSize1
 > 0u)

201 
sum
 = 0;

204 
k
 = 
cou¡
 >> 2;

208 
k
 > 0u)

211 
sum
 = 
	`__SMLALD
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)++, sum);

213 
sum
 = 
	`__SMLALD
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)++, sum);

216 
k
--;

221 
k
 = 
cou¡
 % 0x4u;

223 
k
 > 0u)

227 
sum
 = 
	`__SMLALD
(*
px
++, *
py
++, sum);

230 
k
--;

234 *
pOut
 = (
q15_t
Ë(
	`__SSAT
((
sum
 >> 15), 16));

236 
pOut
 +
öc
;

239 
py
 = 
pSrc1
 - 
cou¡
;

240 
px
 = 
pIn1
;

243 
cou¡
++;

246 
blockSize1
--;

260 
px
 = 
pIn1
;

263 
py
 = 
pIn2
;

266 
cou¡
 = 0u;

275 if(
§cBLí
 >= 4u)

278 
blkC¡
 = 
blockSize2
 >> 2u;

280 
blkC¡
 > 0u)

283 
acc0
 = 0;

284 
acc1
 = 0;

285 
acc2
 = 0;

286 
acc3
 = 0;

289 
x0
 = *
	`__SIMD32
(
px
);

291 
x1
 = 
	`_SIMD32_OFFSET
(
px
 + 1);

292 
px
 += 2u;

295 
k
 = 
§cBLí
 >> 2u;

303 
c0
 = *
	`__SIMD32
(
py
)++;

306 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

309 
acc1
 = 
	`__SMLALD
(
x1
, 
c0
,ácc1);

312 
x2
 = *
	`__SIMD32
(
px
);

315 
x3
 = 
	`_SIMD32_OFFSET
(
px
 + 1);

318 
acc2
 = 
	`__SMLALD
(
x2
, 
c0
,ácc2);

321 
acc3
 = 
	`__SMLALD
(
x3
, 
c0
,ácc3);

324 
c0
 = *
	`__SIMD32
(
py
)++;

327 
acc0
 = 
	`__SMLALD
(
x2
, 
c0
,ácc0);

330 
acc1
 = 
	`__SMLALD
(
x3
, 
c0
,ácc1);

333 
x0
 = 
	`_SIMD32_OFFSET
(
px
 + 2);

336 
x1
 = 
	`_SIMD32_OFFSET
(
px
 + 3);

338 
px
 += 4u;

341 
acc2
 = 
	`__SMLALD
(
x0
, 
c0
,ácc2);

344 
acc3
 = 
	`__SMLALD
(
x1
, 
c0
,ácc3);

346 } --
k
);

350 
k
 = 
§cBLí
 % 0x4u;

352 if(
k
 == 1u)

355 
c0
 = *
py
;

356 #ifde‡ 
ARM_MATH_BIG_ENDIAN


358 
c0
 = c0 << 16u;

362 
c0
 = c0 & 0x0000FFFF;

366 
x3
 = *
	`__SIMD32
(
px
);

367 
px
++;

370 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

371 
acc1
 = 
	`__SMLALD
(
x1
, 
c0
,ácc1);

372 
acc2
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc2);

373 
acc3
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc3);

376 if(
k
 == 2u)

379 
c0
 = *
	`__SIMD32
(
py
);

382 
x3
 = *
	`__SIMD32
(
px
);

385 
x2
 = 
	`_SIMD32_OFFSET
(
px
 + 1);

386 
px
 += 2u;

389 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

390 
acc1
 = 
	`__SMLALD
(
x1
, 
c0
,ácc1);

391 
acc2
 = 
	`__SMLALD
(
x3
, 
c0
,ácc2);

392 
acc3
 = 
	`__SMLALD
(
x2
, 
c0
,ácc3);

395 if(
k
 == 3u)

398 
c0
 = *
	`__SIMD32
(
py
)++;

401 
x3
 = *
	`__SIMD32
(
px
);

404 
x2
 = 
	`_SIMD32_OFFSET
(
px
 + 1);

407 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

408 
acc1
 = 
	`__SMLALD
(
x1
, 
c0
,ácc1);

409 
acc2
 = 
	`__SMLALD
(
x3
, 
c0
,ácc2);

410 
acc3
 = 
	`__SMLALD
(
x2
, 
c0
,ácc3);

412 
c0
 = (*
py
);

415 #ifde‡ 
ARM_MATH_BIG_ENDIAN


417 
c0
 = c0 << 16u;

420 
c0
 = c0 & 0x0000FFFF;

423 
x3
 = 
	`_SIMD32_OFFSET
(
px
 + 2);

424 
px
 += 3u;

427 
acc0
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc0);

428 
acc1
 = 
	`__SMLALD
(
x2
, 
c0
,ácc1);

429 
acc2
 = 
	`__SMLALDX
(
x2
, 
c0
,ácc2);

430 
acc3
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc3);

434 *
pOut
 = (
q15_t
Ë(
	`__SSAT
(
acc0
 >> 15, 16));

436 
pOut
 +
öc
;

438 *
pOut
 = (
q15_t
Ë(
	`__SSAT
(
acc1
 >> 15, 16));

439 
pOut
 +
öc
;

441 *
pOut
 = (
q15_t
Ë(
	`__SSAT
(
acc2
 >> 15, 16));

442 
pOut
 +
öc
;

444 *
pOut
 = (
q15_t
Ë(
	`__SSAT
(
acc3
 >> 15, 16));

445 
pOut
 +
öc
;

448 
cou¡
 += 4u;

451 
px
 = 
pIn1
 + 
cou¡
;

452 
py
 = 
pIn2
;

455 
blkC¡
--;

460 
blkC¡
 = 
blockSize2
 % 0x4u;

462 
blkC¡
 > 0u)

465 
sum
 = 0;

468 
k
 = 
§cBLí
 >> 2u;

472 
k
 > 0u)

475 
sum
 +((
q63_t
Ë* 
px
++ * *
py
++);

476 
sum
 +((
q63_t
Ë* 
px
++ * *
py
++);

477 
sum
 +((
q63_t
Ë* 
px
++ * *
py
++);

478 
sum
 +((
q63_t
Ë* 
px
++ * *
py
++);

481 
k
--;

486 
k
 = 
§cBLí
 % 0x4u;

488 
k
 > 0u)

491 
sum
 +((
q63_t
Ë* 
px
++ * *
py
++);

494 
k
--;

498 *
pOut
 = (
q15_t
Ë(
	`__SSAT
(
sum
 >> 15, 16));

500 
pOut
 +
öc
;

503 
cou¡
++;

506 
px
 = 
pIn1
 + 
cou¡
;

507 
py
 = 
pIn2
;

510 
blkC¡
--;

517 
blkC¡
 = 
blockSize2
;

519 
blkC¡
 > 0u)

522 
sum
 = 0;

525 
k
 = 
§cBLí
;

527 
k
 > 0u)

530 
sum
 +((
q63_t
Ë* 
px
++ * *
py
++);

533 
k
--;

537 *
pOut
 = (
q15_t
Ë(
	`__SSAT
(
sum
 >> 15, 16));

539 
pOut
 +
öc
;

542 
cou¡
++;

545 
px
 = 
pIn1
 + 
cou¡
;

546 
py
 = 
pIn2
;

549 
blkC¡
--;

566 
cou¡
 = 
§cBLí
 - 1u;

569 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

570 
px
 = 
pSrc1
;

573 
py
 = 
pIn2
;

579 
blockSize3
 > 0u)

582 
sum
 = 0;

585 
k
 = 
cou¡
 >> 2u;

589 
k
 > 0u)

593 
sum
 = 
	`__SMLALD
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)++, sum);

595 
sum
 = 
	`__SMLALD
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)++, sum);

598 
k
--;

603 
k
 = 
cou¡
 % 0x4u;

605 
k
 > 0u)

608 
sum
 = 
	`__SMLALD
(*
px
++, *
py
++, sum);

611 
k
--;

615 *
pOut
 = (
q15_t
Ë(
	`__SSAT
((
sum
 >> 15), 16));

617 
pOut
 +
öc
;

620 
px
 = ++
pSrc1
;

621 
py
 = 
pIn2
;

624 
cou¡
--;

627 
blockSize3
--;

634 
q15_t
 *
pIn1
 = 
pSrcA
;

635 
q15_t
 *
pIn2
 = 
pSrcB
 + (
§cBLí
 - 1u);

636 
q63_t
 
sum
;

637 
uöt32_t
 
i
 = 0u, 
j
;

638 
uöt32_t
 
öv
 = 0u;

639 
uöt32_t
 
tŸ
 = 0u;

658 
tŸ
 = ((
§cALí
 + 
§cBLí
) - 2u);

660 if(
§cALí
 > 
§cBLí
)

663 
j
 = 
§cALí
 - 
§cBLí
;

666 
pD°
 +
j
;

669 if(
§cALí
 < 
§cBLí
)

672 
pIn1
 = 
pSrcB
;

675 
pIn2
 = 
pSrcA
 + (
§cALí
 - 1u);

678 
pD°
 =ÖD° + 
tŸ
;

681 
j
 = 
§cALí
;

682 
§cALí
 = 
§cBLí
;

683 
§cBLí
 = 
j
;

686 
öv
 = 1;

691 
i
 = 0u; i <
tŸ
; i++)

694 
sum
 = 0;

697 
j
 = 0u; j <
i
; j++)

700 if((((
i
 - 
j
Ë< 
§cBLí
Ë&& (j < 
§cALí
)))

703 
sum
 +((
q31_t
Ë
pIn1
[
j
] * 
pIn2
[-((
öt32_t
Ë
i
 - j)]);

707 if(
öv
 == 1)

708 *
pD°
-- = (
q15_t
Ë
	`__SSAT
((
sum
 >> 15u), 16u);

710 *
pD°
++ = (
q15_t
Ë
	`__SSAT
((
sum
 >> 15u), 16u);

715 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_q31.c

41 
	~"¨m_m©h.h
"

78 
	$¨m_c‹ªœã_q31
(

79 
q31_t
 * 
pSrcA
,

80 
uöt32_t
 
§cALí
,

81 
q31_t
 * 
pSrcB
,

82 
uöt32_t
 
§cBLí
,

83 
q31_t
 * 
pD°
)

86 #i‚de‡
ARM_MATH_CM0_FAMILY


90 
q31_t
 *
pIn1
;

91 
q31_t
 *
pIn2
;

92 
q31_t
 *
pOut
 = 
pD°
;

93 
q31_t
 *
px
;

94 
q31_t
 *
py
;

95 
q31_t
 *
pSrc1
;

96 
q63_t
 
sum
, 
acc0
, 
acc1
, 
acc2
;

97 
q31_t
 
x0
, 
x1
, 
x2
, 
c0
;

98 
uöt32_t
 
j
, 
k
 = 0u, 
cou¡
, 
blkC¡
, 
outBlockSize
, 
blockSize1
, 
blockSize2
, 
blockSize3
;

99 
öt32_t
 
öc
 = 1;

115 if(
§cALí
 >
§cBLí
)

118 
pIn1
 = (
pSrcA
);

121 
pIn2
 = (
pSrcB
);

124 
outBlockSize
 = (2u * 
§cALí
) - 1u;

130 
j
 = 
outBlockSize
 - (
§cALí
 + (
§cBLí
 - 1u));

133 
pOut
 +
j
;

139 
pIn1
 = (
pSrcB
);

142 
pIn2
 = (
pSrcA
);

145 
j
 = 
§cBLí
;

146 
§cBLí
 = 
§cALí
;

147 
§cALí
 = 
j
;

151 
pOut
 = 
pD°
 + ((
§cALí
 + 
§cBLí
) - 2u);

154 
öc
 = -1;

167 
blockSize1
 = 
§cBLí
 - 1u;

168 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

169 
blockSize3
 = 
blockSize1
;

183 
cou¡
 = 1u;

186 
px
 = 
pIn1
;

189 
pSrc1
 = 
pIn2
 + (
§cBLí
 - 1u);

190 
py
 = 
pSrc1
;

197 
blockSize1
 > 0u)

200 
sum
 = 0;

203 
k
 = 
cou¡
 >> 2;

207 
k
 > 0u)

210 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

212 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

214 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

216 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

219 
k
--;

224 
k
 = 
cou¡
 % 0x4u;

226 
k
 > 0u)

230 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

233 
k
--;

237 *
pOut
 = (
q31_t
Ë(
sum
 >> 31);

239 
pOut
 +
öc
;

242 
py
 = 
pSrc1
 - 
cou¡
;

243 
px
 = 
pIn1
;

246 
cou¡
++;

249 
blockSize1
--;

263 
px
 = 
pIn1
;

266 
py
 = 
pIn2
;

269 
cou¡
 = 0u;

278 if(
§cBLí
 >= 4u)

281 
blkC¡
 = 
blockSize2
 / 3;

283 
blkC¡
 > 0u)

286 
acc0
 = 0;

287 
acc1
 = 0;

288 
acc2
 = 0;

291 
x0
 = *(
px
++);

292 
x1
 = *(
px
++);

295 
k
 = 
§cBLí
 / 3;

302 
c0
 = *(
py
);

305 
x2
 = *(
px
);

309 
acc0
 +((
q63_t
Ë
x0
 * 
c0
);

311 
acc1
 +((
q63_t
Ë
x1
 * 
c0
);

313 
acc2
 +((
q63_t
Ë
x2
 * 
c0
);

316 
c0
 = *(
py
 + 1u);

319 
x0
 = *(
px
 + 1u);

323 
acc0
 +((
q63_t
Ë
x1
 * 
c0
);

325 
acc1
 +((
q63_t
Ë
x2
 * 
c0
);

327 
acc2
 +((
q63_t
Ë
x0
 * 
c0
);

330 
c0
 = *(
py
 + 2u);

333 
x1
 = *(
px
 + 2u);

337 
acc0
 +((
q63_t
Ë
x2
 * 
c0
);

339 
acc1
 +((
q63_t
Ë
x0
 * 
c0
);

341 
acc2
 +((
q63_t
Ë
x1
 * 
c0
);

344 
px
 += 3u;

345 
py
 += 3u;

347 } --
k
);

351 
k
 = 
§cBLí
 - (3 * (srcBLen / 3));

353 
k
 > 0u)

356 
c0
 = *(
py
++);

359 
x2
 = *(
px
++);

363 
acc0
 +((
q63_t
Ë
x0
 * 
c0
);

365 
acc1
 +((
q63_t
Ë
x1
 * 
c0
);

367 
acc2
 +((
q63_t
Ë
x2
 * 
c0
);

370 
x0
 = 
x1
;

371 
x1
 = 
x2
;

374 
k
--;

378 *
pOut
 = (
q31_t
Ë(
acc0
 >> 31);

380 
pOut
 +
öc
;

382 *
pOut
 = (
q31_t
Ë(
acc1
 >> 31);

383 
pOut
 +
öc
;

385 *
pOut
 = (
q31_t
Ë(
acc2
 >> 31);

386 
pOut
 +
öc
;

389 
cou¡
 += 3u;

392 
px
 = 
pIn1
 + 
cou¡
;

393 
py
 = 
pIn2
;

397 
blkC¡
--;

402 
blkC¡
 = 
blockSize2
 - 3 * (blockSize2 / 3);

404 
blkC¡
 > 0u)

407 
sum
 = 0;

410 
k
 = 
§cBLí
 >> 2u;

414 
k
 > 0u)

417 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

418 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

419 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

420 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

423 
k
--;

428 
k
 = 
§cBLí
 % 0x4u;

430 
k
 > 0u)

433 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

436 
k
--;

440 *
pOut
 = (
q31_t
Ë(
sum
 >> 31);

442 
pOut
 +
öc
;

445 
cou¡
++;

448 
px
 = 
pIn1
 + 
cou¡
;

449 
py
 = 
pIn2
;

452 
blkC¡
--;

459 
blkC¡
 = 
blockSize2
;

461 
blkC¡
 > 0u)

464 
sum
 = 0;

467 
k
 = 
§cBLí
;

469 
k
 > 0u)

472 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

475 
k
--;

479 *
pOut
 = (
q31_t
Ë(
sum
 >> 31);

481 
pOut
 +
öc
;

484 
cou¡
++;

487 
px
 = 
pIn1
 + 
cou¡
;

488 
py
 = 
pIn2
;

491 
blkC¡
--;

508 
cou¡
 = 
§cBLí
 - 1u;

511 
pSrc1
 = 
pIn1
 + (
§cALí
 - (
§cBLí
 - 1u));

512 
px
 = 
pSrc1
;

515 
py
 = 
pIn2
;

521 
blockSize3
 > 0u)

524 
sum
 = 0;

527 
k
 = 
cou¡
 >> 2u;

531 
k
 > 0u)

535 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

537 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

539 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

541 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

544 
k
--;

549 
k
 = 
cou¡
 % 0x4u;

551 
k
 > 0u)

554 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

557 
k
--;

561 *
pOut
 = (
q31_t
Ë(
sum
 >> 31);

563 
pOut
 +
öc
;

566 
px
 = ++
pSrc1
;

567 
py
 = 
pIn2
;

570 
cou¡
--;

573 
blockSize3
--;

580 
q31_t
 *
pIn1
 = 
pSrcA
;

581 
q31_t
 *
pIn2
 = 
pSrcB
 + (
§cBLí
 - 1u);

582 
q63_t
 
sum
;

583 
uöt32_t
 
i
 = 0u, 
j
;

584 
uöt32_t
 
öv
 = 0u;

585 
uöt32_t
 
tŸ
 = 0u;

604 
tŸ
 = ((
§cALí
 + 
§cBLí
) - 2u);

606 if(
§cALí
 > 
§cBLí
)

609 
j
 = 
§cALí
 - 
§cBLí
;

612 
pD°
 +
j
;

615 if(
§cALí
 < 
§cBLí
)

618 
pIn1
 = 
pSrcB
;

621 
pIn2
 = 
pSrcA
 + (
§cALí
 - 1u);

624 
pD°
 =ÖD° + 
tŸ
;

627 
j
 = 
§cALí
;

628 
§cALí
 = 
§cBLí
;

629 
§cBLí
 = 
j
;

632 
öv
 = 1;

637 
i
 = 0u; i <
tŸ
; i++)

640 
sum
 = 0;

643 
j
 = 0u; j <
i
; j++)

646 if((((
i
 - 
j
Ë< 
§cBLí
Ë&& (j < 
§cALí
)))

649 
sum
 +((
q63_t
Ë
pIn1
[
j
] * 
pIn2
[-((
öt32_t
Ë
i
 - j)]);

653 if(
öv
 == 1)

654 *
pD°
-- = (
q31_t
Ë(
sum
 >> 31u);

656 *
pD°
++ = (
q31_t
Ë(
sum
 >> 31u);

661 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_q7.c

41 
	~"¨m_m©h.h
"

76 
	$¨m_c‹ªœã_q7
(

77 
q7_t
 * 
pSrcA
,

78 
uöt32_t
 
§cALí
,

79 
q7_t
 * 
pSrcB
,

80 
uöt32_t
 
§cBLí
,

81 
q7_t
 * 
pD°
)

85 #i‚de‡
ARM_MATH_CM0_FAMILY


89 
q7_t
 *
pIn1
;

90 
q7_t
 *
pIn2
;

91 
q7_t
 *
pOut
 = 
pD°
;

92 
q7_t
 *
px
;

93 
q7_t
 *
py
;

94 
q7_t
 *
pSrc1
;

95 
q31_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

96 
q31_t
 
öput1
, 
öput2
;

97 
q15_t
 
ö1
, 
ö2
;

98 
q7_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
, 
c1
;

99 
uöt32_t
 
j
, 
k
 = 0u, 
cou¡
, 
blkC¡
, 
outBlockSize
, 
blockSize1
, 
blockSize2
, 
blockSize3
;

100 
öt32_t
 
öc
 = 1;

116 if(
§cALí
 >
§cBLí
)

119 
pIn1
 = (
pSrcA
);

122 
pIn2
 = (
pSrcB
);

125 
outBlockSize
 = (2u * 
§cALí
) - 1u;

131 
j
 = 
outBlockSize
 - (
§cALí
 + (
§cBLí
 - 1u));

134 
pOut
 +
j
;

140 
pIn1
 = (
pSrcB
);

143 
pIn2
 = (
pSrcA
);

146 
j
 = 
§cBLí
;

147 
§cBLí
 = 
§cALí
;

148 
§cALí
 = 
j
;

152 
pOut
 = 
pD°
 + ((
§cALí
 + 
§cBLí
) - 2u);

155 
öc
 = -1;

168 
blockSize1
 = 
§cBLí
 - 1u;

169 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

170 
blockSize3
 = 
blockSize1
;

184 
cou¡
 = 1u;

187 
px
 = 
pIn1
;

190 
pSrc1
 = 
pIn2
 + (
§cBLí
 - 1u);

191 
py
 = 
pSrc1
;

198 
blockSize1
 > 0u)

201 
sum
 = 0;

204 
k
 = 
cou¡
 >> 2;

208 
k
 > 0u)

211 
ö1
 = (
q15_t
Ë* 
px
++;

212 
ö2
 = (
q15_t
Ë* 
px
++;

213 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

216 
ö1
 = (
q15_t
Ë* 
py
++;

217 
ö2
 = (
q15_t
Ë* 
py
++;

218 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

222 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

225 
ö1
 = (
q15_t
Ë* 
px
++;

226 
ö2
 = (
q15_t
Ë* 
px
++;

227 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

230 
ö1
 = (
q15_t
Ë* 
py
++;

231 
ö2
 = (
q15_t
Ë* 
py
++;

232 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

236 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

240 
k
--;

245 
k
 = 
cou¡
 % 0x4u;

247 
k
 > 0u)

251 
sum
 +(
q31_t
Ë((
q15_t
Ë* 
px
++ * *
py
++);

254 
k
--;

258 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
sum
 >> 7, 8));

260 
pOut
 +
öc
;

263 
py
 = 
pSrc1
 - 
cou¡
;

264 
px
 = 
pIn1
;

267 
cou¡
++;

270 
blockSize1
--;

284 
px
 = 
pIn1
;

287 
py
 = 
pIn2
;

290 
cou¡
 = 0u;

299 if(
§cBLí
 >= 4u)

302 
blkC¡
 = 
blockSize2
 >> 2u;

304 
blkC¡
 > 0u)

307 
acc0
 = 0;

308 
acc1
 = 0;

309 
acc2
 = 0;

310 
acc3
 = 0;

313 
x0
 = *
px
++;

314 
x1
 = *
px
++;

315 
x2
 = *
px
++;

318 
k
 = 
§cBLí
 >> 2u;

325 
c0
 = *
py
++;

327 
c1
 = *
py
++;

330 
x3
 = *
px
++;

333 
ö1
 = (
q15_t
Ë
x0
;

334 
ö2
 = (
q15_t
Ë
x1
;

336 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

339 
ö1
 = (
q15_t
Ë
c0
;

340 
ö2
 = (
q15_t
Ë
c1
;

342 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

345 
acc0
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc0);

348 
ö1
 = (
q15_t
Ë
x1
;

349 
ö2
 = (
q15_t
Ë
x2
;

351 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

354 
acc1
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc1);

357 
ö1
 = (
q15_t
Ë
x2
;

358 
ö2
 = (
q15_t
Ë
x3
;

360 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

363 
acc2
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc2);

366 
x0
 = *(
px
++);

369 
ö1
 = (
q15_t
Ë
x3
;

370 
ö2
 = (
q15_t
Ë
x0
;

372 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

375 
acc3
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc3);

378 
c0
 = *
py
++;

380 
c1
 = *
py
++;

383 
x1
 = *
px
++;

386 
ö1
 = (
q15_t
Ë
x2
;

387 
ö2
 = (
q15_t
Ë
x3
;

389 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

392 
ö1
 = (
q15_t
Ë
c0
;

393 
ö2
 = (
q15_t
Ë
c1
;

395 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

398 
acc0
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc0);

401 
ö1
 = (
q15_t
Ë
x3
;

402 
ö2
 = (
q15_t
Ë
x0
;

404 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

407 
acc1
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc1);

410 
ö1
 = (
q15_t
Ë
x0
;

411 
ö2
 = (
q15_t
Ë
x1
;

413 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

416 
acc2
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc2);

419 
x2
 = *
px
++;

422 
ö1
 = (
q15_t
Ë
x1
;

423 
ö2
 = (
q15_t
Ë
x2
;

425 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

428 
acc3
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc3);

430 } --
k
);

434 
k
 = 
§cBLí
 % 0x4u;

436 
k
 > 0u)

439 
c0
 = *
py
++;

442 
x3
 = *
px
++;

446 
acc0
 +((
q15_t
Ë
x0
 * 
c0
);

448 
acc1
 +((
q15_t
Ë
x1
 * 
c0
);

450 
acc2
 +((
q15_t
Ë
x2
 * 
c0
);

452 
acc3
 +((
q15_t
Ë
x3
 * 
c0
);

455 
x0
 = 
x1
;

456 
x1
 = 
x2
;

457 
x2
 = 
x3
;

460 
k
--;

464 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
acc0
 >> 7, 8));

466 
pOut
 +
öc
;

468 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
acc1
 >> 7, 8));

469 
pOut
 +
öc
;

471 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
acc2
 >> 7, 8));

472 
pOut
 +
öc
;

474 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
acc3
 >> 7, 8));

475 
pOut
 +
öc
;

477 
cou¡
 += 4u;

479 
px
 = 
pIn1
 + 
cou¡
;

480 
py
 = 
pIn2
;

483 
blkC¡
--;

488 
blkC¡
 = 
blockSize2
 % 0x4u;

490 
blkC¡
 > 0u)

493 
sum
 = 0;

496 
k
 = 
§cBLí
 >> 2u;

500 
k
 > 0u)

503 
ö1
 = (
q15_t
Ë* 
px
++;

504 
ö2
 = (
q15_t
Ë* 
px
++;

505 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

508 
ö1
 = (
q15_t
Ë* 
py
++;

509 
ö2
 = (
q15_t
Ë* 
py
++;

510 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

513 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

516 
ö1
 = (
q15_t
Ë* 
px
++;

517 
ö2
 = (
q15_t
Ë* 
px
++;

518 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

521 
ö1
 = (
q15_t
Ë* 
py
++;

522 
ö2
 = (
q15_t
Ë* 
py
++;

523 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

526 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

529 
k
--;

534 
k
 = 
§cBLí
 % 0x4u;

536 
k
 > 0u)

539 
sum
 +((
q15_t
Ë* 
px
++ * *
py
++);

542 
k
--;

546 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
sum
 >> 7, 8));

548 
pOut
 +
öc
;

551 
cou¡
++;

554 
px
 = 
pIn1
 + 
cou¡
;

555 
py
 = 
pIn2
;

558 
blkC¡
--;

565 
blkC¡
 = 
blockSize2
;

567 
blkC¡
 > 0u)

570 
sum
 = 0;

573 
k
 = 
§cBLí
;

575 
k
 > 0u)

578 
sum
 +((
q15_t
Ë* 
px
++ * *
py
++);

581 
k
--;

585 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
sum
 >> 7, 8));

587 
pOut
 +
öc
;

590 
cou¡
++;

593 
px
 = 
pIn1
 + 
cou¡
;

594 
py
 = 
pIn2
;

598 
blkC¡
--;

615 
cou¡
 = 
§cBLí
 - 1u;

618 
pSrc1
 = 
pIn1
 + (
§cALí
 - (
§cBLí
 - 1u));

619 
px
 = 
pSrc1
;

622 
py
 = 
pIn2
;

628 
blockSize3
 > 0u)

631 
sum
 = 0;

634 
k
 = 
cou¡
 >> 2u;

638 
k
 > 0u)

641 
ö1
 = (
q15_t
Ë* 
px
++;

642 
ö2
 = (
q15_t
Ë* 
px
++;

643 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

646 
ö1
 = (
q15_t
Ë* 
py
++;

647 
ö2
 = (
q15_t
Ë* 
py
++;

648 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

652 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

655 
ö1
 = (
q15_t
Ë* 
px
++;

656 
ö2
 = (
q15_t
Ë* 
px
++;

657 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

660 
ö1
 = (
q15_t
Ë* 
py
++;

661 
ö2
 = (
q15_t
Ë* 
py
++;

662 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

666 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

669 
k
--;

674 
k
 = 
cou¡
 % 0x4u;

676 
k
 > 0u)

679 
sum
 +((
q15_t
Ë* 
px
++ * *
py
++);

682 
k
--;

686 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
sum
 >> 7, 8));

688 
pOut
 +
öc
;

691 
px
 = ++
pSrc1
;

692 
py
 = 
pIn2
;

695 
cou¡
--;

698 
blockSize3
--;

705 
q7_t
 *
pIn1
 = 
pSrcA
;

706 
q7_t
 *
pIn2
 = 
pSrcB
 + (
§cBLí
 - 1u);

707 
q31_t
 
sum
;

708 
uöt32_t
 
i
 = 0u, 
j
;

709 
uöt32_t
 
öv
 = 0u;

710 
uöt32_t
 
tŸ
 = 0u;

729 
tŸ
 = ((
§cALí
 + 
§cBLí
) - 2u);

731 if(
§cALí
 > 
§cBLí
)

734 
j
 = 
§cALí
 - 
§cBLí
;

737 
pD°
 +
j
;

740 if(
§cALí
 < 
§cBLí
)

743 
pIn1
 = 
pSrcB
;

746 
pIn2
 = 
pSrcA
 + (
§cALí
 - 1u);

749 
pD°
 =ÖD° + 
tŸ
;

752 
j
 = 
§cALí
;

753 
§cALí
 = 
§cBLí
;

754 
§cBLí
 = 
j
;

757 
öv
 = 1;

762 
i
 = 0u; i <
tŸ
; i++)

765 
sum
 = 0;

768 
j
 = 0u; j <
i
; j++)

771 if((((
i
 - 
j
Ë< 
§cBLí
Ë&& (j < 
§cALí
)))

774 
sum
 +((
q15_t
Ë
pIn1
[
j
] * 
pIn2
[-((
öt32_t
Ë
i
 - j)]);

778 if(
öv
 == 1)

779 *
pD°
-- = (
q7_t
Ë
	`__SSAT
((
sum
 >> 7u), 8u);

781 *
pD°
++ = (
q7_t
Ë
	`__SSAT
((
sum
 >> 7u), 8u);

786 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_f32.c

41 
	~"¨m_m©h.h
"

141 
	$¨m_fú_decim©e_f32
(

142 c⁄° 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

143 
Êﬂt32_t
 * 
pSrc
,

144 
Êﬂt32_t
 * 
pD°
,

145 
uöt32_t
 
blockSize
)

147 
Êﬂt32_t
 *
pSèã
 = 
S
->pState;

148 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

149 
Êﬂt32_t
 *
pSèãCu∫t
;

150 
Êﬂt32_t
 *
px
, *
pb
;

151 
Êﬂt32_t
 
sum0
;

152 
Êﬂt32_t
 
x0
, 
c0
;

153 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

154 
uöt32_t
 
i
, 
èpC¡
, 
blkC¡
, 
outBlockSize
 = 
blockSize
 / 
S
->
M
;

156 #i‚de‡
ARM_MATH_CM0_FAMILY


158 
uöt32_t
 
blkC¡N4
;

159 
Êﬂt32_t
 *
px0
, *
px1
, *
px2
, *
px3
;

160 
Êﬂt32_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

161 
Êﬂt32_t
 
x1
, 
x2
, 
x3
;

167 
pSèãCu∫t
 = 
S
->
pSèã
 + (
numT≠s
 - 1u);

170 
blkC¡
 = 
outBlockSize
 / 4;

171 
blkC¡N4
 = 
outBlockSize
 - (4 * 
blkC¡
);

173 
blkC¡
 > 0u)

176 
i
 = 4 * 
S
->
M
;

180 *
pSèãCu∫t
++ = *
pSrc
++;

182 } --
i
);

185 
acc0
 = 0.0f;

186 
acc1
 = 0.0f;

187 
acc2
 = 0.0f;

188 
acc3
 = 0.0f;

191 
px0
 = 
pSèã
;

192 
px1
 = 
pSèã
 + 
S
->
M
;

193 
px2
 = 
pSèã
 + 2 * 
S
->
M
;

194 
px3
 = 
pSèã
 + 3 * 
S
->
M
;

197 
pb
 = 
pC€ffs
;

200 
èpC¡
 = 
numT≠s
 >> 2;

205 
èpC¡
 > 0u)

208 
c0
 = *(
pb
++);

211 
x0
 = *(
px0
++);

213 
x1
 = *(
px1
++);

215 
x2
 = *(
px2
++);

217 
x3
 = *(
px3
++);

220 
acc0
 +
x0
 * 
c0
;

221 
acc1
 +
x1
 * 
c0
;

222 
acc2
 +
x2
 * 
c0
;

223 
acc3
 +
x3
 * 
c0
;

226 
c0
 = *(
pb
++);

229 
x0
 = *(
px0
++);

230 
x1
 = *(
px1
++);

231 
x2
 = *(
px2
++);

232 
x3
 = *(
px3
++);

235 
acc0
 +
x0
 * 
c0
;

236 
acc1
 +
x1
 * 
c0
;

237 
acc2
 +
x2
 * 
c0
;

238 
acc3
 +
x3
 * 
c0
;

241 
c0
 = *(
pb
++);

244 
x0
 = *(
px0
++);

245 
x1
 = *(
px1
++);

246 
x2
 = *(
px2
++);

247 
x3
 = *(
px3
++);

250 
acc0
 +
x0
 * 
c0
;

251 
acc1
 +
x1
 * 
c0
;

252 
acc2
 +
x2
 * 
c0
;

253 
acc3
 +
x3
 * 
c0
;

256 
c0
 = *(
pb
++);

259 
x0
 = *(
px0
++);

260 
x1
 = *(
px1
++);

261 
x2
 = *(
px2
++);

262 
x3
 = *(
px3
++);

265 
acc0
 +
x0
 * 
c0
;

266 
acc1
 +
x1
 * 
c0
;

267 
acc2
 +
x2
 * 
c0
;

268 
acc3
 +
x3
 * 
c0
;

271 
èpC¡
--;

275 
èpC¡
 = 
numT≠s
 % 0x4u;

277 
èpC¡
 > 0u)

280 
c0
 = *(
pb
++);

283 
x0
 = *(
px0
++);

284 
x1
 = *(
px1
++);

285 
x2
 = *(
px2
++);

286 
x3
 = *(
px3
++);

289 
acc0
 +
x0
 * 
c0
;

290 
acc1
 +
x1
 * 
c0
;

291 
acc2
 +
x2
 * 
c0
;

292 
acc3
 +
x3
 * 
c0
;

295 
èpC¡
--;

300 
pSèã
 =ÖSèã + 4 * 
S
->
M
;

303 *
pD°
++ = 
acc0
;

304 *
pD°
++ = 
acc1
;

305 *
pD°
++ = 
acc2
;

306 *
pD°
++ = 
acc3
;

309 
blkC¡
--;

312 
blkC¡N4
 > 0u)

315 
i
 = 
S
->
M
;

319 *
pSèãCu∫t
++ = *
pSrc
++;

321 } --
i
);

324 
sum0
 = 0.0f;

327 
px
 = 
pSèã
;

330 
pb
 = 
pC€ffs
;

333 
èpC¡
 = 
numT≠s
 >> 2;

337 
èpC¡
 > 0u)

340 
c0
 = *(
pb
++);

343 
x0
 = *(
px
++);

346 
sum0
 +
x0
 * 
c0
;

349 
c0
 = *(
pb
++);

352 
x0
 = *(
px
++);

355 
sum0
 +
x0
 * 
c0
;

358 
c0
 = *(
pb
++);

361 
x0
 = *(
px
++);

364 
sum0
 +
x0
 * 
c0
;

367 
c0
 = *(
pb
++);

370 
x0
 = *(
px
++);

373 
sum0
 +
x0
 * 
c0
;

376 
èpC¡
--;

380 
èpC¡
 = 
numT≠s
 % 0x4u;

382 
èpC¡
 > 0u)

385 
c0
 = *(
pb
++);

388 
x0
 = *(
px
++);

391 
sum0
 +
x0
 * 
c0
;

394 
èpC¡
--;

399 
pSèã
 =ÖSèã + 
S
->
M
;

402 *
pD°
++ = 
sum0
;

405 
blkC¡N4
--;

413 
pSèãCu∫t
 = 
S
->
pSèã
;

415 
i
 = (
numT≠s
 - 1u) >> 2;

418 
i
 > 0u)

420 *
pSèãCu∫t
++ = *
pSèã
++;

421 *
pSèãCu∫t
++ = *
pSèã
++;

422 *
pSèãCu∫t
++ = *
pSèã
++;

423 *
pSèãCu∫t
++ = *
pSèã
++;

426 
i
--;

429 
i
 = (
numT≠s
 - 1u) % 0x04u;

432 
i
 > 0u)

434 *
pSèãCu∫t
++ = *
pSèã
++;

437 
i
--;

446 
pSèãCu∫t
 = 
S
->
pSèã
 + (
numT≠s
 - 1u);

449 
blkC¡
 = 
outBlockSize
;

451 
blkC¡
 > 0u)

454 
i
 = 
S
->
M
;

458 *
pSèãCu∫t
++ = *
pSrc
++;

460 } --
i
);

463 
sum0
 = 0.0f;

466 
px
 = 
pSèã
;

469 
pb
 = 
pC€ffs
;

471 
èpC¡
 = 
numT≠s
;

473 
èpC¡
 > 0u)

476 
c0
 = *
pb
++;

479 
x0
 = *
px
++;

482 
sum0
 +
x0
 * 
c0
;

485 
èpC¡
--;

490 
pSèã
 =ÖSèã + 
S
->
M
;

493 *
pD°
++ = 
sum0
;

496 
blkC¡
--;

504 
pSèãCu∫t
 = 
S
->
pSèã
;

507 
i
 = (
numT≠s
 - 1u);

510 
i
 > 0u)

512 *
pSèãCu∫t
++ = *
pSèã
++;

515 
i
--;

520 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_fast_q15.c

41 
	~"¨m_m©h.h
"

78 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


80 
	$¨m_fú_decim©e_Á°_q15
(

81 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

82 
q15_t
 * 
pSrc
,

83 
q15_t
 * 
pD°
,

84 
uöt32_t
 
blockSize
)

86 
q15_t
 *
pSèã
 = 
S
->pState;

87 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

88 
q15_t
 *
pSèãCu∫t
;

89 
q15_t
 *
px
;

90 
q15_t
 *
pb
;

91 
q31_t
 
x0
, 
x1
, 
c0
, 
c1
;

92 
q31_t
 
sum0
;

93 
q31_t
 
acc0
, 
acc1
;

94 
q15_t
 *
px0
, *
px1
;

95 
uöt32_t
 
blkC¡N3
;

96 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

97 
uöt32_t
 
i
, 
blkC¡
, 
èpC¡
, 
outBlockSize
 = 
blockSize
 / 
S
->
M
;

102 
pSèãCu∫t
 = 
S
->
pSèã
 + (
numT≠s
 - 1u);

106 
blkC¡
 = 
outBlockSize
 / 2;

107 
blkC¡N3
 = 
outBlockSize
 - (2 * 
blkC¡
);

110 
blkC¡
 > 0u)

113 
i
 = 2 * 
S
->
M
;

117 *
pSèãCu∫t
++ = *
pSrc
++;

119 } --
i
);

122 
acc0
 = 0;

123 
acc1
 = 0;

126 
px0
 = 
pSèã
;

128 
px1
 = 
pSèã
 + 
S
->
M
;

132 
pb
 = 
pC€ffs
;

135 
èpC¡
 = 
numT≠s
 >> 2;

139 
èpC¡
 > 0u)

142 
c0
 = *
	`__SIMD32
(
pb
)++;

145 
x0
 = *
	`__SIMD32
(
px0
)++;

147 
x1
 = *
	`__SIMD32
(
px1
)++;

150 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

152 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

155 
c0
 = *
	`__SIMD32
(
pb
)++;

158 
x0
 = *
	`__SIMD32
(
px0
)++;

160 
x1
 = *
	`__SIMD32
(
px1
)++;

163 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

165 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

168 
èpC¡
--;

172 
èpC¡
 = 
numT≠s
 % 0x4u;

174 
èpC¡
 > 0u)

177 
c0
 = *
pb
++;

180 
x0
 = *
px0
++;

182 
x1
 = *
px1
++;

185 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

186 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

189 
èpC¡
--;

194 
pSèã
 =ÖSèã + 
S
->
M
 * 2;

198 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

199 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
acc1
 >> 15), 16));

202 
blkC¡
--;

207 
blkC¡N3
 > 0u)

210 
i
 = 
S
->
M
;

214 *
pSèãCu∫t
++ = *
pSrc
++;

216 } --
i
);

219 
sum0
 = 0;

222 
px
 = 
pSèã
;

225 
pb
 = 
pC€ffs
;

228 
èpC¡
 = 
numT≠s
 >> 2;

232 
èpC¡
 > 0u)

235 
c0
 = *
	`__SIMD32
(
pb
)++;

238 
x0
 = *
	`__SIMD32
(
px
)++;

241 
c1
 = *
	`__SIMD32
(
pb
)++;

244 
sum0
 = 
	`__SMLAD
(
x0
, 
c0
, sum0);

247 
x0
 = *
	`__SIMD32
(
px
)++;

250 
sum0
 = 
	`__SMLAD
(
x0
, 
c1
, sum0);

253 
èpC¡
--;

257 
èpC¡
 = 
numT≠s
 % 0x4u;

259 
èpC¡
 > 0u)

262 
c0
 = *
pb
++;

265 
x0
 = *
px
++;

268 
sum0
 = 
	`__SMLAD
(
x0
, 
c0
, sum0);

271 
èpC¡
--;

276 
pSèã
 =ÖSèã + 
S
->
M
;

280 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
sum0
 >> 15), 16));

283 
blkC¡N3
--;

291 
pSèãCu∫t
 = 
S
->
pSèã
;

293 
i
 = (
numT≠s
 - 1u) >> 2u;

296 
i
 > 0u)

298 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

299 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

302 
i
--;

305 
i
 = (
numT≠s
 - 1u) % 0x04u;

308 
i
 > 0u)

310 *
pSèãCu∫t
++ = *
pSèã
++;

313 
i
--;

315 
	}
}

320 
	$¨m_fú_decim©e_Á°_q15
(

321 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

322 
q15_t
 * 
pSrc
,

323 
q15_t
 * 
pD°
,

324 
uöt32_t
 
blockSize
)

326 
q15_t
 *
pSèã
 = 
S
->pState;

327 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

328 
q15_t
 *
pSèãCu∫t
;

329 
q15_t
 *
px
;

330 
q15_t
 *
pb
;

331 
q15_t
 
x0
, 
x1
, 
c0
;

332 
q31_t
 
sum0
;

333 
q31_t
 
acc0
, 
acc1
;

334 
q15_t
 *
px0
, *
px1
;

335 
uöt32_t
 
blkC¡N3
;

336 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

337 
uöt32_t
 
i
, 
blkC¡
, 
èpC¡
, 
outBlockSize
 = 
blockSize
 / 
S
->
M
;

342 
pSèãCu∫t
 = 
S
->
pSèã
 + (
numT≠s
 - 1u);

346 
blkC¡
 = 
outBlockSize
 / 2;

347 
blkC¡N3
 = 
outBlockSize
 - (2 * 
blkC¡
);

349 
blkC¡
 > 0u)

352 
i
 = 2 * 
S
->
M
;

356 *
pSèãCu∫t
++ = *
pSrc
++;

358 } --
i
);

361 
acc0
 = 0;

362 
acc1
 = 0;

365 
px0
 = 
pSèã
;

367 
px1
 = 
pSèã
 + 
S
->
M
;

371 
pb
 = 
pC€ffs
;

374 
èpC¡
 = 
numT≠s
 >> 2;

378 
èpC¡
 > 0u)

381 
c0
 = *
pb
++;

384 
x0
 = *
px0
++;

385 
x1
 = *
px1
++;

388 
acc0
 +
x0
 * 
c0
;

389 
acc1
 +
x1
 * 
c0
;

392 
c0
 = *
pb
++;

395 
x0
 = *
px0
++;

396 
x1
 = *
px1
++;

399 
acc0
 +
x0
 * 
c0
;

400 
acc1
 +
x1
 * 
c0
;

403 
c0
 = *
pb
++;

406 
x0
 = *
px0
++;

407 
x1
 = *
px1
++;

410 
acc0
 +
x0
 * 
c0
;

411 
acc1
 +
x1
 * 
c0
;

414 
c0
 = *
pb
++;

417 
x0
 = *
px0
++;

418 
x1
 = *
px1
++;

421 
acc0
 +
x0
 * 
c0
;

422 
acc1
 +
x1
 * 
c0
;

425 
èpC¡
--;

429 
èpC¡
 = 
numT≠s
 % 0x4u;

431 
èpC¡
 > 0u)

434 
c0
 = *
pb
++;

437 
x0
 = *
px0
++;

438 
x1
 = *
px1
++;

441 
acc0
 +
x0
 * 
c0
;

442 
acc1
 +
x1
 * 
c0
;

445 
èpC¡
--;

450 
pSèã
 =ÖSèã + 
S
->
M
 * 2;

455 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

456 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
acc1
 >> 15), 16));

460 
blkC¡
--;

463 
blkC¡N3
 > 0u)

466 
i
 = 
S
->
M
;

470 *
pSèãCu∫t
++ = *
pSrc
++;

472 } --
i
);

475 
sum0
 = 0;

478 
px
 = 
pSèã
;

481 
pb
 = 
pC€ffs
;

484 
èpC¡
 = 
numT≠s
 >> 2;

488 
èpC¡
 > 0u)

491 
c0
 = *
pb
++;

494 
x0
 = *
px
++;

497 
sum0
 +
x0
 * 
c0
;

500 
c0
 = *
pb
++;

503 
x0
 = *
px
++;

506 
sum0
 +
x0
 * 
c0
;

509 
c0
 = *
pb
++;

512 
x0
 = *
px
++;

515 
sum0
 +
x0
 * 
c0
;

518 
c0
 = *
pb
++;

521 
x0
 = *
px
++;

524 
sum0
 +
x0
 * 
c0
;

527 
èpC¡
--;

531 
èpC¡
 = 
numT≠s
 % 0x4u;

533 
èpC¡
 > 0u)

536 
c0
 = *
pb
++;

539 
x0
 = *
px
++;

542 
sum0
 +
x0
 * 
c0
;

545 
èpC¡
--;

550 
pSèã
 =ÖSèã + 
S
->
M
;

554 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
sum0
 >> 15), 16));

557 
blkC¡N3
--;

565 
pSèãCu∫t
 = 
S
->
pSèã
;

567 
i
 = (
numT≠s
 - 1u) >> 2u;

570 
i
 > 0u)

572 *
pSèãCu∫t
++ = *
pSèã
++;

573 *
pSèãCu∫t
++ = *
pSèã
++;

574 *
pSèãCu∫t
++ = *
pSèã
++;

575 *
pSèãCu∫t
++ = *
pSèã
++;

578 
i
--;

581 
i
 = (
numT≠s
 - 1u) % 0x04u;

584 
i
 > 0u)

586 *
pSèãCu∫t
++ = *
pSèã
++;

589 
i
--;

591 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_fast_q31.c

41 
	~"¨m_m©h.h
"

76 
	$¨m_fú_decim©e_Á°_q31
(

77 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

78 
q31_t
 * 
pSrc
,

79 
q31_t
 * 
pD°
,

80 
uöt32_t
 
blockSize
)

82 
q31_t
 *
pSèã
 = 
S
->pState;

83 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

84 
q31_t
 *
pSèãCu∫t
;

85 
q31_t
 
x0
, 
c0
;

86 
q31_t
 *
px
;

87 
q31_t
 *
pb
;

88 
q31_t
 
sum0
;

89 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

90 
uöt32_t
 
i
, 
èpC¡
, 
blkC¡
, 
outBlockSize
 = 
blockSize
 / 
S
->
M
;

91 
uöt32_t
 
blkC¡N2
;

92 
q31_t
 
x1
;

93 
q31_t
 
acc0
, 
acc1
;

94 
q31_t
 *
px0
, *
px1
;

98 
pSèãCu∫t
 = 
S
->
pSèã
 + (
numT≠s
 - 1u);

102 
blkC¡
 = 
outBlockSize
 / 2;

103 
blkC¡N2
 = 
outBlockSize
 - (2 * 
blkC¡
);

105 
blkC¡
 > 0u)

108 
i
 = 2 * 
S
->
M
;

112 *
pSèãCu∫t
++ = *
pSrc
++;

114 } --
i
);

117 
acc0
 = 0;

118 
acc1
 = 0;

121 
px0
 = 
pSèã
;

122 
px1
 = 
pSèã
 + 
S
->
M
;

125 
pb
 = 
pC€ffs
;

128 
èpC¡
 = 
numT≠s
 >> 2;

132 
èpC¡
 > 0u)

135 
c0
 = *(
pb
);

138 
x0
 = *(
px0
);

139 
x1
 = *(
px1
);

142 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

143 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

146 
c0
 = *(
pb
 + 1u);

149 
x0
 = *(
px0
 + 1u);

150 
x1
 = *(
px1
 + 1u);

153 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

154 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

157 
c0
 = *(
pb
 + 2u);

160 
x0
 = *(
px0
 + 2u);

161 
x1
 = *(
px1
 + 2u);

162 
pb
 += 4u;

165 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

166 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

169 
c0
 = *(
pb
 - 1u);

172 
x0
 = *(
px0
 + 3u);

173 
x1
 = *(
px1
 + 3u);

177 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

178 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

181 
px0
 += 4u;

182 
px1
 += 4u;

185 
èpC¡
--;

189 
èpC¡
 = 
numT≠s
 % 0x4u;

191 
èpC¡
 > 0u)

194 
c0
 = *(
pb
++);

197 
x0
 = *(
px0
++);

198 
x1
 = *(
px1
++);

201 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

202 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

205 
èpC¡
--;

210 
pSèã
 =ÖSèã + 
S
->
M
 * 2;

213 *
pD°
++ = (
q31_t
Ë(
acc0
 << 1);

214 *
pD°
++ = (
q31_t
Ë(
acc1
 << 1);

217 
blkC¡
--;

220 
blkC¡N2
 > 0u)

223 
i
 = 
S
->
M
;

227 *
pSèãCu∫t
++ = *
pSrc
++;

229 } --
i
);

232 
sum0
 = 0;

235 
px
 = 
pSèã
;

238 
pb
 = 
pC€ffs
;

241 
èpC¡
 = 
numT≠s
 >> 2;

245 
èpC¡
 > 0u)

248 
c0
 = *(
pb
++);

251 
x0
 = *(
px
++);

254 
sum0
 = (
q31_t
Ë((((
q63_t
Ësum0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

257 
c0
 = *(
pb
++);

260 
x0
 = *(
px
++);

263 
sum0
 = (
q31_t
Ë((((
q63_t
Ësum0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

266 
c0
 = *(
pb
++);

269 
x0
 = *(
px
++);

272 
sum0
 = (
q31_t
Ë((((
q63_t
Ësum0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

275 
c0
 = *(
pb
++);

278 
x0
 = *(
px
++);

281 
sum0
 = (
q31_t
Ë((((
q63_t
Ësum0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

284 
èpC¡
--;

288 
èpC¡
 = 
numT≠s
 % 0x4u;

290 
èpC¡
 > 0u)

293 
c0
 = *(
pb
++);

296 
x0
 = *(
px
++);

299 
sum0
 = (
q31_t
Ë((((
q63_t
Ësum0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

302 
èpC¡
--;

307 
pSèã
 =ÖSèã + 
S
->
M
;

310 *
pD°
++ = (
q31_t
Ë(
sum0
 << 1);

313 
blkC¡N2
--;

321 
pSèãCu∫t
 = 
S
->
pSèã
;

323 
i
 = (
numT≠s
 - 1u) >> 2u;

326 
i
 > 0u)

328 *
pSèãCu∫t
++ = *
pSèã
++;

329 *
pSèãCu∫t
++ = *
pSèã
++;

330 *
pSèãCu∫t
++ = *
pSèã
++;

331 *
pSèãCu∫t
++ = *
pSèã
++;

334 
i
--;

337 
i
 = (
numT≠s
 - 1u) % 0x04u;

340 
i
 > 0u)

342 *
pSèãCu∫t
++ = *
pSèã
++;

345 
i
--;

347 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_init_f32.c

41 
	~"¨m_m©h.h
"

75 
¨m_°©us
 
	$¨m_fú_decim©e_öô_f32
(

76 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

77 
uöt16_t
 
numT≠s
,

78 
uöt8_t
 
M
,

79 
Êﬂt32_t
 * 
pC€ffs
,

80 
Êﬂt32_t
 * 
pSèã
,

81 
uöt32_t
 
blockSize
)

83 
¨m_°©us
 
°©us
;

86 if((
blockSize
 % 
M
) != 0u)

89 
°©us
 = 
ARM_MATH_LENGTH_ERROR
;

94 
S
->
numT≠s
 =ÇumTaps;

97 
S
->
pC€ffs
 =ÖCoeffs;

100 
	`mem£t
(
pSèã
, 0, (
numT≠s
 + (
blockSize
 - 1u)Ë* (
Êﬂt32_t
));

103 
S
->
pSèã
 =ÖState;

106 
S
->
M
 = M;

108 
°©us
 = 
ARM_MATH_SUCCESS
;

111  (
°©us
);

113 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_init_q15.c

41 
	~"¨m_m©h.h
"

76 
¨m_°©us
 
	$¨m_fú_decim©e_öô_q15
(

77 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

78 
uöt16_t
 
numT≠s
,

79 
uöt8_t
 
M
,

80 
q15_t
 * 
pC€ffs
,

81 
q15_t
 * 
pSèã
,

82 
uöt32_t
 
blockSize
)

85 
¨m_°©us
 
°©us
;

88 if((
blockSize
 % 
M
) != 0u)

91 
°©us
 = 
ARM_MATH_LENGTH_ERROR
;

96 
S
->
numT≠s
 =ÇumTaps;

99 
S
->
pC€ffs
 =ÖCoeffs;

102 
	`mem£t
(
pSèã
, 0, (
numT≠s
 + (
blockSize
 - 1u)Ë* (
q15_t
));

105 
S
->
pSèã
 =ÖState;

108 
S
->
M
 = M;

110 
°©us
 = 
ARM_MATH_SUCCESS
;

113  (
°©us
);

115 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_init_q31.c

41 
	~"¨m_m©h.h
"

75 
¨m_°©us
 
	$¨m_fú_decim©e_öô_q31
(

76 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

77 
uöt16_t
 
numT≠s
,

78 
uöt8_t
 
M
,

79 
q31_t
 * 
pC€ffs
,

80 
q31_t
 * 
pSèã
,

81 
uöt32_t
 
blockSize
)

83 
¨m_°©us
 
°©us
;

86 if((
blockSize
 % 
M
) != 0u)

89 
°©us
 = 
ARM_MATH_LENGTH_ERROR
;

94 
S
->
numT≠s
 =ÇumTaps;

97 
S
->
pC€ffs
 =ÖCoeffs;

100 
	`mem£t
(
pSèã
, 0, (
numT≠s
 + (
blockSize
 - 1)Ë* (
q31_t
));

103 
S
->
pSèã
 =ÖState;

106 
S
->
M
 = M;

108 
°©us
 = 
ARM_MATH_SUCCESS
;

111  (
°©us
);

113 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_q15.c

41 
	~"¨m_m©h.h
"

73 #i‚de‡
ARM_MATH_CM0_FAMILY


75 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


77 
	$¨m_fú_decim©e_q15
(

78 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

79 
q15_t
 * 
pSrc
,

80 
q15_t
 * 
pD°
,

81 
uöt32_t
 
blockSize
)

83 
q15_t
 *
pSèã
 = 
S
->pState;

84 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

85 
q15_t
 *
pSèãCu∫t
;

86 
q15_t
 *
px
;

87 
q15_t
 *
pb
;

88 
q31_t
 
x0
, 
x1
, 
c0
, 
c1
;

89 
q63_t
 
sum0
;

90 
q63_t
 
acc0
, 
acc1
;

91 
q15_t
 *
px0
, *
px1
;

92 
uöt32_t
 
blkC¡N3
;

93 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

94 
uöt32_t
 
i
, 
blkC¡
, 
èpC¡
, 
outBlockSize
 = 
blockSize
 / 
S
->
M
;

99 
pSèãCu∫t
 = 
S
->
pSèã
 + (
numT≠s
 - 1u);

103 
blkC¡
 = 
outBlockSize
 / 2;

104 
blkC¡N3
 = 
outBlockSize
 - (2 * 
blkC¡
);

107 
blkC¡
 > 0u)

110 
i
 = 2 * 
S
->
M
;

114 *
pSèãCu∫t
++ = *
pSrc
++;

116 } --
i
);

119 
acc0
 = 0;

120 
acc1
 = 0;

123 
px0
 = 
pSèã
;

125 
px1
 = 
pSèã
 + 
S
->
M
;

129 
pb
 = 
pC€ffs
;

132 
èpC¡
 = 
numT≠s
 >> 2;

136 
èpC¡
 > 0u)

139 
c0
 = *
	`__SIMD32
(
pb
)++;

142 
x0
 = *
	`__SIMD32
(
px0
)++;

144 
x1
 = *
	`__SIMD32
(
px1
)++;

147 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

149 
acc1
 = 
	`__SMLALD
(
x1
, 
c0
,ácc1);

152 
c0
 = *
	`__SIMD32
(
pb
)++;

155 
x0
 = *
	`__SIMD32
(
px0
)++;

157 
x1
 = *
	`__SIMD32
(
px1
)++;

160 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

162 
acc1
 = 
	`__SMLALD
(
x1
, 
c0
,ácc1);

165 
èpC¡
--;

169 
èpC¡
 = 
numT≠s
 % 0x4u;

171 
èpC¡
 > 0u)

174 
c0
 = *
pb
++;

177 
x0
 = *
px0
++;

179 
x1
 = *
px1
++;

182 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

183 
acc1
 = 
	`__SMLALD
(
x1
, 
c0
,ácc1);

186 
èpC¡
--;

191 
pSèã
 =ÖSèã + 
S
->
M
 * 2;

195 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

196 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
acc1
 >> 15), 16));

199 
blkC¡
--;

204 
blkC¡N3
 > 0u)

207 
i
 = 
S
->
M
;

211 *
pSèãCu∫t
++ = *
pSrc
++;

213 } --
i
);

216 
sum0
 = 0;

219 
px
 = 
pSèã
;

222 
pb
 = 
pC€ffs
;

225 
èpC¡
 = 
numT≠s
 >> 2;

229 
èpC¡
 > 0u)

232 
c0
 = *
	`__SIMD32
(
pb
)++;

235 
x0
 = *
	`__SIMD32
(
px
)++;

238 
c1
 = *
	`__SIMD32
(
pb
)++;

241 
sum0
 = 
	`__SMLALD
(
x0
, 
c0
, sum0);

244 
x0
 = *
	`__SIMD32
(
px
)++;

247 
sum0
 = 
	`__SMLALD
(
x0
, 
c1
, sum0);

250 
èpC¡
--;

254 
èpC¡
 = 
numT≠s
 % 0x4u;

256 
èpC¡
 > 0u)

259 
c0
 = *
pb
++;

262 
x0
 = *
px
++;

265 
sum0
 = 
	`__SMLALD
(
x0
, 
c0
, sum0);

268 
èpC¡
--;

273 
pSèã
 =ÖSèã + 
S
->
M
;

277 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
sum0
 >> 15), 16));

280 
blkC¡N3
--;

288 
pSèãCu∫t
 = 
S
->
pSèã
;

290 
i
 = (
numT≠s
 - 1u) >> 2u;

293 
i
 > 0u)

295 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

296 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

299 
i
--;

302 
i
 = (
numT≠s
 - 1u) % 0x04u;

305 
i
 > 0u)

307 *
pSèãCu∫t
++ = *
pSèã
++;

310 
i
--;

312 
	}
}

317 
	$¨m_fú_decim©e_q15
(

318 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

319 
q15_t
 * 
pSrc
,

320 
q15_t
 * 
pD°
,

321 
uöt32_t
 
blockSize
)

323 
q15_t
 *
pSèã
 = 
S
->pState;

324 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

325 
q15_t
 *
pSèãCu∫t
;

326 
q15_t
 *
px
;

327 
q15_t
 *
pb
;

328 
q15_t
 
x0
, 
x1
, 
c0
;

329 
q63_t
 
sum0
;

330 
q63_t
 
acc0
, 
acc1
;

331 
q15_t
 *
px0
, *
px1
;

332 
uöt32_t
 
blkC¡N3
;

333 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

334 
uöt32_t
 
i
, 
blkC¡
, 
èpC¡
, 
outBlockSize
 = 
blockSize
 / 
S
->
M
;

339 
pSèãCu∫t
 = 
S
->
pSèã
 + (
numT≠s
 - 1u);

343 
blkC¡
 = 
outBlockSize
 / 2;

344 
blkC¡N3
 = 
outBlockSize
 - (2 * 
blkC¡
);

346 
blkC¡
 > 0u)

349 
i
 = 2 * 
S
->
M
;

353 *
pSèãCu∫t
++ = *
pSrc
++;

355 } --
i
);

358 
acc0
 = 0;

359 
acc1
 = 0;

362 
px0
 = 
pSèã
;

364 
px1
 = 
pSèã
 + 
S
->
M
;

368 
pb
 = 
pC€ffs
;

371 
èpC¡
 = 
numT≠s
 >> 2;

375 
èpC¡
 > 0u)

378 
c0
 = *
pb
++;

381 
x0
 = *
px0
++;

382 
x1
 = *
px1
++;

385 
acc0
 +
x0
 * 
c0
;

386 
acc1
 +
x1
 * 
c0
;

389 
c0
 = *
pb
++;

392 
x0
 = *
px0
++;

393 
x1
 = *
px1
++;

396 
acc0
 +
x0
 * 
c0
;

397 
acc1
 +
x1
 * 
c0
;

400 
c0
 = *
pb
++;

403 
x0
 = *
px0
++;

404 
x1
 = *
px1
++;

407 
acc0
 +
x0
 * 
c0
;

408 
acc1
 +
x1
 * 
c0
;

411 
c0
 = *
pb
++;

414 
x0
 = *
px0
++;

415 
x1
 = *
px1
++;

418 
acc0
 +
x0
 * 
c0
;

419 
acc1
 +
x1
 * 
c0
;

422 
èpC¡
--;

426 
èpC¡
 = 
numT≠s
 % 0x4u;

428 
èpC¡
 > 0u)

431 
c0
 = *
pb
++;

434 
x0
 = *
px0
++;

435 
x1
 = *
px1
++;

438 
acc0
 +
x0
 * 
c0
;

439 
acc1
 +
x1
 * 
c0
;

442 
èpC¡
--;

447 
pSèã
 =ÖSèã + 
S
->
M
 * 2;

452 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

453 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
acc1
 >> 15), 16));

456 
blkC¡
--;

459 
blkC¡N3
 > 0u)

462 
i
 = 
S
->
M
;

466 *
pSèãCu∫t
++ = *
pSrc
++;

468 } --
i
);

471 
sum0
 = 0;

474 
px
 = 
pSèã
;

477 
pb
 = 
pC€ffs
;

480 
èpC¡
 = 
numT≠s
 >> 2;

484 
èpC¡
 > 0u)

487 
c0
 = *
pb
++;

490 
x0
 = *
px
++;

493 
sum0
 +
x0
 * 
c0
;

496 
c0
 = *
pb
++;

499 
x0
 = *
px
++;

502 
sum0
 +
x0
 * 
c0
;

505 
c0
 = *
pb
++;

508 
x0
 = *
px
++;

511 
sum0
 +
x0
 * 
c0
;

514 
c0
 = *
pb
++;

517 
x0
 = *
px
++;

520 
sum0
 +
x0
 * 
c0
;

523 
èpC¡
--;

527 
èpC¡
 = 
numT≠s
 % 0x4u;

529 
èpC¡
 > 0u)

532 
c0
 = *
pb
++;

535 
x0
 = *
px
++;

538 
sum0
 +
x0
 * 
c0
;

541 
èpC¡
--;

546 
pSèã
 =ÖSèã + 
S
->
M
;

550 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
sum0
 >> 15), 16));

553 
blkC¡N3
--;

561 
pSèãCu∫t
 = 
S
->
pSèã
;

563 
i
 = (
numT≠s
 - 1u) >> 2u;

566 
i
 > 0u)

568 *
pSèãCu∫t
++ = *
pSèã
++;

569 *
pSèãCu∫t
++ = *
pSèã
++;

570 *
pSèãCu∫t
++ = *
pSèã
++;

571 *
pSèãCu∫t
++ = *
pSèã
++;

574 
i
--;

577 
i
 = (
numT≠s
 - 1u) % 0x04u;

580 
i
 > 0u)

582 *
pSèãCu∫t
++ = *
pSèã
++;

585 
i
--;

587 
	}
}

595 
	$¨m_fú_decim©e_q15
(

596 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

597 
q15_t
 * 
pSrc
,

598 
q15_t
 * 
pD°
,

599 
uöt32_t
 
blockSize
)

601 
q15_t
 *
pSèã
 = 
S
->pState;

602 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

603 
q15_t
 *
pSèãCu∫t
;

604 
q15_t
 *
px
;

605 
q15_t
 *
pb
;

606 
q31_t
 
x0
, 
c0
;

607 
q63_t
 
sum0
;

608 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

609 
uöt32_t
 
i
, 
blkC¡
, 
èpC¡
, 
outBlockSize
 = 
blockSize
 / 
S
->
M
;

617 
pSèãCu∫t
 = 
S
->
pSèã
 + (
numT≠s
 - 1u);

620 
blkC¡
 = 
outBlockSize
;

622 
blkC¡
 > 0u)

625 
i
 = 
S
->
M
;

629 *
pSèãCu∫t
++ = *
pSrc
++;

631 } --
i
);

634 
sum0
 = 0;

637 
px
 = 
pSèã
;

640 
pb
 = 
pC€ffs
;

642 
èpC¡
 = 
numT≠s
;

644 
èpC¡
 > 0u)

647 
c0
 = *
pb
++;

650 
x0
 = *
px
++;

653 
sum0
 +(
q31_t
Ë
x0
 *
c0
;

656 
èpC¡
--;

661 
pSèã
 =ÖSèã + 
S
->
M
;

665 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
sum0
 >> 15), 16));

668 
blkC¡
--;

676 
pSèãCu∫t
 = 
S
->
pSèã
;

678 
i
 = 
numT≠s
 - 1u;

681 
i
 > 0u)

683 *
pSèãCu∫t
++ = *
pSèã
++;

686 
i
--;

690 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_q31.c

41 
	~"¨m_m©h.h
"

72 
	$¨m_fú_decim©e_q31
(

73 c⁄° 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

74 
q31_t
 * 
pSrc
,

75 
q31_t
 * 
pD°
,

76 
uöt32_t
 
blockSize
)

78 
q31_t
 *
pSèã
 = 
S
->pState;

79 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

80 
q31_t
 *
pSèãCu∫t
;

81 
q31_t
 
x0
, 
c0
;

82 
q31_t
 *
px
;

83 
q31_t
 *
pb
;

84 
q63_t
 
sum0
;

85 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

86 
uöt32_t
 
i
, 
èpC¡
, 
blkC¡
, 
outBlockSize
 = 
blockSize
 / 
S
->
M
;

89 #i‚de‡
ARM_MATH_CM0_FAMILY


95 
pSèãCu∫t
 = 
S
->
pSèã
 + (
numT≠s
 - 1u);

98 
blkC¡
 = 
outBlockSize
;

100 
blkC¡
 > 0u)

103 
i
 = 
S
->
M
;

107 *
pSèãCu∫t
++ = *
pSrc
++;

109 } --
i
);

112 
sum0
 = 0;

115 
px
 = 
pSèã
;

118 
pb
 = 
pC€ffs
;

121 
èpC¡
 = 
numT≠s
 >> 2;

125 
èpC¡
 > 0u)

128 
c0
 = *(
pb
++);

131 
x0
 = *(
px
++);

134 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

137 
c0
 = *(
pb
++);

140 
x0
 = *(
px
++);

143 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

146 
c0
 = *(
pb
++);

149 
x0
 = *(
px
++);

152 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

155 
c0
 = *(
pb
++);

158 
x0
 = *(
px
++);

161 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

164 
èpC¡
--;

168 
èpC¡
 = 
numT≠s
 % 0x4u;

170 
èpC¡
 > 0u)

173 
c0
 = *(
pb
++);

176 
x0
 = *(
px
++);

179 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

182 
èpC¡
--;

187 
pSèã
 =ÖSèã + 
S
->
M
;

190 *
pD°
++ = (
q31_t
Ë(
sum0
 >> 31);

193 
blkC¡
--;

201 
pSèãCu∫t
 = 
S
->
pSèã
;

203 
i
 = (
numT≠s
 - 1u) >> 2u;

206 
i
 > 0u)

208 *
pSèãCu∫t
++ = *
pSèã
++;

209 *
pSèãCu∫t
++ = *
pSèã
++;

210 *
pSèãCu∫t
++ = *
pSèã
++;

211 *
pSèãCu∫t
++ = *
pSèã
++;

214 
i
--;

217 
i
 = (
numT≠s
 - 1u) % 0x04u;

220 
i
 > 0u)

222 *
pSèãCu∫t
++ = *
pSèã
++;

225 
i
--;

234 
pSèãCu∫t
 = 
S
->
pSèã
 + (
numT≠s
 - 1u);

237 
blkC¡
 = 
outBlockSize
;

239 
blkC¡
 > 0u)

242 
i
 = 
S
->
M
;

246 *
pSèãCu∫t
++ = *
pSrc
++;

248 } --
i
);

251 
sum0
 = 0;

254 
px
 = 
pSèã
;

257 
pb
 = 
pC€ffs
;

259 
èpC¡
 = 
numT≠s
;

261 
èpC¡
 > 0u)

264 
c0
 = *
pb
++;

267 
x0
 = *
px
++;

270 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

273 
èpC¡
--;

278 
pSèã
 =ÖSèã + 
S
->
M
;

281 *
pD°
++ = (
q31_t
Ë(
sum0
 >> 31);

284 
blkC¡
--;

292 
pSèãCu∫t
 = 
S
->
pSèã
;

294 
i
 = 
numT≠s
 - 1u;

297 
i
 > 0u)

299 *
pSèãCu∫t
++ = *
pSèã
++;

302 
i
--;

307 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_f32.c

41 
	~"¨m_m©h.h
"

134 #i‡
deföed
(
ARM_MATH_CM7
)

136 
	$¨m_fú_f32
(

137 c⁄° 
¨m_fú_ö°™˚_f32
 * 
S
,

138 
Êﬂt32_t
 * 
pSrc
,

139 
Êﬂt32_t
 * 
pD°
,

140 
uöt32_t
 
blockSize
)

142 
Êﬂt32_t
 *
pSèã
 = 
S
->pState;

143 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

144 
Êﬂt32_t
 *
pSèãCu∫t
;

145 
Êﬂt32_t
 *
px
, *
pb
;

146 
Êﬂt32_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
, 
acc4
, 
acc5
, 
acc6
, 
acc7
;

147 
Êﬂt32_t
 
x0
, 
x1
, 
x2
, 
x3
, 
x4
, 
x5
, 
x6
, 
x7
, 
c0
;

148 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

149 
uöt32_t
 
i
, 
èpC¡
, 
blkC¡
;

153 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

163 
blkC¡
 = 
blockSize
 >> 3;

167 
blkC¡
 > 0u)

170 *
pSèãCu∫t
++ = *
pSrc
++;

171 *
pSèãCu∫t
++ = *
pSrc
++;

172 *
pSèãCu∫t
++ = *
pSrc
++;

173 *
pSèãCu∫t
++ = *
pSrc
++;

176 
acc0
 = 0.0f;

177 
acc1
 = 0.0f;

178 
acc2
 = 0.0f;

179 
acc3
 = 0.0f;

180 
acc4
 = 0.0f;

181 
acc5
 = 0.0f;

182 
acc6
 = 0.0f;

183 
acc7
 = 0.0f;

186 
px
 = 
pSèã
;

189 
pb
 = (
pC€ffs
);

194 *
pSèãCu∫t
++ = *
pSrc
++;

195 *
pSèãCu∫t
++ = *
pSrc
++;

196 *
pSèãCu∫t
++ = *
pSrc
++;

197 *
pSèãCu∫t
++ = *
pSrc
++;

200 
x0
 = *
px
++;

201 
x1
 = *
px
++;

202 
x2
 = *
px
++;

203 
x3
 = *
px
++;

204 
x4
 = *
px
++;

205 
x5
 = *
px
++;

206 
x6
 = *
px
++;

209 
èpC¡
 = 
numT≠s
 >> 3u;

213 
èpC¡
 > 0u)

216 
c0
 = *(
pb
++);

219 
x7
 = *(
px
++);

222 
acc0
 +
x0
 * 
c0
;

225 
acc1
 +
x1
 * 
c0
;

228 
acc2
 +
x2
 * 
c0
;

231 
acc3
 +
x3
 * 
c0
;

234 
acc4
 +
x4
 * 
c0
;

237 
acc5
 +
x5
 * 
c0
;

240 
acc6
 +
x6
 * 
c0
;

243 
acc7
 +
x7
 * 
c0
;

246 
c0
 = *(
pb
++);

249 
x0
 = *(
px
++);

252 
acc0
 +
x1
 * 
c0
;

253 
acc1
 +
x2
 * 
c0
;

254 
acc2
 +
x3
 * 
c0
;

255 
acc3
 +
x4
 * 
c0
;

256 
acc4
 +
x5
 * 
c0
;

257 
acc5
 +
x6
 * 
c0
;

258 
acc6
 +
x7
 * 
c0
;

259 
acc7
 +
x0
 * 
c0
;

262 
c0
 = *(
pb
++);

265 
x1
 = *(
px
++);

268 
acc0
 +
x2
 * 
c0
;

269 
acc1
 +
x3
 * 
c0
;

270 
acc2
 +
x4
 * 
c0
;

271 
acc3
 +
x5
 * 
c0
;

272 
acc4
 +
x6
 * 
c0
;

273 
acc5
 +
x7
 * 
c0
;

274 
acc6
 +
x0
 * 
c0
;

275 
acc7
 +
x1
 * 
c0
;

278 
c0
 = *(
pb
++);

281 
x2
 = *(
px
++);

284 
acc0
 +
x3
 * 
c0
;

285 
acc1
 +
x4
 * 
c0
;

286 
acc2
 +
x5
 * 
c0
;

287 
acc3
 +
x6
 * 
c0
;

288 
acc4
 +
x7
 * 
c0
;

289 
acc5
 +
x0
 * 
c0
;

290 
acc6
 +
x1
 * 
c0
;

291 
acc7
 +
x2
 * 
c0
;

294 
c0
 = *(
pb
++);

297 
x3
 = *(
px
++);

299 
acc0
 +
x4
 * 
c0
;

300 
acc1
 +
x5
 * 
c0
;

301 
acc2
 +
x6
 * 
c0
;

302 
acc3
 +
x7
 * 
c0
;

303 
acc4
 +
x0
 * 
c0
;

304 
acc5
 +
x1
 * 
c0
;

305 
acc6
 +
x2
 * 
c0
;

306 
acc7
 +
x3
 * 
c0
;

309 
c0
 = *(
pb
++);

312 
x4
 = *(
px
++);

315 
acc0
 +
x5
 * 
c0
;

316 
acc1
 +
x6
 * 
c0
;

317 
acc2
 +
x7
 * 
c0
;

318 
acc3
 +
x0
 * 
c0
;

319 
acc4
 +
x1
 * 
c0
;

320 
acc5
 +
x2
 * 
c0
;

321 
acc6
 +
x3
 * 
c0
;

322 
acc7
 +
x4
 * 
c0
;

325 
c0
 = *(
pb
++);

328 
x5
 = *(
px
++);

331 
acc0
 +
x6
 * 
c0
;

332 
acc1
 +
x7
 * 
c0
;

333 
acc2
 +
x0
 * 
c0
;

334 
acc3
 +
x1
 * 
c0
;

335 
acc4
 +
x2
 * 
c0
;

336 
acc5
 +
x3
 * 
c0
;

337 
acc6
 +
x4
 * 
c0
;

338 
acc7
 +
x5
 * 
c0
;

341 
c0
 = *(
pb
++);

344 
x6
 = *(
px
++);

347 
acc0
 +
x7
 * 
c0
;

348 
acc1
 +
x0
 * 
c0
;

349 
acc2
 +
x1
 * 
c0
;

350 
acc3
 +
x2
 * 
c0
;

351 
acc4
 +
x3
 * 
c0
;

352 
acc5
 +
x4
 * 
c0
;

353 
acc6
 +
x5
 * 
c0
;

354 
acc7
 +
x6
 * 
c0
;

356 
èpC¡
--;

360 
èpC¡
 = 
numT≠s
 % 0x8u;

362 
èpC¡
 > 0u)

365 
c0
 = *(
pb
++);

368 
x7
 = *(
px
++);

371 
acc0
 +
x0
 * 
c0
;

372 
acc1
 +
x1
 * 
c0
;

373 
acc2
 +
x2
 * 
c0
;

374 
acc3
 +
x3
 * 
c0
;

375 
acc4
 +
x4
 * 
c0
;

376 
acc5
 +
x5
 * 
c0
;

377 
acc6
 +
x6
 * 
c0
;

378 
acc7
 +
x7
 * 
c0
;

381 
x0
 = 
x1
;

382 
x1
 = 
x2
;

383 
x2
 = 
x3
;

384 
x3
 = 
x4
;

385 
x4
 = 
x5
;

386 
x5
 = 
x6
;

387 
x6
 = 
x7
;

390 
èpC¡
--;

394 
pSèã
 =ÖState + 8;

397 *
pD°
++ = 
acc0
;

398 *
pD°
++ = 
acc1
;

399 *
pD°
++ = 
acc2
;

400 *
pD°
++ = 
acc3
;

401 *
pD°
++ = 
acc4
;

402 *
pD°
++ = 
acc5
;

403 *
pD°
++ = 
acc6
;

404 *
pD°
++ = 
acc7
;

406 
blkC¡
--;

411 
blkC¡
 = 
blockSize
 % 0x8u;

413 
blkC¡
 > 0u)

416 *
pSèãCu∫t
++ = *
pSrc
++;

419 
acc0
 = 0.0f;

422 
px
 = 
pSèã
;

425 
pb
 = (
pC€ffs
);

427 
i
 = 
numT≠s
;

432 
acc0
 +*
px
++ * *
pb
++;

433 
i
--;

435 } 
i
 > 0u);

438 *
pD°
++ = 
acc0
;

441 
pSèã
 =ÖState + 1;

443 
blkC¡
--;

451 
pSèãCu∫t
 = 
S
->
pSèã
;

453 
èpC¡
 = (
numT≠s
 - 1u) >> 2u;

456 
èpC¡
 > 0u)

458 *
pSèãCu∫t
++ = *
pSèã
++;

459 *
pSèãCu∫t
++ = *
pSèã
++;

460 *
pSèãCu∫t
++ = *
pSèã
++;

461 *
pSèãCu∫t
++ = *
pSèã
++;

464 
èpC¡
--;

468 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

471 
èpC¡
 > 0u)

473 *
pSèãCu∫t
++ = *
pSèã
++;

476 
èpC¡
--;

478 
	}
}

480 #ñi‡
deföed
(
ARM_MATH_CM0_FAMILY
)

482 
	$¨m_fú_f32
(

483 c⁄° 
¨m_fú_ö°™˚_f32
 * 
S
,

484 
Êﬂt32_t
 * 
pSrc
,

485 
Êﬂt32_t
 * 
pD°
,

486 
uöt32_t
 
blockSize
)

488 
Êﬂt32_t
 *
pSèã
 = 
S
->pState;

489 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

490 
Êﬂt32_t
 *
pSèãCu∫t
;

491 
Êﬂt32_t
 *
px
, *
pb
;

492 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

493 
uöt32_t
 
i
, 
èpC¡
, 
blkC¡
;

497 
Êﬂt32_t
 
acc
;

501 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

504 
blkC¡
 = 
blockSize
;

506 
blkC¡
 > 0u)

509 *
pSèãCu∫t
++ = *
pSrc
++;

512 
acc
 = 0.0f;

515 
px
 = 
pSèã
;

518 
pb
 = 
pC€ffs
;

520 
i
 = 
numT≠s
;

526 
acc
 +*
px
++ * *
pb
++;

527 
i
--;

529 } 
i
 > 0u);

532 *
pD°
++ = 
acc
;

535 
pSèã
 =ÖState + 1;

537 
blkC¡
--;

545 
pSèãCu∫t
 = 
S
->
pSèã
;

548 
èpC¡
 = 
numT≠s
 - 1u;

551 
èpC¡
 > 0u)

553 *
pSèãCu∫t
++ = *
pSèã
++;

556 
èpC¡
--;

559 
	}
}

565 
	$¨m_fú_f32
(

566 c⁄° 
¨m_fú_ö°™˚_f32
 * 
S
,

567 
Êﬂt32_t
 * 
pSrc
,

568 
Êﬂt32_t
 * 
pD°
,

569 
uöt32_t
 
blockSize
)

571 
Êﬂt32_t
 *
pSèã
 = 
S
->pState;

572 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

573 
Êﬂt32_t
 *
pSèãCu∫t
;

574 
Êﬂt32_t
 *
px
, *
pb
;

575 
Êﬂt32_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
, 
acc4
, 
acc5
, 
acc6
, 
acc7
;

576 
Êﬂt32_t
 
x0
, 
x1
, 
x2
, 
x3
, 
x4
, 
x5
, 
x6
, 
x7
, 
c0
;

577 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

578 
uöt32_t
 
i
, 
èpC¡
, 
blkC¡
;

579 
Êﬂt32_t
 
p0
,
p1
,
p2
,
p3
,
p4
,
p5
,
p6
,
p7
;

583 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

593 
blkC¡
 = 
blockSize
 >> 3;

597 
blkC¡
 > 0u)

600 *
pSèãCu∫t
++ = *
pSrc
++;

601 *
pSèãCu∫t
++ = *
pSrc
++;

602 *
pSèãCu∫t
++ = *
pSrc
++;

603 *
pSèãCu∫t
++ = *
pSrc
++;

606 
acc0
 = 0.0f;

607 
acc1
 = 0.0f;

608 
acc2
 = 0.0f;

609 
acc3
 = 0.0f;

610 
acc4
 = 0.0f;

611 
acc5
 = 0.0f;

612 
acc6
 = 0.0f;

613 
acc7
 = 0.0f;

616 
px
 = 
pSèã
;

619 
pb
 = (
pC€ffs
);

624 *
pSèãCu∫t
++ = *
pSrc
++;

625 *
pSèãCu∫t
++ = *
pSrc
++;

626 *
pSèãCu∫t
++ = *
pSrc
++;

627 *
pSèãCu∫t
++ = *
pSrc
++;

630 
x0
 = *
px
++;

631 
x1
 = *
px
++;

632 
x2
 = *
px
++;

633 
x3
 = *
px
++;

634 
x4
 = *
px
++;

635 
x5
 = *
px
++;

636 
x6
 = *
px
++;

639 
èpC¡
 = 
numT≠s
 >> 3u;

643 
èpC¡
 > 0u)

646 
c0
 = *(
pb
++);

649 
x7
 = *(
px
++);

652 
p0
 = 
x0
 * 
c0
;

655 
p1
 = 
x1
 * 
c0
;

658 
p2
 = 
x2
 * 
c0
;

661 
p3
 = 
x3
 * 
c0
;

664 
p4
 = 
x4
 * 
c0
;

667 
p5
 = 
x5
 * 
c0
;

670 
p6
 = 
x6
 * 
c0
;

673 
p7
 = 
x7
 * 
c0
;

676 
c0
 = *(
pb
++);

679 
x0
 = *(
px
++);

681 
acc0
 +
p0
;

682 
acc1
 +
p1
;

683 
acc2
 +
p2
;

684 
acc3
 +
p3
;

685 
acc4
 +
p4
;

686 
acc5
 +
p5
;

687 
acc6
 +
p6
;

688 
acc7
 +
p7
;

692 
p0
 = 
x1
 * 
c0
;

693 
p1
 = 
x2
 * 
c0
;

694 
p2
 = 
x3
 * 
c0
;

695 
p3
 = 
x4
 * 
c0
;

696 
p4
 = 
x5
 * 
c0
;

697 
p5
 = 
x6
 * 
c0
;

698 
p6
 = 
x7
 * 
c0
;

699 
p7
 = 
x0
 * 
c0
;

702 
c0
 = *(
pb
++);

705 
x1
 = *(
px
++);

707 
acc0
 +
p0
;

708 
acc1
 +
p1
;

709 
acc2
 +
p2
;

710 
acc3
 +
p3
;

711 
acc4
 +
p4
;

712 
acc5
 +
p5
;

713 
acc6
 +
p6
;

714 
acc7
 +
p7
;

717 
p0
 = 
x2
 * 
c0
;

718 
p1
 = 
x3
 * 
c0
;

719 
p2
 = 
x4
 * 
c0
;

720 
p3
 = 
x5
 * 
c0
;

721 
p4
 = 
x6
 * 
c0
;

722 
p5
 = 
x7
 * 
c0
;

723 
p6
 = 
x0
 * 
c0
;

724 
p7
 = 
x1
 * 
c0
;

727 
c0
 = *(
pb
++);

730 
x2
 = *(
px
++);

732 
acc0
 +
p0
;

733 
acc1
 +
p1
;

734 
acc2
 +
p2
;

735 
acc3
 +
p3
;

736 
acc4
 +
p4
;

737 
acc5
 +
p5
;

738 
acc6
 +
p6
;

739 
acc7
 +
p7
;

742 
p0
 = 
x3
 * 
c0
;

743 
p1
 = 
x4
 * 
c0
;

744 
p2
 = 
x5
 * 
c0
;

745 
p3
 = 
x6
 * 
c0
;

746 
p4
 = 
x7
 * 
c0
;

747 
p5
 = 
x0
 * 
c0
;

748 
p6
 = 
x1
 * 
c0
;

749 
p7
 = 
x2
 * 
c0
;

752 
c0
 = *(
pb
++);

755 
x3
 = *(
px
++);

757 
acc0
 +
p0
;

758 
acc1
 +
p1
;

759 
acc2
 +
p2
;

760 
acc3
 +
p3
;

761 
acc4
 +
p4
;

762 
acc5
 +
p5
;

763 
acc6
 +
p6
;

764 
acc7
 +
p7
;

767 
p0
 = 
x4
 * 
c0
;

768 
p1
 = 
x5
 * 
c0
;

769 
p2
 = 
x6
 * 
c0
;

770 
p3
 = 
x7
 * 
c0
;

771 
p4
 = 
x0
 * 
c0
;

772 
p5
 = 
x1
 * 
c0
;

773 
p6
 = 
x2
 * 
c0
;

774 
p7
 = 
x3
 * 
c0
;

777 
c0
 = *(
pb
++);

780 
x4
 = *(
px
++);

782 
acc0
 +
p0
;

783 
acc1
 +
p1
;

784 
acc2
 +
p2
;

785 
acc3
 +
p3
;

786 
acc4
 +
p4
;

787 
acc5
 +
p5
;

788 
acc6
 +
p6
;

789 
acc7
 +
p7
;

792 
p0
 = 
x5
 * 
c0
;

793 
p1
 = 
x6
 * 
c0
;

794 
p2
 = 
x7
 * 
c0
;

795 
p3
 = 
x0
 * 
c0
;

796 
p4
 = 
x1
 * 
c0
;

797 
p5
 = 
x2
 * 
c0
;

798 
p6
 = 
x3
 * 
c0
;

799 
p7
 = 
x4
 * 
c0
;

802 
c0
 = *(
pb
++);

805 
x5
 = *(
px
++);

807 
acc0
 +
p0
;

808 
acc1
 +
p1
;

809 
acc2
 +
p2
;

810 
acc3
 +
p3
;

811 
acc4
 +
p4
;

812 
acc5
 +
p5
;

813 
acc6
 +
p6
;

814 
acc7
 +
p7
;

817 
p0
 = 
x6
 * 
c0
;

818 
p1
 = 
x7
 * 
c0
;

819 
p2
 = 
x0
 * 
c0
;

820 
p3
 = 
x1
 * 
c0
;

821 
p4
 = 
x2
 * 
c0
;

822 
p5
 = 
x3
 * 
c0
;

823 
p6
 = 
x4
 * 
c0
;

824 
p7
 = 
x5
 * 
c0
;

827 
c0
 = *(
pb
++);

830 
x6
 = *(
px
++);

832 
acc0
 +
p0
;

833 
acc1
 +
p1
;

834 
acc2
 +
p2
;

835 
acc3
 +
p3
;

836 
acc4
 +
p4
;

837 
acc5
 +
p5
;

838 
acc6
 +
p6
;

839 
acc7
 +
p7
;

842 
p0
 = 
x7
 * 
c0
;

843 
p1
 = 
x0
 * 
c0
;

844 
p2
 = 
x1
 * 
c0
;

845 
p3
 = 
x2
 * 
c0
;

846 
p4
 = 
x3
 * 
c0
;

847 
p5
 = 
x4
 * 
c0
;

848 
p6
 = 
x5
 * 
c0
;

849 
p7
 = 
x6
 * 
c0
;

851 
èpC¡
--;

853 
acc0
 +
p0
;

854 
acc1
 +
p1
;

855 
acc2
 +
p2
;

856 
acc3
 +
p3
;

857 
acc4
 +
p4
;

858 
acc5
 +
p5
;

859 
acc6
 +
p6
;

860 
acc7
 +
p7
;

864 
èpC¡
 = 
numT≠s
 % 0x8u;

866 
èpC¡
 > 0u)

869 
c0
 = *(
pb
++);

872 
x7
 = *(
px
++);

875 
p0
 = 
x0
 * 
c0
;

876 
p1
 = 
x1
 * 
c0
;

877 
p2
 = 
x2
 * 
c0
;

878 
p3
 = 
x3
 * 
c0
;

879 
p4
 = 
x4
 * 
c0
;

880 
p5
 = 
x5
 * 
c0
;

881 
p6
 = 
x6
 * 
c0
;

882 
p7
 = 
x7
 * 
c0
;

885 
x0
 = 
x1
;

886 
x1
 = 
x2
;

887 
x2
 = 
x3
;

888 
x3
 = 
x4
;

889 
x4
 = 
x5
;

890 
x5
 = 
x6
;

891 
x6
 = 
x7
;

893 
acc0
 +
p0
;

894 
acc1
 +
p1
;

895 
acc2
 +
p2
;

896 
acc3
 +
p3
;

897 
acc4
 +
p4
;

898 
acc5
 +
p5
;

899 
acc6
 +
p6
;

900 
acc7
 +
p7
;

903 
èpC¡
--;

907 
pSèã
 =ÖState + 8;

910 *
pD°
++ = 
acc0
;

911 *
pD°
++ = 
acc1
;

912 *
pD°
++ = 
acc2
;

913 *
pD°
++ = 
acc3
;

914 *
pD°
++ = 
acc4
;

915 *
pD°
++ = 
acc5
;

916 *
pD°
++ = 
acc6
;

917 *
pD°
++ = 
acc7
;

919 
blkC¡
--;

924 
blkC¡
 = 
blockSize
 % 0x8u;

926 
blkC¡
 > 0u)

929 *
pSèãCu∫t
++ = *
pSrc
++;

932 
acc0
 = 0.0f;

935 
px
 = 
pSèã
;

938 
pb
 = (
pC€ffs
);

940 
i
 = 
numT≠s
;

945 
acc0
 +*
px
++ * *
pb
++;

946 
i
--;

948 } 
i
 > 0u);

951 *
pD°
++ = 
acc0
;

954 
pSèã
 =ÖState + 1;

956 
blkC¡
--;

964 
pSèãCu∫t
 = 
S
->
pSèã
;

966 
èpC¡
 = (
numT≠s
 - 1u) >> 2u;

969 
èpC¡
 > 0u)

971 *
pSèãCu∫t
++ = *
pSèã
++;

972 *
pSèãCu∫t
++ = *
pSèã
++;

973 *
pSèãCu∫t
++ = *
pSèã
++;

974 *
pSèãCu∫t
++ = *
pSèã
++;

977 
èpC¡
--;

981 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

984 
èpC¡
 > 0u)

986 *
pSèãCu∫t
++ = *
pSèã
++;

989 
èpC¡
--;

991 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_fast_q15.c

41 
	~"¨m_m©h.h
"

72 
	$¨m_fú_Á°_q15
(

73 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

74 
q15_t
 * 
pSrc
,

75 
q15_t
 * 
pD°
,

76 
uöt32_t
 
blockSize
)

78 
q15_t
 *
pSèã
 = 
S
->pState;

79 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

80 
q15_t
 *
pSèãCu∫t
;

81 
q31_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

82 
q15_t
 *
pb
;

83 
q15_t
 *
px
;

84 
q31_t
 
x0
, 
x1
, 
x2
, 
c0
;

85 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

86 
uöt32_t
 
èpC¡
, 
blkC¡
;

91 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

102 
blkC¡
 = 
blockSize
 >> 2;

106 
blkC¡
 > 0u)

110 *
pSèãCu∫t
++ = *
pSrc
++;

111 *
pSèãCu∫t
++ = *
pSrc
++;

112 *
pSèãCu∫t
++ = *
pSrc
++;

113 *
pSèãCu∫t
++ = *
pSrc
++;

117 
acc0
 = 0;

118 
acc1
 = 0;

119 
acc2
 = 0;

120 
acc3
 = 0;

123 
px
 = 
pSèã
;

126 
pb
 = 
pC€ffs
;

129 
x0
 = *
	`__SIMD32
(
px
)++;

132 
x2
 = *
	`__SIMD32
(
px
)++;

136 
èpC¡
 = 
numT≠s
 >> 2;

138 
èpC¡
 > 0)

141 
c0
 = *
	`__SIMD32
(
pb
)++;

144 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

147 
acc2
 = 
	`__SMLAD
(
x2
, 
c0
,ácc2);

150 #i‚de‡
ARM_MATH_BIG_ENDIAN


151 
x1
 = 
	`__PKHBT
(
x2
, 
x0
, 0);

153 
x1
 = 
	`__PKHBT
(
x0
, 
x2
, 0);

157 
x0
 = 
	`_SIMD32_OFFSET
(
px
);

160 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

163 #i‚de‡
ARM_MATH_BIG_ENDIAN


164 
x1
 = 
	`__PKHBT
(
x0
, 
x2
, 0);

166 
x1
 = 
	`__PKHBT
(
x2
, 
x0
, 0);

170 
acc3
 = 
	`__SMLADX
(
x1
, 
c0
,ácc3);

173 
c0
 = *
	`__SIMD32
(
pb
)++;

176 
acc0
 = 
	`__SMLAD
(
x2
, 
c0
,ácc0);

179 
x2
 = 
	`_SIMD32_OFFSET
(
px
 + 2u);

182 
acc2
 = 
	`__SMLAD
(
x0
, 
c0
,ácc2);

185 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

188 #i‚de‡
ARM_MATH_BIG_ENDIAN


189 
x1
 = 
	`__PKHBT
(
x2
, 
x0
, 0);

191 
x1
 = 
	`__PKHBT
(
x0
, 
x2
, 0);

195 
acc3
 = 
	`__SMLADX
(
x1
, 
c0
,ácc3);

198 
px
 += 4u;

201 
èpC¡
--;

207 if((
numT≠s
 & 0x3u) != 0u)

211 
c0
 = *
	`__SIMD32
(
pb
)++;

214 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

215 
acc2
 = 
	`__SMLAD
(
x2
, 
c0
,ácc2);

218 #i‚de‡
ARM_MATH_BIG_ENDIAN


219 
x1
 = 
	`__PKHBT
(
x2
, 
x0
, 0);

221 
x1
 = 
	`__PKHBT
(
x0
, 
x2
, 0);

225 
x0
 = *
	`__SIMD32
(
px
);

228 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

231 #i‚de‡
ARM_MATH_BIG_ENDIAN


232 
x1
 = 
	`__PKHBT
(
x0
, 
x2
, 0);

234 
x1
 = 
	`__PKHBT
(
x2
, 
x0
, 0);

238 
acc3
 = 
	`__SMLADX
(
x1
, 
c0
,ácc3);

244 #i‚de‡
ARM_MATH_BIG_ENDIAN


246 *
	`__SIMD32
(
pD°
)++ =

247 
	`__PKHBT
(
	`__SSAT
((
acc0
 >> 15), 16), __SSAT((
acc1
 >> 15), 16), 16);

249 *
	`__SIMD32
(
pD°
)++ =

250 
	`__PKHBT
(
	`__SSAT
((
acc2
 >> 15), 16), __SSAT((
acc3
 >> 15), 16), 16);

254 *
	`__SIMD32
(
pD°
)++ =

255 
	`__PKHBT
(
	`__SSAT
((
acc1
 >> 15), 16), __SSAT((
acc0
 >> 15), 16), 16);

257 *
	`__SIMD32
(
pD°
)++ =

258 
	`__PKHBT
(
	`__SSAT
((
acc3
 >> 15), 16), __SSAT((
acc2
 >> 15), 16), 16);

264 
pSèã
 =ÖState + 4u;

267 
blkC¡
--;

272 
blkC¡
 = 
blockSize
 % 0x4u;

273 
blkC¡
 > 0u)

276 *
pSèãCu∫t
++ = *
pSrc
++;

279 
acc0
 = 0;

282 
px
 = 
pSèã
;

283 
pb
 = 
pC€ffs
;

285 
èpC¡
 = 
numT≠s
 >> 1u;

290 
acc0
 +(
q31_t
Ë* 
px
++ * *
pb
++;

291 
acc0
 +(
q31_t
Ë* 
px
++ * *
pb
++;

293 
èpC¡
--;

295 
èpC¡
 > 0u);

299 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

302 
pSèã
 =ÖState + 1u;

305 
blkC¡
--;

313 
pSèãCu∫t
 = 
S
->
pSèã
;

316 
èpC¡
 = (
numT≠s
 - 1u) >> 2;

318 
èpC¡
 > 0u)

320 *
pSèãCu∫t
++ = *
pSèã
++;

321 *
pSèãCu∫t
++ = *
pSèã
++;

322 *
pSèãCu∫t
++ = *
pSèã
++;

323 *
pSèãCu∫t
++ = *
pSèã
++;

325 
èpC¡
--;

330 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

333 
èpC¡
 > 0u)

335 *
pSèãCu∫t
++ = *
pSèã
++;

338 
èpC¡
--;

341 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_fast_q31.c

41 
	~"¨m_m©h.h
"

74 
IAR_ONLY_LOW_OPTIMIZATION_ENTER


75 
	$¨m_fú_Á°_q31
(

76 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

77 
q31_t
 * 
pSrc
,

78 
q31_t
 * 
pD°
,

79 
uöt32_t
 
blockSize
)

81 
q31_t
 *
pSèã
 = 
S
->pState;

82 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

83 
q31_t
 *
pSèãCu∫t
;

84 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
;

85 
q31_t
 
c0
;

86 
q31_t
 *
px
;

87 
q31_t
 *
pb
;

88 
q31_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

89 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

90 
uöt32_t
 
i
, 
èpC¡
, 
blkC¡
;

94 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

104 
blkC¡
 = 
blockSize
 >> 2;

108 
blkC¡
 > 0u)

111 *
pSèãCu∫t
++ = *
pSrc
++;

112 *
pSèãCu∫t
++ = *
pSrc
++;

113 *
pSèãCu∫t
++ = *
pSrc
++;

114 *
pSèãCu∫t
++ = *
pSrc
++;

117 
acc0
 = 0;

118 
acc1
 = 0;

119 
acc2
 = 0;

120 
acc3
 = 0;

123 
px
 = 
pSèã
;

126 
pb
 = 
pC€ffs
;

130 
x0
 = *(
px
++);

131 
x1
 = *(
px
++);

132 
x2
 = *(
px
++);

135 
èpC¡
 = 
numT≠s
 >> 2;

136 
i
 = 
èpC¡
;

138 
i
 > 0u)

141 
c0
 = *
pb
;

144 
x3
 = *
px
;

147 
	`mu…Acc_32x32_kìp32_R
(
acc0
, 
x0
, 
c0
);

150 
	`mu…Acc_32x32_kìp32_R
(
acc1
, 
x1
, 
c0
);

153 
	`mu…Acc_32x32_kìp32_R
(
acc2
, 
x2
, 
c0
);

156 
	`mu…Acc_32x32_kìp32_R
(
acc3
, 
x3
, 
c0
);

159 
c0
 = *(
pb
 + 1u);

162 
x0
 = *(
px
 + 1u);

165 
	`mu…Acc_32x32_kìp32_R
(
acc0
, 
x1
, 
c0
);

166 
	`mu…Acc_32x32_kìp32_R
(
acc1
, 
x2
, 
c0
);

167 
	`mu…Acc_32x32_kìp32_R
(
acc2
, 
x3
, 
c0
);

168 
	`mu…Acc_32x32_kìp32_R
(
acc3
, 
x0
, 
c0
);

171 
c0
 = *(
pb
 + 2u);

174 
x1
 = *(
px
 + 2u);

177 
	`mu…Acc_32x32_kìp32_R
(
acc0
, 
x2
, 
c0
);

178 
	`mu…Acc_32x32_kìp32_R
(
acc1
, 
x3
, 
c0
);

179 
	`mu…Acc_32x32_kìp32_R
(
acc2
, 
x0
, 
c0
);

180 
	`mu…Acc_32x32_kìp32_R
(
acc3
, 
x1
, 
c0
);

183 
c0
 = *(
pb
 + 3u);

186 
x2
 = *(
px
 + 3u);

189 
	`mu…Acc_32x32_kìp32_R
(
acc0
, 
x3
, 
c0
);

190 
	`mu…Acc_32x32_kìp32_R
(
acc1
, 
x0
, 
c0
);

191 
	`mu…Acc_32x32_kìp32_R
(
acc2
, 
x1
, 
c0
);

192 
	`mu…Acc_32x32_kìp32_R
(
acc3
, 
x2
, 
c0
);

195 
pb
 += 4u;

196 
px
 += 4u;

199 
i
--;

204 
i
 = 
numT≠s
 - (
èpC¡
 * 4u);

205 
i
 > 0u)

208 
c0
 = *(
pb
++);

211 
x3
 = *(
px
++);

214 
	`mu…Acc_32x32_kìp32_R
(
acc0
, 
x0
, 
c0
);

215 
	`mu…Acc_32x32_kìp32_R
(
acc1
, 
x1
, 
c0
);

216 
	`mu…Acc_32x32_kìp32_R
(
acc2
, 
x2
, 
c0
);

217 
	`mu…Acc_32x32_kìp32_R
(
acc3
, 
x3
, 
c0
);

220 
x0
 = 
x1
;

221 
x1
 = 
x2
;

222 
x2
 = 
x3
;

225 
i
--;

229 
pSèã
 =ÖState + 4;

233 *
pD°
++ = (
q31_t
Ë(
acc0
 << 1);

234 *
pD°
++ = (
q31_t
Ë(
acc1
 << 1);

235 *
pD°
++ = (
q31_t
Ë(
acc2
 << 1);

236 *
pD°
++ = (
q31_t
Ë(
acc3
 << 1);

239 
blkC¡
--;

245 
blkC¡
 = 
blockSize
 % 4u;

247 
blkC¡
 > 0u)

250 *
pSèãCu∫t
++ = *
pSrc
++;

253 
acc0
 = 0;

256 
px
 = 
pSèã
;

259 
pb
 = (
pC€ffs
);

261 
i
 = 
numT≠s
;

266 
	`mu…Acc_32x32_kìp32_R
(
acc0
, (*
px
++), (*(
pb
++)));

267 
i
--;

268 } 
i
 > 0u);

272 *
pD°
++ = (
q31_t
Ë(
acc0
 << 1);

275 
pSèã
 =ÖState + 1;

278 
blkC¡
--;

286 
pSèãCu∫t
 = 
S
->
pSèã
;

289 
èpC¡
 = (
numT≠s
 - 1u);

292 
èpC¡
 > 0u)

294 *
pSèãCu∫t
++ = *
pSèã
++;

297 
èpC¡
--;

301 
	}
}

302 
	gIAR_ONLY_LOW_OPTIMIZATION_EXIT


	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_init_f32.c

41 
	~"¨m_m©h.h
"

73 
	$¨m_fú_öô_f32
(

74 
¨m_fú_ö°™˚_f32
 * 
S
,

75 
uöt16_t
 
numT≠s
,

76 
Êﬂt32_t
 * 
pC€ffs
,

77 
Êﬂt32_t
 * 
pSèã
,

78 
uöt32_t
 
blockSize
)

81 
S
->
numT≠s
 =ÇumTaps;

84 
S
->
pC€ffs
 =ÖCoeffs;

87 
	`mem£t
(
pSèã
, 0, (
numT≠s
 + (
blockSize
 - 1u)Ë* (
Êﬂt32_t
));

90 
S
->
pSèã
 =ÖState;

92 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_init_q15.c

41 
	~"¨m_m©h.h
"

90 
¨m_°©us
 
	$¨m_fú_öô_q15
(

91 
¨m_fú_ö°™˚_q15
 * 
S
,

92 
uöt16_t
 
numT≠s
,

93 
q15_t
 * 
pC€ffs
,

94 
q15_t
 * 
pSèã
,

95 
uöt32_t
 
blockSize
)

97 
¨m_°©us
 
°©us
;

100 #i‚de‡
ARM_MATH_CM0_FAMILY


105 if(
numT≠s
 & 0x1u)

107 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

112 
S
->
numT≠s
 =ÇumTaps;

115 
S
->
pC€ffs
 =ÖCoeffs;

118 
	`mem£t
(
pSèã
, 0, (
numT≠s
 + (
blockSize
)Ë* (
q15_t
));

121 
S
->
pSèã
 =ÖState;

123 
°©us
 = 
ARM_MATH_SUCCESS
;

126  (
°©us
);

133 
S
->
numT≠s
 =ÇumTaps;

136 
S
->
pC€ffs
 =ÖCoeffs;

139 
	`mem£t
(
pSèã
, 0, (
numT≠s
 + (
blockSize
 - 1u)Ë* (
q15_t
));

142 
S
->
pSèã
 =ÖState;

144 
°©us
 = 
ARM_MATH_SUCCESS
;

146  (
°©us
);

150 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_init_q31.c

41 
	~"¨m_m©h.h
"

73 
	$¨m_fú_öô_q31
(

74 
¨m_fú_ö°™˚_q31
 * 
S
,

75 
uöt16_t
 
numT≠s
,

76 
q31_t
 * 
pC€ffs
,

77 
q31_t
 * 
pSèã
,

78 
uöt32_t
 
blockSize
)

81 
S
->
numT≠s
 =ÇumTaps;

84 
S
->
pC€ffs
 =ÖCoeffs;

87 
	`mem£t
(
pSèã
, 0, (
blockSize
 + ((
uöt32_t
Ë
numT≠s
 - 1u)Ë* (
q31_t
));

90 
S
->
pSèã
 =ÖState;

92 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_init_q7.c

41 
	~"¨m_m©h.h
"

70 
	$¨m_fú_öô_q7
(

71 
¨m_fú_ö°™˚_q7
 * 
S
,

72 
uöt16_t
 
numT≠s
,

73 
q7_t
 * 
pC€ffs
,

74 
q7_t
 * 
pSèã
,

75 
uöt32_t
 
blockSize
)

79 
S
->
numT≠s
 =ÇumTaps;

82 
S
->
pC€ffs
 =ÖCoeffs;

85 
	`mem£t
(
pSèã
, 0, (
numT≠s
 + (
blockSize
 - 1u)Ë* (
q7_t
));

88 
S
->
pSèã
 =ÖState;

90 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_interpolate_f32.c

41 
	~"¨m_m©h.h
"

144 #i‚de‡
ARM_MATH_CM0_FAMILY


148 
	$¨m_fú_öãΩﬁ©e_f32
(

149 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

150 
Êﬂt32_t
 * 
pSrc
,

151 
Êﬂt32_t
 * 
pD°
,

152 
uöt32_t
 
blockSize
)

154 
Êﬂt32_t
 *
pSèã
 = 
S
->pState;

155 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

156 
Êﬂt32_t
 *
pSèãCu∫t
;

157 
Êﬂt32_t
 *
±r1
, *
±r2
;

158 
Êﬂt32_t
 
sum0
;

159 
Êﬂt32_t
 
x0
, 
c0
;

160 
uöt32_t
 
i
, 
blkC¡
, 
j
;

161 
uöt16_t
 
pha£Lí
 = 
S
->
pha£Lígth
, 
èpC¡
;

162 
Êﬂt32_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

163 
Êﬂt32_t
 
x1
, 
x2
, 
x3
;

164 
uöt32_t
 
blkC¡N4
;

165 
Êﬂt32_t
 
c1
, 
c2
, 
c3
;

169 
pSèãCu∫t
 = 
S
->
pSèã
 + (
pha£Lí
 - 1u);

172 
blkC¡
 = 
blockSize
 / 4;

173 
blkC¡N4
 = 
blockSize
 - (4 * 
blkC¡
);

176 
blkC¡
 > 0u)

179 *
pSèãCu∫t
++ = *
pSrc
++;

180 *
pSèãCu∫t
++ = *
pSrc
++;

181 *
pSèãCu∫t
++ = *
pSrc
++;

182 *
pSèãCu∫t
++ = *
pSrc
++;

185 
j
 = 1u;

188 
i
 = (
S
->
L
);

190 
i
 > 0u)

193 
acc0
 = 0.0f;

194 
acc1
 = 0.0f;

195 
acc2
 = 0.0f;

196 
acc3
 = 0.0f;

199 
±r1
 = 
pSèã
;

202 
±r2
 = 
pC€ffs
 + (
S
->
L
 - 
j
);

206 
èpC¡
 = 
pha£Lí
 >> 2u;

208 
x0
 = *(
±r1
++);

209 
x1
 = *(
±r1
++);

210 
x2
 = *(
±r1
++);

212 
èpC¡
 > 0u)

216 
x3
 = *(
±r1
++);

219 
c0
 = *(
±r2
);

222 
acc0
 +
x0
 * 
c0
;

223 
acc1
 +
x1
 * 
c0
;

224 
acc2
 +
x2
 * 
c0
;

225 
acc3
 +
x3
 * 
c0
;

228 
c1
 = *(
±r2
 + 
S
->
L
);

231 
x0
 = *(
±r1
++);

234 
acc0
 +
x1
 * 
c1
;

235 
acc1
 +
x2
 * 
c1
;

236 
acc2
 +
x3
 * 
c1
;

237 
acc3
 +
x0
 * 
c1
;

240 
c2
 = *(
±r2
 + 
S
->
L
 * 2);

243 
x1
 = *(
±r1
++);

246 
acc0
 +
x2
 * 
c2
;

247 
acc1
 +
x3
 * 
c2
;

248 
acc2
 +
x0
 * 
c2
;

249 
acc3
 +
x1
 * 
c2
;

252 
c3
 = *(
±r2
 + 
S
->
L
 * 3);

255 
x2
 = *(
±r1
++);

258 
acc0
 +
x3
 * 
c3
;

259 
acc1
 +
x0
 * 
c3
;

260 
acc2
 +
x1
 * 
c3
;

261 
acc3
 +
x2
 * 
c3
;

267 
±r2
 +4 * 
S
->
L
;

270 
èpC¡
--;

274 
èpC¡
 = 
pha£Lí
 % 0x4u;

276 
èpC¡
 > 0u)

280 
x3
 = *(
±r1
++);

283 
c0
 = *(
±r2
);

286 
acc0
 +
x0
 * 
c0
;

287 
acc1
 +
x1
 * 
c0
;

288 
acc2
 +
x2
 * 
c0
;

289 
acc3
 +
x3
 * 
c0
;

292 
±r2
 +
S
->
L
;

295 
x0
 = 
x1
;

296 
x1
 = 
x2
;

297 
x2
 = 
x3
;

300 
èpC¡
--;

304 *
pD°
 = 
acc0
;

305 *(
pD°
 + 
S
->
L
Ë
acc1
;

306 *(
pD°
 + 2 * 
S
->
L
Ë
acc2
;

307 *(
pD°
 + 3 * 
S
->
L
Ë
acc3
;

309 
pD°
++;

312 
j
++;

315 
i
--;

320 
pSèã
 =ÖState + 4;

322 
pD°
 +
S
->
L
 * 3;

325 
blkC¡
--;

331 
blkC¡N4
 > 0u)

334 *
pSèãCu∫t
++ = *
pSrc
++;

337 
j
 = 1u;

340 
i
 = 
S
->
L
;

341 
i
 > 0u)

344 
sum0
 = 0.0f;

347 
±r1
 = 
pSèã
;

350 
±r2
 = 
pC€ffs
 + (
S
->
L
 - 
j
);

354 
èpC¡
 = 
pha£Lí
 >> 2u;

355 
èpC¡
 > 0u)

359 
c0
 = *(
±r2
);

364 
±r2
 +
S
->
L
;

367 
x0
 = *(
±r1
++);

370 
sum0
 +
x0
 * 
c0
;

373 
c0
 = *(
±r2
);

376 
±r2
 +
S
->
L
;

379 
x0
 = *(
±r1
++);

382 
sum0
 +
x0
 * 
c0
;

385 
c0
 = *(
±r2
);

388 
±r2
 +
S
->
L
;

391 
x0
 = *(
±r1
++);

394 
sum0
 +
x0
 * 
c0
;

397 
c0
 = *(
±r2
);

400 
±r2
 +
S
->
L
;

403 
x0
 = *(
±r1
++);

406 
sum0
 +
x0
 * 
c0
;

409 
èpC¡
--;

413 
èpC¡
 = 
pha£Lí
 % 0x4u;

415 
èpC¡
 > 0u)

418 
sum0
 +*(
±r1
++Ë* (*
±r2
);

421 
±r2
 +
S
->
L
;

424 
èpC¡
--;

428 *
pD°
++ = 
sum0
;

431 
j
++;

434 
i
--;

439 
pSèã
 =ÖState + 1;

442 
blkC¡N4
--;

450 
pSèãCu∫t
 = 
S
->
pSèã
;

452 
èpC¡
 = (
pha£Lí
 - 1u) >> 2u;

455 
èpC¡
 > 0u)

457 *
pSèãCu∫t
++ = *
pSèã
++;

458 *
pSèãCu∫t
++ = *
pSèã
++;

459 *
pSèãCu∫t
++ = *
pSèã
++;

460 *
pSèãCu∫t
++ = *
pSèã
++;

463 
èpC¡
--;

466 
èpC¡
 = (
pha£Lí
 - 1u) % 0x04u;

469 
èpC¡
 > 0u)

471 *
pSèãCu∫t
++ = *
pSèã
++;

474 
èpC¡
--;

476 
	}
}

482 
	$¨m_fú_öãΩﬁ©e_f32
(

483 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

484 
Êﬂt32_t
 * 
pSrc
,

485 
Êﬂt32_t
 * 
pD°
,

486 
uöt32_t
 
blockSize
)

488 
Êﬂt32_t
 *
pSèã
 = 
S
->pState;

489 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

490 
Êﬂt32_t
 *
pSèãCu∫t
;

491 
Êﬂt32_t
 *
±r1
, *
±r2
;

494 
Êﬂt32_t
 
sum
;

495 
uöt32_t
 
i
, 
blkC¡
;

496 
uöt16_t
 
pha£Lí
 = 
S
->
pha£Lígth
, 
èpC¡
;

501 
pSèãCu∫t
 = 
S
->
pSèã
 + (
pha£Lí
 - 1u);

504 
blkC¡
 = 
blockSize
;

507 
blkC¡
 > 0u)

510 *
pSèãCu∫t
++ = *
pSrc
++;

513 
i
 = 
S
->
L
;

515 
i
 > 0u)

518 
sum
 = 0.0f;

521 
±r1
 = 
pSèã
;

524 
±r2
 = 
pC€ffs
 + (
i
 - 1u);

527 
èpC¡
 = 
pha£Lí
;

529 
èpC¡
 > 0u)

532 
sum
 +*
±r1
++ * *
±r2
;

535 
±r2
 +
S
->
L
;

538 
èpC¡
--;

542 *
pD°
++ = 
sum
;

545 
i
--;

550 
pSèã
 =ÖState + 1;

553 
blkC¡
--;

561 
pSèãCu∫t
 = 
S
->
pSèã
;

563 
èpC¡
 = 
pha£Lí
 - 1u;

565 
èpC¡
 > 0u)

567 *
pSèãCu∫t
++ = *
pSèã
++;

570 
èpC¡
--;

573 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_interpolate_init_f32.c

41 
	~"¨m_m©h.h
"

76 
¨m_°©us
 
	$¨m_fú_öãΩﬁ©e_öô_f32
(

77 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

78 
uöt8_t
 
L
,

79 
uöt16_t
 
numT≠s
,

80 
Êﬂt32_t
 * 
pC€ffs
,

81 
Êﬂt32_t
 * 
pSèã
,

82 
uöt32_t
 
blockSize
)

84 
¨m_°©us
 
°©us
;

87 if((
numT≠s
 % 
L
) != 0u)

90 
°©us
 = 
ARM_MATH_LENGTH_ERROR
;

96 
S
->
pC€ffs
 =ÖCoeffs;

99 
S
->
L
 = L;

102 
S
->
pha£Lígth
 = 
numT≠s
 / 
L
;

105 
	`mem£t
(
pSèã
, 0,

106 (
blockSize
 +

107 ((
uöt32_t
Ë
S
->
pha£Lígth
 - 1u)Ë* (
Êﬂt32_t
));

110 
S
->
pSèã
 =ÖState;

112 
°©us
 = 
ARM_MATH_SUCCESS
;

115  (
°©us
);

117 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_interpolate_init_q15.c

41 
	~"¨m_m©h.h
"

76 
¨m_°©us
 
	$¨m_fú_öãΩﬁ©e_öô_q15
(

77 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

78 
uöt8_t
 
L
,

79 
uöt16_t
 
numT≠s
,

80 
q15_t
 * 
pC€ffs
,

81 
q15_t
 * 
pSèã
,

82 
uöt32_t
 
blockSize
)

84 
¨m_°©us
 
°©us
;

87 if((
numT≠s
 % 
L
) != 0u)

90 
°©us
 = 
ARM_MATH_LENGTH_ERROR
;

96 
S
->
pC€ffs
 =ÖCoeffs;

99 
S
->
L
 = L;

102 
S
->
pha£Lígth
 = 
numT≠s
 / 
L
;

105 
	`mem£t
(
pSèã
, 0,

106 (
blockSize
 + ((
uöt32_t
Ë
S
->
pha£Lígth
 - 1u)Ë* (
q15_t
));

109 
S
->
pSèã
 =ÖState;

111 
°©us
 = 
ARM_MATH_SUCCESS
;

114  (
°©us
);

116 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_interpolate_init_q31.c

41 
	~"¨m_m©h.h
"

77 
¨m_°©us
 
	$¨m_fú_öãΩﬁ©e_öô_q31
(

78 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

79 
uöt8_t
 
L
,

80 
uöt16_t
 
numT≠s
,

81 
q31_t
 * 
pC€ffs
,

82 
q31_t
 * 
pSèã
,

83 
uöt32_t
 
blockSize
)

85 
¨m_°©us
 
°©us
;

88 if((
numT≠s
 % 
L
) != 0u)

91 
°©us
 = 
ARM_MATH_LENGTH_ERROR
;

97 
S
->
pC€ffs
 =ÖCoeffs;

100 
S
->
L
 = L;

103 
S
->
pha£Lígth
 = 
numT≠s
 / 
L
;

106 
	`mem£t
(
pSèã
, 0,

107 (
blockSize
 + ((
uöt32_t
Ë
S
->
pha£Lígth
 - 1u)Ë* (
q31_t
));

110 
S
->
pSèã
 =ÖState;

112 
°©us
 = 
ARM_MATH_SUCCESS
;

115  (
°©us
);

117 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_interpolate_q15.c

41 
	~"¨m_m©h.h
"

70 #i‚de‡
ARM_MATH_CM0_FAMILY


74 
	$¨m_fú_öãΩﬁ©e_q15
(

75 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

76 
q15_t
 * 
pSrc
,

77 
q15_t
 * 
pD°
,

78 
uöt32_t
 
blockSize
)

80 
q15_t
 *
pSèã
 = 
S
->pState;

81 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

82 
q15_t
 *
pSèãCu∫t
;

83 
q15_t
 *
±r1
, *
±r2
;

84 
q63_t
 
sum0
;

85 
q15_t
 
x0
, 
c0
;

86 
uöt32_t
 
i
, 
blkC¡
, 
j
, 
èpC¡
;

87 
uöt16_t
 
pha£Lí
 = 
S
->
pha£Lígth
;

88 
uöt32_t
 
blkC¡N2
;

89 
q63_t
 
acc0
, 
acc1
;

90 
q15_t
 
x1
;

94 
pSèãCu∫t
 = 
S
->
pSèã
 + ((
q31_t
Ë
pha£Lí
 - 1);

97 
blkC¡
 = 
blockSize
 / 2;

98 
blkC¡N2
 = 
blockSize
 - (2 * 
blkC¡
);

101 
blkC¡
 > 0u)

104 *
pSèãCu∫t
++ = *
pSrc
++;

105 *
pSèãCu∫t
++ = *
pSrc
++;

108 
j
 = 1u;

111 
i
 = (
S
->
L
);

113 
i
 > 0u)

116 
acc0
 = 0;

117 
acc1
 = 0;

120 
±r1
 = 
pSèã
;

123 
±r2
 = 
pC€ffs
 + (
S
->
L
 - 
j
);

127 
èpC¡
 = 
pha£Lí
 >> 2u;

129 
x0
 = *(
±r1
++);

131 
èpC¡
 > 0u)

135 
x1
 = *(
±r1
++);

138 
c0
 = *(
±r2
);

141 
acc0
 +(
q63_t
Ë
x0
 *
c0
;

142 
acc1
 +(
q63_t
Ë
x1
 *
c0
;

146 
c0
 = *(
±r2
 + 
S
->
L
);

149 
x0
 = *(
±r1
++);

152 
acc0
 +(
q63_t
Ë
x1
 *
c0
;

153 
acc1
 +(
q63_t
Ë
x0
 *
c0
;

157 
c0
 = *(
±r2
 + 
S
->
L
 * 2);

160 
x1
 = *(
±r1
++);

163 
acc0
 +(
q63_t
Ë
x0
 *
c0
;

164 
acc1
 +(
q63_t
Ë
x1
 *
c0
;

167 
c0
 = *(
±r2
 + 
S
->
L
 * 3);

170 
x0
 = *(
±r1
++);

173 
acc0
 +(
q63_t
Ë
x1
 *
c0
;

174 
acc1
 +(
q63_t
Ë
x0
 *
c0
;

180 
±r2
 +4 * 
S
->
L
;

183 
èpC¡
--;

187 
èpC¡
 = 
pha£Lí
 % 0x4u;

189 
èpC¡
 > 0u)

193 
x1
 = *(
±r1
++);

196 
c0
 = *(
±r2
);

199 
acc0
 +(
q63_t
Ë
x0
 *
c0
;

200 
acc1
 +(
q63_t
Ë
x1
 *
c0
;

203 
±r2
 +
S
->
L
;

206 
x0
 = 
x1
;

209 
èpC¡
--;

213 *
pD°
 = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

214 *(
pD°
 + 
S
->
L
Ë(
q15_t
Ë(
	`__SSAT
((
acc1
 >> 15), 16));

216 
pD°
++;

219 
j
++;

222 
i
--;

227 
pSèã
 =ÖState + 2;

229 
pD°
 +
S
->
L
;

232 
blkC¡
--;

237 
blkC¡
 = 
blkC¡N2
;

240 
blkC¡
 > 0u)

243 *
pSèãCu∫t
++ = *
pSrc
++;

246 
j
 = 1u;

249 
i
 = 
S
->
L
;

250 
i
 > 0u)

253 
sum0
 = 0;

256 
±r1
 = 
pSèã
;

259 
±r2
 = 
pC€ffs
 + (
S
->
L
 - 
j
);

263 
èpC¡
 = 
pha£Lí
 >> 2;

264 
èpC¡
 > 0u)

268 
c0
 = *(
±r2
);

273 
±r2
 +
S
->
L
;

276 
x0
 = *(
±r1
++);

279 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

282 
c0
 = *(
±r2
);

285 
±r2
 +
S
->
L
;

288 
x0
 = *(
±r1
++);

291 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

294 
c0
 = *(
±r2
);

297 
±r2
 +
S
->
L
;

300 
x0
 = *(
±r1
++);

303 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

306 
c0
 = *(
±r2
);

309 
±r2
 +
S
->
L
;

312 
x0
 = *(
±r1
++);

315 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

318 
èpC¡
--;

322 
èpC¡
 = 
pha£Lí
 & 0x3u;

324 
èpC¡
 > 0u)

327 
c0
 = *(
±r2
);

330 
±r2
 +
S
->
L
;

333 
x0
 = *(
±r1
++);

336 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

339 
èpC¡
--;

343 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
sum0
 >> 15), 16));

345 
j
++;

348 
i
--;

353 
pSèã
 =ÖState + 1;

356 
blkC¡
--;

365 
pSèãCu∫t
 = 
S
->
pSèã
;

367 
i
 = ((
uöt32_t
Ë
pha£Lí
 - 1u) >> 2u;

370 
i
 > 0u)

372 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


374 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

375 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

379 *
pSèãCu∫t
++ = *
pSèã
++;

380 *
pSèãCu∫t
++ = *
pSèã
++;

381 *
pSèãCu∫t
++ = *
pSèã
++;

382 *
pSèãCu∫t
++ = *
pSèã
++;

387 
i
--;

390 
i
 = ((
uöt32_t
Ë
pha£Lí
 - 1u) % 0x04u;

392 
i
 > 0u)

394 *
pSèãCu∫t
++ = *
pSèã
++;

397 
i
--;

399 
	}
}

405 
	$¨m_fú_öãΩﬁ©e_q15
(

406 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

407 
q15_t
 * 
pSrc
,

408 
q15_t
 * 
pD°
,

409 
uöt32_t
 
blockSize
)

411 
q15_t
 *
pSèã
 = 
S
->pState;

412 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

413 
q15_t
 *
pSèãCu∫t
;

414 
q15_t
 *
±r1
, *
±r2
;

415 
q63_t
 
sum
;

416 
q15_t
 
x0
, 
c0
;

417 
uöt32_t
 
i
, 
blkC¡
, 
èpC¡
;

418 
uöt16_t
 
pha£Lí
 = 
S
->
pha£Lígth
;

423 
pSèãCu∫t
 = 
S
->
pSèã
 + (
pha£Lí
 - 1u);

426 
blkC¡
 = 
blockSize
;

429 
blkC¡
 > 0u)

432 *
pSèãCu∫t
++ = *
pSrc
++;

435 
i
 = 
S
->
L
;

437 
i
 > 0u)

440 
sum
 = 0;

443 
±r1
 = 
pSèã
;

446 
±r2
 = 
pC€ffs
 + (
i
 - 1u);

449 
èpC¡
 = (
uöt32_t
Ë
pha£Lí
;

451 
èpC¡
 > 0u)

454 
c0
 = *
±r2
;

457 
±r2
 +
S
->
L
;

460 
x0
 = *
±r1
++;

463 
sum
 +((
q31_t
Ë
x0
 * 
c0
);

466 
èpC¡
--;

470 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
sum
 >> 15), 16));

473 
i
--;

478 
pSèã
 =ÖState + 1;

481 
blkC¡
--;

489 
pSèãCu∫t
 = 
S
->
pSèã
;

491 
i
 = (
uöt32_t
Ë
pha£Lí
 - 1u;

493 
i
 > 0u)

495 *
pSèãCu∫t
++ = *
pSèã
++;

498 
i
--;

501 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_interpolate_q31.c

41 
	~"¨m_m©h.h
"

70 #i‚de‡
ARM_MATH_CM0_FAMILY


74 
	$¨m_fú_öãΩﬁ©e_q31
(

75 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

76 
q31_t
 * 
pSrc
,

77 
q31_t
 * 
pD°
,

78 
uöt32_t
 
blockSize
)

80 
q31_t
 *
pSèã
 = 
S
->pState;

81 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

82 
q31_t
 *
pSèãCu∫t
;

83 
q31_t
 *
±r1
, *
±r2
;

84 
q63_t
 
sum0
;

85 
q31_t
 
x0
, 
c0
;

86 
uöt32_t
 
i
, 
blkC¡
, 
j
;

87 
uöt16_t
 
pha£Lí
 = 
S
->
pha£Lígth
, 
èpC¡
;

89 
uöt32_t
 
blkC¡N2
;

90 
q63_t
 
acc0
, 
acc1
;

91 
q31_t
 
x1
;

95 
pSèãCu∫t
 = 
S
->
pSèã
 + ((
q31_t
Ë
pha£Lí
 - 1);

98 
blkC¡
 = 
blockSize
 / 2;

99 
blkC¡N2
 = 
blockSize
 - (2 * 
blkC¡
);

102 
blkC¡
 > 0u)

105 *
pSèãCu∫t
++ = *
pSrc
++;

106 *
pSèãCu∫t
++ = *
pSrc
++;

109 
j
 = 1u;

112 
i
 = (
S
->
L
);

114 
i
 > 0u)

117 
acc0
 = 0;

118 
acc1
 = 0;

121 
±r1
 = 
pSèã
;

124 
±r2
 = 
pC€ffs
 + (
S
->
L
 - 
j
);

128 
èpC¡
 = 
pha£Lí
 >> 2u;

130 
x0
 = *(
±r1
++);

132 
èpC¡
 > 0u)

136 
x1
 = *(
±r1
++);

139 
c0
 = *(
±r2
);

142 
acc0
 +(
q63_t
Ë
x0
 *
c0
;

143 
acc1
 +(
q63_t
Ë
x1
 *
c0
;

147 
c0
 = *(
±r2
 + 
S
->
L
);

150 
x0
 = *(
±r1
++);

153 
acc0
 +(
q63_t
Ë
x1
 *
c0
;

154 
acc1
 +(
q63_t
Ë
x0
 *
c0
;

158 
c0
 = *(
±r2
 + 
S
->
L
 * 2);

161 
x1
 = *(
±r1
++);

164 
acc0
 +(
q63_t
Ë
x0
 *
c0
;

165 
acc1
 +(
q63_t
Ë
x1
 *
c0
;

168 
c0
 = *(
±r2
 + 
S
->
L
 * 3);

171 
x0
 = *(
±r1
++);

174 
acc0
 +(
q63_t
Ë
x1
 *
c0
;

175 
acc1
 +(
q63_t
Ë
x0
 *
c0
;

181 
±r2
 +4 * 
S
->
L
;

184 
èpC¡
--;

188 
èpC¡
 = 
pha£Lí
 % 0x4u;

190 
èpC¡
 > 0u)

194 
x1
 = *(
±r1
++);

197 
c0
 = *(
±r2
);

200 
acc0
 +(
q63_t
Ë
x0
 *
c0
;

201 
acc1
 +(
q63_t
Ë
x1
 *
c0
;

204 
±r2
 +
S
->
L
;

207 
x0
 = 
x1
;

210 
èpC¡
--;

214 *
pD°
 = (
q31_t
Ë(
acc0
 >> 31);

215 *(
pD°
 + 
S
->
L
Ë(
q31_t
Ë(
acc1
 >> 31);

218 
pD°
++;

221 
j
++;

224 
i
--;

229 
pSèã
 =ÖState + 2;

231 
pD°
 +
S
->
L
;

234 
blkC¡
--;

239 
blkC¡
 = 
blkC¡N2
;

242 
blkC¡
 > 0u)

245 *
pSèãCu∫t
++ = *
pSrc
++;

248 
j
 = 1u;

251 
i
 = 
S
->
L
;

252 
i
 > 0u)

255 
sum0
 = 0;

258 
±r1
 = 
pSèã
;

261 
±r2
 = 
pC€ffs
 + (
S
->
L
 - 
j
);

265 
èpC¡
 = 
pha£Lí
 >> 2;

266 
èpC¡
 > 0u)

270 
c0
 = *(
±r2
);

275 
±r2
 +
S
->
L
;

278 
x0
 = *(
±r1
++);

281 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

284 
c0
 = *(
±r2
);

287 
±r2
 +
S
->
L
;

290 
x0
 = *(
±r1
++);

293 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

296 
c0
 = *(
±r2
);

299 
±r2
 +
S
->
L
;

302 
x0
 = *(
±r1
++);

305 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

308 
c0
 = *(
±r2
);

311 
±r2
 +
S
->
L
;

314 
x0
 = *(
±r1
++);

317 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

320 
èpC¡
--;

324 
èpC¡
 = 
pha£Lí
 & 0x3u;

326 
èpC¡
 > 0u)

329 
c0
 = *(
±r2
);

332 
±r2
 +
S
->
L
;

335 
x0
 = *(
±r1
++);

338 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

341 
èpC¡
--;

345 *
pD°
++ = (
q31_t
Ë(
sum0
 >> 31);

348 
j
++;

351 
i
--;

356 
pSèã
 =ÖState + 1;

359 
blkC¡
--;

367 
pSèãCu∫t
 = 
S
->
pSèã
;

369 
èpC¡
 = (
pha£Lí
 - 1u) >> 2u;

372 
èpC¡
 > 0u)

374 *
pSèãCu∫t
++ = *
pSèã
++;

375 *
pSèãCu∫t
++ = *
pSèã
++;

376 *
pSèãCu∫t
++ = *
pSèã
++;

377 *
pSèãCu∫t
++ = *
pSèã
++;

380 
èpC¡
--;

383 
èpC¡
 = (
pha£Lí
 - 1u) % 0x04u;

386 
èpC¡
 > 0u)

388 *
pSèãCu∫t
++ = *
pSèã
++;

391 
èpC¡
--;

394 
	}
}

399 
	$¨m_fú_öãΩﬁ©e_q31
(

400 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

401 
q31_t
 * 
pSrc
,

402 
q31_t
 * 
pD°
,

403 
uöt32_t
 
blockSize
)

405 
q31_t
 *
pSèã
 = 
S
->pState;

406 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

407 
q31_t
 *
pSèãCu∫t
;

408 
q31_t
 *
±r1
, *
±r2
;

412 
q63_t
 
sum
;

413 
q31_t
 
x0
, 
c0
;

414 
uöt32_t
 
i
, 
blkC¡
;

415 
uöt16_t
 
pha£Lí
 = 
S
->
pha£Lígth
, 
èpC¡
;

420 
pSèãCu∫t
 = 
S
->
pSèã
 + ((
q31_t
Ë
pha£Lí
 - 1);

423 
blkC¡
 = 
blockSize
;

426 
blkC¡
 > 0u)

429 *
pSèãCu∫t
++ = *
pSrc
++;

432 
i
 = 
S
->
L
;

434 
i
 > 0u)

437 
sum
 = 0;

440 
±r1
 = 
pSèã
;

443 
±r2
 = 
pC€ffs
 + (
i
 - 1u);

445 
èpC¡
 = 
pha£Lí
;

447 
èpC¡
 > 0u)

450 
c0
 = *(
±r2
);

453 
±r2
 +
S
->
L
;

456 
x0
 = *
±r1
++;

459 
sum
 +(
q63_t
Ë
x0
 *
c0
;

462 
èpC¡
--;

466 *
pD°
++ = (
q31_t
Ë(
sum
 >> 31);

469 
i
--;

474 
pSèã
 =ÖState + 1;

477 
blkC¡
--;

485 
pSèãCu∫t
 = 
S
->
pSèã
;

487 
èpC¡
 = 
pha£Lí
 - 1u;

490 
èpC¡
 > 0u)

492 *
pSèãCu∫t
++ = *
pSèã
++;

495 
èpC¡
--;

498 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_lattice_f32.c

41 
	~"¨m_m©h.h
"

131 
	$¨m_fú_œâi˚_f32
(

132 c⁄° 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

133 
Êﬂt32_t
 * 
pSrc
,

134 
Êﬂt32_t
 * 
pD°
,

135 
uöt32_t
 
blockSize
)

137 
Êﬂt32_t
 *
pSèã
;

138 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

139 
Êﬂt32_t
 *
px
;

140 
Êﬂt32_t
 *
pk
;

143 #i‚de‡
ARM_MATH_CM0_FAMILY


147 
Êﬂt32_t
 
fcuº1
, 
‚ext1
, 
gcuº1
, 
g√xt1
;

148 
Êﬂt32_t
 
fcuº2
, 
‚ext2
, 
g√xt2
;

149 
Êﬂt32_t
 
fcuº3
, 
‚ext3
, 
g√xt3
;

150 
Êﬂt32_t
 
fcuº4
, 
‚ext4
, 
g√xt4
;

151 
uöt32_t
 
numSèges
 = 
S
->numStages;

152 
uöt32_t
 
blkC¡
, 
°ageC¡
;

154 
gcuº1
 = 0.0f;

155 
pSèã
 = &
S
->pState[0];

157 
blkC¡
 = 
blockSize
 >> 2;

161 
blkC¡
 > 0u)

166 
fcuº1
 = *
pSrc
++;

167 
fcuº2
 = *
pSrc
++;

170 
pk
 = (
pC€ffs
);

173 
px
 = 
pSèã
;

176 
gcuº1
 = *
px
;

180 
‚ext1
 = 
fcuº1
 + ((*
pk
Ë* 
gcuº1
);

182 
g√xt1
 = (
fcuº1
 * (*
pk
)Ë+ 
gcuº1
;

186 
‚ext2
 = 
fcuº2
 + ((*
pk
Ë* 
fcuº1
);

187 
g√xt2
 = (
fcuº2
 * (*
pk
)Ë+ 
fcuº1
;

191 
fcuº3
 = *
pSrc
++;

192 
fcuº4
 = *
pSrc
++;

196 *
px
++ = 
fcuº4
;

199 
‚ext3
 = 
fcuº3
 + ((*
pk
Ë* 
fcuº2
);

200 
g√xt3
 = (
fcuº3
 * (*
pk
)Ë+ 
fcuº2
;

203 
‚ext4
 = 
fcuº4
 + ((*
pk
Ë* 
fcuº3
);

204 
g√xt4
 = (
fcuº4
 * (*
pk
++)Ë+ 
fcuº3
;

207 
fcuº1
 = 
‚ext1
;

208 
fcuº2
 = 
‚ext2
;

209 
fcuº3
 = 
‚ext3
;

210 
fcuº4
 = 
‚ext4
;

213 
°ageC¡
 = (
numSèges
 - 1u) >> 2u;

219 
°ageC¡
 > 0u)

222 
gcuº1
 = *
px
;

225 *
px
++ = 
g√xt4
;

230 
‚ext1
 = 
fcuº1
 + ((*
pk
Ë* 
gcuº1
);

233 
‚ext2
 = 
fcuº2
 + ((*
pk
Ë* 
g√xt1
);

235 
‚ext3
 = 
fcuº3
 + ((*
pk
Ë* 
g√xt2
);

237 
‚ext4
 = 
fcuº4
 + ((*
pk
Ë* 
g√xt3
);

241 
g√xt4
 = (
fcuº4
 * (*
pk
)Ë+ 
g√xt3
;

242 
g√xt3
 = (
fcuº3
 * (*
pk
)Ë+ 
g√xt2
;

243 
g√xt2
 = (
fcuº2
 * (*
pk
)Ë+ 
g√xt1
;

244 
g√xt1
 = (
fcuº1
 * (*
pk
++)Ë+ 
gcuº1
;

248 
gcuº1
 = *
px
;

251 *
px
++ = 
g√xt4
;

256 
fcuº1
 = 
‚ext1
 + ((*
pk
Ë* 
gcuº1
);

258 
fcuº2
 = 
‚ext2
 + ((*
pk
Ë* 
g√xt1
);

260 
fcuº3
 = 
‚ext3
 + ((*
pk
Ë* 
g√xt2
);

262 
fcuº4
 = 
‚ext4
 + ((*
pk
Ë* 
g√xt3
);

266 
g√xt4
 = (
‚ext4
 * (*
pk
)Ë+ 
g√xt3
;

267 
g√xt3
 = (
‚ext3
 * (*
pk
)Ë+ 
g√xt2
;

268 
g√xt2
 = (
‚ext2
 * (*
pk
)Ë+ 
g√xt1
;

269 
g√xt1
 = (
‚ext1
 * (*
pk
++)Ë+ 
gcuº1
;

273 
gcuº1
 = *
px
;

276 *
px
++ = 
g√xt4
;

281 
‚ext1
 = 
fcuº1
 + ((*
pk
Ë* 
gcuº1
);

284 
‚ext2
 = 
fcuº2
 + ((*
pk
Ë* 
g√xt1
);

286 
‚ext3
 = 
fcuº3
 + ((*
pk
Ë* 
g√xt2
);

288 
‚ext4
 = 
fcuº4
 + ((*
pk
Ë* 
g√xt3
);

292 
g√xt4
 = (
fcuº4
 * (*
pk
)Ë+ 
g√xt3
;

293 
g√xt3
 = (
fcuº3
 * (*
pk
)Ë+ 
g√xt2
;

294 
g√xt2
 = (
fcuº2
 * (*
pk
)Ë+ 
g√xt1
;

295 
g√xt1
 = (
fcuº1
 * (*
pk
++)Ë+ 
gcuº1
;

298 
gcuº1
 = *
px
;

301 *
px
++ = 
g√xt4
;

306 
fcuº1
 = 
‚ext1
 + ((*
pk
Ë* 
gcuº1
);

308 
fcuº2
 = 
‚ext2
 + ((*
pk
Ë* 
g√xt1
);

310 
fcuº3
 = 
‚ext3
 + ((*
pk
Ë* 
g√xt2
);

312 
fcuº4
 = 
‚ext4
 + ((*
pk
Ë* 
g√xt3
);

316 
g√xt4
 = (
‚ext4
 * (*
pk
)Ë+ 
g√xt3
;

317 
g√xt3
 = (
‚ext3
 * (*
pk
)Ë+ 
g√xt2
;

318 
g√xt2
 = (
‚ext2
 * (*
pk
)Ë+ 
g√xt1
;

319 
g√xt1
 = (
‚ext1
 * (*
pk
++)Ë+ 
gcuº1
;

321 
°ageC¡
--;

325 
°ageC¡
 = (
numSèges
 - 1u) % 0x4u;

327 
°ageC¡
 > 0u)

329 
gcuº1
 = *
px
;

332 *
px
++ = 
g√xt4
;

335 
‚ext1
 = 
fcuº1
 + ((*
pk
Ë* 
gcuº1
);

336 
‚ext2
 = 
fcuº2
 + ((*
pk
Ë* 
g√xt1
);

337 
‚ext3
 = 
fcuº3
 + ((*
pk
Ë* 
g√xt2
);

338 
‚ext4
 = 
fcuº4
 + ((*
pk
Ë* 
g√xt3
);

341 
g√xt4
 = (
fcuº4
 * (*
pk
)Ë+ 
g√xt3
;

342 
g√xt3
 = (
fcuº3
 * (*
pk
)Ë+ 
g√xt2
;

343 
g√xt2
 = (
fcuº2
 * (*
pk
)Ë+ 
g√xt1
;

344 
g√xt1
 = (
fcuº1
 * (*
pk
++)Ë+ 
gcuº1
;

347 
fcuº1
 = 
‚ext1
;

348 
fcuº2
 = 
‚ext2
;

349 
fcuº3
 = 
‚ext3
;

350 
fcuº4
 = 
‚ext4
;

352 
°ageC¡
--;

358 *
pD°
++ = 
fcuº1
;

359 *
pD°
++ = 
fcuº2
;

360 *
pD°
++ = 
fcuº3
;

361 *
pD°
++ = 
fcuº4
;

363 
blkC¡
--;

368 
blkC¡
 = 
blockSize
 % 0x4u;

370 
blkC¡
 > 0u)

373 
fcuº1
 = *
pSrc
++;

376 
pk
 = (
pC€ffs
);

379 
px
 = 
pSèã
;

382 
gcuº1
 = *
px
;

386 
‚ext1
 = 
fcuº1
 + ((*
pk
Ë* 
gcuº1
);

388 
g√xt1
 = (
fcuº1
 * (*
pk
++)Ë+ 
gcuº1
;

391 *
px
++ = 
fcuº1
;

395 
fcuº1
 = 
‚ext1
;

397 
°ageC¡
 = (
numSèges
 - 1u);

400 
°ageC¡
 > 0u)

403 
gcuº1
 = *
px
;

406 *
px
++ = 
g√xt1
;

410 
‚ext1
 = 
fcuº1
 + ((*
pk
Ë* 
gcuº1
);

412 
g√xt1
 = (
fcuº1
 * (*
pk
++)Ë+ 
gcuº1
;

416 
fcuº1
 = 
‚ext1
;

418 
°ageC¡
--;

423 *
pD°
++ = 
fcuº1
;

425 
blkC¡
--;

433 
Êﬂt32_t
 
fcuº
, 
‚ext
, 
gcuº
, 
g√xt
;

434 
uöt32_t
 
numSèges
 = 
S
->numStages;

435 
uöt32_t
 
blkC¡
, 
°ageC¡
;

437 
pSèã
 = &
S
->pState[0];

439 
blkC¡
 = 
blockSize
;

441 
blkC¡
 > 0u)

444 
fcuº
 = *
pSrc
++;

447 
pk
 = 
pC€ffs
;

450 
px
 = 
pSèã
;

453 
gcuº
 = *
px
;

457 
‚ext
 = 
fcuº
 + ((*
pk
Ë* 
gcuº
);

459 
g√xt
 = (
fcuº
 * (*
pk
++)Ë+ 
gcuº
;

462 *
px
++ = 
fcuº
;

466 
fcuº
 = 
‚ext
;

468 
°ageC¡
 = (
numSèges
 - 1u);

471 
°ageC¡
 > 0u)

474 
gcuº
 = *
px
;

477 *
px
++ = 
g√xt
;

481 
‚ext
 = 
fcuº
 + ((*
pk
Ë* 
gcuº
);

483 
g√xt
 = (
fcuº
 * (*
pk
++)Ë+ 
gcuº
;

487 
fcuº
 = 
‚ext
;

489 
°ageC¡
--;

494 *
pD°
++ = 
fcuº
;

496 
blkC¡
--;

502 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_lattice_init_f32.c

41 
	~"¨m_m©h.h
"

61 
	$¨m_fú_œâi˚_öô_f32
(

62 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

63 
uöt16_t
 
numSèges
,

64 
Êﬂt32_t
 * 
pC€ffs
,

65 
Êﬂt32_t
 * 
pSèã
)

68 
S
->
numSèges
 =ÇumStages;

71 
S
->
pC€ffs
 =ÖCoeffs;

74 
	`mem£t
(
pSèã
, 0, (
numSèges
Ë* (
Êﬂt32_t
));

77 
S
->
pSèã
 =ÖState;

79 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_lattice_init_q15.c

41 
	~"¨m_m©h.h
"

61 
	$¨m_fú_œâi˚_öô_q15
(

62 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

63 
uöt16_t
 
numSèges
,

64 
q15_t
 * 
pC€ffs
,

65 
q15_t
 * 
pSèã
)

68 
S
->
numSèges
 =ÇumStages;

71 
S
->
pC€ffs
 =ÖCoeffs;

74 
	`mem£t
(
pSèã
, 0, (
numSèges
Ë* (
q15_t
));

77 
S
->
pSèã
 =ÖState;

79 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_lattice_init_q31.c

41 
	~"¨m_m©h.h
"

61 
	$¨m_fú_œâi˚_öô_q31
(

62 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

63 
uöt16_t
 
numSèges
,

64 
q31_t
 * 
pC€ffs
,

65 
q31_t
 * 
pSèã
)

68 
S
->
numSèges
 =ÇumStages;

71 
S
->
pC€ffs
 =ÖCoeffs;

74 
	`mem£t
(
pSèã
, 0, (
numSèges
Ë* (
q31_t
));

77 
S
->
pSèã
 =ÖState;

79 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_lattice_q15.c

41 
	~"¨m_m©h.h
"

62 
	$¨m_fú_œâi˚_q15
(

63 c⁄° 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

64 
q15_t
 * 
pSrc
,

65 
q15_t
 * 
pD°
,

66 
uöt32_t
 
blockSize
)

68 
q15_t
 *
pSèã
;

69 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

70 
q15_t
 *
px
;

71 
q15_t
 *
pk
;

74 #i‚de‡
ARM_MATH_CM0_FAMILY


78 
q31_t
 
fcu∫t1
, 
‚ext1
, 
gcu∫t1
 = 0, 
g√xt1
;

79 
q31_t
 
fcu∫t2
, 
‚ext2
, 
g√xt2
;

80 
q31_t
 
fcu∫t3
, 
‚ext3
, 
g√xt3
;

81 
q31_t
 
fcu∫t4
, 
‚ext4
, 
g√xt4
;

82 
uöt32_t
 
numSèges
 = 
S
->numStages;

83 
uöt32_t
 
blkC¡
, 
°ageC¡
;

85 
pSèã
 = &
S
->pState[0];

87 
blkC¡
 = 
blockSize
 >> 2u;

91 
blkC¡
 > 0u)

96 
fcu∫t1
 = *
pSrc
++;

97 
fcu∫t2
 = *
pSrc
++;

100 
pk
 = (
pC€ffs
);

103 
px
 = 
pSèã
;

106 
gcu∫t1
 = *
px
;

110 
‚ext1
 = (
q31_t
Ë((
gcu∫t1
 * (*
pk
)Ë>> 15uË+ 
fcu∫t1
;

111 
‚ext1
 = 
	`__SSAT
(fnext1, 16);

114 
g√xt1
 = (
q31_t
Ë((
fcu∫t1
 * (*
pk
)Ë>> 15uË+ 
gcu∫t1
;

115 
g√xt1
 = 
	`__SSAT
(gnext1, 16);

119 
‚ext2
 = (
q31_t
Ë((
fcu∫t1
 * (*
pk
)Ë>> 15uË+ 
fcu∫t2
;

120 
‚ext2
 = 
	`__SSAT
(fnext2, 16);

122 
g√xt2
 = (
q31_t
Ë((
fcu∫t2
 * (*
pk
)Ë>> 15uË+ 
fcu∫t1
;

123 
g√xt2
 = 
	`__SSAT
(gnext2, 16);

128 
fcu∫t3
 = *
pSrc
++;

129 
fcu∫t4
 = *
pSrc
++;

133 *
px
++ = (
q15_t
Ë
fcu∫t4
;

136 
‚ext3
 = (
q31_t
Ë((
fcu∫t2
 * (*
pk
)Ë>> 15uË+ 
fcu∫t3
;

137 
‚ext3
 = 
	`__SSAT
(fnext3, 16);

138 
g√xt3
 = (
q31_t
Ë((
fcu∫t3
 * (*
pk
)Ë>> 15uË+ 
fcu∫t2
;

139 
g√xt3
 = 
	`__SSAT
(gnext3, 16);

142 
‚ext4
 = (
q31_t
Ë((
fcu∫t3
 * (*
pk
)Ë>> 15uË+ 
fcu∫t4
;

143 
‚ext4
 = 
	`__SSAT
(fnext4, 16);

144 
g√xt4
 = (
q31_t
Ë((
fcu∫t4
 * (*
pk
++)Ë>> 15uË+ 
fcu∫t3
;

145 
g√xt4
 = 
	`__SSAT
(gnext4, 16);

148 
fcu∫t1
 = 
‚ext1
;

149 
fcu∫t2
 = 
‚ext2
;

150 
fcu∫t3
 = 
‚ext3
;

151 
fcu∫t4
 = 
‚ext4
;

155 
°ageC¡
 = (
numSèges
 - 1u) >> 2;

162 
°ageC¡
 > 0u)

165 
gcu∫t1
 = *
px
;

168 *
px
++ = (
q15_t
Ë
g√xt4
;

173 
‚ext1
 = (
q31_t
Ë((
gcu∫t1
 * (*
pk
)Ë>> 15uË+ 
fcu∫t1
;

174 
‚ext1
 = 
	`__SSAT
(fnext1, 16);

179 
‚ext2
 = (
q31_t
Ë((
g√xt1
 * (*
pk
)Ë>> 15uË+ 
fcu∫t2
;

180 
‚ext2
 = 
	`__SSAT
(fnext2, 16);

182 
‚ext3
 = (
q31_t
Ë((
g√xt2
 * (*
pk
)Ë>> 15uË+ 
fcu∫t3
;

183 
‚ext3
 = 
	`__SSAT
(fnext3, 16);

186 
‚ext4
 = (
q31_t
Ë((
g√xt3
 * (*
pk
)Ë>> 15uË+ 
fcu∫t4
;

187 
‚ext4
 = 
	`__SSAT
(fnext4, 16);

191 
g√xt4
 = (
q31_t
Ë((
fcu∫t4
 * (*
pk
)Ë>> 15uË+ 
g√xt3
;

192 
g√xt4
 = 
	`__SSAT
(gnext4, 16);

193 
g√xt3
 = (
q31_t
Ë((
fcu∫t3
 * (*
pk
)Ë>> 15uË+ 
g√xt2
;

194 
g√xt3
 = 
	`__SSAT
(gnext3, 16);

196 
g√xt2
 = (
q31_t
Ë((
fcu∫t2
 * (*
pk
)Ë>> 15uË+ 
g√xt1
;

197 
g√xt2
 = 
	`__SSAT
(gnext2, 16);

199 
g√xt1
 = (
q31_t
Ë((
fcu∫t1
 * (*
pk
++)Ë>> 15uË+ 
gcu∫t1
;

200 
g√xt1
 = 
	`__SSAT
(gnext1, 16);

204 
gcu∫t1
 = *
px
;

207 *
px
++ = (
q15_t
Ë
g√xt4
;

212 
fcu∫t1
 = (
q31_t
Ë((
gcu∫t1
 * (*
pk
)Ë>> 15uË+ 
‚ext1
;

213 
fcu∫t1
 = 
	`__SSAT
(fcurnt1, 16);

216 
fcu∫t2
 = (
q31_t
Ë((
g√xt1
 * (*
pk
)Ë>> 15uË+ 
‚ext2
;

217 
fcu∫t2
 = 
	`__SSAT
(fcurnt2, 16);

220 
fcu∫t3
 = (
q31_t
Ë((
g√xt2
 * (*
pk
)Ë>> 15uË+ 
‚ext3
;

221 
fcu∫t3
 = 
	`__SSAT
(fcurnt3, 16);

224 
fcu∫t4
 = (
q31_t
Ë((
g√xt3
 * (*
pk
)Ë>> 15uË+ 
‚ext4
;

225 
fcu∫t4
 = 
	`__SSAT
(fcurnt4, 16);

229 
g√xt4
 = (
q31_t
Ë((
‚ext4
 * (*
pk
)Ë>> 15uË+ 
g√xt3
;

230 
g√xt4
 = 
	`__SSAT
(gnext4, 16);

232 
g√xt3
 = (
q31_t
Ë((
‚ext3
 * (*
pk
)Ë>> 15uË+ 
g√xt2
;

233 
g√xt3
 = 
	`__SSAT
(gnext3, 16);

235 
g√xt2
 = (
q31_t
Ë((
‚ext2
 * (*
pk
)Ë>> 15uË+ 
g√xt1
;

236 
g√xt2
 = 
	`__SSAT
(gnext2, 16);

238 
g√xt1
 = (
q31_t
Ë((
‚ext1
 * (*
pk
++)Ë>> 15uË+ 
gcu∫t1
;

239 
g√xt1
 = 
	`__SSAT
(gnext1, 16);

242 
gcu∫t1
 = *
px
;

245 *
px
++ = (
q15_t
Ë
g√xt4
;

250 
‚ext1
 = (
q31_t
Ë((
gcu∫t1
 * (*
pk
)Ë>> 15uË+ 
fcu∫t1
;

251 
‚ext1
 = 
	`__SSAT
(fnext1, 16);

255 
‚ext2
 = (
q31_t
Ë((
g√xt1
 * (*
pk
)Ë>> 15uË+ 
fcu∫t2
;

256 
‚ext2
 = 
	`__SSAT
(fnext2, 16);

259 
‚ext3
 = (
q31_t
Ë((
g√xt2
 * (*
pk
)Ë>> 15uË+ 
fcu∫t3
;

260 
‚ext3
 = 
	`__SSAT
(fnext3, 16);

263 
‚ext4
 = (
q31_t
Ë((
g√xt3
 * (*
pk
)Ë>> 15uË+ 
fcu∫t4
;

264 
‚ext4
 = 
	`__SSAT
(fnext4, 16);

268 
g√xt4
 = (
q31_t
Ë((
fcu∫t4
 * (*
pk
)Ë>> 15uË+ 
g√xt3
;

269 
g√xt4
 = 
	`__SSAT
(gnext4, 16);

271 
g√xt3
 = (
q31_t
Ë((
fcu∫t3
 * (*
pk
)Ë>> 15uË+ 
g√xt2
;

272 
g√xt3
 = 
	`__SSAT
(gnext3, 16);

274 
g√xt2
 = (
q31_t
Ë((
fcu∫t2
 * (*
pk
)Ë>> 15uË+ 
g√xt1
;

275 
g√xt2
 = 
	`__SSAT
(gnext2, 16);

276 
g√xt1
 = (
q31_t
Ë((
fcu∫t1
 * (*
pk
++)Ë>> 15uË+ 
gcu∫t1
;

277 
g√xt1
 = 
	`__SSAT
(gnext1, 16);

281 
gcu∫t1
 = *
px
;

284 *
px
++ = (
q15_t
Ë
g√xt4
;

289 
fcu∫t1
 = (
q31_t
Ë((
gcu∫t1
 * (*
pk
)Ë>> 15uË+ 
‚ext1
;

290 
fcu∫t1
 = 
	`__SSAT
(fcurnt1, 16);

293 
fcu∫t2
 = (
q31_t
Ë((
g√xt1
 * (*
pk
)Ë>> 15uË+ 
‚ext2
;

294 
fcu∫t2
 = 
	`__SSAT
(fcurnt2, 16);

297 
fcu∫t3
 = (
q31_t
Ë((
g√xt2
 * (*
pk
)Ë>> 15uË+ 
‚ext3
;

298 
fcu∫t3
 = 
	`__SSAT
(fcurnt3, 16);

301 
fcu∫t4
 = (
q31_t
Ë((
g√xt3
 * (*
pk
)Ë>> 15uË+ 
‚ext4
;

302 
fcu∫t4
 = 
	`__SSAT
(fcurnt4, 16);

306 
g√xt4
 = (
q31_t
Ë((
‚ext4
 * (*
pk
)Ë>> 15uË+ 
g√xt3
;

307 
g√xt4
 = 
	`__SSAT
(gnext4, 16);

308 
g√xt3
 = (
q31_t
Ë((
‚ext3
 * (*
pk
)Ë>> 15uË+ 
g√xt2
;

309 
g√xt3
 = 
	`__SSAT
(gnext3, 16);

310 
g√xt2
 = (
q31_t
Ë((
‚ext2
 * (*
pk
)Ë>> 15uË+ 
g√xt1
;

311 
g√xt2
 = 
	`__SSAT
(gnext2, 16);

312 
g√xt1
 = (
q31_t
Ë((
‚ext1
 * (*
pk
++)Ë>> 15uË+ 
gcu∫t1
;

313 
g√xt1
 = 
	`__SSAT
(gnext1, 16);

315 
°ageC¡
--;

319 
°ageC¡
 = (
numSèges
 - 1u) % 0x4u;

321 
°ageC¡
 > 0u)

323 
gcu∫t1
 = *
px
;

326 *
px
++ = (
q15_t
Ë
g√xt4
;

329 
‚ext1
 = (
q31_t
Ë((
gcu∫t1
 * (*
pk
)Ë>> 15uË+ 
fcu∫t1
;

330 
‚ext1
 = 
	`__SSAT
(fnext1, 16);

331 
‚ext2
 = (
q31_t
Ë((
g√xt1
 * (*
pk
)Ë>> 15uË+ 
fcu∫t2
;

332 
‚ext2
 = 
	`__SSAT
(fnext2, 16);

334 
‚ext3
 = (
q31_t
Ë((
g√xt2
 * (*
pk
)Ë>> 15uË+ 
fcu∫t3
;

335 
‚ext3
 = 
	`__SSAT
(fnext3, 16);

337 
‚ext4
 = (
q31_t
Ë((
g√xt3
 * (*
pk
)Ë>> 15uË+ 
fcu∫t4
;

338 
‚ext4
 = 
	`__SSAT
(fnext4, 16);

341 
g√xt4
 = (
q31_t
Ë((
fcu∫t4
 * (*
pk
)Ë>> 15uË+ 
g√xt3
;

342 
g√xt4
 = 
	`__SSAT
(gnext4, 16);

343 
g√xt3
 = (
q31_t
Ë((
fcu∫t3
 * (*
pk
)Ë>> 15uË+ 
g√xt2
;

344 
g√xt3
 = 
	`__SSAT
(gnext3, 16);

345 
g√xt2
 = (
q31_t
Ë((
fcu∫t2
 * (*
pk
)Ë>> 15uË+ 
g√xt1
;

346 
g√xt2
 = 
	`__SSAT
(gnext2, 16);

347 
g√xt1
 = (
q31_t
Ë((
fcu∫t1
 * (*
pk
++)Ë>> 15uË+ 
gcu∫t1
;

348 
g√xt1
 = 
	`__SSAT
(gnext1, 16);

351 
fcu∫t1
 = 
‚ext1
;

352 
fcu∫t2
 = 
‚ext2
;

353 
fcu∫t3
 = 
‚ext3
;

354 
fcu∫t4
 = 
‚ext4
;

356 
°ageC¡
--;

363 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


365 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
fcu∫t1
, 
fcu∫t2
, 16);

366 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
fcu∫t3
, 
fcu∫t4
, 16);

370 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
fcu∫t2
, 
fcu∫t1
, 16);

371 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
fcu∫t4
, 
fcu∫t3
, 16);

375 
blkC¡
--;

380 
blkC¡
 = 
blockSize
 % 0x4u;

382 
blkC¡
 > 0u)

385 
fcu∫t1
 = *
pSrc
++;

388 
pk
 = (
pC€ffs
);

391 
px
 = 
pSèã
;

394 
gcu∫t1
 = *
px
;

398 
‚ext1
 = (((
q31_t
Ë
gcu∫t1
 * (*
pk
)Ë>> 15uË+ 
fcu∫t1
;

399 
‚ext1
 = 
	`__SSAT
(fnext1, 16);

403 
g√xt1
 = (((
q31_t
Ë
fcu∫t1
 * (*
pk
++)Ë>> 15uË+ 
gcu∫t1
;

404 
g√xt1
 = 
	`__SSAT
(gnext1, 16);

407 *
px
++ = (
q15_t
Ë
fcu∫t1
;

411 
fcu∫t1
 = 
‚ext1
;

413 
°ageC¡
 = (
numSèges
 - 1u);

416 
°ageC¡
 > 0u)

419 
gcu∫t1
 = *
px
;

422 *
px
++ = (
q15_t
Ë
g√xt1
;

426 
‚ext1
 = (((
q31_t
Ë
gcu∫t1
 * (*
pk
)Ë>> 15uË+ 
fcu∫t1
;

427 
‚ext1
 = 
	`__SSAT
(fnext1, 16);

430 
g√xt1
 = (((
q31_t
Ë
fcu∫t1
 * (*
pk
++)Ë>> 15uË+ 
gcu∫t1
;

431 
g√xt1
 = 
	`__SSAT
(gnext1, 16);

436 
fcu∫t1
 = 
‚ext1
;

438 
°ageC¡
--;

443 *
pD°
++ = 
	`__SSAT
(
fcu∫t1
, 16);

446 
blkC¡
--;

454 
q31_t
 
fcu∫t
, 
‚ext
, 
gcu∫t
, 
g√xt
;

455 
uöt32_t
 
numSèges
 = 
S
->numStages;

456 
uöt32_t
 
blkC¡
, 
°ageC¡
;

458 
pSèã
 = &
S
->pState[0];

460 
blkC¡
 = 
blockSize
;

462 
blkC¡
 > 0u)

465 
fcu∫t
 = *
pSrc
++;

468 
pk
 = (
pC€ffs
);

471 
px
 = 
pSèã
;

474 
gcu∫t
 = *
px
;

478 
‚ext
 = ((
gcu∫t
 * (*
pk
)Ë>> 15uË+ 
fcu∫t
;

479 
‚ext
 = 
	`__SSAT
(fnext, 16);

483 
g√xt
 = ((
fcu∫t
 * (*
pk
++)Ë>> 15uË+ 
gcu∫t
;

484 
g√xt
 = 
	`__SSAT
(gnext, 16);

487 *
px
++ = (
q15_t
Ë
fcu∫t
;

491 
fcu∫t
 = 
‚ext
;

493 
°ageC¡
 = (
numSèges
 - 1u);

496 
°ageC¡
 > 0u)

499 
gcu∫t
 = *
px
;

502 *
px
++ = (
q15_t
Ë
g√xt
;

506 
‚ext
 = ((
gcu∫t
 * (*
pk
)Ë>> 15uË+ 
fcu∫t
;

507 
‚ext
 = 
	`__SSAT
(fnext, 16);

510 
g√xt
 = ((
fcu∫t
 * (*
pk
++)Ë>> 15uË+ 
gcu∫t
;

511 
g√xt
 = 
	`__SSAT
(gnext, 16);

516 
fcu∫t
 = 
‚ext
;

518 
°ageC¡
--;

523 *
pD°
++ = 
	`__SSAT
(
fcu∫t
, 16);

526 
blkC¡
--;

532 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_lattice_q31.c

41 
	~"¨m_m©h.h
"

66 #i‚de‡
ARM_MATH_CM0_FAMILY


70 
	$¨m_fú_œâi˚_q31
(

71 c⁄° 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

72 
q31_t
 * 
pSrc
,

73 
q31_t
 * 
pD°
,

74 
uöt32_t
 
blockSize
)

76 
q31_t
 *
pSèã
;

77 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

78 
q31_t
 *
px
;

79 
q31_t
 *
pk
;

80 
q31_t
 
fcuº1
, 
‚ext1
, 
gcuº1
 = 0, 
g√xt1
;

81 
q31_t
 
fcuº2
, 
‚ext2
, 
g√xt2
;

82 
uöt32_t
 
numSèges
 = 
S
->numStages;

83 
uöt32_t
 
blkC¡
, 
°ageC¡
;

84 
q31_t
 
k
;

86 
pSèã
 = &
S
->pState[0];

88 
blkC¡
 = 
blockSize
 >> 1u;

92 
blkC¡
 > 0u)

95 
fcuº1
 = *
pSrc
++;

98 
fcuº2
 = *
pSrc
++;

101 
pk
 = (
pC€ffs
);

104 
px
 = 
pSèã
;

107 
gcuº1
 = *
px
;

110 
k
 = *
pk
++;

114 
‚ext1
 = (
q31_t
Ë(((
q63_t
Ë
gcuº1
 * 
k
) >> 32);

117 
g√xt1
 = (
q31_t
Ë(((
q63_t
Ë
fcuº1
 * (
k
)) >> 32);

118 
‚ext1
 = 
fcuº1
 + (fnext1 << 1u);

119 
g√xt1
 = 
gcuº1
 + (gnext1 << 1u);

123 
‚ext2
 = (
q31_t
Ë(((
q63_t
Ë
fcuº1
 * 
k
) >> 32);

126 
g√xt2
 = (
q31_t
Ë(((
q63_t
Ë
fcuº2
 * (
k
)) >> 32);

127 
‚ext2
 = 
fcuº2
 + (fnext2 << 1u);

128 
g√xt2
 = 
fcuº1
 + (gnext2 << 1u);

131 *
px
++ = 
fcuº2
;

135 
fcuº1
 = 
‚ext1
;

136 
fcuº2
 = 
‚ext2
;

138 
°ageC¡
 = (
numSèges
 - 1u);

141 
°ageC¡
 > 0u)

145 
k
 = *
pk
++;

148 
gcuº1
 = *
px
;

151 *
px
++ = 
g√xt2
;

155 
‚ext1
 = (
q31_t
Ë(((
q63_t
Ë
gcuº1
 * 
k
) >> 32);

156 
‚ext2
 = (
q31_t
Ë(((
q63_t
Ë
g√xt1
 * 
k
) >> 32);

158 
‚ext1
 = 
fcuº1
 + (fnext1 << 1u);

159 
‚ext2
 = 
fcuº2
 + (fnext2 << 1u);

162 
g√xt2
 = (
q31_t
Ë(((
q63_t
Ë
fcuº2
 * (
k
)) >> 32);

163 
g√xt2
 = 
g√xt1
 + (gnext2 << 1u);

166 
g√xt1
 = (
q31_t
Ë(((
q63_t
Ë
fcuº1
 * (
k
)) >> 32);

167 
g√xt1
 = 
gcuº1
 + (gnext1 << 1u);

171 
fcuº1
 = 
‚ext1
;

172 
fcuº2
 = 
‚ext2
;

174 
°ageC¡
--;

179 *
pD°
++ = 
fcuº1
;

180 *
pD°
++ = 
fcuº2
;

182 
blkC¡
--;

188 
blkC¡
 = 
blockSize
 % 0x2u;

190 
blkC¡
 > 0u)

193 
fcuº1
 = *
pSrc
++;

196 
pk
 = (
pC€ffs
);

199 
px
 = 
pSèã
;

202 
gcuº1
 = *
px
;

205 
k
 = *
pk
++;

209 
‚ext1
 = (
q31_t
Ë(((
q63_t
Ë
gcuº1
 * 
k
) >> 32);

210 
‚ext1
 = 
fcuº1
 + (fnext1 << 1u);

213 
g√xt1
 = (
q31_t
Ë(((
q63_t
Ë
fcuº1
 * (
k
)) >> 32);

214 
g√xt1
 = 
gcuº1
 + (gnext1 << 1u);

217 *
px
++ = 
fcuº1
;

221 
fcuº1
 = 
‚ext1
;

223 
°ageC¡
 = (
numSèges
 - 1u);

226 
°ageC¡
 > 0u)

229 
k
 = *
pk
++;

232 
gcuº1
 = *
px
;

235 *
px
++ = 
g√xt1
;

239 
‚ext1
 = (
q31_t
Ë(((
q63_t
Ë
gcuº1
 * 
k
) >> 32);

240 
‚ext1
 = 
fcuº1
 + (fnext1 << 1u);

243 
g√xt1
 = (
q31_t
Ë(((
q63_t
Ë
fcuº1
 * (
k
)) >> 32);

244 
g√xt1
 = 
gcuº1
 + (gnext1 << 1u);

248 
fcuº1
 = 
‚ext1
;

250 
°ageC¡
--;

256 *
pD°
++ = 
fcuº1
;

258 
blkC¡
--;

263 
	}
}

270 
	$¨m_fú_œâi˚_q31
(

271 c⁄° 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

272 
q31_t
 * 
pSrc
,

273 
q31_t
 * 
pD°
,

274 
uöt32_t
 
blockSize
)

276 
q31_t
 *
pSèã
;

277 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

278 
q31_t
 *
px
;

279 
q31_t
 *
pk
;

280 
q31_t
 
fcuº
, 
‚ext
, 
gcuº
, 
g√xt
;

281 
uöt32_t
 
numSèges
 = 
S
->numStages;

282 
uöt32_t
 
blkC¡
, 
°ageC¡
;

284 
pSèã
 = &
S
->pState[0];

286 
blkC¡
 = 
blockSize
;

288 
blkC¡
 > 0u)

291 
fcuº
 = *
pSrc
++;

294 
pk
 = (
pC€ffs
);

297 
px
 = 
pSèã
;

300 
gcuº
 = *
px
;

304 
‚ext
 = (
q31_t
Ë(((
q63_t
Ë
gcuº
 * (*
pk
)Ë>> 31Ë+ 
fcuº
;

306 
g√xt
 = (
q31_t
Ë(((
q63_t
Ë
fcuº
 * (*
pk
++)Ë>> 31Ë+ 
gcuº
;

308 *
px
++ = 
fcuº
;

312 
fcuº
 = 
‚ext
;

314 
°ageC¡
 = (
numSèges
 - 1u);

317 
°ageC¡
 > 0u)

320 
gcuº
 = *
px
;

323 *
px
++ = 
g√xt
;

327 
‚ext
 = (
q31_t
Ë(((
q63_t
Ë
gcuº
 * (*
pk
)Ë>> 31Ë+ 
fcuº
;

329 
g√xt
 = (
q31_t
Ë(((
q63_t
Ë
fcuº
 * (*
pk
++)Ë>> 31Ë+ 
gcuº
;

333 
fcuº
 = 
‚ext
;

335 
°ageC¡
--;

340 *
pD°
++ = 
fcuº
;

342 
blkC¡
--;

346 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_q15.c

41 
	~"¨m_m©h.h
"

78 #i‚de‡
ARM_MATH_CM0_FAMILY


82 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


85 
	$¨m_fú_q15
(

86 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

87 
q15_t
 * 
pSrc
,

88 
q15_t
 * 
pD°
,

89 
uöt32_t
 
blockSize
)

91 
q15_t
 *
pSèã
 = 
S
->pState;

92 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

93 
q15_t
 *
pSèãCu∫t
;

94 
q15_t
 *
px1
;

95 
q15_t
 *
pb
;

96 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

97 
q63_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

98 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

99 
uöt32_t
 
èpC¡
, 
blkC¡
;

104 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

115 
blkC¡
 = 
blockSize
 >> 2;

119 
blkC¡
 > 0u)

123 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSrc
)++;

124 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSrc
)++;

127 
acc0
 = 0;

128 
acc1
 = 0;

129 
acc2
 = 0;

130 
acc3
 = 0;

133 
px1
 = 
pSèã
;

136 
pb
 = 
pC€ffs
;

139 
x0
 = 
	`_SIMD32_OFFSET
(
px1
);

142 
x1
 = 
	`_SIMD32_OFFSET
(
px1
 + 1u);

144 
px1
 += 2u;

148 
èpC¡
 = 
numT≠s
 >> 2;

150 
èpC¡
 > 0u)

153 
c0
 = *
	`__SIMD32
(
pb
)++;

156 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

159 
acc1
 = 
	`__SMLALD
(
x1
, 
c0
,ácc1);

162 
x2
 = 
	`_SIMD32_OFFSET
(
px1
);

165 
x3
 = 
	`_SIMD32_OFFSET
(
px1
 + 1u);

168 
acc2
 = 
	`__SMLALD
(
x2
, 
c0
,ácc2);

171 
acc3
 = 
	`__SMLALD
(
x3
, 
c0
,ácc3);

174 
c0
 = *
	`__SIMD32
(
pb
)++;

177 
acc0
 = 
	`__SMLALD
(
x2
, 
c0
,ácc0);

180 
acc1
 = 
	`__SMLALD
(
x3
, 
c0
,ácc1);

183 
x0
 = 
	`_SIMD32_OFFSET
(
px1
 + 2u);

186 
x1
 = 
	`_SIMD32_OFFSET
(
px1
 + 3u);

189 
acc2
 = 
	`__SMLALD
(
x0
, 
c0
,ácc2);

192 
acc3
 = 
	`__SMLALD
(
x1
, 
c0
,ácc3);

194 
px1
 += 4u;

196 
èpC¡
--;

203 if((
numT≠s
 & 0x3u) != 0u)

206 
c0
 = *
	`__SIMD32
(
pb
)++;

209 
x2
 = 
	`_SIMD32_OFFSET
(
px1
);

211 
x3
 = 
	`_SIMD32_OFFSET
(
px1
 + 1u);

214 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

216 
px1
 += 2u;

218 
acc1
 = 
	`__SMLALD
(
x1
, 
c0
,ácc1);

219 
acc2
 = 
	`__SMLALD
(
x2
, 
c0
,ácc2);

220 
acc3
 = 
	`__SMLALD
(
x3
, 
c0
,ácc3);

226 #i‚de‡
ARM_MATH_BIG_ENDIAN


228 *
	`__SIMD32
(
pD°
)++ =

229 
	`__PKHBT
(
	`__SSAT
((
acc0
 >> 15), 16), __SSAT((
acc1
 >> 15), 16), 16);

230 *
	`__SIMD32
(
pD°
)++ =

231 
	`__PKHBT
(
	`__SSAT
((
acc2
 >> 15), 16), __SSAT((
acc3
 >> 15), 16), 16);

235 *
	`__SIMD32
(
pD°
)++ =

236 
	`__PKHBT
(
	`__SSAT
((
acc1
 >> 15), 16), __SSAT((
acc0
 >> 15), 16), 16);

237 *
	`__SIMD32
(
pD°
)++ =

238 
	`__PKHBT
(
	`__SSAT
((
acc3
 >> 15), 16), __SSAT((
acc2
 >> 15), 16), 16);

245 
pSèã
 =ÖState + 4;

248 
blkC¡
--;

253 
blkC¡
 = 
blockSize
 % 0x4u;

254 
blkC¡
 > 0u)

257 *
pSèãCu∫t
++ = *
pSrc
++;

260 
acc0
 = 0;

263 
px1
 = 
pSèã
;

266 
pb
 = 
pC€ffs
;

268 
èpC¡
 = 
numT≠s
 >> 1;

273 
c0
 = *
	`__SIMD32
(
pb
)++;

274 
x0
 = *
	`__SIMD32
(
px1
)++;

276 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

277 
èpC¡
--;

279 
èpC¡
 > 0u);

283 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

286 
pSèã
 =ÖState + 1;

289 
blkC¡
--;

297 
pSèãCu∫t
 = 
S
->
pSèã
;

300 
èpC¡
 = (
numT≠s
 - 1u) >> 2;

302 
èpC¡
 > 0u)

306 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

307 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

309 
èpC¡
--;

314 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

317 
èpC¡
 > 0u)

319 *
pSèãCu∫t
++ = *
pSèã
++;

322 
èpC¡
--;

324 
	}
}

328 
	$¨m_fú_q15
(

329 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

330 
q15_t
 * 
pSrc
,

331 
q15_t
 * 
pD°
,

332 
uöt32_t
 
blockSize
)

334 
q15_t
 *
pSèã
 = 
S
->pState;

335 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

336 
q15_t
 *
pSèãCu∫t
;

337 
q63_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

338 
q15_t
 *
pb
;

339 
q15_t
 *
px
;

340 
q31_t
 
x0
, 
x1
, 
x2
, 
c0
;

341 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

342 
uöt32_t
 
èpC¡
, 
blkC¡
;

347 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

358 
blkC¡
 = 
blockSize
 >> 2;

362 
blkC¡
 > 0u)

366 *
pSèãCu∫t
++ = *
pSrc
++;

367 *
pSèãCu∫t
++ = *
pSrc
++;

368 *
pSèãCu∫t
++ = *
pSrc
++;

369 *
pSèãCu∫t
++ = *
pSrc
++;

373 
acc0
 = 0;

374 
acc1
 = 0;

375 
acc2
 = 0;

376 
acc3
 = 0;

379 
px
 = 
pSèã
;

382 
pb
 = 
pC€ffs
;

385 
x0
 = *
	`__SIMD32
(
px
)++;

388 
x2
 = *
	`__SIMD32
(
px
)++;

392 
èpC¡
 = 
numT≠s
 >> 2;

394 
èpC¡
 > 0)

397 
c0
 = *
	`__SIMD32
(
pb
)++;

400 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

403 
acc2
 = 
	`__SMLALD
(
x2
, 
c0
,ácc2);

406 #i‚de‡
ARM_MATH_BIG_ENDIAN


407 
x1
 = 
	`__PKHBT
(
x2
, 
x0
, 0);

409 
x1
 = 
	`__PKHBT
(
x0
, 
x2
, 0);

413 
x0
 = 
	`_SIMD32_OFFSET
(
px
);

416 
acc1
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc1);

419 #i‚de‡
ARM_MATH_BIG_ENDIAN


420 
x1
 = 
	`__PKHBT
(
x0
, 
x2
, 0);

422 
x1
 = 
	`__PKHBT
(
x2
, 
x0
, 0);

426 
acc3
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc3);

429 
c0
 = *
	`__SIMD32
(
pb
)++;

432 
acc0
 = 
	`__SMLALD
(
x2
, 
c0
,ácc0);

435 
x2
 = 
	`_SIMD32_OFFSET
(
px
 + 2u);

438 
acc2
 = 
	`__SMLALD
(
x0
, 
c0
,ácc2);

441 
acc1
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc1);

444 #i‚de‡
ARM_MATH_BIG_ENDIAN


445 
x1
 = 
	`__PKHBT
(
x2
, 
x0
, 0);

447 
x1
 = 
	`__PKHBT
(
x0
, 
x2
, 0);

451 
acc3
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc3);

454 
px
 += 4u;

457 
èpC¡
--;

463 if((
numT≠s
 & 0x3u) != 0u)

467 
c0
 = *
	`__SIMD32
(
pb
)++;

470 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

471 
acc2
 = 
	`__SMLALD
(
x2
, 
c0
,ácc2);

474 #i‚de‡
ARM_MATH_BIG_ENDIAN


475 
x1
 = 
	`__PKHBT
(
x2
, 
x0
, 0);

477 
x1
 = 
	`__PKHBT
(
x0
, 
x2
, 0);

481 
x0
 = *
	`__SIMD32
(
px
);

484 
acc1
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc1);

487 #i‚de‡
ARM_MATH_BIG_ENDIAN


488 
x1
 = 
	`__PKHBT
(
x0
, 
x2
, 0);

490 
x1
 = 
	`__PKHBT
(
x2
, 
x0
, 0);

494 
acc3
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc3);

500 #i‚de‡
ARM_MATH_BIG_ENDIAN


502 *
	`__SIMD32
(
pD°
)++ =

503 
	`__PKHBT
(
	`__SSAT
((
acc0
 >> 15), 16), __SSAT((
acc1
 >> 15), 16), 16);

505 *
	`__SIMD32
(
pD°
)++ =

506 
	`__PKHBT
(
	`__SSAT
((
acc2
 >> 15), 16), __SSAT((
acc3
 >> 15), 16), 16);

510 *
	`__SIMD32
(
pD°
)++ =

511 
	`__PKHBT
(
	`__SSAT
((
acc1
 >> 15), 16), __SSAT((
acc0
 >> 15), 16), 16);

513 *
	`__SIMD32
(
pD°
)++ =

514 
	`__PKHBT
(
	`__SSAT
((
acc3
 >> 15), 16), __SSAT((
acc2
 >> 15), 16), 16);

519 
pSèã
 =ÖState + 4;

522 
blkC¡
--;

527 
blkC¡
 = 
blockSize
 % 0x4u;

528 
blkC¡
 > 0u)

531 *
pSèãCu∫t
++ = *
pSrc
++;

534 
acc0
 = 0;

537 
px
 = 
pSèã
;

538 
pb
 = 
pC€ffs
;

540 
èpC¡
 = 
numT≠s
 >> 1u;

544 
acc0
 +(
q31_t
Ë* 
px
++ * *
pb
++;

545 
acc0
 +(
q31_t
Ë* 
px
++ * *
pb
++;

546 
èpC¡
--;

548 
èpC¡
 > 0u);

552 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

555 
pSèã
 =ÖState + 1u;

558 
blkC¡
--;

566 
pSèãCu∫t
 = 
S
->
pSèã
;

569 
èpC¡
 = (
numT≠s
 - 1u) >> 2;

571 
èpC¡
 > 0u)

573 *
pSèãCu∫t
++ = *
pSèã
++;

574 *
pSèãCu∫t
++ = *
pSèã
++;

575 *
pSèãCu∫t
++ = *
pSèã
++;

576 *
pSèãCu∫t
++ = *
pSèã
++;

578 
èpC¡
--;

583 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

586 
èpC¡
 > 0u)

588 *
pSèãCu∫t
++ = *
pSèã
++;

591 
èpC¡
--;

593 
	}
}

603 
	$¨m_fú_q15
(

604 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

605 
q15_t
 * 
pSrc
,

606 
q15_t
 * 
pD°
,

607 
uöt32_t
 
blockSize
)

609 
q15_t
 *
pSèã
 = 
S
->pState;

610 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

611 
q15_t
 *
pSèãCu∫t
;

615 
q15_t
 *
px
;

616 
q15_t
 *
pb
;

617 
q63_t
 
acc
;

618 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

619 
uöt32_t
 
èpC¡
, 
blkC¡
;

623 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

626 
blkC¡
 = 
blockSize
;

628 
blkC¡
 > 0u)

631 *
pSèãCu∫t
++ = *
pSrc
++;

634 
acc
 = 0;

637 
px
 = 
pSèã
;

640 
pb
 = 
pC€ffs
;

642 
èpC¡
 = 
numT≠s
;

648 
acc
 +(
q31_t
Ë* 
px
++ * *
pb
++;

649 
èpC¡
--;

650 } 
èpC¡
 > 0u);

654 *
pD°
++ = (
q15_t
Ë
	`__SSAT
((
acc
 >> 15u), 16);

657 
pSèã
 =ÖState + 1;

660 
blkC¡
--;

668 
pSèãCu∫t
 = 
S
->
pSèã
;

671 
èpC¡
 = (
numT≠s
 - 1u);

674 
èpC¡
 > 0u)

676 *
pSèãCu∫t
++ = *
pSèã
++;

679 
èpC¡
--;

682 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_q31.c

41 
	~"¨m_m©h.h
"

72 
	$¨m_fú_q31
(

73 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

74 
q31_t
 * 
pSrc
,

75 
q31_t
 * 
pD°
,

76 
uöt32_t
 
blockSize
)

78 
q31_t
 *
pSèã
 = 
S
->pState;

79 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

80 
q31_t
 *
pSèãCu∫t
;

83 #i‚de‡
ARM_MATH_CM0_FAMILY


87 
q31_t
 
x0
, 
x1
, 
x2
;

88 
q31_t
 
c0
;

89 
q31_t
 *
px
;

90 
q31_t
 *
pb
;

91 
q63_t
 
acc0
, 
acc1
, 
acc2
;

92 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

93 
uöt32_t
 
i
, 
èpC¡
, 
blkC¡
, 
èpC¡N3
;

97 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

107 
blkC¡
 = 
blockSize
 / 3;

108 
blockSize
 = blockSizê- (3 * 
blkC¡
);

110 
èpC¡
 = 
numT≠s
 / 3;

111 
èpC¡N3
 = 
numT≠s
 - (3 * 
èpC¡
);

115 
blkC¡
 > 0u)

118 *
pSèãCu∫t
++ = *
pSrc
++;

119 *
pSèãCu∫t
++ = *
pSrc
++;

120 *
pSèãCu∫t
++ = *
pSrc
++;

123 
acc0
 = 0;

124 
acc1
 = 0;

125 
acc2
 = 0;

128 
px
 = 
pSèã
;

131 
pb
 = 
pC€ffs
;

135 
x0
 = *(
px
++);

136 
x1
 = *(
px
++);

139 
i
 = 
èpC¡
;

141 
i
 > 0u)

144 
c0
 = *
pb
;

147 
x2
 = *(
px
++);

150 
acc0
 +((
q63_t
Ë
x0
 * 
c0
);

151 
acc1
 +((
q63_t
Ë
x1
 * 
c0
);

152 
acc2
 +((
q63_t
Ë
x2
 * 
c0
);

155 
c0
 = *(
pb
 + 1u);

156 
x0
 = *(
px
++);

159 
acc0
 +((
q63_t
Ë
x1
 * 
c0
);

160 
acc1
 +((
q63_t
Ë
x2
 * 
c0
);

161 
acc2
 +((
q63_t
Ë
x0
 * 
c0
);

164 
c0
 = *(
pb
 + 2u);

165 
x1
 = *(
px
++);

168 
pb
 += 3u;

171 
acc0
 +((
q63_t
Ë
x2
 * 
c0
);

172 
acc1
 +((
q63_t
Ë
x0
 * 
c0
);

173 
acc2
 +((
q63_t
Ë
x1
 * 
c0
);

176 
i
--;

181 
i
 = 
èpC¡N3
;

183 
i
 > 0u)

186 
c0
 = *(
pb
++);

189 
x2
 = *(
px
++);

192 
acc0
 +((
q63_t
Ë
x0
 * 
c0
);

193 
acc1
 +((
q63_t
Ë
x1
 * 
c0
);

194 
acc2
 +((
q63_t
Ë
x2
 * 
c0
);

197 
x0
 = 
x1
;

198 
x1
 = 
x2
;

201 
i
--;

205 
pSèã
 =ÖState + 3;

209 *
pD°
++ = (
q31_t
Ë(
acc0
 >> 31u);

210 *
pD°
++ = (
q31_t
Ë(
acc1
 >> 31u);

211 *
pD°
++ = (
q31_t
Ë(
acc2
 >> 31u);

214 
blkC¡
--;

220 
blockSize
 > 0u)

223 *
pSèãCu∫t
++ = *
pSrc
++;

226 
acc0
 = 0;

229 
px
 = 
pSèã
;

232 
pb
 = (
pC€ffs
);

234 
i
 = 
numT≠s
;

239 
acc0
 +(
q63_t
Ë* (
px
++Ë* (*(
pb
++));

240 
i
--;

241 } 
i
 > 0u);

245 *
pD°
++ = (
q31_t
Ë(
acc0
 >> 31u);

248 
pSèã
 =ÖState + 1;

251 
blockSize
--;

259 
pSèãCu∫t
 = 
S
->
pSèã
;

261 
èpC¡
 = (
numT≠s
 - 1u) >> 2u;

264 
èpC¡
 > 0u)

266 *
pSèãCu∫t
++ = *
pSèã
++;

267 *
pSèãCu∫t
++ = *
pSèã
++;

268 *
pSèãCu∫t
++ = *
pSèã
++;

269 *
pSèãCu∫t
++ = *
pSèã
++;

272 
èpC¡
--;

276 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

279 
èpC¡
 > 0u)

281 *
pSèãCu∫t
++ = *
pSèã
++;

284 
èpC¡
--;

291 
q31_t
 *
px
;

292 
q31_t
 *
pb
;

293 
q63_t
 
acc
;

294 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

295 
uöt32_t
 
i
, 
èpC¡
, 
blkC¡
;

299 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

302 
blkC¡
 = 
blockSize
;

304 
blkC¡
 > 0u)

307 *
pSèãCu∫t
++ = *
pSrc
++;

310 
acc
 = 0;

313 
px
 = 
pSèã
;

316 
pb
 = 
pC€ffs
;

318 
i
 = 
numT≠s
;

324 
acc
 +(
q63_t
Ë* 
px
++ * *
pb
++;

325 
i
--;

326 } 
i
 > 0u);

330 *
pD°
++ = (
q31_t
Ë(
acc
 >> 31u);

333 
pSèã
 =ÖState + 1;

336 
blkC¡
--;

344 
pSèãCu∫t
 = 
S
->
pSèã
;

347 
èpC¡
 = 
numT≠s
 - 1u;

350 
èpC¡
 > 0u)

352 *
pSèãCu∫t
++ = *
pSèã
++;

355 
èpC¡
--;

361 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_q7.c

41 
	~"¨m_m©h.h
"

69 
	$¨m_fú_q7
(

70 c⁄° 
¨m_fú_ö°™˚_q7
 * 
S
,

71 
q7_t
 * 
pSrc
,

72 
q7_t
 * 
pD°
,

73 
uöt32_t
 
blockSize
)

76 #i‚de‡
ARM_MATH_CM0_FAMILY


80 
q7_t
 *
pSèã
 = 
S
->pState;

81 
q7_t
 *
pC€ffs
 = 
S
->pCoeffs;

82 
q7_t
 *
pSèãCu∫t
;

83 
q7_t
 
x0
, 
x1
, 
x2
, 
x3
;

84 
q7_t
 
c0
;

85 
q7_t
 *
px
;

86 
q7_t
 *
pb
;

87 
q31_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

88 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

89 
uöt32_t
 
i
, 
èpC¡
, 
blkC¡
;

93 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

103 
blkC¡
 = 
blockSize
 >> 2;

107 
blkC¡
 > 0u)

110 *
pSèãCu∫t
++ = *
pSrc
++;

111 *
pSèãCu∫t
++ = *
pSrc
++;

112 *
pSèãCu∫t
++ = *
pSrc
++;

113 *
pSèãCu∫t
++ = *
pSrc
++;

116 
acc0
 = 0;

117 
acc1
 = 0;

118 
acc2
 = 0;

119 
acc3
 = 0;

122 
px
 = 
pSèã
;

125 
pb
 = 
pC€ffs
;

129 
x0
 = *(
px
++);

130 
x1
 = *(
px
++);

131 
x2
 = *(
px
++);

134 
èpC¡
 = 
numT≠s
 >> 2;

135 
i
 = 
èpC¡
;

137 
i
 > 0u)

140 
c0
 = *
pb
;

143 
x3
 = *
px
;

146 
acc0
 +((
q15_t
Ë
x0
 * 
c0
);

149 
acc1
 +((
q15_t
Ë
x1
 * 
c0
);

152 
acc2
 +((
q15_t
Ë
x2
 * 
c0
);

155 
acc3
 +((
q15_t
Ë
x3
 * 
c0
);

158 
c0
 = *(
pb
 + 1u);

161 
x0
 = *(
px
 + 1u);

164 
acc0
 +((
q15_t
Ë
x1
 * 
c0
);

165 
acc1
 +((
q15_t
Ë
x2
 * 
c0
);

166 
acc2
 +((
q15_t
Ë
x3
 * 
c0
);

167 
acc3
 +((
q15_t
Ë
x0
 * 
c0
);

170 
c0
 = *(
pb
 + 2u);

173 
x1
 = *(
px
 + 2u);

176 
acc0
 +((
q15_t
Ë
x2
 * 
c0
);

177 
acc1
 +((
q15_t
Ë
x3
 * 
c0
);

178 
acc2
 +((
q15_t
Ë
x0
 * 
c0
);

179 
acc3
 +((
q15_t
Ë
x1
 * 
c0
);

182 
c0
 = *(
pb
 + 3u);

185 
x2
 = *(
px
 + 3u);

188 
acc0
 +((
q15_t
Ë
x3
 * 
c0
);

189 
acc1
 +((
q15_t
Ë
x0
 * 
c0
);

190 
acc2
 +((
q15_t
Ë
x1
 * 
c0
);

191 
acc3
 +((
q15_t
Ë
x2
 * 
c0
);

194 
pb
 += 4u;

195 
px
 += 4u;

198 
i
--;

203 
i
 = 
numT≠s
 - (
èpC¡
 * 4u);

204 
i
 > 0u)

207 
c0
 = *(
pb
++);

210 
x3
 = *(
px
++);

213 
acc0
 +((
q15_t
Ë
x0
 * 
c0
);

214 
acc1
 +((
q15_t
Ë
x1
 * 
c0
);

215 
acc2
 +((
q15_t
Ë
x2
 * 
c0
);

216 
acc3
 +((
q15_t
Ë
x3
 * 
c0
);

219 
x0
 = 
x1
;

220 
x1
 = 
x2
;

221 
x2
 = 
x3
;

224 
i
--;

228 
pSèã
 =ÖState + 4;

232 
acc0
 = 
	`__SSAT
((acc0 >> 7u), 8);

233 *
pD°
++ = 
acc0
;

234 
acc1
 = 
	`__SSAT
((acc1 >> 7u), 8);

235 *
pD°
++ = 
acc1
;

236 
acc2
 = 
	`__SSAT
((acc2 >> 7u), 8);

237 *
pD°
++ = 
acc2
;

238 
acc3
 = 
	`__SSAT
((acc3 >> 7u), 8);

239 *
pD°
++ = 
acc3
;

242 
blkC¡
--;

248 
blkC¡
 = 
blockSize
 % 4u;

250 
blkC¡
 > 0u)

253 *
pSèãCu∫t
++ = *
pSrc
++;

256 
acc0
 = 0;

259 
px
 = 
pSèã
;

262 
pb
 = (
pC€ffs
);

264 
i
 = 
numT≠s
;

269 
acc0
 +(
q15_t
Ë* (
px
++Ë* (*(
pb
++));

270 
i
--;

271 } 
i
 > 0u);

275 *
pD°
++ = 
	`__SSAT
((
acc0
 >> 7u), 8);

278 
pSèã
 =ÖState + 1;

281 
blkC¡
--;

289 
pSèãCu∫t
 = 
S
->
pSèã
;

291 
èpC¡
 = (
numT≠s
 - 1u) >> 2u;

294 
èpC¡
 > 0u)

296 *
pSèãCu∫t
++ = *
pSèã
++;

297 *
pSèãCu∫t
++ = *
pSèã
++;

298 *
pSèãCu∫t
++ = *
pSèã
++;

299 *
pSèãCu∫t
++ = *
pSèã
++;

302 
èpC¡
--;

306 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

309 
èpC¡
 > 0u)

311 *
pSèãCu∫t
++ = *
pSèã
++;

314 
èpC¡
--;

321 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

322 
uöt32_t
 
i
, 
blkC¡
;

323 
q7_t
 *
pSèã
 = 
S
->pState;

324 
q7_t
 *
pC€ffs
 = 
S
->pCoeffs;

325 
q7_t
 *
px
, *
pb
;

326 
q31_t
 
acc
 = 0;

327 
q7_t
 *
pSèãCu∫t
;

332 
pSèãCu∫t
 = 
S
->
pSèã
 + (
numT≠s
 - 1u);

335 
blkC¡
 = 
blockSize
;

338 
blkC¡
 > 0u)

341 *
pSèãCu∫t
++ = *
pSrc
++;

344 
acc
 = 0;

347 
px
 = 
pSèã
;

350 
pb
 = 
pC€ffs
;

353 
i
 = 
numT≠s
;

355 
i
 > 0u)

358 
acc
 +(
q15_t
Ë* 
px
++ * *
pb
++;

359 
i
--;

363 *
pD°
++ = (
q7_t
Ë
	`__SSAT
((
acc
 >> 7), 8);

366 
pSèã
 =ÖState + 1;

369 
blkC¡
--;

378 
pSèãCu∫t
 = 
S
->
pSèã
;

382 
i
 = (
numT≠s
 - 1u);

385 
i
 > 0u)

387 *
pSèãCu∫t
++ = *
pSèã
++;

388 
i
--;

393 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_f32.c

40 
	~"¨m_m©h.h
"

123 
	$¨m_fú_•¨£_f32
(

124 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

125 
Êﬂt32_t
 * 
pSrc
,

126 
Êﬂt32_t
 * 
pD°
,

127 
Êﬂt32_t
 * 
pS¸©chIn
,

128 
uöt32_t
 
blockSize
)

131 
Êﬂt32_t
 *
pSèã
 = 
S
->pState;

132 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

133 
Êﬂt32_t
 *
px
;

134 
Êﬂt32_t
 *
py
 = 
pSèã
;

135 
Êﬂt32_t
 *
pb
 = 
pS¸©chIn
;

136 
Êﬂt32_t
 *
pOut
;

137 
öt32_t
 *
pT≠Dñay
 = 
S
->pTapDelay;

138 
uöt32_t
 
dñaySize
 = 
S
->
maxDñay
 + 
blockSize
;

139 
uöt16_t
 
numT≠s
 = 
S
->numTaps;

140 
öt32_t
 
ªadIndex
;

141 
uöt32_t
 
èpC¡
, 
blkC¡
;

142 
Êﬂt32_t
 
c€ff
 = *
pC€ffs
++;

148 
	`¨m_cúcuœrWrôe_f32
((
öt32_t
 *Ë
py
, 
dñaySize
, &
S
->
°©eIndex
, 1,

149 (
öt32_t
 *Ë
pSrc
, 1, 
blockSize
);

153 
ªadIndex
 = ((
öt32_t
Ë
S
->
°©eIndex
 - (öt32_tË
blockSize
Ë- *
pT≠Dñay
++;

156 if(
ªadIndex
 < 0)

158 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

162 
py
 = 
pSèã
;

165 
	`¨m_cúcuœrRód_f32
((
öt32_t
 *Ë
py
, 
dñaySize
, &
ªadIndex
, 1,

166 (
öt32_t
 *Ë
pb
, (öt32_à*Ëpb, 
blockSize
, 1,

167 
blockSize
);

170 
px
 = 
pb
;

173 
pOut
 = 
pD°
;

176 #i‚de‡
ARM_MATH_CM0_FAMILY


182 
blkC¡
 = 
blockSize
 >> 2u;

184 
blkC¡
 > 0u)

187 *
pOut
++ = *
px
++ * 
c€ff
;

188 *
pOut
++ = *
px
++ * 
c€ff
;

189 *
pOut
++ = *
px
++ * 
c€ff
;

190 *
pOut
++ = *
px
++ * 
c€ff
;

193 
blkC¡
--;

198 
blkC¡
 = 
blockSize
 % 0x4u;

200 
blkC¡
 > 0u)

203 *
pOut
++ = *
px
++ * 
c€ff
;

206 
blkC¡
--;

211 
c€ff
 = *
pC€ffs
++;

214 
ªadIndex
 = ((
öt32_t
Ë
S
->
°©eIndex
 - (öt32_tË
blockSize
Ë- *
pT≠Dñay
++;

217 if(
ªadIndex
 < 0)

219 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

223 
èpC¡
 = (
uöt32_t
Ë
numT≠s
 - 2u;

225 
èpC¡
 > 0u)

229 
py
 = 
pSèã
;

232 
	`¨m_cúcuœrRód_f32
((
öt32_t
 *Ë
py
, 
dñaySize
, &
ªadIndex
, 1,

233 (
öt32_t
 *Ë
pb
, (öt32_à*Ëpb, 
blockSize
, 1,

234 
blockSize
);

237 
px
 = 
pb
;

240 
pOut
 = 
pD°
;

244 
blkC¡
 = 
blockSize
 >> 2u;

246 
blkC¡
 > 0u)

249 *
pOut
++ +*
px
++ * 
c€ff
;

250 *
pOut
++ +*
px
++ * 
c€ff
;

251 *
pOut
++ +*
px
++ * 
c€ff
;

252 *
pOut
++ +*
px
++ * 
c€ff
;

255 
blkC¡
--;

260 
blkC¡
 = 
blockSize
 % 0x4u;

262 
blkC¡
 > 0u)

265 *
pOut
++ +*
px
++ * 
c€ff
;

268 
blkC¡
--;

273 
c€ff
 = *
pC€ffs
++;

276 
ªadIndex
 = ((
öt32_t
Ë
S
->
°©eIndex
 -

277 (
öt32_t
Ë
blockSize
Ë- *
pT≠Dñay
++;

280 if(
ªadIndex
 < 0)

282 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

286 
èpC¡
--;

292 
py
 = 
pSèã
;

295 
	`¨m_cúcuœrRód_f32
((
öt32_t
 *Ë
py
, 
dñaySize
, &
ªadIndex
, 1,

296 (
öt32_t
 *Ë
pb
, (öt32_à*Ëpb, 
blockSize
, 1,

297 
blockSize
);

300 
px
 = 
pb
;

303 
pOut
 = 
pD°
;

307 
blkC¡
 = 
blockSize
 >> 2u;

309 
blkC¡
 > 0u)

312 *
pOut
++ +*
px
++ * 
c€ff
;

313 *
pOut
++ +*
px
++ * 
c€ff
;

314 *
pOut
++ +*
px
++ * 
c€ff
;

315 *
pOut
++ +*
px
++ * 
c€ff
;

318 
blkC¡
--;

323 
blkC¡
 = 
blockSize
 % 0x4u;

325 
blkC¡
 > 0u)

328 *
pOut
++ +*
px
++ * 
c€ff
;

331 
blkC¡
--;

338 
blkC¡
 = 
blockSize
;

340 
blkC¡
 > 0u)

343 *
pOut
++ = *
px
++ * 
c€ff
;

346 
blkC¡
--;

351 
c€ff
 = *
pC€ffs
++;

354 
ªadIndex
 = ((
öt32_t
Ë
S
->
°©eIndex
 - (öt32_tË
blockSize
Ë- *
pT≠Dñay
++;

357 if(
ªadIndex
 < 0)

359 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

363 
èpC¡
 = (
uöt32_t
Ë
numT≠s
 - 2u;

365 
èpC¡
 > 0u)

369 
py
 = 
pSèã
;

372 
	`¨m_cúcuœrRód_f32
((
öt32_t
 *Ë
py
, 
dñaySize
, &
ªadIndex
, 1,

373 (
öt32_t
 *Ë
pb
, (öt32_à*Ëpb, 
blockSize
, 1,

374 
blockSize
);

377 
px
 = 
pb
;

380 
pOut
 = 
pD°
;

382 
blkC¡
 = 
blockSize
;

384 
blkC¡
 > 0u)

387 *
pOut
++ +*
px
++ * 
c€ff
;

390 
blkC¡
--;

395 
c€ff
 = *
pC€ffs
++;

398 
ªadIndex
 =

399 ((
öt32_t
Ë
S
->
°©eIndex
 - (öt32_tË
blockSize
Ë- *
pT≠Dñay
++;

402 if(
ªadIndex
 < 0)

404 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

408 
èpC¡
--;

414 
py
 = 
pSèã
;

417 
	`¨m_cúcuœrRód_f32
((
öt32_t
 *Ë
py
, 
dñaySize
, &
ªadIndex
, 1,

418 (
öt32_t
 *Ë
pb
, (öt32_à*Ëpb, 
blockSize
, 1,

419 
blockSize
);

422 
px
 = 
pb
;

425 
pOut
 = 
pD°
;

427 
blkC¡
 = 
blockSize
;

429 
blkC¡
 > 0u)

432 *
pOut
++ +*
px
++ * 
c€ff
;

435 
blkC¡
--;

440 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_init_f32.c

41 
	~"¨m_m©h.h
"

73 
	$¨m_fú_•¨£_öô_f32
(

74 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

75 
uöt16_t
 
numT≠s
,

76 
Êﬂt32_t
 * 
pC€ffs
,

77 
Êﬂt32_t
 * 
pSèã
,

78 
öt32_t
 * 
pT≠Dñay
,

79 
uöt16_t
 
maxDñay
,

80 
uöt32_t
 
blockSize
)

83 
S
->
numT≠s
 =ÇumTaps;

86 
S
->
pC€ffs
 =ÖCoeffs;

89 
S
->
pT≠Dñay
 =ÖTapDelay;

92 
S
->
maxDñay
 = maxDelay;

95 
S
->
°©eIndex
 = 0u;

98 
	`mem£t
(
pSèã
, 0, (
maxDñay
 + 
blockSize
Ë* (
Êﬂt32_t
));

101 
S
->
pSèã
 =ÖState;

103 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_init_q15.c

41 
	~"¨m_m©h.h
"

73 
	$¨m_fú_•¨£_öô_q15
(

74 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

75 
uöt16_t
 
numT≠s
,

76 
q15_t
 * 
pC€ffs
,

77 
q15_t
 * 
pSèã
,

78 
öt32_t
 * 
pT≠Dñay
,

79 
uöt16_t
 
maxDñay
,

80 
uöt32_t
 
blockSize
)

83 
S
->
numT≠s
 =ÇumTaps;

86 
S
->
pC€ffs
 =ÖCoeffs;

89 
S
->
pT≠Dñay
 =ÖTapDelay;

92 
S
->
maxDñay
 = maxDelay;

95 
S
->
°©eIndex
 = 0u;

98 
	`mem£t
(
pSèã
, 0, (
maxDñay
 + 
blockSize
Ë* (
q15_t
));

101 
S
->
pSèã
 =ÖState;

103 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_init_q31.c

41 
	~"¨m_m©h.h
"

72 
	$¨m_fú_•¨£_öô_q31
(

73 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

74 
uöt16_t
 
numT≠s
,

75 
q31_t
 * 
pC€ffs
,

76 
q31_t
 * 
pSèã
,

77 
öt32_t
 * 
pT≠Dñay
,

78 
uöt16_t
 
maxDñay
,

79 
uöt32_t
 
blockSize
)

82 
S
->
numT≠s
 =ÇumTaps;

85 
S
->
pC€ffs
 =ÖCoeffs;

88 
S
->
pT≠Dñay
 =ÖTapDelay;

91 
S
->
maxDñay
 = maxDelay;

94 
S
->
°©eIndex
 = 0u;

97 
	`mem£t
(
pSèã
, 0, (
maxDñay
 + 
blockSize
Ë* (
q31_t
));

100 
S
->
pSèã
 =ÖState;

102 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_init_q7.c

41 
	~"¨m_m©h.h
"

73 
	$¨m_fú_•¨£_öô_q7
(

74 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

75 
uöt16_t
 
numT≠s
,

76 
q7_t
 * 
pC€ffs
,

77 
q7_t
 * 
pSèã
,

78 
öt32_t
 * 
pT≠Dñay
,

79 
uöt16_t
 
maxDñay
,

80 
uöt32_t
 
blockSize
)

83 
S
->
numT≠s
 =ÇumTaps;

86 
S
->
pC€ffs
 =ÖCoeffs;

89 
S
->
pT≠Dñay
 =ÖTapDelay;

92 
S
->
maxDñay
 = maxDelay;

95 
S
->
°©eIndex
 = 0u;

98 
	`mem£t
(
pSèã
, 0, (
maxDñay
 + 
blockSize
Ë* (
q7_t
));

101 
S
->
pSèã
 =ÖState;

103 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_q15.c

40 
	~"¨m_m©h.h
"

68 
	$¨m_fú_•¨£_q15
(

69 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

70 
q15_t
 * 
pSrc
,

71 
q15_t
 * 
pD°
,

72 
q15_t
 * 
pS¸©chIn
,

73 
q31_t
 * 
pS¸©chOut
,

74 
uöt32_t
 
blockSize
)

77 
q15_t
 *
pSèã
 = 
S
->pState;

78 
q15_t
 *
pIn
 = 
pSrc
;

79 
q15_t
 *
pOut
 = 
pD°
;

80 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

81 
q15_t
 *
px
;

82 
q15_t
 *
pb
 = 
pS¸©chIn
;

83 
q15_t
 *
py
 = 
pSèã
;

84 
öt32_t
 *
pT≠Dñay
 = 
S
->pTapDelay;

85 
uöt32_t
 
dñaySize
 = 
S
->
maxDñay
 + 
blockSize
;

86 
uöt16_t
 
numT≠s
 = 
S
->numTaps;

87 
öt32_t
 
ªadIndex
;

88 
uöt32_t
 
èpC¡
, 
blkC¡
;

89 
q15_t
 
c€ff
 = *
pC€ffs
++;

90 
q31_t
 *
pS¸2
 = 
pS¸©chOut
;

93 #i‚de‡
ARM_MATH_CM0_FAMILY


97 
q31_t
 
ö1
, 
ö2
;

102 
	`¨m_cúcuœrWrôe_q15
(
py
, 
dñaySize
, &
S
->
°©eIndex
, 1, 
pIn
, 1, 
blockSize
);

105 
èpC¡
 = 
numT≠s
;

108 
ªadIndex
 = (
S
->
°©eIndex
 - 
blockSize
Ë- *
pT≠Dñay
++;

111 if(
ªadIndex
 < 0)

113 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

117 
py
 = 
pSèã
;

120 
	`¨m_cúcuœrRód_q15
(
py
, 
dñaySize
, &
ªadIndex
, 1,

121 
pb
,Öb, 
blockSize
, 1, blockSize);

124 
px
 = 
pb
;

127 
pS¸©chOut
 = 
pS¸2
;

131 
blkC¡
 = 
blockSize
 >> 2;

133 
blkC¡
 > 0u)

136 *
pS¸©chOut
++ = ((
q31_t
Ë* 
px
++ * 
c€ff
);

137 *
pS¸©chOut
++ = ((
q31_t
Ë* 
px
++ * 
c€ff
);

138 *
pS¸©chOut
++ = ((
q31_t
Ë* 
px
++ * 
c€ff
);

139 *
pS¸©chOut
++ = ((
q31_t
Ë* 
px
++ * 
c€ff
);

142 
blkC¡
--;

147 
blkC¡
 = 
blockSize
 % 0x4u;

149 
blkC¡
 > 0u)

152 *
pS¸©chOut
++ = ((
q31_t
Ë* 
px
++ * 
c€ff
);

155 
blkC¡
--;

160 
c€ff
 = *
pC€ffs
++;

163 
ªadIndex
 = (
S
->
°©eIndex
 - 
blockSize
Ë- *
pT≠Dñay
++;

166 if(
ªadIndex
 < 0)

168 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

172 
èpC¡
 = (
uöt32_t
Ë
numT≠s
 - 2u;

174 
èpC¡
 > 0u)

177 
py
 = 
pSèã
;

180 
	`¨m_cúcuœrRód_q15
(
py
, 
dñaySize
, &
ªadIndex
, 1,

181 
pb
,Öb, 
blockSize
, 1, blockSize);

184 
px
 = 
pb
;

187 
pS¸©chOut
 = 
pS¸2
;

191 
blkC¡
 = 
blockSize
 >> 2;

193 
blkC¡
 > 0u)

196 *
pS¸©chOut
++ +(
q31_t
Ë* 
px
++ * 
c€ff
;

197 *
pS¸©chOut
++ +(
q31_t
Ë* 
px
++ * 
c€ff
;

198 *
pS¸©chOut
++ +(
q31_t
Ë* 
px
++ * 
c€ff
;

199 *
pS¸©chOut
++ +(
q31_t
Ë* 
px
++ * 
c€ff
;

202 
blkC¡
--;

207 
blkC¡
 = 
blockSize
 % 0x4u;

209 
blkC¡
 > 0u)

212 *
pS¸©chOut
++ +(
q31_t
Ë* 
px
++ * 
c€ff
;

215 
blkC¡
--;

220 
c€ff
 = *
pC€ffs
++;

223 
ªadIndex
 = (
S
->
°©eIndex
 - 
blockSize
Ë- *
pT≠Dñay
++;

226 if(
ªadIndex
 < 0)

228 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

232 
èpC¡
--;

238 
py
 = 
pSèã
;

241 
	`¨m_cúcuœrRód_q15
(
py
, 
dñaySize
, &
ªadIndex
, 1,

242 
pb
,Öb, 
blockSize
, 1, blockSize);

245 
px
 = 
pb
;

248 
pS¸©chOut
 = 
pS¸2
;

252 
blkC¡
 = 
blockSize
 >> 2;

254 
blkC¡
 > 0u)

257 *
pS¸©chOut
++ +(
q31_t
Ë* 
px
++ * 
c€ff
;

258 *
pS¸©chOut
++ +(
q31_t
Ë* 
px
++ * 
c€ff
;

259 *
pS¸©chOut
++ +(
q31_t
Ë* 
px
++ * 
c€ff
;

260 *
pS¸©chOut
++ +(
q31_t
Ë* 
px
++ * 
c€ff
;

263 
blkC¡
--;

268 
blkC¡
 = 
blockSize
 % 0x4u;

270 
blkC¡
 > 0u)

273 *
pS¸©chOut
++ +(
q31_t
Ë* 
px
++ * 
c€ff
;

276 
blkC¡
--;

282 
blkC¡
 = 
blockSize
 >> 2;

284 
blkC¡
 > 0u)

286 
ö1
 = *
pS¸2
++;

287 
ö2
 = *
pS¸2
++;

289 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


291 *
	`__SIMD32
(
pOut
)++ =

292 
	`__PKHBT
((
q15_t
Ë
	`__SSAT
(
ö1
 >> 15, 16), (q15_tË__SSAT(
ö2
 >> 15, 16),

296 *
	`__SIMD32
(
pOut
)++ =

297 
	`__PKHBT
((
q15_t
Ë
	`__SSAT
(
ö2
 >> 15, 16), (q15_tË__SSAT(
ö1
 >> 15, 16),

302 
ö1
 = *
pS¸2
++;

304 
ö2
 = *
pS¸2
++;

306 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


308 *
	`__SIMD32
(
pOut
)++ =

309 
	`__PKHBT
((
q15_t
Ë
	`__SSAT
(
ö1
 >> 15, 16), (q15_tË__SSAT(
ö2
 >> 15, 16),

314 *
	`__SIMD32
(
pOut
)++ =

315 
	`__PKHBT
((
q15_t
Ë
	`__SSAT
(
ö2
 >> 15, 16), (q15_tË__SSAT(
ö1
 >> 15, 16),

321 
blkC¡
--;

327 
blkC¡
 = 
blockSize
 % 0x4u;

329 
blkC¡
 > 0u)

331 *
pOut
++ = (
q15_t
Ë
	`__SSAT
(*
pS¸2
++ >> 15, 16);

332 
blkC¡
--;

341 
	`¨m_cúcuœrWrôe_q15
(
py
, 
dñaySize
, &
S
->
°©eIndex
, 1, 
pIn
, 1, 
blockSize
);

344 
èpC¡
 = 
numT≠s
;

347 
ªadIndex
 = (
S
->
°©eIndex
 - 
blockSize
Ë- *
pT≠Dñay
++;

350 if(
ªadIndex
 < 0)

352 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

356 
py
 = 
pSèã
;

359 
	`¨m_cúcuœrRód_q15
(
py
, 
dñaySize
, &
ªadIndex
, 1,

360 
pb
,Öb, 
blockSize
, 1, blockSize);

363 
px
 = 
pb
;

366 
pS¸©chOut
 = 
pS¸2
;

368 
blkC¡
 = 
blockSize
;

370 
blkC¡
 > 0u)

373 *
pS¸©chOut
++ = ((
q31_t
Ë* 
px
++ * 
c€ff
);

376 
blkC¡
--;

381 
c€ff
 = *
pC€ffs
++;

384 
ªadIndex
 = (
S
->
°©eIndex
 - 
blockSize
Ë- *
pT≠Dñay
++;

387 if(
ªadIndex
 < 0)

389 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

393 
èpC¡
 = (
uöt32_t
Ë
numT≠s
 - 2u;

395 
èpC¡
 > 0u)

398 
py
 = 
pSèã
;

401 
	`¨m_cúcuœrRód_q15
(
py
, 
dñaySize
, &
ªadIndex
, 1,

402 
pb
,Öb, 
blockSize
, 1, blockSize);

405 
px
 = 
pb
;

408 
pS¸©chOut
 = 
pS¸2
;

410 
blkC¡
 = 
blockSize
;

412 
blkC¡
 > 0u)

415 *
pS¸©chOut
++ +(
q31_t
Ë* 
px
++ * 
c€ff
;

418 
blkC¡
--;

423 
c€ff
 = *
pC€ffs
++;

426 
ªadIndex
 = (
S
->
°©eIndex
 - 
blockSize
Ë- *
pT≠Dñay
++;

429 if(
ªadIndex
 < 0)

431 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

435 
èpC¡
--;

441 
py
 = 
pSèã
;

444 
	`¨m_cúcuœrRód_q15
(
py
, 
dñaySize
, &
ªadIndex
, 1,

445 
pb
,Öb, 
blockSize
, 1, blockSize);

448 
px
 = 
pb
;

451 
pS¸©chOut
 = 
pS¸2
;

453 
blkC¡
 = 
blockSize
;

455 
blkC¡
 > 0u)

458 *
pS¸©chOut
++ +(
q31_t
Ë* 
px
++ * 
c€ff
;

461 
blkC¡
--;

467 
blkC¡
 = 
blockSize
;

469 
blkC¡
 > 0u)

471 *
pOut
++ = (
q15_t
Ë
	`__SSAT
(*
pS¸2
++ >> 15, 16);

472 
blkC¡
--;

477 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_q31.c

40 
	~"¨m_m©h.h
"

66 
	$¨m_fú_•¨£_q31
(

67 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

68 
q31_t
 * 
pSrc
,

69 
q31_t
 * 
pD°
,

70 
q31_t
 * 
pS¸©chIn
,

71 
uöt32_t
 
blockSize
)

74 
q31_t
 *
pSèã
 = 
S
->pState;

75 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

76 
q31_t
 *
px
;

77 
q31_t
 *
py
 = 
pSèã
;

78 
q31_t
 *
pb
 = 
pS¸©chIn
;

79 
q31_t
 *
pOut
;

80 
q63_t
 
out
;

81 
öt32_t
 *
pT≠Dñay
 = 
S
->pTapDelay;

82 
uöt32_t
 
dñaySize
 = 
S
->
maxDñay
 + 
blockSize
;

83 
uöt16_t
 
numT≠s
 = 
S
->numTaps;

84 
öt32_t
 
ªadIndex
;

85 
uöt32_t
 
èpC¡
, 
blkC¡
;

86 
q31_t
 
c€ff
 = *
pC€ffs
++;

87 
q31_t
 
ö
;

92 
	`¨m_cúcuœrWrôe_f32
((
öt32_t
 *Ë
py
, 
dñaySize
, &
S
->
°©eIndex
, 1,

93 (
öt32_t
 *Ë
pSrc
, 1, 
blockSize
);

96 
ªadIndex
 = (
öt32_t
Ë(
S
->
°©eIndex
 - 
blockSize
Ë- *
pT≠Dñay
++;

99 if(
ªadIndex
 < 0)

101 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

105 
py
 = 
pSèã
;

108 
	`¨m_cúcuœrRód_f32
((
öt32_t
 *Ë
py
, 
dñaySize
, &
ªadIndex
, 1,

109 (
öt32_t
 *Ë
pb
, (öt32_à*Ëpb, 
blockSize
, 1,

110 
blockSize
);

113 
px
 = 
pb
;

116 
pOut
 = 
pD°
;

119 #i‚de‡
ARM_MATH_CM0_FAMILY


125 
blkC¡
 = 
blockSize
 >> 2;

127 
blkC¡
 > 0u)

130 *
pOut
++ = (
q31_t
Ë(((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32);

131 *
pOut
++ = (
q31_t
Ë(((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32);

132 *
pOut
++ = (
q31_t
Ë(((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32);

133 *
pOut
++ = (
q31_t
Ë(((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32);

136 
blkC¡
--;

141 
blkC¡
 = 
blockSize
 % 0x4u;

143 
blkC¡
 > 0u)

146 *
pOut
++ = (
q31_t
Ë(((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32);

149 
blkC¡
--;

154 
c€ff
 = *
pC€ffs
++;

157 
ªadIndex
 = (
öt32_t
Ë(
S
->
°©eIndex
 - 
blockSize
Ë- *
pT≠Dñay
++;

160 if(
ªadIndex
 < 0)

162 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

166 
èpC¡
 = (
uöt32_t
Ë
numT≠s
 - 2u;

168 
èpC¡
 > 0u)

171 
py
 = 
pSèã
;

174 
	`¨m_cúcuœrRód_f32
((
öt32_t
 *Ë
py
, 
dñaySize
, &
ªadIndex
, 1,

175 (
öt32_t
 *Ë
pb
, (öt32_à*Ëpb, 
blockSize
, 1,

176 
blockSize
);

179 
px
 = 
pb
;

182 
pOut
 = 
pD°
;

186 
blkC¡
 = 
blockSize
 >> 2;

188 
blkC¡
 > 0u)

190 
out
 = *
pOut
;

191 
out
 +((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32;

192 *
pOut
++ = (
q31_t
Ë(
out
);

194 
out
 = *
pOut
;

195 
out
 +((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32;

196 *
pOut
++ = (
q31_t
Ë(
out
);

198 
out
 = *
pOut
;

199 
out
 +((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32;

200 *
pOut
++ = (
q31_t
Ë(
out
);

202 
out
 = *
pOut
;

203 
out
 +((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32;

204 *
pOut
++ = (
q31_t
Ë(
out
);

207 
blkC¡
--;

212 
blkC¡
 = 
blockSize
 % 0x4u;

214 
blkC¡
 > 0u)

217 
out
 = *
pOut
;

218 
out
 +((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32;

219 *
pOut
++ = (
q31_t
Ë(
out
);

222 
blkC¡
--;

227 
c€ff
 = *
pC€ffs
++;

230 
ªadIndex
 = (
öt32_t
Ë(
S
->
°©eIndex
 - 
blockSize
Ë- *
pT≠Dñay
++;

233 if(
ªadIndex
 < 0)

235 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

239 
èpC¡
--;

245 
py
 = 
pSèã
;

248 
	`¨m_cúcuœrRód_f32
((
öt32_t
 *Ë
py
, 
dñaySize
, &
ªadIndex
, 1,

249 (
öt32_t
 *Ë
pb
, (öt32_à*Ëpb, 
blockSize
, 1,

250 
blockSize
);

253 
px
 = 
pb
;

256 
pOut
 = 
pD°
;

260 
blkC¡
 = 
blockSize
 >> 2;

262 
blkC¡
 > 0u)

264 
out
 = *
pOut
;

265 
out
 +((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32;

266 *
pOut
++ = (
q31_t
Ë(
out
);

268 
out
 = *
pOut
;

269 
out
 +((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32;

270 *
pOut
++ = (
q31_t
Ë(
out
);

272 
out
 = *
pOut
;

273 
out
 +((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32;

274 *
pOut
++ = (
q31_t
Ë(
out
);

276 
out
 = *
pOut
;

277 
out
 +((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32;

278 *
pOut
++ = (
q31_t
Ë(
out
);

281 
blkC¡
--;

286 
blkC¡
 = 
blockSize
 % 0x4u;

288 
blkC¡
 > 0u)

291 
out
 = *
pOut
;

292 
out
 +((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32;

293 *
pOut
++ = (
q31_t
Ë(
out
);

296 
blkC¡
--;

300 
pOut
 = 
pD°
;

305 
blkC¡
 = 
blockSize
 >> 2;

307 
blkC¡
 > 0u)

309 
ö
 = *
pOut
 << 1;

310 *
pOut
++ = 
ö
;

311 
ö
 = *
pOut
 << 1;

312 *
pOut
++ = 
ö
;

313 
ö
 = *
pOut
 << 1;

314 *
pOut
++ = 
ö
;

315 
ö
 = *
pOut
 << 1;

316 *
pOut
++ = 
ö
;

319 
blkC¡
--;

324 
blkC¡
 = 
blockSize
 % 0x4u;

326 
blkC¡
 > 0u)

328 
ö
 = *
pOut
 << 1;

329 *
pOut
++ = 
ö
;

332 
blkC¡
--;

338 
blkC¡
 = 
blockSize
;

340 
blkC¡
 > 0u)

343 *
pOut
++ = (
q31_t
Ë(((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32);

346 
blkC¡
--;

351 
c€ff
 = *
pC€ffs
++;

354 
ªadIndex
 = (
öt32_t
Ë(
S
->
°©eIndex
 - 
blockSize
Ë- *
pT≠Dñay
++;

357 if(
ªadIndex
 < 0)

359 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

363 
èpC¡
 = (
uöt32_t
Ë
numT≠s
 - 2u;

365 
èpC¡
 > 0u)

368 
py
 = 
pSèã
;

371 
	`¨m_cúcuœrRód_f32
((
öt32_t
 *Ë
py
, 
dñaySize
, &
ªadIndex
, 1,

372 (
öt32_t
 *Ë
pb
, (öt32_à*Ëpb, 
blockSize
, 1,

373 
blockSize
);

376 
px
 = 
pb
;

379 
pOut
 = 
pD°
;

381 
blkC¡
 = 
blockSize
;

383 
blkC¡
 > 0u)

386 
out
 = *
pOut
;

387 
out
 +((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32;

388 *
pOut
++ = (
q31_t
Ë(
out
);

391 
blkC¡
--;

396 
c€ff
 = *
pC€ffs
++;

399 
ªadIndex
 = (
öt32_t
Ë(
S
->
°©eIndex
 - 
blockSize
Ë- *
pT≠Dñay
++;

402 if(
ªadIndex
 < 0)

404 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

408 
èpC¡
--;

414 
py
 = 
pSèã
;

417 
	`¨m_cúcuœrRód_f32
((
öt32_t
 *Ë
py
, 
dñaySize
, &
ªadIndex
, 1,

418 (
öt32_t
 *Ë
pb
, (öt32_à*Ëpb, 
blockSize
, 1,

419 
blockSize
);

422 
px
 = 
pb
;

425 
pOut
 = 
pD°
;

427 
blkC¡
 = 
blockSize
;

429 
blkC¡
 > 0u)

432 
out
 = *
pOut
;

433 
out
 +((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32;

434 *
pOut
++ = (
q31_t
Ë(
out
);

437 
blkC¡
--;

441 
pOut
 = 
pD°
;

444 
blkC¡
 = 
blockSize
;

446 
blkC¡
 > 0u)

448 
ö
 = *
pOut
 << 1;

449 *
pOut
++ = 
ö
;

452 
blkC¡
--;

457 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_q7.c

40 
	~"¨m_m©h.h
"

73 
	$¨m_fú_•¨£_q7
(

74 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

75 
q7_t
 * 
pSrc
,

76 
q7_t
 * 
pD°
,

77 
q7_t
 * 
pS¸©chIn
,

78 
q31_t
 * 
pS¸©chOut
,

79 
uöt32_t
 
blockSize
)

82 
q7_t
 *
pSèã
 = 
S
->pState;

83 
q7_t
 *
pC€ffs
 = 
S
->pCoeffs;

84 
q7_t
 *
px
;

85 
q7_t
 *
py
 = 
pSèã
;

86 
q7_t
 *
pb
 = 
pS¸©chIn
;

87 
q7_t
 *
pOut
 = 
pD°
;

88 
öt32_t
 *
pT≠Dñay
 = 
S
->pTapDelay;

89 
uöt32_t
 
dñaySize
 = 
S
->
maxDñay
 + 
blockSize
;

90 
uöt16_t
 
numT≠s
 = 
S
->numTaps;

91 
öt32_t
 
ªadIndex
;

92 
uöt32_t
 
èpC¡
, 
blkC¡
;

93 
q7_t
 
c€ff
 = *
pC€ffs
++;

94 
q31_t
 *
pS¸2
 = 
pS¸©chOut
;

95 
q31_t
 
ö
;

98 #i‚de‡
ARM_MATH_CM0_FAMILY


102 
q7_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

106 
	`¨m_cúcuœrWrôe_q7
(
py
, (
öt32_t
Ë
dñaySize
, &
S
->
°©eIndex
, 1, 
pSrc
, 1,

107 
blockSize
);

110 
èpC¡
 = 
numT≠s
;

113 
ªadIndex
 = ((
öt32_t
Ë
S
->
°©eIndex
 - (öt32_tË
blockSize
Ë- *
pT≠Dñay
++;

116 if(
ªadIndex
 < 0)

118 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

122 
py
 = 
pSèã
;

125 
	`¨m_cúcuœrRód_q7
(
py
, (
öt32_t
Ë
dñaySize
, &
ªadIndex
, 1, 
pb
,Öb,

126 (
öt32_t
Ë
blockSize
, 1, blockSize);

129 
px
 = 
pb
;

132 
pS¸©chOut
 = 
pS¸2
;

136 
blkC¡
 = 
blockSize
 >> 2;

138 
blkC¡
 > 0u)

141 *
pS¸©chOut
++ = ((
q31_t
Ë* 
px
++ * 
c€ff
);

142 *
pS¸©chOut
++ = ((
q31_t
Ë* 
px
++ * 
c€ff
);

143 *
pS¸©chOut
++ = ((
q31_t
Ë* 
px
++ * 
c€ff
);

144 *
pS¸©chOut
++ = ((
q31_t
Ë* 
px
++ * 
c€ff
);

147 
blkC¡
--;

152 
blkC¡
 = 
blockSize
 % 0x4u;

154 
blkC¡
 > 0u)

157 *
pS¸©chOut
++ = ((
q31_t
Ë* 
px
++ * 
c€ff
);

160 
blkC¡
--;

165 
c€ff
 = *
pC€ffs
++;

168 
ªadIndex
 = ((
öt32_t
Ë
S
->
°©eIndex
 - (öt32_tË
blockSize
Ë- *
pT≠Dñay
++;

171 if(
ªadIndex
 < 0)

173 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

177 
èpC¡
 = (
uöt32_t
Ë
numT≠s
 - 2u;

179 
èpC¡
 > 0u)

182 
py
 = 
pSèã
;

185 
	`¨m_cúcuœrRód_q7
(
py
, (
öt32_t
Ë
dñaySize
, &
ªadIndex
, 1, 
pb
,Öb,

186 (
öt32_t
Ë
blockSize
, 1, blockSize);

189 
px
 = 
pb
;

192 
pS¸©chOut
 = 
pS¸2
;

196 
blkC¡
 = 
blockSize
 >> 2;

198 
blkC¡
 > 0u)

201 
ö
 = *
pS¸©chOut
 + ((
q31_t
Ë* 
px
++ * 
c€ff
);

202 *
pS¸©chOut
++ = 
ö
;

203 
ö
 = *
pS¸©chOut
 + ((
q31_t
Ë* 
px
++ * 
c€ff
);

204 *
pS¸©chOut
++ = 
ö
;

205 
ö
 = *
pS¸©chOut
 + ((
q31_t
Ë* 
px
++ * 
c€ff
);

206 *
pS¸©chOut
++ = 
ö
;

207 
ö
 = *
pS¸©chOut
 + ((
q31_t
Ë* 
px
++ * 
c€ff
);

208 *
pS¸©chOut
++ = 
ö
;

211 
blkC¡
--;

216 
blkC¡
 = 
blockSize
 % 0x4u;

218 
blkC¡
 > 0u)

221 
ö
 = *
pS¸©chOut
 + ((
q31_t
Ë* 
px
++ * 
c€ff
);

222 *
pS¸©chOut
++ = 
ö
;

225 
blkC¡
--;

230 
c€ff
 = *
pC€ffs
++;

233 
ªadIndex
 = ((
öt32_t
Ë
S
->
°©eIndex
 -

234 (
öt32_t
Ë
blockSize
Ë- *
pT≠Dñay
++;

237 if(
ªadIndex
 < 0)

239 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

243 
èpC¡
--;

249 
py
 = 
pSèã
;

252 
	`¨m_cúcuœrRód_q7
(
py
, (
öt32_t
Ë
dñaySize
, &
ªadIndex
, 1, 
pb
,Öb,

253 (
öt32_t
Ë
blockSize
, 1, blockSize);

256 
px
 = 
pb
;

259 
pS¸©chOut
 = 
pS¸2
;

263 
blkC¡
 = 
blockSize
 >> 2;

265 
blkC¡
 > 0u)

268 
ö
 = *
pS¸©chOut
 + ((
q31_t
Ë* 
px
++ * 
c€ff
);

269 *
pS¸©chOut
++ = 
ö
;

270 
ö
 = *
pS¸©chOut
 + ((
q31_t
Ë* 
px
++ * 
c€ff
);

271 *
pS¸©chOut
++ = 
ö
;

272 
ö
 = *
pS¸©chOut
 + ((
q31_t
Ë* 
px
++ * 
c€ff
);

273 *
pS¸©chOut
++ = 
ö
;

274 
ö
 = *
pS¸©chOut
 + ((
q31_t
Ë* 
px
++ * 
c€ff
);

275 *
pS¸©chOut
++ = 
ö
;

278 
blkC¡
--;

283 
blkC¡
 = 
blockSize
 % 0x4u;

285 
blkC¡
 > 0u)

288 
ö
 = *
pS¸©chOut
 + ((
q31_t
Ë* 
px
++ * 
c€ff
);

289 *
pS¸©chOut
++ = 
ö
;

292 
blkC¡
--;

298 
blkC¡
 = 
blockSize
 >> 2;

300 
blkC¡
 > 0u)

302 
ö1
 = (
q7_t
Ë
	`__SSAT
(*
pS¸2
++ >> 7, 8);

303 
ö2
 = (
q7_t
Ë
	`__SSAT
(*
pS¸2
++ >> 7, 8);

304 
ö3
 = (
q7_t
Ë
	`__SSAT
(*
pS¸2
++ >> 7, 8);

305 
ö4
 = (
q7_t
Ë
	`__SSAT
(*
pS¸2
++ >> 7, 8);

307 *
	`__SIMD32
(
pOut
)++ = 
	`__PACKq7
(
ö1
, 
ö2
, 
ö3
, 
ö4
);

310 
blkC¡
--;

315 
blkC¡
 = 
blockSize
 % 0x4u;

317 
blkC¡
 > 0u)

319 *
pOut
++ = (
q7_t
Ë
	`__SSAT
(*
pS¸2
++ >> 7, 8);

322 
blkC¡
--;

331 
	`¨m_cúcuœrWrôe_q7
(
py
, (
öt32_t
Ë
dñaySize
, &
S
->
°©eIndex
, 1, 
pSrc
, 1,

332 
blockSize
);

335 
èpC¡
 = 
numT≠s
;

338 
ªadIndex
 = ((
öt32_t
Ë
S
->
°©eIndex
 - (öt32_tË
blockSize
Ë- *
pT≠Dñay
++;

341 if(
ªadIndex
 < 0)

343 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

347 
py
 = 
pSèã
;

350 
	`¨m_cúcuœrRód_q7
(
py
, (
öt32_t
Ë
dñaySize
, &
ªadIndex
, 1, 
pb
,Öb,

351 (
öt32_t
Ë
blockSize
, 1, blockSize);

354 
px
 = 
pb
;

357 
pS¸©chOut
 = 
pS¸2
;

360 
blkC¡
 = 
blockSize
;

362 
blkC¡
 > 0u)

365 *
pS¸©chOut
++ = ((
q31_t
Ë* 
px
++ * 
c€ff
);

368 
blkC¡
--;

373 
c€ff
 = *
pC€ffs
++;

376 
ªadIndex
 = ((
öt32_t
Ë
S
->
°©eIndex
 - (öt32_tË
blockSize
Ë- *
pT≠Dñay
++;

379 if(
ªadIndex
 < 0)

381 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

385 
èpC¡
 = (
uöt32_t
Ë
numT≠s
 - 2u;

387 
èpC¡
 > 0u)

390 
py
 = 
pSèã
;

393 
	`¨m_cúcuœrRód_q7
(
py
, (
öt32_t
Ë
dñaySize
, &
ªadIndex
, 1, 
pb
,Öb,

394 (
öt32_t
Ë
blockSize
, 1, blockSize);

397 
px
 = 
pb
;

400 
pS¸©chOut
 = 
pS¸2
;

403 
blkC¡
 = 
blockSize
;

405 
blkC¡
 > 0u)

408 
ö
 = *
pS¸©chOut
 + ((
q31_t
Ë* 
px
++ * 
c€ff
);

409 *
pS¸©chOut
++ = 
ö
;

412 
blkC¡
--;

417 
c€ff
 = *
pC€ffs
++;

420 
ªadIndex
 =

421 ((
öt32_t
Ë
S
->
°©eIndex
 - (öt32_tË
blockSize
Ë- *
pT≠Dñay
++;

424 if(
ªadIndex
 < 0)

426 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

430 
èpC¡
--;

436 
py
 = 
pSèã
;

439 
	`¨m_cúcuœrRód_q7
(
py
, (
öt32_t
Ë
dñaySize
, &
ªadIndex
, 1, 
pb
,Öb,

440 (
öt32_t
Ë
blockSize
, 1, blockSize);

443 
px
 = 
pb
;

446 
pS¸©chOut
 = 
pS¸2
;

449 
blkC¡
 = 
blockSize
;

451 
blkC¡
 > 0u)

454 
ö
 = *
pS¸©chOut
 + ((
q31_t
Ë* 
px
++ * 
c€ff
);

455 *
pS¸©chOut
++ = 
ö
;

458 
blkC¡
--;

464 
blkC¡
 = 
blockSize
;

466 
blkC¡
 > 0u)

468 *
pOut
++ = (
q7_t
Ë
	`__SSAT
(*
pS¸2
++ >> 7, 8);

471 
blkC¡
--;

476 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_iir_lattice_f32.c

41 
	~"¨m_m©h.h
"

130 #i‚de‡
ARM_MATH_CM0_FAMILY


134 
	$¨m_iú_œâi˚_f32
(

135 c⁄° 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

136 
Êﬂt32_t
 * 
pSrc
,

137 
Êﬂt32_t
 * 
pD°
,

138 
uöt32_t
 
blockSize
)

140 
Êﬂt32_t
 
‚ext1
, 
gcuº1
, 
g√xt
;

141 
Êﬂt32_t
 
acc
;

142 
uöt32_t
 
blkC¡
, 
èpC¡
;

143 
Êﬂt32_t
 *
px1
, *
px2
, *
pk
, *
pv
;

144 
uöt32_t
 
numSèges
 = 
S
->numStages;

145 
Êﬂt32_t
 *
pSèã
;

146 
Êﬂt32_t
 *
pSèãCu∫t
;

147 
Êﬂt32_t
 
k1
, 
k2
;

148 
Êﬂt32_t
 
v1
, 
v2
, 
v3
, 
v4
;

149 
Êﬂt32_t
 
gcuº2
;

150 
Êﬂt32_t
 
‚ext2
;

153 
blkC¡
 = 
blockSize
;

156 
pSèã
 = &
S
->pState[0];

159 
blkC¡
 > 0u)

163 
‚ext2
 = *
pSrc
++;

166 
pv
 = &
S
->
pvC€ffs
[0];

168 
pk
 = &
S
->
pkC€ffs
[0];

171 
px1
 = 
pSèã
;

173 
px2
 = 
pSèã
;

176 
acc
 = 0.0;

179 
èpC¡
 = (
numSèges
) >> 2;

181 
èpC¡
 > 0u)

184 
gcuº1
 = *
px1
;

187 
k1
 = *
pk
;

190 
‚ext1
 = 
‚ext2
 - (
k1
 * 
gcuº1
);

193 
v1
 = *
pv
;

196 
k2
 = *(
pk
 + 1u);

199 
gcuº2
 = *(
px1
 + 1u);

202 
v2
 = *(
pv
 + 1u);

205 
‚ext2
 = 
‚ext1
 - (
k2
 * 
gcuº2
);

208 
g√xt
 = 
gcuº1
 + (
k1
 * 
‚ext1
);

211 
k1
 = *(
pk
 + 2u);

214 *
px2
++ = 
g√xt
;

217 
gcuº1
 = *(
px1
 + 2u);

220 
acc
 +(
g√xt
 * 
v1
);

223 
‚ext1
 = 
‚ext2
 - (
k1
 * 
gcuº1
);

226 
g√xt
 = 
gcuº2
 + (
k2
 * 
‚ext2
);

229 
gcuº2
 = *(
px1
 + 3u);

232 
acc
 +(
g√xt
 * 
v2
);

235 
k2
 = *(
pk
 + 3u);

238 *
px2
++ = 
g√xt
;

241 
‚ext2
 = 
‚ext1
 - (
k2
 * 
gcuº2
);

244 
g√xt
 = 
gcuº1
 + (
k1
 * 
‚ext1
);

247 
v3
 = *(
pv
 + 2u);

250 
acc
 +(
g√xt
 * 
v3
);

253 *
px2
++ = 
g√xt
;

256 
pk
 += 4u;

259 
g√xt
 = (
‚ext2
 * 
k2
Ë+ 
gcuº2
;

262 
v4
 = *(
pv
 + 3u);

265 
acc
 +(
g√xt
 * 
v4
);

268 *
px2
++ = 
g√xt
;

271 
px1
 += 4u;

272 
pv
 += 4u;

274 
èpC¡
--;

279 
èpC¡
 = (
numSèges
) % 0x4u;

281 
èpC¡
 > 0u)

283 
gcuº1
 = *
px1
++;

285 
‚ext1
 = 
‚ext2
 - ((*
pk
Ë* 
gcuº1
);

286 
g√xt
 = (
‚ext1
 * (*
pk
++)Ë+ 
gcuº1
;

288 
acc
 +(
g√xt
 * (*
pv
++));

289 *
px2
++ = 
g√xt
;

290 
‚ext2
 = 
‚ext1
;

292 
èpC¡
--;

297 
acc
 +(
‚ext2
 * (*
pv
));

299 *
px2
++ = 
‚ext2
;

302 *
pD°
++ = 
acc
;

305 
pSèã
 =ÖState + 1u;

307 
blkC¡
--;

315 
pSèãCu∫t
 = &
S
->
pSèã
[0];

316 
pSèã
 = &
S
->pSèã[
blockSize
];

318 
èpC¡
 = 
numSèges
 >> 2u;

321 
èpC¡
 > 0u)

323 *
pSèãCu∫t
++ = *
pSèã
++;

324 *
pSèãCu∫t
++ = *
pSèã
++;

325 *
pSèãCu∫t
++ = *
pSèã
++;

326 *
pSèãCu∫t
++ = *
pSèã
++;

329 
èpC¡
--;

334 
èpC¡
 = (
numSèges
) % 0x4u;

337 
èpC¡
 > 0u)

339 *
pSèãCu∫t
++ = *
pSèã
++;

342 
èpC¡
--;

344 
	}
}

348 
	$¨m_iú_œâi˚_f32
(

349 c⁄° 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

350 
Êﬂt32_t
 * 
pSrc
,

351 
Êﬂt32_t
 * 
pD°
,

352 
uöt32_t
 
blockSize
)

354 
Êﬂt32_t
 
fcuº
, 
‚ext
 = 0, 
gcuº
, 
g√xt
;

355 
Êﬂt32_t
 
acc
;

356 
uöt32_t
 
blkC¡
, 
èpC¡
;

357 
Êﬂt32_t
 *
px1
, *
px2
, *
pk
, *
pv
;

358 
uöt32_t
 
numSèges
 = 
S
->numStages;

359 
Êﬂt32_t
 *
pSèã
;

360 
Êﬂt32_t
 *
pSèãCu∫t
;

365 
blkC¡
 = 
blockSize
;

367 
pSèã
 = &
S
->pState[0];

370 
blkC¡
 > 0u)

374 
fcuº
 = *
pSrc
++;

377 
px1
 = 
pSèã
;

379 
px2
 = 
pSèã
;

381 
acc
 = 0.0f;

383 
pv
 = &
S
->
pvC€ffs
[0];

385 
pk
 = &
S
->
pkC€ffs
[0];

389 
èpC¡
 = 
numSèges
;

391 
èpC¡
 > 0u)

393 
gcuº
 = *
px1
++;

395 
‚ext
 = 
fcuº
 - ((*
pk
Ë* 
gcuº
);

396 
g√xt
 = (
‚ext
 * (*
pk
++)Ë+ 
gcuº
;

399 
acc
 +(
g√xt
 * (*
pv
++));

400 *
px2
++ = 
g√xt
;

401 
fcuº
 = 
‚ext
;

404 
èpC¡
--;

409 
acc
 +(
‚ext
 * (*
pv
));

411 *
px2
++ = 
‚ext
;

414 *
pD°
++ = 
acc
;

417 
pSèã
 =ÖState + 1u;

418 
blkC¡
--;

426 
pSèãCu∫t
 = &
S
->
pSèã
[0];

427 
pSèã
 = &
S
->pSèã[
blockSize
];

429 
èpC¡
 = 
numSèges
;

432 
èpC¡
 > 0u)

434 *
pSèãCu∫t
++ = *
pSèã
++;

437 
èpC¡
--;

440 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_iir_lattice_init_f32.c

41 
	~"¨m_m©h.h
"

63 
	$¨m_iú_œâi˚_öô_f32
(

64 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

65 
uöt16_t
 
numSèges
,

66 
Êﬂt32_t
 * 
pkC€ffs
,

67 
Êﬂt32_t
 * 
pvC€ffs
,

68 
Êﬂt32_t
 * 
pSèã
,

69 
uöt32_t
 
blockSize
)

72 
S
->
numSèges
 =ÇumStages;

75 
S
->
pkC€ffs
 =ÖkCoeffs;

78 
S
->
pvC€ffs
 =ÖvCoeffs;

81 
	`mem£t
(
pSèã
, 0, (
numSèges
 + 
blockSize
Ë* (
Êﬂt32_t
));

84 
S
->
pSèã
 =ÖState;

87 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_iir_lattice_init_q15.c

41 
	~"¨m_m©h.h
"

63 
	$¨m_iú_œâi˚_öô_q15
(

64 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

65 
uöt16_t
 
numSèges
,

66 
q15_t
 * 
pkC€ffs
,

67 
q15_t
 * 
pvC€ffs
,

68 
q15_t
 * 
pSèã
,

69 
uöt32_t
 
blockSize
)

72 
S
->
numSèges
 =ÇumStages;

75 
S
->
pkC€ffs
 =ÖkCoeffs;

78 
S
->
pvC€ffs
 =ÖvCoeffs;

81 
	`mem£t
(
pSèã
, 0, (
numSèges
 + 
blockSize
Ë* (
q15_t
));

84 
S
->
pSèã
 =ÖState;

87 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_iir_lattice_init_q31.c

41 
	~"¨m_m©h.h
"

63 
	$¨m_iú_œâi˚_öô_q31
(

64 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

65 
uöt16_t
 
numSèges
,

66 
q31_t
 * 
pkC€ffs
,

67 
q31_t
 * 
pvC€ffs
,

68 
q31_t
 * 
pSèã
,

69 
uöt32_t
 
blockSize
)

72 
S
->
numSèges
 =ÇumStages;

75 
S
->
pkC€ffs
 =ÖkCoeffs;

78 
S
->
pvC€ffs
 =ÖvCoeffs;

81 
	`mem£t
(
pSèã
, 0, (
numSèges
 + 
blockSize
Ë* (
q31_t
));

84 
S
->
pSèã
 =ÖState;

87 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_iir_lattice_q15.c

41 
	~"¨m_m©h.h
"

71 
	$¨m_iú_œâi˚_q15
(

72 c⁄° 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

73 
q15_t
 * 
pSrc
,

74 
q15_t
 * 
pD°
,

75 
uöt32_t
 
blockSize
)

79 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
q31_t
 
fcuº
, 
‚ext
, 
gcuº
 = 0, 
g√xt
;

84 
q15_t
 
g√xt1
, 
g√xt2
;

85 
uöt32_t
 
°gC¡
;

86 
q63_t
 
acc
;

87 
uöt32_t
 
blkC¡
, 
èpC¡
;

88 
q15_t
 *
px1
, *
px2
, *
pk
, *
pv
;

89 
uöt32_t
 
numSèges
 = 
S
->numStages;

90 
q15_t
 *
pSèã
;

91 
q15_t
 *
pSèãCu∫t
;

92 
q15_t
 
out
;

93 
q31_t
 
v
;

94 #ifde‡
UNALIGNED_SUPPORT_DISABLE


95 
q15_t
 
v1
, 
v2
;

99 
blkC¡
 = 
blockSize
;

101 
pSèã
 = &
S
->pState[0];

104 
blkC¡
 > 0u)

108 
fcuº
 = *
pSrc
++;

111 
px1
 = 
pSèã
;

113 
px2
 = 
pSèã
;

115 
acc
 = 0;

117 
pv
 = &
S
->
pvC€ffs
[0];

119 
pk
 = &
S
->
pkC€ffs
[0];

123 
gcuº
 = *
px1
++;

125 
‚ext
 = 
fcuº
 - (((
q31_t
Ë
gcuº
 * (*
pk
)) >> 15);

126 
‚ext
 = 
	`__SSAT
(fnext, 16);

128 
g√xt
 = (((
q31_t
Ë
‚ext
 * (*
pk
++)Ë>> 15Ë+ 
gcuº
;

129 
g√xt
 = 
	`__SSAT
(gnext, 16);

131 *
px2
++ = (
q15_t
Ë
g√xt
;

133 
acc
 +(
q31_t
Ë((
g√xt
 * (*
pv
++)));

137 
fcuº
 = 
‚ext
;

140 
èpC¡
 = (
numSèges
 - 1u) >> 2;

142 
èpC¡
 > 0u)

147 
gcuº
 = *
px1
++;

150 
‚ext
 = 
fcuº
 - (((
q31_t
Ë
gcuº
 * (*
pk
)) >> 15);

151 
‚ext
 = 
	`__SSAT
(fnext, 16);

153 
g√xt
 = (((
q31_t
Ë
‚ext
 * (*
pk
++)Ë>> 15Ë+ 
gcuº
;

154 
g√xt1
 = (
q15_t
Ë
	`__SSAT
(
g√xt
, 16);

156 *
px2
++ = (
q15_t
Ë
g√xt1
;

161 
gcuº
 = *
px1
++;

164 
fcuº
 = 
‚ext
 - (((
q31_t
Ë
gcuº
 * (*
pk
)) >> 15);

165 
fcuº
 = 
	`__SSAT
(fcurr, 16);

167 
g√xt
 = (((
q31_t
Ë
fcuº
 * (*
pk
++)Ë>> 15Ë+ 
gcuº
;

168 
g√xt2
 = (
q15_t
Ë
	`__SSAT
(
g√xt
, 16);

170 *
px2
++ = (
q15_t
Ë
g√xt2
;

173 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


175 
v
 = *
	`__SIMD32
(
pv
)++;

179 
v1
 = *
pv
++;

180 
v2
 = *
pv
++;

182 #i‚de‡
ARM_MATH_BIG_ENDIAN


184 
v
 = 
	`__PKHBT
(
v1
, 
v2
, 16);

188 
v
 = 
	`__PKHBT
(
v2
, 
v1
, 16);

197 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


199 
g√xt
 = 
	`__PKHBT
(
g√xt1
, 
g√xt2
, 16);

203 
g√xt
 = 
	`__PKHBT
(
g√xt2
, 
g√xt1
, 16);

211 
acc
 = 
	`__SMLALD
(
g√xt
, 
v
,ácc);

216 
gcuº
 = *
px1
++;

219 
‚ext
 = 
fcuº
 - (((
q31_t
Ë
gcuº
 * (*
pk
)) >> 15);

220 
‚ext
 = 
	`__SSAT
(fnext, 16);

222 
g√xt
 = (((
q31_t
Ë
‚ext
 * (*
pk
++)Ë>> 15Ë+ 
gcuº
;

223 
g√xt1
 = (
q15_t
Ë
	`__SSAT
(
g√xt
, 16);

225 *
px2
++ = (
q15_t
Ë
g√xt1
;

230 
gcuº
 = *
px1
++;

233 
fcuº
 = 
‚ext
 - (((
q31_t
Ë
gcuº
 * (*
pk
)) >> 15);

234 
fcuº
 = 
	`__SSAT
(fcurr, 16);

236 
g√xt
 = (((
q31_t
Ë
fcuº
 * (*
pk
++)Ë>> 15Ë+ 
gcuº
;

237 
g√xt2
 = (
q15_t
Ë
	`__SSAT
(
g√xt
, 16);

239 *
px2
++ = (
q15_t
Ë
g√xt2
;

242 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


244 
v
 = *
	`__SIMD32
(
pv
)++;

248 
v1
 = *
pv
++;

249 
v2
 = *
pv
++;

251 #i‚de‡
ARM_MATH_BIG_ENDIAN


253 
v
 = 
	`__PKHBT
(
v1
, 
v2
, 16);

257 
v
 = 
	`__PKHBT
(
v2
, 
v1
, 16);

265 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


267 
g√xt
 = 
	`__PKHBT
(
g√xt1
, 
g√xt2
, 16);

271 
g√xt
 = 
	`__PKHBT
(
g√xt2
, 
g√xt1
, 16);

279 
acc
 = 
	`__SMLALD
(
g√xt
, 
v
,ácc);

281 
èpC¡
--;

285 
‚ext
 = 
fcuº
;

288 
èpC¡
 = (
numSèges
 - 1u) % 0x4u;

290 
èpC¡
 > 0u)

292 
gcuº
 = *
px1
++;

294 
‚ext
 = 
fcuº
 - (((
q31_t
Ë
gcuº
 * (*
pk
)) >> 15);

295 
‚ext
 = 
	`__SSAT
(fnext, 16);

296 
g√xt
 = (((
q31_t
Ë
‚ext
 * (*
pk
++)Ë>> 15Ë+ 
gcuº
;

297 
g√xt
 = 
	`__SSAT
(gnext, 16);

299 
acc
 +(
q31_t
Ë(((q31_tË
g√xt
 * (*
pv
++)));

300 *
px2
++ = (
q15_t
Ë
g√xt
;

301 
fcuº
 = 
‚ext
;

303 
èpC¡
--;

307 
acc
 +(
q31_t
Ë(((q31_tË
‚ext
 * (*
pv
++)));

309 
out
 = (
q15_t
Ë
	`__SSAT
(
acc
 >> 15, 16);

310 *
px2
++ = (
q15_t
Ë
‚ext
;

313 *
pD°
++ = 
out
;

316 
pSèã
 =ÖState + 1u;

317 
blkC¡
--;

324 
pSèãCu∫t
 = &
S
->
pSèã
[0];

325 
pSèã
 = &
S
->pSèã[
blockSize
];

327 
°gC¡
 = (
numSèges
 >> 2u);

330 
°gC¡
 > 0u)

332 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


334 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

335 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

339 *
pSèãCu∫t
++ = *
pSèã
++;

340 *
pSèãCu∫t
++ = *
pSèã
++;

341 *
pSèãCu∫t
++ = *
pSèã
++;

342 *
pSèãCu∫t
++ = *
pSèã
++;

347 
°gC¡
--;

352 
°gC¡
 = (
numSèges
) % 0x4u;

355 
°gC¡
 > 0u)

357 *
pSèãCu∫t
++ = *
pSèã
++;

360 
°gC¡
--;

367 
q31_t
 
fcuº
, 
‚ext
 = 0, 
gcuº
 = 0, 
g√xt
;

368 
uöt32_t
 
°gC¡
;

369 
q63_t
 
acc
;

370 
uöt32_t
 
blkC¡
, 
èpC¡
;

371 
q15_t
 *
px1
, *
px2
, *
pk
, *
pv
;

372 
uöt32_t
 
numSèges
 = 
S
->numStages;

373 
q15_t
 *
pSèã
;

374 
q15_t
 *
pSèãCu∫t
;

375 
q15_t
 
out
;

378 
blkC¡
 = 
blockSize
;

380 
pSèã
 = &
S
->pState[0];

383 
blkC¡
 > 0u)

387 
fcuº
 = *
pSrc
++;

390 
px1
 = 
pSèã
;

392 
px2
 = 
pSèã
;

394 
acc
 = 0;

396 
pv
 = &
S
->
pvC€ffs
[0];

398 
pk
 = &
S
->
pkC€ffs
[0];

400 
èpC¡
 = 
numSèges
;

402 
èpC¡
 > 0u)

404 
gcuº
 = *
px1
++;

407 
‚ext
 = 
fcuº
 - ((
gcuº
 * (*
pk
)) >> 15);

408 
‚ext
 = 
	`__SSAT
(fnext, 16);

410 
g√xt
 = ((
‚ext
 * (*
pk
++)Ë>> 15Ë+ 
gcuº
;

411 
g√xt
 = 
	`__SSAT
(gnext, 16);

414 
acc
 +(
q31_t
Ë((
g√xt
 * (*
pv
++)));

416 *
px2
++ = (
q15_t
Ë
g√xt
;

418 
fcuº
 = 
‚ext
;

420 
èpC¡
--;

424 
acc
 +(
q31_t
Ë((
‚ext
 * (*
pv
++)));

426 
out
 = (
q15_t
Ë
	`__SSAT
(
acc
 >> 15, 16);

427 *
px2
++ = (
q15_t
Ë
‚ext
;

430 *
pD°
++ = 
out
;

433 
pSèã
 =ÖState + 1u;

434 
blkC¡
--;

441 
pSèãCu∫t
 = &
S
->
pSèã
[0];

442 
pSèã
 = &
S
->pSèã[
blockSize
];

444 
°gC¡
 = 
numSèges
;

447 
°gC¡
 > 0u)

449 *
pSèãCu∫t
++ = *
pSèã
++;

452 
°gC¡
--;

457 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_iir_lattice_q31.c

41 
	~"¨m_m©h.h
"

70 
	$¨m_iú_œâi˚_q31
(

71 c⁄° 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

72 
q31_t
 * 
pSrc
,

73 
q31_t
 * 
pD°
,

74 
uöt32_t
 
blockSize
)

76 
q31_t
 
fcuº
, 
‚ext
 = 0, 
gcuº
 = 0, 
g√xt
;

77 
q63_t
 
acc
;

78 
uöt32_t
 
blkC¡
, 
èpC¡
;

79 
q31_t
 *
px1
, *
px2
, *
pk
, *
pv
;

80 
uöt32_t
 
numSèges
 = 
S
->numStages;

81 
q31_t
 *
pSèã
;

82 
q31_t
 *
pSèãCu∫t
;

84 
blkC¡
 = 
blockSize
;

86 
pSèã
 = &
S
->pState[0];

89 #i‚de‡
ARM_MATH_CM0_FAMILY


94 
blkC¡
 > 0u)

98 
fcuº
 = *
pSrc
++;

101 
px1
 = 
pSèã
;

103 
px2
 = 
pSèã
;

105 
acc
 = 0;

107 
pv
 = &
S
->
pvC€ffs
[0];

109 
pk
 = &
S
->
pkC€ffs
[0];

113 
gcuº
 = *
px1
++;

115 
‚ext
 = 
	`__QSUB
(
fcuº
, (
q31_t
Ë(((
q63_t
Ë
gcuº
 * (*
pk
)) >> 31));

117 
g√xt
 = 
	`__QADD
(
gcuº
, (
q31_t
Ë(((
q63_t
Ë
‚ext
 * (*
pk
++)) >> 31));

119 *
px2
++ = 
g√xt
;

121 
acc
 +((
q63_t
Ë
g√xt
 * *
pv
++);

124 
fcuº
 = 
‚ext
;

127 
èpC¡
 = (
numSèges
 - 1u) >> 2;

129 
èpC¡
 > 0u)

134 
gcuº
 = *
px1
++;

136 
‚ext
 = 
	`__QSUB
(
fcuº
, (
q31_t
Ë(((
q63_t
Ë
gcuº
 * (*
pk
)) >> 31));

138 
g√xt
 = 
	`__QADD
(
gcuº
, (
q31_t
Ë(((
q63_t
Ë
‚ext
 * (*
pk
++)) >> 31));

141 
acc
 +((
q63_t
Ë
g√xt
 * *
pv
++);

143 *
px2
++ = 
g√xt
;

147 
gcuº
 = *
px1
++;

150 
fcuº
 = 
	`__QSUB
(
‚ext
, (
q31_t
Ë(((
q63_t
Ë
gcuº
 * (*
pk
)) >> 31));

152 
g√xt
 = 
	`__QADD
(
gcuº
, (
q31_t
Ë(((
q63_t
Ë
fcuº
 * (*
pk
++)) >> 31));

155 
acc
 +((
q63_t
Ë
g√xt
 * *
pv
++);

157 *
px2
++ = 
g√xt
;

162 
gcuº
 = *
px1
++;

165 
‚ext
 = 
	`__QSUB
(
fcuº
, (
q31_t
Ë(((
q63_t
Ë
gcuº
 * (*
pk
)) >> 31));

167 
g√xt
 = 
	`__QADD
(
gcuº
, (
q31_t
Ë(((
q63_t
Ë
‚ext
 * (*
pk
++)) >> 31));

170 
acc
 +((
q63_t
Ë
g√xt
 * *
pv
++);

172 *
px2
++ = 
g√xt
;

177 
gcuº
 = *
px1
++;

180 
fcuº
 = 
	`__QSUB
(
‚ext
, (
q31_t
Ë(((
q63_t
Ë
gcuº
 * (*
pk
)) >> 31));

182 
g√xt
 = 
	`__QADD
(
gcuº
, (
q31_t
Ë(((
q63_t
Ë
fcuº
 * (*
pk
++)) >> 31));

185 
acc
 +((
q63_t
Ë
g√xt
 * *
pv
++);

187 *
px2
++ = 
g√xt
;

189 
èpC¡
--;

193 
‚ext
 = 
fcuº
;

196 
èpC¡
 = (
numSèges
 - 1u) % 0x4u;

198 
èpC¡
 > 0u)

200 
gcuº
 = *
px1
++;

202 
‚ext
 = 
	`__QSUB
(
fcuº
, (
q31_t
Ë(((
q63_t
Ë
gcuº
 * (*
pk
)) >> 31));

203 
g√xt
 = 
	`__QADD
(
gcuº
, (
q31_t
Ë(((
q63_t
Ë
‚ext
 * (*
pk
++)) >> 31));

205 
acc
 +((
q63_t
Ë
g√xt
 * *
pv
++);

206 *
px2
++ = 
g√xt
;

207 
fcuº
 = 
‚ext
;

209 
èpC¡
--;

214 
acc
 +(
q63_t
Ë
‚ext
 *(

215 *
pv
++);

217 *
px2
++ = 
‚ext
;

220 *
pD°
++ = (
q31_t
Ë(
acc
 >> 31u);

223 
pSèã
 =ÖState + 1u;

224 
blkC¡
--;

232 
pSèãCu∫t
 = &
S
->
pSèã
[0];

233 
pSèã
 = &
S
->pSèã[
blockSize
];

235 
èpC¡
 = 
numSèges
 >> 2u;

238 
èpC¡
 > 0u)

240 *
pSèãCu∫t
++ = *
pSèã
++;

241 *
pSèãCu∫t
++ = *
pSèã
++;

242 *
pSèãCu∫t
++ = *
pSèã
++;

243 *
pSèãCu∫t
++ = *
pSèã
++;

246 
èpC¡
--;

251 
èpC¡
 = (
numSèges
) % 0x4u;

254 
èpC¡
 > 0u)

256 *
pSèãCu∫t
++ = *
pSèã
++;

259 
èpC¡
--;

266 
blkC¡
 > 0u)

270 
fcuº
 = *
pSrc
++;

273 
px1
 = 
pSèã
;

275 
px2
 = 
pSèã
;

277 
acc
 = 0;

279 
pv
 = &
S
->
pvC€ffs
[0];

281 
pk
 = &
S
->
pkC€ffs
[0];

283 
èpC¡
 = 
numSèges
;

285 
èpC¡
 > 0u)

287 
gcuº
 = *
px1
++;

290 
‚ext
 =

291 
	`˛ù_q63_to_q31
(((
q63_t
Ë
fcuº
 -

292 ((
q31_t
Ë(((
q63_t
Ë
gcuº
 * (*
pk
)) >> 31))));

294 
g√xt
 =

295 
	`˛ù_q63_to_q31
(((
q63_t
Ë
gcuº
 +

296 ((
q31_t
Ë(((
q63_t
Ë
‚ext
 * (*
pk
++)) >> 31))));

299 
acc
 +((
q63_t
Ë
g√xt
 * *
pv
++);

301 *
px2
++ = 
g√xt
;

303 
fcuº
 = 
‚ext
;

305 
èpC¡
--;

309 
acc
 +(
q63_t
Ë
‚ext
 *(

310 *
pv
++);

312 *
px2
++ = 
‚ext
;

315 *
pD°
++ = (
q31_t
Ë(
acc
 >> 31u);

318 
pSèã
 =ÖState + 1u;

319 
blkC¡
--;

327 
pSèãCu∫t
 = &
S
->
pSèã
[0];

328 
pSèã
 = &
S
->pSèã[
blockSize
];

330 
èpC¡
 = 
numSèges
;

333 
èpC¡
 > 0u)

335 *
pSèãCu∫t
++ = *
pSèã
++;

338 
èpC¡
--;

343 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_f32.c

41 
	~"¨m_m©h.h
"

181 
	$¨m_lms_f32
(

182 c⁄° 
¨m_lms_ö°™˚_f32
 * 
S
,

183 
Êﬂt32_t
 * 
pSrc
,

184 
Êﬂt32_t
 * 
pRef
,

185 
Êﬂt32_t
 * 
pOut
,

186 
Êﬂt32_t
 * 
pEº
,

187 
uöt32_t
 
blockSize
)

189 
Êﬂt32_t
 *
pSèã
 = 
S
->pState;

190 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

191 
Êﬂt32_t
 *
pSèãCu∫t
;

192 
Êﬂt32_t
 *
px
, *
pb
;

193 
Êﬂt32_t
 
mu
 = 
S
->mu;

194 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

195 
uöt32_t
 
èpC¡
, 
blkC¡
;

196 
Êﬂt32_t
 
sum
, 
e
, 
d
;

197 
Êﬂt32_t
 
w
 = 0.0f;

199 
e
 = 0.0f;

200 
d
 = 0.0f;

204 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

206 
blkC¡
 = 
blockSize
;

209 #i‚de‡
ARM_MATH_CM0_FAMILY


213 
blkC¡
 > 0u)

216 *
pSèãCu∫t
++ = *
pSrc
++;

219 
px
 = 
pSèã
;

222 
pb
 = (
pC€ffs
);

225 
sum
 = 0.0f;

228 
èpC¡
 = 
numT≠s
 >> 2;

230 
èpC¡
 > 0u)

233 
sum
 +(*
px
++Ë* (*
pb
++);

234 
sum
 +(*
px
++Ë* (*
pb
++);

235 
sum
 +(*
px
++Ë* (*
pb
++);

236 
sum
 +(*
px
++Ë* (*
pb
++);

239 
èpC¡
--;

243 
èpC¡
 = 
numT≠s
 % 0x4u;

245 
èpC¡
 > 0u)

248 
sum
 +(*
px
++Ë* (*
pb
++);

251 
èpC¡
--;

255 *
pOut
++ = 
sum
;

258 
d
 = (
Êﬂt32_t
Ë(*
pRef
++);

259 
e
 = 
d
 - 
sum
;

260 *
pEº
++ = 
e
;

263 
w
 = 
e
 * 
mu
;

266 
px
 = 
pSèã
;

269 
pb
 = (
pC€ffs
);

272 
èpC¡
 = 
numT≠s
 >> 2;

275 
èpC¡
 > 0u)

278 *
pb
 = *pb + (
w
 * (*
px
++));

279 
pb
++;

281 *
pb
 = *pb + (
w
 * (*
px
++));

282 
pb
++;

284 *
pb
 = *pb + (
w
 * (*
px
++));

285 
pb
++;

287 *
pb
 = *pb + (
w
 * (*
px
++));

288 
pb
++;

291 
èpC¡
--;

295 
èpC¡
 = 
numT≠s
 % 0x4u;

297 
èpC¡
 > 0u)

300 *
pb
 = *pb + (
w
 * (*
px
++));

301 
pb
++;

304 
èpC¡
--;

308 
pSèã
 =ÖState + 1;

311 
blkC¡
--;

320 
pSèãCu∫t
 = 
S
->
pSèã
;

323 
èpC¡
 = (
numT≠s
 - 1u) >> 2u;

326 
èpC¡
 > 0u)

328 *
pSèãCu∫t
++ = *
pSèã
++;

329 *
pSèãCu∫t
++ = *
pSèã
++;

330 *
pSèãCu∫t
++ = *
pSèã
++;

331 *
pSèãCu∫t
++ = *
pSèã
++;

334 
èpC¡
--;

338 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

341 
èpC¡
 > 0u)

343 *
pSèãCu∫t
++ = *
pSèã
++;

346 
èpC¡
--;

353 
blkC¡
 > 0u)

356 *
pSèãCu∫t
++ = *
pSrc
++;

359 
px
 = 
pSèã
;

362 
pb
 = 
pC€ffs
;

365 
sum
 = 0.0f;

368 
èpC¡
 = 
numT≠s
;

370 
èpC¡
 > 0u)

373 
sum
 +(*
px
++Ë* (*
pb
++);

376 
èpC¡
--;

380 *
pOut
++ = 
sum
;

383 
d
 = (
Êﬂt32_t
Ë(*
pRef
++);

384 
e
 = 
d
 - 
sum
;

385 *
pEº
++ = 
e
;

388 
w
 = 
e
 * 
mu
;

391 
px
 = 
pSèã
;

394 
pb
 = 
pC€ffs
;

397 
èpC¡
 = 
numT≠s
;

399 
èpC¡
 > 0u)

402 *
pb
 = *pb + (
w
 * (*
px
++));

403 
pb
++;

406 
èpC¡
--;

410 
pSèã
 =ÖState + 1;

413 
blkC¡
--;

422 
pSèãCu∫t
 = 
S
->
pSèã
;

425 
èpC¡
 = (
numT≠s
 - 1u);

428 
èpC¡
 > 0u)

430 *
pSèãCu∫t
++ = *
pSèã
++;

433 
èpC¡
--;

438 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_init_f32.c

41 
	~"¨m_m©h.h
"

69 
	$¨m_lms_öô_f32
(

70 
¨m_lms_ö°™˚_f32
 * 
S
,

71 
uöt16_t
 
numT≠s
,

72 
Êﬂt32_t
 * 
pC€ffs
,

73 
Êﬂt32_t
 * 
pSèã
,

74 
Êﬂt32_t
 
mu
,

75 
uöt32_t
 
blockSize
)

78 
S
->
numT≠s
 =ÇumTaps;

81 
S
->
pC€ffs
 =ÖCoeffs;

84 
	`mem£t
(
pSèã
, 0, (
numT≠s
 + (
blockSize
 - 1)Ë* (
Êﬂt32_t
));

87 
S
->
pSèã
 =ÖState;

90 
S
->
mu
 = mu;

91 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_init_q15.c

41 
	~"¨m_m©h.h
"

74 
	$¨m_lms_öô_q15
(

75 
¨m_lms_ö°™˚_q15
 * 
S
,

76 
uöt16_t
 
numT≠s
,

77 
q15_t
 * 
pC€ffs
,

78 
q15_t
 * 
pSèã
,

79 
q15_t
 
mu
,

80 
uöt32_t
 
blockSize
,

81 
uöt32_t
 
po°Shi·
)

84 
S
->
numT≠s
 =ÇumTaps;

87 
S
->
pC€ffs
 =ÖCoeffs;

90 
	`mem£t
(
pSèã
, 0, (
numT≠s
 + (
blockSize
 - 1u)Ë* (
q15_t
));

93 
S
->
pSèã
 =ÖState;

96 
S
->
mu
 = mu;

99 
S
->
po°Shi·
 =ÖostShift;

101 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_init_q31.c

41 
	~"¨m_m©h.h
"

74 
	$¨m_lms_öô_q31
(

75 
¨m_lms_ö°™˚_q31
 * 
S
,

76 
uöt16_t
 
numT≠s
,

77 
q31_t
 * 
pC€ffs
,

78 
q31_t
 * 
pSèã
,

79 
q31_t
 
mu
,

80 
uöt32_t
 
blockSize
,

81 
uöt32_t
 
po°Shi·
)

84 
S
->
numT≠s
 =ÇumTaps;

87 
S
->
pC€ffs
 =ÖCoeffs;

90 
	`mem£t
(
pSèã
, 0, ((
uöt32_t
Ë
numT≠s
 + (
blockSize
 - 1u)Ë* (
q31_t
));

93 
S
->
pSèã
 =ÖState;

96 
S
->
mu
 = mu;

99 
S
->
po°Shi·
 =ÖostShift;

101 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_norm_f32.c

41 
	~"¨m_m©h.h
"

173 
	$¨m_lms_n‹m_f32
(

174 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

175 
Êﬂt32_t
 * 
pSrc
,

176 
Êﬂt32_t
 * 
pRef
,

177 
Êﬂt32_t
 * 
pOut
,

178 
Êﬂt32_t
 * 
pEº
,

179 
uöt32_t
 
blockSize
)

181 
Êﬂt32_t
 *
pSèã
 = 
S
->pState;

182 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

183 
Êﬂt32_t
 *
pSèãCu∫t
;

184 
Êﬂt32_t
 *
px
, *
pb
;

185 
Êﬂt32_t
 
mu
 = 
S
->mu;

186 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

187 
uöt32_t
 
èpC¡
, 
blkC¡
;

188 
Êﬂt32_t
 
íîgy
;

189 
Êﬂt32_t
 
sum
, 
e
, 
d
;

190 
Êﬂt32_t
 
w
, 
x0
, 
ö
;

193 
e
 = 0.0f;

194 
d
 = 0.0f;

195 
w
 = 0.0f;

197 
íîgy
 = 
S
->energy;

198 
x0
 = 
S
->x0;

202 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

205 
blkC¡
 = 
blockSize
;

208 #i‚de‡
ARM_MATH_CM0_FAMILY


212 
blkC¡
 > 0u)

215 *
pSèãCu∫t
++ = *
pSrc
;

218 
px
 = 
pSèã
;

221 
pb
 = (
pC€ffs
);

224 
ö
 = *
pSrc
++;

227 
íîgy
 -
x0
 * x0;

228 
íîgy
 +
ö
 * in;

231 
sum
 = 0.0f;

234 
èpC¡
 = 
numT≠s
 >> 2;

236 
èpC¡
 > 0u)

239 
sum
 +(*
px
++Ë* (*
pb
++);

240 
sum
 +(*
px
++Ë* (*
pb
++);

241 
sum
 +(*
px
++Ë* (*
pb
++);

242 
sum
 +(*
px
++Ë* (*
pb
++);

245 
èpC¡
--;

249 
èpC¡
 = 
numT≠s
 % 0x4u;

251 
èpC¡
 > 0u)

254 
sum
 +(*
px
++Ë* (*
pb
++);

257 
èpC¡
--;

261 *
pOut
++ = 
sum
;

264 
d
 = (
Êﬂt32_t
Ë(*
pRef
++);

265 
e
 = 
d
 - 
sum
;

266 *
pEº
++ = 
e
;

270 
w
 = (
e
 * 
mu
Ë/ (
íîgy
 + 0.000000119209289f);

273 
px
 = 
pSèã
;

276 
pb
 = (
pC€ffs
);

279 
èpC¡
 = 
numT≠s
 >> 2;

282 
èpC¡
 > 0u)

285 *
pb
 +
w
 * (*
px
++);

286 
pb
++;

288 *
pb
 +
w
 * (*
px
++);

289 
pb
++;

291 *
pb
 +
w
 * (*
px
++);

292 
pb
++;

294 *
pb
 +
w
 * (*
px
++);

295 
pb
++;

299 
èpC¡
--;

303 
èpC¡
 = 
numT≠s
 % 0x4u;

305 
èpC¡
 > 0u)

308 *
pb
 +
w
 * (*
px
++);

309 
pb
++;

312 
èpC¡
--;

315 
x0
 = *
pSèã
;

318 
pSèã
 =ÖState + 1;

321 
blkC¡
--;

324 
S
->
íîgy
 =Énergy;

325 
S
->
x0
 = x0;

332 
pSèãCu∫t
 = 
S
->
pSèã
;

335 
èpC¡
 = (
numT≠s
 - 1u) >> 2u;

338 
èpC¡
 > 0u)

340 *
pSèãCu∫t
++ = *
pSèã
++;

341 *
pSèãCu∫t
++ = *
pSèã
++;

342 *
pSèãCu∫t
++ = *
pSèã
++;

343 *
pSèãCu∫t
++ = *
pSèã
++;

346 
èpC¡
--;

350 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

353 
èpC¡
 > 0u)

355 *
pSèãCu∫t
++ = *
pSèã
++;

358 
èpC¡
--;

365 
blkC¡
 > 0u)

368 *
pSèãCu∫t
++ = *
pSrc
;

371 
px
 = 
pSèã
;

374 
pb
 = 
pC€ffs
;

377 
ö
 = *
pSrc
++;

380 
íîgy
 -
x0
 * x0;

381 
íîgy
 +
ö
 * in;

384 
sum
 = 0.0f;

387 
èpC¡
 = 
numT≠s
;

389 
èpC¡
 > 0u)

392 
sum
 +(*
px
++Ë* (*
pb
++);

395 
èpC¡
--;

399 *
pOut
++ = 
sum
;

402 
d
 = (
Êﬂt32_t
Ë(*
pRef
++);

403 
e
 = 
d
 - 
sum
;

404 *
pEº
++ = 
e
;

408 
w
 = (
e
 * 
mu
Ë/ (
íîgy
 + 0.000000119209289f);

411 
px
 = 
pSèã
;

414 
pb
 = 
pC€ffs
;

417 
èpC¡
 = 
numT≠s
;

419 
èpC¡
 > 0u)

422 *
pb
 +
w
 * (*
px
++);

423 
pb
++;

426 
èpC¡
--;

429 
x0
 = *
pSèã
;

432 
pSèã
 =ÖState + 1;

435 
blkC¡
--;

438 
S
->
íîgy
 =Énergy;

439 
S
->
x0
 = x0;

446 
pSèãCu∫t
 = 
S
->
pSèã
;

449 
èpC¡
 = (
numT≠s
 - 1u);

452 
èpC¡
 > 0u)

454 *
pSèãCu∫t
++ = *
pSèã
++;

457 
èpC¡
--;

462 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_norm_init_f32.c

41 
	~"¨m_m©h.h
"

72 
	$¨m_lms_n‹m_öô_f32
(

73 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

74 
uöt16_t
 
numT≠s
,

75 
Êﬂt32_t
 * 
pC€ffs
,

76 
Êﬂt32_t
 * 
pSèã
,

77 
Êﬂt32_t
 
mu
,

78 
uöt32_t
 
blockSize
)

81 
S
->
numT≠s
 =ÇumTaps;

84 
S
->
pC€ffs
 =ÖCoeffs;

87 
	`mem£t
(
pSèã
, 0, (
numT≠s
 + (
blockSize
 - 1u)Ë* (
Êﬂt32_t
));

90 
S
->
pSèã
 =ÖState;

93 
S
->
mu
 = mu;

96 
S
->
íîgy
 = 0.0f;

99 
S
->
x0
 = 0.0f;

101 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_norm_init_q15.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

72 
	$¨m_lms_n‹m_öô_q15
(

73 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

74 
uöt16_t
 
numT≠s
,

75 
q15_t
 * 
pC€ffs
,

76 
q15_t
 * 
pSèã
,

77 
q15_t
 
mu
,

78 
uöt32_t
 
blockSize
,

79 
uöt8_t
 
po°Shi·
)

82 
S
->
numT≠s
 =ÇumTaps;

85 
S
->
pC€ffs
 =ÖCoeffs;

88 
	`mem£t
(
pSèã
, 0, (
numT≠s
 + (
blockSize
 - 1u)Ë* (
q15_t
));

91 
S
->
po°Shi·
 =ÖostShift;

94 
S
->
pSèã
 =ÖState;

97 
S
->
mu
 = mu;

100 
S
->
ªcùTabÀ
 = (
q15_t
 *Ë
¨mRecùTabÀQ15
;

103 
S
->
íîgy
 = 0;

106 
S
->
x0
 = 0;

108 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_norm_init_q31.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

71 
	$¨m_lms_n‹m_öô_q31
(

72 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

73 
uöt16_t
 
numT≠s
,

74 
q31_t
 * 
pC€ffs
,

75 
q31_t
 * 
pSèã
,

76 
q31_t
 
mu
,

77 
uöt32_t
 
blockSize
,

78 
uöt8_t
 
po°Shi·
)

81 
S
->
numT≠s
 =ÇumTaps;

84 
S
->
pC€ffs
 =ÖCoeffs;

87 
	`mem£t
(
pSèã
, 0, (
numT≠s
 + (
blockSize
 - 1u)Ë* (
q31_t
));

90 
S
->
po°Shi·
 =ÖostShift;

93 
S
->
pSèã
 =ÖState;

96 
S
->
mu
 = mu;

99 
S
->
ªcùTabÀ
 = (
q31_t
 *Ë
¨mRecùTabÀQ31
;

102 
S
->
íîgy
 = 0;

105 
S
->
x0
 = 0;

107 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_norm_q15.c

41 
	~"¨m_m©h.h
"

79 
	$¨m_lms_n‹m_q15
(

80 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

81 
q15_t
 * 
pSrc
,

82 
q15_t
 * 
pRef
,

83 
q15_t
 * 
pOut
,

84 
q15_t
 * 
pEº
,

85 
uöt32_t
 
blockSize
)

87 
q15_t
 *
pSèã
 = 
S
->pState;

88 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

89 
q15_t
 *
pSèãCu∫t
;

90 
q15_t
 *
px
, *
pb
;

91 
q15_t
 
mu
 = 
S
->mu;

92 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

93 
uöt32_t
 
èpC¡
, 
blkC¡
;

94 
q31_t
 
íîgy
;

95 
q63_t
 
acc
;

96 
q15_t
 
e
 = 0, 
d
 = 0;

97 
q15_t
 
w
 = 0, 
ö
;

98 
q15_t
 
x0
;

100 
q15_t
 
îr‹Xmu
, 
⁄eByE√rgy
;

101 
q15_t
 
po°Shi·
;

102 
q31_t
 
c€f
;

103 
q31_t
 
acc_l
, 
acc_h
;

104 
öt32_t
 
lShi·
 = (15 - (öt32_tË
S
->
po°Shi·
);

105 
öt32_t
 
uShi·
 = (32 - 
lShi·
);

107 
íîgy
 = 
S
->energy;

108 
x0
 = 
S
->x0;

112 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

115 
blkC¡
 = 
blockSize
;

118 #i‚de‡
ARM_MATH_CM0_FAMILY


122 
blkC¡
 > 0u)

125 *
pSèãCu∫t
++ = *
pSrc
;

128 
px
 = 
pSèã
;

131 
pb
 = (
pC€ffs
);

134 
ö
 = *
pSrc
++;

137 
íîgy
 -(((
q31_t
Ë
x0
 * (x0)) >> 15);

138 
íîgy
 +(((
q31_t
Ë
ö
 * (in)) >> 15);

141 
acc
 = 0;

144 
èpC¡
 = 
numT≠s
 >> 2;

146 
èpC¡
 > 0u)

150 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


152 
acc
 = 
	`__SMLALD
(*
	`__SIMD32
(
px
)++, (*__SIMD32(
pb
)++),ácc);

153 
acc
 = 
	`__SMLALD
(*
	`__SIMD32
(
px
)++, (*__SIMD32(
pb
)++),ácc);

157 
acc
 +(((
q31_t
Ë* 
px
++ * (*
pb
++)));

158 
acc
 +(((
q31_t
Ë* 
px
++ * (*
pb
++)));

159 
acc
 +(((
q31_t
Ë* 
px
++ * (*
pb
++)));

160 
acc
 +(((
q31_t
Ë* 
px
++ * (*
pb
++)));

165 
èpC¡
--;

169 
èpC¡
 = 
numT≠s
 % 0x4u;

171 
èpC¡
 > 0u)

174 
acc
 +(((
q31_t
Ë* 
px
++ * (*
pb
++)));

177 
èpC¡
--;

181 
acc_l
 = 
acc
 & 0xffffffff;

184 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

187 
acc
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

190 
acc
 = 
	`__SSAT
(acc, 16u);

193 *
pOut
++ = (
q15_t
Ë
acc
;

196 
d
 = *
pRef
++;

197 
e
 = 
d
 - (
q15_t
Ë
acc
;

198 *
pEº
++ = 
e
;

201 
po°Shi·
 = 
	`¨m_ªcù_q15
((
q15_t
Ë
íîgy
 + 
DELTA_Q15
,

202 &
⁄eByE√rgy
, 
S
->
ªcùTabÀ
);

205 
îr‹Xmu
 = (
q15_t
Ë(((
q31_t
Ë
e
 * 
mu
) >> 15);

208 
acc
 = (((
q31_t
Ë
îr‹Xmu
 * 
⁄eByE√rgy
Ë>> (15 - 
po°Shi·
));

211 
w
 = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë
acc
, 16);

214 
px
 = 
pSèã
;

217 
pb
 = (
pC€ffs
);

220 
èpC¡
 = 
numT≠s
 >> 2;

223 
èpC¡
 > 0u)

225 
c€f
 = *
pb
 + (((
q31_t
Ë
w
 * (*
px
++)) >> 15);

226 *
pb
++ = (
q15_t
Ë
	`__SSAT
((
c€f
), 16);

227 
c€f
 = *
pb
 + (((
q31_t
Ë
w
 * (*
px
++)) >> 15);

228 *
pb
++ = (
q15_t
Ë
	`__SSAT
((
c€f
), 16);

229 
c€f
 = *
pb
 + (((
q31_t
Ë
w
 * (*
px
++)) >> 15);

230 *
pb
++ = (
q15_t
Ë
	`__SSAT
((
c€f
), 16);

231 
c€f
 = *
pb
 + (((
q31_t
Ë
w
 * (*
px
++)) >> 15);

232 *
pb
++ = (
q15_t
Ë
	`__SSAT
((
c€f
), 16);

235 
èpC¡
--;

239 
èpC¡
 = 
numT≠s
 % 0x4u;

241 
èpC¡
 > 0u)

244 
c€f
 = *
pb
 + (((
q31_t
Ë
w
 * (*
px
++)) >> 15);

245 *
pb
++ = (
q15_t
Ë
	`__SSAT
((
c€f
), 16);

248 
èpC¡
--;

252 
x0
 = *
pSèã
;

255 
pSèã
 =ÖState + 1u;

258 
blkC¡
--;

262 
S
->
íîgy
 = (
q15_t
)Énergy;

263 
S
->
x0
 = x0;

270 
pSèãCu∫t
 = 
S
->
pSèã
;

273 
èpC¡
 = (
numT≠s
 - 1u) >> 2;

275 
èpC¡
 > 0u)

278 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


280 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

281 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

285 *
pSèãCu∫t
++ = *
pSèã
++;

286 *
pSèãCu∫t
++ = *
pSèã
++;

287 *
pSèãCu∫t
++ = *
pSèã
++;

288 *
pSèãCu∫t
++ = *
pSèã
++;

292 
èpC¡
--;

297 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

300 
èpC¡
 > 0u)

302 *
pSèãCu∫t
++ = *
pSèã
++;

305 
èpC¡
--;

312 
blkC¡
 > 0u)

315 *
pSèãCu∫t
++ = *
pSrc
;

318 
px
 = 
pSèã
;

321 
pb
 = 
pC€ffs
;

324 
ö
 = *
pSrc
++;

327 
íîgy
 -(((
q31_t
Ë
x0
 * (x0)) >> 15);

328 
íîgy
 +(((
q31_t
Ë
ö
 * (in)) >> 15);

331 
acc
 = 0;

334 
èpC¡
 = 
numT≠s
;

336 
èpC¡
 > 0u)

339 
acc
 +(((
q31_t
Ë* 
px
++ * (*
pb
++)));

342 
èpC¡
--;

346 
acc_l
 = 
acc
 & 0xffffffff;

349 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

352 
acc
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

355 
acc
 = 
	`__SSAT
(acc, 16u);

361 *
pOut
++ = (
q15_t
Ë
acc
;

364 
d
 = *
pRef
++;

365 
e
 = 
d
 - (
q15_t
Ë
acc
;

366 *
pEº
++ = 
e
;

369 
po°Shi·
 = 
	`¨m_ªcù_q15
((
q15_t
Ë
íîgy
 + 
DELTA_Q15
,

370 &
⁄eByE√rgy
, 
S
->
ªcùTabÀ
);

373 
îr‹Xmu
 = (
q15_t
Ë(((
q31_t
Ë
e
 * 
mu
) >> 15);

376 
acc
 = (((
q31_t
Ë
îr‹Xmu
 * 
⁄eByE√rgy
Ë>> (15 - 
po°Shi·
));

379 
w
 = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë
acc
, 16);

382 
px
 = 
pSèã
;

385 
pb
 = (
pC€ffs
);

388 
èpC¡
 = 
numT≠s
;

390 
èpC¡
 > 0u)

393 
c€f
 = *
pb
 + (((
q31_t
Ë
w
 * (*
px
++)) >> 15);

394 *
pb
++ = (
q15_t
Ë
	`__SSAT
((
c€f
), 16);

397 
èpC¡
--;

401 
x0
 = *
pSèã
;

404 
pSèã
 =ÖState + 1u;

407 
blkC¡
--;

411 
S
->
íîgy
 = (
q15_t
)Énergy;

412 
S
->
x0
 = x0;

419 
pSèãCu∫t
 = 
S
->
pSèã
;

422 
èpC¡
 = (
numT≠s
 - 1u);

425 
èpC¡
 > 0u)

427 *
pSèãCu∫t
++ = *
pSèã
++;

430 
èpC¡
--;

435 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_norm_q31.c

41 
	~"¨m_m©h.h
"

80 
	$¨m_lms_n‹m_q31
(

81 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

82 
q31_t
 * 
pSrc
,

83 
q31_t
 * 
pRef
,

84 
q31_t
 * 
pOut
,

85 
q31_t
 * 
pEº
,

86 
uöt32_t
 
blockSize
)

88 
q31_t
 *
pSèã
 = 
S
->pState;

89 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

90 
q31_t
 *
pSèãCu∫t
;

91 
q31_t
 *
px
, *
pb
;

92 
q31_t
 
mu
 = 
S
->mu;

93 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

94 
uöt32_t
 
èpC¡
, 
blkC¡
;

95 
q63_t
 
íîgy
;

96 
q63_t
 
acc
;

97 
q31_t
 
e
 = 0, 
d
 = 0;

98 
q31_t
 
w
 = 0, 
ö
;

99 
q31_t
 
x0
;

101 
q31_t
 
îr‹Xmu
, 
⁄eByE√rgy
;

102 
q31_t
 
po°Shi·
;

103 
q31_t
 
c€f
;

104 
q31_t
 
acc_l
, 
acc_h
;

105 
uöt32_t
 
uShi·
 = ((uöt32_tË
S
->
po°Shi·
 + 1u);

106 
uöt32_t
 
lShi·
 = 32u - 
uShi·
;

108 
íîgy
 = 
S
->energy;

109 
x0
 = 
S
->x0;

113 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

116 
blkC¡
 = 
blockSize
;

119 #i‚de‡
ARM_MATH_CM0_FAMILY


123 
blkC¡
 > 0u)

127 *
pSèãCu∫t
++ = *
pSrc
;

130 
px
 = 
pSèã
;

133 
pb
 = (
pC€ffs
);

136 
ö
 = *
pSrc
++;

139 
íîgy
 = (
q31_t
Ë((((
q63_t
)Énergy << 32) -

140 (((
q63_t
Ë
x0
 * x0) << 1)) >> 32);

141 
íîgy
 = (
q31_t
Ë(((((
q63_t
Ë
ö
 * in) << 1) + (energy << 32)) >> 32);

144 
acc
 = 0;

147 
èpC¡
 = 
numT≠s
 >> 2;

149 
èpC¡
 > 0u)

152 
acc
 +((
q63_t
Ë(*
px
++)Ë* (*
pb
++);

153 
acc
 +((
q63_t
Ë(*
px
++)Ë* (*
pb
++);

154 
acc
 +((
q63_t
Ë(*
px
++)Ë* (*
pb
++);

155 
acc
 +((
q63_t
Ë(*
px
++)Ë* (*
pb
++);

158 
èpC¡
--;

162 
èpC¡
 = 
numT≠s
 % 0x4u;

164 
èpC¡
 > 0u)

167 
acc
 +((
q63_t
Ë(*
px
++)Ë* (*
pb
++);

170 
èpC¡
--;

175 
acc_l
 = 
acc
 & 0xffffffff;

178 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

180 
acc
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

183 *
pOut
++ = (
q31_t
Ë
acc
;

186 
d
 = *
pRef
++;

187 
e
 = 
d
 - (
q31_t
Ë
acc
;

188 *
pEº
++ = 
e
;

191 
po°Shi·
 = 
	`¨m_ªcù_q31
(
íîgy
 + 
DELTA_Q31
,

192 &
⁄eByE√rgy
, &
S
->
ªcùTabÀ
[0]);

195 
îr‹Xmu
 = (
q31_t
Ë(((
q63_t
Ë
e
 * 
mu
) >> 31);

198 
w
 = 
	`˛ù_q63_to_q31
(((
q63_t
Ë
îr‹Xmu
 * 
⁄eByE√rgy
Ë>> (31 - 
po°Shi·
));

201 
px
 = 
pSèã
;

204 
pb
 = (
pC€ffs
);

207 
èpC¡
 = 
numT≠s
 >> 2;

210 
èpC¡
 > 0u)

215 
c€f
 = (
q31_t
Ë(((
q63_t
Ë
w
 * (*
px
++)) >> (32));

217 *
pb
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë*Öb + (
c€f
 << 1u));

219 
pb
++;

221 
c€f
 = (
q31_t
Ë(((
q63_t
Ë
w
 * (*
px
++)) >> (32));

222 *
pb
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë*Öb + (
c€f
 << 1u));

223 
pb
++;

225 
c€f
 = (
q31_t
Ë(((
q63_t
Ë
w
 * (*
px
++)) >> (32));

226 *
pb
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë*Öb + (
c€f
 << 1u));

227 
pb
++;

229 
c€f
 = (
q31_t
Ë(((
q63_t
Ë
w
 * (*
px
++)) >> (32));

230 *
pb
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë*Öb + (
c€f
 << 1u));

231 
pb
++;

234 
èpC¡
--;

238 
èpC¡
 = 
numT≠s
 % 0x4u;

240 
èpC¡
 > 0u)

243 
c€f
 = (
q31_t
Ë(((
q63_t
Ë
w
 * (*
px
++)) >> (32));

244 *
pb
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë*Öb + (
c€f
 << 1u));

245 
pb
++;

248 
èpC¡
--;

252 
x0
 = *
pSèã
;

255 
pSèã
 =ÖState + 1;

258 
blkC¡
--;

262 
S
->
íîgy
 = (
q31_t
)Énergy;

263 
S
->
x0
 = x0;

270 
pSèãCu∫t
 = 
S
->
pSèã
;

273 
èpC¡
 = (
numT≠s
 - 1u) >> 2u;

276 
èpC¡
 > 0u)

278 *
pSèãCu∫t
++ = *
pSèã
++;

279 *
pSèãCu∫t
++ = *
pSèã
++;

280 *
pSèãCu∫t
++ = *
pSèã
++;

281 *
pSèãCu∫t
++ = *
pSèã
++;

284 
èpC¡
--;

288 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

291 
èpC¡
 > 0u)

293 *
pSèãCu∫t
++ = *
pSèã
++;

296 
èpC¡
--;

303 
blkC¡
 > 0u)

307 *
pSèãCu∫t
++ = *
pSrc
;

310 
px
 = 
pSèã
;

313 
pb
 = 
pC€ffs
;

316 
ö
 = *
pSrc
++;

319 
íîgy
 =

320 (
q31_t
Ë((((
q63_t
Ë
íîgy
 << 32Ë- (((q63_tË
x0
 * x0) << 1)) >> 32);

321 
íîgy
 = (
q31_t
Ë(((((
q63_t
Ë
ö
 * in) << 1) + (energy << 32)) >> 32);

324 
acc
 = 0;

327 
èpC¡
 = 
numT≠s
;

329 
èpC¡
 > 0u)

332 
acc
 +((
q63_t
Ë(*
px
++)Ë* (*
pb
++);

335 
èpC¡
--;

341 
acc_l
 = 
acc
 & 0xffffffff;

344 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

346 
acc
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

352 *
pOut
++ = (
q31_t
Ë
acc
;

355 
d
 = *
pRef
++;

356 
e
 = 
d
 - (
q31_t
Ë
acc
;

357 *
pEº
++ = 
e
;

360 
po°Shi·
 =

361 
	`¨m_ªcù_q31
(
íîgy
 + 
DELTA_Q31
, &
⁄eByE√rgy
, &
S
->
ªcùTabÀ
[0]);

364 
îr‹Xmu
 = (
q31_t
Ë(((
q63_t
Ë
e
 * 
mu
) >> 31);

367 
w
 = 
	`˛ù_q63_to_q31
(((
q63_t
Ë
îr‹Xmu
 * 
⁄eByE√rgy
Ë>> (31 - 
po°Shi·
));

370 
px
 = 
pSèã
;

373 
pb
 = (
pC€ffs
);

376 
èpC¡
 = 
numT≠s
;

378 
èpC¡
 > 0u)

382 
c€f
 = (
q31_t
Ë(((
q63_t
Ë
w
 * (*
px
++)) >> (32));

384 *
pb
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë*Öb + (
c€f
 << 1u));

386 
pb
++;

389 
èpC¡
--;

393 
x0
 = *
pSèã
;

396 
pSèã
 =ÖState + 1;

399 
blkC¡
--;

403 
S
->
íîgy
 = (
q31_t
)Énergy;

404 
S
->
x0
 = x0;

411 
pSèãCu∫t
 = 
S
->
pSèã
;

414 
èpC¡
 = (
numT≠s
 - 1u);

417 
èpC¡
 > 0u)

419 *
pSèãCu∫t
++ = *
pSèã
++;

422 
èpC¡
--;

427 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_q15.c

41 
	~"¨m_m©h.h
"

74 
	$¨m_lms_q15
(

75 c⁄° 
¨m_lms_ö°™˚_q15
 * 
S
,

76 
q15_t
 * 
pSrc
,

77 
q15_t
 * 
pRef
,

78 
q15_t
 * 
pOut
,

79 
q15_t
 * 
pEº
,

80 
uöt32_t
 
blockSize
)

82 
q15_t
 *
pSèã
 = 
S
->pState;

83 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

84 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

85 
q15_t
 *
pSèãCu∫t
;

86 
q15_t
 
mu
 = 
S
->mu;

87 
q15_t
 *
px
;

88 
q15_t
 *
pb
;

89 
uöt32_t
 
èpC¡
, 
blkC¡
;

90 
q63_t
 
acc
;

91 
q15_t
 
e
 = 0;

92 
q15_t
 
Æpha
;

93 
q31_t
 
c€f
;

94 
q31_t
 
acc_l
, 
acc_h
;

95 
öt32_t
 
lShi·
 = (15 - (öt32_tË
S
->
po°Shi·
);

96 
öt32_t
 
uShi·
 = (32 - 
lShi·
);

99 #i‚de‡
ARM_MATH_CM0_FAMILY


106 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

109 
blkC¡
 = 
blockSize
;

111 
blkC¡
 > 0u)

114 *
pSèãCu∫t
++ = *
pSrc
++;

117 
px
 = 
pSèã
;

120 
pb
 = 
pC€ffs
;

123 
acc
 = 0;

126 
èpC¡
 = 
numT≠s
 >> 2u;

128 
èpC¡
 > 0u)

132 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


134 
acc
 = 
	`__SMLALD
(*
	`__SIMD32
(
px
)++, (*__SIMD32(
pb
)++),ácc);

135 
acc
 = 
	`__SMLALD
(*
	`__SIMD32
(
px
)++, (*__SIMD32(
pb
)++),ácc);

139 
acc
 +(
q63_t
Ë(((
q31_t
Ë(*
px
++Ë* (*
pb
++)));

140 
acc
 +(
q63_t
Ë(((
q31_t
Ë(*
px
++Ë* (*
pb
++)));

141 
acc
 +(
q63_t
Ë(((
q31_t
Ë(*
px
++Ë* (*
pb
++)));

142 
acc
 +(
q63_t
Ë(((
q31_t
Ë(*
px
++Ë* (*
pb
++)));

148 
èpC¡
--;

152 
èpC¡
 = 
numT≠s
 % 0x4u;

154 
èpC¡
 > 0u)

157 
acc
 +(
q63_t
Ë(((
q31_t
Ë(*
px
++Ë* (*
pb
++)));

160 
èpC¡
--;

164 
acc_l
 = 
acc
 & 0xffffffff;

167 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

170 
acc
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

173 
acc
 = 
	`__SSAT
(acc, 16);

176 *
pOut
++ = (
q15_t
Ë
acc
;

179 
e
 = *
pRef
++ - (
q15_t
Ë
acc
;

181 *
pEº
++ = (
q15_t
Ë
e
;

184 
Æpha
 = (
q15_t
Ë(((
q31_t
Ë
e
 * (
mu
)) >> 15);

188 
px
 = 
pSèã
++;

191 
pb
 = 
pC€ffs
;

194 
èpC¡
 = 
numT≠s
 >> 2u;

197 
èpC¡
 > 0u)

199 
c€f
 = (
q31_t
Ë* 
pb
 + (((q31_tË
Æpha
 * (*
px
++)) >> 15);

200 *
pb
++ = (
q15_t
Ë
	`__SSAT
((
c€f
), 16);

201 
c€f
 = (
q31_t
Ë* 
pb
 + (((q31_tË
Æpha
 * (*
px
++)) >> 15);

202 *
pb
++ = (
q15_t
Ë
	`__SSAT
((
c€f
), 16);

203 
c€f
 = (
q31_t
Ë* 
pb
 + (((q31_tË
Æpha
 * (*
px
++)) >> 15);

204 *
pb
++ = (
q15_t
Ë
	`__SSAT
((
c€f
), 16);

205 
c€f
 = (
q31_t
Ë* 
pb
 + (((q31_tË
Æpha
 * (*
px
++)) >> 15);

206 *
pb
++ = (
q15_t
Ë
	`__SSAT
((
c€f
), 16);

209 
èpC¡
--;

213 
èpC¡
 = 
numT≠s
 % 0x4u;

215 
èpC¡
 > 0u)

218 
c€f
 = (
q31_t
Ë* 
pb
 + (((q31_tË
Æpha
 * (*
px
++)) >> 15);

219 *
pb
++ = (
q15_t
Ë
	`__SSAT
((
c€f
), 16);

222 
èpC¡
--;

226 
blkC¡
--;

235 
pSèãCu∫t
 = 
S
->
pSèã
;

238 
èpC¡
 = (
numT≠s
 - 1u) >> 2;

240 
èpC¡
 > 0u)

243 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


245 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

246 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

248 *
pSèãCu∫t
++ = *
pSèã
++;

249 *
pSèãCu∫t
++ = *
pSèã
++;

250 *
pSèãCu∫t
++ = *
pSèã
++;

251 *
pSèãCu∫t
++ = *
pSèã
++;

254 
èpC¡
--;

259 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

262 
èpC¡
 > 0u)

264 *
pSèãCu∫t
++ = *
pSèã
++;

267 
èpC¡
--;

276 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

279 
blkC¡
 = 
blockSize
;

281 
blkC¡
 > 0u)

284 *
pSèãCu∫t
++ = *
pSrc
++;

287 
px
 = 
pSèã
;

290 
pb
 = 
pC€ffs
;

293 
acc
 = 0;

296 
èpC¡
 = 
numT≠s
;

298 
èpC¡
 > 0u)

301 
acc
 +(
q63_t
Ë((
q31_t
Ë(*
px
++Ë* (*
pb
++));

304 
èpC¡
--;

308 
acc_l
 = 
acc
 & 0xffffffff;

311 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

314 
acc
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

317 
acc
 = 
	`__SSAT
(acc, 16);

320 *
pOut
++ = (
q15_t
Ë
acc
;

323 
e
 = *
pRef
++ - (
q15_t
Ë
acc
;

325 *
pEº
++ = (
q15_t
Ë
e
;

328 
Æpha
 = (
q15_t
Ë(((
q31_t
Ë
e
 * (
mu
)) >> 15);

332 
px
 = 
pSèã
++;

335 
pb
 = 
pC€ffs
;

338 
èpC¡
 = 
numT≠s
;

340 
èpC¡
 > 0u)

343 
c€f
 = (
q31_t
Ë* 
pb
 + (((q31_tË
Æpha
 * (*
px
++)) >> 15);

344 *
pb
++ = (
q15_t
Ë
	`__SSAT
((
c€f
), 16);

347 
èpC¡
--;

351 
blkC¡
--;

360 
pSèãCu∫t
 = 
S
->
pSèã
;

363 
èpC¡
 = (
numT≠s
 - 1u);

366 
èpC¡
 > 0u)

368 *
pSèãCu∫t
++ = *
pSèã
++;

371 
èpC¡
--;

376 
	}
}

	@CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_q31.c

41 
	~"¨m_m©h.h
"

77 
	$¨m_lms_q31
(

78 c⁄° 
¨m_lms_ö°™˚_q31
 * 
S
,

79 
q31_t
 * 
pSrc
,

80 
q31_t
 * 
pRef
,

81 
q31_t
 * 
pOut
,

82 
q31_t
 * 
pEº
,

83 
uöt32_t
 
blockSize
)

85 
q31_t
 *
pSèã
 = 
S
->pState;

86 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

87 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

88 
q31_t
 *
pSèãCu∫t
;

89 
q31_t
 
mu
 = 
S
->mu;

90 
q31_t
 *
px
;

91 
q31_t
 *
pb
;

92 
uöt32_t
 
èpC¡
, 
blkC¡
;

93 
q63_t
 
acc
;

94 
q31_t
 
e
 = 0;

95 
q31_t
 
Æpha
;

96 
q31_t
 
c€f
;

97 
q31_t
 
acc_l
, 
acc_h
;

98 
uöt32_t
 
uShi·
 = ((uöt32_tË
S
->
po°Shi·
 + 1u);

99 
uöt32_t
 
lShi·
 = 32u - 
uShi·
;

103 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

106 
blkC¡
 = 
blockSize
;

109 #i‚de‡
ARM_MATH_CM0_FAMILY


113 
blkC¡
 > 0u)

116 *
pSèãCu∫t
++ = *
pSrc
++;

119 
px
 = 
pSèã
;

122 
pb
 = 
pC€ffs
;

125 
acc
 = 0;

128 
èpC¡
 = 
numT≠s
 >> 2;

130 
èpC¡
 > 0u)

134 
acc
 +((
q63_t
Ë(*
px
++)Ë* (*
pb
++);

137 
acc
 +((
q63_t
Ë(*
px
++)Ë* (*
pb
++);

140 
acc
 +((
q63_t
Ë(*
px
++)Ë* (*
pb
++);

143 
acc
 +((
q63_t
Ë(*
px
++)Ë* (*
pb
++);

146 
èpC¡
--;

150 
èpC¡
 = 
numT≠s
 % 0x4u;

152 
èpC¡
 > 0u)

155 
acc
 +((
q63_t
Ë(*
px
++)Ë* (*
pb
++);

158 
èpC¡
--;

163 
acc_l
 = 
acc
 & 0xffffffff;

166 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

168 
acc
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

171 *
pOut
++ = (
q31_t
Ë
acc
;

174 
e
 = *
pRef
++ - (
q31_t
Ë
acc
;

176 *
pEº
++ = (
q31_t
Ë
e
;

179 
Æpha
 = (
q31_t
Ë(((
q63_t
Ë
e
 * 
mu
) >> 31);

183 
px
 = 
pSèã
++;

186 
pb
 = 
pC€ffs
;

189 
èpC¡
 = 
numT≠s
 >> 2;

192 
èpC¡
 > 0u)

195 
c€f
 = (
q31_t
Ë(((
q63_t
Ë
Æpha
 * (*
px
++)) >> (32));

197 *
pb
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë*Öb + (
c€f
 << 1u));

199 
pb
++;

201 
c€f
 = (
q31_t
Ë(((
q63_t
Ë
Æpha
 * (*
px
++)) >> (32));

202 *
pb
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë*Öb + (
c€f
 << 1u));

203 
pb
++;

205 
c€f
 = (
q31_t
Ë(((
q63_t
Ë
Æpha
 * (*
px
++)) >> (32));

206 *
pb
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë*Öb + (
c€f
 << 1u));

207 
pb
++;

209 
c€f
 = (
q31_t
Ë(((
q63_t
Ë
Æpha
 * (*
px
++)) >> (32));

210 *
pb
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë*Öb + (
c€f
 << 1u));

211 
pb
++;

214 
èpC¡
--;

218 
èpC¡
 = 
numT≠s
 % 0x4u;

220 
èpC¡
 > 0u)

223 
c€f
 = (
q31_t
Ë(((
q63_t
Ë
Æpha
 * (*
px
++)) >> (32));

224 *
pb
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë*Öb + (
c€f
 << 1u));

225 
pb
++;

228 
èpC¡
--;

232 
blkC¡
--;

240 
pSèãCu∫t
 = 
S
->
pSèã
;

243 
èpC¡
 = (
numT≠s
 - 1u) >> 2u;

246 
èpC¡
 > 0u)

248 *
pSèãCu∫t
++ = *
pSèã
++;

249 *
pSèãCu∫t
++ = *
pSèã
++;

250 *
pSèãCu∫t
++ = *
pSèã
++;

251 *
pSèãCu∫t
++ = *
pSèã
++;

254 
èpC¡
--;

258 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

261 
èpC¡
 > 0u)

263 *
pSèãCu∫t
++ = *
pSèã
++;

266 
èpC¡
--;

273 
blkC¡
 > 0u)

276 *
pSèãCu∫t
++ = *
pSrc
++;

279 
px
 = 
pSèã
;

282 
pb
 = 
pC€ffs
;

285 
acc
 = 0;

288 
èpC¡
 = 
numT≠s
;

290 
èpC¡
 > 0u)

293 
acc
 +((
q63_t
Ë(*
px
++)Ë* (*
pb
++);

296 
èpC¡
--;

302 
acc_l
 = 
acc
 & 0xffffffff;

305 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

307 
acc
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

309 *
pOut
++ = (
q31_t
Ë
acc
;

312 
e
 = *
pRef
++ - (
q31_t
Ë
acc
;

314 *
pEº
++ = (
q31_t
Ë
e
;

317 
Æpha
 = (
q31_t
Ë(((
q63_t
Ë
e
 * 
mu
) >> 31);

321 
px
 = 
pSèã
++;

324 
pb
 = 
pC€ffs
;

327 
èpC¡
 = 
numT≠s
;

329 
èpC¡
 > 0u)

332 
c€f
 = (
q31_t
Ë(((
q63_t
Ë
Æpha
 * (*
px
++)) >> (32));

333 *
pb
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë*Öb + (
c€f
 << 1u));

334 
pb
++;

337 
èpC¡
--;

341 
blkC¡
--;

349 
pSèãCu∫t
 = 
S
->
pSèã
;

352 
èpC¡
 = (
numT≠s
 - 1u);

355 
èpC¡
 > 0u)

357 *
pSèãCu∫t
++ = *
pSèã
++;

360 
èpC¡
--;

365 
	}
}

	@CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_add_f32.c

41 
	~"¨m_m©h.h
"

73 
¨m_°©us
 
	$¨m_m©_add_f32
(

74 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

75 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

76 
¨m_m©rix_ö°™˚_f32
 * 
pD°
)

78 
Êﬂt32_t
 *
pIn1
 = 
pSrcA
->
pD©a
;

79 
Êﬂt32_t
 *
pIn2
 = 
pSrcB
->
pD©a
;

80 
Êﬂt32_t
 *
pOut
 = 
pD°
->
pD©a
;

82 #i‚de‡
ARM_MATH_CM0_FAMILY


84 
Êﬂt32_t
 
öA1
, 
öA2
, 
öB1
, 
öB2
, 
out1
, 
out2
;

88 
uöt32_t
 
numSam∂es
;

89 
uöt32_t
 
blkC¡
;

90 
¨m_°©us
 
°©us
;

92 #ifde‡
ARM_MATH_MATRIX_CHECK


94 if((
pSrcA
->
numRows
 !
pSrcB
->numRows) ||

95 (
pSrcA
->
numCﬁs
 !
pSrcB
->numCols) ||

96 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (pSrcA->
numCﬁs
 !=ÖDst->numCols))

99 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

106 
numSam∂es
 = (
uöt32_t
Ë
pSrcA
->
numRows
 *ÖSrcA->
numCﬁs
;

108 #i‚de‡
ARM_MATH_CM0_FAMILY


111 
blkC¡
 = 
numSam∂es
 >> 2u;

115 
blkC¡
 > 0u)

120 
öA1
 = 
pIn1
[0];

123 
öB1
 = 
pIn2
[0];

126 
öA2
 = 
pIn1
[1];

129 
out1
 = 
öA1
 + 
öB1
;

132 
öB2
 = 
pIn2
[1];

135 
öA1
 = 
pIn1
[2];

138 
out2
 = 
öA2
 + 
öB2
;

141 
öB1
 = 
pIn2
[2];

144 
pOut
[0] = 
out1
;

145 
pOut
[1] = 
out2
;

148 
öA2
 = 
pIn1
[3];

151 
öB2
 = 
pIn2
[3];

154 
out1
 = 
öA1
 + 
öB1
;

157 
out2
 = 
öA2
 + 
öB2
;

160 
pOut
[2] = 
out1
;

163 
pOut
[3] = 
out2
;

167 
pIn1
 += 4u;

168 
pIn2
 += 4u;

169 
pOut
 += 4u;

171 
blkC¡
--;

176 
blkC¡
 = 
numSam∂es
 % 0x4u;

183 
blkC¡
 = 
numSam∂es
;

187 
blkC¡
 > 0u)

191 *
pOut
++ = (*
pIn1
++Ë+ (*
pIn2
++);

194 
blkC¡
--;

198 
°©us
 = 
ARM_MATH_SUCCESS
;

203  (
°©us
);

204 
	}
}

	@CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_add_q15.c

41 
	~"¨m_m©h.h
"

66 
¨m_°©us
 
	$¨m_m©_add_q15
(

67 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

68 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

69 
¨m_m©rix_ö°™˚_q15
 * 
pD°
)

71 
q15_t
 *
pInA
 = 
pSrcA
->
pD©a
;

72 
q15_t
 *
pInB
 = 
pSrcB
->
pD©a
;

73 
q15_t
 *
pOut
 = 
pD°
->
pD©a
;

74 
uöt16_t
 
numSam∂es
;

75 
uöt32_t
 
blkC¡
;

76 
¨m_°©us
 
°©us
;

78 #ifde‡
ARM_MATH_MATRIX_CHECK


82 if((
pSrcA
->
numRows
 !
pSrcB
->numRows) ||

83 (
pSrcA
->
numCﬁs
 !
pSrcB
->numCols) ||

84 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (pSrcA->
numCﬁs
 !=ÖDst->numCols))

87 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

94 
numSam∂es
 = (
uöt16_t
Ë(
pSrcA
->
numRows
 *ÖSrcA->
numCﬁs
);

96 #i‚de‡
ARM_MATH_CM0_FAMILY


101 
blkC¡
 = (
uöt32_t
Ë
numSam∂es
 >> 2u;

105 
blkC¡
 > 0u)

109 *
	`__SIMD32
(
pOut
)++ = 
	`__QADD16
(*__SIMD32(
pInA
)++, *__SIMD32(
pInB
)++);

110 *
	`__SIMD32
(
pOut
)++ = 
	`__QADD16
(*__SIMD32(
pInA
)++, *__SIMD32(
pInB
)++);

113 
blkC¡
--;

118 
blkC¡
 = (
uöt32_t
Ë
numSam∂es
 % 0x4u;

122 
blkC¡
 > 0u)

126 *
pOut
++ = (
q15_t
Ë
	`__QADD16
(*
pInA
++, *
pInB
++);

129 
blkC¡
--;

137 
blkC¡
 = (
uöt32_t
Ë
numSam∂es
;

141 
blkC¡
 > 0u)

145 *
pOut
++ = (
q15_t
Ë
	`__SSAT
(((
q31_t
Ë* 
pInA
++ + *
pInB
++), 16);

148 
blkC¡
--;

154 
°©us
 = 
ARM_MATH_SUCCESS
;

158  (
°©us
);

159 
	}
}

	@CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_add_q31.c

41 
	~"¨m_m©h.h
"

66 
¨m_°©us
 
	$¨m_m©_add_q31
(

67 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

68 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

69 
¨m_m©rix_ö°™˚_q31
 * 
pD°
)

71 
q31_t
 *
pIn1
 = 
pSrcA
->
pD©a
;

72 
q31_t
 *
pIn2
 = 
pSrcB
->
pD©a
;

73 
q31_t
 *
pOut
 = 
pD°
->
pD©a
;

74 
q31_t
 
öA1
, 
öB1
;

76 #i‚de‡
ARM_MATH_CM0_FAMILY


78 
q31_t
 
öA2
, 
öB2
;

79 
q31_t
 
out1
, 
out2
;

83 
uöt32_t
 
numSam∂es
;

84 
uöt32_t
 
blkC¡
;

85 
¨m_°©us
 
°©us
;

87 #ifde‡
ARM_MATH_MATRIX_CHECK


89 if((
pSrcA
->
numRows
 !
pSrcB
->numRows) ||

90 (
pSrcA
->
numCﬁs
 !
pSrcB
->numCols) ||

91 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (pSrcA->
numCﬁs
 !=ÖDst->numCols))

94 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

100 
numSam∂es
 = (
uöt32_t
Ë
pSrcA
->
numRows
 *ÖSrcA->
numCﬁs
;

102 #i‚de‡
ARM_MATH_CM0_FAMILY


107 
blkC¡
 = 
numSam∂es
 >> 2u;

112 
blkC¡
 > 0u)

117 
öA1
 = 
pIn1
[0];

120 
öB1
 = 
pIn2
[0];

123 
öA2
 = 
pIn1
[1];

126 
out1
 = 
	`__QADD
(
öA1
, 
öB1
);

129 
öB2
 = 
pIn2
[1];

132 
öA1
 = 
pIn1
[2];

135 
out2
 = 
	`__QADD
(
öA2
, 
öB2
);

138 
öB1
 = 
pIn2
[2];

141 
pOut
[0] = 
out1
;

142 
pOut
[1] = 
out2
;

145 
öA2
 = 
pIn1
[3];

148 
öB2
 = 
pIn2
[3];

151 
out1
 = 
	`__QADD
(
öA1
, 
öB1
);

152 
out2
 = 
	`__QADD
(
öA2
, 
öB2
);

155 
pOut
[2] = 
out1
;

156 
pOut
[3] = 
out2
;

159 
pIn1
 += 4u;

160 
pIn2
 += 4u;

161 
pOut
 += 4u;

164 
blkC¡
--;

169 
blkC¡
 = 
numSam∂es
 % 0x4u;

176 
blkC¡
 = 
numSam∂es
;

181 
blkC¡
 > 0u)

185 
öA1
 = *
pIn1
++;

186 
öB1
 = *
pIn2
++;

188 
öA1
 = 
	`__QADD
(öA1, 
öB1
);

191 
blkC¡
--;

193 *
pOut
++ = 
öA1
;

198 
°©us
 = 
ARM_MATH_SUCCESS
;

202  (
°©us
);

203 
	}
}

	@CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c

40 
	~"¨m_m©h.h
"

73 
¨m_°©us
 
	$¨m_m©_cm∂x_mu…_f32
(

74 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

75 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

76 
¨m_m©rix_ö°™˚_f32
 * 
pD°
)

78 
Êﬂt32_t
 *
pIn1
 = 
pSrcA
->
pD©a
;

79 
Êﬂt32_t
 *
pIn2
 = 
pSrcB
->
pD©a
;

80 
Êﬂt32_t
 *
pInA
 = 
pSrcA
->
pD©a
;

81 
Êﬂt32_t
 *
pOut
 = 
pD°
->
pD©a
;

82 
Êﬂt32_t
 *
px
;

83 
uöt16_t
 
numRowsA
 = 
pSrcA
->
numRows
;

84 
uöt16_t
 
numCﬁsB
 = 
pSrcB
->
numCﬁs
;

85 
uöt16_t
 
numCﬁsA
 = 
pSrcA
->
numCﬁs
;

86 
Êﬂt32_t
 
sumRól1
, 
sumImag1
;

87 
Êﬂt32_t
 
a0
, 
b0
, 
c0
, 
d0
;

88 
Êﬂt32_t
 
a1
, 
b1
, 
c1
, 
d1
;

89 
Êﬂt32_t
 
sumRól2
, 
sumImag2
;

94 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
j
, 
row
 = 
numRowsA
, 
cﬁC¡
;

95 
¨m_°©us
 
°©us
;

97 #ifde‡
ARM_MATH_MATRIX_CHECK


101 if((
pSrcA
->
numCﬁs
 !
pSrcB
->
numRows
) ||

102 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (
pSrcB
->
numCﬁs
 !=ÖDst->numCols))

106 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

117 
px
 = 
pOut
 + 2 * 
i
;

120 
cﬁ
 = 
numCﬁsB
;

124 
pIn2
 = 
pSrcB
->
pD©a
;

126 
j
 = 0u;

132 
sumRól1
 = 0.0f;

133 
sumImag1
 = 0.0f;

135 
sumRól2
 = 0.0f;

136 
sumImag2
 = 0.0f;

139 
pIn1
 = 
pInA
;

142 
cﬁC¡
 = 
numCﬁsA
 >> 2;

145 
cﬁC¡
 > 0u)

149 
a0
 = *
pIn1
;

152 
c0
 = *
pIn2
;

155 
b0
 = *(
pIn1
 + 1u);

158 
d0
 = *(
pIn2
 + 1u);

160 
sumRól1
 +
a0
 * 
c0
;

161 
sumImag1
 +
b0
 * 
c0
;

163 
pIn1
 += 2u;

164 
pIn2
 +2 * 
numCﬁsB
;

166 
sumRól2
 -
b0
 * 
d0
;

167 
sumImag2
 +
a0
 * 
d0
;

171 
a1
 = *
pIn1
;

172 
c1
 = *
pIn2
;

174 
b1
 = *(
pIn1
 + 1u);

175 
d1
 = *(
pIn2
 + 1u);

177 
sumRól1
 +
a1
 * 
c1
;

178 
sumImag1
 +
b1
 * 
c1
;

180 
pIn1
 += 2u;

181 
pIn2
 +2 * 
numCﬁsB
;

183 
sumRól2
 -
b1
 * 
d1
;

184 
sumImag2
 +
a1
 * 
d1
;

186 
a0
 = *
pIn1
;

187 
c0
 = *
pIn2
;

189 
b0
 = *(
pIn1
 + 1u);

190 
d0
 = *(
pIn2
 + 1u);

192 
sumRól1
 +
a0
 * 
c0
;

193 
sumImag1
 +
b0
 * 
c0
;

195 
pIn1
 += 2u;

196 
pIn2
 +2 * 
numCﬁsB
;

198 
sumRól2
 -
b0
 * 
d0
;

199 
sumImag2
 +
a0
 * 
d0
;

203 
a1
 = *
pIn1
;

204 
c1
 = *
pIn2
;

206 
b1
 = *(
pIn1
 + 1u);

207 
d1
 = *(
pIn2
 + 1u);

209 
sumRól1
 +
a1
 * 
c1
;

210 
sumImag1
 +
b1
 * 
c1
;

212 
pIn1
 += 2u;

213 
pIn2
 +2 * 
numCﬁsB
;

215 
sumRól2
 -
b1
 * 
d1
;

216 
sumImag2
 +
a1
 * 
d1
;

219 
cﬁC¡
--;

224 
cﬁC¡
 = 
numCﬁsA
 % 0x4u;

226 
cﬁC¡
 > 0u)

229 
a1
 = *
pIn1
;

230 
c1
 = *
pIn2
;

232 
b1
 = *(
pIn1
 + 1u);

233 
d1
 = *(
pIn2
 + 1u);

235 
sumRól1
 +
a1
 * 
c1
;

236 
sumImag1
 +
b1
 * 
c1
;

238 
pIn1
 += 2u;

239 
pIn2
 +2 * 
numCﬁsB
;

241 
sumRól2
 -
b1
 * 
d1
;

242 
sumImag2
 +
a1
 * 
d1
;

245 
cﬁC¡
--;

248 
sumRól1
 +
sumRól2
;

249 
sumImag1
 +
sumImag2
;

252 *
px
++ = 
sumRól1
;

253 *
px
++ = 
sumImag1
;

256 
j
++;

257 
pIn2
 = 
pSrcB
->
pD©a
 + 2u * 
j
;

260 
cﬁ
--;

262 } 
cﬁ
 > 0u);

265 
i
 = i + 
numCﬁsB
;

266 
pInA
 =ÖInA + 2 * 
numCﬁsA
;

269 
row
--;

271 } 
row
 > 0u);

274 
°©us
 = 
ARM_MATH_SUCCESS
;

278  (
°©us
);

279 
	}
}

	@CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_cmplx_mult_q15.c

40 
	~"¨m_m©h.h
"

88 
¨m_°©us
 
	$¨m_m©_cm∂x_mu…_q15
(

89 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

90 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

91 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

92 
q15_t
 * 
pS¸©ch
)

95 
q15_t
 *
pSrcBT
 = 
pS¸©ch
;

96 
q15_t
 *
pInA
 = 
pSrcA
->
pD©a
;

97 
q15_t
 *
pInB
 = 
pSrcB
->
pD©a
;

98 
q15_t
 *
px
;

99 
uöt16_t
 
numRowsA
 = 
pSrcA
->
numRows
;

100 
uöt16_t
 
numCﬁsB
 = 
pSrcB
->
numCﬁs
;

101 
uöt16_t
 
numCﬁsA
 = 
pSrcA
->
numCﬁs
;

102 
uöt16_t
 
numRowsB
 = 
pSrcB
->
numRows
;

103 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
row
 = 
numRowsB
, 
cﬁC¡
;

104 
¨m_°©us
 
°©us
;

105 
q63_t
 
sumRól
, 
sumImag
;

107 #ifde‡
UNALIGNED_SUPPORT_DISABLE


108 
q15_t
 
ö
;

109 
q15_t
 
a
, 
b
, 
c
, 
d
;

111 
q31_t
 
ö
;

112 
q31_t
 
¥od1
, 
¥od2
;

113 
q31_t
 
pSour˚A
, 
pSour˚B
;

116 #ifde‡
ARM_MATH_MATRIX_CHECK


118 if((
pSrcA
->
numCﬁs
 !
pSrcB
->
numRows
) ||

119 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (
pSrcB
->
numCﬁs
 !=ÖDst->numCols))

122 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

131 
cﬁ
 = 
numCﬁsB
 >> 2;

134 
px
 = 
pSrcBT
 + 
i
;

138 
cﬁ
 > 0u)

140 #ifde‡
UNALIGNED_SUPPORT_DISABLE


142 
ö
 = *
pInB
++;

143 *
px
 = 
ö
;

144 
ö
 = *
pInB
++;

145 
px
[1] = 
ö
;

148 
px
 +
numRowsB
 * 2;

151 
ö
 = *
pInB
++;

152 *
px
 = 
ö
;

153 
ö
 = *
pInB
++;

154 
px
[1] = 
ö
;

157 
px
 +
numRowsB
 * 2;

160 
ö
 = *
pInB
++;

161 *
px
 = 
ö
;

162 
ö
 = *
pInB
++;

163 
px
[1] = 
ö
;

166 
px
 +
numRowsB
 * 2;

169 
ö
 = *
pInB
++;

170 *
px
 = 
ö
;

171 
ö
 = *
pInB
++;

172 
px
[1] = 
ö
;

175 
px
 +
numRowsB
 * 2;

178 
cﬁ
--;

183 
cﬁ
 = 
numCﬁsB
 % 0x4u;

185 
cﬁ
 > 0u)

188 
ö
 = *
pInB
++;

189 *
px
 = 
ö
;

190 
ö
 = *
pInB
++;

191 
px
[1] = 
ö
;

195 
ö
 = *
	`__SIMD32
(
pInB
)++;

197 *
	`__SIMD32
(
px
Ë
ö
;

200 
px
 +
numRowsB
 * 2;

204 
ö
 = *
	`__SIMD32
(
pInB
)++;

206 *
	`__SIMD32
(
px
Ë
ö
;

209 
px
 +
numRowsB
 * 2;

212 
ö
 = *
	`__SIMD32
(
pInB
)++;

214 *
	`__SIMD32
(
px
Ë
ö
;

217 
px
 +
numRowsB
 * 2;

220 
ö
 = *
	`__SIMD32
(
pInB
)++;

222 *
	`__SIMD32
(
px
Ë
ö
;

225 
px
 +
numRowsB
 * 2;

228 
cﬁ
--;

233 
cﬁ
 = 
numCﬁsB
 % 0x4u;

235 
cﬁ
 > 0u)

238 
ö
 = *
	`__SIMD32
(
pInB
)++;

240 *
	`__SIMD32
(
px
Ë
ö
;

244 
px
 +
numRowsB
 * 2;

247 
cﬁ
--;

250 
i
 = i + 2u;

253 
row
--;

255 } 
row
 > 0u);

258 
row
 = 
numRowsA
;

259 
i
 = 0u;

260 
px
 = 
pD°
->
pD©a
;

267 
cﬁ
 = 
numCﬁsB
;

271 
pInB
 = 
pSrcBT
;

277 
sumRól
 = 0;

278 
sumImag
 = 0;

281 
cﬁC¡
 = 
numCﬁsA
 >> 1;

284 
pInA
 = 
pSrcA
->
pD©a
 + 
i
 * 2;

288 
cﬁC¡
 > 0u)

292 #ifde‡
UNALIGNED_SUPPORT_DISABLE


295 
a
 = *
pInA
;

296 
b
 = *(
pInA
 + 1u);

298 
c
 = *
pInB
;

299 
d
 = *(
pInB
 + 1u);

302 
sumRól
 +(
q31_t
Ë
a
 *
c
;

303 
sumImag
 +(
q31_t
Ë
a
 *
d
;

304 
sumRól
 -(
q31_t
Ë
b
 *
d
;

305 
sumImag
 +(
q31_t
Ë
b
 *
c
;

308 
a
 = *(
pInA
 + 2u);

309 
b
 = *(
pInA
 + 3u);

311 
c
 = *(
pInB
 + 2u);

312 
d
 = *(
pInB
 + 3u);

315 
pInA
 += 4u;

318 
sumRól
 +(
q31_t
Ë
a
 *
c
;

319 
sumImag
 +(
q31_t
Ë
a
 *
d
;

320 
sumRól
 -(
q31_t
Ë
b
 *
d
;

321 
sumImag
 +(
q31_t
Ë
b
 *
c
;

323 
pInB
 += 4u;

326 
pSour˚A
 = *
	`__SIMD32
(
pInA
)++;

327 
pSour˚B
 = *
	`__SIMD32
(
pInB
)++;

330 #ifde‡
ARM_MATH_BIG_ENDIAN


331 
¥od1
 = -
	`__SMUSD
(
pSour˚A
, 
pSour˚B
);

333 
¥od1
 = 
	`__SMUSD
(
pSour˚A
, 
pSour˚B
);

335 
¥od2
 = 
	`__SMUADX
(
pSour˚A
, 
pSour˚B
);

336 
sumRól
 +(
q63_t
Ë
¥od1
;

337 
sumImag
 +(
q63_t
Ë
¥od2
;

340 
pSour˚A
 = *
	`__SIMD32
(
pInA
)++;

341 
pSour˚B
 = *
	`__SIMD32
(
pInB
)++;

344 #ifde‡
ARM_MATH_BIG_ENDIAN


345 
¥od1
 = -
	`__SMUSD
(
pSour˚A
, 
pSour˚B
);

347 
¥od1
 = 
	`__SMUSD
(
pSour˚A
, 
pSour˚B
);

349 
¥od2
 = 
	`__SMUADX
(
pSour˚A
, 
pSour˚B
);

350 
sumRól
 +(
q63_t
Ë
¥od1
;

351 
sumImag
 +(
q63_t
Ë
¥od2
;

356 
cﬁC¡
--;

360 if((
numCﬁsA
 & 0x1u) > 0u)

364 #ifde‡
UNALIGNED_SUPPORT_DISABLE


367 
a
 = *
pInA
++;

368 
b
 = *
pInA
++;

369 
c
 = *
pInB
++;

370 
d
 = *
pInB
++;

373 
sumRól
 +(
q31_t
Ë
a
 *
c
;

374 
sumImag
 +(
q31_t
Ë
a
 *
d
;

375 
sumRól
 -(
q31_t
Ë
b
 *
d
;

376 
sumImag
 +(
q31_t
Ë
b
 *
c
;

380 
pSour˚A
 = *
	`__SIMD32
(
pInA
)++;

381 
pSour˚B
 = *
	`__SIMD32
(
pInB
)++;

384 #ifde‡
ARM_MATH_BIG_ENDIAN


385 
¥od1
 = -
	`__SMUSD
(
pSour˚A
, 
pSour˚B
);

387 
¥od1
 = 
	`__SMUSD
(
pSour˚A
, 
pSour˚B
);

389 
¥od2
 = 
	`__SMUADX
(
pSour˚A
, 
pSour˚B
);

390 
sumRól
 +(
q63_t
Ë
¥od1
;

391 
sumImag
 +(
q63_t
Ë
¥od2
;

399 *
px
++ = (
q15_t
Ë(
	`__SSAT
(
sumRól
 >> 15, 16));

400 *
px
++ = (
q15_t
Ë(
	`__SSAT
(
sumImag
 >> 15, 16));

403 
cﬁ
--;

405 } 
cﬁ
 > 0u);

407 
i
 = i + 
numCﬁsA
;

410 
row
--;

412 } 
row
 > 0u);

415 
°©us
 = 
ARM_MATH_SUCCESS
;

419  (
°©us
);

420 
	}
}

	@CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c

40 
	~"¨m_m©h.h
"

75 
¨m_°©us
 
	$¨m_m©_cm∂x_mu…_q31
(

76 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

77 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

78 
¨m_m©rix_ö°™˚_q31
 * 
pD°
)

80 
q31_t
 *
pIn1
 = 
pSrcA
->
pD©a
;

81 
q31_t
 *
pIn2
 = 
pSrcB
->
pD©a
;

82 
q31_t
 *
pInA
 = 
pSrcA
->
pD©a
;

83 
q31_t
 *
pOut
 = 
pD°
->
pD©a
;

84 
q31_t
 *
px
;

85 
uöt16_t
 
numRowsA
 = 
pSrcA
->
numRows
;

86 
uöt16_t
 
numCﬁsB
 = 
pSrcB
->
numCﬁs
;

87 
uöt16_t
 
numCﬁsA
 = 
pSrcA
->
numCﬁs
;

88 
q63_t
 
sumRól1
, 
sumImag1
;

89 
q31_t
 
a0
, 
b0
, 
c0
, 
d0
;

90 
q31_t
 
a1
, 
b1
, 
c1
, 
d1
;

95 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
j
, 
row
 = 
numRowsA
, 
cﬁC¡
;

96 
¨m_°©us
 
°©us
;

98 #ifde‡
ARM_MATH_MATRIX_CHECK


102 if((
pSrcA
->
numCﬁs
 !
pSrcB
->
numRows
) ||

103 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (
pSrcB
->
numCﬁs
 !=ÖDst->numCols))

107 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

118 
px
 = 
pOut
 + 2 * 
i
;

121 
cﬁ
 = 
numCﬁsB
;

125 
pIn2
 = 
pSrcB
->
pD©a
;

127 
j
 = 0u;

133 
sumRól1
 = 0.0;

134 
sumImag1
 = 0.0;

137 
pIn1
 = 
pInA
;

140 
cﬁC¡
 = 
numCﬁsA
 >> 2;

143 
cﬁC¡
 > 0u)

147 
a0
 = *
pIn1
;

150 
c0
 = *
pIn2
;

153 
b0
 = *(
pIn1
 + 1u);

156 
d0
 = *(
pIn2
 + 1u);

159 
sumRól1
 +(
q63_t
Ë
a0
 *
c0
;

160 
sumImag1
 +(
q63_t
Ë
b0
 *
c0
;

163 
pIn1
 += 2u;

164 
pIn2
 +2 * 
numCﬁsB
;

167 
sumRól1
 -(
q63_t
Ë
b0
 *
d0
;

168 
sumImag1
 +(
q63_t
Ë
a0
 *
d0
;

173 
a1
 = *
pIn1
;

174 
c1
 = *
pIn2
;

175 
b1
 = *(
pIn1
 + 1u);

176 
d1
 = *(
pIn2
 + 1u);

179 
sumRól1
 +(
q63_t
Ë
a1
 *
c1
;

180 
sumImag1
 +(
q63_t
Ë
b1
 *
c1
;

183 
pIn1
 += 2u;

184 
pIn2
 +2 * 
numCﬁsB
;

187 
sumRól1
 -(
q63_t
Ë
b1
 *
d1
;

188 
sumImag1
 +(
q63_t
Ë
a1
 *
d1
;

190 
a0
 = *
pIn1
;

191 
c0
 = *
pIn2
;

193 
b0
 = *(
pIn1
 + 1u);

194 
d0
 = *(
pIn2
 + 1u);

197 
sumRól1
 +(
q63_t
Ë
a0
 *
c0
;

198 
sumImag1
 +(
q63_t
Ë
b0
 *
c0
;

201 
pIn1
 += 2u;

202 
pIn2
 +2 * 
numCﬁsB
;

205 
sumRól1
 -(
q63_t
Ë
b0
 *
d0
;

206 
sumImag1
 +(
q63_t
Ë
a0
 *
d0
;

210 
a1
 = *
pIn1
;

211 
c1
 = *
pIn2
;

213 
b1
 = *(
pIn1
 + 1u);

214 
d1
 = *(
pIn2
 + 1u);

217 
sumRól1
 +(
q63_t
Ë
a1
 *
c1
;

218 
sumImag1
 +(
q63_t
Ë
b1
 *
c1
;

221 
pIn1
 += 2u;

222 
pIn2
 +2 * 
numCﬁsB
;

225 
sumRól1
 -(
q63_t
Ë
b1
 *
d1
;

226 
sumImag1
 +(
q63_t
Ë
a1
 *
d1
;

229 
cﬁC¡
--;

234 
cﬁC¡
 = 
numCﬁsA
 % 0x4u;

236 
cﬁC¡
 > 0u)

239 
a1
 = *
pIn1
;

240 
c1
 = *
pIn2
;

242 
b1
 = *(
pIn1
 + 1u);

243 
d1
 = *(
pIn2
 + 1u);

246 
sumRól1
 +(
q63_t
Ë
a1
 *
c1
;

247 
sumImag1
 +(
q63_t
Ë
b1
 *
c1
;

250 
pIn1
 += 2u;

251 
pIn2
 +2 * 
numCﬁsB
;

254 
sumRól1
 -(
q63_t
Ë
b1
 *
d1
;

255 
sumImag1
 +(
q63_t
Ë
a1
 *
d1
;

258 
cﬁC¡
--;

262 *
px
++ = (
q31_t
Ë
	`˛ù_q63_to_q31
(
sumRól1
 >> 31);

263 *
px
++ = (
q31_t
Ë
	`˛ù_q63_to_q31
(
sumImag1
 >> 31);

266 
j
++;

267 
pIn2
 = 
pSrcB
->
pD©a
 + 2u * 
j
;

270 
cﬁ
--;

272 } 
cﬁ
 > 0u);

275 
i
 = i + 
numCﬁsB
;

276 
pInA
 =ÖInA + 2 * 
numCﬁsA
;

279 
row
--;

281 } 
row
 > 0u);

284 
°©us
 = 
ARM_MATH_SUCCESS
;

288  (
°©us
);

289 
	}
}

	@CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_init_f32.c

41 
	~"¨m_m©h.h
"

70 
	$¨m_m©_öô_f32
(

71 
¨m_m©rix_ö°™˚_f32
 * 
S
,

72 
uöt16_t
 
nRows
,

73 
uöt16_t
 
nCﬁumns
,

74 
Êﬂt32_t
 * 
pD©a
)

77 
S
->
numRows
 = 
nRows
;

80 
S
->
numCﬁs
 = 
nCﬁumns
;

83 
S
->
pD©a
 =ÖData;

84 
	}
}

	@CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_init_q15.c

42 
	~"¨m_m©h.h
"

62 
	$¨m_m©_öô_q15
(

63 
¨m_m©rix_ö°™˚_q15
 * 
S
,

64 
uöt16_t
 
nRows
,

65 
uöt16_t
 
nCﬁumns
,

66 
q15_t
 * 
pD©a
)

69 
S
->
numRows
 = 
nRows
;

72 
S
->
numCﬁs
 = 
nCﬁumns
;

75 
S
->
pD©a
 =ÖData;

76 
	}
}

	@CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_init_q31.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_m©_öô_q31
(

67 
¨m_m©rix_ö°™˚_q31
 * 
S
,

68 
uöt16_t
 
nRows
,

69 
uöt16_t
 
nCﬁumns
,

70 
q31_t
 * 
pD©a
)

73 
S
->
numRows
 = 
nRows
;

76 
S
->
numCﬁs
 = 
nCﬁumns
;

79 
S
->
pD©a
 =ÖData;

80 
	}
}

	@CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_inverse_f32.c

41 
	~"¨m_m©h.h
"

85 
¨m_°©us
 
	$¨m_m©_övî£_f32
(

86 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

87 
¨m_m©rix_ö°™˚_f32
 * 
pD°
)

89 
Êﬂt32_t
 *
pIn
 = 
pSrc
->
pD©a
;

90 
Êﬂt32_t
 *
pOut
 = 
pD°
->
pD©a
;

91 
Êﬂt32_t
 *
pInT1
, *
pInT2
;

92 
Êﬂt32_t
 *
pOutT1
, *
pOutT2
;

93 
Êﬂt32_t
 *
pPivŸRowIn
, *
pPRT_ö
, *
pPivŸRowD°
, *
pPRT_pD°
;

94 
uöt32_t
 
numRows
 = 
pSrc
->numRows;

95 
uöt32_t
 
numCﬁs
 = 
pSrc
->numCols;

97 #i‚de‡
ARM_MATH_CM0_FAMILY


98 
Êﬂt32_t
 
maxC
;

102 
Êﬂt32_t
 
Xchg
, 
ö
 = 0.0f, 
ö1
;

103 
uöt32_t
 
i
, 
rowC¡
, 
Êag
 = 0u, 
j
, 
lo›C¡
, 
k
, 
l
;

104 
¨m_°©us
 
°©us
;

106 #ifde‡
ARM_MATH_MATRIX_CHECK


110 if((
pSrc
->
numRows
 !pSrc->
numCﬁs
Ë|| (
pD°
->numRows !=ÖDst->numCols)

111 || (
pSrc
->
numRows
 !
pD°
->numRows))

114 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

158 
pOutT1
 = 
pOut
;

161 
rowC¡
 = 
numRows
;

164 
rowC¡
 > 0u)

167 
j
 = 
numRows
 - 
rowC¡
;

168 
j
 > 0u)

170 *
pOutT1
++ = 0.0f;

171 
j
--;

175 *
pOutT1
++ = 1.0f;

178 
j
 = 
rowC¡
 - 1u;

179 
j
 > 0u)

181 *
pOutT1
++ = 0.0f;

182 
j
--;

186 
rowC¡
--;

191 
lo›C¡
 = 
numCﬁs
;

194 
l
 = 0u;

196 
lo›C¡
 > 0u)

205 
pInT1
 = 
pIn
 + (
l
 * 
numCﬁs
);

209 
pOutT1
 = 
pOut
 + (
l
 * 
numCﬁs
);

212 
ö
 = *
pInT1
;

215 
maxC
 = 0;

216 
i
 = 
l
; i < 
numRows
; i++)

218 
maxC
 = *
pInT1
 > 0 ? (*pInT1 > maxC ? *pInT1 : maxC) : (-*pInT1 > maxC ? -*pInT1 : maxC);

219 
pInT1
 +
numCﬁs
;

223 if(
maxC
 == 0.0f)

225  
ARM_MATH_SINGULAR
;

229 
pInT1
 = 
pIn
;

232 
k
 = 1u;

235 if–(
ö
 > 0.0‡? i¿: -öË!
maxC
)

238 
i
 = 
numRows
 - (
l
 + 1u);

240 
i
 > 0u)

243 
pInT2
 = 
pInT1
 + (
numCﬁs
 * 
l
);

244 
pOutT2
 = 
pOutT1
 + (
numCﬁs
 * 
k
);

248 if((*
pInT2
 > 0.0‡? *pInT2: -*pInT2Ë=
maxC
)

252 
j
 = 
numCﬁs
 - 
l
;

254 
j
 > 0u)

257 
Xchg
 = *
pInT2
;

258 *
pInT2
++ = *
pInT1
;

259 *
pInT1
++ = 
Xchg
;

262 
j
--;

266 
j
 = 
numCﬁs
;

268 
j
 > 0u)

271 
Xchg
 = *
pOutT2
;

272 *
pOutT2
++ = *
pOutT1
;

273 *
pOutT1
++ = 
Xchg
;

276 
j
--;

280 
Êag
 = 1u;

287 
k
++;

290 
i
--;

295 if((
Êag
 !1uË&& (
ö
 == 0.0f))

297  
ARM_MATH_SINGULAR
;

301 
pPivŸRowIn
 = 
pIn
 + (
l
 * 
numCﬁs
);

302 
pPivŸRowD°
 = 
pOut
 + (
l
 * 
numCﬁs
);

305 
pInT1
 = 
pPivŸRowIn
;

306 
pInT2
 = 
pPivŸRowD°
;

309 
ö
 = *
pPivŸRowIn
;

313 
j
 = (
numCﬁs
 - 
l
);

315 
j
 > 0u)

319 
ö1
 = *
pInT1
;

320 *
pInT1
++ = 
ö1
 / 
ö
;

323 
j
--;

327 
j
 = 
numCﬁs
;

329 
j
 > 0u)

333 
ö1
 = *
pInT2
;

334 *
pInT2
++ = 
ö1
 / 
ö
;

337 
j
--;

344 
pInT1
 = 
pIn
;

345 
pInT2
 = 
pOut
;

348 
i
 = 0u;

352 
k
 = 
numRows
;

354 
k
 > 0u)

357 if(
i
 =
l
)

361 
pInT1
 +
numCﬁs
 - 
l
;

363 
pInT2
 +
numCﬁs
;

368 
ö
 = *
pInT1
;

371 
pPRT_ö
 = 
pPivŸRowIn
;

372 
pPRT_pD°
 = 
pPivŸRowD°
;

376 
j
 = (
numCﬁs
 - 
l
);

378 
j
 > 0u)

382 
ö1
 = *
pInT1
;

383 *
pInT1
++ = 
ö1
 - (
ö
 * *
pPRT_ö
++);

386 
j
--;

391 
j
 = 
numCﬁs
;

393 
j
 > 0u)

397 
ö1
 = *
pInT2
;

398 *
pInT2
++ = 
ö1
 - (
ö
 * *
pPRT_pD°
++);

401 
j
--;

407 
pInT1
 =ÖInT1 + 
l
;

410 
k
--;

413 
i
++;

417 
pIn
++;

420 
lo›C¡
--;

423 
l
++;

431 
Êﬂt32_t
 
Xchg
, 
ö
 = 0.0f;

432 
uöt32_t
 
i
, 
rowC¡
, 
Êag
 = 0u, 
j
, 
lo›C¡
, 
k
, 
l
;

433 
¨m_°©us
 
°©us
;

435 #ifde‡
ARM_MATH_MATRIX_CHECK


438 if((
pSrc
->
numRows
 !pSrc->
numCﬁs
Ë|| (
pD°
->numRows !=ÖDst->numCols)

439 || (
pSrc
->
numRows
 !
pD°
->numRows))

442 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

484 
pOutT1
 = 
pOut
;

487 
rowC¡
 = 
numRows
;

490 
rowC¡
 > 0u)

493 
j
 = 
numRows
 - 
rowC¡
;

494 
j
 > 0u)

496 *
pOutT1
++ = 0.0f;

497 
j
--;

501 *
pOutT1
++ = 1.0f;

504 
j
 = 
rowC¡
 - 1u;

505 
j
 > 0u)

507 *
pOutT1
++ = 0.0f;

508 
j
--;

512 
rowC¡
--;

517 
lo›C¡
 = 
numCﬁs
;

520 
l
 = 0u;

522 
lo›C¡
 > 0u)

531 
pInT1
 = 
pIn
 + (
l
 * 
numCﬁs
);

535 
pOutT1
 = 
pOut
 + (
l
 * 
numCﬁs
);

538 
ö
 = *
pInT1
;

541 
k
 = 1u;

544 if(*
pInT1
 == 0.0f)

547 
i
 = (
l
 + 1u); i < 
numRows
; i++)

550 
pInT2
 = 
pInT1
 + (
numCﬁs
 * 
l
);

551 
pOutT2
 = 
pOutT1
 + (
numCﬁs
 * 
k
);

555 if(*
pInT2
 != 0.0f)

559 
j
 = 0u; j < (
numCﬁs
 - 
l
); j++)

562 
Xchg
 = *
pInT2
;

563 *
pInT2
++ = *
pInT1
;

564 *
pInT1
++ = 
Xchg
;

567 
j
 = 0u; j < 
numCﬁs
; j++)

569 
Xchg
 = *
pOutT2
;

570 *
pOutT2
++ = *
pOutT1
;

571 *
pOutT1
++ = 
Xchg
;

575 
Êag
 = 1u;

582 
k
++;

587 if((
Êag
 !1uË&& (
ö
 == 0.0f))

589  
ARM_MATH_SINGULAR
;

593 
pPivŸRowIn
 = 
pIn
 + (
l
 * 
numCﬁs
);

594 
pPivŸRowD°
 = 
pOut
 + (
l
 * 
numCﬁs
);

597 
pInT1
 = 
pPivŸRowIn
;

598 
pOutT1
 = 
pPivŸRowD°
;

601 
ö
 = *(
pIn
 + (
l
 * 
numCﬁs
));

605 
j
 = 0u; j < (
numCﬁs
 - 
l
); j++)

609 *
pInT1
 = *pInT1 / 
ö
;

610 
pInT1
++;

612 
j
 = 0u; j < 
numCﬁs
; j++)

616 *
pOutT1
 = *pOutT1 / 
ö
;

617 
pOutT1
++;

624 
pInT1
 = 
pIn
;

625 
pOutT1
 = 
pOut
;

627 
i
 = 0u; i < 
numRows
; i++)

630 if(
i
 =
l
)

634 
pInT1
 +
numCﬁs
 - 
l
;

635 
pOutT1
 +
numCﬁs
;

640 
ö
 = *
pInT1
;

643 
pPRT_ö
 = 
pPivŸRowIn
;

644 
pPRT_pD°
 = 
pPivŸRowD°
;

648 
j
 = 0u; j < (
numCﬁs
 - 
l
); j++)

652 *
pInT1
 = *pInT1 - (
ö
 * *
pPRT_ö
++);

653 
pInT1
++;

657 
j
 = 0u; j < 
numCﬁs
; j++)

661 *
pOutT1
 = *pOutT1 - (
ö
 * *
pPRT_pD°
++);

662 
pOutT1
++;

667 
pInT1
 =ÖInT1 + 
l
;

670 
pIn
++;

673 
lo›C¡
--;

675 
l
++;

682 
°©us
 = 
ARM_MATH_SUCCESS
;

684 if((
Êag
 !1uË&& (
ö
 == 0.0f))

686 
°©us
 = 
ARM_MATH_SINGULAR
;

690  (
°©us
);

691 
	}
}

	@CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_inverse_f64.c

41 
	~"¨m_m©h.h
"

85 
¨m_°©us
 
	$¨m_m©_övî£_f64
(

86 c⁄° 
¨m_m©rix_ö°™˚_f64
 * 
pSrc
,

87 
¨m_m©rix_ö°™˚_f64
 * 
pD°
)

89 
Êﬂt64_t
 *
pIn
 = 
pSrc
->
pD©a
;

90 
Êﬂt64_t
 *
pOut
 = 
pD°
->
pD©a
;

91 
Êﬂt64_t
 *
pInT1
, *
pInT2
;

92 
Êﬂt64_t
 *
pOutT1
, *
pOutT2
;

93 
Êﬂt64_t
 *
pPivŸRowIn
, *
pPRT_ö
, *
pPivŸRowD°
, *
pPRT_pD°
;

94 
uöt32_t
 
numRows
 = 
pSrc
->numRows;

95 
uöt32_t
 
numCﬁs
 = 
pSrc
->numCols;

97 #i‚de‡
ARM_MATH_CM0_FAMILY


98 
Êﬂt64_t
 
maxC
;

102 
Êﬂt64_t
 
Xchg
, 
ö
 = 0.0f, 
ö1
;

103 
uöt32_t
 
i
, 
rowC¡
, 
Êag
 = 0u, 
j
, 
lo›C¡
, 
k
, 
l
;

104 
¨m_°©us
 
°©us
;

106 #ifde‡
ARM_MATH_MATRIX_CHECK


110 if((
pSrc
->
numRows
 !pSrc->
numCﬁs
Ë|| (
pD°
->numRows !=ÖDst->numCols)

111 || (
pSrc
->
numRows
 !
pD°
->numRows))

114 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

158 
pOutT1
 = 
pOut
;

161 
rowC¡
 = 
numRows
;

164 
rowC¡
 > 0u)

167 
j
 = 
numRows
 - 
rowC¡
;

168 
j
 > 0u)

170 *
pOutT1
++ = 0.0f;

171 
j
--;

175 *
pOutT1
++ = 1.0f;

178 
j
 = 
rowC¡
 - 1u;

179 
j
 > 0u)

181 *
pOutT1
++ = 0.0f;

182 
j
--;

186 
rowC¡
--;

191 
lo›C¡
 = 
numCﬁs
;

194 
l
 = 0u;

196 
lo›C¡
 > 0u)

205 
pInT1
 = 
pIn
 + (
l
 * 
numCﬁs
);

209 
pOutT1
 = 
pOut
 + (
l
 * 
numCﬁs
);

212 
ö
 = *
pInT1
;

215 
maxC
 = 0;

216 
i
 = 
l
; i < 
numRows
; i++)

218 
maxC
 = *
pInT1
 > 0 ? (*pInT1 > maxC ? *pInT1 : maxC) : (-*pInT1 > maxC ? -*pInT1 : maxC);

219 
pInT1
 +
numCﬁs
;

223 if(
maxC
 == 0.0f)

225  
ARM_MATH_SINGULAR
;

229 
pInT1
 = 
pIn
;

232 
k
 = 1u;

235 if–(
ö
 > 0.0‡? i¿: -öË!
maxC
)

238 
i
 = 
numRows
 - (
l
 + 1u);

240 
i
 > 0u)

243 
pInT2
 = 
pInT1
 + (
numCﬁs
 * 
l
);

244 
pOutT2
 = 
pOutT1
 + (
numCﬁs
 * 
k
);

248 if((*
pInT2
 > 0.0‡? *pInT2: -*pInT2Ë=
maxC
)

252 
j
 = 
numCﬁs
 - 
l
;

254 
j
 > 0u)

257 
Xchg
 = *
pInT2
;

258 *
pInT2
++ = *
pInT1
;

259 *
pInT1
++ = 
Xchg
;

262 
j
--;

266 
j
 = 
numCﬁs
;

268 
j
 > 0u)

271 
Xchg
 = *
pOutT2
;

272 *
pOutT2
++ = *
pOutT1
;

273 *
pOutT1
++ = 
Xchg
;

276 
j
--;

280 
Êag
 = 1u;

287 
k
++;

290 
i
--;

295 if((
Êag
 !1uË&& (
ö
 == 0.0f))

297  
ARM_MATH_SINGULAR
;

301 
pPivŸRowIn
 = 
pIn
 + (
l
 * 
numCﬁs
);

302 
pPivŸRowD°
 = 
pOut
 + (
l
 * 
numCﬁs
);

305 
pInT1
 = 
pPivŸRowIn
;

306 
pInT2
 = 
pPivŸRowD°
;

309 
ö
 = *
pPivŸRowIn
;

313 
j
 = (
numCﬁs
 - 
l
);

315 
j
 > 0u)

319 
ö1
 = *
pInT1
;

320 *
pInT1
++ = 
ö1
 / 
ö
;

323 
j
--;

327 
j
 = 
numCﬁs
;

329 
j
 > 0u)

333 
ö1
 = *
pInT2
;

334 *
pInT2
++ = 
ö1
 / 
ö
;

337 
j
--;

344 
pInT1
 = 
pIn
;

345 
pInT2
 = 
pOut
;

348 
i
 = 0u;

352 
k
 = 
numRows
;

354 
k
 > 0u)

357 if(
i
 =
l
)

361 
pInT1
 +
numCﬁs
 - 
l
;

363 
pInT2
 +
numCﬁs
;

368 
ö
 = *
pInT1
;

371 
pPRT_ö
 = 
pPivŸRowIn
;

372 
pPRT_pD°
 = 
pPivŸRowD°
;

376 
j
 = (
numCﬁs
 - 
l
);

378 
j
 > 0u)

382 
ö1
 = *
pInT1
;

383 *
pInT1
++ = 
ö1
 - (
ö
 * *
pPRT_ö
++);

386 
j
--;

391 
j
 = 
numCﬁs
;

393 
j
 > 0u)

397 
ö1
 = *
pInT2
;

398 *
pInT2
++ = 
ö1
 - (
ö
 * *
pPRT_pD°
++);

401 
j
--;

407 
pInT1
 =ÖInT1 + 
l
;

410 
k
--;

413 
i
++;

417 
pIn
++;

420 
lo›C¡
--;

423 
l
++;

431 
Êﬂt64_t
 
Xchg
, 
ö
 = 0.0f;

432 
uöt32_t
 
i
, 
rowC¡
, 
Êag
 = 0u, 
j
, 
lo›C¡
, 
k
, 
l
;

433 
¨m_°©us
 
°©us
;

435 #ifde‡
ARM_MATH_MATRIX_CHECK


438 if((
pSrc
->
numRows
 !pSrc->
numCﬁs
Ë|| (
pD°
->numRows !=ÖDst->numCols)

439 || (
pSrc
->
numRows
 !
pD°
->numRows))

442 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

484 
pOutT1
 = 
pOut
;

487 
rowC¡
 = 
numRows
;

490 
rowC¡
 > 0u)

493 
j
 = 
numRows
 - 
rowC¡
;

494 
j
 > 0u)

496 *
pOutT1
++ = 0.0f;

497 
j
--;

501 *
pOutT1
++ = 1.0f;

504 
j
 = 
rowC¡
 - 1u;

505 
j
 > 0u)

507 *
pOutT1
++ = 0.0f;

508 
j
--;

512 
rowC¡
--;

517 
lo›C¡
 = 
numCﬁs
;

520 
l
 = 0u;

522 
lo›C¡
 > 0u)

531 
pInT1
 = 
pIn
 + (
l
 * 
numCﬁs
);

535 
pOutT1
 = 
pOut
 + (
l
 * 
numCﬁs
);

538 
ö
 = *
pInT1
;

541 
k
 = 1u;

544 if(*
pInT1
 == 0.0f)

547 
i
 = (
l
 + 1u); i < 
numRows
; i++)

550 
pInT2
 = 
pInT1
 + (
numCﬁs
 * 
l
);

551 
pOutT2
 = 
pOutT1
 + (
numCﬁs
 * 
k
);

555 if(*
pInT2
 != 0.0f)

559 
j
 = 0u; j < (
numCﬁs
 - 
l
); j++)

562 
Xchg
 = *
pInT2
;

563 *
pInT2
++ = *
pInT1
;

564 *
pInT1
++ = 
Xchg
;

567 
j
 = 0u; j < 
numCﬁs
; j++)

569 
Xchg
 = *
pOutT2
;

570 *
pOutT2
++ = *
pOutT1
;

571 *
pOutT1
++ = 
Xchg
;

575 
Êag
 = 1u;

582 
k
++;

587 if((
Êag
 !1uË&& (
ö
 == 0.0f))

589  
ARM_MATH_SINGULAR
;

593 
pPivŸRowIn
 = 
pIn
 + (
l
 * 
numCﬁs
);

594 
pPivŸRowD°
 = 
pOut
 + (
l
 * 
numCﬁs
);

597 
pInT1
 = 
pPivŸRowIn
;

598 
pOutT1
 = 
pPivŸRowD°
;

601 
ö
 = *(
pIn
 + (
l
 * 
numCﬁs
));

605 
j
 = 0u; j < (
numCﬁs
 - 
l
); j++)

609 *
pInT1
 = *pInT1 / 
ö
;

610 
pInT1
++;

612 
j
 = 0u; j < 
numCﬁs
; j++)

616 *
pOutT1
 = *pOutT1 / 
ö
;

617 
pOutT1
++;

624 
pInT1
 = 
pIn
;

625 
pOutT1
 = 
pOut
;

627 
i
 = 0u; i < 
numRows
; i++)

630 if(
i
 =
l
)

634 
pInT1
 +
numCﬁs
 - 
l
;

635 
pOutT1
 +
numCﬁs
;

640 
ö
 = *
pInT1
;

643 
pPRT_ö
 = 
pPivŸRowIn
;

644 
pPRT_pD°
 = 
pPivŸRowD°
;

648 
j
 = 0u; j < (
numCﬁs
 - 
l
); j++)

652 *
pInT1
 = *pInT1 - (
ö
 * *
pPRT_ö
++);

653 
pInT1
++;

657 
j
 = 0u; j < 
numCﬁs
; j++)

661 *
pOutT1
 = *pOutT1 - (
ö
 * *
pPRT_pD°
++);

662 
pOutT1
++;

667 
pInT1
 =ÖInT1 + 
l
;

670 
pIn
++;

673 
lo›C¡
--;

675 
l
++;

682 
°©us
 = 
ARM_MATH_SUCCESS
;

684 if((
Êag
 !1uË&& (
ö
 == 0.0f))

686 
°©us
 = 
ARM_MATH_SINGULAR
;

690  (
°©us
);

691 
	}
}

	@CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_mult_f32.c

41 
	~"¨m_m©h.h
"

78 
¨m_°©us
 
	$¨m_m©_mu…_f32
(

79 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

80 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

81 
¨m_m©rix_ö°™˚_f32
 * 
pD°
)

83 
Êﬂt32_t
 *
pIn1
 = 
pSrcA
->
pD©a
;

84 
Êﬂt32_t
 *
pIn2
 = 
pSrcB
->
pD©a
;

85 
Êﬂt32_t
 *
pInA
 = 
pSrcA
->
pD©a
;

86 
Êﬂt32_t
 *
pOut
 = 
pD°
->
pD©a
;

87 
Êﬂt32_t
 *
px
;

88 
Êﬂt32_t
 
sum
;

89 
uöt16_t
 
numRowsA
 = 
pSrcA
->
numRows
;

90 
uöt16_t
 
numCﬁsB
 = 
pSrcB
->
numCﬁs
;

91 
uöt16_t
 
numCﬁsA
 = 
pSrcA
->
numCﬁs
;

93 #i‚de‡
ARM_MATH_CM0_FAMILY


97 
Êﬂt32_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

98 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
j
, 
row
 = 
numRowsA
, 
cﬁC¡
;

99 
¨m_°©us
 
°©us
;

101 #ifde‡
ARM_MATH_MATRIX_CHECK


105 if((
pSrcA
->
numCﬁs
 !
pSrcB
->
numRows
) ||

106 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (
pSrcB
->
numCﬁs
 !=ÖDst->numCols))

110 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

121 
px
 = 
pOut
 + 
i
;

124 
cﬁ
 = 
numCﬁsB
;

128 
pIn2
 = 
pSrcB
->
pD©a
;

130 
j
 = 0u;

136 
sum
 = 0.0f;

139 
pIn1
 = 
pInA
;

142 
cﬁC¡
 = 
numCﬁsA
 >> 2u;

145 
cﬁC¡
 > 0u)

148 
ö3
 = *
pIn2
;

149 
pIn2
 +
numCﬁsB
;

150 
ö1
 = 
pIn1
[0];

151 
ö2
 = 
pIn1
[1];

152 
sum
 +
ö1
 * 
ö3
;

153 
ö4
 = *
pIn2
;

154 
pIn2
 +
numCﬁsB
;

155 
sum
 +
ö2
 * 
ö4
;

157 
ö3
 = *
pIn2
;

158 
pIn2
 +
numCﬁsB
;

159 
ö1
 = 
pIn1
[2];

160 
ö2
 = 
pIn1
[3];

161 
sum
 +
ö1
 * 
ö3
;

162 
ö4
 = *
pIn2
;

163 
pIn2
 +
numCﬁsB
;

164 
sum
 +
ö2
 * 
ö4
;

165 
pIn1
 += 4u;

168 
cﬁC¡
--;

173 
cﬁC¡
 = 
numCﬁsA
 % 0x4u;

175 
cﬁC¡
 > 0u)

178 
sum
 +*
pIn1
++ * (*
pIn2
);

179 
pIn2
 +
numCﬁsB
;

182 
cﬁC¡
--;

186 *
px
++ = 
sum
;

189 
j
++;

190 
pIn2
 = 
pSrcB
->
pD©a
 + 
j
;

193 
cﬁ
--;

195 } 
cﬁ
 > 0u);

201 
Êﬂt32_t
 *
pInB
 = 
pSrcB
->
pD©a
;

202 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
row
 = 
numRowsA
, 
cﬁC¡
;

203 
¨m_°©us
 
°©us
;

205 #ifde‡
ARM_MATH_MATRIX_CHECK


208 if((
pSrcA
->
numCﬁs
 !
pSrcB
->
numRows
) ||

209 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (
pSrcB
->
numCﬁs
 !=ÖDst->numCols))

213 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

224 
px
 = 
pOut
 + 
i
;

227 
cﬁ
 = 
numCﬁsB
;

231 
pIn2
 = 
pSrcB
->
pD©a
;

237 
sum
 = 0.0f;

240 
pIn1
 = 
pInA
;

243 
cﬁC¡
 = 
numCﬁsA
;

245 
cﬁC¡
 > 0u)

248 
sum
 +*
pIn1
++ * (*
pIn2
);

249 
pIn2
 +
numCﬁsB
;

252 
cﬁC¡
--;

256 *
px
++ = 
sum
;

259 
cﬁ
--;

262 
pIn2
 = 
pInB
 + (
numCﬁsB
 - 
cﬁ
);

264 } 
cﬁ
 > 0u);

269 
i
 = i + 
numCﬁsB
;

270 
pInA
 =ÖInA + 
numCﬁsA
;

273 
row
--;

275 } 
row
 > 0u);

277 
°©us
 = 
ARM_MATH_SUCCESS
;

281  (
°©us
);

282 
	}
}

	@CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_mult_fast_q15.c

41 
	~"¨m_m©h.h
"

85 
¨m_°©us
 
	$¨m_m©_mu…_Á°_q15
(

86 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

87 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

88 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

89 
q15_t
 * 
pSèã
)

91 
q31_t
 
sum
;

92 
q15_t
 *
pSrcBT
 = 
pSèã
;

93 
q15_t
 *
pInA
 = 
pSrcA
->
pD©a
;

94 
q15_t
 *
pInB
 = 
pSrcB
->
pD©a
;

95 
q15_t
 *
px
;

96 
uöt16_t
 
numRowsA
 = 
pSrcA
->
numRows
;

97 
uöt16_t
 
numCﬁsB
 = 
pSrcB
->
numCﬁs
;

98 
uöt16_t
 
numCﬁsA
 = 
pSrcA
->
numCﬁs
;

99 
uöt16_t
 
numRowsB
 = 
pSrcB
->
numRows
;

100 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
row
 = 
numRowsB
, 
cﬁC¡
;

101 
¨m_°©us
 
°©us
;

103 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


105 
q31_t
 
ö
;

106 
q31_t
 
öA1
, 
öA2
, 
öB1
, 
öB2
;

110 
q15_t
 
ö
;

111 
q15_t
 
öA1
, 
öA2
, 
öB1
, 
öB2
;

115 #ifde‡
ARM_MATH_MATRIX_CHECK


117 if((
pSrcA
->
numCﬁs
 !
pSrcB
->
numRows
) ||

118 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (
pSrcB
->
numCﬁs
 !=ÖDst->numCols))

121 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

130 
cﬁ
 = 
numCﬁsB
 >> 2;

133 
px
 = 
pSrcBT
 + 
i
;

137 
cﬁ
 > 0u)

139 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


141 
ö
 = *
	`__SIMD32
(
pInB
)++;

144 #i‚de‡
ARM_MATH_BIG_ENDIAN


146 *
px
 = (
q15_t
Ë
ö
;

150 *
px
 = (
q15_t
Ë((
ö
 & (
q31_t
) 0xffff0000) >> 16);

155 
px
 +
numRowsB
;

158 #i‚de‡
ARM_MATH_BIG_ENDIAN


160 *
px
 = (
q15_t
Ë((
ö
 & (
q31_t
) 0xffff0000) >> 16);

164 *
px
 = (
q15_t
Ë
ö
;

169 
px
 +
numRowsB
;

172 
ö
 = *
	`__SIMD32
(
pInB
)++;

175 #i‚de‡
ARM_MATH_BIG_ENDIAN


177 *
px
 = (
q15_t
Ë
ö
;

181 *
px
 = (
q15_t
Ë((
ö
 & (
q31_t
) 0xffff0000) >> 16);

186 
px
 +
numRowsB
;

190 #i‚de‡
ARM_MATH_BIG_ENDIAN


192 *
px
 = (
q15_t
Ë((
ö
 & (
q31_t
) 0xffff0000) >> 16);

196 *
px
 = (
q15_t
Ë
ö
;

203 
ö
 = *
pInB
++;

206 *
px
 = 
ö
;

209 
px
 +
numRowsB
;

212 
ö
 = *
pInB
++;

215 *
px
 = 
ö
;

218 
px
 +
numRowsB
;

221 
ö
 = *
pInB
++;

224 *
px
 = 
ö
;

227 
px
 +
numRowsB
;

230 
ö
 = *
pInB
++;

233 *
px
 = 
ö
;

238 
px
 +
numRowsB
;

241 
cﬁ
--;

246 
cﬁ
 = 
numCﬁsB
 % 0x4u;

248 
cﬁ
 > 0u)

251 *
px
 = *
pInB
++;

254 
px
 +
numRowsB
;

257 
cﬁ
--;

260 
i
++;

263 
row
--;

265 } 
row
 > 0u);

268 
row
 = 
numRowsA
;

269 
i
 = 0u;

270 
px
 = 
pD°
->
pD©a
;

277 
cﬁ
 = 
numCﬁsB
;

281 
pInB
 = 
pSrcBT
;

287 
sum
 = 0;

290 
cﬁC¡
 = 
numCﬁsA
 >> 2;

293 
pInA
 = 
pSrcA
->
pD©a
 + 
i
;

296 
cﬁC¡
 > 0u)

299 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


301 
öA1
 = *
	`__SIMD32
(
pInA
)++;

302 
öB1
 = *
	`__SIMD32
(
pInB
)++;

303 
öA2
 = *
	`__SIMD32
(
pInA
)++;

304 
öB2
 = *
	`__SIMD32
(
pInB
)++;

306 
sum
 = 
	`__SMLAD
(
öA1
, 
öB1
, sum);

307 
sum
 = 
	`__SMLAD
(
öA2
, 
öB2
, sum);

311 
öA1
 = *
pInA
++;

312 
öB1
 = *
pInB
++;

313 
öA2
 = *
pInA
++;

314 
sum
 +
öA1
 * 
öB1
;

315 
öB2
 = *
pInB
++;

317 
öA1
 = *
pInA
++;

318 
öB1
 = *
pInB
++;

319 
sum
 +
öA2
 * 
öB2
;

320 
öA2
 = *
pInA
++;

321 
öB2
 = *
pInB
++;

323 
sum
 +
öA1
 * 
öB1
;

324 
sum
 +
öA2
 * 
öB2
;

329 
cﬁC¡
--;

333 
cﬁC¡
 = 
numCﬁsA
 % 0x4u;

335 
cﬁC¡
 > 0u)

338 
sum
 +(
q31_t
Ë(*
pInA
++Ë* (*
pInB
++);

340 
cﬁC¡
--;

344 *
px
 = (
q15_t
Ë(
sum
 >> 15);

345 
px
++;

348 
cﬁ
--;

350 } 
cﬁ
 > 0u);

352 
i
 = i + 
numCﬁsA
;

355 
row
--;

357 } 
row
 > 0u);

360 
°©us
 = 
ARM_MATH_SUCCESS
;

364  (
°©us
);

365 
	}
}

	@CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_mult_fast_q31.c

41 
	~"¨m_m©h.h
"

83 
¨m_°©us
 
	$¨m_m©_mu…_Á°_q31
(

84 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

85 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

86 
¨m_m©rix_ö°™˚_q31
 * 
pD°
)

88 
q31_t
 *
pIn1
 = 
pSrcA
->
pD©a
;

89 
q31_t
 *
pIn2
 = 
pSrcB
->
pD©a
;

90 
q31_t
 *
pInA
 = 
pSrcA
->
pD©a
;

92 
q31_t
 *
pOut
 = 
pD°
->
pD©a
;

93 
q31_t
 *
px
;

94 
q31_t
 
sum
;

95 
uöt16_t
 
numRowsA
 = 
pSrcA
->
numRows
;

96 
uöt16_t
 
numCﬁsB
 = 
pSrcB
->
numCﬁs
;

97 
uöt16_t
 
numCﬁsA
 = 
pSrcA
->
numCﬁs
;

98 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
j
, 
row
 = 
numRowsA
, 
cﬁC¡
;

99 
¨m_°©us
 
°©us
;

100 
q31_t
 
öA1
, 
öA2
, 
öA3
, 
öA4
, 
öB1
, 
öB2
, 
öB3
, 
öB4
;

102 #ifde‡
ARM_MATH_MATRIX_CHECK


106 if((
pSrcA
->
numCﬁs
 !
pSrcB
->
numRows
) ||

107 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (
pSrcB
->
numCﬁs
 !=ÖDst->numCols))

110 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

121 
px
 = 
pOut
 + 
i
;

124 
cﬁ
 = 
numCﬁsB
;

128 
pIn2
 = 
pSrcB
->
pD©a
;

130 
j
 = 0u;

136 
sum
 = 0;

139 
pIn1
 = 
pInA
;

142 
cﬁC¡
 = 
numCﬁsA
 >> 2;

146 
cﬁC¡
 > 0u)

150 
öB1
 = *
pIn2
;

151 
pIn2
 +
numCﬁsB
;

153 
öA1
 = 
pIn1
[0];

154 
öA2
 = 
pIn1
[1];

156 
öB2
 = *
pIn2
;

157 
pIn2
 +
numCﬁsB
;

159 
öB3
 = *
pIn2
;

160 
pIn2
 +
numCﬁsB
;

162 
sum
 = (
q31_t
Ë((((
q63_t
Ësum << 32Ë+ ((q63_tË
öA1
 * 
öB1
)) >> 32);

163 
sum
 = (
q31_t
Ë((((
q63_t
Ësum << 32Ë+ ((q63_tË
öA2
 * 
öB2
)) >> 32);

165 
öA3
 = 
pIn1
[2];

166 
öA4
 = 
pIn1
[3];

168 
öB4
 = *
pIn2
;

169 
pIn2
 +
numCﬁsB
;

171 
sum
 = (
q31_t
Ë((((
q63_t
Ësum << 32Ë+ ((q63_tË
öA3
 * 
öB3
)) >> 32);

172 
sum
 = (
q31_t
Ë((((
q63_t
Ësum << 32Ë+ ((q63_tË
öA4
 * 
öB4
)) >> 32);

174 
pIn1
 += 4u;

177 
cﬁC¡
--;

182 
cﬁC¡
 = 
numCﬁsA
 % 0x4u;

184 
cﬁC¡
 > 0u)

188 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

189 ((
q63_t
Ë* 
pIn1
++ * (*
pIn2
))) >> 32);

190 
pIn2
 +
numCﬁsB
;

193 
cﬁC¡
--;

197 *
px
++ = 
sum
 << 1;

200 
j
++;

201 
pIn2
 = 
pSrcB
->
pD©a
 + 
j
;

204 
cﬁ
--;

206 } 
cﬁ
 > 0u);

209 
i
 = i + 
numCﬁsB
;

210 
pInA
 =ÖInA + 
numCﬁsA
;

213 
row
--;

215 } 
row
 > 0u);

218 
°©us
 = 
ARM_MATH_SUCCESS
;

221  (
°©us
);

222 
	}
}

	@CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_mult_q15.c

41 
	~"¨m_m©h.h
"

79 
¨m_°©us
 
	$¨m_m©_mu…_q15
(

80 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

81 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

82 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

83 
q15_t
 * 
pSèã
 
CMSIS_UNUSED
)

85 
q63_t
 
sum
;

87 #i‚de‡
ARM_MATH_CM0_FAMILY


91 
q15_t
 *
pSrcBT
 = 
pSèã
;

92 
q15_t
 *
pInA
 = 
pSrcA
->
pD©a
;

93 
q15_t
 *
pInB
 = 
pSrcB
->
pD©a
;

94 
q15_t
 *
px
;

95 
uöt16_t
 
numRowsA
 = 
pSrcA
->
numRows
;

96 
uöt16_t
 
numCﬁsB
 = 
pSrcB
->
numCﬁs
;

97 
uöt16_t
 
numCﬁsA
 = 
pSrcA
->
numCﬁs
;

98 
uöt16_t
 
numRowsB
 = 
pSrcB
->
numRows
;

99 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
row
 = 
numRowsB
, 
cﬁC¡
;

100 
¨m_°©us
 
°©us
;

102 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


104 
q31_t
 
ö
;

105 
q31_t
 
pSour˚A1
, 
pSour˚B1
, 
pSour˚A2
, 
pSour˚B2
;

109 
q15_t
 
ö
;

110 
q15_t
 
öA1
, 
öB1
, 
öA2
, 
öB2
;

114 #ifde‡
ARM_MATH_MATRIX_CHECK


116 if((
pSrcA
->
numCﬁs
 !
pSrcB
->
numRows
) ||

117 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (
pSrcB
->
numCﬁs
 !=ÖDst->numCols))

120 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

129 
cﬁ
 = 
numCﬁsB
 >> 2;

132 
px
 = 
pSrcBT
 + 
i
;

136 
cﬁ
 > 0u)

138 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


141 
ö
 = *
	`__SIMD32
(
pInB
)++;

144 #i‚de‡
ARM_MATH_BIG_ENDIAN


146 *
px
 = (
q15_t
Ë
ö
;

150 *
px
 = (
q15_t
Ë((
ö
 & (
q31_t
) 0xffff0000) >> 16);

155 
px
 +
numRowsB
;

158 #i‚de‡
ARM_MATH_BIG_ENDIAN


160 *
px
 = (
q15_t
Ë((
ö
 & (
q31_t
) 0xffff0000) >> 16);

164 *
px
 = (
q15_t
Ë
ö
;

169 
px
 +
numRowsB
;

172 
ö
 = *
	`__SIMD32
(
pInB
)++;

175 #i‚de‡
ARM_MATH_BIG_ENDIAN


177 *
px
 = (
q15_t
Ë
ö
;

181 *
px
 = (
q15_t
Ë((
ö
 & (
q31_t
) 0xffff0000) >> 16);

186 
px
 +
numRowsB
;

190 #i‚de‡
ARM_MATH_BIG_ENDIAN


192 *
px
 = (
q15_t
Ë((
ö
 & (
q31_t
) 0xffff0000) >> 16);

196 *
px
 = (
q15_t
Ë
ö
;

201 
px
 +
numRowsB
;

206 
ö
 = *
pInB
++;

209 *
px
 = 
ö
;

212 
px
 +
numRowsB
;

215 
ö
 = *
pInB
++;

218 *
px
 = 
ö
;

221 
px
 +
numRowsB
;

224 
ö
 = *
pInB
++;

227 *
px
 = 
ö
;

230 
px
 +
numRowsB
;

233 
ö
 = *
pInB
++;

236 *
px
 = 
ö
;

239 
px
 +
numRowsB
;

244 
cﬁ
--;

249 
cﬁ
 = 
numCﬁsB
 % 0x4u;

251 
cﬁ
 > 0u)

254 *
px
 = *
pInB
++;

257 
px
 +
numRowsB
;

260 
cﬁ
--;

263 
i
++;

266 
row
--;

268 } 
row
 > 0u);

271 
row
 = 
numRowsA
;

272 
i
 = 0u;

273 
px
 = 
pD°
->
pD©a
;

280 
cﬁ
 = 
numCﬁsB
;

284 
pInB
 = 
pSrcBT
;

290 
sum
 = 0;

293 
cﬁC¡
 = 
numCﬁsA
 >> 2;

296 
pInA
 = 
pSrcA
->
pD©a
 + 
i
;

300 
cﬁC¡
 > 0u)

303 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


306 
pSour˚A1
 = *
	`__SIMD32
(
pInA
)++;

307 
pSour˚B1
 = *
	`__SIMD32
(
pInB
)++;

309 
pSour˚A2
 = *
	`__SIMD32
(
pInA
)++;

310 
pSour˚B2
 = *
	`__SIMD32
(
pInB
)++;

313 
sum
 = 
	`__SMLALD
(
pSour˚A1
, 
pSour˚B1
, sum);

314 
sum
 = 
	`__SMLALD
(
pSour˚A2
, 
pSour˚B2
, sum);

318 
öA1
 = *
pInA
++;

319 
öB1
 = *
pInB
++;

320 
öA2
 = *
pInA
++;

322 
sum
 +
öA1
 * 
öB1
;

323 
öB2
 = *
pInB
++;

325 
öA1
 = *
pInA
++;

326 
öB1
 = *
pInB
++;

328 
sum
 +
öA2
 * 
öB2
;

329 
öA2
 = *
pInA
++;

330 
öB2
 = *
pInB
++;

333 
sum
 +
öA1
 * 
öB1
;

334 
sum
 +
öA2
 * 
öB2
;

339 
cﬁC¡
--;

343 
cﬁC¡
 = 
numCﬁsA
 & 3u;

345 
cﬁC¡
 > 0u)

348 
sum
 +*
pInA
++ * *
pInB
++;

351 
cﬁC¡
--;

355 *
px
 = (
q15_t
Ë(
	`__SSAT
((
sum
 >> 15), 16));

356 
px
++;

359 
cﬁ
--;

361 } 
cﬁ
 > 0u);

363 
i
 = i + 
numCﬁsA
;

366 
row
--;

368 } 
row
 > 0u);

374 
q15_t
 *
pIn1
 = 
pSrcA
->
pD©a
;

375 
q15_t
 *
pIn2
 = 
pSrcB
->
pD©a
;

376 
q15_t
 *
pInA
 = 
pSrcA
->
pD©a
;

377 
q15_t
 *
pInB
 = 
pSrcB
->
pD©a
;

378 
q15_t
 *
pOut
 = 
pD°
->
pD©a
;

379 
q15_t
 *
px
;

380 
uöt16_t
 
numCﬁsB
 = 
pSrcB
->
numCﬁs
;

381 
uöt16_t
 
numCﬁsA
 = 
pSrcA
->
numCﬁs
;

382 
uöt16_t
 
numRowsA
 = 
pSrcA
->
numRows
;

383 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
row
 = 
numRowsA
, 
cﬁC¡
;

384 
¨m_°©us
 
°©us
;

386 #ifde‡
ARM_MATH_MATRIX_CHECK


389 if((
pSrcA
->
numCﬁs
 !
pSrcB
->
numRows
) ||

390 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (
pSrcB
->
numCﬁs
 !=ÖDst->numCols))

393 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

404 
px
 = 
pOut
 + 
i
;

407 
cﬁ
 = 
numCﬁsB
;

411 
pIn2
 = 
pSrcB
->
pD©a
;

417 
sum
 = 0;

420 
pIn1
 = 
pInA
;

423 
cﬁC¡
 = 
numCﬁsA
;

426 
cﬁC¡
 > 0u)

430 
sum
 +(
q31_t
Ë* 
pIn1
++ * *
pIn2
;

431 
pIn2
 +
numCﬁsB
;

434 
cﬁC¡
--;

439 *
px
++ = (
q15_t
Ë
	`__SSAT
((
sum
 >> 15), 16);

442 
cﬁ
--;

445 
pIn2
 = 
pInB
 + (
numCﬁsB
 - 
cﬁ
);

447 } 
cﬁ
 > 0u);

450 
i
 = i + 
numCﬁsB
;

451 
pInA
 =ÖInA + 
numCﬁsA
;

454 
row
--;

456 } 
row
 > 0u);

460 
°©us
 = 
ARM_MATH_SUCCESS
;

464  (
°©us
);

465 
	}
}

	@CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_mult_q31.c

41 
	~"¨m_m©h.h
"

78 
¨m_°©us
 
	$¨m_m©_mu…_q31
(

79 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

80 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

81 
¨m_m©rix_ö°™˚_q31
 * 
pD°
)

83 
q31_t
 *
pIn1
 = 
pSrcA
->
pD©a
;

84 
q31_t
 *
pIn2
 = 
pSrcB
->
pD©a
;

85 
q31_t
 *
pInA
 = 
pSrcA
->
pD©a
;

86 
q31_t
 *
pOut
 = 
pD°
->
pD©a
;

87 
q31_t
 *
px
;

88 
q63_t
 
sum
;

89 
uöt16_t
 
numRowsA
 = 
pSrcA
->
numRows
;

90 
uöt16_t
 
numCﬁsB
 = 
pSrcB
->
numCﬁs
;

91 
uöt16_t
 
numCﬁsA
 = 
pSrcA
->
numCﬁs
;

93 #i‚de‡
ARM_MATH_CM0_FAMILY


97 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
j
, 
row
 = 
numRowsA
, 
cﬁC¡
;

98 
¨m_°©us
 
°©us
;

99 
q31_t
 
a0
, 
a1
, 
a2
, 
a3
, 
b0
, 
b1
, 
b2
, 
b3
;

101 #ifde‡
ARM_MATH_MATRIX_CHECK


105 if((
pSrcA
->
numCﬁs
 !
pSrcB
->
numRows
) ||

106 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (
pSrcB
->
numCﬁs
 !=ÖDst->numCols))

109 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

120 
px
 = 
pOut
 + 
i
;

123 
cﬁ
 = 
numCﬁsB
;

127 
pIn2
 = 
pSrcB
->
pD©a
;

129 
j
 = 0u;

135 
sum
 = 0;

138 
pIn1
 = 
pInA
;

141 
cﬁC¡
 = 
numCﬁsA
 >> 2;

145 
cﬁC¡
 > 0u)

149 
b0
 = *
pIn2
;

150 
pIn2
 +
numCﬁsB
;

152 
a0
 = *
pIn1
++;

153 
a1
 = *
pIn1
++;

155 
b1
 = *
pIn2
;

156 
pIn2
 +
numCﬁsB
;

157 
b2
 = *
pIn2
;

158 
pIn2
 +
numCﬁsB
;

160 
sum
 +(
q63_t
Ë
a0
 *
b0
;

161 
sum
 +(
q63_t
Ë
a1
 *
b1
;

163 
a2
 = *
pIn1
++;

164 
a3
 = *
pIn1
++;

166 
b3
 = *
pIn2
;

167 
pIn2
 +
numCﬁsB
;

169 
sum
 +(
q63_t
Ë
a2
 *
b2
;

170 
sum
 +(
q63_t
Ë
a3
 *
b3
;

173 
cﬁC¡
--;

178 
cﬁC¡
 = 
numCﬁsA
 % 0x4u;

180 
cﬁC¡
 > 0u)

184 
sum
 +(
q63_t
Ë* 
pIn1
++ * *
pIn2
;

185 
pIn2
 +
numCﬁsB
;

188 
cﬁC¡
--;

192 *
px
++ = (
q31_t
Ë(
sum
 >> 31);

195 
j
++;

196 
pIn2
 = (
pSrcB
->
pD©a
Ë+ 
j
;

199 
cﬁ
--;

201 } 
cﬁ
 > 0u);

207 
q31_t
 *
pInB
 = 
pSrcB
->
pD©a
;

208 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
row
 = 
numRowsA
, 
cﬁC¡
;

209 
¨m_°©us
 
°©us
;

212 #ifde‡
ARM_MATH_MATRIX_CHECK


215 if((
pSrcA
->
numCﬁs
 !
pSrcB
->
numRows
) ||

216 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (
pSrcB
->
numCﬁs
 !=ÖDst->numCols))

219 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

230 
px
 = 
pOut
 + 
i
;

233 
cﬁ
 = 
numCﬁsB
;

237 
pIn2
 = 
pSrcB
->
pD©a
;

243 
sum
 = 0;

246 
pIn1
 = 
pInA
;

249 
cﬁC¡
 = 
numCﬁsA
;

252 
cﬁC¡
 > 0u)

256 
sum
 +(
q63_t
Ë* 
pIn1
++ * *
pIn2
;

257 
pIn2
 +
numCﬁsB
;

260 
cﬁC¡
--;

264 *
px
++ = (
q31_t
Ë
	`˛ù_q63_to_q31
(
sum
 >> 31);

267 
cﬁ
--;

270 
pIn2
 = 
pInB
 + (
numCﬁsB
 - 
cﬁ
);

272 } 
cﬁ
 > 0u);

277 
i
 = i + 
numCﬁsB
;

278 
pInA
 =ÖInA + 
numCﬁsA
;

281 
row
--;

283 } 
row
 > 0u);

286 
°©us
 = 
ARM_MATH_SUCCESS
;

289  (
°©us
);

290 
	}
}

	@CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_scale_f32.c

41 
	~"¨m_m©h.h
"

80 
¨m_°©us
 
	$¨m_m©_sˇÀ_f32
(

81 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

82 
Êﬂt32_t
 
sˇÀ
,

83 
¨m_m©rix_ö°™˚_f32
 * 
pD°
)

85 
Êﬂt32_t
 *
pIn
 = 
pSrc
->
pD©a
;

86 
Êﬂt32_t
 *
pOut
 = 
pD°
->
pD©a
;

87 
uöt32_t
 
numSam∂es
;

88 
uöt32_t
 
blkC¡
;

89 
¨m_°©us
 
°©us
;

91 #i‚de‡
ARM_MATH_CM0_FAMILY


93 
Êﬂt32_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

94 
Êﬂt32_t
 
out1
, 
out2
, 
out3
, 
out4
;

98 #ifde‡
ARM_MATH_MATRIX_CHECK


100 if((
pSrc
->
numRows
 !
pD°
->numRowsË|| (pSrc->
numCﬁs
 !=ÖDst->numCols))

103 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

109 
numSam∂es
 = (
uöt32_t
Ë
pSrc
->
numRows
 *ÖSrc->
numCﬁs
;

111 #i‚de‡
ARM_MATH_CM0_FAMILY


116 
blkC¡
 = 
numSam∂es
 >> 2;

120 
blkC¡
 > 0u)

124 
ö1
 = 
pIn
[0];

125 
ö2
 = 
pIn
[1];

126 
ö3
 = 
pIn
[2];

127 
ö4
 = 
pIn
[3];

129 
out1
 = 
ö1
 * 
sˇÀ
;

130 
out2
 = 
ö2
 * 
sˇÀ
;

131 
out3
 = 
ö3
 * 
sˇÀ
;

132 
out4
 = 
ö4
 * 
sˇÀ
;

135 
pOut
[0] = 
out1
;

136 
pOut
[1] = 
out2
;

137 
pOut
[2] = 
out3
;

138 
pOut
[3] = 
out4
;

141 
pIn
 += 4u;

142 
pOut
 += 4u;

145 
blkC¡
--;

150 
blkC¡
 = 
numSam∂es
 % 0x4u;

157 
blkC¡
 = 
numSam∂es
;

161 
blkC¡
 > 0u)

165 *
pOut
++ = (*
pIn
++Ë* 
sˇÀ
;

168 
blkC¡
--;

172 
°©us
 = 
ARM_MATH_SUCCESS
;

176  (
°©us
);

177 
	}
}

	@CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_scale_q15.c

41 
	~"¨m_m©h.h
"

68 
¨m_°©us
 
	$¨m_m©_sˇÀ_q15
(

69 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

70 
q15_t
 
sˇÀFø˘
,

71 
öt32_t
 
shi·
,

72 
¨m_m©rix_ö°™˚_q15
 * 
pD°
)

74 
q15_t
 *
pIn
 = 
pSrc
->
pD©a
;

75 
q15_t
 *
pOut
 = 
pD°
->
pD©a
;

76 
uöt32_t
 
numSam∂es
;

77 
öt32_t
 
tŸShi·
 = 15 - 
shi·
;

78 
uöt32_t
 
blkC¡
;

79 
¨m_°©us
 
°©us
;

81 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
q15_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

84 
q31_t
 
out1
, 
out2
, 
out3
, 
out4
;

85 
q31_t
 
öA1
, 
öA2
;

89 #ifde‡
ARM_MATH_MATRIX_CHECK


91 if((
pSrc
->
numRows
 !
pD°
->numRowsË|| (pSrc->
numCﬁs
 !=ÖDst->numCols))

94 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

100 
numSam∂es
 = (
uöt32_t
Ë
pSrc
->
numRows
 *ÖSrc->
numCﬁs
;

102 #i‚de‡
ARM_MATH_CM0_FAMILY


106 
blkC¡
 = 
numSam∂es
 >> 2;

110 
blkC¡
 > 0u)

115 
öA1
 = 
	`_SIMD32_OFFSET
(
pIn
);

116 
öA2
 = 
	`_SIMD32_OFFSET
(
pIn
 + 2);

121 
out1
 = (
q31_t
Ë((
q15_t
Ë(
öA1
 >> 16Ë* 
sˇÀFø˘
);

122 
out2
 = (
q31_t
Ë((
q15_t
Ë
öA1
 * 
sˇÀFø˘
);

123 
out3
 = (
q31_t
Ë((
q15_t
Ë(
öA2
 >> 16Ë* 
sˇÀFø˘
);

124 
out4
 = (
q31_t
Ë((
q15_t
Ë
öA2
 * 
sˇÀFø˘
);

126 
out1
 = out1 >> 
tŸShi·
;

127 
öA1
 = 
	`_SIMD32_OFFSET
(
pIn
 + 4);

128 
out2
 = out2 >> 
tŸShi·
;

129 
öA2
 = 
	`_SIMD32_OFFSET
(
pIn
 + 6);

130 
out3
 = out3 >> 
tŸShi·
;

131 
out4
 = out4 >> 
tŸShi·
;

133 
ö1
 = (
q15_t
Ë(
	`__SSAT
(
out1
, 16));

134 
ö2
 = (
q15_t
Ë(
	`__SSAT
(
out2
, 16));

135 
ö3
 = (
q15_t
Ë(
	`__SSAT
(
out3
, 16));

136 
ö4
 = (
q15_t
Ë(
	`__SSAT
(
out4
, 16));

138 
	`_SIMD32_OFFSET
(
pOut
Ë
	`__PKHBT
(
ö2
, 
ö1
, 16);

139 
	`_SIMD32_OFFSET
(
pOut
 + 2Ë
	`__PKHBT
(
ö4
, 
ö3
, 16);

142 
pIn
 += 4u;

143 
pOut
 += 4u;

147 
blkC¡
--;

152 
blkC¡
 = 
numSam∂es
 % 0x4u;

159 
blkC¡
 = 
numSam∂es
;

163 
blkC¡
 > 0u)

167 *
pOut
++ =

168 (
q15_t
Ë(
	`__SSAT
(((
q31_t
Ë(*
pIn
++Ë* 
sˇÀFø˘
Ë>> 
tŸShi·
, 16));

171 
blkC¡
--;

174 
°©us
 = 
ARM_MATH_SUCCESS
;

178  (
°©us
);

179 
	}
}

	@CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_scale_q31.c

40 
	~"¨m_m©h.h
"

67 
¨m_°©us
 
	$¨m_m©_sˇÀ_q31
(

68 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

69 
q31_t
 
sˇÀFø˘
,

70 
öt32_t
 
shi·
,

71 
¨m_m©rix_ö°™˚_q31
 * 
pD°
)

73 
q31_t
 *
pIn
 = 
pSrc
->
pD©a
;

74 
q31_t
 *
pOut
 = 
pD°
->
pD©a
;

75 
uöt32_t
 
numSam∂es
;

76 
öt32_t
 
tŸShi·
 = 
shi·
 + 1;

77 
uöt32_t
 
blkC¡
;

78 
¨m_°©us
 
°©us
;

79 
q31_t
 
ö1
, 
ö2
, 
out1
;

81 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
q31_t
 
ö3
, 
ö4
, 
out2
, 
out3
, 
out4
;

87 #ifde‡
ARM_MATH_MATRIX_CHECK


89 if((
pSrc
->
numRows
 !
pD°
->numRowsË|| (pSrc->
numCﬁs
 !=ÖDst->numCols))

92 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

98 
numSam∂es
 = (
uöt32_t
Ë
pSrc
->
numRows
 *ÖSrc->
numCﬁs
;

100 #i‚de‡
ARM_MATH_CM0_FAMILY


105 
blkC¡
 = 
numSam∂es
 >> 2u;

109 
blkC¡
 > 0u)

113 
ö1
 = *
pIn
;

114 
ö2
 = *(
pIn
 + 1);

115 
ö3
 = *(
pIn
 + 2);

116 
ö4
 = *(
pIn
 + 3);

119 
ö1
 = ((
q63_t
Ëö1 * 
sˇÀFø˘
) >> 32;

120 
ö2
 = ((
q63_t
Ëö2 * 
sˇÀFø˘
) >> 32;

121 
ö3
 = ((
q63_t
Ëö3 * 
sˇÀFø˘
) >> 32;

122 
ö4
 = ((
q63_t
Ëö4 * 
sˇÀFø˘
) >> 32;

125 
out1
 = 
ö1
 << 
tŸShi·
;

126 
out2
 = 
ö2
 << 
tŸShi·
;

129 if(
ö1
 !(
out1
 >> 
tŸShi·
))

130 
out1
 = 0x7FFFFFFF ^ (
ö1
 >> 31);

132 if(
ö2
 !(
out2
 >> 
tŸShi·
))

133 
out2
 = 0x7FFFFFFF ^ (
ö2
 >> 31);

135 
out3
 = 
ö3
 << 
tŸShi·
;

136 
out4
 = 
ö4
 << 
tŸShi·
;

138 *
pOut
 = 
out1
;

139 *(
pOut
 + 1Ë
out2
;

141 if(
ö3
 !(
out3
 >> 
tŸShi·
))

142 
out3
 = 0x7FFFFFFF ^ (
ö3
 >> 31);

144 if(
ö4
 !(
out4
 >> 
tŸShi·
))

145 
out4
 = 0x7FFFFFFF ^ (
ö4
 >> 31);

148 *(
pOut
 + 2Ë
out3
;

149 *(
pOut
 + 3Ë
out4
;

152 
pIn
 += 4u;

153 
pOut
 += 4u;

157 
blkC¡
--;

162 
blkC¡
 = 
numSam∂es
 % 0x4u;

169 
blkC¡
 = 
numSam∂es
;

173 
blkC¡
 > 0u)

177 
ö1
 = *
pIn
++;

179 
ö2
 = ((
q63_t
Ë
ö1
 * 
sˇÀFø˘
) >> 32;

181 
out1
 = 
ö2
 << 
tŸShi·
;

183 if(
ö2
 !(
out1
 >> 
tŸShi·
))

184 
out1
 = 0x7FFFFFFF ^ (
ö2
 >> 31);

186 *
pOut
++ = 
out1
;

189 
blkC¡
--;

193 
°©us
 = 
ARM_MATH_SUCCESS
;

197  (
°©us
);

198 
	}
}

	@CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_sub_f32.c

41 
	~"¨m_m©h.h
"

72 
¨m_°©us
 
	$¨m_m©_sub_f32
(

73 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

74 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

75 
¨m_m©rix_ö°™˚_f32
 * 
pD°
)

77 
Êﬂt32_t
 *
pIn1
 = 
pSrcA
->
pD©a
;

78 
Êﬂt32_t
 *
pIn2
 = 
pSrcB
->
pD©a
;

79 
Êﬂt32_t
 *
pOut
 = 
pD°
->
pD©a
;

81 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
Êﬂt32_t
 
öA1
, 
öA2
, 
öB1
, 
öB2
, 
out1
, 
out2
;

87 
uöt32_t
 
numSam∂es
;

88 
uöt32_t
 
blkC¡
;

89 
¨m_°©us
 
°©us
;

91 #ifde‡
ARM_MATH_MATRIX_CHECK


93 if((
pSrcA
->
numRows
 !
pSrcB
->numRows) ||

94 (
pSrcA
->
numCﬁs
 !
pSrcB
->numCols) ||

95 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (pSrcA->
numCﬁs
 !=ÖDst->numCols))

98 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

104 
numSam∂es
 = (
uöt32_t
Ë
pSrcA
->
numRows
 *ÖSrcA->
numCﬁs
;

106 #i‚de‡
ARM_MATH_CM0_FAMILY


111 
blkC¡
 = 
numSam∂es
 >> 2u;

115 
blkC¡
 > 0u)

120 
öA1
 = 
pIn1
[0];

123 
öB1
 = 
pIn2
[0];

126 
öA2
 = 
pIn1
[1];

129 
out1
 = 
öA1
 - 
öB1
;

132 
öB2
 = 
pIn2
[1];

135 
öA1
 = 
pIn1
[2];

138 
out2
 = 
öA2
 - 
öB2
;

141 
öB1
 = 
pIn2
[2];

144 
pOut
[0] = 
out1
;

145 
pOut
[1] = 
out2
;

148 
öA2
 = 
pIn1
[3];

151 
öB2
 = 
pIn2
[3];

154 
out1
 = 
öA1
 - 
öB1
;

158 
out2
 = 
öA2
 - 
öB2
;

161 
pOut
[2] = 
out1
;

164 
pOut
[3] = 
out2
;

168 
pIn1
 += 4u;

169 
pIn2
 += 4u;

170 
pOut
 += 4u;

173 
blkC¡
--;

178 
blkC¡
 = 
numSam∂es
 % 0x4u;

185 
blkC¡
 = 
numSam∂es
;

189 
blkC¡
 > 0u)

193 *
pOut
++ = (*
pIn1
++Ë- (*
pIn2
++);

196 
blkC¡
--;

200 
°©us
 = 
ARM_MATH_SUCCESS
;

204  (
°©us
);

205 
	}
}

	@CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_sub_q15.c

41 
	~"¨m_m©h.h
"

66 
¨m_°©us
 
	$¨m_m©_sub_q15
(

67 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

68 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

69 
¨m_m©rix_ö°™˚_q15
 * 
pD°
)

71 
q15_t
 *
pInA
 = 
pSrcA
->
pD©a
;

72 
q15_t
 *
pInB
 = 
pSrcB
->
pD©a
;

73 
q15_t
 *
pOut
 = 
pD°
->
pD©a
;

74 
uöt32_t
 
numSam∂es
;

75 
uöt32_t
 
blkC¡
;

76 
¨m_°©us
 
°©us
;

79 #ifde‡
ARM_MATH_MATRIX_CHECK


83 if((
pSrcA
->
numRows
 !
pSrcB
->numRows) ||

84 (
pSrcA
->
numCﬁs
 !
pSrcB
->numCols) ||

85 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (pSrcA->
numCﬁs
 !=ÖDst->numCols))

88 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

95 
numSam∂es
 = (
uöt32_t
Ë
pSrcA
->
numRows
 *ÖSrcA->
numCﬁs
;

97 #i‚de‡
ARM_MATH_CM0_FAMILY


102 
blkC¡
 = 
numSam∂es
 >> 2u;

106 
blkC¡
 > 0u)

110 *
	`__SIMD32
(
pOut
)++ = 
	`__QSUB16
(*__SIMD32(
pInA
)++, *__SIMD32(
pInB
)++);

111 *
	`__SIMD32
(
pOut
)++ = 
	`__QSUB16
(*__SIMD32(
pInA
)++, *__SIMD32(
pInB
)++);

114 
blkC¡
--;

119 
blkC¡
 = 
numSam∂es
 % 0x4u;

121 
blkC¡
 > 0u)

125 *
pOut
++ = (
q15_t
Ë
	`__QSUB16
(*
pInA
++, *
pInB
++);

128 
blkC¡
--;

136 
blkC¡
 = 
numSam∂es
;

138 
blkC¡
 > 0u)

142 *
pOut
++ = (
q15_t
Ë
	`__SSAT
(((
q31_t
Ë* 
pInA
++ - *
pInB
++), 16);

145 
blkC¡
--;

151 
°©us
 = 
ARM_MATH_SUCCESS
;

155  (
°©us
);

156 
	}
}

	@CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_sub_q31.c

41 
	~"¨m_m©h.h
"

67 
¨m_°©us
 
	$¨m_m©_sub_q31
(

68 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

69 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

70 
¨m_m©rix_ö°™˚_q31
 * 
pD°
)

72 
q31_t
 *
pIn1
 = 
pSrcA
->
pD©a
;

73 
q31_t
 *
pIn2
 = 
pSrcB
->
pD©a
;

74 
q31_t
 *
pOut
 = 
pD°
->
pD©a
;

75 
q31_t
 
öA1
, 
öB1
;

77 #i‚de‡
ARM_MATH_CM0_FAMILY


79 
q31_t
 
öA2
, 
öB2
;

80 
q31_t
 
out1
, 
out2
;

84 
uöt32_t
 
numSam∂es
;

85 
uöt32_t
 
blkC¡
;

86 
¨m_°©us
 
°©us
;

89 #ifde‡
ARM_MATH_MATRIX_CHECK


91 if((
pSrcA
->
numRows
 !
pSrcB
->numRows) ||

92 (
pSrcA
->
numCﬁs
 !
pSrcB
->numCols) ||

93 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (pSrcA->
numCﬁs
 !=ÖDst->numCols))

96 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

102 
numSam∂es
 = (
uöt32_t
Ë
pSrcA
->
numRows
 *ÖSrcA->
numCﬁs
;

104 #i‚de‡
ARM_MATH_CM0_FAMILY


109 
blkC¡
 = 
numSam∂es
 >> 2u;

113 
blkC¡
 > 0u)

118 
öA1
 = 
pIn1
[0];

121 
öB1
 = 
pIn2
[0];

124 
öA2
 = 
pIn1
[1];

127 
out1
 = 
	`__QSUB
(
öA1
, 
öB1
);

130 
öB2
 = 
pIn2
[1];

133 
öA1
 = 
pIn1
[2];

136 
out2
 = 
	`__QSUB
(
öA2
, 
öB2
);

139 
öB1
 = 
pIn2
[2];

142 
pOut
[0] = 
out1
;

143 
pOut
[1] = 
out2
;

146 
öA2
 = 
pIn1
[3];

149 
öB2
 = 
pIn2
[3];

152 
out1
 = 
	`__QSUB
(
öA1
, 
öB1
);

155 
out2
 = 
	`__QSUB
(
öA2
, 
öB2
);

158 
pOut
[2] = 
out1
;

159 
pOut
[3] = 
out2
;

162 
pIn1
 += 4u;

163 
pIn2
 += 4u;

164 
pOut
 += 4u;

167 
blkC¡
--;

172 
blkC¡
 = 
numSam∂es
 % 0x4u;

179 
blkC¡
 = 
numSam∂es
;

183 
blkC¡
 > 0u)

187 
öA1
 = *
pIn1
++;

188 
öB1
 = *
pIn2
++;

190 
öA1
 = 
	`__QSUB
(öA1, 
öB1
);

192 *
pOut
++ = 
öA1
;

195 
blkC¡
--;

199 
°©us
 = 
ARM_MATH_SUCCESS
;

203  (
°©us
);

204 
	}
}

	@CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_trans_f32.c

49 
	~"¨m_m©h.h
"

69 
¨m_°©us
 
	$¨m_m©_å™s_f32
(

70 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

71 
¨m_m©rix_ö°™˚_f32
 * 
pD°
)

73 
Êﬂt32_t
 *
pIn
 = 
pSrc
->
pD©a
;

74 
Êﬂt32_t
 *
pOut
 = 
pD°
->
pD©a
;

75 
Êﬂt32_t
 *
px
;

76 
uöt16_t
 
nRows
 = 
pSrc
->
numRows
;

77 
uöt16_t
 
nCﬁumns
 = 
pSrc
->
numCﬁs
;

79 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
uöt16_t
 
blkC¡
, 
i
 = 0u, 
row
 = 
nRows
;

84 
¨m_°©us
 
°©us
;

87 #ifde‡
ARM_MATH_MATRIX_CHECK


91 if((
pSrc
->
numRows
 !
pD°
->
numCﬁs
) || (pSrc->numCols !=ÖDst->numRows))

94 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

105 
blkC¡
 = 
nCﬁumns
 >> 2;

108 
px
 = 
pOut
 + 
i
;

112 
blkC¡
 > 0u)

115 *
px
 = *
pIn
++;

118 
px
 +
nRows
;

121 *
px
 = *
pIn
++;

124 
px
 +
nRows
;

127 *
px
 = *
pIn
++;

130 
px
 +
nRows
;

133 *
px
 = *
pIn
++;

136 
px
 +
nRows
;

139 
blkC¡
--;

143 
blkC¡
 = 
nCﬁumns
 % 0x4u;

145 
blkC¡
 > 0u)

148 *
px
 = *
pIn
++;

151 
px
 +
nRows
;

154 
blkC¡
--;

161 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
row
 = 
nRows
;

162 
¨m_°©us
 
°©us
;

165 #ifde‡
ARM_MATH_MATRIX_CHECK


168 if((
pSrc
->
numRows
 !
pD°
->
numCﬁs
) || (pSrc->numCols !=ÖDst->numRows))

171 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

182 
px
 = 
pOut
 + 
i
;

185 
cﬁ
 = 
nCﬁumns
;

187 
cﬁ
 > 0u)

190 *
px
 = *
pIn
++;

193 
px
 +
nRows
;

196 
cﬁ
--;

201 
i
++;

204 
row
--;

206 } 
row
 > 0u);

209 
°©us
 = 
ARM_MATH_SUCCESS
;

213  (
°©us
);

214 
	}
}

	@CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_trans_q15.c

41 
	~"¨m_m©h.h
"

60 
¨m_°©us
 
	$¨m_m©_å™s_q15
(

61 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

62 
¨m_m©rix_ö°™˚_q15
 * 
pD°
)

64 
q15_t
 *
pSrcA
 = 
pSrc
->
pD©a
;

65 
q15_t
 *
pOut
 = 
pD°
->
pD©a
;

66 
uöt16_t
 
nRows
 = 
pSrc
->
numRows
;

67 
uöt16_t
 
nCﬁumns
 = 
pSrc
->
numCﬁs
;

68 
uöt16_t
 
cﬁ
, 
row
 = 
nRows
, 
i
 = 0u;

69 
¨m_°©us
 
°©us
;

71 #i‚de‡
ARM_MATH_CM0_FAMILY


74 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


76 
q31_t
 
ö
;

80 
q15_t
 
ö
;

84 #ifde‡
ARM_MATH_MATRIX_CHECK


88 if((
pSrc
->
numRows
 !
pD°
->
numCﬁs
) || (pSrc->numCols !=ÖDst->numRows))

91 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

103 
cﬁ
 = 
nCﬁumns
 >> 2u;

106 
pOut
 = 
pD°
->
pD©a
 + 
i
;

110 
cﬁ
 > 0u)

112 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


115 
ö
 = *
	`__SIMD32
(
pSrcA
)++;

118 #i‚de‡
ARM_MATH_BIG_ENDIAN


120 *
pOut
 = (
q15_t
Ë
ö
;

124 *
pOut
 = (
q15_t
Ë((
ö
 & (
q31_t
) 0xffff0000) >> 16);

129 
pOut
 +
nRows
;

133 #i‚de‡
ARM_MATH_BIG_ENDIAN


135 *
pOut
 = (
q15_t
Ë((
ö
 & (
q31_t
) 0xffff0000) >> 16);

139 *
pOut
 = (
q15_t
Ë
ö
;

144 
pOut
 +
nRows
;

147 #i‚de‡
ARM_MATH_BIG_ENDIAN


149 
ö
 = *
	`__SIMD32
(
pSrcA
)++;

153 
ö
 = *
	`__SIMD32
(
pSrcA
)++;

158 #i‚de‡
ARM_MATH_BIG_ENDIAN


160 *
pOut
 = (
q15_t
Ë
ö
;

164 *
pOut
 = (
q15_t
Ë((
ö
 & (
q31_t
) 0xffff0000) >> 16);

169 
pOut
 +
nRows
;

172 #i‚de‡
ARM_MATH_BIG_ENDIAN


174 *
pOut
 = (
q15_t
Ë((
ö
 & (
q31_t
) 0xffff0000) >> 16);

178 *
pOut
 = (
q15_t
Ë
ö
;

184 
ö
 = *
pSrcA
++;

187 *
pOut
 = 
ö
;

190 
pOut
 +
nRows
;

193 
ö
 = *
pSrcA
++;

196 *
pOut
 = 
ö
;

199 
pOut
 +
nRows
;

202 
ö
 = *
pSrcA
++;

205 *
pOut
 = 
ö
;

208 
pOut
 +
nRows
;

211 
ö
 = *
pSrcA
++;

214 *
pOut
 = 
ö
;

219 
pOut
 +
nRows
;

222 
cﬁ
--;

226 
cﬁ
 = 
nCﬁumns
 % 0x4u;

232 #ifde‡
ARM_MATH_MATRIX_CHECK


235 if((
pSrc
->
numRows
 !
pD°
->
numCﬁs
) || (pSrc->numCols !=ÖDst->numRows))

238 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

249 
pOut
 = 
pD°
->
pD©a
 + 
i
;

252 
cﬁ
 = 
nCﬁumns
;

256 
cﬁ
 > 0u)

259 *
pOut
 = *
pSrcA
++;

262 
pOut
 +
nRows
;

265 
cﬁ
--;

268 
i
++;

271 
row
--;

273 } 
row
 > 0u);

276 
°©us
 = 
ARM_MATH_SUCCESS
;

279  (
°©us
);

280 
	}
}

	@CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_trans_q31.c

41 
	~"¨m_m©h.h
"

60 
¨m_°©us
 
	$¨m_m©_å™s_q31
(

61 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

62 
¨m_m©rix_ö°™˚_q31
 * 
pD°
)

64 
q31_t
 *
pIn
 = 
pSrc
->
pD©a
;

65 
q31_t
 *
pOut
 = 
pD°
->
pD©a
;

66 
q31_t
 *
px
;

67 
uöt16_t
 
nRows
 = 
pSrc
->
numRows
;

68 
uöt16_t
 
nCﬁumns
 = 
pSrc
->
numCﬁs
;

70 #i‚de‡
ARM_MATH_CM0_FAMILY


74 
uöt16_t
 
blkC¡
, 
i
 = 0u, 
row
 = 
nRows
;

75 
¨m_°©us
 
°©us
;

78 #ifde‡
ARM_MATH_MATRIX_CHECK


82 if((
pSrc
->
numRows
 !
pD°
->
numCﬁs
) || (pSrc->numCols !=ÖDst->numRows))

85 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

96 
blkC¡
 = 
nCﬁumns
 >> 2u;

99 
px
 = 
pOut
 + 
i
;

103 
blkC¡
 > 0u)

106 *
px
 = *
pIn
++;

109 
px
 +
nRows
;

112 *
px
 = *
pIn
++;

115 
px
 +
nRows
;

118 *
px
 = *
pIn
++;

121 
px
 +
nRows
;

124 *
px
 = *
pIn
++;

127 
px
 +
nRows
;

130 
blkC¡
--;

134 
blkC¡
 = 
nCﬁumns
 % 0x4u;

136 
blkC¡
 > 0u)

139 *
px
 = *
pIn
++;

142 
px
 +
nRows
;

145 
blkC¡
--;

152 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
row
 = 
nRows
;

153 
¨m_°©us
 
°©us
;

156 #ifde‡
ARM_MATH_MATRIX_CHECK


159 if((
pSrc
->
numRows
 !
pD°
->
numCﬁs
) || (pSrc->numCols !=ÖDst->numRows))

162 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

173 
px
 = 
pOut
 + 
i
;

176 
cﬁ
 = 
nCﬁumns
;

178 
cﬁ
 > 0u)

181 *
px
 = *
pIn
++;

184 
px
 +
nRows
;

187 
cﬁ
--;

192 
i
++;

195 
row
--;

198 
row
 > 0u);

201 
°©us
 = 
ARM_MATH_SUCCESS
;

205  (
°©us
);

206 
	}
}

	@CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_max_f32.c

41 
	~"¨m_m©h.h
"

70 
	$¨m_max_f32
(

71 
Êﬂt32_t
 * 
pSrc
,

72 
uöt32_t
 
blockSize
,

73 
Êﬂt32_t
 * 
pResu…
,

74 
uöt32_t
 * 
pIndex
)

76 #i‚de‡
ARM_MATH_CM0_FAMILY


79 
Êﬂt32_t
 
maxVÆ1
, 
maxVÆ2
, 
out
;

80 
uöt32_t
 
blkC¡
, 
outIndex
, 
cou¡
;

83 
cou¡
 = 0u;

85 
outIndex
 = 0u;

87 
out
 = *
pSrc
++;

90 
blkC¡
 = (
blockSize
 - 1u) >> 2u;

93 
blkC¡
 > 0u)

96 
maxVÆ1
 = *
pSrc
++;

98 
maxVÆ2
 = *
pSrc
++;

101 if(
out
 < 
maxVÆ1
)

104 
out
 = 
maxVÆ1
;

105 
outIndex
 = 
cou¡
 + 1u;

108 
maxVÆ1
 = *
pSrc
++;

111 if(
out
 < 
maxVÆ2
)

114 
out
 = 
maxVÆ2
;

115 
outIndex
 = 
cou¡
 + 2u;

118 
maxVÆ2
 = *
pSrc
++;

121 if(
out
 < 
maxVÆ1
)

124 
out
 = 
maxVÆ1
;

125 
outIndex
 = 
cou¡
 + 3u;

129 if(
out
 < 
maxVÆ2
)

132 
out
 = 
maxVÆ2
;

133 
outIndex
 = 
cou¡
 + 4u;

136 
cou¡
 += 4u;

139 
blkC¡
--;

143 
blkC¡
 = (
blockSize
 - 1u) % 4u;

148 
Êﬂt32_t
 
maxVÆ1
, 
out
;

149 
uöt32_t
 
blkC¡
, 
outIndex
;

152 
outIndex
 = 0u;

154 
out
 = *
pSrc
++;

156 
blkC¡
 = (
blockSize
 - 1u);

160 
blkC¡
 > 0u)

163 
maxVÆ1
 = *
pSrc
++;

166 if(
out
 < 
maxVÆ1
)

169 
out
 = 
maxVÆ1
;

170 
outIndex
 = 
blockSize
 - 
blkC¡
;

175 
blkC¡
--;

180 *
pResu…
 = 
out
;

181 *
pIndex
 = 
outIndex
;

182 
	}
}

	@CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_max_q15.c

41 
	~"¨m_m©h.h
"

62 
	$¨m_max_q15
(

63 
q15_t
 * 
pSrc
,

64 
uöt32_t
 
blockSize
,

65 
q15_t
 * 
pResu…
,

66 
uöt32_t
 * 
pIndex
)

68 #i‚de‡
ARM_MATH_CM0_FAMILY


71 
q15_t
 
maxVÆ1
, 
maxVÆ2
, 
out
;

72 
uöt32_t
 
blkC¡
, 
outIndex
, 
cou¡
;

75 
cou¡
 = 0u;

77 
outIndex
 = 0u;

79 
out
 = *
pSrc
++;

82 
blkC¡
 = (
blockSize
 - 1u) >> 2u;

85 
blkC¡
 > 0u)

88 
maxVÆ1
 = *
pSrc
++;

90 
maxVÆ2
 = *
pSrc
++;

93 if(
out
 < 
maxVÆ1
)

96 
out
 = 
maxVÆ1
;

97 
outIndex
 = 
cou¡
 + 1u;

100 
maxVÆ1
 = *
pSrc
++;

103 if(
out
 < 
maxVÆ2
)

106 
out
 = 
maxVÆ2
;

107 
outIndex
 = 
cou¡
 + 2u;

110 
maxVÆ2
 = *
pSrc
++;

113 if(
out
 < 
maxVÆ1
)

116 
out
 = 
maxVÆ1
;

117 
outIndex
 = 
cou¡
 + 3u;

121 if(
out
 < 
maxVÆ2
)

124 
out
 = 
maxVÆ2
;

125 
outIndex
 = 
cou¡
 + 4u;

128 
cou¡
 += 4u;

131 
blkC¡
--;

135 
blkC¡
 = (
blockSize
 - 1u) % 4u;

140 
q15_t
 
maxVÆ1
, 
out
;

141 
uöt32_t
 
blkC¡
, 
outIndex
;

143 
blkC¡
 = (
blockSize
 - 1u);

146 
outIndex
 = 0u;

148 
out
 = *
pSrc
++;

152 
blkC¡
 > 0u)

155 
maxVÆ1
 = *
pSrc
++;

158 if(
out
 < 
maxVÆ1
)

161 
out
 = 
maxVÆ1
;

162 
outIndex
 = 
blockSize
 - 
blkC¡
;

165 
blkC¡
--;

170 *
pResu…
 = 
out
;

171 *
pIndex
 = 
outIndex
;

172 
	}
}

	@CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_max_q31.c

41 
	~"¨m_m©h.h
"

62 
	$¨m_max_q31
(

63 
q31_t
 * 
pSrc
,

64 
uöt32_t
 
blockSize
,

65 
q31_t
 * 
pResu…
,

66 
uöt32_t
 * 
pIndex
)

68 #i‚de‡
ARM_MATH_CM0_FAMILY


71 
q31_t
 
maxVÆ1
, 
maxVÆ2
, 
out
;

72 
uöt32_t
 
blkC¡
, 
outIndex
, 
cou¡
;

75 
cou¡
 = 0u;

77 
outIndex
 = 0u;

79 
out
 = *
pSrc
++;

82 
blkC¡
 = (
blockSize
 - 1u) >> 2u;

85 
blkC¡
 > 0u)

88 
maxVÆ1
 = *
pSrc
++;

90 
maxVÆ2
 = *
pSrc
++;

93 if(
out
 < 
maxVÆ1
)

96 
out
 = 
maxVÆ1
;

97 
outIndex
 = 
cou¡
 + 1u;

100 
maxVÆ1
 = *
pSrc
++;

103 if(
out
 < 
maxVÆ2
)

106 
out
 = 
maxVÆ2
;

107 
outIndex
 = 
cou¡
 + 2u;

110 
maxVÆ2
 = *
pSrc
++;

113 if(
out
 < 
maxVÆ1
)

116 
out
 = 
maxVÆ1
;

117 
outIndex
 = 
cou¡
 + 3u;

121 if(
out
 < 
maxVÆ2
)

124 
out
 = 
maxVÆ2
;

125 
outIndex
 = 
cou¡
 + 4u;

128 
cou¡
 += 4u;

131 
blkC¡
--;

135 
blkC¡
 = (
blockSize
 - 1u) % 4u;

140 
q31_t
 
maxVÆ1
, 
out
;

141 
uöt32_t
 
blkC¡
, 
outIndex
;

144 
outIndex
 = 0u;

146 
out
 = *
pSrc
++;

148 
blkC¡
 = (
blockSize
 - 1u);

152 
blkC¡
 > 0u)

155 
maxVÆ1
 = *
pSrc
++;

158 if(
out
 < 
maxVÆ1
)

161 
out
 = 
maxVÆ1
;

162 
outIndex
 = 
blockSize
 - 
blkC¡
;

166 
blkC¡
--;

171 *
pResu…
 = 
out
;

172 *
pIndex
 = 
outIndex
;

173 
	}
}

	@CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_max_q7.c

41 
	~"¨m_m©h.h
"

62 
	$¨m_max_q7
(

63 
q7_t
 * 
pSrc
,

64 
uöt32_t
 
blockSize
,

65 
q7_t
 * 
pResu…
,

66 
uöt32_t
 * 
pIndex
)

68 #i‚de‡
ARM_MATH_CM0_FAMILY


71 
q7_t
 
maxVÆ1
, 
maxVÆ2
, 
out
;

72 
uöt32_t
 
blkC¡
, 
outIndex
, 
cou¡
;

75 
cou¡
 = 0u;

77 
outIndex
 = 0u;

79 
out
 = *
pSrc
++;

82 
blkC¡
 = (
blockSize
 - 1u) >> 2u;

85 
blkC¡
 > 0u)

88 
maxVÆ1
 = *
pSrc
++;

90 
maxVÆ2
 = *
pSrc
++;

93 if(
out
 < 
maxVÆ1
)

96 
out
 = 
maxVÆ1
;

97 
outIndex
 = 
cou¡
 + 1u;

100 
maxVÆ1
 = *
pSrc
++;

103 if(
out
 < 
maxVÆ2
)

106 
out
 = 
maxVÆ2
;

107 
outIndex
 = 
cou¡
 + 2u;

110 
maxVÆ2
 = *
pSrc
++;

113 if(
out
 < 
maxVÆ1
)

116 
out
 = 
maxVÆ1
;

117 
outIndex
 = 
cou¡
 + 3u;

121 if(
out
 < 
maxVÆ2
)

124 
out
 = 
maxVÆ2
;

125 
outIndex
 = 
cou¡
 + 4u;

128 
cou¡
 += 4u;

131 
blkC¡
--;

135 
blkC¡
 = (
blockSize
 - 1u) % 4u;

140 
q7_t
 
maxVÆ1
, 
out
;

141 
uöt32_t
 
blkC¡
, 
outIndex
;

144 
outIndex
 = 0u;

146 
out
 = *
pSrc
++;

148 
blkC¡
 = (
blockSize
 - 1u);

152 
blkC¡
 > 0u)

155 
maxVÆ1
 = *
pSrc
++;

158 if(
out
 < 
maxVÆ1
)

161 
out
 = 
maxVÆ1
;

162 
outIndex
 = 
blockSize
 - 
blkC¡
;

165 
blkC¡
--;

170 *
pResu…
 = 
out
;

171 *
pIndex
 = 
outIndex
;

173 
	}
}

	@CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_mean_f32.c

41 
	~"¨m_m©h.h
"

75 
	$¨m_món_f32
(

76 
Êﬂt32_t
 * 
pSrc
,

77 
uöt32_t
 
blockSize
,

78 
Êﬂt32_t
 * 
pResu…
)

80 
Êﬂt32_t
 
sum
 = 0.0f;

81 
uöt32_t
 
blkC¡
;

83 #i‚de‡
ARM_MATH_CM0_FAMILY


86 
Êﬂt32_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

89 
blkC¡
 = 
blockSize
 >> 2u;

93 
blkC¡
 > 0u)

96 
ö1
 = *
pSrc
++;

97 
ö2
 = *
pSrc
++;

98 
ö3
 = *
pSrc
++;

99 
ö4
 = *
pSrc
++;

101 
sum
 +
ö1
;

102 
sum
 +
ö2
;

103 
sum
 +
ö3
;

104 
sum
 +
ö4
;

107 
blkC¡
--;

112 
blkC¡
 = 
blockSize
 % 0x4u;

119 
blkC¡
 = 
blockSize
;

123 
blkC¡
 > 0u)

126 
sum
 +*
pSrc
++;

129 
blkC¡
--;

134 *
pResu…
 = 
sum
 / (
Êﬂt32_t
Ë
blockSize
;

135 
	}
}

	@CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_mean_q15.c

41 
	~"¨m_m©h.h
"

72 
	$¨m_món_q15
(

73 
q15_t
 * 
pSrc
,

74 
uöt32_t
 
blockSize
,

75 
q15_t
 * 
pResu…
)

77 
q31_t
 
sum
 = 0;

78 
uöt32_t
 
blkC¡
;

80 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
q31_t
 
ö
;

86 
blkC¡
 = 
blockSize
 >> 2u;

90 
blkC¡
 > 0u)

93 
ö
 = *
	`__SIMD32
(
pSrc
)++;

94 
sum
 +((
ö
 << 16) >> 16);

95 
sum
 +(
ö
 >> 16);

96 
ö
 = *
	`__SIMD32
(
pSrc
)++;

97 
sum
 +((
ö
 << 16) >> 16);

98 
sum
 +(
ö
 >> 16);

101 
blkC¡
--;

106 
blkC¡
 = 
blockSize
 % 0x4u;

113 
blkC¡
 = 
blockSize
;

117 
blkC¡
 > 0u)

120 
sum
 +*
pSrc
++;

123 
blkC¡
--;

128 *
pResu…
 = (
q15_t
Ë(
sum
 / (
q31_t
)
blockSize
);

129 
	}
}

	@CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_mean_q31.c

41 
	~"¨m_m©h.h
"

72 
	$¨m_món_q31
(

73 
q31_t
 * 
pSrc
,

74 
uöt32_t
 
blockSize
,

75 
q31_t
 * 
pResu…
)

77 
q63_t
 
sum
 = 0;

78 
uöt32_t
 
blkC¡
;

80 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

86 
blkC¡
 = 
blockSize
 >> 2u;

90 
blkC¡
 > 0u)

93 
ö1
 = *
pSrc
++;

94 
ö2
 = *
pSrc
++;

95 
ö3
 = *
pSrc
++;

96 
ö4
 = *
pSrc
++;

98 
sum
 +
ö1
;

99 
sum
 +
ö2
;

100 
sum
 +
ö3
;

101 
sum
 +
ö4
;

104 
blkC¡
--;

109 
blkC¡
 = 
blockSize
 % 0x4u;

116 
blkC¡
 = 
blockSize
;

120 
blkC¡
 > 0u)

123 
sum
 +*
pSrc
++;

126 
blkC¡
--;

131 *
pResu…
 = (
q31_t
Ë(
sum
 / (
öt32_t
Ë
blockSize
);

132 
	}
}

	@CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_mean_q7.c

41 
	~"¨m_m©h.h
"

72 
	$¨m_món_q7
(

73 
q7_t
 * 
pSrc
,

74 
uöt32_t
 
blockSize
,

75 
q7_t
 * 
pResu…
)

77 
q31_t
 
sum
 = 0;

78 
uöt32_t
 
blkC¡
;

80 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
q31_t
 
ö
;

86 
blkC¡
 = 
blockSize
 >> 2u;

90 
blkC¡
 > 0u)

93 
ö
 = *
	`__SIMD32
(
pSrc
)++;

95 
sum
 +((
ö
 << 24) >> 24);

96 
sum
 +((
ö
 << 16) >> 24);

97 
sum
 +((
ö
 << 8) >> 24);

98 
sum
 +(
ö
 >> 24);

101 
blkC¡
--;

106 
blkC¡
 = 
blockSize
 % 0x4u;

113 
blkC¡
 = 
blockSize
;

117 
blkC¡
 > 0u)

120 
sum
 +*
pSrc
++;

123 
blkC¡
--;

128 *
pResu…
 = (
q7_t
Ë(
sum
 / (
öt32_t
Ë
blockSize
);

129 
	}
}

	@CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_min_f32.c

41 
	~"¨m_m©h.h
"

71 
	$¨m_mö_f32
(

72 
Êﬂt32_t
 * 
pSrc
,

73 
uöt32_t
 
blockSize
,

74 
Êﬂt32_t
 * 
pResu…
,

75 
uöt32_t
 * 
pIndex
)

77 #i‚de‡
ARM_MATH_CM0_FAMILY


81 
Êﬂt32_t
 
möVÆ1
, 
möVÆ2
, 
out
;

82 
uöt32_t
 
blkC¡
, 
outIndex
, 
cou¡
;

85 
cou¡
 = 0u;

87 
outIndex
 = 0u;

89 
out
 = *
pSrc
++;

92 
blkC¡
 = (
blockSize
 - 1u) >> 2u;

94 
blkC¡
 > 0)

97 
möVÆ1
 = *
pSrc
++;

98 
möVÆ2
 = *
pSrc
++;

101 if(
out
 > 
möVÆ1
)

104 
out
 = 
möVÆ1
;

105 
outIndex
 = 
cou¡
 + 1u;

108 
möVÆ1
 = *
pSrc
++;

111 if(
out
 > 
möVÆ2
)

114 
out
 = 
möVÆ2
;

115 
outIndex
 = 
cou¡
 + 2u;

118 
möVÆ2
 = *
pSrc
++;

121 if(
out
 > 
möVÆ1
)

124 
out
 = 
möVÆ1
;

125 
outIndex
 = 
cou¡
 + 3u;

129 if(
out
 > 
möVÆ2
)

132 
out
 = 
möVÆ2
;

133 
outIndex
 = 
cou¡
 + 4u;

136 
cou¡
 += 4u;

138 
blkC¡
--;

142 
blkC¡
 = (
blockSize
 - 1u) % 4u;

147 
Êﬂt32_t
 
möVÆ1
, 
out
;

148 
uöt32_t
 
blkC¡
, 
outIndex
;

151 
outIndex
 = 0u;

153 
out
 = *
pSrc
++;

155 
blkC¡
 = (
blockSize
 - 1u);

159 
blkC¡
 > 0)

162 
möVÆ1
 = *
pSrc
++;

165 if(
out
 > 
möVÆ1
)

168 
out
 = 
möVÆ1
;

169 
outIndex
 = 
blockSize
 - 
blkC¡
;

172 
blkC¡
--;

177 *
pResu…
 = 
out
;

178 *
pIndex
 = 
outIndex
;

179 
	}
}

	@CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_min_q15.c

41 
	~"¨m_m©h.h
"

64 
	$¨m_mö_q15
(

65 
q15_t
 * 
pSrc
,

66 
uöt32_t
 
blockSize
,

67 
q15_t
 * 
pResu…
,

68 
uöt32_t
 * 
pIndex
)

70 #i‚de‡
ARM_MATH_CM0_FAMILY


73 
q15_t
 
möVÆ1
, 
möVÆ2
, 
out
;

74 
uöt32_t
 
blkC¡
, 
outIndex
, 
cou¡
;

77 
cou¡
 = 0u;

79 
outIndex
 = 0u;

81 
out
 = *
pSrc
++;

84 
blkC¡
 = (
blockSize
 - 1u) >> 2u;

86 
blkC¡
 > 0)

89 
möVÆ1
 = *
pSrc
++;

90 
möVÆ2
 = *
pSrc
++;

93 if(
out
 > 
möVÆ1
)

96 
out
 = 
möVÆ1
;

97 
outIndex
 = 
cou¡
 + 1u;

100 
möVÆ1
 = *
pSrc
++;

103 if(
out
 > 
möVÆ2
)

106 
out
 = 
möVÆ2
;

107 
outIndex
 = 
cou¡
 + 2u;

110 
möVÆ2
 = *
pSrc
++;

113 if(
out
 > 
möVÆ1
)

116 
out
 = 
möVÆ1
;

117 
outIndex
 = 
cou¡
 + 3u;

121 if(
out
 > 
möVÆ2
)

124 
out
 = 
möVÆ2
;

125 
outIndex
 = 
cou¡
 + 4u;

128 
cou¡
 += 4u;

130 
blkC¡
--;

134 
blkC¡
 = (
blockSize
 - 1u) % 4u;

139 
q15_t
 
möVÆ1
, 
out
;

140 
uöt32_t
 
blkC¡
, 
outIndex
;

142 
blkC¡
 = (
blockSize
 - 1u);

145 
outIndex
 = 0u;

147 
out
 = *
pSrc
++;

151 
blkC¡
 > 0)

154 
möVÆ1
 = *
pSrc
++;

157 if(
out
 > 
möVÆ1
)

160 
out
 = 
möVÆ1
;

161 
outIndex
 = 
blockSize
 - 
blkC¡
;

164 
blkC¡
--;

171 *
pResu…
 = 
out
;

172 *
pIndex
 = 
outIndex
;

173 
	}
}

	@CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_min_q31.c

41 
	~"¨m_m©h.h
"

64 
	$¨m_mö_q31
(

65 
q31_t
 * 
pSrc
,

66 
uöt32_t
 
blockSize
,

67 
q31_t
 * 
pResu…
,

68 
uöt32_t
 * 
pIndex
)

70 #i‚de‡
ARM_MATH_CM0_FAMILY


73 
q31_t
 
möVÆ1
, 
möVÆ2
, 
out
;

74 
uöt32_t
 
blkC¡
, 
outIndex
, 
cou¡
;

77 
cou¡
 = 0u;

79 
outIndex
 = 0u;

81 
out
 = *
pSrc
++;

85 
blkC¡
 = (
blockSize
 - 1u) >> 2u;

87 
blkC¡
 > 0)

90 
möVÆ1
 = *
pSrc
++;

91 
möVÆ2
 = *
pSrc
++;

94 if(
out
 > 
möVÆ1
)

97 
out
 = 
möVÆ1
;

98 
outIndex
 = 
cou¡
 + 1u;

101 
möVÆ1
 = *
pSrc
++;

104 if(
out
 > 
möVÆ2
)

107 
out
 = 
möVÆ2
;

108 
outIndex
 = 
cou¡
 + 2u;

111 
möVÆ2
 = *
pSrc
++;

114 if(
out
 > 
möVÆ1
)

117 
out
 = 
möVÆ1
;

118 
outIndex
 = 
cou¡
 + 3u;

122 if(
out
 > 
möVÆ2
)

125 
out
 = 
möVÆ2
;

126 
outIndex
 = 
cou¡
 + 4u;

129 
cou¡
 += 4u;

131 
blkC¡
--;

135 
blkC¡
 = (
blockSize
 - 1u) % 4u;

140 
q31_t
 
möVÆ1
, 
out
;

141 
uöt32_t
 
blkC¡
, 
outIndex
;

143 
blkC¡
 = (
blockSize
 - 1u);

146 
outIndex
 = 0u;

148 
out
 = *
pSrc
++;

152 
blkC¡
 > 0)

155 
möVÆ1
 = *
pSrc
++;

158 if(
out
 > 
möVÆ1
)

161 
out
 = 
möVÆ1
;

162 
outIndex
 = 
blockSize
 - 
blkC¡
;

165 
blkC¡
--;

170 *
pResu…
 = 
out
;

171 *
pIndex
 = 
outIndex
;

172 
	}
}

	@CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_min_q7.c

41 
	~"¨m_m©h.h
"

63 
	$¨m_mö_q7
(

64 
q7_t
 * 
pSrc
,

65 
uöt32_t
 
blockSize
,

66 
q7_t
 * 
pResu…
,

67 
uöt32_t
 * 
pIndex
)

69 #i‚de‡
ARM_MATH_CM0_FAMILY


73 
q7_t
 
möVÆ1
, 
möVÆ2
, 
out
;

74 
uöt32_t
 
blkC¡
, 
outIndex
, 
cou¡
;

77 
cou¡
 = 0u;

79 
outIndex
 = 0u;

81 
out
 = *
pSrc
++;

84 
blkC¡
 = (
blockSize
 - 1u) >> 2u;

86 
blkC¡
 > 0)

89 
möVÆ1
 = *
pSrc
++;

90 
möVÆ2
 = *
pSrc
++;

93 if(
out
 > 
möVÆ1
)

96 
out
 = 
möVÆ1
;

97 
outIndex
 = 
cou¡
 + 1u;

100 
möVÆ1
 = *
pSrc
++;

103 if(
out
 > 
möVÆ2
)

106 
out
 = 
möVÆ2
;

107 
outIndex
 = 
cou¡
 + 2u;

110 
möVÆ2
 = *
pSrc
++;

113 if(
out
 > 
möVÆ1
)

116 
out
 = 
möVÆ1
;

117 
outIndex
 = 
cou¡
 + 3u;

121 if(
out
 > 
möVÆ2
)

124 
out
 = 
möVÆ2
;

125 
outIndex
 = 
cou¡
 + 4u;

128 
cou¡
 += 4u;

130 
blkC¡
--;

134 
blkC¡
 = (
blockSize
 - 1u) % 4u;

140 
q7_t
 
möVÆ1
, 
out
;

141 
uöt32_t
 
blkC¡
, 
outIndex
;

144 
outIndex
 = 0u;

146 
out
 = *
pSrc
++;

148 
blkC¡
 = (
blockSize
 - 1u);

152 
blkC¡
 > 0)

155 
möVÆ1
 = *
pSrc
++;

158 if(
out
 > 
möVÆ1
)

161 
out
 = 
möVÆ1
;

162 
outIndex
 = 
blockSize
 - 
blkC¡
;

165 
blkC¡
--;

170 *
pResu…
 = 
out
;

171 *
pIndex
 = 
outIndex
;

174 
	}
}

	@CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_power_f32.c

41 
	~"¨m_m©h.h
"

76 
	$¨m_powî_f32
(

77 
Êﬂt32_t
 * 
pSrc
,

78 
uöt32_t
 
blockSize
,

79 
Êﬂt32_t
 * 
pResu…
)

81 
Êﬂt32_t
 
sum
 = 0.0f;

82 
Êﬂt32_t
 
ö
;

83 
uöt32_t
 
blkC¡
;

85 #i‚de‡
ARM_MATH_CM0_FAMILY


90 
blkC¡
 = 
blockSize
 >> 2u;

94 
blkC¡
 > 0u)

98 
ö
 = *
pSrc
++;

99 
sum
 +
ö
 * in;

100 
ö
 = *
pSrc
++;

101 
sum
 +
ö
 * in;

102 
ö
 = *
pSrc
++;

103 
sum
 +
ö
 * in;

104 
ö
 = *
pSrc
++;

105 
sum
 +
ö
 * in;

108 
blkC¡
--;

113 
blkC¡
 = 
blockSize
 % 0x4u;

121 
blkC¡
 = 
blockSize
;

126 
blkC¡
 > 0u)

130 
ö
 = *
pSrc
++;

131 
sum
 +
ö
 * in;

134 
blkC¡
--;

138 *
pResu…
 = 
sum
;

139 
	}
}

	@CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_power_q15.c

41 
	~"¨m_m©h.h
"

73 
	$¨m_powî_q15
(

74 
q15_t
 * 
pSrc
,

75 
uöt32_t
 
blockSize
,

76 
q63_t
 * 
pResu…
)

78 
q63_t
 
sum
 = 0;

80 #i‚de‡
ARM_MATH_CM0_FAMILY


84 
q31_t
 
ö32
;

85 
q15_t
 
ö16
;

86 
uöt32_t
 
blkC¡
;

90 
blkC¡
 = 
blockSize
 >> 2u;

94 
blkC¡
 > 0u)

98 
ö32
 = *
	`__SIMD32
(
pSrc
)++;

99 
sum
 = 
	`__SMLALD
(
ö32
, in32, sum);

100 
ö32
 = *
	`__SIMD32
(
pSrc
)++;

101 
sum
 = 
	`__SMLALD
(
ö32
, in32, sum);

104 
blkC¡
--;

109 
blkC¡
 = 
blockSize
 % 0x4u;

111 
blkC¡
 > 0u)

115 
ö16
 = *
pSrc
++;

116 
sum
 = 
	`__SMLALD
(
ö16
, in16, sum);

119 
blkC¡
--;

126 
q15_t
 
ö
;

127 
uöt32_t
 
blkC¡
;

131 
blkC¡
 = 
blockSize
;

133 
blkC¡
 > 0u)

137 
ö
 = *
pSrc
++;

138 
sum
 +((
q31_t
Ë
ö
 * in);

141 
blkC¡
--;

147 *
pResu…
 = 
sum
;

148 
	}
}

	@CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_power_q31.c

41 
	~"¨m_m©h.h
"

74 
	$¨m_powî_q31
(

75 
q31_t
 * 
pSrc
,

76 
uöt32_t
 
blockSize
,

77 
q63_t
 * 
pResu…
)

79 
q63_t
 
sum
 = 0;

80 
q31_t
 
ö
;

81 
uöt32_t
 
blkC¡
;

84 #i‚de‡
ARM_MATH_CM0_FAMILY


89 
blkC¡
 = 
blockSize
 >> 2u;

93 
blkC¡
 > 0u)

97 
ö
 = *
pSrc
++;

98 
sum
 +((
q63_t
Ë
ö
 * in) >> 14u;

100 
ö
 = *
pSrc
++;

101 
sum
 +((
q63_t
Ë
ö
 * in) >> 14u;

103 
ö
 = *
pSrc
++;

104 
sum
 +((
q63_t
Ë
ö
 * in) >> 14u;

106 
ö
 = *
pSrc
++;

107 
sum
 +((
q63_t
Ë
ö
 * in) >> 14u;

110 
blkC¡
--;

115 
blkC¡
 = 
blockSize
 % 0x4u;

122 
blkC¡
 = 
blockSize
;

126 
blkC¡
 > 0u)

130 
ö
 = *
pSrc
++;

131 
sum
 +((
q63_t
Ë
ö
 * in) >> 14u;

134 
blkC¡
--;

138 *
pResu…
 = 
sum
;

139 
	}
}

	@CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_power_q7.c

41 
	~"¨m_m©h.h
"

73 
	$¨m_powî_q7
(

74 
q7_t
 * 
pSrc
,

75 
uöt32_t
 
blockSize
,

76 
q31_t
 * 
pResu…
)

78 
q31_t
 
sum
 = 0;

79 
q7_t
 
ö
;

80 
uöt32_t
 
blkC¡
;

82 #i‚de‡
ARM_MATH_CM0_FAMILY


86 
q31_t
 
öput1
;

87 
q31_t
 
ö1
, 
ö2
;

90 
blkC¡
 = 
blockSize
 >> 2u;

94 
blkC¡
 > 0u)

97 
öput1
 = *
	`__SIMD32
(
pSrc
)++;

99 
ö1
 = 
	`__SXTB16
(
	`__ROR
(
öput1
, 8));

100 
ö2
 = 
	`__SXTB16
(
öput1
);

104 
sum
 = 
	`__SMLAD
(
ö1
, in1, sum);

105 
sum
 = 
	`__SMLAD
(
ö2
, in2, sum);

108 
blkC¡
--;

113 
blkC¡
 = 
blockSize
 % 0x4u;

120 
blkC¡
 = 
blockSize
;

124 
blkC¡
 > 0u)

128 
ö
 = *
pSrc
++;

129 
sum
 +((
q15_t
Ë
ö
 * in);

132 
blkC¡
--;

136 *
pResu…
 = 
sum
;

137 
	}
}

	@CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_rms_f32.c

41 
	~"¨m_m©h.h
"

76 
	$¨m_rms_f32
(

77 
Êﬂt32_t
 * 
pSrc
,

78 
uöt32_t
 
blockSize
,

79 
Êﬂt32_t
 * 
pResu…
)

81 
Êﬂt32_t
 
sum
 = 0.0f;

82 
Êﬂt32_t
 
ö
;

83 
uöt32_t
 
blkC¡
;

85 #i‚de‡
ARM_MATH_CM0_FAMILY


90 
blkC¡
 = 
blockSize
 >> 2u;

94 
blkC¡
 > 0u)

98 
ö
 = *
pSrc
++;

99 
sum
 +
ö
 * in;

100 
ö
 = *
pSrc
++;

101 
sum
 +
ö
 * in;

102 
ö
 = *
pSrc
++;

103 
sum
 +
ö
 * in;

104 
ö
 = *
pSrc
++;

105 
sum
 +
ö
 * in;

108 
blkC¡
--;

113 
blkC¡
 = 
blockSize
 % 0x4u;

120 
blkC¡
 = 
blockSize
;

124 
blkC¡
 > 0u)

128 
ö
 = *
pSrc
++;

129 
sum
 +
ö
 * in;

132 
blkC¡
--;

136 
	`¨m_sqπ_f32
(
sum
 / (
Êﬂt32_t
Ë
blockSize
, 
pResu…
);

137 
	}
}

	@CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_rms_q15.c

41 
	~"¨m_m©h.h
"

70 
	$¨m_rms_q15
(

71 
q15_t
 * 
pSrc
,

72 
uöt32_t
 
blockSize
,

73 
q15_t
 * 
pResu…
)

75 
q63_t
 
sum
 = 0;

77 #i‚de‡
ARM_MATH_CM0_FAMILY


81 
q31_t
 
ö
;

82 
q15_t
 
ö1
;

83 
uöt32_t
 
blkC¡
;

86 
blkC¡
 = 
blockSize
 >> 2u;

90 
blkC¡
 > 0u)

94 
ö
 = *
	`__SIMD32
(
pSrc
)++;

95 
sum
 = 
	`__SMLALD
(
ö
, in, sum);

96 
ö
 = *
	`__SIMD32
(
pSrc
)++;

97 
sum
 = 
	`__SMLALD
(
ö
, in, sum);

100 
blkC¡
--;

105 
blkC¡
 = 
blockSize
 % 0x4u;

107 
blkC¡
 > 0u)

111 
ö1
 = *
pSrc
++;

112 
sum
 = 
	`__SMLALD
(
ö1
, in1, sum);

115 
blkC¡
--;

120 
	`¨m_sqπ_q15
(
	`__SSAT
((
sum
 / (
q63_t
)
blockSize
Ë>> 15, 16), 
pResu…
);

126 
q15_t
 
ö
;

127 
uöt32_t
 
blkC¡
;

130 
blkC¡
 = 
blockSize
;

132 
blkC¡
 > 0u)

136 
ö
 = *
pSrc
++;

137 
sum
 +((
q31_t
Ë
ö
 * in);

140 
blkC¡
--;

145 
	`¨m_sqπ_q15
(
	`__SSAT
((
sum
 / (
q63_t
)
blockSize
Ë>> 15, 16), 
pResu…
);

149 
	}
}

	@CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_rms_q31.c

41 
	~"¨m_m©h.h
"

73 
	$¨m_rms_q31
(

74 
q31_t
 * 
pSrc
,

75 
uöt32_t
 
blockSize
,

76 
q31_t
 * 
pResu…
)

78 
q63_t
 
sum
 = 0;

79 
q31_t
 
ö
;

80 
uöt32_t
 
blkC¡
;

82 #i‚de‡
ARM_MATH_CM0_FAMILY


86 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

89 
blkC¡
 = 
blockSize
 >> 2u;

93 
blkC¡
 > 0u)

98 
ö1
 = 
pSrc
[0];

99 
ö2
 = 
pSrc
[1];

102 
sum
 +(
q63_t
Ë
ö1
 *in1;

103 
sum
 +(
q63_t
Ë
ö2
 *in2;

106 
ö3
 = 
pSrc
[2];

107 
ö4
 = 
pSrc
[3];

110 
sum
 +(
q63_t
Ë
ö3
 *in3;

111 
sum
 +(
q63_t
Ë
ö4
 *in4;

115 
pSrc
 += 4u;

118 
blkC¡
--;

123 
blkC¡
 = 
blockSize
 % 0x4u;

128 
blkC¡
 = 
blockSize
;

132 
blkC¡
 > 0u)

136 
ö
 = *
pSrc
++;

137 
sum
 +(
q63_t
Ë
ö
 *in;

140 
blkC¡
--;

145 
	`¨m_sqπ_q31
(
	`˛ù_q63_to_q31
((
sum
 / (
q63_t
Ë
blockSize
Ë>> 31), 
pResu…
);

146 
	}
}

	@CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_std_f32.c

41 
	~"¨m_m©h.h
"

80 
	$¨m_°d_f32
(

81 
Êﬂt32_t
 * 
pSrc
,

82 
uöt32_t
 
blockSize
,

83 
Êﬂt32_t
 * 
pResu…
)

85 
Êﬂt32_t
 
sum
 = 0.0f;

86 
Êﬂt32_t
 
sumOfSqu¨es
 = 0.0f;

87 
Êﬂt32_t
 
ö
;

88 
uöt32_t
 
blkC¡
;

90 #i‚de‡
ARM_MATH_CM0_FAMILY


94 
Êﬂt32_t
 
mónOfSqu¨es
, 
món
, 
squ¨eOfMón
;

96 if(
blockSize
 == 1)

98 *
pResu…
 = 0;

103 
blkC¡
 = 
blockSize
 >> 2u;

107 
blkC¡
 > 0u)

112 
ö
 = *
pSrc
++;

113 
sum
 +
ö
;

114 
sumOfSqu¨es
 +
ö
 * in;

115 
ö
 = *
pSrc
++;

116 
sum
 +
ö
;

117 
sumOfSqu¨es
 +
ö
 * in;

118 
ö
 = *
pSrc
++;

119 
sum
 +
ö
;

120 
sumOfSqu¨es
 +
ö
 * in;

121 
ö
 = *
pSrc
++;

122 
sum
 +
ö
;

123 
sumOfSqu¨es
 +
ö
 * in;

126 
blkC¡
--;

131 
blkC¡
 = 
blockSize
 % 0x4u;

133 
blkC¡
 > 0u)

138 
ö
 = *
pSrc
++;

139 
sum
 +
ö
;

140 
sumOfSqu¨es
 +
ö
 * in;

143 
blkC¡
--;

148 
mónOfSqu¨es
 = 
sumOfSqu¨es
 / ((
Êﬂt32_t
Ë
blockSize
 - 1.0f);

151 
món
 = 
sum
 / (
Êﬂt32_t
Ë
blockSize
;

154 
squ¨eOfMón
 = (
món
 * mónË* (((
Êﬂt32_t
Ë
blockSize
) /

155 ((
Êﬂt32_t
Ë
blockSize
 - 1.0f));

158 
	`¨m_sqπ_f32
((
mónOfSqu¨es
 - 
squ¨eOfMón
), 
pResu…
);

164 
Êﬂt32_t
 
squ¨eOfSum
;

165 
Êﬂt32_t
 
v¨
;

167 if(
blockSize
 == 1)

169 *
pResu…
 = 0;

174 
blkC¡
 = 
blockSize
;

176 
blkC¡
 > 0u)

181 
ö
 = *
pSrc
++;

182 
sumOfSqu¨es
 +
ö
 * in;

187 
sum
 +
ö
;

190 
blkC¡
--;

194 
squ¨eOfSum
 = ((
sum
 * sumË/ (
Êﬂt32_t
Ë
blockSize
);

197 
v¨
 = ((
sumOfSqu¨es
 - 
squ¨eOfSum
Ë/ (
Êﬂt32_t
Ë(
blockSize
 - 1.0f));

200 
	`¨m_sqπ_f32
(
v¨
, 
pResu…
);

204 
	}
}

	@CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_std_q15.c

41 
	~"¨m_m©h.h
"

73 
	$¨m_°d_q15
(

74 
q15_t
 * 
pSrc
,

75 
uöt32_t
 
blockSize
,

76 
q15_t
 * 
pResu…
)

78 
q31_t
 
sum
 = 0;

79 
q31_t
 
mónOfSqu¨es
, 
squ¨eOfMón
;

80 
uöt32_t
 
blkC¡
;

81 
q63_t
 
sumOfSqu¨es
 = 0;

83 #i‚de‡
ARM_MATH_CM0_FAMILY


87 
q31_t
 
ö
;

88 
q15_t
 
ö1
;

90 if(
blockSize
 == 1)

92 *
pResu…
 = 0;

97 
blkC¡
 = 
blockSize
 >> 2u;

101 
blkC¡
 > 0u)

106 
ö
 = *
	`__SIMD32
(
pSrc
)++;

107 
sum
 +((
ö
 << 16) >> 16);

108 
sum
 +(
ö
 >> 16);

109 
sumOfSqu¨es
 = 
	`__SMLALD
(
ö
, in, sumOfSquares);

110 
ö
 = *
	`__SIMD32
(
pSrc
)++;

111 
sum
 +((
ö
 << 16) >> 16);

112 
sum
 +(
ö
 >> 16);

113 
sumOfSqu¨es
 = 
	`__SMLALD
(
ö
, in, sumOfSquares);

116 
blkC¡
--;

121 
blkC¡
 = 
blockSize
 % 0x4u;

123 
blkC¡
 > 0u)

128 
ö1
 = *
pSrc
++;

129 
sumOfSqu¨es
 = 
	`__SMLALD
(
ö1
, in1, sumOfSquares);

130 
sum
 +
ö1
;

133 
blkC¡
--;

138 
mónOfSqu¨es
 = (
q31_t
)(
sumOfSqu¨es
 / (
q63_t
)(
blockSize
 - 1));

141 
squ¨eOfMón
 = (
q31_t
Ë((
q63_t
)
sum
 * sum / (q63_t)(
blockSize
 * (blockSize - 1)));

145 
	`¨m_sqπ_q15
(
	`__SSAT
((
mónOfSqu¨es
 - 
squ¨eOfMón
Ë>> 15, 16u), 
pResu…
);

150 
q15_t
 
ö
;

152 if(
blockSize
 == 1)

154 *
pResu…
 = 0;

159 
blkC¡
 = 
blockSize
;

161 
blkC¡
 > 0u)

166 
ö
 = *
pSrc
++;

167 
sumOfSqu¨es
 +(
ö
 * in);

171 
sum
 +
ö
;

174 
blkC¡
--;

179 
mónOfSqu¨es
 = (
q31_t
)(
sumOfSqu¨es
 / (
q63_t
)(
blockSize
 - 1));

182 
squ¨eOfMón
 = (
q31_t
Ë((
q63_t
)
sum
 * sum / (q63_t)(
blockSize
 * (blockSize - 1)));

186 
	`¨m_sqπ_q15
(
	`__SSAT
((
mónOfSqu¨es
 - 
squ¨eOfMón
Ë>> 15, 16u), 
pResu…
);

191 
	}
}

	@CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_std_q31.c

41 
	~"¨m_m©h.h
"

78 
	$¨m_°d_q31
(

79 
q31_t
 * 
pSrc
,

80 
uöt32_t
 
blockSize
,

81 
q31_t
 * 
pResu…
)

83 
q63_t
 
sum
 = 0;

84 
q63_t
 
mónOfSqu¨es
, 
squ¨eOfMón
;

85 
q31_t
 
ö
;

86 
uöt32_t
 
blkC¡
;

87 
q63_t
 
sumOfSqu¨es
 = 0;

89 if(
blockSize
 == 1)

91 *
pResu…
 = 0;

95 #i‚de‡
ARM_MATH_CM0_FAMILY


100 
blkC¡
 = 
blockSize
 >> 2u;

104 
blkC¡
 > 0u)

109 
ö
 = *
pSrc
++ >> 8;

110 
sum
 +
ö
;

111 
sumOfSqu¨es
 +((
q63_t
Ë(
ö
) * (in));

112 
ö
 = *
pSrc
++ >> 8;

113 
sum
 +
ö
;

114 
sumOfSqu¨es
 +((
q63_t
Ë(
ö
) * (in));

115 
ö
 = *
pSrc
++ >> 8;

116 
sum
 +
ö
;

117 
sumOfSqu¨es
 +((
q63_t
Ë(
ö
) * (in));

118 
ö
 = *
pSrc
++ >> 8;

119 
sum
 +
ö
;

120 
sumOfSqu¨es
 +((
q63_t
Ë(
ö
) * (in));

123 
blkC¡
--;

128 
blkC¡
 = 
blockSize
 % 0x4u;

130 
blkC¡
 > 0u)

135 
ö
 = *
pSrc
++ >> 8;

136 
sum
 +
ö
;

137 
sumOfSqu¨es
 +((
q63_t
Ë(
ö
) * (in));

140 
blkC¡
--;

145 
mónOfSqu¨es
 = 
sumOfSqu¨es
 / (
q63_t
)(
blockSize
 - 1);

152 
blkC¡
 = 
blockSize
;

154 
blkC¡
 > 0u)

159 
ö
 = *
pSrc
++ >> 8;

160 
sumOfSqu¨es
 +((
q63_t
Ë(
ö
) * (in));

164 
sum
 +
ö
;

167 
blkC¡
--;

172 
mónOfSqu¨es
 = 
sumOfSqu¨es
 / (
q63_t
)(
blockSize
 - 1);

177 
squ¨eOfMón
 = 
sum
 * sum / (
q63_t
)(
blockSize
 * (blockSize - 1u));

180 
	`¨m_sqπ_q31
((
mónOfSqu¨es
 - 
squ¨eOfMón
Ë>> 15, 
pResu…
);

182 
	}
}

	@CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_var_f32.c

41 
	~"¨m_m©h.h
"

80 
	$¨m_v¨_f32
(

81 
Êﬂt32_t
 * 
pSrc
,

82 
uöt32_t
 
blockSize
,

83 
Êﬂt32_t
 * 
pResu…
)

86 
Êﬂt32_t
 
sum
 = 0.0f;

87 
Êﬂt32_t
 
sumOfSqu¨es
 = 0.0f;

88 
Êﬂt32_t
 
ö
;

89 
uöt32_t
 
blkC¡
;

91 #i‚de‡
ARM_MATH_CM0_FAMILY


95 
Êﬂt32_t
 
mónOfSqu¨es
, 
món
, 
squ¨eOfMón
;

97 if(
blockSize
 == 1)

99 *
pResu…
 = 0;

104 
blkC¡
 = 
blockSize
 >> 2u;

108 
blkC¡
 > 0u)

113 
ö
 = *
pSrc
++;

114 
sum
 +
ö
;

115 
sumOfSqu¨es
 +
ö
 * in;

116 
ö
 = *
pSrc
++;

117 
sum
 +
ö
;

118 
sumOfSqu¨es
 +
ö
 * in;

119 
ö
 = *
pSrc
++;

120 
sum
 +
ö
;

121 
sumOfSqu¨es
 +
ö
 * in;

122 
ö
 = *
pSrc
++;

123 
sum
 +
ö
;

124 
sumOfSqu¨es
 +
ö
 * in;

127 
blkC¡
--;

132 
blkC¡
 = 
blockSize
 % 0x4u;

134 
blkC¡
 > 0u)

139 
ö
 = *
pSrc
++;

140 
sum
 +
ö
;

141 
sumOfSqu¨es
 +
ö
 * in;

144 
blkC¡
--;

149 
mónOfSqu¨es
 = 
sumOfSqu¨es
 / ((
Êﬂt32_t
Ë
blockSize
 - 1.0f);

152 
món
 = 
sum
 / (
Êﬂt32_t
Ë
blockSize
;

155 
squ¨eOfMón
 = (
món
 * mónË* (((
Êﬂt32_t
Ë
blockSize
) /

156 ((
Êﬂt32_t
Ë
blockSize
 - 1.0f));

159 *
pResu…
 = 
mónOfSqu¨es
 - 
squ¨eOfMón
;

164 
Êﬂt32_t
 
squ¨eOfSum
;

166 if(
blockSize
 == 1)

168 *
pResu…
 = 0;

173 
blkC¡
 = 
blockSize
;

175 
blkC¡
 > 0u)

180 
ö
 = *
pSrc
++;

181 
sumOfSqu¨es
 +
ö
 * in;

186 
sum
 +
ö
;

189 
blkC¡
--;

193 
squ¨eOfSum
 = ((
sum
 * sumË/ (
Êﬂt32_t
Ë
blockSize
);

196 *
pResu…
 = ((
sumOfSqu¨es
 - 
squ¨eOfSum
Ë/ (
Êﬂt32_t
Ë(
blockSize
 - 1.0f));

200 
	}
}

	@CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_var_q15.c

41 
	~"¨m_m©h.h
"

75 
	$¨m_v¨_q15
(

76 
q15_t
 * 
pSrc
,

77 
uöt32_t
 
blockSize
,

78 
q15_t
 * 
pResu…
)

81 
q31_t
 
sum
 = 0;

82 
q31_t
 
mónOfSqu¨es
, 
squ¨eOfMón
;

83 
uöt32_t
 
blkC¡
;

84 
q63_t
 
sumOfSqu¨es
 = 0;

86 #i‚de‡
ARM_MATH_CM0_FAMILY


90 
q31_t
 
ö
;

91 
q15_t
 
ö1
;

93 if(
blockSize
 == 1)

95 *
pResu…
 = 0;

100 
blkC¡
 = 
blockSize
 >> 2u;

104 
blkC¡
 > 0u)

109 
ö
 = *
	`__SIMD32
(
pSrc
)++;

110 
sum
 +((
ö
 << 16) >> 16);

111 
sum
 +(
ö
 >> 16);

112 
sumOfSqu¨es
 = 
	`__SMLALD
(
ö
, in, sumOfSquares);

113 
ö
 = *
	`__SIMD32
(
pSrc
)++;

114 
sum
 +((
ö
 << 16) >> 16);

115 
sum
 +(
ö
 >> 16);

116 
sumOfSqu¨es
 = 
	`__SMLALD
(
ö
, in, sumOfSquares);

119 
blkC¡
--;

124 
blkC¡
 = 
blockSize
 % 0x4u;

126 
blkC¡
 > 0u)

131 
ö1
 = *
pSrc
++;

132 
sumOfSqu¨es
 = 
	`__SMLALD
(
ö1
, in1, sumOfSquares);

133 
sum
 +
ö1
;

136 
blkC¡
--;

141 
mónOfSqu¨es
 = (
q31_t
Ë(
sumOfSqu¨es
 / (
q63_t
)(
blockSize
 - 1));

144 
squ¨eOfMón
 = (
q31_t
)((
q63_t
)
sum
 * sum / (q63_t)(
blockSize
 * (blockSize - 1)));

147 *
pResu…
 = (
mónOfSqu¨es
 - 
squ¨eOfMón
) >> 15;

152 
q15_t
 
ö
;

154 if(
blockSize
 == 1)

156 *
pResu…
 = 0;

161 
blkC¡
 = 
blockSize
;

163 
blkC¡
 > 0u)

168 
ö
 = *
pSrc
++;

169 
sumOfSqu¨es
 +(
ö
 * in);

173 
sum
 +
ö
;

176 
blkC¡
--;

181 
mónOfSqu¨es
 = (
q31_t
Ë(
sumOfSqu¨es
 / (
q63_t
)(
blockSize
 - 1));

184 
squ¨eOfMón
 = (
q31_t
)((
q63_t
)
sum
 * sum / (q63_t)(
blockSize
 * (blockSize - 1)));

187 *
pResu…
 = (
mónOfSqu¨es
 - 
squ¨eOfMón
) >> 15;

191 
	}
}

	@CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_var_q31.c

41 
	~"¨m_m©h.h
"

78 
	$¨m_v¨_q31
(

79 
q31_t
 * 
pSrc
,

80 
uöt32_t
 
blockSize
,

81 
q31_t
 * 
pResu…
)

83 
q63_t
 
sum
 = 0;

84 
q63_t
 
mónOfSqu¨es
, 
squ¨eOfMón
;

85 
q31_t
 
ö
;

86 
uöt32_t
 
blkC¡
;

87 
q63_t
 
sumOfSqu¨es
 = 0;

89 if(
blockSize
 == 1)

91 *
pResu…
 = 0;

95 #i‚de‡
ARM_MATH_CM0_FAMILY


100 
blkC¡
 = 
blockSize
 >> 2u;

104 
blkC¡
 > 0u)

109 
ö
 = *
pSrc
++ >> 8;

110 
sum
 +
ö
;

111 
sumOfSqu¨es
 +((
q63_t
Ë(
ö
) * (in));

112 
ö
 = *
pSrc
++ >> 8;

113 
sum
 +
ö
;

114 
sumOfSqu¨es
 +((
q63_t
Ë(
ö
) * (in));

115 
ö
 = *
pSrc
++ >> 8;

116 
sum
 +
ö
;

117 
sumOfSqu¨es
 +((
q63_t
Ë(
ö
) * (in));

118 
ö
 = *
pSrc
++ >> 8;

119 
sum
 +
ö
;

120 
sumOfSqu¨es
 +((
q63_t
Ë(
ö
) * (in));

123 
blkC¡
--;

128 
blkC¡
 = 
blockSize
 % 0x4u;

130 
blkC¡
 > 0u)

135 
ö
 = *
pSrc
++ >> 8;

136 
sum
 +
ö
;

137 
sumOfSqu¨es
 +((
q63_t
Ë(
ö
) * (in));

140 
blkC¡
--;

145 
mónOfSqu¨es
 = 
sumOfSqu¨es
 / (
q63_t
)(
blockSize
 - 1);

152 
blkC¡
 = 
blockSize
;

154 
blkC¡
 > 0u)

159 
ö
 = *
pSrc
++ >> 8;

160 
sumOfSqu¨es
 +((
q63_t
Ë(
ö
) * (in));

164 
sum
 +
ö
;

167 
blkC¡
--;

172 
mónOfSqu¨es
 = 
sumOfSqu¨es
 / (
q63_t
)(
blockSize
 - 1);

177 
squ¨eOfMón
 = 
sum
 * sum / (
q63_t
)(
blockSize
 * (blockSize - 1u));

181 *
pResu…
 = (
mónOfSqu¨es
 - 
squ¨eOfMón
) >> 15;

183 
	}
}

	@CMSIS/DSP_Lib/Source/SupportFunctions/arm_copy_f32.c

41 
	~"¨m_m©h.h
"

74 
	$¨m_c›y_f32
(

75 
Êﬂt32_t
 * 
pSrc
,

76 
Êﬂt32_t
 * 
pD°
,

77 
uöt32_t
 
blockSize
)

79 
uöt32_t
 
blkC¡
;

81 #i‚de‡
ARM_MATH_CM0_FAMILY


84 
Êﬂt32_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

87 
blkC¡
 = 
blockSize
 >> 2u;

91 
blkC¡
 > 0u)

95 
ö1
 = *
pSrc
++;

96 
ö2
 = *
pSrc
++;

97 
ö3
 = *
pSrc
++;

98 
ö4
 = *
pSrc
++;

100 *
pD°
++ = 
ö1
;

101 *
pD°
++ = 
ö2
;

102 *
pD°
++ = 
ö3
;

103 *
pD°
++ = 
ö4
;

106 
blkC¡
--;

111 
blkC¡
 = 
blockSize
 % 0x4u;

118 
blkC¡
 = 
blockSize
;

122 
blkC¡
 > 0u)

126 *
pD°
++ = *
pSrc
++;

129 
blkC¡
--;

131 
	}
}

	@CMSIS/DSP_Lib/Source/SupportFunctions/arm_copy_q15.c

41 
	~"¨m_m©h.h
"

60 
	$¨m_c›y_q15
(

61 
q15_t
 * 
pSrc
,

62 
q15_t
 * 
pD°
,

63 
uöt32_t
 
blockSize
)

65 
uöt32_t
 
blkC¡
;

67 #i‚de‡
ARM_MATH_CM0_FAMILY


72 
blkC¡
 = 
blockSize
 >> 2u;

76 
blkC¡
 > 0u)

80 *
	`__SIMD32
(
pD°
)++ = *__SIMD32(
pSrc
)++;

81 *
	`__SIMD32
(
pD°
)++ = *__SIMD32(
pSrc
)++;

84 
blkC¡
--;

89 
blkC¡
 = 
blockSize
 % 0x4u;

97 
blkC¡
 = 
blockSize
;

101 
blkC¡
 > 0u)

105 *
pD°
++ = *
pSrc
++;

108 
blkC¡
--;

110 
	}
}

	@CMSIS/DSP_Lib/Source/SupportFunctions/arm_copy_q31.c

41 
	~"¨m_m©h.h
"

61 
	$¨m_c›y_q31
(

62 
q31_t
 * 
pSrc
,

63 
q31_t
 * 
pD°
,

64 
uöt32_t
 
blockSize
)

66 
uöt32_t
 
blkC¡
;

69 #i‚de‡
ARM_MATH_CM0_FAMILY


72 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

75 
blkC¡
 = 
blockSize
 >> 2u;

79 
blkC¡
 > 0u)

83 
ö1
 = *
pSrc
++;

84 
ö2
 = *
pSrc
++;

85 
ö3
 = *
pSrc
++;

86 
ö4
 = *
pSrc
++;

88 *
pD°
++ = 
ö1
;

89 *
pD°
++ = 
ö2
;

90 *
pD°
++ = 
ö3
;

91 *
pD°
++ = 
ö4
;

94 
blkC¡
--;

99 
blkC¡
 = 
blockSize
 % 0x4u;

106 
blkC¡
 = 
blockSize
;

110 
blkC¡
 > 0u)

114 *
pD°
++ = *
pSrc
++;

117 
blkC¡
--;

119 
	}
}

	@CMSIS/DSP_Lib/Source/SupportFunctions/arm_copy_q7.c

41 
	~"¨m_m©h.h
"

61 
	$¨m_c›y_q7
(

62 
q7_t
 * 
pSrc
,

63 
q7_t
 * 
pD°
,

64 
uöt32_t
 
blockSize
)

66 
uöt32_t
 
blkC¡
;

68 #i‚de‡
ARM_MATH_CM0_FAMILY


73 
blkC¡
 = 
blockSize
 >> 2u;

77 
blkC¡
 > 0u)

82 *
	`__SIMD32
(
pD°
)++ = *__SIMD32(
pSrc
)++;

85 
blkC¡
--;

90 
blkC¡
 = 
blockSize
 % 0x4u;

97 
blkC¡
 = 
blockSize
;

102 
blkC¡
 > 0u)

106 *
pD°
++ = *
pSrc
++;

109 
blkC¡
--;

111 
	}
}

	@CMSIS/DSP_Lib/Source/SupportFunctions/arm_fill_f32.c

41 
	~"¨m_m©h.h
"

74 
	$¨m_fûl_f32
(

75 
Êﬂt32_t
 
vÆue
,

76 
Êﬂt32_t
 * 
pD°
,

77 
uöt32_t
 
blockSize
)

79 
uöt32_t
 
blkC¡
;

81 #i‚de‡
ARM_MATH_CM0_FAMILY


84 
Êﬂt32_t
 
ö1
 = 
vÆue
;

85 
Êﬂt32_t
 
ö2
 = 
vÆue
;

86 
Êﬂt32_t
 
ö3
 = 
vÆue
;

87 
Êﬂt32_t
 
ö4
 = 
vÆue
;

90 
blkC¡
 = 
blockSize
 >> 2u;

94 
blkC¡
 > 0u)

98 *
pD°
++ = 
ö1
;

99 *
pD°
++ = 
ö2
;

100 *
pD°
++ = 
ö3
;

101 *
pD°
++ = 
ö4
;

104 
blkC¡
--;

109 
blkC¡
 = 
blockSize
 % 0x4u;

116 
blkC¡
 = 
blockSize
;

121 
blkC¡
 > 0u)

125 *
pD°
++ = 
vÆue
;

128 
blkC¡
--;

130 
	}
}

	@CMSIS/DSP_Lib/Source/SupportFunctions/arm_fill_q15.c

41 
	~"¨m_m©h.h
"

61 
	$¨m_fûl_q15
(

62 
q15_t
 
vÆue
,

63 
q15_t
 * 
pD°
,

64 
uöt32_t
 
blockSize
)

66 
uöt32_t
 
blkC¡
;

68 #i‚de‡
ARM_MATH_CM0_FAMILY


72 
q31_t
 
∑ckedVÆue
;

76 
blkC¡
 = 
blockSize
 >> 2u;

79 
∑ckedVÆue
 = 
	`__PKHBT
(
vÆue
, value, 16u);

83 
blkC¡
 > 0u)

87 *
	`__SIMD32
(
pD°
)++ = 
∑ckedVÆue
;

88 *
	`__SIMD32
(
pD°
)++ = 
∑ckedVÆue
;

91 
blkC¡
--;

96 
blkC¡
 = 
blockSize
 % 0x4u;

103 
blkC¡
 = 
blockSize
;

107 
blkC¡
 > 0u)

111 *
pD°
++ = 
vÆue
;

114 
blkC¡
--;

116 
	}
}

	@CMSIS/DSP_Lib/Source/SupportFunctions/arm_fill_q31.c

41 
	~"¨m_m©h.h
"

61 
	$¨m_fûl_q31
(

62 
q31_t
 
vÆue
,

63 
q31_t
 * 
pD°
,

64 
uöt32_t
 
blockSize
)

66 
uöt32_t
 
blkC¡
;

69 #i‚de‡
ARM_MATH_CM0_FAMILY


72 
q31_t
 
ö1
 = 
vÆue
;

73 
q31_t
 
ö2
 = 
vÆue
;

74 
q31_t
 
ö3
 = 
vÆue
;

75 
q31_t
 
ö4
 = 
vÆue
;

78 
blkC¡
 = 
blockSize
 >> 2u;

82 
blkC¡
 > 0u)

86 *
pD°
++ = 
ö1
;

87 *
pD°
++ = 
ö2
;

88 *
pD°
++ = 
ö3
;

89 *
pD°
++ = 
ö4
;

92 
blkC¡
--;

97 
blkC¡
 = 
blockSize
 % 0x4u;

104 
blkC¡
 = 
blockSize
;

108 
blkC¡
 > 0u)

112 *
pD°
++ = 
vÆue
;

115 
blkC¡
--;

117 
	}
}

	@CMSIS/DSP_Lib/Source/SupportFunctions/arm_fill_q7.c

41 
	~"¨m_m©h.h
"

61 
	$¨m_fûl_q7
(

62 
q7_t
 
vÆue
,

63 
q7_t
 * 
pD°
,

64 
uöt32_t
 
blockSize
)

66 
uöt32_t
 
blkC¡
;

68 #i‚de‡
ARM_MATH_CM0_FAMILY


72 
q31_t
 
∑ckedVÆue
;

75 
blkC¡
 = 
blockSize
 >> 2u;

78 
∑ckedVÆue
 = 
	`__PACKq7
(
vÆue
, value, value, value);

82 
blkC¡
 > 0u)

86 *
	`__SIMD32
(
pD°
)++ = 
∑ckedVÆue
;

89 
blkC¡
--;

94 
blkC¡
 = 
blockSize
 % 0x4u;

101 
blkC¡
 = 
blockSize
;

105 
blkC¡
 > 0u)

109 *
pD°
++ = 
vÆue
;

112 
blkC¡
--;

114 
	}
}

	@CMSIS/DSP_Lib/Source/SupportFunctions/arm_float_to_q15.c

41 
	~"¨m_m©h.h
"

76 
	$¨m_Êﬂt_to_q15
(

77 
Êﬂt32_t
 * 
pSrc
,

78 
q15_t
 * 
pD°
,

79 
uöt32_t
 
blockSize
)

81 
Êﬂt32_t
 *
pIn
 = 
pSrc
;

82 
uöt32_t
 
blkC¡
;

84 #ifde‡
ARM_MATH_ROUNDING


86 
Êﬂt32_t
 
ö
;

90 #i‚de‡
ARM_MATH_CM0_FAMILY


95 
blkC¡
 = 
blockSize
 >> 2u;

99 
blkC¡
 > 0u)

102 #ifde‡
ARM_MATH_ROUNDING


105 
ö
 = *
pIn
++;

106 
ö
 = (in * 32768.0f);

107 
ö
 += in > 0.0f ? 0.5f : -0.5f;

108 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
q31_t
Ë(
ö
), 16));

110 
ö
 = *
pIn
++;

111 
ö
 = (in * 32768.0f);

112 
ö
 += in > 0.0f ? 0.5f : -0.5f;

113 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
q31_t
Ë(
ö
), 16));

115 
ö
 = *
pIn
++;

116 
ö
 = (in * 32768.0f);

117 
ö
 += in > 0.0f ? 0.5f : -0.5f;

118 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
q31_t
Ë(
ö
), 16));

120 
ö
 = *
pIn
++;

121 
ö
 = (in * 32768.0f);

122 
ö
 += in > 0.0f ? 0.5f : -0.5f;

123 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
q31_t
Ë(
ö
), 16));

129 *
pD°
++ = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë(*
pIn
++ * 32768.0f), 16);

130 *
pD°
++ = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë(*
pIn
++ * 32768.0f), 16);

131 *
pD°
++ = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë(*
pIn
++ * 32768.0f), 16);

132 *
pD°
++ = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë(*
pIn
++ * 32768.0f), 16);

137 
blkC¡
--;

142 
blkC¡
 = 
blockSize
 % 0x4u;

144 
blkC¡
 > 0u)

147 #ifde‡
ARM_MATH_ROUNDING


150 
ö
 = *
pIn
++;

151 
ö
 = (in * 32768.0f);

152 
ö
 += in > 0.0f ? 0.5f : -0.5f;

153 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
q31_t
Ë(
ö
), 16));

159 *
pD°
++ = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë(*
pIn
++ * 32768.0f), 16);

164 
blkC¡
--;

173 
blkC¡
 = 
blockSize
;

175 
blkC¡
 > 0u)

178 #ifde‡
ARM_MATH_ROUNDING


181 
ö
 = *
pIn
++;

182 
ö
 = (in * 32768.0f);

183 
ö
 += in > 0 ? 0.5f : -0.5f;

184 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
q31_t
Ë(
ö
), 16));

190 *
pD°
++ = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë(*
pIn
++ * 32768.0f), 16);

195 
blkC¡
--;

200 
	}
}

	@CMSIS/DSP_Lib/Source/SupportFunctions/arm_float_to_q31.c

41 
	~"¨m_m©h.h
"

80 
	$¨m_Êﬂt_to_q31
(

81 
Êﬂt32_t
 * 
pSrc
,

82 
q31_t
 * 
pD°
,

83 
uöt32_t
 
blockSize
)

85 
Êﬂt32_t
 *
pIn
 = 
pSrc
;

86 
uöt32_t
 
blkC¡
;

88 #ifde‡
ARM_MATH_ROUNDING


90 
Êﬂt32_t
 
ö
;

94 #i‚de‡
ARM_MATH_CM0_FAMILY


99 
blkC¡
 = 
blockSize
 >> 2u;

103 
blkC¡
 > 0u)

106 #ifde‡
ARM_MATH_ROUNDING


110 
ö
 = *
pIn
++;

111 
ö
 = (in * 2147483648.0f);

112 
ö
 += in > 0.0f ? 0.5f : -0.5f;

113 *
pD°
++ = 
	`˛ù_q63_to_q31
((
q63_t
Ë(
ö
));

115 
ö
 = *
pIn
++;

116 
ö
 = (in * 2147483648.0f);

117 
ö
 += in > 0.0f ? 0.5f : -0.5f;

118 *
pD°
++ = 
	`˛ù_q63_to_q31
((
q63_t
Ë(
ö
));

120 
ö
 = *
pIn
++;

121 
ö
 = (in * 2147483648.0f);

122 
ö
 += in > 0.0f ? 0.5f : -0.5f;

123 *
pD°
++ = 
	`˛ù_q63_to_q31
((
q63_t
Ë(
ö
));

125 
ö
 = *
pIn
++;

126 
ö
 = (in * 2147483648.0f);

127 
ö
 += in > 0.0f ? 0.5f : -0.5f;

128 *
pD°
++ = 
	`˛ù_q63_to_q31
((
q63_t
Ë(
ö
));

134 *
pD°
++ = 
	`˛ù_q63_to_q31
((
q63_t
Ë(*
pIn
++ * 2147483648.0f));

135 *
pD°
++ = 
	`˛ù_q63_to_q31
((
q63_t
Ë(*
pIn
++ * 2147483648.0f));

136 *
pD°
++ = 
	`˛ù_q63_to_q31
((
q63_t
Ë(*
pIn
++ * 2147483648.0f));

137 *
pD°
++ = 
	`˛ù_q63_to_q31
((
q63_t
Ë(*
pIn
++ * 2147483648.0f));

142 
blkC¡
--;

147 
blkC¡
 = 
blockSize
 % 0x4u;

149 
blkC¡
 > 0u)

152 #ifde‡
ARM_MATH_ROUNDING


156 
ö
 = *
pIn
++;

157 
ö
 = (in * 2147483648.0f);

158 
ö
 += in > 0.0f ? 0.5f : -0.5f;

159 *
pD°
++ = 
	`˛ù_q63_to_q31
((
q63_t
Ë(
ö
));

165 *
pD°
++ = 
	`˛ù_q63_to_q31
((
q63_t
Ë(*
pIn
++ * 2147483648.0f));

170 
blkC¡
--;

179 
blkC¡
 = 
blockSize
;

181 
blkC¡
 > 0u)

184 #ifde‡
ARM_MATH_ROUNDING


188 
ö
 = *
pIn
++;

189 
ö
 = (in * 2147483648.0f);

190 
ö
 += in > 0 ? 0.5f : -0.5f;

191 *
pD°
++ = 
	`˛ù_q63_to_q31
((
q63_t
Ë(
ö
));

197 *
pD°
++ = 
	`˛ù_q63_to_q31
((
q63_t
Ë(*
pIn
++ * 2147483648.0f));

202 
blkC¡
--;

207 
	}
}

	@CMSIS/DSP_Lib/Source/SupportFunctions/arm_float_to_q7.c

41 
	~"¨m_m©h.h
"

75 
	$¨m_Êﬂt_to_q7
(

76 
Êﬂt32_t
 * 
pSrc
,

77 
q7_t
 * 
pD°
,

78 
uöt32_t
 
blockSize
)

80 
Êﬂt32_t
 *
pIn
 = 
pSrc
;

81 
uöt32_t
 
blkC¡
;

83 #ifde‡
ARM_MATH_ROUNDING


85 
Êﬂt32_t
 
ö
;

89 #i‚de‡
ARM_MATH_CM0_FAMILY


94 
blkC¡
 = 
blockSize
 >> 2u;

98 
blkC¡
 > 0u)

101 #ifde‡
ARM_MATH_ROUNDING


104 
ö
 = *
pIn
++;

105 
ö
 = (in * 128);

106 
ö
 += in > 0.0f ? 0.5f : -0.5f;

107 *
pD°
++ = (
q7_t
Ë(
	`__SSAT
((
q15_t
Ë(
ö
), 8));

109 
ö
 = *
pIn
++;

110 
ö
 = (in * 128);

111 
ö
 += in > 0.0f ? 0.5f : -0.5f;

112 *
pD°
++ = (
q7_t
Ë(
	`__SSAT
((
q15_t
Ë(
ö
), 8));

114 
ö
 = *
pIn
++;

115 
ö
 = (in * 128);

116 
ö
 += in > 0.0f ? 0.5f : -0.5f;

117 *
pD°
++ = (
q7_t
Ë(
	`__SSAT
((
q15_t
Ë(
ö
), 8));

119 
ö
 = *
pIn
++;

120 
ö
 = (in * 128);

121 
ö
 += in > 0.0f ? 0.5f : -0.5f;

122 *
pD°
++ = (
q7_t
Ë(
	`__SSAT
((
q15_t
Ë(
ö
), 8));

128 *
pD°
++ = 
	`__SSAT
((
q31_t
Ë(*
pIn
++ * 128.0f), 8);

129 *
pD°
++ = 
	`__SSAT
((
q31_t
Ë(*
pIn
++ * 128.0f), 8);

130 *
pD°
++ = 
	`__SSAT
((
q31_t
Ë(*
pIn
++ * 128.0f), 8);

131 *
pD°
++ = 
	`__SSAT
((
q31_t
Ë(*
pIn
++ * 128.0f), 8);

136 
blkC¡
--;

141 
blkC¡
 = 
blockSize
 % 0x4u;

143 
blkC¡
 > 0u)

146 #ifde‡
ARM_MATH_ROUNDING


149 
ö
 = *
pIn
++;

150 
ö
 = (in * 128);

151 
ö
 += in > 0.0f ? 0.5f : -0.5f;

152 *
pD°
++ = (
q7_t
Ë(
	`__SSAT
((
q15_t
Ë(
ö
), 8));

158 *
pD°
++ = 
	`__SSAT
((
q31_t
Ë(*
pIn
++ * 128.0f), 8);

163 
blkC¡
--;

173 
blkC¡
 = 
blockSize
;

175 
blkC¡
 > 0u)

177 #ifde‡
ARM_MATH_ROUNDING


180 
ö
 = *
pIn
++;

181 
ö
 = (in * 128.0f);

182 
ö
 += in > 0 ? 0.5f : -0.5f;

183 *
pD°
++ = (
q7_t
Ë(
	`__SSAT
((
q31_t
Ë(
ö
), 8));

189 *
pD°
++ = (
q7_t
Ë
	`__SSAT
((
q31_t
Ë(*
pIn
++ * 128.0f), 8);

194 
blkC¡
--;

199 
	}
}

	@CMSIS/DSP_Lib/Source/SupportFunctions/arm_q15_to_float.c

41 
	~"¨m_m©h.h
"

77 
	$¨m_q15_to_Êﬂt
(

78 
q15_t
 * 
pSrc
,

79 
Êﬂt32_t
 * 
pD°
,

80 
uöt32_t
 
blockSize
)

82 
q15_t
 *
pIn
 = 
pSrc
;

83 
uöt32_t
 
blkC¡
;

86 #i‚de‡
ARM_MATH_CM0_FAMILY


91 
blkC¡
 = 
blockSize
 >> 2u;

95 
blkC¡
 > 0u)

99 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 32768.0f);

100 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 32768.0f);

101 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 32768.0f);

102 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 32768.0f);

105 
blkC¡
--;

110 
blkC¡
 = 
blockSize
 % 0x4u;

117 
blkC¡
 = 
blockSize
;

121 
blkC¡
 > 0u)

125 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 32768.0f);

128 
blkC¡
--;

130 
	}
}

	@CMSIS/DSP_Lib/Source/SupportFunctions/arm_q15_to_q31.c

41 
	~"¨m_m©h.h
"

70 
	$¨m_q15_to_q31
(

71 
q15_t
 * 
pSrc
,

72 
q31_t
 * 
pD°
,

73 
uöt32_t
 
blockSize
)

75 
q15_t
 *
pIn
 = 
pSrc
;

76 
uöt32_t
 
blkC¡
;

78 #i‚de‡
ARM_MATH_CM0_FAMILY


81 
q31_t
 
ö1
, 
ö2
;

82 
q31_t
 
out1
, 
out2
, 
out3
, 
out4
;

85 
blkC¡
 = 
blockSize
 >> 2u;

89 
blkC¡
 > 0u)

93 
ö1
 = *
	`__SIMD32
(
pIn
)++;

94 
ö2
 = *
	`__SIMD32
(
pIn
)++;

96 #i‚de‡
ARM_MATH_BIG_ENDIAN


99 
out1
 = 
ö1
 << 16u;

101 
out2
 = 
ö1
 & 0xFFFF0000;

103 
out3
 = 
ö2
 << 16u;

105 
out4
 = 
ö2
 & 0xFFFF0000;

110 
out1
 = 
ö1
 & 0xFFFF0000;

112 
out2
 = 
ö1
 << 16u;

114 
out3
 = 
ö2
 & 0xFFFF0000;

116 
out4
 = 
ö2
 << 16u;

120 *
pD°
++ = 
out1
;

121 *
pD°
++ = 
out2
;

122 *
pD°
++ = 
out3
;

123 *
pD°
++ = 
out4
;

126 
blkC¡
--;

131 
blkC¡
 = 
blockSize
 % 0x4u;

138 
blkC¡
 = 
blockSize
;

142 
blkC¡
 > 0u)

146 *
pD°
++ = (
q31_t
Ë* 
pIn
++ << 16;

149 
blkC¡
--;

152 
	}
}

	@CMSIS/DSP_Lib/Source/SupportFunctions/arm_q15_to_q7.c

41 
	~"¨m_m©h.h
"

71 
	$¨m_q15_to_q7
(

72 
q15_t
 * 
pSrc
,

73 
q7_t
 * 
pD°
,

74 
uöt32_t
 
blockSize
)

76 
q15_t
 *
pIn
 = 
pSrc
;

77 
uöt32_t
 
blkC¡
;

79 #i‚de‡
ARM_MATH_CM0_FAMILY


82 
q31_t
 
ö1
, 
ö2
;

83 
q31_t
 
out1
, 
out2
;

86 
blkC¡
 = 
blockSize
 >> 2u;

90 
blkC¡
 > 0u)

94 
ö1
 = *
	`__SIMD32
(
pIn
)++;

95 
ö2
 = *
	`__SIMD32
(
pIn
)++;

97 #i‚de‡
ARM_MATH_BIG_ENDIAN


99 
out1
 = 
	`__PKHTB
(
ö2
, 
ö1
, 16);

100 
out2
 = 
	`__PKHBT
(
ö2
, 
ö1
, 16);

104 
out1
 = 
	`__PKHTB
(
ö1
, 
ö2
, 16);

105 
out2
 = 
	`__PKHBT
(
ö1
, 
ö2
, 16);

110 
out2
 = ((
uöt32_t
) out2 << 8) | ((uint32_t) out2 >> 24);

113 
out1
 = out1 & 0xFF00FF00;

115 
out2
 = out2 & 0x00FF00FF;

118 
out1
 = out1 | 
out2
;

121 *
	`__SIMD32
(
pD°
)++ = 
out1
;

124 
blkC¡
--;

129 
blkC¡
 = 
blockSize
 % 0x4u;

136 
blkC¡
 = 
blockSize
;

140 
blkC¡
 > 0u)

144 *
pD°
++ = (
q7_t
Ë(*
pIn
++ >> 8);

147 
blkC¡
--;

150 
	}
}

	@CMSIS/DSP_Lib/Source/SupportFunctions/arm_q31_to_float.c

41 
	~"¨m_m©h.h
"

74 
	$¨m_q31_to_Êﬂt
(

75 
q31_t
 * 
pSrc
,

76 
Êﬂt32_t
 * 
pD°
,

77 
uöt32_t
 
blockSize
)

79 
q31_t
 *
pIn
 = 
pSrc
;

80 
uöt32_t
 
blkC¡
;

83 #i‚de‡
ARM_MATH_CM0_FAMILY


88 
blkC¡
 = 
blockSize
 >> 2u;

92 
blkC¡
 > 0u)

96 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 2147483648.0f);

97 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 2147483648.0f);

98 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 2147483648.0f);

99 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 2147483648.0f);

102 
blkC¡
--;

107 
blkC¡
 = 
blockSize
 % 0x4u;

114 
blkC¡
 = 
blockSize
;

118 
blkC¡
 > 0u)

122 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 2147483648.0f);

125 
blkC¡
--;

127 
	}
}

	@CMSIS/DSP_Lib/Source/SupportFunctions/arm_q31_to_q15.c

41 
	~"¨m_m©h.h
"

70 
	$¨m_q31_to_q15
(

71 
q31_t
 * 
pSrc
,

72 
q15_t
 * 
pD°
,

73 
uöt32_t
 
blockSize
)

75 
q31_t
 *
pIn
 = 
pSrc
;

76 
uöt32_t
 
blkC¡
;

78 #i‚de‡
ARM_MATH_CM0_FAMILY


81 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

82 
q31_t
 
out1
, 
out2
;

85 
blkC¡
 = 
blockSize
 >> 2u;

89 
blkC¡
 > 0u)

93 
ö1
 = *
pIn
++;

94 
ö2
 = *
pIn
++;

95 
ö3
 = *
pIn
++;

96 
ö4
 = *
pIn
++;

99 #i‚de‡
ARM_MATH_BIG_ENDIAN


101 
out1
 = 
	`__PKHTB
(
ö2
, 
ö1
, 16);

102 
out2
 = 
	`__PKHTB
(
ö4
, 
ö3
, 16);

106 
out1
 = 
	`__PKHTB
(
ö1
, 
ö2
, 16);

107 
out2
 = 
	`__PKHTB
(
ö3
, 
ö4
, 16);

111 *
	`__SIMD32
(
pD°
)++ = 
out1
;

112 *
	`__SIMD32
(
pD°
)++ = 
out2
;

115 
blkC¡
--;

120 
blkC¡
 = 
blockSize
 % 0x4u;

127 
blkC¡
 = 
blockSize
;

131 
blkC¡
 > 0u)

135 *
pD°
++ = (
q15_t
Ë(*
pIn
++ >> 16);

138 
blkC¡
--;

141 
	}
}

	@CMSIS/DSP_Lib/Source/SupportFunctions/arm_q31_to_q7.c

41 
	~"¨m_m©h.h
"

70 
	$¨m_q31_to_q7
(

71 
q31_t
 * 
pSrc
,

72 
q7_t
 * 
pD°
,

73 
uöt32_t
 
blockSize
)

75 
q31_t
 *
pIn
 = 
pSrc
;

76 
uöt32_t
 
blkC¡
;

78 #i‚de‡
ARM_MATH_CM0_FAMILY


81 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

82 
q7_t
 
out1
, 
out2
, 
out3
, 
out4
;

85 
blkC¡
 = 
blockSize
 >> 2u;

89 
blkC¡
 > 0u)

93 
ö1
 = *
pIn
++;

94 
ö2
 = *
pIn
++;

95 
ö3
 = *
pIn
++;

96 
ö4
 = *
pIn
++;

98 
out1
 = (
q7_t
Ë(
ö1
 >> 24);

99 
out2
 = (
q7_t
Ë(
ö2
 >> 24);

100 
out3
 = (
q7_t
Ë(
ö3
 >> 24);

101 
out4
 = (
q7_t
Ë(
ö4
 >> 24);

103 *
	`__SIMD32
(
pD°
)++ = 
	`__PACKq7
(
out1
, 
out2
, 
out3
, 
out4
);

106 
blkC¡
--;

111 
blkC¡
 = 
blockSize
 % 0x4u;

118 
blkC¡
 = 
blockSize
;

122 
blkC¡
 > 0u)

126 *
pD°
++ = (
q7_t
Ë(*
pIn
++ >> 24);

129 
blkC¡
--;

132 
	}
}

	@CMSIS/DSP_Lib/Source/SupportFunctions/arm_q7_to_float.c

41 
	~"¨m_m©h.h
"

74 
	$¨m_q7_to_Êﬂt
(

75 
q7_t
 * 
pSrc
,

76 
Êﬂt32_t
 * 
pD°
,

77 
uöt32_t
 
blockSize
)

79 
q7_t
 *
pIn
 = 
pSrc
;

80 
uöt32_t
 
blkC¡
;

83 #i‚de‡
ARM_MATH_CM0_FAMILY


88 
blkC¡
 = 
blockSize
 >> 2u;

92 
blkC¡
 > 0u)

96 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 128.0f);

97 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 128.0f);

98 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 128.0f);

99 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 128.0f);

102 
blkC¡
--;

107 
blkC¡
 = 
blockSize
 % 0x4u;

114 
blkC¡
 = 
blockSize
;

118 
blkC¡
 > 0u)

122 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 128.0f);

125 
blkC¡
--;

127 
	}
}

	@CMSIS/DSP_Lib/Source/SupportFunctions/arm_q7_to_q15.c

41 
	~"¨m_m©h.h
"

73 
	$¨m_q7_to_q15
(

74 
q7_t
 * 
pSrc
,

75 
q15_t
 * 
pD°
,

76 
uöt32_t
 
blockSize
)

78 
q7_t
 *
pIn
 = 
pSrc
;

79 
uöt32_t
 
blkC¡
;

81 #i‚de‡
ARM_MATH_CM0_FAMILY


82 
q31_t
 
ö
;

83 
q31_t
 
ö1
, 
ö2
;

84 
q31_t
 
out1
, 
out2
;

89 
blkC¡
 = 
blockSize
 >> 2u;

93 
blkC¡
 > 0u)

97 
ö
 = *
	`__SIMD32
(
pIn
)++;

100 
ö1
 = 
	`__SXTB16
(
	`__ROR
(
ö
, 8));

103 
ö2
 = 
	`__SXTB16
(
ö
);

105 
ö1
 = in1 << 8u;

106 
ö2
 = in2 << 8u;

108 
ö1
 = in1 & 0xFF00FF00;

109 
ö2
 = in2 & 0xFF00FF00;

111 #i‚de‡
ARM_MATH_BIG_ENDIAN


113 
out2
 = 
	`__PKHTB
(
ö1
, 
ö2
, 16);

114 
out1
 = 
	`__PKHBT
(
ö2
, 
ö1
, 16);

118 
out1
 = 
	`__PKHTB
(
ö1
, 
ö2
, 16);

119 
out2
 = 
	`__PKHBT
(
ö2
, 
ö1
, 16);

123 *
	`__SIMD32
(
pD°
)++ = 
out1
;

124 *
	`__SIMD32
(
pD°
)++ = 
out2
;

127 
blkC¡
--;

132 
blkC¡
 = 
blockSize
 % 0x4u;

139 
blkC¡
 = 
blockSize
;

143 
blkC¡
 > 0u)

147 *
pD°
++ = (
q15_t
Ë* 
pIn
++ << 8;

150 
blkC¡
--;

153 
	}
}

	@CMSIS/DSP_Lib/Source/SupportFunctions/arm_q7_to_q31.c

41 
	~"¨m_m©h.h
"

70 
	$¨m_q7_to_q31
(

71 
q7_t
 * 
pSrc
,

72 
q31_t
 * 
pD°
,

73 
uöt32_t
 
blockSize
)

75 
q7_t
 *
pIn
 = 
pSrc
;

76 
uöt32_t
 
blkC¡
;

78 #i‚de‡
ARM_MATH_CM0_FAMILY


80 
q31_t
 
ö
;

85 
blkC¡
 = 
blockSize
 >> 2u;

89 
blkC¡
 > 0u)

93 
ö
 = *
	`__SIMD32
(
pIn
)++;

95 #i‚de‡
ARM_MATH_BIG_ENDIAN


97 *
pD°
++ = (
	`__ROR
(
ö
, 8)) & 0xFF000000;

98 *
pD°
++ = (
	`__ROR
(
ö
, 16)) & 0xFF000000;

99 *
pD°
++ = (
	`__ROR
(
ö
, 24)) & 0xFF000000;

100 *
pD°
++ = (
ö
 & 0xFF000000);

104 *
pD°
++ = (
ö
 & 0xFF000000);

105 *
pD°
++ = (
	`__ROR
(
ö
, 24)) & 0xFF000000;

106 *
pD°
++ = (
	`__ROR
(
ö
, 16)) & 0xFF000000;

107 *
pD°
++ = (
	`__ROR
(
ö
, 8)) & 0xFF000000;

112 
blkC¡
--;

117 
blkC¡
 = 
blockSize
 % 0x4u;

124 
blkC¡
 = 
blockSize
;

128 
blkC¡
 > 0u)

132 *
pD°
++ = (
q31_t
Ë* 
pIn
++ << 24;

135 
blkC¡
--;

138 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_bitreversal.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

53 
	$¨m_bôªvîßl_f32
(

54 
Êﬂt32_t
 * 
pSrc
,

55 
uöt16_t
 
f·Size
,

56 
uöt16_t
 
bôRevFa˘‹
,

57 
uöt16_t
 * 
pBôRevTab
)

59 
uöt16_t
 
f·LíBy2
, 
f·LíBy2p1
;

60 
uöt16_t
 
i
, 
j
;

61 
Êﬂt32_t
 
ö
;

64 
j
 = 0u;

65 
f·LíBy2
 = 
f·Size
 >> 1u;

66 
f·LíBy2p1
 = (
f·Size
 >> 1u) + 1u;

69 
i
 = 0u; i <(
f·LíBy2
 - 2u); i += 2u)

71 if(
i
 < 
j
)

74 
ö
 = 
pSrc
[2u * 
i
];

75 
pSrc
[2u * 
i
] =ÖSrc[2u * 
j
];

76 
pSrc
[2u * 
j
] = 
ö
;

79 
ö
 = 
pSrc
[(2u * 
i
) + 1u];

80 
pSrc
[(2u * 
i
Ë+ 1u] =ÖSrc[(2u * 
j
) + 1u];

81 
pSrc
[(2u * 
j
Ë+ 1u] = 
ö
;

84 
ö
 = 
pSrc
[2u * (
i
 + 
f·LíBy2p1
)];

85 
pSrc
[2u * (
i
 + 
f·LíBy2p1
)] =ÖSrc[2u * (
j
 + fftLenBy2p1)];

86 
pSrc
[2u * (
j
 + 
f·LíBy2p1
)] = 
ö
;

89 
ö
 = 
pSrc
[(2u * (
i
 + 
f·LíBy2p1
)) + 1u];

90 
pSrc
[(2u * (
i
 + 
f·LíBy2p1
)) + 1u] =

91 
pSrc
[(2u * (
j
 + 
f·LíBy2p1
)) + 1u];

92 
pSrc
[(2u * (
j
 + 
f·LíBy2p1
)Ë+ 1u] = 
ö
;

97 
ö
 = 
pSrc
[2u * (
i
 + 1u)];

98 
pSrc
[2u * (
i
 + 1u)] =ÖSrc[2u * (
j
 + 
f·LíBy2
)];

99 
pSrc
[2u * (
j
 + 
f·LíBy2
)] = 
ö
;

102 
ö
 = 
pSrc
[(2u * (
i
 + 1u)) + 1u];

103 
pSrc
[(2u * (
i
 + 1u)Ë+ 1u] =ÖSrc[(2u * (
j
 + 
f·LíBy2
)) + 1u];

104 
pSrc
[(2u * (
j
 + 
f·LíBy2
)Ë+ 1u] = 
ö
;

107 
j
 = *
pBôRevTab
;

110 
pBôRevTab
 +
bôRevFa˘‹
;

112 
	}
}

125 
	$¨m_bôªvîßl_q31
(

126 
q31_t
 * 
pSrc
,

127 
uöt32_t
 
f·Lí
,

128 
uöt16_t
 
bôRevFa˘‹
,

129 
uöt16_t
 * 
pBôRevTabÀ
)

131 
uöt32_t
 
f·LíBy2
, 
f·LíBy2p1
, 
i
, 
j
;

132 
q31_t
 
ö
;

135 
j
 = 0u;

136 
f·LíBy2
 = 
f·Lí
 / 2u;

137 
f·LíBy2p1
 = (
f·Lí
 / 2u) + 1u;

140 
i
 = 0u; i <(
f·LíBy2
 - 2u); i += 2u)

142 if(
i
 < 
j
)

145 
ö
 = 
pSrc
[2u * 
i
];

146 
pSrc
[2u * 
i
] =ÖSrc[2u * 
j
];

147 
pSrc
[2u * 
j
] = 
ö
;

150 
ö
 = 
pSrc
[(2u * 
i
) + 1u];

151 
pSrc
[(2u * 
i
Ë+ 1u] =ÖSrc[(2u * 
j
) + 1u];

152 
pSrc
[(2u * 
j
Ë+ 1u] = 
ö
;

155 
ö
 = 
pSrc
[2u * (
i
 + 
f·LíBy2p1
)];

156 
pSrc
[2u * (
i
 + 
f·LíBy2p1
)] =ÖSrc[2u * (
j
 + fftLenBy2p1)];

157 
pSrc
[2u * (
j
 + 
f·LíBy2p1
)] = 
ö
;

160 
ö
 = 
pSrc
[(2u * (
i
 + 
f·LíBy2p1
)) + 1u];

161 
pSrc
[(2u * (
i
 + 
f·LíBy2p1
)) + 1u] =

162 
pSrc
[(2u * (
j
 + 
f·LíBy2p1
)) + 1u];

163 
pSrc
[(2u * (
j
 + 
f·LíBy2p1
)Ë+ 1u] = 
ö
;

168 
ö
 = 
pSrc
[2u * (
i
 + 1u)];

169 
pSrc
[2u * (
i
 + 1u)] =ÖSrc[2u * (
j
 + 
f·LíBy2
)];

170 
pSrc
[2u * (
j
 + 
f·LíBy2
)] = 
ö
;

173 
ö
 = 
pSrc
[(2u * (
i
 + 1u)) + 1u];

174 
pSrc
[(2u * (
i
 + 1u)Ë+ 1u] =ÖSrc[(2u * (
j
 + 
f·LíBy2
)) + 1u];

175 
pSrc
[(2u * (
j
 + 
f·LíBy2
)Ë+ 1u] = 
ö
;

178 
j
 = *
pBôRevTabÀ
;

181 
pBôRevTabÀ
 +
bôRevFa˘‹
;

183 
	}
}

196 
	$¨m_bôªvîßl_q15
(

197 
q15_t
 * 
pSrc16
,

198 
uöt32_t
 
f·Lí
,

199 
uöt16_t
 
bôRevFa˘‹
,

200 
uöt16_t
 * 
pBôRevTab
)

202 
q31_t
 *
pSrc
 = (q31_à*Ë
pSrc16
;

203 
q31_t
 
ö
;

204 
uöt32_t
 
f·LíBy2
, 
f·LíBy2p1
;

205 
uöt32_t
 
i
, 
j
;

208 
j
 = 0u;

209 
f·LíBy2
 = 
f·Lí
 / 2u;

210 
f·LíBy2p1
 = (
f·Lí
 / 2u) + 1u;

213 
i
 = 0u; i <(
f·LíBy2
 - 2u); i += 2u)

215 if(
i
 < 
j
)

219 
ö
 = 
pSrc
[
i
];

220 
pSrc
[
i
] =ÖSrc[
j
];

221 
pSrc
[
j
] = 
ö
;

225 
ö
 = 
pSrc
[
i
 + 
f·LíBy2p1
];

226 
pSrc
[
i
 + 
f·LíBy2p1
] =ÖSrc[
j
 + fftLenBy2p1];

227 
pSrc
[
j
 + 
f·LíBy2p1
] = 
ö
;

232 
ö
 = 
pSrc
[
i
 + 1u];

233 
pSrc
[
i
 + 1u] =ÖSrc[
j
 + 
f·LíBy2
];

234 
pSrc
[
j
 + 
f·LíBy2
] = 
ö
;

237 
j
 = *
pBôRevTab
;

240 
pBôRevTab
 +
bôRevFa˘‹
;

242 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_f32.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

44 
¨m_ødix8_buâîÊy_f32
(

45 
Êﬂt32_t
 * 
pSrc
,

46 
uöt16_t
 
f·Lí
,

47 c⁄° 
Êﬂt32_t
 * 
pC€f
,

48 
uöt16_t
 
twidC€fModifõr
);

50 
¨m_bôªvîßl_32
(

51 
uöt32_t
 * 
pSrc
,

52 c⁄° 
uöt16_t
 
bôRevLí
,

53 c⁄° 
uöt16_t
 * 
pBôRevTabÀ
);

207 
	$¨m_cf·_ødix8by2_f32
–
¨m_cf·_ö°™˚_f32
 * 
S
, 
Êﬂt32_t
 * 
p1
)

209 
uöt32_t
 
L
 = 
S
->
f·Lí
;

210 
Êﬂt32_t
 * 
pCﬁ1
, * 
pCﬁ2
, * 
pMid1
, * 
pMid2
;

211 
Êﬂt32_t
 * 
p2
 = 
p1
 + 
L
;

212 c⁄° 
Êﬂt32_t
 * 
tw
 = (Êﬂt32_à*Ë
S
->
pTwiddÀ
;

213 
Êﬂt32_t
 
t1
[4], 
t2
[4], 
t3
[4], 
t4
[4], 
twR
, 
twI
;

214 
Êﬂt32_t
 
m0
, 
m1
, 
m2
, 
m3
;

215 
uöt32_t
 
l
;

217 
pCﬁ1
 = 
p1
;

218 
pCﬁ2
 = 
p2
;

221 
L
 >>= 1;

223 
pMid1
 = 
p1
 + 
L
;

224 
pMid2
 = 
p2
 + 
L
;

227  
l
 = 
L
 >> 2;Ü > 0;Ü-- )

229 
t1
[0] = 
p1
[0];

230 
t1
[1] = 
p1
[1];

231 
t1
[2] = 
p1
[2];

232 
t1
[3] = 
p1
[3];

234 
t2
[0] = 
p2
[0];

235 
t2
[1] = 
p2
[1];

236 
t2
[2] = 
p2
[2];

237 
t2
[3] = 
p2
[3];

239 
t3
[0] = 
pMid1
[0];

240 
t3
[1] = 
pMid1
[1];

241 
t3
[2] = 
pMid1
[2];

242 
t3
[3] = 
pMid1
[3];

244 
t4
[0] = 
pMid2
[0];

245 
t4
[1] = 
pMid2
[1];

246 
t4
[2] = 
pMid2
[2];

247 
t4
[3] = 
pMid2
[3];

249 *
p1
++ = 
t1
[0] + 
t2
[0];

250 *
p1
++ = 
t1
[1] + 
t2
[1];

251 *
p1
++ = 
t1
[2] + 
t2
[2];

252 *
p1
++ = 
t1
[3] + 
t2
[3];

254 
t2
[0] = 
t1
[0] -Å2[0];

255 
t2
[1] = 
t1
[1] -Å2[1];

256 
t2
[2] = 
t1
[2] -Å2[2];

257 
t2
[3] = 
t1
[3] -Å2[3];

259 *
pMid1
++ = 
t3
[0] + 
t4
[0];

260 *
pMid1
++ = 
t3
[1] + 
t4
[1];

261 *
pMid1
++ = 
t3
[2] + 
t4
[2];

262 *
pMid1
++ = 
t3
[3] + 
t4
[3];

264 
t4
[0] =Å4[0] - 
t3
[0];

265 
t4
[1] =Å4[1] - 
t3
[1];

266 
t4
[2] =Å4[2] - 
t3
[2];

267 
t4
[3] =Å4[3] - 
t3
[3];

269 
twR
 = *
tw
++;

270 
twI
 = *
tw
++;

273 
m0
 = 
t2
[0] * 
twR
;

274 
m1
 = 
t2
[1] * 
twI
;

275 
m2
 = 
t2
[1] * 
twR
;

276 
m3
 = 
t2
[0] * 
twI
;

279 *
p2
++ = 
m0
 + 
m1
;

281 *
p2
++ = 
m2
 - 
m3
;

285 
m0
 = 
t4
[0] * 
twI
;

286 
m1
 = 
t4
[1] * 
twR
;

287 
m2
 = 
t4
[1] * 
twI
;

288 
m3
 = 
t4
[0] * 
twR
;

290 *
pMid2
++ = 
m0
 - 
m1
;

291 *
pMid2
++ = 
m2
 + 
m3
;

293 
twR
 = *
tw
++;

294 
twI
 = *
tw
++;

296 
m0
 = 
t2
[2] * 
twR
;

297 
m1
 = 
t2
[3] * 
twI
;

298 
m2
 = 
t2
[3] * 
twR
;

299 
m3
 = 
t2
[2] * 
twI
;

301 *
p2
++ = 
m0
 + 
m1
;

302 *
p2
++ = 
m2
 - 
m3
;

304 
m0
 = 
t4
[2] * 
twI
;

305 
m1
 = 
t4
[3] * 
twR
;

306 
m2
 = 
t4
[3] * 
twI
;

307 
m3
 = 
t4
[2] * 
twR
;

309 *
pMid2
++ = 
m0
 - 
m1
;

310 *
pMid2
++ = 
m2
 + 
m3
;

314 
	`¨m_ødix8_buâîÊy_f32
–
pCﬁ1
, 
L
, (
Êﬂt32_t
 *Ë
S
->
pTwiddÀ
, 2u);

316 
	`¨m_ødix8_buâîÊy_f32
–
pCﬁ2
, 
L
, (
Êﬂt32_t
 *Ë
S
->
pTwiddÀ
, 2u);

317 
	}
}

319 
	$¨m_cf·_ødix8by4_f32
–
¨m_cf·_ö°™˚_f32
 * 
S
, 
Êﬂt32_t
 * 
p1
)

321 
uöt32_t
 
L
 = 
S
->
f·Lí
 >> 1;

322 
Êﬂt32_t
 * 
pCﬁ1
, *
pCﬁ2
, *
pCﬁ3
, *
pCﬁ4
, *
pEnd1
, *
pEnd2
, *
pEnd3
, *
pEnd4
;

323 c⁄° 
Êﬂt32_t
 *
tw2
, *
tw3
, *
tw4
;

324 
Êﬂt32_t
 * 
p2
 = 
p1
 + 
L
;

325 
Êﬂt32_t
 * 
p3
 = 
p2
 + 
L
;

326 
Êﬂt32_t
 * 
p4
 = 
p3
 + 
L
;

327 
Êﬂt32_t
 
t2
[4], 
t3
[4], 
t4
[4], 
twR
, 
twI
;

328 
Êﬂt32_t
 
p1≠3_0
, 
p1•3_0
, 
p1≠3_1
, 
p1•3_1
;

329 
Êﬂt32_t
 
m0
, 
m1
, 
m2
, 
m3
;

330 
uöt32_t
 
l
, 
twMod2
, 
twMod3
, 
twMod4
;

332 
pCﬁ1
 = 
p1
;

333 
pCﬁ2
 = 
p2
;

334 
pCﬁ3
 = 
p3
;

335 
pCﬁ4
 = 
p4
;

336 
pEnd1
 = 
p2
 - 1;

337 
pEnd2
 = 
p3
 - 1;

338 
pEnd3
 = 
p4
 - 1;

339 
pEnd4
 = 
pEnd3
 + 
L
;

341 
tw2
 = 
tw3
 = 
tw4
 = (
Êﬂt32_t
 *Ë
S
->
pTwiddÀ
;

343 
L
 >>= 1;

347 
twMod2
 = 2;

348 
twMod3
 = 4;

349 
twMod4
 = 6;

352 
p1≠3_0
 = 
p1
[0] + 
p3
[0];

353 
p1•3_0
 = 
p1
[0] - 
p3
[0];

354 
p1≠3_1
 = 
p1
[1] + 
p3
[1];

355 
p1•3_1
 = 
p1
[1] - 
p3
[1];

358 
t2
[0] = 
p1•3_0
 + 
p2
[1] - 
p4
[1];

359 
t2
[1] = 
p1•3_1
 - 
p2
[0] + 
p4
[0];

361 
t3
[0] = 
p1≠3_0
 - 
p2
[0] - 
p4
[0];

362 
t3
[1] = 
p1≠3_1
 - 
p2
[1] - 
p4
[1];

364 
t4
[0] = 
p1•3_0
 - 
p2
[1] + 
p4
[1];

365 
t4
[1] = 
p1•3_1
 + 
p2
[0] - 
p4
[0];

367 *
p1
++ = 
p1≠3_0
 + 
p2
[0] + 
p4
[0];

368 *
p1
++ = 
p1≠3_1
 + 
p2
[1] + 
p4
[1];

371 *
p2
++ = 
t2
[0];

372 *
p2
++ = 
t2
[1];

373 *
p3
++ = 
t3
[0];

374 *
p3
++ = 
t3
[1];

375 *
p4
++ = 
t4
[0];

376 *
p4
++ = 
t4
[1];

378 
tw2
 +
twMod2
;

379 
tw3
 +
twMod3
;

380 
tw4
 +
twMod4
;

382 
l
 = (
L
 - 2) >> 1;Ü > 0;Ü-- )

385 
p1≠3_0
 = 
p1
[0] + 
p3
[0];

386 
p1•3_0
 = 
p1
[0] - 
p3
[0];

387 
p1≠3_1
 = 
p1
[1] + 
p3
[1];

388 
p1•3_1
 = 
p1
[1] - 
p3
[1];

390 
t2
[0] = 
p1•3_0
 + 
p2
[1] - 
p4
[1];

391 
t2
[1] = 
p1•3_1
 - 
p2
[0] + 
p4
[0];

393 
t3
[0] = 
p1≠3_0
 - 
p2
[0] - 
p4
[0];

394 
t3
[1] = 
p1≠3_1
 - 
p2
[1] - 
p4
[1];

396 
t4
[0] = 
p1•3_0
 - 
p2
[1] + 
p4
[1];

397 
t4
[1] = 
p1•3_1
 + 
p2
[0] - 
p4
[0];

399 *
p1
++ = 
p1≠3_0
 + 
p2
[0] + 
p4
[0];

400 *
p1
++ = 
p1≠3_1
 + 
p2
[1] + 
p4
[1];

403 
p1≠3_1
 = 
pEnd1
[-1] + 
pEnd3
[-1];

404 
p1•3_1
 = 
pEnd1
[-1] - 
pEnd3
[-1];

405 
p1≠3_0
 = 
pEnd1
[0] + 
pEnd3
[0];

406 
p1•3_0
 = 
pEnd1
[0] - 
pEnd3
[0];

408 
t2
[2] = 
pEnd2
[0] - 
pEnd4
[0] + 
p1•3_1
;

409 
t2
[3] = 
pEnd1
[0] - 
pEnd3
[0] - 
pEnd2
[-1] + 
pEnd4
[-1];

411 
t3
[2] = 
p1≠3_1
 - 
pEnd2
[-1] - 
pEnd4
[-1];

412 
t3
[3] = 
p1≠3_0
 - 
pEnd2
[0] - 
pEnd4
[0];

414 
t4
[2] = 
pEnd2
[0] - 
pEnd4
[0] - 
p1•3_1
;

415 
t4
[3] = 
pEnd4
[-1] - 
pEnd2
[-1] - 
p1•3_0
;

417 *
pEnd1
-- = 
p1≠3_0
 + 
pEnd2
[0] + 
pEnd4
[0];

418 *
pEnd1
-- = 
p1≠3_1
 + 
pEnd2
[-1] + 
pEnd4
[-1];

422 
twR
 = *
tw2
++;

423 
twI
 = *
tw2
++;

429 
m0
 = 
t2
[0] * 
twR
;

430 
m1
 = 
t2
[1] * 
twI
;

431 
m2
 = 
t2
[1] * 
twR
;

432 
m3
 = 
t2
[0] * 
twI
;

434 *
p2
++ = 
m0
 + 
m1
;

435 *
p2
++ = 
m2
 - 
m3
;

439 
m0
 = 
t2
[3] * 
twI
;

440 
m1
 = 
t2
[2] * 
twR
;

441 
m2
 = 
t2
[2] * 
twI
;

442 
m3
 = 
t2
[3] * 
twR
;

444 *
pEnd2
-- = 
m0
 - 
m1
;

445 *
pEnd2
-- = 
m2
 + 
m3
;

448 
twR
 = 
tw3
[0];

449 
twI
 = 
tw3
[1];

450 
tw3
 +
twMod3
;

452 
m0
 = 
t3
[0] * 
twR
;

453 
m1
 = 
t3
[1] * 
twI
;

454 
m2
 = 
t3
[1] * 
twR
;

455 
m3
 = 
t3
[0] * 
twI
;

457 *
p3
++ = 
m0
 + 
m1
;

458 *
p3
++ = 
m2
 - 
m3
;

462 
m0
 = -
t3
[3] * 
twR
;

463 
m1
 = 
t3
[2] * 
twI
;

464 
m2
 = 
t3
[2] * 
twR
;

465 
m3
 = 
t3
[3] * 
twI
;

467 *
pEnd3
-- = 
m0
 - 
m1
;

468 *
pEnd3
-- = 
m3
 - 
m2
;

471 
twR
 = 
tw4
[0];

472 
twI
 = 
tw4
[1];

473 
tw4
 +
twMod4
;

475 
m0
 = 
t4
[0] * 
twR
;

476 
m1
 = 
t4
[1] * 
twI
;

477 
m2
 = 
t4
[1] * 
twR
;

478 
m3
 = 
t4
[0] * 
twI
;

480 *
p4
++ = 
m0
 + 
m1
;

481 *
p4
++ = 
m2
 - 
m3
;

485 
m0
 = 
t4
[3] * 
twI
;

486 
m1
 = 
t4
[2] * 
twR
;

487 
m2
 = 
t4
[2] * 
twI
;

488 
m3
 = 
t4
[3] * 
twR
;

490 *
pEnd4
-- = 
m0
 - 
m1
;

491 *
pEnd4
-- = 
m2
 + 
m3
;

497 
p1≠3_0
 = 
p1
[0] + 
p3
[0];

498 
p1•3_0
 = 
p1
[0] - 
p3
[0];

499 
p1≠3_1
 = 
p1
[1] + 
p3
[1];

500 
p1•3_1
 = 
p1
[1] - 
p3
[1];

503 
t2
[0] = 
p1•3_0
 + 
p2
[1] - 
p4
[1];

504 
t2
[1] = 
p1•3_1
 - 
p2
[0] + 
p4
[0];

506 
t3
[0] = 
p1≠3_0
 - 
p2
[0] - 
p4
[0];

507 
t3
[1] = 
p1≠3_1
 - 
p2
[1] - 
p4
[1];

509 
t4
[0] = 
p1•3_0
 - 
p2
[1] + 
p4
[1];

510 
t4
[1] = 
p1•3_1
 + 
p2
[0] - 
p4
[0];

512 *
p1
++ = 
p1≠3_0
 + 
p2
[0] + 
p4
[0];

513 *
p1
++ = 
p1≠3_1
 + 
p2
[1] + 
p4
[1];

516 
twR
 = 
tw2
[0];

517 
twI
 = 
tw2
[1];

519 
m0
 = 
t2
[0] * 
twR
;

520 
m1
 = 
t2
[1] * 
twI
;

521 
m2
 = 
t2
[1] * 
twR
;

522 
m3
 = 
t2
[0] * 
twI
;

524 *
p2
++ = 
m0
 + 
m1
;

525 *
p2
++ = 
m2
 - 
m3
;

527 
twR
 = 
tw3
[0];

528 
twI
 = 
tw3
[1];

530 
m0
 = 
t3
[0] * 
twR
;

531 
m1
 = 
t3
[1] * 
twI
;

532 
m2
 = 
t3
[1] * 
twR
;

533 
m3
 = 
t3
[0] * 
twI
;

535 *
p3
++ = 
m0
 + 
m1
;

536 *
p3
++ = 
m2
 - 
m3
;

538 
twR
 = 
tw4
[0];

539 
twI
 = 
tw4
[1];

541 
m0
 = 
t4
[0] * 
twR
;

542 
m1
 = 
t4
[1] * 
twI
;

543 
m2
 = 
t4
[1] * 
twR
;

544 
m3
 = 
t4
[0] * 
twI
;

546 *
p4
++ = 
m0
 + 
m1
;

547 *
p4
++ = 
m2
 - 
m3
;

550 
	`¨m_ødix8_buâîÊy_f32
–
pCﬁ1
, 
L
, (
Êﬂt32_t
 *Ë
S
->
pTwiddÀ
, 4u);

552 
	`¨m_ødix8_buâîÊy_f32
–
pCﬁ2
, 
L
, (
Êﬂt32_t
 *Ë
S
->
pTwiddÀ
, 4u);

554 
	`¨m_ødix8_buâîÊy_f32
–
pCﬁ3
, 
L
, (
Êﬂt32_t
 *Ë
S
->
pTwiddÀ
, 4u);

556 
	`¨m_ødix8_buâîÊy_f32
–
pCﬁ4
, 
L
, (
Êﬂt32_t
 *Ë
S
->
pTwiddÀ
, 4u);

557 
	}
}

574 
	$¨m_cf·_f32
(

575 c⁄° 
¨m_cf·_ö°™˚_f32
 * 
S
,

576 
Êﬂt32_t
 * 
p1
,

577 
uöt8_t
 
if·Fœg
,

578 
uöt8_t
 
bôRevî£Fœg
)

580 
uöt32_t
 
L
 = 
S
->
f·Lí
, 
l
;

581 
Êﬂt32_t
 
övL
, * 
pSrc
;

583 if(
if·Fœg
 == 1u)

586 
pSrc
 = 
p1
 + 1;

587 
l
=0;Ü<
L
;Ü++)

589 *
pSrc
 = -*pSrc;

590 
pSrc
 += 2;

594 
L
)

599 
	`¨m_cf·_ødix8by2_f32
 ( (
¨m_cf·_ö°™˚_f32
 *Ë
S
, 
p1
);

604 
	`¨m_cf·_ødix8by4_f32
 ( (
¨m_cf·_ö°™˚_f32
 *Ë
S
, 
p1
);

609 
	`¨m_ødix8_buâîÊy_f32
–
p1
, 
L
, (
Êﬂt32_t
 *Ë
S
->
pTwiddÀ
, 1);

613 if–
bôRevî£Fœg
 )

614 
	`¨m_bôªvîßl_32
((
uöt32_t
*)
p1
,
S
->
bôRevLígth
,S->
pBôRevTabÀ
);

616 if(
if·Fœg
 == 1u)

618 
övL
 = 1.0f/(
Êﬂt32_t
)
L
;

620 
pSrc
 = 
p1
;

621 
l
=0;Ü<
L
;Ü++)

623 *
pSrc
++ *
övL
 ;

624 *
pSrc
 = -(*pSrcË* 
övL
;

625 
pSrc
++;

628 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_q15.c

41 
	~"¨m_m©h.h
"

43 
¨m_ødix4_buâîÊy_q15
(

44 
q15_t
 * 
pSrc
,

45 
uöt32_t
 
f·Lí
,

46 
q15_t
 * 
pC€f
,

47 
uöt32_t
 
twidC€fModifõr
);

49 
¨m_ødix4_buâîÊy_övî£_q15
(

50 
q15_t
 * 
pSrc
,

51 
uöt32_t
 
f·Lí
,

52 
q15_t
 * 
pC€f
,

53 
uöt32_t
 
twidC€fModifõr
);

55 
¨m_bôªvîßl_16
(

56 
uöt16_t
 * 
pSrc
,

57 c⁄° 
uöt16_t
 
bôRevLí
,

58 c⁄° 
uöt16_t
 * 
pBôRevTabÀ
);

60 
¨m_cf·_ødix4by2_q15
(

61 
q15_t
 * 
pSrc
,

62 
uöt32_t
 
f·Lí
,

63 c⁄° 
q15_t
 * 
pC€f
);

65 
¨m_cf·_ødix4by2_övî£_q15
(

66 
q15_t
 * 
pSrc
,

67 
uöt32_t
 
f·Lí
,

68 c⁄° 
q15_t
 * 
pC€f
);

89 
	$¨m_cf·_q15
(

90 c⁄° 
¨m_cf·_ö°™˚_q15
 * 
S
,

91 
q15_t
 * 
p1
,

92 
uöt8_t
 
if·Fœg
,

93 
uöt8_t
 
bôRevî£Fœg
)

95 
uöt32_t
 
L
 = 
S
->
f·Lí
;

97 if(
if·Fœg
 == 1u)

99 
L
)

106 
	`¨m_ødix4_buâîÊy_övî£_q15
 ( 
p1
, 
L
, (
q15_t
*)
S
->
pTwiddÀ
, 1 );

113 
	`¨m_cf·_ødix4by2_övî£_q15
 ( 
p1
, 
L
, 
S
->
pTwiddÀ
 );

119 
L
)

126 
	`¨m_ødix4_buâîÊy_q15
 ( 
p1
, 
L
, (
q15_t
*)
S
->
pTwiddÀ
, 1 );

133 
	`¨m_cf·_ødix4by2_q15
 ( 
p1
, 
L
, 
S
->
pTwiddÀ
 );

138 if–
bôRevî£Fœg
 )

139 
	`¨m_bôªvîßl_16
((
uöt16_t
*)
p1
,
S
->
bôRevLígth
,S->
pBôRevTabÀ
);

140 
	}
}

146 
	$¨m_cf·_ødix4by2_q15
(

147 
q15_t
 * 
pSrc
,

148 
uöt32_t
 
f·Lí
,

149 c⁄° 
q15_t
 * 
pC€f
)

151 
uöt32_t
 
i
;

152 
uöt32_t
 
n2
;

153 
q15_t
 
p0
, 
p1
, 
p2
, 
p3
;

154 #i‚de‡
ARM_MATH_CM0_FAMILY


155 
q31_t
 
T
, 
S
, 
R
;

156 
q31_t
 
c€ff
, 
out1
, 
out2
;

157 c⁄° 
q15_t
 *
pC
 = 
pC€f
;

158 
q15_t
 *
pSi
 = 
pSrc
;

159 
q15_t
 *
pSl
 = 
pSrc
 + 
f·Lí
;

161 
uöt32_t
 
ü
, 
l
;

162 
q15_t
 
xt
, 
yt
, 
cosVÆ
, 
söVÆ
;

165 
n2
 = 
f·Lí
 >> 1;

167 #i‚de‡
ARM_MATH_CM0_FAMILY


169 
i
 = 
n2
; i > 0; i--)

171 
c€ff
 = 
	`_SIMD32_OFFSET
(
pC
);

172 
pC
 += 2;

174 
T
 = 
	`_SIMD32_OFFSET
(
pSi
);

175 
T
 = 
	`__SHADD16
(T, 0);

177 
S
 = 
	`_SIMD32_OFFSET
(
pSl
);

178 
S
 = 
	`__SHADD16
(S, 0);

180 
R
 = 
	`__QSUB16
(
T
, 
S
);

182 
	`_SIMD32_OFFSET
(
pSi
Ë
	`__SHADD16
(
T
, 
S
);

183 
pSi
 += 2;

185 #i‚de‡
ARM_MATH_BIG_ENDIAN


187 
out1
 = 
	`__SMUAD
(
c€ff
, 
R
) >> 16;

188 
out2
 = 
	`__SMUSDX
(
c€ff
, 
R
);

192 
out1
 = 
	`__SMUSDX
(
R
, 
c€ff
) >> 16u;

193 
out2
 = 
	`__SMUAD
(
c€ff
, 
R
);

197 
	`_SIMD32_OFFSET
(
pSl
) =

198 (
q31_t
Ë((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

199 
pSl
 += 2;

204 
ü
 = 0;

205 
i
 = 0; i < 
n2
; i++)

207 
cosVÆ
 = 
pC€f
[
ü
 * 2];

208 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

209 
ü
++;

211 
l
 = 
i
 + 
n2
;

213 
xt
 = (
pSrc
[2 * 
i
] >> 1uË- (pSrc[2 * 
l
] >> 1u);

214 
pSrc
[2 * 
i
] = (’Src[2 * i] >> 1uË+ (pSrc[2 * 
l
] >> 1u)) >> 1u;

216 
yt
 = (
pSrc
[2 * 
i
 + 1] >> 1uË- (pSrc[2 * 
l
 + 1] >> 1u);

217 
pSrc
[2 * 
i
 + 1] =

218 ((
pSrc
[2 * 
l
 + 1] >> 1uË+ (pSrc[2 * 
i
 + 1] >> 1u)) >> 1u;

220 
pSrc
[2u * 
l
] = (((
öt16_t
Ë(((
q31_t
Ë
xt
 * 
cosVÆ
) >> 16)) +

221 ((
öt16_t
Ë(((
q31_t
Ë
yt
 * 
söVÆ
) >> 16)));

223 
pSrc
[2u * 
l
 + 1u] = (((
öt16_t
Ë(((
q31_t
Ë
yt
 * 
cosVÆ
) >> 16)) -

224 ((
öt16_t
Ë(((
q31_t
Ë
xt
 * 
söVÆ
) >> 16)));

230 
	`¨m_ødix4_buâîÊy_q15
–
pSrc
, 
n2
, (
q15_t
*)
pC€f
, 2u);

232 
	`¨m_ødix4_buâîÊy_q15
–
pSrc
 + 
f·Lí
, 
n2
, (
q15_t
*)
pC€f
, 2u);

234 
i
 = 0; i < 
f·Lí
 >> 1; i++)

236 
p0
 = 
pSrc
[4*
i
+0];

237 
p1
 = 
pSrc
[4*
i
+1];

238 
p2
 = 
pSrc
[4*
i
+2];

239 
p3
 = 
pSrc
[4*
i
+3];

241 
p0
 <<= 1;

242 
p1
 <<= 1;

243 
p2
 <<= 1;

244 
p3
 <<= 1;

246 
pSrc
[4*
i
+0] = 
p0
;

247 
pSrc
[4*
i
+1] = 
p1
;

248 
pSrc
[4*
i
+2] = 
p2
;

249 
pSrc
[4*
i
+3] = 
p3
;

251 
	}
}

253 
	$¨m_cf·_ødix4by2_övî£_q15
(

254 
q15_t
 * 
pSrc
,

255 
uöt32_t
 
f·Lí
,

256 c⁄° 
q15_t
 * 
pC€f
)

258 
uöt32_t
 
i
;

259 
uöt32_t
 
n2
;

260 
q15_t
 
p0
, 
p1
, 
p2
, 
p3
;

261 #i‚de‡
ARM_MATH_CM0_FAMILY


262 
q31_t
 
T
, 
S
, 
R
;

263 
q31_t
 
c€ff
, 
out1
, 
out2
;

264 c⁄° 
q15_t
 *
pC
 = 
pC€f
;

265 
q15_t
 *
pSi
 = 
pSrc
;

266 
q15_t
 *
pSl
 = 
pSrc
 + 
f·Lí
;

268 
uöt32_t
 
ü
, 
l
;

269 
q15_t
 
xt
, 
yt
, 
cosVÆ
, 
söVÆ
;

272 
n2
 = 
f·Lí
 >> 1;

274 #i‚de‡
ARM_MATH_CM0_FAMILY


276 
i
 = 
n2
; i > 0; i--)

278 
c€ff
 = 
	`_SIMD32_OFFSET
(
pC
);

279 
pC
 += 2;

281 
T
 = 
	`_SIMD32_OFFSET
(
pSi
);

282 
T
 = 
	`__SHADD16
(T, 0);

284 
S
 = 
	`_SIMD32_OFFSET
(
pSl
);

285 
S
 = 
	`__SHADD16
(S, 0);

287 
R
 = 
	`__QSUB16
(
T
, 
S
);

289 
	`_SIMD32_OFFSET
(
pSi
Ë
	`__SHADD16
(
T
, 
S
);

290 
pSi
 += 2;

292 #i‚de‡
ARM_MATH_BIG_ENDIAN


294 
out1
 = 
	`__SMUSD
(
c€ff
, 
R
) >> 16;

295 
out2
 = 
	`__SMUADX
(
c€ff
, 
R
);

298 
out1
 = 
	`__SMUADX
(
R
, 
c€ff
) >> 16u;

299 
out2
 = 
	`__SMUSD
(
	`__QSUB
(0, 
c€ff
), 
R
);

303 
	`_SIMD32_OFFSET
(
pSl
) =

304 (
q31_t
Ë((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

305 
pSl
 += 2;

310 
ü
 = 0;

311 
i
 = 0; i < 
n2
; i++)

313 
cosVÆ
 = 
pC€f
[
ü
 * 2];

314 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

315 
ü
++;

317 
l
 = 
i
 + 
n2
;

318 
xt
 = (
pSrc
[2 * 
i
] >> 1uË- (pSrc[2 * 
l
] >> 1u);

319 
pSrc
[2 * 
i
] = (’Src[2 * i] >> 1uË+ (pSrc[2 * 
l
] >> 1u)) >> 1u;

321 
yt
 = (
pSrc
[2 * 
i
 + 1] >> 1uË- (pSrc[2 * 
l
 + 1] >> 1u);

322 
pSrc
[2 * 
i
 + 1] =

323 ((
pSrc
[2 * 
l
 + 1] >> 1uË+ (pSrc[2 * 
i
 + 1] >> 1u)) >> 1u;

325 
pSrc
[2u * 
l
] = (((
öt16_t
Ë(((
q31_t
Ë
xt
 * 
cosVÆ
) >> 16)) -

326 ((
öt16_t
Ë(((
q31_t
Ë
yt
 * 
söVÆ
) >> 16)));

328 
pSrc
[2u * 
l
 + 1u] = (((
öt16_t
Ë(((
q31_t
Ë
yt
 * 
cosVÆ
) >> 16)) +

329 ((
öt16_t
Ë(((
q31_t
Ë
xt
 * 
söVÆ
) >> 16)));

335 
	`¨m_ødix4_buâîÊy_övî£_q15
–
pSrc
, 
n2
, (
q15_t
*)
pC€f
, 2u);

337 
	`¨m_ødix4_buâîÊy_övî£_q15
–
pSrc
 + 
f·Lí
, 
n2
, (
q15_t
*)
pC€f
, 2u);

339 
i
 = 0; i < 
f·Lí
 >> 1; i++)

341 
p0
 = 
pSrc
[4*
i
+0];

342 
p1
 = 
pSrc
[4*
i
+1];

343 
p2
 = 
pSrc
[4*
i
+2];

344 
p3
 = 
pSrc
[4*
i
+3];

346 
p0
 <<= 1;

347 
p1
 <<= 1;

348 
p2
 <<= 1;

349 
p3
 <<= 1;

351 
pSrc
[4*
i
+0] = 
p0
;

352 
pSrc
[4*
i
+1] = 
p1
;

353 
pSrc
[4*
i
+2] = 
p2
;

354 
pSrc
[4*
i
+3] = 
p3
;

356 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_q31.c

41 
	~"¨m_m©h.h
"

43 
¨m_ødix4_buâîÊy_q31
(

44 
q31_t
 * 
pSrc
,

45 
uöt32_t
 
f·Lí
,

46 
q31_t
 * 
pC€f
,

47 
uöt32_t
 
twidC€fModifõr
);

49 
¨m_ødix4_buâîÊy_övî£_q31
(

50 
q31_t
 * 
pSrc
,

51 
uöt32_t
 
f·Lí
,

52 
q31_t
 * 
pC€f
,

53 
uöt32_t
 
twidC€fModifõr
);

55 
¨m_bôªvîßl_32
(

56 
uöt32_t
 * 
pSrc
,

57 c⁄° 
uöt16_t
 
bôRevLí
,

58 c⁄° 
uöt16_t
 * 
pBôRevTabÀ
);

60 
¨m_cf·_ødix4by2_q31
(

61 
q31_t
 * 
pSrc
,

62 
uöt32_t
 
f·Lí
,

63 c⁄° 
q31_t
 * 
pC€f
);

65 
¨m_cf·_ødix4by2_övî£_q31
(

66 
q31_t
 * 
pSrc
,

67 
uöt32_t
 
f·Lí
,

68 c⁄° 
q31_t
 * 
pC€f
);

89 
	$¨m_cf·_q31
(

90 c⁄° 
¨m_cf·_ö°™˚_q31
 * 
S
,

91 
q31_t
 * 
p1
,

92 
uöt8_t
 
if·Fœg
,

93 
uöt8_t
 
bôRevî£Fœg
)

95 
uöt32_t
 
L
 = 
S
->
f·Lí
;

97 if(
if·Fœg
 == 1u)

99 
L
)

106 
	`¨m_ødix4_buâîÊy_övî£_q31
 ( 
p1
, 
L
, (
q31_t
*)
S
->
pTwiddÀ
, 1 );

113 
	`¨m_cf·_ødix4by2_övî£_q31
 ( 
p1
, 
L
, 
S
->
pTwiddÀ
 );

119 
L
)

126 
	`¨m_ødix4_buâîÊy_q31
 ( 
p1
, 
L
, (
q31_t
*)
S
->
pTwiddÀ
, 1 );

133 
	`¨m_cf·_ødix4by2_q31
 ( 
p1
, 
L
, 
S
->
pTwiddÀ
 );

138 if–
bôRevî£Fœg
 )

139 
	`¨m_bôªvîßl_32
((
uöt32_t
*)
p1
,
S
->
bôRevLígth
,S->
pBôRevTabÀ
);

140 
	}
}

146 
	$¨m_cf·_ødix4by2_q31
(

147 
q31_t
 * 
pSrc
,

148 
uöt32_t
 
f·Lí
,

149 c⁄° 
q31_t
 * 
pC€f
)

151 
uöt32_t
 
i
, 
l
;

152 
uöt32_t
 
n2
, 
ü
;

153 
q31_t
 
xt
, 
yt
, 
cosVÆ
, 
söVÆ
;

154 
q31_t
 
p0
, 
p1
;

156 
n2
 = 
f·Lí
 >> 1;

157 
ü
 = 0;

158 
i
 = 0; i < 
n2
; i++)

160 
cosVÆ
 = 
pC€f
[2*
ü
];

161 
söVÆ
 = 
pC€f
[2*
ü
 + 1];

162 
ü
++;

164 
l
 = 
i
 + 
n2
;

165 
xt
 = (
pSrc
[2 * 
i
] >> 2Ë- (pSrc[2 * 
l
] >> 2);

166 
pSrc
[2 * 
i
] = (pSrc[2 * i] >> 2Ë+ (pSrc[2 * 
l
] >> 2);

168 
yt
 = (
pSrc
[2 * 
i
 + 1] >> 2Ë- (pSrc[2 * 
l
 + 1] >> 2);

169 
pSrc
[2 * 
i
 + 1] = (pSrc[2 * 
l
 + 1] >> 2) + (pSrc[2 * i + 1] >> 2);

171 
	`mu…_32x32_kìp32_R
(
p0
, 
xt
, 
cosVÆ
);

172 
	`mu…_32x32_kìp32_R
(
p1
, 
yt
, 
cosVÆ
);

173 
	`mu…Acc_32x32_kìp32_R
(
p0
, 
yt
, 
söVÆ
);

174 
	`mu…Sub_32x32_kìp32_R
(
p1
, 
xt
, 
söVÆ
);

176 
pSrc
[2u * 
l
] = 
p0
 << 1;

177 
pSrc
[2u * 
l
 + 1u] = 
p1
 << 1;

182 
	`¨m_ødix4_buâîÊy_q31
–
pSrc
, 
n2
, (
q31_t
*)
pC€f
, 2u);

184 
	`¨m_ødix4_buâîÊy_q31
–
pSrc
 + 
f·Lí
, 
n2
, (
q31_t
*)
pC€f
, 2u);

186 
i
 = 0; i < 
f·Lí
 >> 1; i++)

188 
p0
 = 
pSrc
[4*
i
+0];

189 
p1
 = 
pSrc
[4*
i
+1];

190 
xt
 = 
pSrc
[4*
i
+2];

191 
yt
 = 
pSrc
[4*
i
+3];

193 
p0
 <<= 1;

194 
p1
 <<= 1;

195 
xt
 <<= 1;

196 
yt
 <<= 1;

198 
pSrc
[4*
i
+0] = 
p0
;

199 
pSrc
[4*
i
+1] = 
p1
;

200 
pSrc
[4*
i
+2] = 
xt
;

201 
pSrc
[4*
i
+3] = 
yt
;

204 
	}
}

206 
	$¨m_cf·_ødix4by2_övî£_q31
(

207 
q31_t
 * 
pSrc
,

208 
uöt32_t
 
f·Lí
,

209 c⁄° 
q31_t
 * 
pC€f
)

211 
uöt32_t
 
i
, 
l
;

212 
uöt32_t
 
n2
, 
ü
;

213 
q31_t
 
xt
, 
yt
, 
cosVÆ
, 
söVÆ
;

214 
q31_t
 
p0
, 
p1
;

216 
n2
 = 
f·Lí
 >> 1;

217 
ü
 = 0;

218 
i
 = 0; i < 
n2
; i++)

220 
cosVÆ
 = 
pC€f
[2*
ü
];

221 
söVÆ
 = 
pC€f
[2*
ü
 + 1];

222 
ü
++;

224 
l
 = 
i
 + 
n2
;

225 
xt
 = (
pSrc
[2 * 
i
] >> 2Ë- (pSrc[2 * 
l
] >> 2);

226 
pSrc
[2 * 
i
] = (pSrc[2 * i] >> 2Ë+ (pSrc[2 * 
l
] >> 2);

228 
yt
 = (
pSrc
[2 * 
i
 + 1] >> 2Ë- (pSrc[2 * 
l
 + 1] >> 2);

229 
pSrc
[2 * 
i
 + 1] = (pSrc[2 * 
l
 + 1] >> 2) + (pSrc[2 * i + 1] >> 2);

231 
	`mu…_32x32_kìp32_R
(
p0
, 
xt
, 
cosVÆ
);

232 
	`mu…_32x32_kìp32_R
(
p1
, 
yt
, 
cosVÆ
);

233 
	`mu…Sub_32x32_kìp32_R
(
p0
, 
yt
, 
söVÆ
);

234 
	`mu…Acc_32x32_kìp32_R
(
p1
, 
xt
, 
söVÆ
);

236 
pSrc
[2u * 
l
] = 
p0
 << 1;

237 
pSrc
[2u * 
l
 + 1u] = 
p1
 << 1;

242 
	`¨m_ødix4_buâîÊy_övî£_q31
–
pSrc
, 
n2
, (
q31_t
*)
pC€f
, 2u);

244 
	`¨m_ødix4_buâîÊy_övî£_q31
–
pSrc
 + 
f·Lí
, 
n2
, (
q31_t
*)
pC€f
, 2u);

246 
i
 = 0; i < 
f·Lí
 >> 1; i++)

248 
p0
 = 
pSrc
[4*
i
+0];

249 
p1
 = 
pSrc
[4*
i
+1];

250 
xt
 = 
pSrc
[4*
i
+2];

251 
yt
 = 
pSrc
[4*
i
+3];

253 
p0
 <<= 1;

254 
p1
 <<= 1;

255 
xt
 <<= 1;

256 
yt
 <<= 1;

258 
pSrc
[4*
i
+0] = 
p0
;

259 
pSrc
[4*
i
+1] = 
p1
;

260 
pSrc
[4*
i
+2] = 
xt
;

261 
pSrc
[4*
i
+3] = 
yt
;

263 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix2_f32.c

42 
	~"¨m_m©h.h
"

44 
¨m_ødix2_buâîÊy_f32
(

45 
Êﬂt32_t
 * 
pSrc
,

46 
uöt32_t
 
f·Lí
,

47 
Êﬂt32_t
 * 
pC€f
,

48 
uöt16_t
 
twidC€fModifõr
);

50 
¨m_ødix2_buâîÊy_övî£_f32
(

51 
Êﬂt32_t
 * 
pSrc
,

52 
uöt32_t
 
f·Lí
,

53 
Êﬂt32_t
 * 
pC€f
,

54 
uöt16_t
 
twidC€fModifõr
,

55 
Êﬂt32_t
 
⁄ebyf·Lí
);

57 
¨m_bôªvîßl_f32
(

58 
Êﬂt32_t
 * 
pSrc
,

59 
uöt16_t
 
f·Size
,

60 
uöt16_t
 
bôRevFa˘‹
,

61 
uöt16_t
 * 
pBôRevTab
);

82 
	$¨m_cf·_ødix2_f32
(

83 c⁄° 
¨m_cf·_ødix2_ö°™˚_f32
 * 
S
,

84 
Êﬂt32_t
 * 
pSrc
)

87 if(
S
->
if·Fœg
 == 1u)

90 
	`¨m_ødix2_buâîÊy_övî£_f32
(
pSrc
, 
S
->
f·Lí
, S->
pTwiddÀ
,

91 
S
->
twidC€fModifõr
, S->
⁄ebyf·Lí
);

96 
	`¨m_ødix2_buâîÊy_f32
(
pSrc
, 
S
->
f·Lí
, S->
pTwiddÀ
,

97 
S
->
twidC€fModifõr
);

100 if(
S
->
bôRevî£Fœg
 == 1u)

103 
	`¨m_bôªvîßl_f32
(
pSrc
, 
S
->
f·Lí
, S->
bôRevFa˘‹
, S->
pBôRevTabÀ
);

106 
	}
}

128 
	$¨m_ødix2_buâîÊy_f32
(

129 
Êﬂt32_t
 * 
pSrc
,

130 
uöt32_t
 
f·Lí
,

131 
Êﬂt32_t
 * 
pC€f
,

132 
uöt16_t
 
twidC€fModifõr
)

135 
uöt32_t
 
i
, 
j
, 
k
, 
l
;

136 
uöt32_t
 
n1
, 
n2
, 
ü
;

137 
Êﬂt32_t
 
xt
, 
yt
, 
cosVÆ
, 
söVÆ
;

138 
Êﬂt32_t
 
p0
, 
p1
, 
p2
, 
p3
;

139 
Êﬂt32_t
 
a0
, 
a1
;

141 #i‚de‡
ARM_MATH_CM0_FAMILY


144 
n2
 = 
f·Lí
 >> 1;

145 
ü
 = 0;

146 
i
 = 0;

149 
k
 = 
n2
; k > 0; k--)

151 
cosVÆ
 = 
pC€f
[
ü
 * 2];

152 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

155 
ü
 +
twidC€fModifõr
;

159 
l
 = 
i
 + 
n2
;

162 
a0
 = 
pSrc
[2 * 
i
] +ÖSrc[2 * 
l
];

163 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

165 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

166 
a1
 = 
pSrc
[2 * 
l
 + 1] +ÖSrc[2 * 
i
 + 1];

168 
p0
 = 
xt
 * 
cosVÆ
;

169 
p1
 = 
yt
 * 
söVÆ
;

170 
p2
 = 
yt
 * 
cosVÆ
;

171 
p3
 = 
xt
 * 
söVÆ
;

173 
pSrc
[2 * 
i
] = 
a0
;

174 
pSrc
[2 * 
i
 + 1] = 
a1
;

176 
pSrc
[2 * 
l
] = 
p0
 + 
p1
;

177 
pSrc
[2 * 
l
 + 1] = 
p2
 - 
p3
;

179 
i
++;

182 
twidC€fModifõr
 <<= 1u;

185 
k
 = 
n2
; k > 2; k = k >> 1)

187 
n1
 = 
n2
;

188 
n2
 =Ç2 >> 1;

189 
ü
 = 0;

192 
j
 = 0;

195 
cosVÆ
 = 
pC€f
[
ü
 * 2];

196 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

197 
ü
 +
twidC€fModifõr
;

200 
i
 = 
j
;

203 
l
 = 
i
 + 
n2
;

204 
a0
 = 
pSrc
[2 * 
i
] +ÖSrc[2 * 
l
];

205 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

207 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

208 
a1
 = 
pSrc
[2 * 
l
 + 1] +ÖSrc[2 * 
i
 + 1];

210 
p0
 = 
xt
 * 
cosVÆ
;

211 
p1
 = 
yt
 * 
söVÆ
;

212 
p2
 = 
yt
 * 
cosVÆ
;

213 
p3
 = 
xt
 * 
söVÆ
;

215 
pSrc
[2 * 
i
] = 
a0
;

216 
pSrc
[2 * 
i
 + 1] = 
a1
;

218 
pSrc
[2 * 
l
] = 
p0
 + 
p1
;

219 
pSrc
[2 * 
l
 + 1] = 
p2
 - 
p3
;

221 
i
 +
n1
;

222 }  
i
 < 
f·Lí
 );

223 
j
++;

224 }  
j
 < 
n2
);

225 
twidC€fModifõr
 <<= 1u;

229 
i
 = 0; i < 
f·Lí
; i += 2)

231 
a0
 = 
pSrc
[2 * 
i
] +ÖSrc[2 * i + 2];

232 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * i + 2];

234 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * i + 3];

235 
a1
 = 
pSrc
[2 * 
i
 + 3] +ÖSrc[2 * i + 1];

237 
pSrc
[2 * 
i
] = 
a0
;

238 
pSrc
[2 * 
i
 + 1] = 
a1
;

239 
pSrc
[2 * 
i
 + 2] = 
xt
;

240 
pSrc
[2 * 
i
 + 3] = 
yt
;

245 
n2
 = 
f·Lí
;

248 
k
 = 
f·Lí
; k > 1; k = k >> 1)

250 
n1
 = 
n2
;

251 
n2
 =Ç2 >> 1;

252 
ü
 = 0;

255 
j
 = 0;

258 
cosVÆ
 = 
pC€f
[
ü
 * 2];

259 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

260 
ü
 +
twidC€fModifõr
;

263 
i
 = 
j
;

266 
l
 = 
i
 + 
n2
;

267 
a0
 = 
pSrc
[2 * 
i
] +ÖSrc[2 * 
l
];

268 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

270 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

271 
a1
 = 
pSrc
[2 * 
l
 + 1] +ÖSrc[2 * 
i
 + 1];

273 
p0
 = 
xt
 * 
cosVÆ
;

274 
p1
 = 
yt
 * 
söVÆ
;

275 
p2
 = 
yt
 * 
cosVÆ
;

276 
p3
 = 
xt
 * 
söVÆ
;

278 
pSrc
[2 * 
i
] = 
a0
;

279 
pSrc
[2 * 
i
 + 1] = 
a1
;

281 
pSrc
[2 * 
l
] = 
p0
 + 
p1
;

282 
pSrc
[2 * 
l
 + 1] = 
p2
 - 
p3
;

284 
i
 +
n1
;

285 } 
i
 < 
f·Lí
);

286 
j
++;

287 } 
j
 < 
n2
);

288 
twidC€fModifõr
 <<= 1u;

293 
	}
}

296 
	$¨m_ødix2_buâîÊy_övî£_f32
(

297 
Êﬂt32_t
 * 
pSrc
,

298 
uöt32_t
 
f·Lí
,

299 
Êﬂt32_t
 * 
pC€f
,

300 
uöt16_t
 
twidC€fModifõr
,

301 
Êﬂt32_t
 
⁄ebyf·Lí
)

304 
uöt32_t
 
i
, 
j
, 
k
, 
l
;

305 
uöt32_t
 
n1
, 
n2
, 
ü
;

306 
Êﬂt32_t
 
xt
, 
yt
, 
cosVÆ
, 
söVÆ
;

307 
Êﬂt32_t
 
p0
, 
p1
, 
p2
, 
p3
;

308 
Êﬂt32_t
 
a0
, 
a1
;

310 #i‚de‡
ARM_MATH_CM0_FAMILY


312 
n2
 = 
f·Lí
 >> 1;

313 
ü
 = 0;

316 
i
 = 0; i < 
n2
; i++)

318 
cosVÆ
 = 
pC€f
[
ü
 * 2];

319 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

320 
ü
 +
twidC€fModifõr
;

322 
l
 = 
i
 + 
n2
;

323 
a0
 = 
pSrc
[2 * 
i
] +ÖSrc[2 * 
l
];

324 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

326 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

327 
a1
 = 
pSrc
[2 * 
l
 + 1] +ÖSrc[2 * 
i
 + 1];

329 
p0
 = 
xt
 * 
cosVÆ
;

330 
p1
 = 
yt
 * 
söVÆ
;

331 
p2
 = 
yt
 * 
cosVÆ
;

332 
p3
 = 
xt
 * 
söVÆ
;

334 
pSrc
[2 * 
i
] = 
a0
;

335 
pSrc
[2 * 
i
 + 1] = 
a1
;

337 
pSrc
[2 * 
l
] = 
p0
 - 
p1
;

338 
pSrc
[2 * 
l
 + 1] = 
p2
 + 
p3
;

341 
twidC€fModifõr
 <<= 1u;

344 
k
 = 
f·Lí
 / 2; k > 2; k = k >> 1)

346 
n1
 = 
n2
;

347 
n2
 =Ç2 >> 1;

348 
ü
 = 0;

351 
j
 = 0;

354 
cosVÆ
 = 
pC€f
[
ü
 * 2];

355 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

356 
ü
 +
twidC€fModifõr
;

359 
i
 = 
j
;

362 
l
 = 
i
 + 
n2
;

363 
a0
 = 
pSrc
[2 * 
i
] +ÖSrc[2 * 
l
];

364 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

366 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

367 
a1
 = 
pSrc
[2 * 
l
 + 1] +ÖSrc[2 * 
i
 + 1];

369 
p0
 = 
xt
 * 
cosVÆ
;

370 
p1
 = 
yt
 * 
söVÆ
;

371 
p2
 = 
yt
 * 
cosVÆ
;

372 
p3
 = 
xt
 * 
söVÆ
;

374 
pSrc
[2 * 
i
] = 
a0
;

375 
pSrc
[2 * 
i
 + 1] = 
a1
;

377 
pSrc
[2 * 
l
] = 
p0
 - 
p1
;

378 
pSrc
[2 * 
l
 + 1] = 
p2
 + 
p3
;

380 
i
 +
n1
;

381 }  
i
 < 
f·Lí
 );

382 
j
++;

383 } 
j
 < 
n2
);

385 
twidC€fModifõr
 <<= 1u;

389 
i
 = 0; i < 
f·Lí
; i += 2)

391 
a0
 = 
pSrc
[2 * 
i
] +ÖSrc[2 * i + 2];

392 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * i + 2];

394 
a1
 = 
pSrc
[2 * 
i
 + 3] +ÖSrc[2 * i + 1];

395 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * i + 3];

397 
p0
 = 
a0
 * 
⁄ebyf·Lí
;

398 
p2
 = 
xt
 * 
⁄ebyf·Lí
;

399 
p1
 = 
a1
 * 
⁄ebyf·Lí
;

400 
p3
 = 
yt
 * 
⁄ebyf·Lí
;

402 
pSrc
[2 * 
i
] = 
p0
;

403 
pSrc
[2 * 
i
 + 1] = 
p1
;

404 
pSrc
[2 * 
i
 + 2] = 
p2
;

405 
pSrc
[2 * 
i
 + 3] = 
p3
;

410 
n2
 = 
f·Lí
;

413 
k
 = 
f·Lí
; k > 2; k = k >> 1)

415 
n1
 = 
n2
;

416 
n2
 =Ç2 >> 1;

417 
ü
 = 0;

420 
j
 = 0;

423 
cosVÆ
 = 
pC€f
[
ü
 * 2];

424 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

425 
ü
 = i®+ 
twidC€fModifõr
;

428 
i
 = 
j
;

431 
l
 = 
i
 + 
n2
;

432 
a0
 = 
pSrc
[2 * 
i
] +ÖSrc[2 * 
l
];

433 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

435 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

436 
a1
 = 
pSrc
[2 * 
l
 + 1] +ÖSrc[2 * 
i
 + 1];

438 
p0
 = 
xt
 * 
cosVÆ
;

439 
p1
 = 
yt
 * 
söVÆ
;

440 
p2
 = 
yt
 * 
cosVÆ
;

441 
p3
 = 
xt
 * 
söVÆ
;

443 
pSrc
[2 * 
i
] = 
a0
;

444 
pSrc
[2 * 
i
 + 1] = 
a1
;

446 
pSrc
[2 * 
l
] = 
p0
 - 
p1
;

447 
pSrc
[2 * 
l
 + 1] = 
p2
 + 
p3
;

449 
i
 +
n1
;

450 }  
i
 < 
f·Lí
 );

451 
j
++;

452 }  
j
 < 
n2
 );

454 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

457 
n1
 = 
n2
;

458 
n2
 =Ç2 >> 1;

461 
i
 = 0; i < 
f·Lí
; i +
n1
)

463 
l
 = 
i
 + 
n2
;

465 
a0
 = 
pSrc
[2 * 
i
] +ÖSrc[2 * 
l
];

466 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

468 
a1
 = 
pSrc
[2 * 
l
 + 1] +ÖSrc[2 * 
i
 + 1];

469 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

471 
p0
 = 
a0
 * 
⁄ebyf·Lí
;

472 
p2
 = 
xt
 * 
⁄ebyf·Lí
;

473 
p1
 = 
a1
 * 
⁄ebyf·Lí
;

474 
p3
 = 
yt
 * 
⁄ebyf·Lí
;

476 
pSrc
[2 * 
i
] = 
p0
;

477 
pSrc
[2u * 
l
] = 
p2
;

479 
pSrc
[2 * 
i
 + 1] = 
p1
;

480 
pSrc
[2u * 
l
 + 1u] = 
p3
;

485 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix2_init_f32.c

42 
	~"¨m_m©h.h
"

43 
	~"¨m_comm⁄_èbÀs.h
"

76 
¨m_°©us
 
	$¨m_cf·_ødix2_öô_f32
(

77 
¨m_cf·_ødix2_ö°™˚_f32
 * 
S
,

78 
uöt16_t
 
f·Lí
,

79 
uöt8_t
 
if·Fœg
,

80 
uöt8_t
 
bôRevî£Fœg
)

83 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

86 
S
->
f·Lí
 = fftLen;

89 
S
->
pTwiddÀ
 = (
Êﬂt32_t
 *Ë
twiddÀC€f
;

92 
S
->
if·Fœg
 = ifftFlag;

95 
S
->
bôRevî£Fœg
 = bitReverseFlag;

98 
S
->
f·Lí
)

105 
S
->
twidC€fModifõr
 = 1u;

107 
S
->
bôRevFa˘‹
 = 1u;

109 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë
¨mBôRevTabÀ
;

111 
S
->
⁄ebyf·Lí
 = 0.000244140625;

118 
S
->
twidC€fModifõr
 = 2u;

120 
S
->
bôRevFa˘‹
 = 2u;

122 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[1];

124 
S
->
⁄ebyf·Lí
 = 0.00048828125;

131 
S
->
twidC€fModifõr
 = 4u;

133 
S
->
bôRevFa˘‹
 = 4u;

135 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[3];

137 
S
->
⁄ebyf·Lí
 = 0.0009765625f;

144 
S
->
twidC€fModifõr
 = 8u;

146 
S
->
bôRevFa˘‹
 = 8u;

148 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[7];

150 
S
->
⁄ebyf·Lí
 = 0.001953125;

155 
S
->
twidC€fModifõr
 = 16u;

156 
S
->
bôRevFa˘‹
 = 16u;

157 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[15];

158 
S
->
⁄ebyf·Lí
 = 0.00390625f;

163 
S
->
twidC€fModifõr
 = 32u;

164 
S
->
bôRevFa˘‹
 = 32u;

165 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[31];

166 
S
->
⁄ebyf·Lí
 = 0.0078125;

171 
S
->
twidC€fModifõr
 = 64u;

172 
S
->
bôRevFa˘‹
 = 64u;

173 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[63];

174 
S
->
⁄ebyf·Lí
 = 0.015625f;

179 
S
->
twidC€fModifõr
 = 128u;

180 
S
->
bôRevFa˘‹
 = 128u;

181 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[127];

182 
S
->
⁄ebyf·Lí
 = 0.03125;

187 
S
->
twidC€fModifõr
 = 256u;

188 
S
->
bôRevFa˘‹
 = 256u;

189 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[255];

190 
S
->
⁄ebyf·Lí
 = 0.0625f;

196 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

200  (
°©us
);

201 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix2_init_q15.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

76 
¨m_°©us
 
	$¨m_cf·_ødix2_öô_q15
(

77 
¨m_cf·_ødix2_ö°™˚_q15
 * 
S
,

78 
uöt16_t
 
f·Lí
,

79 
uöt8_t
 
if·Fœg
,

80 
uöt8_t
 
bôRevî£Fœg
)

83 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

86 
S
->
f·Lí
 = fftLen;

89 
S
->
pTwiddÀ
 = (
q15_t
 *Ë
twiddÀC€f_4096_q15
;

91 
S
->
if·Fœg
 = ifftFlag;

93 
S
->
bôRevî£Fœg
 = bitReverseFlag;

96 
S
->
f·Lí
)

102 
S
->
twidC€fModifõr
 = 1u;

104 
S
->
bôRevFa˘‹
 = 1u;

106 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë
¨mBôRevTabÀ
;

114 
S
->
twidC€fModifõr
 = 2u;

116 
S
->
bôRevFa˘‹
 = 2u;

118 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[1];

124 
S
->
twidC€fModifõr
 = 4u;

125 
S
->
bôRevFa˘‹
 = 4u;

126 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[3];

132 
S
->
twidC€fModifõr
 = 8u;

133 
S
->
bôRevFa˘‹
 = 8u;

134 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[7];

140 
S
->
twidC€fModifõr
 = 16u;

141 
S
->
bôRevFa˘‹
 = 16u;

142 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[15];

148 
S
->
twidC€fModifõr
 = 32u;

149 
S
->
bôRevFa˘‹
 = 32u;

150 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[31];

156 
S
->
twidC€fModifõr
 = 64u;

157 
S
->
bôRevFa˘‹
 = 64u;

158 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[63];

164 
S
->
twidC€fModifõr
 = 128u;

165 
S
->
bôRevFa˘‹
 = 128u;

166 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[127];

172 
S
->
twidC€fModifõr
 = 256u;

173 
S
->
bôRevFa˘‹
 = 256u;

174 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[255];

180 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

184  (
°©us
);

185 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix2_init_q31.c

42 
	~"¨m_m©h.h
"

43 
	~"¨m_comm⁄_èbÀs.h
"

78 
¨m_°©us
 
	$¨m_cf·_ødix2_öô_q31
(

79 
¨m_cf·_ødix2_ö°™˚_q31
 * 
S
,

80 
uöt16_t
 
f·Lí
,

81 
uöt8_t
 
if·Fœg
,

82 
uöt8_t
 
bôRevî£Fœg
)

85 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

88 
S
->
f·Lí
 = fftLen;

91 
S
->
pTwiddÀ
 = (
q31_t
 *Ë
twiddÀC€f_4096_q31
;

93 
S
->
if·Fœg
 = ifftFlag;

95 
S
->
bôRevî£Fœg
 = bitReverseFlag;

98 
S
->
f·Lí
)

103 
S
->
twidC€fModifõr
 = 1u;

105 
S
->
bôRevFa˘‹
 = 1u;

107 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë
¨mBôRevTabÀ
;

113 
S
->
twidC€fModifõr
 = 2u;

115 
S
->
bôRevFa˘‹
 = 2u;

117 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[1];

123 
S
->
twidC€fModifõr
 = 4u;

125 
S
->
bôRevFa˘‹
 = 4u;

127 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[3];

133 
S
->
twidC€fModifõr
 = 8u;

135 
S
->
bôRevFa˘‹
 = 8u;

137 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[7];

142 
S
->
twidC€fModifõr
 = 16u;

143 
S
->
bôRevFa˘‹
 = 16u;

144 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[15];

149 
S
->
twidC€fModifõr
 = 32u;

150 
S
->
bôRevFa˘‹
 = 32u;

151 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[31];

156 
S
->
twidC€fModifõr
 = 64u;

157 
S
->
bôRevFa˘‹
 = 64u;

158 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[63];

163 
S
->
twidC€fModifõr
 = 128u;

164 
S
->
bôRevFa˘‹
 = 128u;

165 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[127];

170 
S
->
twidC€fModifõr
 = 256u;

171 
S
->
bôRevFa˘‹
 = 256u;

172 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[255];

178 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

182  (
°©us
);

183 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix2_q15.c

42 
	~"¨m_m©h.h
"

44 
¨m_ødix2_buâîÊy_q15
(

45 
q15_t
 * 
pSrc
,

46 
uöt32_t
 
f·Lí
,

47 
q15_t
 * 
pC€f
,

48 
uöt16_t
 
twidC€fModifõr
);

50 
¨m_ødix2_buâîÊy_övî£_q15
(

51 
q15_t
 * 
pSrc
,

52 
uöt32_t
 
f·Lí
,

53 
q15_t
 * 
pC€f
,

54 
uöt16_t
 
twidC€fModifõr
);

56 
¨m_bôªvîßl_q15
(

57 
q15_t
 * 
pSrc
,

58 
uöt32_t
 
f·Lí
,

59 
uöt16_t
 
bôRevFa˘‹
,

60 
uöt16_t
 * 
pBôRevTab
);

80 
	$¨m_cf·_ødix2_q15
(

81 c⁄° 
¨m_cf·_ødix2_ö°™˚_q15
 * 
S
,

82 
q15_t
 * 
pSrc
)

85 if(
S
->
if·Fœg
 == 1u)

87 
	`¨m_ødix2_buâîÊy_övî£_q15
(
pSrc
, 
S
->
f·Lí
,

88 
S
->
pTwiddÀ
, S->
twidC€fModifõr
);

92 
	`¨m_ødix2_buâîÊy_q15
(
pSrc
, 
S
->
f·Lí
,

93 
S
->
pTwiddÀ
, S->
twidC€fModifõr
);

96 
	`¨m_bôªvîßl_q15
(
pSrc
, 
S
->
f·Lí
, S->
bôRevFa˘‹
, S->
pBôRevTabÀ
);

97 
	}
}

103 
	$¨m_ødix2_buâîÊy_q15
(

104 
q15_t
 * 
pSrc
,

105 
uöt32_t
 
f·Lí
,

106 
q15_t
 * 
pC€f
,

107 
uöt16_t
 
twidC€fModifõr
)

109 #i‚de‡
ARM_MATH_CM0_FAMILY


111 
i
, 
j
, 
k
, 
l
;

112 
n1
, 
n2
, 
ü
;

113 
q15_t
 
ö
;

114 
q31_t
 
T
, 
S
, 
R
;

115 
q31_t
 
c€ff
, 
out1
, 
out2
;

118 
n2
 = 
f·Lí
;

120 
n1
 = 
n2
;

121 
n2
 =Ç2 >> 1;

122 
ü
 = 0;

125 
i
 = 0; i < 
n2
; i++)

127 
c€ff
 = 
	`_SIMD32_OFFSET
(
pC€f
 + (
ü
 * 2u));

129 
ü
 = i®+ 
twidC€fModifõr
;

131 
l
 = 
i
 + 
n2
;

133 
T
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
));

134 
ö
 = ((
öt16_t
Ë(
T
 & 0xFFFF)) >> 1;

135 
T
 = ((T >> 1Ë& 0xFFFF0000Ë| (
ö
 & 0xFFFF);

137 
S
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
l
));

138 
ö
 = ((
öt16_t
Ë(
S
 & 0xFFFF)) >> 1;

139 
S
 = ((S >> 1Ë& 0xFFFF0000Ë| (
ö
 & 0xFFFF);

141 
R
 = 
	`__QSUB16
(
T
, 
S
);

143 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
)Ë
	`__SHADD16
(
T
, 
S
);

145 #i‚de‡
ARM_MATH_BIG_ENDIAN


147 
out1
 = 
	`__SMUAD
(
c€ff
, 
R
) >> 16;

148 
out2
 = 
	`__SMUSDX
(
c€ff
, 
R
);

152 
out1
 = 
	`__SMUSDX
(
R
, 
c€ff
) >> 16u;

153 
out2
 = 
	`__SMUAD
(
c€ff
, 
R
);

157 
	`_SIMD32_OFFSET
(
pSrc
 + (2u * 
l
)) =

158 (
q31_t
Ë((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

160 
c€ff
 = 
	`_SIMD32_OFFSET
(
pC€f
 + (
ü
 * 2u));

162 
ü
 = i®+ 
twidC€fModifõr
;

165 
i
++;

166 
l
++;

168 
T
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
));

169 
ö
 = ((
öt16_t
Ë(
T
 & 0xFFFF)) >> 1;

170 
T
 = ((T >> 1Ë& 0xFFFF0000Ë| (
ö
 & 0xFFFF);

172 
S
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
l
));

173 
ö
 = ((
öt16_t
Ë(
S
 & 0xFFFF)) >> 1;

174 
S
 = ((S >> 1Ë& 0xFFFF0000Ë| (
ö
 & 0xFFFF);

176 
R
 = 
	`__QSUB16
(
T
, 
S
);

178 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
)Ë
	`__SHADD16
(
T
, 
S
);

180 #i‚de‡
ARM_MATH_BIG_ENDIAN


182 
out1
 = 
	`__SMUAD
(
c€ff
, 
R
) >> 16;

183 
out2
 = 
	`__SMUSDX
(
c€ff
, 
R
);

187 
out1
 = 
	`__SMUSDX
(
R
, 
c€ff
) >> 16u;

188 
out2
 = 
	`__SMUAD
(
c€ff
, 
R
);

192 
	`_SIMD32_OFFSET
(
pSrc
 + (2u * 
l
)) =

193 (
q31_t
Ë((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

197 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

200 
k
 = 
f·Lí
 / 2; k > 2; k = k >> 1)

202 
n1
 = 
n2
;

203 
n2
 =Ç2 >> 1;

204 
ü
 = 0;

207 
j
 = 0; j < 
n2
; j++)

209 
c€ff
 = 
	`_SIMD32_OFFSET
(
pC€f
 + (
ü
 * 2u));

211 
ü
 = i®+ 
twidC€fModifõr
;

214 
i
 = 
j
; i < 
f·Lí
; i +
n1
)

216 
l
 = 
i
 + 
n2
;

218 
T
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
));

220 
S
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
l
));

222 
R
 = 
	`__QSUB16
(
T
, 
S
);

224 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
)Ë
	`__SHADD16
(
T
, 
S
);

226 #i‚de‡
ARM_MATH_BIG_ENDIAN


228 
out1
 = 
	`__SMUAD
(
c€ff
, 
R
) >> 16;

229 
out2
 = 
	`__SMUSDX
(
c€ff
, 
R
);

233 
out1
 = 
	`__SMUSDX
(
R
, 
c€ff
) >> 16u;

234 
out2
 = 
	`__SMUAD
(
c€ff
, 
R
);

238 
	`_SIMD32_OFFSET
(
pSrc
 + (2u * 
l
)) =

239 (
q31_t
Ë((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

241 
i
 +
n1
;

243 
l
 = 
i
 + 
n2
;

245 
T
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
));

247 
S
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
l
));

249 
R
 = 
	`__QSUB16
(
T
, 
S
);

251 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
)Ë
	`__SHADD16
(
T
, 
S
);

253 #i‚de‡
ARM_MATH_BIG_ENDIAN


255 
out1
 = 
	`__SMUAD
(
c€ff
, 
R
) >> 16;

256 
out2
 = 
	`__SMUSDX
(
c€ff
, 
R
);

260 
out1
 = 
	`__SMUSDX
(
R
, 
c€ff
) >> 16u;

261 
out2
 = 
	`__SMUAD
(
c€ff
, 
R
);

265 
	`_SIMD32_OFFSET
(
pSrc
 + (2u * 
l
)) =

266 (
q31_t
Ë((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

272 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

275 
n1
 = 
n2
;

276 
n2
 =Ç2 >> 1;

277 
ü
 = 0;

279 
c€ff
 = 
	`_SIMD32_OFFSET
(
pC€f
 + (
ü
 * 2u));

281 
ü
 = i®+ 
twidC€fModifõr
;

284 
i
 = 0; i < 
f·Lí
; i +
n1
)

286 
l
 = 
i
 + 
n2
;

288 
T
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
));

290 
S
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
l
));

292 
R
 = 
	`__QSUB16
(
T
, 
S
);

294 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
)Ë
	`__QADD16
(
T
, 
S
);

296 
	`_SIMD32_OFFSET
(
pSrc
 + (2u * 
l
)Ë
R
;

298 
i
 +
n1
;

299 
l
 = 
i
 + 
n2
;

301 
T
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
));

303 
S
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
l
));

305 
R
 = 
	`__QSUB16
(
T
, 
S
);

307 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
)Ë
	`__QADD16
(
T
, 
S
);

309 
	`_SIMD32_OFFSET
(
pSrc
 + (2u * 
l
)Ë
R
;

316 
i
, 
j
, 
k
, 
l
;

317 
n1
, 
n2
, 
ü
;

318 
q15_t
 
xt
, 
yt
, 
cosVÆ
, 
söVÆ
;

322 
n2
 = 
f·Lí
;

324 
n1
 = 
n2
;

325 
n2
 =Ç2 >> 1;

326 
ü
 = 0;

329 
j
 = 0; j < 
n2
; j++)

331 
cosVÆ
 = 
pC€f
[
ü
 * 2];

332 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

333 
ü
 = i®+ 
twidC€fModifõr
;

336 
i
 = 
j
; i < 
f·Lí
; i +
n1
)

338 
l
 = 
i
 + 
n2
;

339 
xt
 = (
pSrc
[2 * 
i
] >> 1uË- (pSrc[2 * 
l
] >> 1u);

340 
pSrc
[2 * 
i
] = (’Src[2 * i] >> 1uË+ (pSrc[2 * 
l
] >> 1u)) >> 1u;

342 
yt
 = (
pSrc
[2 * 
i
 + 1] >> 1uË- (pSrc[2 * 
l
 + 1] >> 1u);

343 
pSrc
[2 * 
i
 + 1] =

344 ((
pSrc
[2 * 
l
 + 1] >> 1uË+ (pSrc[2 * 
i
 + 1] >> 1u)) >> 1u;

346 
pSrc
[2u * 
l
] = (((
öt16_t
Ë(((
q31_t
Ë
xt
 * 
cosVÆ
) >> 16)) +

347 ((
öt16_t
Ë(((
q31_t
Ë
yt
 * 
söVÆ
) >> 16)));

349 
pSrc
[2u * 
l
 + 1u] = (((
öt16_t
Ë(((
q31_t
Ë
yt
 * 
cosVÆ
) >> 16)) -

350 ((
öt16_t
Ë(((
q31_t
Ë
xt
 * 
söVÆ
) >> 16)));

356 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

359 
k
 = 
f·Lí
 / 2; k > 2; k = k >> 1)

361 
n1
 = 
n2
;

362 
n2
 =Ç2 >> 1;

363 
ü
 = 0;

366 
j
 = 0; j < 
n2
; j++)

368 
cosVÆ
 = 
pC€f
[
ü
 * 2];

369 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

370 
ü
 = i®+ 
twidC€fModifõr
;

373 
i
 = 
j
; i < 
f·Lí
; i +
n1
)

375 
l
 = 
i
 + 
n2
;

376 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

377 
pSrc
[2 * 
i
] = (pSrc[2 * i] +ÖSrc[2 * 
l
]) >> 1u;

379 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

380 
pSrc
[2 * 
i
 + 1] = (pSrc[2 * 
l
 + 1] +ÖSrc[2 * i + 1]) >> 1u;

382 
pSrc
[2u * 
l
] = (((
öt16_t
Ë(((
q31_t
Ë
xt
 * 
cosVÆ
) >> 16)) +

383 ((
öt16_t
Ë(((
q31_t
Ë
yt
 * 
söVÆ
) >> 16)));

385 
pSrc
[2u * 
l
 + 1u] = (((
öt16_t
Ë(((
q31_t
Ë
yt
 * 
cosVÆ
) >> 16)) -

386 ((
öt16_t
Ë(((
q31_t
Ë
xt
 * 
söVÆ
) >> 16)));

392 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

395 
n1
 = 
n2
;

396 
n2
 =Ç2 >> 1;

397 
ü
 = 0;

400 
j
 = 0; j < 
n2
; j++)

402 
cosVÆ
 = 
pC€f
[
ü
 * 2];

403 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

405 
ü
 = i®+ 
twidC€fModifõr
;

408 
i
 = 
j
; i < 
f·Lí
; i +
n1
)

410 
l
 = 
i
 + 
n2
;

411 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

412 
pSrc
[2 * 
i
] = (pSrc[2 * i] +ÖSrc[2 * 
l
]);

414 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

415 
pSrc
[2 * 
i
 + 1] = (pSrc[2 * 
l
 + 1] +ÖSrc[2 * i + 1]);

417 
pSrc
[2u * 
l
] = 
xt
;

419 
pSrc
[2u * 
l
 + 1u] = 
yt
;

425 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

429 
	}
}

432 
	$¨m_ødix2_buâîÊy_övî£_q15
(

433 
q15_t
 * 
pSrc
,

434 
uöt32_t
 
f·Lí
,

435 
q15_t
 * 
pC€f
,

436 
uöt16_t
 
twidC€fModifõr
)

438 #i‚de‡
ARM_MATH_CM0_FAMILY


440 
i
, 
j
, 
k
, 
l
;

441 
n1
, 
n2
, 
ü
;

442 
q15_t
 
ö
;

443 
q31_t
 
T
, 
S
, 
R
;

444 
q31_t
 
c€ff
, 
out1
, 
out2
;

447 
n2
 = 
f·Lí
;

449 
n1
 = 
n2
;

450 
n2
 =Ç2 >> 1;

451 
ü
 = 0;

454 
i
 = 0; i < 
n2
; i++)

456 
c€ff
 = 
	`_SIMD32_OFFSET
(
pC€f
 + (
ü
 * 2u));

458 
ü
 = i®+ 
twidC€fModifõr
;

460 
l
 = 
i
 + 
n2
;

462 
T
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
));

463 
ö
 = ((
öt16_t
Ë(
T
 & 0xFFFF)) >> 1;

464 
T
 = ((T >> 1Ë& 0xFFFF0000Ë| (
ö
 & 0xFFFF);

466 
S
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
l
));

467 
ö
 = ((
öt16_t
Ë(
S
 & 0xFFFF)) >> 1;

468 
S
 = ((S >> 1Ë& 0xFFFF0000Ë| (
ö
 & 0xFFFF);

470 
R
 = 
	`__QSUB16
(
T
, 
S
);

472 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
)Ë
	`__SHADD16
(
T
, 
S
);

474 #i‚de‡
ARM_MATH_BIG_ENDIAN


476 
out1
 = 
	`__SMUSD
(
c€ff
, 
R
) >> 16;

477 
out2
 = 
	`__SMUADX
(
c€ff
, 
R
);

480 
out1
 = 
	`__SMUADX
(
R
, 
c€ff
) >> 16u;

481 
out2
 = 
	`__SMUSD
(
	`__QSUB
(0, 
c€ff
), 
R
);

485 
	`_SIMD32_OFFSET
(
pSrc
 + (2u * 
l
)) =

486 (
q31_t
Ë((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

488 
c€ff
 = 
	`_SIMD32_OFFSET
(
pC€f
 + (
ü
 * 2u));

490 
ü
 = i®+ 
twidC€fModifõr
;

493 
i
++;

494 
l
++;

496 
T
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
));

497 
ö
 = ((
öt16_t
Ë(
T
 & 0xFFFF)) >> 1;

498 
T
 = ((T >> 1Ë& 0xFFFF0000Ë| (
ö
 & 0xFFFF);

500 
S
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
l
));

501 
ö
 = ((
öt16_t
Ë(
S
 & 0xFFFF)) >> 1;

502 
S
 = ((S >> 1Ë& 0xFFFF0000Ë| (
ö
 & 0xFFFF);

504 
R
 = 
	`__QSUB16
(
T
, 
S
);

506 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
)Ë
	`__SHADD16
(
T
, 
S
);

508 #i‚de‡
ARM_MATH_BIG_ENDIAN


510 
out1
 = 
	`__SMUSD
(
c€ff
, 
R
) >> 16;

511 
out2
 = 
	`__SMUADX
(
c€ff
, 
R
);

514 
out1
 = 
	`__SMUADX
(
R
, 
c€ff
) >> 16u;

515 
out2
 = 
	`__SMUSD
(
	`__QSUB
(0, 
c€ff
), 
R
);

519 
	`_SIMD32_OFFSET
(
pSrc
 + (2u * 
l
)) =

520 (
q31_t
Ë((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

524 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

527 
k
 = 
f·Lí
 / 2; k > 2; k = k >> 1)

529 
n1
 = 
n2
;

530 
n2
 =Ç2 >> 1;

531 
ü
 = 0;

534 
j
 = 0; j < 
n2
; j++)

536 
c€ff
 = 
	`_SIMD32_OFFSET
(
pC€f
 + (
ü
 * 2u));

538 
ü
 = i®+ 
twidC€fModifõr
;

541 
i
 = 
j
; i < 
f·Lí
; i +
n1
)

543 
l
 = 
i
 + 
n2
;

545 
T
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
));

547 
S
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
l
));

549 
R
 = 
	`__QSUB16
(
T
, 
S
);

551 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
)Ë
	`__SHADD16
(
T
, 
S
);

553 #i‚de‡
ARM_MATH_BIG_ENDIAN


555 
out1
 = 
	`__SMUSD
(
c€ff
, 
R
) >> 16;

556 
out2
 = 
	`__SMUADX
(
c€ff
, 
R
);

560 
out1
 = 
	`__SMUADX
(
R
, 
c€ff
) >> 16u;

561 
out2
 = 
	`__SMUSD
(
	`__QSUB
(0, 
c€ff
), 
R
);

565 
	`_SIMD32_OFFSET
(
pSrc
 + (2u * 
l
)) =

566 (
q31_t
Ë((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

568 
i
 +
n1
;

570 
l
 = 
i
 + 
n2
;

572 
T
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
));

574 
S
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
l
));

576 
R
 = 
	`__QSUB16
(
T
, 
S
);

578 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
)Ë
	`__SHADD16
(
T
, 
S
);

580 #i‚de‡
ARM_MATH_BIG_ENDIAN


582 
out1
 = 
	`__SMUSD
(
c€ff
, 
R
) >> 16;

583 
out2
 = 
	`__SMUADX
(
c€ff
, 
R
);

586 
out1
 = 
	`__SMUADX
(
R
, 
c€ff
) >> 16u;

587 
out2
 = 
	`__SMUSD
(
	`__QSUB
(0, 
c€ff
), 
R
);

591 
	`_SIMD32_OFFSET
(
pSrc
 + (2u * 
l
)) =

592 (
q31_t
Ë((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

598 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

601 
n1
 = 
n2
;

602 
n2
 =Ç2 >> 1;

603 
ü
 = 0;

606 
j
 = 0; j < 
n2
; j++)

608 
c€ff
 = 
	`_SIMD32_OFFSET
(
pC€f
 + (
ü
 * 2u));

610 
ü
 = i®+ 
twidC€fModifõr
;

613 
i
 = 
j
; i < 
f·Lí
; i +
n1
)

615 
l
 = 
i
 + 
n2
;

617 
T
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
));

619 
S
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
l
));

621 
R
 = 
	`__QSUB16
(
T
, 
S
);

623 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
)Ë
	`__QADD16
(
T
, 
S
);

625 
	`_SIMD32_OFFSET
(
pSrc
 + (2u * 
l
)Ë
R
;

631 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

636 
i
, 
j
, 
k
, 
l
;

637 
n1
, 
n2
, 
ü
;

638 
q15_t
 
xt
, 
yt
, 
cosVÆ
, 
söVÆ
;

641 
n2
 = 
f·Lí
;

643 
n1
 = 
n2
;

644 
n2
 =Ç2 >> 1;

645 
ü
 = 0;

648 
j
 = 0; j < 
n2
; j++)

650 
cosVÆ
 = 
pC€f
[
ü
 * 2];

651 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

652 
ü
 = i®+ 
twidC€fModifõr
;

655 
i
 = 
j
; i < 
f·Lí
; i +
n1
)

657 
l
 = 
i
 + 
n2
;

658 
xt
 = (
pSrc
[2 * 
i
] >> 1uË- (pSrc[2 * 
l
] >> 1u);

659 
pSrc
[2 * 
i
] = (’Src[2 * i] >> 1uË+ (pSrc[2 * 
l
] >> 1u)) >> 1u;

661 
yt
 = (
pSrc
[2 * 
i
 + 1] >> 1uË- (pSrc[2 * 
l
 + 1] >> 1u);

662 
pSrc
[2 * 
i
 + 1] =

663 ((
pSrc
[2 * 
l
 + 1] >> 1uË+ (pSrc[2 * 
i
 + 1] >> 1u)) >> 1u;

665 
pSrc
[2u * 
l
] = (((
öt16_t
Ë(((
q31_t
Ë
xt
 * 
cosVÆ
) >> 16)) -

666 ((
öt16_t
Ë(((
q31_t
Ë
yt
 * 
söVÆ
) >> 16)));

668 
pSrc
[2u * 
l
 + 1u] = (((
öt16_t
Ë(((
q31_t
Ë
yt
 * 
cosVÆ
) >> 16)) +

669 ((
öt16_t
Ë(((
q31_t
Ë
xt
 * 
söVÆ
) >> 16)));

675 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

678 
k
 = 
f·Lí
 / 2; k > 2; k = k >> 1)

680 
n1
 = 
n2
;

681 
n2
 =Ç2 >> 1;

682 
ü
 = 0;

685 
j
 = 0; j < 
n2
; j++)

687 
cosVÆ
 = 
pC€f
[
ü
 * 2];

688 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

689 
ü
 = i®+ 
twidC€fModifõr
;

692 
i
 = 
j
; i < 
f·Lí
; i +
n1
)

694 
l
 = 
i
 + 
n2
;

695 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

696 
pSrc
[2 * 
i
] = (pSrc[2 * i] +ÖSrc[2 * 
l
]) >> 1u;

698 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

699 
pSrc
[2 * 
i
 + 1] = (pSrc[2 * 
l
 + 1] +ÖSrc[2 * i + 1]) >> 1u;

701 
pSrc
[2u * 
l
] = (((
öt16_t
Ë(((
q31_t
Ë
xt
 * 
cosVÆ
) >> 16)) -

702 ((
öt16_t
Ë(((
q31_t
Ë
yt
 * 
söVÆ
) >> 16)));

704 
pSrc
[2u * 
l
 + 1u] = (((
öt16_t
Ë(((
q31_t
Ë
yt
 * 
cosVÆ
) >> 16)) +

705 ((
öt16_t
Ë(((
q31_t
Ë
xt
 * 
söVÆ
) >> 16)));

711 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

714 
n1
 = 
n2
;

715 
n2
 =Ç2 >> 1;

716 
ü
 = 0;

718 
cosVÆ
 = 
pC€f
[
ü
 * 2];

719 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

721 
ü
 = i®+ 
twidC€fModifõr
;

724 
i
 = 0; i < 
f·Lí
; i +
n1
)

726 
l
 = 
i
 + 
n2
;

727 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

728 
pSrc
[2 * 
i
] = (pSrc[2 * i] +ÖSrc[2 * 
l
]);

730 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

731 
pSrc
[2 * 
i
 + 1] = (pSrc[2 * 
l
 + 1] +ÖSrc[2 * i + 1]);

733 
pSrc
[2u * 
l
] = 
xt
;

735 
pSrc
[2u * 
l
 + 1u] = 
yt
;

742 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix2_q31.c

42 
	~"¨m_m©h.h
"

44 
¨m_ødix2_buâîÊy_q31
(

45 
q31_t
 * 
pSrc
,

46 
uöt32_t
 
f·Lí
,

47 
q31_t
 * 
pC€f
,

48 
uöt16_t
 
twidC€fModifõr
);

50 
¨m_ødix2_buâîÊy_övî£_q31
(

51 
q31_t
 * 
pSrc
,

52 
uöt32_t
 
f·Lí
,

53 
q31_t
 * 
pC€f
,

54 
uöt16_t
 
twidC€fModifõr
);

56 
¨m_bôªvîßl_q31
(

57 
q31_t
 * 
pSrc
,

58 
uöt32_t
 
f·Lí
,

59 
uöt16_t
 
bôRevFa˘‹
,

60 
uöt16_t
 * 
pBôRevTab
);

80 
	$¨m_cf·_ødix2_q31
(

81 c⁄° 
¨m_cf·_ødix2_ö°™˚_q31
 * 
S
,

82 
q31_t
 * 
pSrc
)

85 if(
S
->
if·Fœg
 == 1u)

87 
	`¨m_ødix2_buâîÊy_övî£_q31
(
pSrc
, 
S
->
f·Lí
,

88 
S
->
pTwiddÀ
, S->
twidC€fModifõr
);

92 
	`¨m_ødix2_buâîÊy_q31
(
pSrc
, 
S
->
f·Lí
,

93 
S
->
pTwiddÀ
, S->
twidC€fModifõr
);

96 
	`¨m_bôªvîßl_q31
(
pSrc
, 
S
->
f·Lí
, S->
bôRevFa˘‹
, S->
pBôRevTabÀ
);

97 
	}
}

103 
	$¨m_ødix2_buâîÊy_q31
(

104 
q31_t
 * 
pSrc
,

105 
uöt32_t
 
f·Lí
,

106 
q31_t
 * 
pC€f
,

107 
uöt16_t
 
twidC€fModifõr
)

110 
i
, 
j
, 
k
, 
l
, 
m
;

111 
n1
, 
n2
, 
ü
;

112 
q31_t
 
xt
, 
yt
, 
cosVÆ
, 
söVÆ
;

113 
q31_t
 
p0
, 
p1
;

116 
n2
 = 
f·Lí
;

118 
n1
 = 
n2
;

119 
n2
 =Ç2 >> 1;

120 
ü
 = 0;

123 
i
 = 0; i < 
n2
; i++)

125 
cosVÆ
 = 
pC€f
[
ü
 * 2];

126 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

127 
ü
 = i®+ 
twidC€fModifõr
;

129 
l
 = 
i
 + 
n2
;

130 
xt
 = (
pSrc
[2 * 
i
] >> 1uË- (pSrc[2 * 
l
] >> 1u);

131 
pSrc
[2 * 
i
] = (’Src[2 * i] >> 1uË+ (pSrc[2 * 
l
] >> 1u)) >> 1u;

133 
yt
 = (
pSrc
[2 * 
i
 + 1] >> 1uË- (pSrc[2 * 
l
 + 1] >> 1u);

134 
pSrc
[2 * 
i
 + 1] =

135 ((
pSrc
[2 * 
l
 + 1] >> 1uË+ (pSrc[2 * 
i
 + 1] >> 1u)) >> 1u;

137 
	`mu…_32x32_kìp32_R
(
p0
, 
xt
, 
cosVÆ
);

138 
	`mu…_32x32_kìp32_R
(
p1
, 
yt
, 
cosVÆ
);

139 
	`mu…Acc_32x32_kìp32_R
(
p0
, 
yt
, 
söVÆ
);

140 
	`mu…Sub_32x32_kìp32_R
(
p1
, 
xt
, 
söVÆ
);

142 
pSrc
[2u * 
l
] = 
p0
;

143 
pSrc
[2u * 
l
 + 1u] = 
p1
;

147 
twidC€fModifõr
 <<= 1u;

150 
k
 = 
f·Lí
 / 2; k > 2; k = k >> 1)

152 
n1
 = 
n2
;

153 
n2
 =Ç2 >> 1;

154 
ü
 = 0;

157 
j
 = 0; j < 
n2
; j++)

159 
cosVÆ
 = 
pC€f
[
ü
 * 2];

160 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

161 
ü
 = i®+ 
twidC€fModifõr
;

164 
i
 = 
j
;

165 
m
 = 
f·Lí
 / 
n1
;

168 
l
 = 
i
 + 
n2
;

169 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

170 
pSrc
[2 * 
i
] = (pSrc[2 * i] +ÖSrc[2 * 
l
]) >> 1u;

172 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

173 
pSrc
[2 * 
i
 + 1] = (pSrc[2 * 
l
 + 1] +ÖSrc[2 * i + 1]) >> 1u;

175 
	`mu…_32x32_kìp32_R
(
p0
, 
xt
, 
cosVÆ
);

176 
	`mu…_32x32_kìp32_R
(
p1
, 
yt
, 
cosVÆ
);

177 
	`mu…Acc_32x32_kìp32_R
(
p0
, 
yt
, 
söVÆ
);

178 
	`mu…Sub_32x32_kìp32_R
(
p1
, 
xt
, 
söVÆ
);

180 
pSrc
[2u * 
l
] = 
p0
;

181 
pSrc
[2u * 
l
 + 1u] = 
p1
;

182 
i
 +
n1
;

183 
m
--;

184 }  
m
 > 0);

188 
twidC€fModifõr
 <<= 1u;

191 
n1
 = 
n2
;

192 
n2
 =Ç2 >> 1;

193 
ü
 = 0;

195 
cosVÆ
 = 
pC€f
[
ü
 * 2];

196 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

197 
ü
 = i®+ 
twidC€fModifõr
;

200 
i
 = 0; i < 
f·Lí
; i +
n1
)

202 
l
 = 
i
 + 
n2
;

203 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

204 
pSrc
[2 * 
i
] = (pSrc[2 * i] +ÖSrc[2 * 
l
]);

206 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

207 
pSrc
[2 * 
i
 + 1] = (pSrc[2 * 
l
 + 1] +ÖSrc[2 * i + 1]);

209 
pSrc
[2u * 
l
] = 
xt
;

211 
pSrc
[2u * 
l
 + 1u] = 
yt
;

213 
i
 +
n1
;

214 
l
 = 
i
 + 
n2
;

216 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

217 
pSrc
[2 * 
i
] = (pSrc[2 * i] +ÖSrc[2 * 
l
]);

219 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

220 
pSrc
[2 * 
i
 + 1] = (pSrc[2 * 
l
 + 1] +ÖSrc[2 * i + 1]);

222 
pSrc
[2u * 
l
] = 
xt
;

224 
pSrc
[2u * 
l
 + 1u] = 
yt
;

228 
	}
}

231 
	$¨m_ødix2_buâîÊy_övî£_q31
(

232 
q31_t
 * 
pSrc
,

233 
uöt32_t
 
f·Lí
,

234 
q31_t
 * 
pC€f
,

235 
uöt16_t
 
twidC€fModifõr
)

238 
i
, 
j
, 
k
, 
l
;

239 
n1
, 
n2
, 
ü
;

240 
q31_t
 
xt
, 
yt
, 
cosVÆ
, 
söVÆ
;

241 
q31_t
 
p0
, 
p1
;

244 
n2
 = 
f·Lí
;

246 
n1
 = 
n2
;

247 
n2
 =Ç2 >> 1;

248 
ü
 = 0;

251 
i
 = 0; i < 
n2
; i++)

253 
cosVÆ
 = 
pC€f
[
ü
 * 2];

254 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

255 
ü
 = i®+ 
twidC€fModifõr
;

257 
l
 = 
i
 + 
n2
;

258 
xt
 = (
pSrc
[2 * 
i
] >> 1uË- (pSrc[2 * 
l
] >> 1u);

259 
pSrc
[2 * 
i
] = (’Src[2 * i] >> 1uË+ (pSrc[2 * 
l
] >> 1u)) >> 1u;

261 
yt
 = (
pSrc
[2 * 
i
 + 1] >> 1uË- (pSrc[2 * 
l
 + 1] >> 1u);

262 
pSrc
[2 * 
i
 + 1] =

263 ((
pSrc
[2 * 
l
 + 1] >> 1uË+ (pSrc[2 * 
i
 + 1] >> 1u)) >> 1u;

265 
	`mu…_32x32_kìp32_R
(
p0
, 
xt
, 
cosVÆ
);

266 
	`mu…_32x32_kìp32_R
(
p1
, 
yt
, 
cosVÆ
);

267 
	`mu…Sub_32x32_kìp32_R
(
p0
, 
yt
, 
söVÆ
);

268 
	`mu…Acc_32x32_kìp32_R
(
p1
, 
xt
, 
söVÆ
);

270 
pSrc
[2u * 
l
] = 
p0
;

271 
pSrc
[2u * 
l
 + 1u] = 
p1
;

274 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

277 
k
 = 
f·Lí
 / 2; k > 2; k = k >> 1)

279 
n1
 = 
n2
;

280 
n2
 =Ç2 >> 1;

281 
ü
 = 0;

284 
j
 = 0; j < 
n2
; j++)

286 
cosVÆ
 = 
pC€f
[
ü
 * 2];

287 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

288 
ü
 = i®+ 
twidC€fModifõr
;

291 
i
 = 
j
; i < 
f·Lí
; i +
n1
)

293 
l
 = 
i
 + 
n2
;

294 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

295 
pSrc
[2 * 
i
] = (pSrc[2 * i] +ÖSrc[2 * 
l
]) >> 1u;

297 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

298 
pSrc
[2 * 
i
 + 1] = (pSrc[2 * 
l
 + 1] +ÖSrc[2 * i + 1]) >> 1u;

300 
	`mu…_32x32_kìp32_R
(
p0
, 
xt
, 
cosVÆ
);

301 
	`mu…_32x32_kìp32_R
(
p1
, 
yt
, 
cosVÆ
);

302 
	`mu…Sub_32x32_kìp32_R
(
p0
, 
yt
, 
söVÆ
);

303 
	`mu…Acc_32x32_kìp32_R
(
p1
, 
xt
, 
söVÆ
);

305 
pSrc
[2u * 
l
] = 
p0
;

306 
pSrc
[2u * 
l
 + 1u] = 
p1
;

311 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

314 
n1
 = 
n2
;

315 
n2
 =Ç2 >> 1;

316 
ü
 = 0;

318 
cosVÆ
 = 
pC€f
[
ü
 * 2];

319 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

320 
ü
 = i®+ 
twidC€fModifõr
;

323 
i
 = 0; i < 
f·Lí
; i +
n1
)

325 
l
 = 
i
 + 
n2
;

326 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

327 
pSrc
[2 * 
i
] = (pSrc[2 * i] +ÖSrc[2 * 
l
]);

329 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

330 
pSrc
[2 * 
i
 + 1] = (pSrc[2 * 
l
 + 1] +ÖSrc[2 * i + 1]);

332 
pSrc
[2u * 
l
] = 
xt
;

334 
pSrc
[2u * 
l
 + 1u] = 
yt
;

336 
i
 +
n1
;

337 
l
 = 
i
 + 
n2
;

339 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

340 
pSrc
[2 * 
i
] = (pSrc[2 * i] +ÖSrc[2 * 
l
]);

342 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

343 
pSrc
[2 * 
i
 + 1] = (pSrc[2 * 
l
 + 1] +ÖSrc[2 * i + 1]);

345 
pSrc
[2u * 
l
] = 
xt
;

347 
pSrc
[2u * 
l
 + 1u] = 
yt
;

351 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix4_f32.c

42 
	~"¨m_m©h.h
"

44 
¨m_bôªvîßl_f32
(

45 
Êﬂt32_t
 * 
pSrc
,

46 
uöt16_t
 
f·Size
,

47 
uöt16_t
 
bôRevFa˘‹
,

48 
uöt16_t
 * 
pBôRevTab
);

67 
	$¨m_ødix4_buâîÊy_f32
(

68 
Êﬂt32_t
 * 
pSrc
,

69 
uöt16_t
 
f·Lí
,

70 
Êﬂt32_t
 * 
pC€f
,

71 
uöt16_t
 
twidC€fModifõr
)

74 
Êﬂt32_t
 
co1
, 
co2
, 
co3
, 
si1
, 
si2
, 
si3
;

75 
uöt32_t
 
ü1
, 
ü2
, 
ü3
;

76 
uöt32_t
 
i0
, 
i1
, 
i2
, 
i3
;

77 
uöt32_t
 
n1
, 
n2
, 
j
, 
k
;

79 #i‚de‡
ARM_MATH_CM0_FAMILY_FAMILY


83 
Êﬂt32_t
 
xaIn
, 
yaIn
, 
xbIn
, 
ybIn
, 
xcIn
, 
ycIn
, 
xdIn
, 
ydIn
;

84 
Êﬂt32_t
 
X≠lusc
, 
Xb∂usd
, 
Y≠lusc
, 
Yb∂usd
, 
Xamöusc
, 
Xbmöusd
, 
Yamöusc
,

85 
Ybmöusd
;

86 
Êﬂt32_t
 
Xb12C_out
, 
Yb12C_out
, 
Xc12C_out
, 
Yc12C_out
, 
Xd12C_out
, 
Yd12C_out
;

87 
Êﬂt32_t
 
Xb12_out
, 
Yb12_out
, 
Xc12_out
, 
Yc12_out
, 
Xd12_out
, 
Yd12_out
;

88 
Êﬂt32_t
 *
±r1
;

89 
Êﬂt32_t
 
p0
,
p1
,
p2
,
p3
,
p4
,
p5
;

90 
Êﬂt32_t
 
a0
,
a1
,
a2
,
a3
,
a4
,
a5
,
a6
,
a7
;

93 
n2
 = 
f·Lí
;

94 
n1
 = 
n2
;

97 
n2
 >>= 2u;

98 
i0
 = 0u;

99 
ü1
 = 0u;

101 
j
 = 
n2
;

108 
i1
 = 
i0
 + 
n2
;

109 
i2
 = 
i1
 + 
n2
;

110 
i3
 = 
i2
 + 
n2
;

112 
xaIn
 = 
pSrc
[(2u * 
i0
)];

113 
yaIn
 = 
pSrc
[(2u * 
i0
) + 1u];

115 
xbIn
 = 
pSrc
[(2u * 
i1
)];

116 
ybIn
 = 
pSrc
[(2u * 
i1
) + 1u];

118 
xcIn
 = 
pSrc
[(2u * 
i2
)];

119 
ycIn
 = 
pSrc
[(2u * 
i2
) + 1u];

121 
xdIn
 = 
pSrc
[(2u * 
i3
)];

122 
ydIn
 = 
pSrc
[(2u * 
i3
) + 1u];

125 
X≠lusc
 = 
xaIn
 + 
xcIn
;

127 
Xb∂usd
 = 
xbIn
 + 
xdIn
;

129 
Y≠lusc
 = 
yaIn
 + 
ycIn
;

131 
Yb∂usd
 = 
ybIn
 + 
ydIn
;

134 
ü2
 = 
ü1
 + ia1;

135 
co2
 = 
pC€f
[
ü2
 * 2u];

136 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

139 
Xamöusc
 = 
xaIn
 - 
xcIn
;

141 
Xbmöusd
 = 
xbIn
 - 
xdIn
;

143 
Yamöusc
 = 
yaIn
 - 
ycIn
;

145 
Ybmöusd
 = 
ybIn
 - 
ydIn
;

148 
pSrc
[(2u * 
i0
)] = 
X≠lusc
 + 
Xb∂usd
;

150 
pSrc
[(2u * 
i0
Ë+ 1u] = 
Y≠lusc
 + 
Yb∂usd
;

153 
Xb12C_out
 = (
Xamöusc
 + 
Ybmöusd
);

155 
Yb12C_out
 = (
Yamöusc
 - 
Xbmöusd
);

157 
Xc12C_out
 = (
X≠lusc
 - 
Xb∂usd
);

159 
Yc12C_out
 = (
Y≠lusc
 - 
Yb∂usd
);

161 
Xd12C_out
 = (
Xamöusc
 - 
Ybmöusd
);

163 
Yd12C_out
 = (
Xbmöusd
 + 
Yamöusc
);

165 
co1
 = 
pC€f
[
ü1
 * 2u];

166 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

169 
ü3
 = 
ü2
 + 
ü1
;

170 
co3
 = 
pC€f
[
ü3
 * 2u];

171 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

173 
Xb12_out
 = 
Xb12C_out
 * 
co1
;

174 
Yb12_out
 = 
Yb12C_out
 * 
co1
;

175 
Xc12_out
 = 
Xc12C_out
 * 
co2
;

176 
Yc12_out
 = 
Yc12C_out
 * 
co2
;

177 
Xd12_out
 = 
Xd12C_out
 * 
co3
;

178 
Yd12_out
 = 
Yd12C_out
 * 
co3
;

182 
p0
 = 
Yb12C_out
 * 
si1
;

185 
p1
 = 
Xb12C_out
 * 
si1
;

188 
p2
 = 
Yc12C_out
 * 
si2
;

191 
p3
 = 
Xc12C_out
 * 
si2
;

194 
p4
 = 
Yd12C_out
 * 
si3
;

197 
p5
 = 
Xd12C_out
 * 
si3
;

199 
Xb12_out
 +
p0
;

200 
Yb12_out
 -
p1
;

201 
Xc12_out
 +
p2
;

202 
Yc12_out
 -
p3
;

203 
Xd12_out
 +
p4
;

204 
Yd12_out
 -
p5
;

207 
pSrc
[2u * 
i1
] = 
Xc12_out
;

210 
pSrc
[(2u * 
i1
Ë+ 1u] = 
Yc12_out
;

213 
pSrc
[2u * 
i2
] = 
Xb12_out
;

216 
pSrc
[(2u * 
i2
Ë+ 1u] = 
Yb12_out
;

219 
pSrc
[2u * 
i3
] = 
Xd12_out
;

222 
pSrc
[(2u * 
i3
Ë+ 1u] = 
Yd12_out
;

225 
ü1
 +
twidC€fModifõr
;

228 
i0
++;

231 --
j
);

233 
twidC€fModifõr
 <<= 2u;

236 
k
 = 
f·Lí
 >> 2u; k > 4u; k >>= 2u)

239 
n1
 = 
n2
;

240 
n2
 >>= 2u;

241 
ü1
 = 0u;

244 
j
 = 0;

248 
ü2
 = 
ü1
 + ia1;

249 
ü3
 = 
ü2
 + 
ü1
;

250 
co1
 = 
pC€f
[
ü1
 * 2u];

251 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

252 
co2
 = 
pC€f
[
ü2
 * 2u];

253 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

254 
co3
 = 
pC€f
[
ü3
 * 2u];

255 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

258 
ü1
 +
twidC€fModifõr
;

260 
i0
 = 
j
;

265 
i1
 = 
i0
 + 
n2
;

266 
i2
 = 
i1
 + 
n2
;

267 
i3
 = 
i2
 + 
n2
;

269 
xaIn
 = 
pSrc
[(2u * 
i0
)];

270 
yaIn
 = 
pSrc
[(2u * 
i0
) + 1u];

272 
xbIn
 = 
pSrc
[(2u * 
i1
)];

273 
ybIn
 = 
pSrc
[(2u * 
i1
) + 1u];

275 
xcIn
 = 
pSrc
[(2u * 
i2
)];

276 
ycIn
 = 
pSrc
[(2u * 
i2
) + 1u];

278 
xdIn
 = 
pSrc
[(2u * 
i3
)];

279 
ydIn
 = 
pSrc
[(2u * 
i3
) + 1u];

282 
Xamöusc
 = 
xaIn
 - 
xcIn
;

284 
Xbmöusd
 = 
xbIn
 - 
xdIn
;

286 
Yamöusc
 = 
yaIn
 - 
ycIn
;

288 
Ybmöusd
 = 
ybIn
 - 
ydIn
;

291 
X≠lusc
 = 
xaIn
 + 
xcIn
;

293 
Xb∂usd
 = 
xbIn
 + 
xdIn
;

295 
Y≠lusc
 = 
yaIn
 + 
ycIn
;

297 
Yb∂usd
 = 
ybIn
 + 
ydIn
;

300 
Xb12C_out
 = (
Xamöusc
 + 
Ybmöusd
);

302 
Yb12C_out
 = (
Yamöusc
 - 
Xbmöusd
);

304 
Xc12C_out
 = (
X≠lusc
 - 
Xb∂usd
);

306 
Yc12C_out
 = (
Y≠lusc
 - 
Yb∂usd
);

308 
Xd12C_out
 = (
Xamöusc
 - 
Ybmöusd
);

310 
Yd12C_out
 = (
Xbmöusd
 + 
Yamöusc
);

312 
pSrc
[(2u * 
i0
)] = 
X≠lusc
 + 
Xb∂usd
;

313 
pSrc
[(2u * 
i0
Ë+ 1u] = 
Y≠lusc
 + 
Yb∂usd
;

315 
Xb12_out
 = 
Xb12C_out
 * 
co1
;

316 
Yb12_out
 = 
Yb12C_out
 * 
co1
;

317 
Xc12_out
 = 
Xc12C_out
 * 
co2
;

318 
Yc12_out
 = 
Yc12C_out
 * 
co2
;

319 
Xd12_out
 = 
Xd12C_out
 * 
co3
;

320 
Yd12_out
 = 
Yd12C_out
 * 
co3
;

324 
p0
 = 
Yb12C_out
 * 
si1
;

327 
p1
 = 
Xb12C_out
 * 
si1
;

330 
p2
 = 
Yc12C_out
 * 
si2
;

333 
p3
 = 
Xc12C_out
 * 
si2
;

336 
p4
 = 
Yd12C_out
 * 
si3
;

339 
p5
 = 
Xd12C_out
 * 
si3
;

341 
Xb12_out
 +
p0
;

342 
Yb12_out
 -
p1
;

343 
Xc12_out
 +
p2
;

344 
Yc12_out
 -
p3
;

345 
Xd12_out
 +
p4
;

346 
Yd12_out
 -
p5
;

349 
pSrc
[2u * 
i1
] = 
Xc12_out
;

352 
pSrc
[(2u * 
i1
Ë+ 1u] = 
Yc12_out
;

355 
pSrc
[2u * 
i2
] = 
Xb12_out
;

358 
pSrc
[(2u * 
i2
Ë+ 1u] = 
Yb12_out
;

361 
pSrc
[2u * 
i3
] = 
Xd12_out
;

364 
pSrc
[(2u * 
i3
Ë+ 1u] = 
Yd12_out
;

366 
i0
 +
n1
;

367 } 
i0
 < 
f·Lí
);

368 
j
++;

369 } 
j
 <(
n2
 - 1u));

370 
twidC€fModifõr
 <<= 2u;

373 
j
 = 
f·Lí
 >> 2;

374 
±r1
 = &
pSrc
[0];

379 
xaIn
 = 
±r1
[0];

380 
yaIn
 = 
±r1
[1];

381 
xbIn
 = 
±r1
[2];

382 
ybIn
 = 
±r1
[3];

383 
xcIn
 = 
±r1
[4];

384 
ycIn
 = 
±r1
[5];

385 
xdIn
 = 
±r1
[6];

386 
ydIn
 = 
±r1
[7];

389 
X≠lusc
 = 
xaIn
 + 
xcIn
;

392 
Xamöusc
 = 
xaIn
 - 
xcIn
;

395 
Y≠lusc
 = 
yaIn
 + 
ycIn
;

398 
Yamöusc
 = 
yaIn
 - 
ycIn
;

401 
Xb∂usd
 = 
xbIn
 + 
xdIn
;

404 
Yb∂usd
 = 
ybIn
 + 
ydIn
;

407 
Xbmöusd
 = 
xbIn
 - 
xdIn
;

410 
Ybmöusd
 = 
ybIn
 - 
ydIn
;

413 
a0
 = (
X≠lusc
 + 
Xb∂usd
);

415 
a1
 = (
Y≠lusc
 + 
Yb∂usd
);

417 
a2
 = (
X≠lusc
 - 
Xb∂usd
);

419 
a3
 = (
Y≠lusc
 - 
Yb∂usd
);

421 
a4
 = (
Xamöusc
 + 
Ybmöusd
);

423 
a5
 = (
Yamöusc
 - 
Xbmöusd
);

425 
a6
 = (
Xamöusc
 - 
Ybmöusd
);

427 
a7
 = (
Xbmöusd
 + 
Yamöusc
);

429 
±r1
[0] = 
a0
;

430 
±r1
[1] = 
a1
;

431 
±r1
[2] = 
a2
;

432 
±r1
[3] = 
a3
;

433 
±r1
[4] = 
a4
;

434 
±r1
[5] = 
a5
;

435 
±r1
[6] = 
a6
;

436 
±r1
[7] = 
a7
;

439 
±r1
 += 8u;

440 } --
j
);

444 
Êﬂt32_t
 
t1
, 
t2
, 
r1
, 
r2
, 
s1
, 
s2
;

449 
n2
 = 
f·Lí
;

450 
n1
 = 
n2
;

451 
k
 = 
f·Lí
; k > 1u; k >>= 2u)

454 
n1
 = 
n2
;

455 
n2
 >>= 2u;

456 
ü1
 = 0u;

459 
j
 = 0;

463 
ü2
 = 
ü1
 + ia1;

464 
ü3
 = 
ü2
 + 
ü1
;

465 
co1
 = 
pC€f
[
ü1
 * 2u];

466 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

467 
co2
 = 
pC€f
[
ü2
 * 2u];

468 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

469 
co3
 = 
pC€f
[
ü3
 * 2u];

470 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

473 
ü1
 = ia1 + 
twidC€fModifõr
;

475 
i0
 = 
j
;

480 
i1
 = 
i0
 + 
n2
;

481 
i2
 = 
i1
 + 
n2
;

482 
i3
 = 
i2
 + 
n2
;

485 
r1
 = 
pSrc
[(2u * 
i0
)] +ÖSrc[(2u * 
i2
)];

488 
r2
 = 
pSrc
[(2u * 
i0
)] -ÖSrc[(2u * 
i2
)];

491 
s1
 = 
pSrc
[(2u * 
i0
Ë+ 1u] +ÖSrc[(2u * 
i2
) + 1u];

494 
s2
 = 
pSrc
[(2u * 
i0
Ë+ 1u] -ÖSrc[(2u * 
i2
) + 1u];

497 
t1
 = 
pSrc
[2u * 
i1
] +ÖSrc[2u * 
i3
];

500 
pSrc
[2u * 
i0
] = 
r1
 + 
t1
;

503 
r1
 =Ñ1 - 
t1
;

506 
t2
 = 
pSrc
[(2u * 
i1
Ë+ 1u] +ÖSrc[(2u * 
i3
) + 1u];

509 
pSrc
[(2u * 
i0
Ë+ 1u] = 
s1
 + 
t2
;

512 
s1
 = s1 - 
t2
;

515 
t1
 = 
pSrc
[(2u * 
i1
Ë+ 1u] -ÖSrc[(2u * 
i3
) + 1u];

518 
t2
 = 
pSrc
[2u * 
i1
] -ÖSrc[2u * 
i3
];

521 
pSrc
[2u * 
i1
] = (
r1
 * 
co2
Ë+ (
s1
 * 
si2
);

524 
pSrc
[(2u * 
i1
Ë+ 1u] = (
s1
 * 
co2
Ë- (
r1
 * 
si2
);

527 
r1
 = 
r2
 + 
t1
;

530 
r2
 =Ñ2 - 
t1
;

533 
s1
 = 
s2
 - 
t2
;

536 
s2
 = s2 + 
t2
;

539 
pSrc
[2u * 
i2
] = (
r1
 * 
co1
Ë+ (
s1
 * 
si1
);

542 
pSrc
[(2u * 
i2
Ë+ 1u] = (
s1
 * 
co1
Ë- (
r1
 * 
si1
);

545 
pSrc
[2u * 
i3
] = (
r2
 * 
co3
Ë+ (
s2
 * 
si3
);

548 
pSrc
[(2u * 
i3
Ë+ 1u] = (
s2
 * 
co3
Ë- (
r2
 * 
si3
);

550 
i0
 +
n1
;

551 }  
i0
 < 
f·Lí
);

552 
j
++;

553 } 
j
 <(
n2
 - 1u));

554 
twidC€fModifõr
 <<= 2u;

559 
	}
}

571 
	$¨m_ødix4_buâîÊy_övî£_f32
(

572 
Êﬂt32_t
 * 
pSrc
,

573 
uöt16_t
 
f·Lí
,

574 
Êﬂt32_t
 * 
pC€f
,

575 
uöt16_t
 
twidC€fModifõr
,

576 
Êﬂt32_t
 
⁄ebyf·Lí
)

578 
Êﬂt32_t
 
co1
, 
co2
, 
co3
, 
si1
, 
si2
, 
si3
;

579 
uöt32_t
 
ü1
, 
ü2
, 
ü3
;

580 
uöt32_t
 
i0
, 
i1
, 
i2
, 
i3
;

581 
uöt32_t
 
n1
, 
n2
, 
j
, 
k
;

583 #i‚de‡
ARM_MATH_CM0_FAMILY_FAMILY


585 
Êﬂt32_t
 
xaIn
, 
yaIn
, 
xbIn
, 
ybIn
, 
xcIn
, 
ycIn
, 
xdIn
, 
ydIn
;

586 
Êﬂt32_t
 
X≠lusc
, 
Xb∂usd
, 
Y≠lusc
, 
Yb∂usd
, 
Xamöusc
, 
Xbmöusd
, 
Yamöusc
,

587 
Ybmöusd
;

588 
Êﬂt32_t
 
Xb12C_out
, 
Yb12C_out
, 
Xc12C_out
, 
Yc12C_out
, 
Xd12C_out
, 
Yd12C_out
;

589 
Êﬂt32_t
 
Xb12_out
, 
Yb12_out
, 
Xc12_out
, 
Yc12_out
, 
Xd12_out
, 
Yd12_out
;

590 
Êﬂt32_t
 *
±r1
;

591 
Êﬂt32_t
 
p0
,
p1
,
p2
,
p3
,
p4
,
p5
,
p6
,
p7
;

592 
Êﬂt32_t
 
a0
,
a1
,
a2
,
a3
,
a4
,
a5
,
a6
,
a7
;

596 
n2
 = 
f·Lí
;

597 
n1
 = 
n2
;

600 
n2
 >>= 2u;

601 
i0
 = 0u;

602 
ü1
 = 0u;

604 
j
 = 
n2
;

611 
i1
 = 
i0
 + 
n2
;

612 
i2
 = 
i1
 + 
n2
;

613 
i3
 = 
i2
 + 
n2
;

616 
xaIn
 = 
pSrc
[(2u * 
i0
)];

617 
yaIn
 = 
pSrc
[(2u * 
i0
) + 1u];

619 
xcIn
 = 
pSrc
[(2u * 
i2
)];

620 
ycIn
 = 
pSrc
[(2u * 
i2
) + 1u];

622 
xbIn
 = 
pSrc
[(2u * 
i1
)];

623 
ybIn
 = 
pSrc
[(2u * 
i1
) + 1u];

625 
xdIn
 = 
pSrc
[(2u * 
i3
)];

626 
ydIn
 = 
pSrc
[(2u * 
i3
) + 1u];

629 
X≠lusc
 = 
xaIn
 + 
xcIn
;

631 
Xb∂usd
 = 
xbIn
 + 
xdIn
;

633 
Y≠lusc
 = 
yaIn
 + 
ycIn
;

635 
Yb∂usd
 = 
ybIn
 + 
ydIn
;

638 
ü2
 = 
ü1
 + ia1;

639 
co2
 = 
pC€f
[
ü2
 * 2u];

640 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

643 
Xamöusc
 = 
xaIn
 - 
xcIn
;

645 
Xbmöusd
 = 
xbIn
 - 
xdIn
;

647 
Yamöusc
 = 
yaIn
 - 
ycIn
;

649 
Ybmöusd
 = 
ybIn
 - 
ydIn
;

652 
pSrc
[(2u * 
i0
)] = 
X≠lusc
 + 
Xb∂usd
;

655 
pSrc
[(2u * 
i0
Ë+ 1u] = 
Y≠lusc
 + 
Yb∂usd
;

658 
Xb12C_out
 = (
Xamöusc
 - 
Ybmöusd
);

660 
Yb12C_out
 = (
Yamöusc
 + 
Xbmöusd
);

662 
Xc12C_out
 = (
X≠lusc
 - 
Xb∂usd
);

664 
Yc12C_out
 = (
Y≠lusc
 - 
Yb∂usd
);

666 
Xd12C_out
 = (
Xamöusc
 + 
Ybmöusd
);

668 
Yd12C_out
 = (
Yamöusc
 - 
Xbmöusd
);

670 
co1
 = 
pC€f
[
ü1
 * 2u];

671 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

674 
ü3
 = 
ü2
 + 
ü1
;

675 
co3
 = 
pC€f
[
ü3
 * 2u];

676 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

678 
Xb12_out
 = 
Xb12C_out
 * 
co1
;

679 
Yb12_out
 = 
Yb12C_out
 * 
co1
;

680 
Xc12_out
 = 
Xc12C_out
 * 
co2
;

681 
Yc12_out
 = 
Yc12C_out
 * 
co2
;

682 
Xd12_out
 = 
Xd12C_out
 * 
co3
;

683 
Yd12_out
 = 
Yd12C_out
 * 
co3
;

687 
p0
 = 
Yb12C_out
 * 
si1
;

690 
p1
 = 
Xb12C_out
 * 
si1
;

693 
p2
 = 
Yc12C_out
 * 
si2
;

696 
p3
 = 
Xc12C_out
 * 
si2
;

699 
p4
 = 
Yd12C_out
 * 
si3
;

702 
p5
 = 
Xd12C_out
 * 
si3
;

704 
Xb12_out
 -
p0
;

705 
Yb12_out
 +
p1
;

706 
Xc12_out
 -
p2
;

707 
Yc12_out
 +
p3
;

708 
Xd12_out
 -
p4
;

709 
Yd12_out
 +
p5
;

712 
pSrc
[2u * 
i1
] = 
Xc12_out
;

715 
pSrc
[(2u * 
i1
Ë+ 1u] = 
Yc12_out
;

718 
pSrc
[2u * 
i2
] = 
Xb12_out
;

721 
pSrc
[(2u * 
i2
Ë+ 1u] = 
Yb12_out
;

724 
pSrc
[2u * 
i3
] = 
Xd12_out
;

727 
pSrc
[(2u * 
i3
Ë+ 1u] = 
Yd12_out
;

730 
ü1
 = ia1 + 
twidC€fModifõr
;

733 
i0
 = i0 + 1u;

735 } --
j
);

737 
twidC€fModifõr
 <<= 2u;

740 
k
 = 
f·Lí
 >> 2u; k > 4u; k >>= 2u)

743 
n1
 = 
n2
;

744 
n2
 >>= 2u;

745 
ü1
 = 0u;

748 
j
 = 0;

752 
ü2
 = 
ü1
 + ia1;

753 
ü3
 = 
ü2
 + 
ü1
;

754 
co1
 = 
pC€f
[
ü1
 * 2u];

755 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

756 
co2
 = 
pC€f
[
ü2
 * 2u];

757 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

758 
co3
 = 
pC€f
[
ü3
 * 2u];

759 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

762 
ü1
 = ia1 + 
twidC€fModifõr
;

764 
i0
 = 
j
;

769 
i1
 = 
i0
 + 
n2
;

770 
i2
 = 
i1
 + 
n2
;

771 
i3
 = 
i2
 + 
n2
;

773 
xaIn
 = 
pSrc
[(2u * 
i0
)];

774 
yaIn
 = 
pSrc
[(2u * 
i0
) + 1u];

776 
xbIn
 = 
pSrc
[(2u * 
i1
)];

777 
ybIn
 = 
pSrc
[(2u * 
i1
) + 1u];

779 
xcIn
 = 
pSrc
[(2u * 
i2
)];

780 
ycIn
 = 
pSrc
[(2u * 
i2
) + 1u];

782 
xdIn
 = 
pSrc
[(2u * 
i3
)];

783 
ydIn
 = 
pSrc
[(2u * 
i3
) + 1u];

786 
Xamöusc
 = 
xaIn
 - 
xcIn
;

788 
Xbmöusd
 = 
xbIn
 - 
xdIn
;

790 
Yamöusc
 = 
yaIn
 - 
ycIn
;

792 
Ybmöusd
 = 
ybIn
 - 
ydIn
;

795 
X≠lusc
 = 
xaIn
 + 
xcIn
;

797 
Xb∂usd
 = 
xbIn
 + 
xdIn
;

799 
Y≠lusc
 = 
yaIn
 + 
ycIn
;

801 
Yb∂usd
 = 
ybIn
 + 
ydIn
;

804 
Xb12C_out
 = (
Xamöusc
 - 
Ybmöusd
);

806 
Yb12C_out
 = (
Yamöusc
 + 
Xbmöusd
);

808 
Xc12C_out
 = (
X≠lusc
 - 
Xb∂usd
);

810 
Yc12C_out
 = (
Y≠lusc
 - 
Yb∂usd
);

812 
Xd12C_out
 = (
Xamöusc
 + 
Ybmöusd
);

814 
Yd12C_out
 = (
Yamöusc
 - 
Xbmöusd
);

816 
pSrc
[(2u * 
i0
)] = 
X≠lusc
 + 
Xb∂usd
;

817 
pSrc
[(2u * 
i0
Ë+ 1u] = 
Y≠lusc
 + 
Yb∂usd
;

819 
Xb12_out
 = 
Xb12C_out
 * 
co1
;

820 
Yb12_out
 = 
Yb12C_out
 * 
co1
;

821 
Xc12_out
 = 
Xc12C_out
 * 
co2
;

822 
Yc12_out
 = 
Yc12C_out
 * 
co2
;

823 
Xd12_out
 = 
Xd12C_out
 * 
co3
;

824 
Yd12_out
 = 
Yd12C_out
 * 
co3
;

828 
p0
 = 
Yb12C_out
 * 
si1
;

831 
p1
 = 
Xb12C_out
 * 
si1
;

834 
p2
 = 
Yc12C_out
 * 
si2
;

837 
p3
 = 
Xc12C_out
 * 
si2
;

840 
p4
 = 
Yd12C_out
 * 
si3
;

843 
p5
 = 
Xd12C_out
 * 
si3
;

845 
Xb12_out
 -
p0
;

846 
Yb12_out
 +
p1
;

847 
Xc12_out
 -
p2
;

848 
Yc12_out
 +
p3
;

849 
Xd12_out
 -
p4
;

850 
Yd12_out
 +
p5
;

853 
pSrc
[2u * 
i1
] = 
Xc12_out
;

856 
pSrc
[(2u * 
i1
Ë+ 1u] = 
Yc12_out
;

859 
pSrc
[2u * 
i2
] = 
Xb12_out
;

862 
pSrc
[(2u * 
i2
Ë+ 1u] = 
Yb12_out
;

865 
pSrc
[2u * 
i3
] = 
Xd12_out
;

868 
pSrc
[(2u * 
i3
Ë+ 1u] = 
Yd12_out
;

870 
i0
 +
n1
;

871 } 
i0
 < 
f·Lí
);

872 
j
++;

873 } 
j
 <(
n2
 - 1u));

874 
twidC€fModifõr
 <<= 2u;

878 
j
 = 
f·Lí
 >> 2;

879 
±r1
 = &
pSrc
[0];

884 
xaIn
 = 
±r1
[0];

885 
yaIn
 = 
±r1
[1];

886 
xbIn
 = 
±r1
[2];

887 
ybIn
 = 
±r1
[3];

888 
xcIn
 = 
±r1
[4];

889 
ycIn
 = 
±r1
[5];

890 
xdIn
 = 
±r1
[6];

891 
ydIn
 = 
±r1
[7];

895 
X≠lusc
 = 
xaIn
 + 
xcIn
;

898 
Xamöusc
 = 
xaIn
 - 
xcIn
;

901 
Y≠lusc
 = 
yaIn
 + 
ycIn
;

904 
Yamöusc
 = 
yaIn
 - 
ycIn
;

907 
Xb∂usd
 = 
xbIn
 + 
xdIn
;

910 
Yb∂usd
 = 
ybIn
 + 
ydIn
;

913 
Xbmöusd
 = 
xbIn
 - 
xdIn
;

916 
Ybmöusd
 = 
ybIn
 - 
ydIn
;

919 
a0
 = (
X≠lusc
 + 
Xb∂usd
);

921 
a1
 = (
Y≠lusc
 + 
Yb∂usd
);

923 
a2
 = (
X≠lusc
 - 
Xb∂usd
);

925 
a3
 = (
Y≠lusc
 - 
Yb∂usd
);

927 
a4
 = (
Xamöusc
 - 
Ybmöusd
);

929 
a5
 = (
Yamöusc
 + 
Xbmöusd
);

931 
a6
 = (
Xamöusc
 + 
Ybmöusd
);

933 
a7
 = (
Yamöusc
 - 
Xbmöusd
);

935 
p0
 = 
a0
 * 
⁄ebyf·Lí
;

936 
p1
 = 
a1
 * 
⁄ebyf·Lí
;

937 
p2
 = 
a2
 * 
⁄ebyf·Lí
;

938 
p3
 = 
a3
 * 
⁄ebyf·Lí
;

939 
p4
 = 
a4
 * 
⁄ebyf·Lí
;

940 
p5
 = 
a5
 * 
⁄ebyf·Lí
;

941 
p6
 = 
a6
 * 
⁄ebyf·Lí
;

942 
p7
 = 
a7
 * 
⁄ebyf·Lí
;

945 
±r1
[0] = 
p0
;

947 
±r1
[1] = 
p1
;

949 
±r1
[2] = 
p2
;

951 
±r1
[3] = 
p3
;

953 
±r1
[4] = 
p4
;

955 
±r1
[5] = 
p5
;

957 
±r1
[6] = 
p6
;

959 
±r1
[7] = 
p7
;

962 
±r1
 =Ötr1 + 8u;

964 } --
j
);

968 
Êﬂt32_t
 
t1
, 
t2
, 
r1
, 
r2
, 
s1
, 
s2
;

973 
n2
 = 
f·Lí
;

974 
n1
 = 
n2
;

977 
k
 = 
f·Lí
; k > 4u; k >>= 2u)

980 
n1
 = 
n2
;

981 
n2
 >>= 2u;

982 
ü1
 = 0u;

985 
j
 = 0;

989 
ü2
 = 
ü1
 + ia1;

990 
ü3
 = 
ü2
 + 
ü1
;

991 
co1
 = 
pC€f
[
ü1
 * 2u];

992 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

993 
co2
 = 
pC€f
[
ü2
 * 2u];

994 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

995 
co3
 = 
pC€f
[
ü3
 * 2u];

996 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

999 
ü1
 = ia1 + 
twidC€fModifõr
;

1001 
i0
 = 
j
;

1006 
i1
 = 
i0
 + 
n2
;

1007 
i2
 = 
i1
 + 
n2
;

1008 
i3
 = 
i2
 + 
n2
;

1011 
r1
 = 
pSrc
[(2u * 
i0
)] +ÖSrc[(2u * 
i2
)];

1014 
r2
 = 
pSrc
[(2u * 
i0
)] -ÖSrc[(2u * 
i2
)];

1017 
s1
 = 
pSrc
[(2u * 
i0
Ë+ 1u] +ÖSrc[(2u * 
i2
) + 1u];

1020 
s2
 = 
pSrc
[(2u * 
i0
Ë+ 1u] -ÖSrc[(2u * 
i2
) + 1u];

1023 
t1
 = 
pSrc
[2u * 
i1
] +ÖSrc[2u * 
i3
];

1026 
pSrc
[2u * 
i0
] = 
r1
 + 
t1
;

1029 
r1
 =Ñ1 - 
t1
;

1032 
t2
 = 
pSrc
[(2u * 
i1
Ë+ 1u] +ÖSrc[(2u * 
i3
) + 1u];

1035 
pSrc
[(2u * 
i0
Ë+ 1u] = 
s1
 + 
t2
;

1038 
s1
 = s1 - 
t2
;

1041 
t1
 = 
pSrc
[(2u * 
i1
Ë+ 1u] -ÖSrc[(2u * 
i3
) + 1u];

1044 
t2
 = 
pSrc
[2u * 
i1
] -ÖSrc[2u * 
i3
];

1047 
pSrc
[2u * 
i1
] = (
r1
 * 
co2
Ë- (
s1
 * 
si2
);

1050 
pSrc
[(2u * 
i1
Ë+ 1u] = (
s1
 * 
co2
Ë+ (
r1
 * 
si2
);

1053 
r1
 = 
r2
 - 
t1
;

1056 
r2
 =Ñ2 + 
t1
;

1059 
s1
 = 
s2
 + 
t2
;

1062 
s2
 = s2 - 
t2
;

1065 
pSrc
[2u * 
i2
] = (
r1
 * 
co1
Ë- (
s1
 * 
si1
);

1068 
pSrc
[(2u * 
i2
Ë+ 1u] = (
s1
 * 
co1
Ë+ (
r1
 * 
si1
);

1071 
pSrc
[2u * 
i3
] = (
r2
 * 
co3
Ë- (
s2
 * 
si3
);

1074 
pSrc
[(2u * 
i3
Ë+ 1u] = (
s2
 * 
co3
Ë+ (
r2
 * 
si3
);

1076 
i0
 +
n1
;

1077 }  
i0
 < 
f·Lí
);

1078 
j
++;

1079 } 
j
 <(
n2
 - 1u));

1080 
twidC€fModifõr
 <<= 2u;

1083 
n1
 = 
n2
;

1084 
n2
 >>= 2u;

1087 
i0
 = 0u; i0 <(
f·Lí
 - 
n1
); i0 +=Ç1)

1091 
i1
 = 
i0
 + 
n2
;

1092 
i2
 = 
i1
 + 
n2
;

1093 
i3
 = 
i2
 + 
n2
;

1097 
r1
 = 
pSrc
[2u * 
i0
] +ÖSrc[2u * 
i2
];

1100 
r2
 = 
pSrc
[2u * 
i0
] -ÖSrc[2u * 
i2
];

1103 
s1
 = 
pSrc
[(2u * 
i0
Ë+ 1u] +ÖSrc[(2u * 
i2
) + 1u];

1106 
s2
 = 
pSrc
[(2u * 
i0
Ë+ 1u] -ÖSrc[(2u * 
i2
) + 1u];

1109 
t1
 = 
pSrc
[2u * 
i1
] +ÖSrc[2u * 
i3
];

1112 
pSrc
[2u * 
i0
] = (
r1
 + 
t1
Ë* 
⁄ebyf·Lí
;

1115 
r1
 =Ñ1 - 
t1
;

1118 
t2
 = 
pSrc
[(2u * 
i1
Ë+ 1u] +ÖSrc[(2u * 
i3
) + 1u];

1121 
pSrc
[(2u * 
i0
Ë+ 1u] = (
s1
 + 
t2
Ë* 
⁄ebyf·Lí
;

1124 
s1
 = s1 - 
t2
;

1127 
t1
 = 
pSrc
[(2u * 
i1
Ë+ 1u] -ÖSrc[(2u * 
i3
) + 1u];

1130 
t2
 = 
pSrc
[2u * 
i1
] -ÖSrc[2u * 
i3
];

1133 
pSrc
[2u * 
i1
] = 
r1
 * 
⁄ebyf·Lí
;

1136 
pSrc
[(2u * 
i1
Ë+ 1u] = 
s1
 * 
⁄ebyf·Lí
;

1139 
r1
 = 
r2
 - 
t1
;

1142 
r2
 =Ñ2 + 
t1
;

1145 
s1
 = 
s2
 + 
t2
;

1148 
s2
 = s2 - 
t2
;

1151 
pSrc
[2u * 
i2
] = 
r1
 * 
⁄ebyf·Lí
;

1154 
pSrc
[(2u * 
i2
Ë+ 1u] = 
s1
 * 
⁄ebyf·Lí
;

1157 
pSrc
[2u * 
i3
] = 
r2
 * 
⁄ebyf·Lí
;

1160 
pSrc
[(2u * 
i3
Ë+ 1u] = 
s2
 * 
⁄ebyf·Lí
;

1164 
	}
}

1181 
	$¨m_cf·_ødix4_f32
(

1182 c⁄° 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

1183 
Êﬂt32_t
 * 
pSrc
)

1186 if(
S
->
if·Fœg
 == 1u)

1189 
	`¨m_ødix4_buâîÊy_övî£_f32
(
pSrc
, 
S
->
f·Lí
, S->
pTwiddÀ
,

1190 
S
->
twidC€fModifõr
, S->
⁄ebyf·Lí
);

1195 
	`¨m_ødix4_buâîÊy_f32
(
pSrc
, 
S
->
f·Lí
, S->
pTwiddÀ
,

1196 
S
->
twidC€fModifõr
);

1199 if(
S
->
bôRevî£Fœg
 == 1u)

1202 
	`¨m_bôªvîßl_f32
(
pSrc
, 
S
->
f·Lí
, S->
bôRevFa˘‹
, S->
pBôRevTabÀ
);

1205 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix4_init_f32.c

42 
	~"¨m_m©h.h
"

43 
	~"¨m_comm⁄_èbÀs.h
"

77 
¨m_°©us
 
	$¨m_cf·_ødix4_öô_f32
(

78 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

79 
uöt16_t
 
f·Lí
,

80 
uöt8_t
 
if·Fœg
,

81 
uöt8_t
 
bôRevî£Fœg
)

84 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

87 
S
->
f·Lí
 = fftLen;

90 
S
->
pTwiddÀ
 = (
Êﬂt32_t
 *Ë
twiddÀC€f
;

93 
S
->
if·Fœg
 = ifftFlag;

96 
S
->
bôRevî£Fœg
 = bitReverseFlag;

99 
S
->
f·Lí
)

106 
S
->
twidC€fModifõr
 = 1u;

108 
S
->
bôRevFa˘‹
 = 1u;

110 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë
¨mBôRevTabÀ
;

112 
S
->
⁄ebyf·Lí
 = 0.000244140625;

119 
S
->
twidC€fModifõr
 = 4u;

121 
S
->
bôRevFa˘‹
 = 4u;

123 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[3];

125 
S
->
⁄ebyf·Lí
 = 0.0009765625f;

131 
S
->
twidC€fModifõr
 = 16u;

132 
S
->
bôRevFa˘‹
 = 16u;

133 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[15];

134 
S
->
⁄ebyf·Lí
 = 0.00390625f;

139 
S
->
twidC€fModifõr
 = 64u;

140 
S
->
bôRevFa˘‹
 = 64u;

141 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[63];

142 
S
->
⁄ebyf·Lí
 = 0.015625f;

147 
S
->
twidC€fModifõr
 = 256u;

148 
S
->
bôRevFa˘‹
 = 256u;

149 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[255];

150 
S
->
⁄ebyf·Lí
 = 0.0625f;

156 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

160  (
°©us
);

161 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix4_init_q15.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

77 
¨m_°©us
 
	$¨m_cf·_ødix4_öô_q15
(

78 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

79 
uöt16_t
 
f·Lí
,

80 
uöt8_t
 
if·Fœg
,

81 
uöt8_t
 
bôRevî£Fœg
)

84 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

86 
S
->
f·Lí
 = fftLen;

88 
S
->
pTwiddÀ
 = (
q15_t
 *Ë
twiddÀC€f_4096_q15
;

90 
S
->
if·Fœg
 = ifftFlag;

92 
S
->
bôRevî£Fœg
 = bitReverseFlag;

95 
S
->
f·Lí
)

101 
S
->
twidC€fModifõr
 = 1u;

103 
S
->
bôRevFa˘‹
 = 1u;

105 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë
¨mBôRevTabÀ
;

111 
S
->
twidC€fModifõr
 = 4u;

112 
S
->
bôRevFa˘‹
 = 4u;

113 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[3];

119 
S
->
twidC€fModifõr
 = 16u;

120 
S
->
bôRevFa˘‹
 = 16u;

121 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[15];

127 
S
->
twidC€fModifõr
 = 64u;

128 
S
->
bôRevFa˘‹
 = 64u;

129 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[63];

135 
S
->
twidC€fModifõr
 = 256u;

136 
S
->
bôRevFa˘‹
 = 256u;

137 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[255];

143 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

147  (
°©us
);

148 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix4_init_q31.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

76 
¨m_°©us
 
	$¨m_cf·_ødix4_öô_q31
(

77 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

78 
uöt16_t
 
f·Lí
,

79 
uöt8_t
 
if·Fœg
,

80 
uöt8_t
 
bôRevî£Fœg
)

83 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

85 
S
->
f·Lí
 = fftLen;

87 
S
->
pTwiddÀ
 = (
q31_t
 *Ë
twiddÀC€f_4096_q31
;

89 
S
->
if·Fœg
 = ifftFlag;

91 
S
->
bôRevî£Fœg
 = bitReverseFlag;

94 
S
->
f·Lí
)

99 
S
->
twidC€fModifõr
 = 1u;

101 
S
->
bôRevFa˘‹
 = 1u;

103 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë
¨mBôRevTabÀ
;

109 
S
->
twidC€fModifõr
 = 4u;

111 
S
->
bôRevFa˘‹
 = 4u;

113 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[3];

118 
S
->
twidC€fModifõr
 = 16u;

119 
S
->
bôRevFa˘‹
 = 16u;

120 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[15];

125 
S
->
twidC€fModifõr
 = 64u;

126 
S
->
bôRevFa˘‹
 = 64u;

127 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[63];

132 
S
->
twidC€fModifõr
 = 256u;

133 
S
->
bôRevFa˘‹
 = 256u;

134 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[255];

139 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

143  (
°©us
);

144 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix4_q15.c

42 
	~"¨m_m©h.h
"

45 
¨m_ødix4_buâîÊy_q15
(

46 
q15_t
 * 
pSrc16
,

47 
uöt32_t
 
f·Lí
,

48 
q15_t
 * 
pC€f16
,

49 
uöt32_t
 
twidC€fModifõr
);

51 
¨m_ødix4_buâîÊy_övî£_q15
(

52 
q15_t
 * 
pSrc16
,

53 
uöt32_t
 
f·Lí
,

54 
q15_t
 * 
pC€f16
,

55 
uöt32_t
 
twidC€fModifõr
);

57 
¨m_bôªvîßl_q15
(

58 
q15_t
 * 
pSrc
,

59 
uöt32_t
 
f·Lí
,

60 
uöt16_t
 
bôRevFa˘‹
,

61 
uöt16_t
 * 
pBôRevTab
);

91 
	$¨m_cf·_ødix4_q15
(

92 c⁄° 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

93 
q15_t
 * 
pSrc
)

95 if(
S
->
if·Fœg
 == 1u)

98 
	`¨m_ødix4_buâîÊy_övî£_q15
(
pSrc
, 
S
->
f·Lí
, S->
pTwiddÀ
,

99 
S
->
twidC€fModifõr
);

104 
	`¨m_ødix4_buâîÊy_q15
(
pSrc
, 
S
->
f·Lí
, S->
pTwiddÀ
,

105 
S
->
twidC€fModifõr
);

108 if(
S
->
bôRevî£Fœg
 == 1u)

111 
	`¨m_bôªvîßl_q15
(
pSrc
, 
S
->
f·Lí
, S->
bôRevFa˘‹
, S->
pBôRevTabÀ
);

114 
	}
}

163 
	$¨m_ødix4_buâîÊy_q15
(

164 
q15_t
 * 
pSrc16
,

165 
uöt32_t
 
f·Lí
,

166 
q15_t
 * 
pC€f16
,

167 
uöt32_t
 
twidC€fModifõr
)

170 #i‚de‡
ARM_MATH_CM0_FAMILY


174 
q31_t
 
R
, 
S
, 
T
, 
U
;

175 
q31_t
 
C1
, 
C2
, 
C3
, 
out1
, 
out2
;

176 
uöt32_t
 
n1
, 
n2
, 
ic
, 
i0
, 
j
, 
k
;

178 
q15_t
 *
±r1
;

179 
q15_t
 *
pSi0
;

180 
q15_t
 *
pSi1
;

181 
q15_t
 *
pSi2
;

182 
q15_t
 *
pSi3
;

184 
q31_t
 
xaya
, 
xbyb
, 
xcyc
, 
xdyd
;

191 
n2
 = 
f·Lí
;

192 
n1
 = 
n2
;

195 
n2
 >>= 2u;

198 
ic
 = 0u;

201 
j
 = 
n2
;

203 
pSi0
 = 
pSrc16
;

204 
pSi1
 = 
pSi0
 + 2 * 
n2
;

205 
pSi2
 = 
pSi1
 + 2 * 
n2
;

206 
pSi3
 = 
pSi2
 + 2 * 
n2
;

217 
T
 = 
	`_SIMD32_OFFSET
(
pSi0
);

218 
T
 = 
	`__SHADD16
(T, 0);

219 
T
 = 
	`__SHADD16
(T, 0);

224 
S
 = 
	`_SIMD32_OFFSET
(
pSi2
);

225 
S
 = 
	`__SHADD16
(S, 0);

226 
S
 = 
	`__SHADD16
(S, 0);

229 
R
 = 
	`__QADD16
(
T
, 
S
);

232 
S
 = 
	`__QSUB16
(
T
, S);

236 
T
 = 
	`_SIMD32_OFFSET
(
pSi1
);

237 
T
 = 
	`__SHADD16
(T, 0);

238 
T
 = 
	`__SHADD16
(T, 0);

241 
U
 = 
	`_SIMD32_OFFSET
(
pSi3
);

242 
U
 = 
	`__SHADD16
(U, 0);

243 
U
 = 
	`__SHADD16
(U, 0);

246 
T
 = 
	`__QADD16
(T, 
U
);

251 
	`_SIMD32_OFFSET
(
pSi0
Ë
	`__SHADD16
(
R
, 
T
);

252 
pSi0
 += 2;

255 
R
 = 
	`__QSUB16
(R, 
T
);

258 
C2
 = 
	`_SIMD32_OFFSET
(
pC€f16
 + (4u * 
ic
));

260 #i‚de‡
ARM_MATH_BIG_ENDIAN


263 
out1
 = 
	`__SMUAD
(
C2
, 
R
) >> 16u;

265 
out2
 = 
	`__SMUSDX
(
C2
, 
R
);

270 
out1
 = 
	`__SMUSDX
(
R
, 
C2
) >> 16u;

272 
out2
 = 
	`__SMUAD
(
C2
, 
R
);

278 
T
 = 
	`_SIMD32_OFFSET
(
pSi1
);

279 
T
 = 
	`__SHADD16
(T, 0);

280 
T
 = 
	`__SHADD16
(T, 0);

284 
	`_SIMD32_OFFSET
(
pSi1
) =

285 (
q31_t
Ë((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

286 
pSi1
 += 2;

290 
U
 = 
	`_SIMD32_OFFSET
(
pSi3
);

291 
U
 = 
	`__SHADD16
(U, 0);

292 
U
 = 
	`__SHADD16
(U, 0);

295 
T
 = 
	`__QSUB16
(T, 
U
);

297 #i‚de‡
ARM_MATH_BIG_ENDIAN


300 
R
 = 
	`__QASX
(
S
, 
T
);

302 
S
 = 
	`__QSAX
(S, 
T
);

307 
R
 = 
	`__QSAX
(
S
, 
T
);

309 
S
 = 
	`__QASX
(S, 
T
);

314 
C1
 = 
	`_SIMD32_OFFSET
(
pC€f16
 + (2u * 
ic
));

317 #i‚de‡
ARM_MATH_BIG_ENDIAN


320 
out1
 = 
	`__SMUAD
(
C1
, 
S
) >> 16u;

322 
out2
 = 
	`__SMUSDX
(
C1
, 
S
);

327 
out1
 = 
	`__SMUSDX
(
S
, 
C1
) >> 16u;

329 
out2
 = 
	`__SMUAD
(
C1
, 
S
);

334 
	`_SIMD32_OFFSET
(
pSi2
) =

335 ((
out2
Ë& 0xFFFF0000Ë| ((
out1
) & 0x0000FFFF);

336 
pSi2
 += 2;

340 
C3
 = 
	`_SIMD32_OFFSET
(
pC€f16
 + (6u * 
ic
));

343 #i‚de‡
ARM_MATH_BIG_ENDIAN


346 
out1
 = 
	`__SMUAD
(
C3
, 
R
) >> 16u;

348 
out2
 = 
	`__SMUSDX
(
C3
, 
R
);

353 
out1
 = 
	`__SMUSDX
(
R
, 
C3
) >> 16u;

355 
out2
 = 
	`__SMUAD
(
C3
, 
R
);

360 
	`_SIMD32_OFFSET
(
pSi3
) =

361 ((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

362 
pSi3
 += 2;

365 
ic
 = i¯+ 
twidC€fModifõr
;

367 } --
j
);

376 
twidC€fModifõr
 <<= 2u;

379 
k
 = 
f·Lí
 / 4u; k > 4u; k >>= 2u)

382 
n1
 = 
n2
;

383 
n2
 >>= 2u;

384 
ic
 = 0u;

386 
j
 = 0u; j <(
n2
 - 1u); j++)

389 
C1
 = 
	`_SIMD32_OFFSET
(
pC€f16
 + (2u * 
ic
));

390 
C2
 = 
	`_SIMD32_OFFSET
(
pC€f16
 + (4u * 
ic
));

391 
C3
 = 
	`_SIMD32_OFFSET
(
pC€f16
 + (6u * 
ic
));

394 
ic
 = i¯+ 
twidC€fModifõr
;

396 
pSi0
 = 
pSrc16
 + 2 * 
j
;

397 
pSi1
 = 
pSi0
 + 2 * 
n2
;

398 
pSi2
 = 
pSi1
 + 2 * 
n2
;

399 
pSi3
 = 
pSi2
 + 2 * 
n2
;

402 
i0
 = 
j
; i0 < 
f·Lí
; i0 +
n1
)

406 
T
 = 
	`_SIMD32_OFFSET
(
pSi0
);

409 
S
 = 
	`_SIMD32_OFFSET
(
pSi2
);

412 
R
 = 
	`__QADD16
(
T
, 
S
);

415 
S
 = 
	`__QSUB16
(
T
, S);

419 
T
 = 
	`_SIMD32_OFFSET
(
pSi1
);

422 
U
 = 
	`_SIMD32_OFFSET
(
pSi3
);

425 
T
 = 
	`__QADD16
(T, 
U
);

431 
out1
 = 
	`__SHADD16
(
R
, 
T
);

432 
out1
 = 
	`__SHADD16
(out1, 0);

433 
	`_SIMD32_OFFSET
(
pSi0
Ë
out1
;

434 
pSi0
 +2 * 
n1
;

437 
R
 = 
	`__SHSUB16
(R, 
T
);

439 #i‚de‡
ARM_MATH_BIG_ENDIAN


442 
out1
 = 
	`__SMUAD
(
C2
, 
R
) >> 16u;

445 
out2
 = 
	`__SMUSDX
(
C2
, 
R
);

450 
out1
 = 
	`__SMUSDX
(
R
, 
C2
) >> 16u;

453 
out2
 = 
	`__SMUAD
(
C2
, 
R
);

459 
T
 = 
	`_SIMD32_OFFSET
(
pSi1
);

464 
	`_SIMD32_OFFSET
(
pSi1
) =

465 ((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

466 
pSi1
 +2 * 
n1
;

471 
U
 = 
	`_SIMD32_OFFSET
(
pSi3
);

474 
T
 = 
	`__QSUB16
(T, 
U
);

476 #i‚de‡
ARM_MATH_BIG_ENDIAN


479 
R
 = 
	`__SHASX
(
S
, 
T
);

482 
S
 = 
	`__SHSAX
(S, 
T
);

486 
out1
 = 
	`__SMUAD
(
C1
, 
S
) >> 16u;

487 
out2
 = 
	`__SMUSDX
(
C1
, 
S
);

492 
R
 = 
	`__SHSAX
(
S
, 
T
);

495 
S
 = 
	`__SHASX
(S, 
T
);

499 
out1
 = 
	`__SMUSDX
(
S
, 
C1
) >> 16u;

500 
out2
 = 
	`__SMUAD
(
C1
, 
S
);

506 
	`_SIMD32_OFFSET
(
pSi2
) =

507 ((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

508 
pSi2
 +2 * 
n1
;

512 #i‚de‡
ARM_MATH_BIG_ENDIAN


514 
out1
 = 
	`__SMUAD
(
C3
, 
R
) >> 16u;

515 
out2
 = 
	`__SMUSDX
(
C3
, 
R
);

519 
out1
 = 
	`__SMUSDX
(
R
, 
C3
) >> 16u;

520 
out2
 = 
	`__SMUAD
(
C3
, 
R
);

526 
	`_SIMD32_OFFSET
(
pSi3
) =

527 ((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

528 
pSi3
 +2 * 
n1
;

532 
twidC€fModifõr
 <<= 2u;

543 
j
 = 
f·Lí
 >> 2;

545 
±r1
 = &
pSrc16
[0];

553 
xaya
 = *
	`__SIMD32
(
±r1
)++;

556 
xbyb
 = *
	`__SIMD32
(
±r1
)++;

559 
xcyc
 = *
	`__SIMD32
(
±r1
)++;

562 
xdyd
 = *
	`__SIMD32
(
±r1
)++;

565 
R
 = 
	`__QADD16
(
xaya
, 
xcyc
);

568 
T
 = 
	`__QADD16
(
xbyb
, 
xdyd
);

571 
±r1
 =Ötr1 - 8u;

576 *
	`__SIMD32
(
±r1
)++ = 
	`__SHADD16
(
R
, 
T
);

579 
T
 = 
	`__QADD16
(
xbyb
, 
xdyd
);

583 *
	`__SIMD32
(
±r1
)++ = 
	`__SHSUB16
(
R
, 
T
);

586 
S
 = 
	`__QSUB16
(
xaya
, 
xcyc
);

590 
U
 = 
	`__QSUB16
(
xbyb
, 
xdyd
);

592 #i‚de‡
ARM_MATH_BIG_ENDIAN


596 *
	`__SIMD32
(
±r1
)++ = 
	`__SHSAX
(
S
, 
U
);

601 *
	`__SIMD32
(
±r1
)++ = 
	`__SHASX
(
S
, 
U
);

607 *
	`__SIMD32
(
±r1
)++ = 
	`__SHASX
(
S
, 
U
);

612 *
	`__SIMD32
(
±r1
)++ = 
	`__SHSAX
(
S
, 
U
);

616 } --
j
);

630 
q15_t
 
R0
, 
R1
, 
S0
, 
S1
, 
T0
, 
T1
, 
U0
, 
U1
;

631 
q15_t
 
Co1
, 
Si1
, 
Co2
, 
Si2
, 
Co3
, 
Si3
, 
out1
, 
out2
;

632 
uöt32_t
 
n1
, 
n2
, 
ic
, 
i0
, 
i1
, 
i2
, 
i3
, 
j
, 
k
;

639 
n2
 = 
f·Lí
;

640 
n1
 = 
n2
;

643 
n2
 >>= 2u;

646 
ic
 = 0u;

649 
i0
 = 0u;

650 
j
 = 
n2
;

661 
i1
 = 
i0
 + 
n2
;

662 
i2
 = 
i1
 + 
n2
;

663 
i3
 = 
i2
 + 
n2
;

669 
T0
 = 
pSrc16
[
i0
 * 2u] >> 2u;

670 
T1
 = 
pSrc16
[(
i0
 * 2u) + 1u] >> 2u;

674 
S0
 = 
pSrc16
[
i2
 * 2u] >> 2u;

675 
S1
 = 
pSrc16
[(
i2
 * 2u) + 1u] >> 2u;

678 
R0
 = 
	`__SSAT
(
T0
 + 
S0
, 16u);

680 
R1
 = 
	`__SSAT
(
T1
 + 
S1
, 16u);

683 
S0
 = 
	`__SSAT
(
T0
 - S0, 16);

685 
S1
 = 
	`__SSAT
(
T1
 - S1, 16);

690 
T0
 = 
pSrc16
[
i1
 * 2u] >> 2u;

691 
T1
 = 
pSrc16
[(
i1
 * 2u) + 1u] >> 2u;

695 
U0
 = 
pSrc16
[
i3
 * 2u] >> 2u;

696 
U1
 = 
pSrc16
[(
i3
 * 2u) + 1] >> 2u;

699 
T0
 = 
	`__SSAT
(T0 + 
U0
, 16u);

701 
T1
 = 
	`__SSAT
(T1 + 
U1
, 16u);

706 
pSrc16
[
i0
 * 2u] = (
R0
 >> 1uË+ (
T0
 >> 1u);

707 
pSrc16
[(
i0
 * 2uË+ 1u] = (
R1
 >> 1uË+ (
T1
 >> 1u);

711 
R0
 = 
	`__SSAT
(R0 - 
T0
, 16u);

712 
R1
 = 
	`__SSAT
(R1 - 
T1
, 16u);

715 
Co2
 = 
pC€f16
[2u * 
ic
 * 2u];

716 
Si2
 = 
pC€f16
[(2u * 
ic
 * 2u) + 1];

719 
out1
 = (
q15_t
Ë((
Co2
 * 
R0
 + 
Si2
 * 
R1
) >> 16u);

721 
out2
 = (
q15_t
Ë((-
Si2
 * 
R0
 + 
Co2
 * 
R1
) >> 16u);

726 
T0
 = 
pSrc16
[
i1
 * 2u] >> 2;

727 
T1
 = 
pSrc16
[(
i1
 * 2u) + 1] >> 2;

731 
pSrc16
[
i1
 * 2u] = 
out1
;

732 
pSrc16
[(
i1
 * 2uË+ 1] = 
out2
;

737 
U0
 = 
pSrc16
[
i3
 * 2u] >> 2;

738 
U1
 = 
pSrc16
[(
i3
 * 2u) + 1] >> 2;

740 
T0
 = 
	`__SSAT
(T0 - 
U0
, 16);

742 
T1
 = 
	`__SSAT
(T1 - 
U1
, 16);

745 
R0
 = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë(
S0
 - 
T1
), 16);

746 
R1
 = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë(
S1
 + 
T0
), 16);

749 
S0
 = (
q15_t
Ë
	`__SSAT
(((
q31_t
ËS0 + 
T1
), 16u);

750 
S1
 = (
q15_t
Ë
	`__SSAT
(((
q31_t
ËS1 - 
T0
), 16u);

753 
Co1
 = 
pC€f16
[
ic
 * 2u];

754 
Si1
 = 
pC€f16
[(
ic
 * 2u) + 1];

757 
out1
 = (
q15_t
Ë((
Si1
 * 
S1
 + 
Co1
 * 
S0
) >> 16);

759 
out2
 = (
q15_t
Ë((-
Si1
 * 
S0
 + 
Co1
 * 
S1
) >> 16);

762 
pSrc16
[
i2
 * 2u] = 
out1
;

763 
pSrc16
[(
i2
 * 2uË+ 1] = 
out2
;

766 
Co3
 = 
pC€f16
[3u * (
ic
 * 2u)];

767 
Si3
 = 
pC€f16
[(3u * (
ic
 * 2u)) + 1];

770 
out1
 = (
q15_t
Ë((
Si3
 * 
R1
 + 
Co3
 * 
R0
) >> 16u);

772 
out2
 = (
q15_t
Ë((-
Si3
 * 
R0
 + 
Co3
 * 
R1
) >> 16u);

774 
pSrc16
[
i3
 * 2u] = 
out1
;

775 
pSrc16
[(
i3
 * 2uË+ 1] = 
out2
;

778 
ic
 = i¯+ 
twidC€fModifõr
;

781 
i0
 = i0 + 1u;

783 } --
j
);

792 
twidC€fModifõr
 <<= 2u;

795 
k
 = 
f·Lí
 / 4u; k > 4u; k >>= 2u)

798 
n1
 = 
n2
;

799 
n2
 >>= 2u;

800 
ic
 = 0u;

802 
j
 = 0u; j <(
n2
 - 1u); j++)

805 
Co1
 = 
pC€f16
[
ic
 * 2u];

806 
Si1
 = 
pC€f16
[(
ic
 * 2u) + 1u];

807 
Co2
 = 
pC€f16
[2u * (
ic
 * 2u)];

808 
Si2
 = 
pC€f16
[(2u * (
ic
 * 2u)) + 1u];

809 
Co3
 = 
pC€f16
[3u * (
ic
 * 2u)];

810 
Si3
 = 
pC€f16
[(3u * (
ic
 * 2u)) + 1u];

813 
ic
 = i¯+ 
twidC€fModifõr
;

816 
i0
 = 
j
; i0 < 
f·Lí
; i0 +
n1
)

820 
i1
 = 
i0
 + 
n2
;

821 
i2
 = 
i1
 + 
n2
;

822 
i3
 = 
i2
 + 
n2
;

826 
T0
 = 
pSrc16
[
i0
 * 2u];

827 
T1
 = 
pSrc16
[(
i0
 * 2u) + 1u];

830 
S0
 = 
pSrc16
[
i2
 * 2u];

831 
S1
 = 
pSrc16
[(
i2
 * 2u) + 1u];

834 
R0
 = 
	`__SSAT
(
T0
 + 
S0
, 16);

835 
R1
 = 
	`__SSAT
(
T1
 + 
S1
, 16);

838 
S0
 = 
	`__SSAT
(
T0
 - S0, 16);

839 
S1
 = 
	`__SSAT
(
T1
 - S1, 16);

843 
T0
 = 
pSrc16
[
i1
 * 2u];

844 
T1
 = 
pSrc16
[(
i1
 * 2u) + 1u];

847 
U0
 = 
pSrc16
[
i3
 * 2u];

848 
U1
 = 
pSrc16
[(
i3
 * 2u) + 1u];

852 
T0
 = 
	`__SSAT
(T0 + 
U0
, 16);

853 
T1
 = 
	`__SSAT
(T1 + 
U1
, 16);

859 
out1
 = ((
R0
 >> 1uË+ (
T0
 >> 1u)) >> 1u;

860 
out2
 = ((
R1
 >> 1uË+ (
T1
 >> 1u)) >> 1u;

862 
pSrc16
[
i0
 * 2u] = 
out1
;

863 
pSrc16
[(2u * 
i0
Ë+ 1u] = 
out2
;

866 
R0
 = (R0 >> 1uË- (
T0
 >> 1u);

867 
R1
 = (R1 >> 1uË- (
T1
 >> 1u);

870 
out1
 = (
q15_t
Ë((
Co2
 * 
R0
 + 
Si2
 * 
R1
) >> 16u);

873 
out2
 = (
q15_t
Ë((-
Si2
 * 
R0
 + 
Co2
 * 
R1
) >> 16u);

877 
T0
 = 
pSrc16
[
i1
 * 2u];

878 
T1
 = 
pSrc16
[(
i1
 * 2u) + 1u];

883 
pSrc16
[
i1
 * 2u] = 
out1
;

884 
pSrc16
[(
i1
 * 2uË+ 1u] = 
out2
;

889 
U0
 = 
pSrc16
[
i3
 * 2u];

890 
U1
 = 
pSrc16
[(
i3
 * 2u) + 1u];

893 
T0
 = 
	`__SSAT
(T0 - 
U0
, 16);

894 
T1
 = 
	`__SSAT
(T1 - 
U1
, 16);

897 
R0
 = (
S0
 >> 1uË- (
T1
 >> 1u);

898 
R1
 = (
S1
 >> 1uË+ (
T0
 >> 1u);

901 
S0
 = (S0 >> 1uË+ (
T1
 >> 1u);

902 
S1
 = (S1 >> 1uË- (
T0
 >> 1u);

905 
out1
 = (
q15_t
Ë((
Co1
 * 
S0
 + 
Si1
 * 
S1
) >> 16u);

907 
out2
 = (
q15_t
Ë((-
Si1
 * 
S0
 + 
Co1
 * 
S1
) >> 16u);

911 
pSrc16
[
i2
 * 2u] = 
out1
;

912 
pSrc16
[(
i2
 * 2uË+ 1u] = 
out2
;

915 
out1
 = (
q15_t
Ë((
Si3
 * 
R1
 + 
Co3
 * 
R0
) >> 16u);

917 
out2
 = (
q15_t
Ë((-
Si3
 * 
R0
 + 
Co3
 * 
R1
) >> 16u);

920 
pSrc16
[
i3
 * 2u] = 
out1
;

921 
pSrc16
[(
i3
 * 2uË+ 1u] = 
out2
;

925 
twidC€fModifõr
 <<= 2u;

936 
n1
 = 
n2
;

937 
n2
 >>= 2u;

942 
i0
 = 0u; i0 <(
f·Lí
 - 
n1
); i0 +=Ç1)

946 
i1
 = 
i0
 + 
n2
;

947 
i2
 = 
i1
 + 
n2
;

948 
i3
 = 
i2
 + 
n2
;

952 
T0
 = 
pSrc16
[
i0
 * 2u];

953 
T1
 = 
pSrc16
[(
i0
 * 2u) + 1u];

956 
S0
 = 
pSrc16
[
i2
 * 2u];

957 
S1
 = 
pSrc16
[(
i2
 * 2u) + 1u];

960 
R0
 = 
	`__SSAT
(
T0
 + 
S0
, 16u);

961 
R1
 = 
	`__SSAT
(
T1
 + 
S1
, 16u);

964 
S0
 = 
	`__SSAT
(
T0
 - S0, 16u);

965 
S1
 = 
	`__SSAT
(
T1
 - S1, 16u);

969 
T0
 = 
pSrc16
[
i1
 * 2u];

970 
T1
 = 
pSrc16
[(
i1
 * 2u) + 1u];

972 
U0
 = 
pSrc16
[
i3
 * 2u];

973 
U1
 = 
pSrc16
[(
i3
 * 2u) + 1u];

976 
T0
 = 
	`__SSAT
(T0 + 
U0
, 16u);

977 
T1
 = 
	`__SSAT
(T1 + 
U1
, 16u);

982 
pSrc16
[
i0
 * 2u] = (
R0
 >> 1uË+ (
T0
 >> 1u);

983 
pSrc16
[(
i0
 * 2uË+ 1u] = (
R1
 >> 1uË+ (
T1
 >> 1u);

986 
R0
 = (R0 >> 1uË- (
T0
 >> 1u);

987 
R1
 = (R1 >> 1uË- (
T1
 >> 1u);

989 
T0
 = 
pSrc16
[
i1
 * 2u];

990 
T1
 = 
pSrc16
[(
i1
 * 2u) + 1u];

995 
pSrc16
[
i1
 * 2u] = 
R0
;

996 
pSrc16
[(
i1
 * 2uË+ 1u] = 
R1
;

999 
U0
 = 
pSrc16
[
i3
 * 2u];

1000 
U1
 = 
pSrc16
[(
i3
 * 2u) + 1u];

1002 
T0
 = 
	`__SSAT
(T0 - 
U0
, 16u);

1003 
T1
 = 
	`__SSAT
(T1 - 
U1
, 16u);

1008 
pSrc16
[
i2
 * 2u] = (
S0
 >> 1uË+ (
T1
 >> 1u);

1009 
pSrc16
[(
i2
 * 2uË+ 1u] = (
S1
 >> 1uË- (
T0
 >> 1u);

1014 
pSrc16
[
i3
 * 2u] = (
S0
 >> 1uË- (
T1
 >> 1u);

1015 
pSrc16
[(
i3
 * 2uË+ 1u] = (
S1
 >> 1uË+ (
T0
 >> 1u);

1028 
	}
}

1080 
	$¨m_ødix4_buâîÊy_övî£_q15
(

1081 
q15_t
 * 
pSrc16
,

1082 
uöt32_t
 
f·Lí
,

1083 
q15_t
 * 
pC€f16
,

1084 
uöt32_t
 
twidC€fModifõr
)

1087 #i‚de‡
ARM_MATH_CM0_FAMILY


1091 
q31_t
 
R
, 
S
, 
T
, 
U
;

1092 
q31_t
 
C1
, 
C2
, 
C3
, 
out1
, 
out2
;

1093 
uöt32_t
 
n1
, 
n2
, 
ic
, 
i0
, 
j
, 
k
;

1095 
q15_t
 *
±r1
;

1096 
q15_t
 *
pSi0
;

1097 
q15_t
 *
pSi1
;

1098 
q15_t
 *
pSi2
;

1099 
q15_t
 *
pSi3
;

1101 
q31_t
 
xaya
, 
xbyb
, 
xcyc
, 
xdyd
;

1108 
n2
 = 
f·Lí
;

1109 
n1
 = 
n2
;

1112 
n2
 >>= 2u;

1115 
ic
 = 0u;

1118 
j
 = 
n2
;

1120 
pSi0
 = 
pSrc16
;

1121 
pSi1
 = 
pSi0
 + 2 * 
n2
;

1122 
pSi2
 = 
pSi1
 + 2 * 
n2
;

1123 
pSi3
 = 
pSi2
 + 2 * 
n2
;

1134 
T
 = 
	`_SIMD32_OFFSET
(
pSi0
);

1135 
T
 = 
	`__SHADD16
(T, 0);

1136 
T
 = 
	`__SHADD16
(T, 0);

1139 
S
 = 
	`_SIMD32_OFFSET
(
pSi2
);

1140 
S
 = 
	`__SHADD16
(S, 0);

1141 
S
 = 
	`__SHADD16
(S, 0);

1144 
R
 = 
	`__QADD16
(
T
, 
S
);

1147 
S
 = 
	`__QSUB16
(
T
, S);

1151 
T
 = 
	`_SIMD32_OFFSET
(
pSi1
);

1152 
T
 = 
	`__SHADD16
(T, 0);

1153 
T
 = 
	`__SHADD16
(T, 0);

1156 
U
 = 
	`_SIMD32_OFFSET
(
pSi3
);

1157 
U
 = 
	`__SHADD16
(U, 0);

1158 
U
 = 
	`__SHADD16
(U, 0);

1161 
T
 = 
	`__QADD16
(T, 
U
);

1166 
	`_SIMD32_OFFSET
(
pSi0
Ë
	`__SHADD16
(
R
, 
T
);

1167 
pSi0
 += 2;

1170 
R
 = 
	`__QSUB16
(R, 
T
);

1173 
C2
 = 
	`_SIMD32_OFFSET
(
pC€f16
 + (4u * 
ic
));

1175 #i‚de‡
ARM_MATH_BIG_ENDIAN


1178 
out1
 = 
	`__SMUSD
(
C2
, 
R
) >> 16u;

1180 
out2
 = 
	`__SMUADX
(
C2
, 
R
);

1185 
out1
 = 
	`__SMUADX
(
C2
, 
R
) >> 16u;

1187 
out2
 = 
	`__SMUSD
(
	`__QSUB16
(0, 
C2
), 
R
);

1193 
T
 = 
	`_SIMD32_OFFSET
(
pSi1
);

1194 
T
 = 
	`__SHADD16
(T, 0);

1195 
T
 = 
	`__SHADD16
(T, 0);

1199 
	`_SIMD32_OFFSET
(
pSi1
) =

1200 (
q31_t
Ë((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

1201 
pSi1
 += 2;

1205 
U
 = 
	`_SIMD32_OFFSET
(
pSi3
);

1206 
U
 = 
	`__SHADD16
(U, 0);

1207 
U
 = 
	`__SHADD16
(U, 0);

1210 
T
 = 
	`__QSUB16
(T, 
U
);

1212 #i‚de‡
ARM_MATH_BIG_ENDIAN


1215 
R
 = 
	`__QSAX
(
S
, 
T
);

1217 
S
 = 
	`__QASX
(S, 
T
);

1222 
R
 = 
	`__QASX
(
S
, 
T
);

1224 
S
 = 
	`__QSAX
(S, 
T
);

1229 
C1
 = 
	`_SIMD32_OFFSET
(
pC€f16
 + (2u * 
ic
));

1232 #i‚de‡
ARM_MATH_BIG_ENDIAN


1235 
out1
 = 
	`__SMUSD
(
C1
, 
S
) >> 16u;

1237 
out2
 = 
	`__SMUADX
(
C1
, 
S
);

1242 
out1
 = 
	`__SMUADX
(
C1
, 
S
) >> 16u;

1244 
out2
 = 
	`__SMUSD
(
	`__QSUB16
(0, 
C1
), 
S
);

1249 
	`_SIMD32_OFFSET
(
pSi2
) =

1250 ((
out2
Ë& 0xFFFF0000Ë| ((
out1
) & 0x0000FFFF);

1251 
pSi2
 += 2;

1255 
C3
 = 
	`_SIMD32_OFFSET
(
pC€f16
 + (6u * 
ic
));

1258 #i‚de‡
ARM_MATH_BIG_ENDIAN


1261 
out1
 = 
	`__SMUSD
(
C3
, 
R
) >> 16u;

1263 
out2
 = 
	`__SMUADX
(
C3
, 
R
);

1268 
out1
 = 
	`__SMUADX
(
C3
, 
R
) >> 16u;

1270 
out2
 = 
	`__SMUSD
(
	`__QSUB16
(0, 
C3
), 
R
);

1275 
	`_SIMD32_OFFSET
(
pSi3
) =

1276 ((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

1277 
pSi3
 += 2;

1280 
ic
 = i¯+ 
twidC€fModifõr
;

1282 } --
j
);

1291 
twidC€fModifõr
 <<= 2u;

1294 
k
 = 
f·Lí
 / 4u; k > 4u; k >>= 2u)

1297 
n1
 = 
n2
;

1298 
n2
 >>= 2u;

1299 
ic
 = 0u;

1301 
j
 = 0u; j <(
n2
 - 1u); j++)

1304 
C1
 = 
	`_SIMD32_OFFSET
(
pC€f16
 + (2u * 
ic
));

1305 
C2
 = 
	`_SIMD32_OFFSET
(
pC€f16
 + (4u * 
ic
));

1306 
C3
 = 
	`_SIMD32_OFFSET
(
pC€f16
 + (6u * 
ic
));

1309 
ic
 = i¯+ 
twidC€fModifõr
;

1311 
pSi0
 = 
pSrc16
 + 2 * 
j
;

1312 
pSi1
 = 
pSi0
 + 2 * 
n2
;

1313 
pSi2
 = 
pSi1
 + 2 * 
n2
;

1314 
pSi3
 = 
pSi2
 + 2 * 
n2
;

1317 
i0
 = 
j
; i0 < 
f·Lí
; i0 +
n1
)

1321 
T
 = 
	`_SIMD32_OFFSET
(
pSi0
);

1324 
S
 = 
	`_SIMD32_OFFSET
(
pSi2
);

1327 
R
 = 
	`__QADD16
(
T
, 
S
);

1330 
S
 = 
	`__QSUB16
(
T
, S);

1334 
T
 = 
	`_SIMD32_OFFSET
(
pSi1
);

1337 
U
 = 
	`_SIMD32_OFFSET
(
pSi3
);

1340 
T
 = 
	`__QADD16
(T, 
U
);

1346 
out1
 = 
	`__SHADD16
(
R
, 
T
);

1347 
out1
 = 
	`__SHADD16
(out1, 0);

1348 
	`_SIMD32_OFFSET
(
pSi0
Ë
out1
;

1349 
pSi0
 +2 * 
n1
;

1352 
R
 = 
	`__SHSUB16
(R, 
T
);

1354 #i‚de‡
ARM_MATH_BIG_ENDIAN


1357 
out1
 = 
	`__SMUSD
(
C2
, 
R
) >> 16u;

1360 
out2
 = 
	`__SMUADX
(
C2
, 
R
);

1365 
out1
 = 
	`__SMUADX
(
R
, 
C2
) >> 16u;

1368 
out2
 = 
	`__SMUSD
(
	`__QSUB16
(0, 
C2
), 
R
);

1374 
T
 = 
	`_SIMD32_OFFSET
(
pSi1
);

1379 
	`_SIMD32_OFFSET
(
pSi1
) =

1380 ((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

1381 
pSi1
 +2 * 
n1
;

1386 
U
 = 
	`_SIMD32_OFFSET
(
pSi3
);

1389 
T
 = 
	`__QSUB16
(T, 
U
);

1391 #i‚de‡
ARM_MATH_BIG_ENDIAN


1394 
R
 = 
	`__SHSAX
(
S
, 
T
);

1397 
S
 = 
	`__SHASX
(S, 
T
);

1401 
out1
 = 
	`__SMUSD
(
C1
, 
S
) >> 16u;

1402 
out2
 = 
	`__SMUADX
(
C1
, 
S
);

1407 
R
 = 
	`__SHASX
(
S
, 
T
);

1410 
S
 = 
	`__SHSAX
(S, 
T
);

1414 
out1
 = 
	`__SMUADX
(
S
, 
C1
) >> 16u;

1415 
out2
 = 
	`__SMUSD
(
	`__QSUB16
(0, 
C1
), 
S
);

1421 
	`_SIMD32_OFFSET
(
pSi2
) =

1422 ((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

1423 
pSi2
 +2 * 
n1
;

1427 #i‚de‡
ARM_MATH_BIG_ENDIAN


1429 
out1
 = 
	`__SMUSD
(
C3
, 
R
) >> 16u;

1430 
out2
 = 
	`__SMUADX
(
C3
, 
R
);

1434 
out1
 = 
	`__SMUADX
(
C3
, 
R
) >> 16u;

1435 
out2
 = 
	`__SMUSD
(
	`__QSUB16
(0, 
C3
), 
R
);

1441 
	`_SIMD32_OFFSET
(
pSi3
) =

1442 ((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

1443 
pSi3
 +2 * 
n1
;

1447 
twidC€fModifõr
 <<= 2u;

1457 
j
 = 
f·Lí
 >> 2;

1459 
±r1
 = &
pSrc16
[0];

1467 
xaya
 = *
	`__SIMD32
(
±r1
)++;

1470 
xbyb
 = *
	`__SIMD32
(
±r1
)++;

1473 
xcyc
 = *
	`__SIMD32
(
±r1
)++;

1476 
xdyd
 = *
	`__SIMD32
(
±r1
)++;

1479 
R
 = 
	`__QADD16
(
xaya
, 
xcyc
);

1482 
T
 = 
	`__QADD16
(
xbyb
, 
xdyd
);

1485 
±r1
 =Ötr1 - 8u;

1490 *
	`__SIMD32
(
±r1
)++ = 
	`__SHADD16
(
R
, 
T
);

1493 
T
 = 
	`__QADD16
(
xbyb
, 
xdyd
);

1497 *
	`__SIMD32
(
±r1
)++ = 
	`__SHSUB16
(
R
, 
T
);

1500 
S
 = 
	`__QSUB16
(
xaya
, 
xcyc
);

1504 
U
 = 
	`__QSUB16
(
xbyb
, 
xdyd
);

1506 #i‚de‡
ARM_MATH_BIG_ENDIAN


1510 *
	`__SIMD32
(
±r1
)++ = 
	`__SHASX
(
S
, 
U
);

1515 *
	`__SIMD32
(
±r1
)++ = 
	`__SHSAX
(
S
, 
U
);

1521 *
	`__SIMD32
(
±r1
)++ = 
	`__SHSAX
(
S
, 
U
);

1526 *
	`__SIMD32
(
±r1
)++ = 
	`__SHASX
(
S
, 
U
);

1531 } --
j
);

1545 
q15_t
 
R0
, 
R1
, 
S0
, 
S1
, 
T0
, 
T1
, 
U0
, 
U1
;

1546 
q15_t
 
Co1
, 
Si1
, 
Co2
, 
Si2
, 
Co3
, 
Si3
, 
out1
, 
out2
;

1547 
uöt32_t
 
n1
, 
n2
, 
ic
, 
i0
, 
i1
, 
i2
, 
i3
, 
j
, 
k
;

1554 
n2
 = 
f·Lí
;

1555 
n1
 = 
n2
;

1558 
n2
 >>= 2u;

1561 
ic
 = 0u;

1564 
i0
 = 0u;

1566 
j
 = 
n2
;

1577 
i1
 = 
i0
 + 
n2
;

1578 
i2
 = 
i1
 + 
n2
;

1579 
i3
 = 
i2
 + 
n2
;

1584 
T0
 = 
pSrc16
[
i0
 * 2u] >> 2u;

1585 
T1
 = 
pSrc16
[(
i0
 * 2u) + 1u] >> 2u;

1588 
S0
 = 
pSrc16
[
i2
 * 2u] >> 2u;

1589 
S1
 = 
pSrc16
[(
i2
 * 2u) + 1u] >> 2u;

1592 
R0
 = 
	`__SSAT
(
T0
 + 
S0
, 16u);

1593 
R1
 = 
	`__SSAT
(
T1
 + 
S1
, 16u);

1595 
S0
 = 
	`__SSAT
(
T0
 - S0, 16u);

1596 
S1
 = 
	`__SSAT
(
T1
 - S1, 16u);

1601 
T0
 = 
pSrc16
[
i1
 * 2u] >> 2u;

1602 
T1
 = 
pSrc16
[(
i1
 * 2u) + 1u] >> 2u;

1605 
U0
 = 
pSrc16
[
i3
 * 2u] >> 2u;

1606 
U1
 = 
pSrc16
[(
i3
 * 2u) + 1u] >> 2u;

1609 
T0
 = 
	`__SSAT
(T0 + 
U0
, 16u);

1610 
T1
 = 
	`__SSAT
(T1 + 
U1
, 16u);

1615 
pSrc16
[
i0
 * 2u] = (
R0
 >> 1uË+ (
T0
 >> 1u);

1616 
pSrc16
[(
i0
 * 2uË+ 1u] = (
R1
 >> 1uË+ (
T1
 >> 1u);

1619 
R0
 = 
	`__SSAT
(R0 - 
T0
, 16u);

1620 
R1
 = 
	`__SSAT
(R1 - 
T1
, 16u);

1622 
Co2
 = 
pC€f16
[2u * 
ic
 * 2u];

1623 
Si2
 = 
pC€f16
[(2u * 
ic
 * 2u) + 1u];

1625 
out1
 = (
q15_t
Ë((
Co2
 * 
R0
 - 
Si2
 * 
R1
) >> 16u);

1627 
out2
 = (
q15_t
Ë((
Si2
 * 
R0
 + 
Co2
 * 
R1
) >> 16u);

1632 
T0
 = 
pSrc16
[
i1
 * 2u] >> 2u;

1633 
T1
 = 
pSrc16
[(
i1
 * 2u) + 1u] >> 2u;

1637 
pSrc16
[
i1
 * 2u] = 
out1
;

1638 
pSrc16
[(
i1
 * 2uË+ 1u] = 
out2
;

1643 
U0
 = 
pSrc16
[
i3
 * 2u] >> 2u;

1644 
U1
 = 
pSrc16
[(
i3
 * 2u) + 1u] >> 2u;

1647 
T0
 = 
	`__SSAT
(T0 - 
U0
, 16u);

1648 
T1
 = 
	`__SSAT
(T1 - 
U1
, 16u);

1650 
R0
 = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë(
S0
 + 
T1
), 16);

1651 
R1
 = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë(
S1
 - 
T0
), 16);

1653 
S0
 = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë(S0 - 
T1
), 16);

1654 
S1
 = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë(S1 + 
T0
), 16);

1657 
Co1
 = 
pC€f16
[
ic
 * 2u];

1658 
Si1
 = 
pC€f16
[(
ic
 * 2u) + 1u];

1661 
out1
 = (
q15_t
Ë((
Co1
 * 
S0
 - 
Si1
 * 
S1
) >> 16u);

1663 
out2
 = (
q15_t
Ë((
Si1
 * 
S0
 + 
Co1
 * 
S1
) >> 16u);

1665 
pSrc16
[
i2
 * 2u] = 
out1
;

1666 
pSrc16
[(
i2
 * 2uË+ 1u] = 
out2
;

1669 
Co3
 = 
pC€f16
[3u * 
ic
 * 2u];

1670 
Si3
 = 
pC€f16
[(3u * 
ic
 * 2u) + 1u];

1673 
out1
 = (
q15_t
Ë((
Co3
 * 
R0
 - 
Si3
 * 
R1
) >> 16u);

1675 
out2
 = (
q15_t
Ë((
Si3
 * 
R0
 + 
Co3
 * 
R1
) >> 16u);

1677 
pSrc16
[
i3
 * 2u] = 
out1
;

1678 
pSrc16
[(
i3
 * 2uË+ 1u] = 
out2
;

1681 
ic
 = i¯+ 
twidC€fModifõr
;

1684 
i0
 = i0 + 1u;

1686 } --
j
);

1696 
twidC€fModifõr
 <<= 2u;

1699 
k
 = 
f·Lí
 / 4u; k > 4u; k >>= 2u)

1702 
n1
 = 
n2
;

1703 
n2
 >>= 2u;

1704 
ic
 = 0u;

1706 
j
 = 0u; j <(
n2
 - 1u); j++)

1709 
Co1
 = 
pC€f16
[
ic
 * 2u];

1710 
Si1
 = 
pC€f16
[(
ic
 * 2u) + 1u];

1711 
Co2
 = 
pC€f16
[2u * 
ic
 * 2u];

1712 
Si2
 = 
pC€f16
[2u * 
ic
 * 2u + 1u];

1713 
Co3
 = 
pC€f16
[3u * 
ic
 * 2u];

1714 
Si3
 = 
pC€f16
[(3u * 
ic
 * 2u) + 1u];

1717 
ic
 = i¯+ 
twidC€fModifõr
;

1720 
i0
 = 
j
; i0 < 
f·Lí
; i0 +
n1
)

1724 
i1
 = 
i0
 + 
n2
;

1725 
i2
 = 
i1
 + 
n2
;

1726 
i3
 = 
i2
 + 
n2
;

1730 
T0
 = 
pSrc16
[
i0
 * 2u];

1731 
T1
 = 
pSrc16
[(
i0
 * 2u) + 1u];

1734 
S0
 = 
pSrc16
[
i2
 * 2u];

1735 
S1
 = 
pSrc16
[(
i2
 * 2u) + 1u];

1739 
R0
 = 
	`__SSAT
(
T0
 + 
S0
, 16u);

1740 
R1
 = 
	`__SSAT
(
T1
 + 
S1
, 16u);

1742 
S0
 = 
	`__SSAT
(
T0
 - S0, 16u);

1743 
S1
 = 
	`__SSAT
(
T1
 - S1, 16u);

1747 
T0
 = 
pSrc16
[
i1
 * 2u];

1748 
T1
 = 
pSrc16
[(
i1
 * 2u) + 1u];

1751 
U0
 = 
pSrc16
[
i3
 * 2u];

1752 
U1
 = 
pSrc16
[(
i3
 * 2u) + 1u];

1755 
T0
 = 
	`__SSAT
(T0 + 
U0
, 16u);

1756 
T1
 = 
	`__SSAT
(T1 + 
U1
, 16u);

1761 
pSrc16
[
i0
 * 2u] = ((
R0
 >> 1uË+ (
T0
 >> 1u)) >> 1u;

1762 
pSrc16
[(
i0
 * 2uË+ 1u] = ((
R1
 >> 1uË+ (
T1
 >> 1u)) >> 1u;

1765 
R0
 = (R0 >> 1uË- (
T0
 >> 1u);

1766 
R1
 = (R1 >> 1uË- (
T1
 >> 1u);

1769 
out1
 = (
q15_t
Ë((
Co2
 * 
R0
 - 
Si2
 * 
R1
) >> 16);

1771 
out2
 = (
q15_t
Ë((
Si2
 * 
R0
 + 
Co2
 * 
R1
) >> 16);

1775 
T0
 = 
pSrc16
[
i1
 * 2u];

1776 
T1
 = 
pSrc16
[(
i1
 * 2u) + 1u];

1781 
pSrc16
[
i1
 * 2u] = 
out1
;

1782 
pSrc16
[(
i1
 * 2uË+ 1u] = 
out2
;

1786 
U0
 = 
pSrc16
[
i3
 * 2u];

1787 
U1
 = 
pSrc16
[(
i3
 * 2u) + 1u];

1790 
T0
 = 
	`__SSAT
(T0 - 
U0
, 16u);

1791 
T1
 = 
	`__SSAT
(T1 - 
U1
, 16u);

1794 
R0
 = (
S0
 >> 1uË+ (
T1
 >> 1u);

1795 
R1
 = (
S1
 >> 1uË- (
T0
 >> 1u);

1798 
S0
 = (S0 >> 1uË- (
T1
 >> 1u);

1799 
S1
 = (S1 >> 1uË+ (
T0
 >> 1u);

1802 
out1
 = (
q15_t
Ë((
Co1
 * 
S0
 - 
Si1
 * 
S1
) >> 16u);

1803 
out2
 = (
q15_t
Ë((
Si1
 * 
S0
 + 
Co1
 * 
S1
) >> 16u);

1806 
pSrc16
[
i2
 * 2u] = 
out1
;

1807 
pSrc16
[(
i2
 * 2uË+ 1u] = 
out2
;

1810 
out1
 = (
q15_t
Ë((
Co3
 * 
R0
 - 
Si3
 * 
R1
) >> 16u);

1812 
out2
 = (
q15_t
Ë((
Si3
 * 
R0
 + 
Co3
 * 
R1
) >> 16u);

1815 
pSrc16
[
i3
 * 2u] = 
out1
;

1816 
pSrc16
[(
i3
 * 2uË+ 1u] = 
out2
;

1822 
twidC€fModifõr
 <<= 2u;

1836 
n1
 = 
n2
;

1837 
n2
 >>= 2u;

1840 
i0
 = 0u; i0 <(
f·Lí
 - 
n1
); i0 +=Ç1)

1844 
i1
 = 
i0
 + 
n2
;

1845 
i2
 = 
i1
 + 
n2
;

1846 
i3
 = 
i2
 + 
n2
;

1850 
T0
 = 
pSrc16
[
i0
 * 2u];

1851 
T1
 = 
pSrc16
[(
i0
 * 2u) + 1u];

1853 
S0
 = 
pSrc16
[
i2
 * 2u];

1854 
S1
 = 
pSrc16
[(
i2
 * 2u) + 1u];

1857 
R0
 = 
	`__SSAT
(
T0
 + 
S0
, 16u);

1858 
R1
 = 
	`__SSAT
(
T1
 + 
S1
, 16u);

1860 
S0
 = 
	`__SSAT
(
T0
 - S0, 16u);

1861 
S1
 = 
	`__SSAT
(
T1
 - S1, 16u);

1865 
T0
 = 
pSrc16
[
i1
 * 2u];

1866 
T1
 = 
pSrc16
[(
i1
 * 2u) + 1u];

1868 
U0
 = 
pSrc16
[
i3
 * 2u];

1869 
U1
 = 
pSrc16
[(
i3
 * 2u) + 1u];

1872 
T0
 = 
	`__SSAT
(T0 + 
U0
, 16u);

1873 
T1
 = 
	`__SSAT
(T1 + 
U1
, 16u);

1878 
pSrc16
[
i0
 * 2u] = (
R0
 >> 1uË+ (
T0
 >> 1u);

1879 
pSrc16
[(
i0
 * 2uË+ 1u] = (
R1
 >> 1uË+ (
T1
 >> 1u);

1882 
R0
 = (R0 >> 1uË- (
T0
 >> 1u);

1883 
R1
 = (R1 >> 1uË- (
T1
 >> 1u);

1886 
T0
 = 
pSrc16
[
i1
 * 2u];

1887 
T1
 = 
pSrc16
[(
i1
 * 2u) + 1u];

1892 
pSrc16
[
i1
 * 2u] = 
R0
;

1893 
pSrc16
[(
i1
 * 2uË+ 1u] = 
R1
;

1896 
U0
 = 
pSrc16
[
i3
 * 2u];

1897 
U1
 = 
pSrc16
[(
i3
 * 2u) + 1u];

1899 
T0
 = 
	`__SSAT
(T0 - 
U0
, 16u);

1900 
T1
 = 
	`__SSAT
(T1 - 
U1
, 16u);

1905 
pSrc16
[
i2
 * 2u] = (
S0
 >> 1uË- (
T1
 >> 1u);

1906 
pSrc16
[(
i2
 * 2uË+ 1u] = (
S1
 >> 1uË+ (
T0
 >> 1u);

1912 
pSrc16
[
i3
 * 2u] = (
S0
 >> 1uË+ (
T1
 >> 1u);

1913 
pSrc16
[(
i3
 * 2uË+ 1u] = (
S1
 >> 1uË- (
T0
 >> 1u);

1924 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix4_q31.c

42 
	~"¨m_m©h.h
"

44 
¨m_ødix4_buâîÊy_övî£_q31
(

45 
q31_t
 * 
pSrc
,

46 
uöt32_t
 
f·Lí
,

47 
q31_t
 * 
pC€f
,

48 
uöt32_t
 
twidC€fModifõr
);

50 
¨m_ødix4_buâîÊy_q31
(

51 
q31_t
 * 
pSrc
,

52 
uöt32_t
 
f·Lí
,

53 
q31_t
 * 
pC€f
,

54 
uöt32_t
 
twidC€fModifõr
);

56 
¨m_bôªvîßl_q31
(

57 
q31_t
 * 
pSrc
,

58 
uöt32_t
 
f·Lí
,

59 
uöt16_t
 
bôRevFa˘‹
,

60 
uöt16_t
 * 
pBôRevTab
);

90 
	$¨m_cf·_ødix4_q31
(

91 c⁄° 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

92 
q31_t
 * 
pSrc
)

94 if(
S
->
if·Fœg
 == 1u)

97 
	`¨m_ødix4_buâîÊy_övî£_q31
(
pSrc
, 
S
->
f·Lí
, S->
pTwiddÀ
,

98 
S
->
twidC€fModifõr
);

103 
	`¨m_ødix4_buâîÊy_q31
(
pSrc
, 
S
->
f·Lí
, S->
pTwiddÀ
,

104 
S
->
twidC€fModifõr
);

108 if(
S
->
bôRevî£Fœg
 == 1u)

111 
	`¨m_bôªvîßl_q31
(
pSrc
, 
S
->
f·Lí
, S->
bôRevFa˘‹
, S->
pBôRevTabÀ
);

114 
	}
}

163 
	$¨m_ødix4_buâîÊy_q31
(

164 
q31_t
 * 
pSrc
,

165 
uöt32_t
 
f·Lí
,

166 
q31_t
 * 
pC€f
,

167 
uöt32_t
 
twidC€fModifõr
)

169 #i‡
	`deföed
(
ARM_MATH_CM7
)

170 
uöt32_t
 
n1
, 
n2
, 
ü1
, 
ü2
, 
ü3
, 
i0
, 
i1
, 
i2
, 
i3
, 
j
, 
k
;

171 
q31_t
 
t1
, 
t2
, 
r1
, 
r2
, 
s1
, 
s2
, 
co1
, 
co2
, 
co3
, 
si1
, 
si2
, 
si3
;

173 
q31_t
 
xa
, 
xb
, 
xc
, 
xd
;

174 
q31_t
 
ya
, 
yb
, 
yc
, 
yd
;

175 
q31_t
 
xa_out
, 
xb_out
, 
xc_out
, 
xd_out
;

176 
q31_t
 
ya_out
, 
yb_out
, 
yc_out
, 
yd_out
;

178 
q31_t
 *
±r1
;

179 
q63_t
 
xaya
, 
xbyb
, 
xcyc
, 
xdyd
;

188 
n2
 = 
f·Lí
;

189 
n1
 = 
n2
;

191 
n2
 >>= 2u;

192 
i0
 = 0u;

193 
ü1
 = 0u;

195 
j
 = 
n2
;

202 
i1
 = 
i0
 + 
n2
;

203 
i2
 = 
i1
 + 
n2
;

204 
i3
 = 
i2
 + 
n2
;

210 
r1
 = (
pSrc
[(2u * 
i0
)] >> 4uË+ (pSrc[(2u * 
i2
)] >> 4u);

212 
r2
 = (
pSrc
[2u * 
i0
] >> 4uË- (pSrc[2u * 
i2
] >> 4u);

215 
t1
 = (
pSrc
[2u * 
i1
] >> 4uË+ (pSrc[2u * 
i3
] >> 4u);

218 
s1
 = (
pSrc
[(2u * 
i0
Ë+ 1u] >> 4uË+ (pSrc[(2u * 
i2
) + 1u] >> 4u);

220 
s2
 = (
pSrc
[(2u * 
i0
Ë+ 1u] >> 4uË- (pSrc[(2u * 
i2
) + 1u] >> 4u);

223 
pSrc
[2u * 
i0
] = (
r1
 + 
t1
);

225 
r1
 =Ñ1 - 
t1
;

227 
t2
 = (
pSrc
[(2u * 
i1
Ë+ 1u] >> 4uË+ (pSrc[(2u * 
i3
) + 1u] >> 4u);

230 
pSrc
[(2u * 
i0
Ë+ 1u] = (
s1
 + 
t2
);

233 
s1
 = s1 - 
t2
;

236 
t1
 = (
pSrc
[(2u * 
i1
Ë+ 1u] >> 4uË- (pSrc[(2u * 
i3
) + 1u] >> 4u);

238 
t2
 = (
pSrc
[2u * 
i1
] >> 4uË- (pSrc[2u * 
i3
] >> 4u);

241 
ü2
 = 2u * 
ü1
;

242 
co2
 = 
pC€f
[
ü2
 * 2u];

243 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

246 
pSrc
[2u * 
i1
] = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co2
) >> 32)) +

247 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si2
) >> 32))) << 1u;

250 
pSrc
[(2u * 
i1
Ë+ 1u] = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co2
) >> 32)) -

251 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si2
) >> 32))) << 1u;

254 
r1
 = 
r2
 + 
t1
;

256 
r2
 =Ñ2 - 
t1
;

259 
s1
 = 
s2
 - 
t2
;

261 
s2
 = s2 + 
t2
;

263 
co1
 = 
pC€f
[
ü1
 * 2u];

264 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

267 
pSrc
[2u * 
i2
] = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co1
) >> 32)) +

268 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si1
) >> 32))) << 1u;

271 
pSrc
[(2u * 
i2
Ë+ 1u] = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co1
) >> 32)) -

272 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si1
) >> 32))) << 1u;

275 
ü3
 = 3u * 
ü1
;

276 
co3
 = 
pC€f
[
ü3
 * 2u];

277 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

280 
pSrc
[2u * 
i3
] = (((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
co3
) >> 32)) +

281 ((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
si3
) >> 32))) << 1u;

284 
pSrc
[(2u * 
i3
Ë+ 1u] = (((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
co3
) >> 32)) -

285 ((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
si3
) >> 32))) << 1u;

288 
ü1
 = ia1 + 
twidC€fModifõr
;

291 
i0
 = i0 + 1u;

293 } --
j
);

305 
twidC€fModifõr
 <<= 2u;

308 
k
 = 
f·Lí
 / 4u; k > 4u; k >>= 2u)

311 
n1
 = 
n2
;

312 
n2
 >>= 2u;

313 
ü1
 = 0u;

316 
j
 = 0u; j <(
n2
 - 1u); j++)

319 
ü2
 = 
ü1
 + ia1;

320 
ü3
 = 
ü2
 + 
ü1
;

321 
co1
 = 
pC€f
[
ü1
 * 2u];

322 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

323 
co2
 = 
pC€f
[
ü2
 * 2u];

324 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

325 
co3
 = 
pC€f
[
ü3
 * 2u];

326 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

328 
ü1
 = ia1 + 
twidC€fModifõr
;

330 
i0
 = 
j
; i0 < 
f·Lí
; i0 +
n1
)

334 
i1
 = 
i0
 + 
n2
;

335 
i2
 = 
i1
 + 
n2
;

336 
i3
 = 
i2
 + 
n2
;

340 
r1
 = 
pSrc
[2u * 
i0
] +ÖSrc[2u * 
i2
];

342 
r2
 = 
pSrc
[2u * 
i0
] -ÖSrc[2u * 
i2
];

345 
s1
 = 
pSrc
[(2u * 
i0
Ë+ 1u] +ÖSrc[(2u * 
i2
) + 1u];

347 
s2
 = 
pSrc
[(2u * 
i0
Ë+ 1u] -ÖSrc[(2u * 
i2
) + 1u];

350 
t1
 = 
pSrc
[2u * 
i1
] +ÖSrc[2u * 
i3
];

353 
pSrc
[2u * 
i0
] = (
r1
 + 
t1
) >> 2u;

355 
r1
 =Ñ1 - 
t1
;

358 
t2
 = 
pSrc
[(2u * 
i1
Ë+ 1u] +ÖSrc[(2u * 
i3
) + 1u];

360 
pSrc
[(2u * 
i0
Ë+ 1u] = (
s1
 + 
t2
) >> 2u;

363 
s1
 = s1 - 
t2
;

366 
t1
 = 
pSrc
[(2u * 
i1
Ë+ 1u] -ÖSrc[(2u * 
i3
) + 1u];

368 
t2
 = 
pSrc
[2u * 
i1
] -ÖSrc[2u * 
i3
];

371 
pSrc
[2u * 
i1
] = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co2
) >> 32)) +

372 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si2
) >> 32))) >> 1u;

375 
pSrc
[(2u * 
i1
Ë+ 1u] = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co2
) >> 32)) -

376 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si2
) >> 32))) >> 1u;

379 
r1
 = 
r2
 + 
t1
;

381 
r2
 =Ñ2 - 
t1
;

384 
s1
 = 
s2
 - 
t2
;

386 
s2
 = s2 + 
t2
;

389 
pSrc
[2u * 
i2
] = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co1
) >> 32)) +

390 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si1
) >> 32))) >> 1u;

393 
pSrc
[(2u * 
i2
Ë+ 1u] = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co1
) >> 32)) -

394 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si1
) >> 32))) >> 1u;

397 
pSrc
[2u * 
i3
] = (((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
co3
) >> 32)) +

398 ((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
si3
) >> 32))) >> 1u;

401 
pSrc
[(2u * 
i3
Ë+ 1u] = (((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
co3
) >> 32)) -

402 ((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
si3
) >> 32))) >> 1u;

405 
twidC€fModifõr
 <<= 2u;

408 
uöt32_t
 
n1
, 
n2
, 
ü1
, 
ü2
, 
ü3
, 
i0
, 
j
, 
k
;

409 
q31_t
 
t1
, 
t2
, 
r1
, 
r2
, 
s1
, 
s2
, 
co1
, 
co2
, 
co3
, 
si1
, 
si2
, 
si3
;

411 
q31_t
 
xa
, 
xb
, 
xc
, 
xd
;

412 
q31_t
 
ya
, 
yb
, 
yc
, 
yd
;

413 
q31_t
 
xa_out
, 
xb_out
, 
xc_out
, 
xd_out
;

414 
q31_t
 
ya_out
, 
yb_out
, 
yc_out
, 
yd_out
;

416 
q31_t
 *
±r1
;

417 
q31_t
 *
pSi0
;

418 
q31_t
 *
pSi1
;

419 
q31_t
 *
pSi2
;

420 
q31_t
 *
pSi3
;

421 
q63_t
 
xaya
, 
xbyb
, 
xcyc
, 
xdyd
;

430 
n2
 = 
f·Lí
;

431 
n1
 = 
n2
;

433 
n2
 >>= 2u;

435 
ü1
 = 0u;

437 
j
 = 
n2
;

439 
pSi0
 = 
pSrc
;

440 
pSi1
 = 
pSi0
 + 2 * 
n2
;

441 
pSi2
 = 
pSi1
 + 2 * 
n2
;

442 
pSi3
 = 
pSi2
 + 2 * 
n2
;

451 
r1
 = (
pSi0
[0] >> 4uË+ (
pSi2
[0] >> 4u);

453 
r2
 = (
pSi0
[0] >> 4uË- (
pSi2
[0] >> 4u);

456 
t1
 = (
pSi1
[0] >> 4uË+ (
pSi3
[0] >> 4u);

459 
s1
 = (
pSi0
[1] >> 4uË+ (
pSi2
[1] >> 4u);

461 
s2
 = (
pSi0
[1] >> 4uË- (
pSi2
[1] >> 4u);

464 *
pSi0
++ = (
r1
 + 
t1
);

466 
r1
 =Ñ1 - 
t1
;

468 
t2
 = (
pSi1
[1] >> 4uË+ (
pSi3
[1] >> 4u);

471 *
pSi0
++ = (
s1
 + 
t2
);

474 
s1
 = s1 - 
t2
;

477 
t1
 = (
pSi1
[1] >> 4uË- (
pSi3
[1] >> 4u);

479 
t2
 = (
pSi1
[0] >> 4uË- (
pSi3
[0] >> 4u);

482 
ü2
 = 2u * 
ü1
;

483 
co2
 = 
pC€f
[
ü2
 * 2u];

484 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

487 *
pSi1
++ = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co2
) >> 32)) +

488 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si2
) >> 32))) << 1u;

491 *
pSi1
++ = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co2
) >> 32)) -

492 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si2
) >> 32))) << 1u;

495 
r1
 = 
r2
 + 
t1
;

497 
r2
 =Ñ2 - 
t1
;

500 
s1
 = 
s2
 - 
t2
;

502 
s2
 = s2 + 
t2
;

504 
co1
 = 
pC€f
[
ü1
 * 2u];

505 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

508 *
pSi2
++ = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co1
) >> 32)) +

509 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si1
) >> 32))) << 1u;

512 *
pSi2
++ = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co1
) >> 32)) -

513 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si1
) >> 32))) << 1u;

516 
ü3
 = 3u * 
ü1
;

517 
co3
 = 
pC€f
[
ü3
 * 2u];

518 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

521 *
pSi3
++ = (((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
co3
) >> 32)) +

522 ((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
si3
) >> 32))) << 1u;

525 *
pSi3
++ = (((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
co3
) >> 32)) -

526 ((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
si3
) >> 32))) << 1u;

529 
ü1
 = ia1 + 
twidC€fModifõr
;

531 } --
j
);

543 
twidC€fModifõr
 <<= 2u;

546 
k
 = 
f·Lí
 / 4u; k > 4u; k >>= 2u)

549 
n1
 = 
n2
;

550 
n2
 >>= 2u;

551 
ü1
 = 0u;

554 
j
 = 0u; j <(
n2
 - 1u); j++)

557 
ü2
 = 
ü1
 + ia1;

558 
ü3
 = 
ü2
 + 
ü1
;

559 
co1
 = 
pC€f
[
ü1
 * 2u];

560 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

561 
co2
 = 
pC€f
[
ü2
 * 2u];

562 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

563 
co3
 = 
pC€f
[
ü3
 * 2u];

564 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

566 
ü1
 = ia1 + 
twidC€fModifõr
;

568 
pSi0
 = 
pSrc
 + 2 * 
j
;

569 
pSi1
 = 
pSi0
 + 2 * 
n2
;

570 
pSi2
 = 
pSi1
 + 2 * 
n2
;

571 
pSi3
 = 
pSi2
 + 2 * 
n2
;

573 
i0
 = 
j
; i0 < 
f·Lí
; i0 +
n1
)

577 
r1
 = 
pSi0
[0] + 
pSi2
[0];

580 
r2
 = 
pSi0
[0] - 
pSi2
[0];

584 
s1
 = 
pSi0
[1] + 
pSi2
[1];

587 
s2
 = 
pSi0
[1] - 
pSi2
[1];

591 
t1
 = 
pSi1
[0] + 
pSi3
[0];

595 
pSi0
[0] = (
r1
 + 
t1
) >> 2u;

597 
r1
 =Ñ1 - 
t1
;

600 
t2
 = 
pSi1
[1] + 
pSi3
[1];

603 
pSi0
[1] = (
s1
 + 
t2
) >> 2u;

604 
pSi0
 +2 * 
n1
;

607 
s1
 = s1 - 
t2
;

610 
t1
 = 
pSi1
[1] - 
pSi3
[1];

613 
t2
 = 
pSi1
[0] - 
pSi3
[0];

617 
pSi1
[0] = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co2
) >> 32)) +

618 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si2
) >> 32))) >> 1u;

621 
pSi1
[1] = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co2
) >> 32)) -

622 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si2
) >> 32))) >> 1u;

623 
pSi1
 +2 * 
n1
;

626 
r1
 = 
r2
 + 
t1
;

628 
r2
 =Ñ2 - 
t1
;

631 
s1
 = 
s2
 - 
t2
;

633 
s2
 = s2 + 
t2
;

636 
pSi2
[0] = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co1
) >> 32)) +

637 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si1
) >> 32))) >> 1u;

640 
pSi2
[1] = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co1
) >> 32)) -

641 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si1
) >> 32))) >> 1u;

642 
pSi2
 +2 * 
n1
;

645 
pSi3
[0] = (((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
co3
) >> 32)) +

646 ((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
si3
) >> 32))) >> 1u;

649 
pSi3
[1] = (((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
co3
) >> 32)) -

650 ((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
si3
) >> 32))) >> 1u;

651 
pSi3
 +2 * 
n1
;

654 
twidC€fModifõr
 <<= 2u;

668 
j
 = 
f·Lí
 >> 2;

669 
±r1
 = &
pSrc
[0];

675 #i‚de‡
ARM_MATH_BIG_ENDIAN


678 
xaya
 = *
	`__SIMD64
(
±r1
)++;

679 
xa
 = (
q31_t
Ë
xaya
;

680 
ya
 = (
q31_t
Ë(
xaya
 >> 32);

683 
xbyb
 = *
	`__SIMD64
(
±r1
)++;

684 
xb
 = (
q31_t
Ë
xbyb
;

685 
yb
 = (
q31_t
Ë(
xbyb
 >> 32);

688 
xcyc
 = *
	`__SIMD64
(
±r1
)++;

689 
xc
 = (
q31_t
Ë
xcyc
;

690 
yc
 = (
q31_t
Ë(
xcyc
 >> 32);

693 
xdyd
 = *
	`__SIMD64
(
±r1
)++;

694 
xd
 = (
q31_t
Ë
xdyd
;

695 
yd
 = (
q31_t
Ë(
xdyd
 >> 32);

700 
xaya
 = *
	`__SIMD64
(
±r1
)++;

701 
ya
 = (
q31_t
Ë
xaya
;

702 
xa
 = (
q31_t
Ë(
xaya
 >> 32);

705 
xbyb
 = *
	`__SIMD64
(
±r1
)++;

706 
yb
 = (
q31_t
Ë
xbyb
;

707 
xb
 = (
q31_t
Ë(
xbyb
 >> 32);

710 
xcyc
 = *
	`__SIMD64
(
±r1
)++;

711 
yc
 = (
q31_t
Ë
xcyc
;

712 
xc
 = (
q31_t
Ë(
xcyc
 >> 32);

715 
xdyd
 = *
	`__SIMD64
(
±r1
)++;

716 
yd
 = (
q31_t
Ë
xdyd
;

717 
xd
 = (
q31_t
Ë(
xdyd
 >> 32);

723 
xa_out
 = 
xa
 + 
xb
 + 
xc
 + 
xd
;

726 
ya_out
 = 
ya
 + 
yb
 + 
yc
 + 
yd
;

729 
±r1
 =Ötr1 - 8u;

732 *
±r1
++ = 
xa_out
;

733 *
±r1
++ = 
ya_out
;

735 
xc_out
 = (
xa
 - 
xb
 + 
xc
 - 
xd
);

736 
yc_out
 = (
ya
 - 
yb
 + 
yc
 - 
yd
);

739 *
±r1
++ = 
xc_out
;

740 *
±r1
++ = 
yc_out
;

742 
xb_out
 = (
xa
 + 
yb
 - 
xc
 - 
yd
);

743 
yb_out
 = (
ya
 - 
xb
 - 
yc
 + 
xd
);

746 *
±r1
++ = 
xb_out
;

747 *
±r1
++ = 
yb_out
;

749 
xd_out
 = (
xa
 - 
yb
 - 
xc
 + 
yd
);

750 
yd_out
 = (
ya
 + 
xb
 - 
yc
 - 
xd
);

753 *
±r1
++ = 
xd_out
;

754 *
±r1
++ = 
yd_out
;

757 } --
j
);

766 
	}
}

819 
	$¨m_ødix4_buâîÊy_övî£_q31
(

820 
q31_t
 * 
pSrc
,

821 
uöt32_t
 
f·Lí
,

822 
q31_t
 * 
pC€f
,

823 
uöt32_t
 
twidC€fModifõr
)

825 #i‡
	`deföed
(
ARM_MATH_CM7
)

826 
uöt32_t
 
n1
, 
n2
, 
ü1
, 
ü2
, 
ü3
, 
i0
, 
i1
, 
i2
, 
i3
, 
j
, 
k
;

827 
q31_t
 
t1
, 
t2
, 
r1
, 
r2
, 
s1
, 
s2
, 
co1
, 
co2
, 
co3
, 
si1
, 
si2
, 
si3
;

828 
q31_t
 
xa
, 
xb
, 
xc
, 
xd
;

829 
q31_t
 
ya
, 
yb
, 
yc
, 
yd
;

830 
q31_t
 
xa_out
, 
xb_out
, 
xc_out
, 
xd_out
;

831 
q31_t
 
ya_out
, 
yb_out
, 
yc_out
, 
yd_out
;

833 
q31_t
 *
±r1
;

834 
q63_t
 
xaya
, 
xbyb
, 
xcyc
, 
xdyd
;

843 
n2
 = 
f·Lí
;

844 
n1
 = 
n2
;

846 
n2
 >>= 2u;

847 
i0
 = 0u;

848 
ü1
 = 0u;

850 
j
 = 
n2
;

859 
i1
 = 
i0
 + 
n2
;

860 
i2
 = 
i1
 + 
n2
;

861 
i3
 = 
i2
 + 
n2
;

865 
r1
 = (
pSrc
[2u * 
i0
] >> 4uË+ (pSrc[2u * 
i2
] >> 4u);

867 
r2
 = (
pSrc
[2u * 
i0
] >> 4uË- (pSrc[2u * 
i2
] >> 4u);

870 
t1
 = (
pSrc
[2u * 
i1
] >> 4uË+ (pSrc[2u * 
i3
] >> 4u);

873 
s1
 = (
pSrc
[(2u * 
i0
Ë+ 1u] >> 4uË+ (pSrc[(2u * 
i2
) + 1u] >> 4u);

875 
s2
 = (
pSrc
[(2u * 
i0
Ë+ 1u] >> 4uË- (pSrc[(2u * 
i2
) + 1u] >> 4u);

878 
pSrc
[2u * 
i0
] = (
r1
 + 
t1
);

880 
r1
 =Ñ1 - 
t1
;

882 
t2
 = (
pSrc
[(2u * 
i1
Ë+ 1u] >> 4uË+ (pSrc[(2u * 
i3
) + 1u] >> 4u);

884 
pSrc
[(2u * 
i0
Ë+ 1u] = (
s1
 + 
t2
);

887 
s1
 = s1 - 
t2
;

890 
t1
 = (
pSrc
[(2u * 
i1
Ë+ 1u] >> 4uË- (pSrc[(2u * 
i3
) + 1u] >> 4u);

892 
t2
 = (
pSrc
[2u * 
i1
] >> 4uË- (pSrc[2u * 
i3
] >> 4u);

895 
ü2
 = 2u * 
ü1
;

896 
co2
 = 
pC€f
[
ü2
 * 2u];

897 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

900 
pSrc
[2u * 
i1
] = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co2
) >> 32)) -

901 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si2
) >> 32))) << 1u;

904 
pSrc
[2u * 
i1
 + 1u] = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co2
) >> 32)) +

905 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si2
) >> 32))) << 1u;

908 
r1
 = 
r2
 - 
t1
;

910 
r2
 =Ñ2 + 
t1
;

913 
s1
 = 
s2
 + 
t2
;

915 
s2
 = s2 - 
t2
;

917 
co1
 = 
pC€f
[
ü1
 * 2u];

918 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

921 
pSrc
[2u * 
i2
] = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co1
) >> 32)) -

922 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si1
) >> 32))) << 1u;

925 
pSrc
[(2u * 
i2
Ë+ 1u] = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co1
) >> 32)) +

926 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si1
) >> 32))) << 1u;

929 
ü3
 = 3u * 
ü1
;

930 
co3
 = 
pC€f
[
ü3
 * 2u];

931 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

934 
pSrc
[2u * 
i3
] = (((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
co3
) >> 32)) -

935 ((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
si3
) >> 32))) << 1u;

938 
pSrc
[(2u * 
i3
Ë+ 1u] = (((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
co3
) >> 32)) +

939 ((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
si3
) >> 32))) << 1u;

942 
ü1
 = ia1 + 
twidC€fModifõr
;

945 
i0
 = i0 + 1u;

947 } --
j
);

955 
twidC€fModifõr
 <<= 2u;

958 
k
 = 
f·Lí
 / 4u; k > 4u; k >>= 2u)

961 
n1
 = 
n2
;

962 
n2
 >>= 2u;

963 
ü1
 = 0u;

965 
j
 = 0; j <(
n2
 - 1u); j++)

968 
ü2
 = 
ü1
 + ia1;

969 
ü3
 = 
ü2
 + 
ü1
;

970 
co1
 = 
pC€f
[
ü1
 * 2u];

971 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

972 
co2
 = 
pC€f
[
ü2
 * 2u];

973 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

974 
co3
 = 
pC€f
[
ü3
 * 2u];

975 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

977 
ü1
 = ia1 + 
twidC€fModifõr
;

979 
i0
 = 
j
; i0 < 
f·Lí
; i0 +
n1
)

983 
i1
 = 
i0
 + 
n2
;

984 
i2
 = 
i1
 + 
n2
;

985 
i3
 = 
i2
 + 
n2
;

989 
r1
 = 
pSrc
[2u * 
i0
] +ÖSrc[2u * 
i2
];

991 
r2
 = 
pSrc
[2u * 
i0
] -ÖSrc[2u * 
i2
];

994 
s1
 = 
pSrc
[(2u * 
i0
Ë+ 1u] +ÖSrc[(2u * 
i2
) + 1u];

996 
s2
 = 
pSrc
[(2u * 
i0
Ë+ 1u] -ÖSrc[(2u * 
i2
) + 1u];

999 
t1
 = 
pSrc
[2u * 
i1
] +ÖSrc[2u * 
i3
];

1002 
pSrc
[2u * 
i0
] = (
r1
 + 
t1
) >> 2u;

1004 
r1
 =Ñ1 - 
t1
;

1006 
t2
 = 
pSrc
[(2u * 
i1
Ë+ 1u] +ÖSrc[(2u * 
i3
) + 1u];

1008 
pSrc
[(2u * 
i0
Ë+ 1u] = (
s1
 + 
t2
) >> 2u;

1011 
s1
 = s1 - 
t2
;

1014 
t1
 = 
pSrc
[(2u * 
i1
Ë+ 1u] -ÖSrc[(2u * 
i3
) + 1u];

1016 
t2
 = 
pSrc
[2u * 
i1
] -ÖSrc[2u * 
i3
];

1019 
pSrc
[2u * 
i1
] = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co2
) >> 32u)) -

1020 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si2
) >> 32u))) >> 1u;

1023 
pSrc
[(2u * 
i1
) + 1u] =

1024 (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co2
) >> 32u)) +

1025 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si2
) >> 32u))) >> 1u;

1028 
r1
 = 
r2
 - 
t1
;

1030 
r2
 =Ñ2 + 
t1
;

1033 
s1
 = 
s2
 + 
t2
;

1035 
s2
 = s2 - 
t2
;

1038 
pSrc
[2u * 
i2
] = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co1
) >> 32)) -

1039 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si1
) >> 32))) >> 1u;

1042 
pSrc
[(2u * 
i2
Ë+ 1u] = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co1
) >> 32)) +

1043 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si1
) >> 32))) >> 1u;

1046 
pSrc
[(2u * 
i3
)] = (((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
co3
) >> 32)) -

1047 ((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
si3
) >> 32))) >> 1u;

1050 
pSrc
[(2u * 
i3
Ë+ 1u] = (((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
co3
) >> 32)) +

1051 ((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
si3
) >> 32))) >> 1u;

1054 
twidC€fModifõr
 <<= 2u;

1057 
uöt32_t
 
n1
, 
n2
, 
ü1
, 
ü2
, 
ü3
, 
i0
, 
j
, 
k
;

1058 
q31_t
 
t1
, 
t2
, 
r1
, 
r2
, 
s1
, 
s2
, 
co1
, 
co2
, 
co3
, 
si1
, 
si2
, 
si3
;

1059 
q31_t
 
xa
, 
xb
, 
xc
, 
xd
;

1060 
q31_t
 
ya
, 
yb
, 
yc
, 
yd
;

1061 
q31_t
 
xa_out
, 
xb_out
, 
xc_out
, 
xd_out
;

1062 
q31_t
 
ya_out
, 
yb_out
, 
yc_out
, 
yd_out
;

1064 
q31_t
 *
±r1
;

1065 
q31_t
 *
pSi0
;

1066 
q31_t
 *
pSi1
;

1067 
q31_t
 *
pSi2
;

1068 
q31_t
 *
pSi3
;

1069 
q63_t
 
xaya
, 
xbyb
, 
xcyc
, 
xdyd
;

1078 
n2
 = 
f·Lí
;

1079 
n1
 = 
n2
;

1081 
n2
 >>= 2u;

1083 
ü1
 = 0u;

1085 
j
 = 
n2
;

1087 
pSi0
 = 
pSrc
;

1088 
pSi1
 = 
pSi0
 + 2 * 
n2
;

1089 
pSi2
 = 
pSi1
 + 2 * 
n2
;

1090 
pSi3
 = 
pSi2
 + 2 * 
n2
;

1096 
r1
 = (
pSi0
[0] >> 4uË+ (
pSi2
[0] >> 4u);

1098 
r2
 = (
pSi0
[0] >> 4uË- (
pSi2
[0] >> 4u);

1101 
t1
 = (
pSi1
[0] >> 4uË+ (
pSi3
[0] >> 4u);

1104 
s1
 = (
pSi0
[1] >> 4uË+ (
pSi2
[1] >> 4u);

1106 
s2
 = (
pSi0
[1] >> 4uË- (
pSi2
[1] >> 4u);

1109 *
pSi0
++ = (
r1
 + 
t1
);

1111 
r1
 =Ñ1 - 
t1
;

1113 
t2
 = (
pSi1
[1] >> 4uË+ (
pSi3
[1] >> 4u);

1115 *
pSi0
++ = (
s1
 + 
t2
);

1118 
s1
 = s1 - 
t2
;

1121 
t1
 = (
pSi1
[1] >> 4uË- (
pSi3
[1] >> 4u);

1123 
t2
 = (
pSi1
[0] >> 4uË- (
pSi3
[0] >> 4u);

1126 
ü2
 = 2u * 
ü1
;

1127 
co2
 = 
pC€f
[
ü2
 * 2u];

1128 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

1131 *
pSi1
++ = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co2
) >> 32)) -

1132 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si2
) >> 32))) << 1u;

1135 *
pSi1
++ = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co2
) >> 32)) +

1136 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si2
) >> 32))) << 1u;

1139 
r1
 = 
r2
 - 
t1
;

1141 
r2
 =Ñ2 + 
t1
;

1144 
s1
 = 
s2
 + 
t2
;

1146 
s2
 = s2 - 
t2
;

1148 
co1
 = 
pC€f
[
ü1
 * 2u];

1149 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

1152 *
pSi2
++ = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co1
) >> 32)) -

1153 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si1
) >> 32))) << 1u;

1156 *
pSi2
++ = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co1
) >> 32)) +

1157 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si1
) >> 32))) << 1u;

1160 
ü3
 = 3u * 
ü1
;

1161 
co3
 = 
pC€f
[
ü3
 * 2u];

1162 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

1165 *
pSi3
++ = (((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
co3
) >> 32)) -

1166 ((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
si3
) >> 32))) << 1u;

1169 *
pSi3
++ = (((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
co3
) >> 32)) +

1170 ((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
si3
) >> 32))) << 1u;

1173 
ü1
 = ia1 + 
twidC€fModifõr
;

1175 } --
j
);

1183 
twidC€fModifõr
 <<= 2u;

1186 
k
 = 
f·Lí
 / 4u; k > 4u; k >>= 2u)

1189 
n1
 = 
n2
;

1190 
n2
 >>= 2u;

1191 
ü1
 = 0u;

1193 
j
 = 0; j <(
n2
 - 1u); j++)

1196 
ü2
 = 
ü1
 + ia1;

1197 
ü3
 = 
ü2
 + 
ü1
;

1198 
co1
 = 
pC€f
[
ü1
 * 2u];

1199 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

1200 
co2
 = 
pC€f
[
ü2
 * 2u];

1201 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

1202 
co3
 = 
pC€f
[
ü3
 * 2u];

1203 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

1205 
ü1
 = ia1 + 
twidC€fModifõr
;

1207 
pSi0
 = 
pSrc
 + 2 * 
j
;

1208 
pSi1
 = 
pSi0
 + 2 * 
n2
;

1209 
pSi2
 = 
pSi1
 + 2 * 
n2
;

1210 
pSi3
 = 
pSi2
 + 2 * 
n2
;

1212 
i0
 = 
j
; i0 < 
f·Lí
; i0 +
n1
)

1216 
r1
 = 
pSi0
[0] + 
pSi2
[0];

1219 
r2
 = 
pSi0
[0] - 
pSi2
[0];

1223 
s1
 = 
pSi0
[1] + 
pSi2
[1];

1226 
s2
 = 
pSi0
[1] - 
pSi2
[1];

1230 
t1
 = 
pSi1
[0] + 
pSi3
[0];

1234 
pSi0
[0] = (
r1
 + 
t1
) >> 2u;

1236 
r1
 =Ñ1 - 
t1
;

1238 
t2
 = 
pSi1
[1] + 
pSi3
[1];

1241 
pSi0
[1] = (
s1
 + 
t2
) >> 2u;

1242 
pSi0
 +2 * 
n1
;

1245 
s1
 = s1 - 
t2
;

1248 
t1
 = 
pSi1
[1] - 
pSi3
[1];

1251 
t2
 = 
pSi1
[0] - 
pSi3
[0];

1255 
pSi1
[0] = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co2
) >> 32u)) -

1256 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si2
) >> 32u))) >> 1u;

1259 
pSi1
[1] =

1261 (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co2
) >> 32u)) +

1262 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si2
) >> 32u))) >> 1u;

1263 
pSi1
 +2 * 
n1
;

1266 
r1
 = 
r2
 - 
t1
;

1268 
r2
 =Ñ2 + 
t1
;

1271 
s1
 = 
s2
 + 
t2
;

1273 
s2
 = s2 - 
t2
;

1276 
pSi2
[0] = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co1
) >> 32)) -

1277 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si1
) >> 32))) >> 1u;

1280 
pSi2
[1] = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co1
) >> 32)) +

1281 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si1
) >> 32))) >> 1u;

1282 
pSi2
 +2 * 
n1
;

1285 
pSi3
[0] = (((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
co3
) >> 32)) -

1286 ((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
si3
) >> 32))) >> 1u;

1289 
pSi3
[1] = (((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
co3
) >> 32)) +

1290 ((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
si3
) >> 32))) >> 1u;

1291 
pSi3
 +2 * 
n1
;

1294 
twidC€fModifõr
 <<= 2u;

1310 
j
 = 
f·Lí
 >> 2;

1311 
±r1
 = &
pSrc
[0];

1316 #i‚de‡
ARM_MATH_BIG_ENDIAN


1318 
xaya
 = *
	`__SIMD64
(
±r1
)++;

1319 
xa
 = (
q31_t
Ë
xaya
;

1320 
ya
 = (
q31_t
Ë(
xaya
 >> 32);

1323 
xbyb
 = *
	`__SIMD64
(
±r1
)++;

1324 
xb
 = (
q31_t
Ë
xbyb
;

1325 
yb
 = (
q31_t
Ë(
xbyb
 >> 32);

1328 
xcyc
 = *
	`__SIMD64
(
±r1
)++;

1329 
xc
 = (
q31_t
Ë
xcyc
;

1330 
yc
 = (
q31_t
Ë(
xcyc
 >> 32);

1333 
xdyd
 = *
	`__SIMD64
(
±r1
)++;

1334 
xd
 = (
q31_t
Ë
xdyd
;

1335 
yd
 = (
q31_t
Ë(
xdyd
 >> 32);

1340 
xaya
 = *
	`__SIMD64
(
±r1
)++;

1341 
ya
 = (
q31_t
Ë
xaya
;

1342 
xa
 = (
q31_t
Ë(
xaya
 >> 32);

1345 
xbyb
 = *
	`__SIMD64
(
±r1
)++;

1346 
yb
 = (
q31_t
Ë
xbyb
;

1347 
xb
 = (
q31_t
Ë(
xbyb
 >> 32);

1350 
xcyc
 = *
	`__SIMD64
(
±r1
)++;

1351 
yc
 = (
q31_t
Ë
xcyc
;

1352 
xc
 = (
q31_t
Ë(
xcyc
 >> 32);

1355 
xdyd
 = *
	`__SIMD64
(
±r1
)++;

1356 
yd
 = (
q31_t
Ë
xdyd
;

1357 
xd
 = (
q31_t
Ë(
xdyd
 >> 32);

1363 
xa_out
 = 
xa
 + 
xb
 + 
xc
 + 
xd
;

1366 
ya_out
 = 
ya
 + 
yb
 + 
yc
 + 
yd
;

1369 
±r1
 =Ötr1 - 8u;

1372 *
±r1
++ = 
xa_out
;

1373 *
±r1
++ = 
ya_out
;

1375 
xc_out
 = (
xa
 - 
xb
 + 
xc
 - 
xd
);

1376 
yc_out
 = (
ya
 - 
yb
 + 
yc
 - 
yd
);

1379 *
±r1
++ = 
xc_out
;

1380 *
±r1
++ = 
yc_out
;

1382 
xb_out
 = (
xa
 - 
yb
 - 
xc
 + 
yd
);

1383 
yb_out
 = (
ya
 + 
xb
 - 
yc
 - 
xd
);

1386 *
±r1
++ = 
xb_out
;

1387 *
±r1
++ = 
yb_out
;

1389 
xd_out
 = (
xa
 + 
yb
 - 
xc
 - 
yd
);

1390 
yd_out
 = (
ya
 - 
xb
 - 
yc
 + 
xd
);

1393 *
±r1
++ = 
xd_out
;

1394 *
±r1
++ = 
yd_out
;

1396 } --
j
);

1404 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix8_f32.c

41 
	~"¨m_m©h.h
"

140 
	$¨m_ødix8_buâîÊy_f32
(

141 
Êﬂt32_t
 * 
pSrc
,

142 
uöt16_t
 
f·Lí
,

143 c⁄° 
Êﬂt32_t
 * 
pC€f
,

144 
uöt16_t
 
twidC€fModifõr
)

146 
uöt32_t
 
ü1
, 
ü2
, 
ü3
, 
ü4
, 
ü5
, 
ü6
, 
ü7
;

147 
uöt32_t
 
i1
, 
i2
, 
i3
, 
i4
, 
i5
, 
i6
, 
i7
, 
i8
;

148 
uöt32_t
 
id
;

149 
uöt32_t
 
n1
, 
n2
, 
j
;

151 
Êﬂt32_t
 
r1
, 
r2
, 
r3
, 
r4
, 
r5
, 
r6
, 
r7
, 
r8
;

152 
Êﬂt32_t
 
t1
, 
t2
;

153 
Êﬂt32_t
 
s1
, 
s2
, 
s3
, 
s4
, 
s5
, 
s6
, 
s7
, 
s8
;

154 
Êﬂt32_t
 
p1
, 
p2
, 
p3
, 
p4
;

155 
Êﬂt32_t
 
co2
, 
co3
, 
co4
, 
co5
, 
co6
, 
co7
, 
co8
;

156 
Êﬂt32_t
 
si2
, 
si3
, 
si4
, 
si5
, 
si6
, 
si7
, 
si8
;

157 c⁄° 
Êﬂt32_t
 
C81
 = 0.70710678118f;

159 
n2
 = 
f·Lí
;

163 
n1
 = 
n2
;

164 
n2
 =Ç2 >> 3;

165 
i1
 = 0;

169 
i2
 = 
i1
 + 
n2
;

170 
i3
 = 
i2
 + 
n2
;

171 
i4
 = 
i3
 + 
n2
;

172 
i5
 = 
i4
 + 
n2
;

173 
i6
 = 
i5
 + 
n2
;

174 
i7
 = 
i6
 + 
n2
;

175 
i8
 = 
i7
 + 
n2
;

176 
r1
 = 
pSrc
[2 * 
i1
] +ÖSrc[2 * 
i5
];

177 
r5
 = 
pSrc
[2 * 
i1
] -ÖSrc[2 * 
i5
];

178 
r2
 = 
pSrc
[2 * 
i2
] +ÖSrc[2 * 
i6
];

179 
r6
 = 
pSrc
[2 * 
i2
] -ÖSrc[2 * 
i6
];

180 
r3
 = 
pSrc
[2 * 
i3
] +ÖSrc[2 * 
i7
];

181 
r7
 = 
pSrc
[2 * 
i3
] -ÖSrc[2 * 
i7
];

182 
r4
 = 
pSrc
[2 * 
i4
] +ÖSrc[2 * 
i8
];

183 
r8
 = 
pSrc
[2 * 
i4
] -ÖSrc[2 * 
i8
];

184 
t1
 = 
r1
 - 
r3
;

185 
r1
 =Ñ1 + 
r3
;

186 
r3
 = 
r2
 - 
r4
;

187 
r2
 =Ñ2 + 
r4
;

188 
pSrc
[2 * 
i1
] = 
r1
 + 
r2
;

189 
pSrc
[2 * 
i5
] = 
r1
 - 
r2
;

190 
r1
 = 
pSrc
[2 * 
i1
 + 1] +ÖSrc[2 * 
i5
 + 1];

191 
s5
 = 
pSrc
[2 * 
i1
 + 1] -ÖSrc[2 * 
i5
 + 1];

192 
r2
 = 
pSrc
[2 * 
i2
 + 1] +ÖSrc[2 * 
i6
 + 1];

193 
s6
 = 
pSrc
[2 * 
i2
 + 1] -ÖSrc[2 * 
i6
 + 1];

194 
s3
 = 
pSrc
[2 * 
i3
 + 1] +ÖSrc[2 * 
i7
 + 1];

195 
s7
 = 
pSrc
[2 * 
i3
 + 1] -ÖSrc[2 * 
i7
 + 1];

196 
r4
 = 
pSrc
[2 * 
i4
 + 1] +ÖSrc[2 * 
i8
 + 1];

197 
s8
 = 
pSrc
[2 * 
i4
 + 1] -ÖSrc[2 * 
i8
 + 1];

198 
t2
 = 
r1
 - 
s3
;

199 
r1
 =Ñ1 + 
s3
;

200 
s3
 = 
r2
 - 
r4
;

201 
r2
 =Ñ2 + 
r4
;

202 
pSrc
[2 * 
i1
 + 1] = 
r1
 + 
r2
;

203 
pSrc
[2 * 
i5
 + 1] = 
r1
 - 
r2
;

204 
pSrc
[2 * 
i3
] = 
t1
 + 
s3
;

205 
pSrc
[2 * 
i7
] = 
t1
 - 
s3
;

206 
pSrc
[2 * 
i3
 + 1] = 
t2
 - 
r3
;

207 
pSrc
[2 * 
i7
 + 1] = 
t2
 + 
r3
;

208 
r1
 = (
r6
 - 
r8
Ë* 
C81
;

209 
r6
 = (r6 + 
r8
Ë* 
C81
;

210 
r2
 = (
s6
 - 
s8
Ë* 
C81
;

211 
s6
 = (s6 + 
s8
Ë* 
C81
;

212 
t1
 = 
r5
 - 
r1
;

213 
r5
 =Ñ5 + 
r1
;

214 
r8
 = 
r7
 - 
r6
;

215 
r7
 =Ñ7 + 
r6
;

216 
t2
 = 
s5
 - 
r2
;

217 
s5
 = s5 + 
r2
;

218 
s8
 = 
s7
 - 
s6
;

219 
s7
 = s7 + 
s6
;

220 
pSrc
[2 * 
i2
] = 
r5
 + 
s7
;

221 
pSrc
[2 * 
i8
] = 
r5
 - 
s7
;

222 
pSrc
[2 * 
i6
] = 
t1
 + 
s8
;

223 
pSrc
[2 * 
i4
] = 
t1
 - 
s8
;

224 
pSrc
[2 * 
i2
 + 1] = 
s5
 - 
r7
;

225 
pSrc
[2 * 
i8
 + 1] = 
s5
 + 
r7
;

226 
pSrc
[2 * 
i6
 + 1] = 
t2
 - 
r8
;

227 
pSrc
[2 * 
i4
 + 1] = 
t2
 + 
r8
;

229 
i1
 +
n1
;

230 } 
i1
 < 
f·Lí
);

232 if(
n2
 < 8)

235 
ü1
 = 0;

236 
j
 = 1;

241 
id
 = 
ü1
 + 
twidC€fModifõr
;

242 
ü1
 = 
id
;

243 
ü2
 = 
ü1
 + 
id
;

244 
ü3
 = 
ü2
 + 
id
;

245 
ü4
 = 
ü3
 + 
id
;

246 
ü5
 = 
ü4
 + 
id
;

247 
ü6
 = 
ü5
 + 
id
;

248 
ü7
 = 
ü6
 + 
id
;

250 
co2
 = 
pC€f
[2 * 
ü1
];

251 
co3
 = 
pC€f
[2 * 
ü2
];

252 
co4
 = 
pC€f
[2 * 
ü3
];

253 
co5
 = 
pC€f
[2 * 
ü4
];

254 
co6
 = 
pC€f
[2 * 
ü5
];

255 
co7
 = 
pC€f
[2 * 
ü6
];

256 
co8
 = 
pC€f
[2 * 
ü7
];

257 
si2
 = 
pC€f
[2 * 
ü1
 + 1];

258 
si3
 = 
pC€f
[2 * 
ü2
 + 1];

259 
si4
 = 
pC€f
[2 * 
ü3
 + 1];

260 
si5
 = 
pC€f
[2 * 
ü4
 + 1];

261 
si6
 = 
pC€f
[2 * 
ü5
 + 1];

262 
si7
 = 
pC€f
[2 * 
ü6
 + 1];

263 
si8
 = 
pC€f
[2 * 
ü7
 + 1];

265 
i1
 = 
j
;

270 
i2
 = 
i1
 + 
n2
;

271 
i3
 = 
i2
 + 
n2
;

272 
i4
 = 
i3
 + 
n2
;

273 
i5
 = 
i4
 + 
n2
;

274 
i6
 = 
i5
 + 
n2
;

275 
i7
 = 
i6
 + 
n2
;

276 
i8
 = 
i7
 + 
n2
;

277 
r1
 = 
pSrc
[2 * 
i1
] +ÖSrc[2 * 
i5
];

278 
r5
 = 
pSrc
[2 * 
i1
] -ÖSrc[2 * 
i5
];

279 
r2
 = 
pSrc
[2 * 
i2
] +ÖSrc[2 * 
i6
];

280 
r6
 = 
pSrc
[2 * 
i2
] -ÖSrc[2 * 
i6
];

281 
r3
 = 
pSrc
[2 * 
i3
] +ÖSrc[2 * 
i7
];

282 
r7
 = 
pSrc
[2 * 
i3
] -ÖSrc[2 * 
i7
];

283 
r4
 = 
pSrc
[2 * 
i4
] +ÖSrc[2 * 
i8
];

284 
r8
 = 
pSrc
[2 * 
i4
] -ÖSrc[2 * 
i8
];

285 
t1
 = 
r1
 - 
r3
;

286 
r1
 =Ñ1 + 
r3
;

287 
r3
 = 
r2
 - 
r4
;

288 
r2
 =Ñ2 + 
r4
;

289 
pSrc
[2 * 
i1
] = 
r1
 + 
r2
;

290 
r2
 = 
r1
 -Ñ2;

291 
s1
 = 
pSrc
[2 * 
i1
 + 1] +ÖSrc[2 * 
i5
 + 1];

292 
s5
 = 
pSrc
[2 * 
i1
 + 1] -ÖSrc[2 * 
i5
 + 1];

293 
s2
 = 
pSrc
[2 * 
i2
 + 1] +ÖSrc[2 * 
i6
 + 1];

294 
s6
 = 
pSrc
[2 * 
i2
 + 1] -ÖSrc[2 * 
i6
 + 1];

295 
s3
 = 
pSrc
[2 * 
i3
 + 1] +ÖSrc[2 * 
i7
 + 1];

296 
s7
 = 
pSrc
[2 * 
i3
 + 1] -ÖSrc[2 * 
i7
 + 1];

297 
s4
 = 
pSrc
[2 * 
i4
 + 1] +ÖSrc[2 * 
i8
 + 1];

298 
s8
 = 
pSrc
[2 * 
i4
 + 1] -ÖSrc[2 * 
i8
 + 1];

299 
t2
 = 
s1
 - 
s3
;

300 
s1
 = s1 + 
s3
;

301 
s3
 = 
s2
 - 
s4
;

302 
s2
 = s2 + 
s4
;

303 
r1
 = 
t1
 + 
s3
;

304 
t1
 =Å1 - 
s3
;

305 
pSrc
[2 * 
i1
 + 1] = 
s1
 + 
s2
;

306 
s2
 = 
s1
 - s2;

307 
s1
 = 
t2
 - 
r3
;

308 
t2
 =Å2 + 
r3
;

309 
p1
 = 
co5
 * 
r2
;

310 
p2
 = 
si5
 * 
s2
;

311 
p3
 = 
co5
 * 
s2
;

312 
p4
 = 
si5
 * 
r2
;

313 
pSrc
[2 * 
i5
] = 
p1
 + 
p2
;

314 
pSrc
[2 * 
i5
 + 1] = 
p3
 - 
p4
;

315 
p1
 = 
co3
 * 
r1
;

316 
p2
 = 
si3
 * 
s1
;

317 
p3
 = 
co3
 * 
s1
;

318 
p4
 = 
si3
 * 
r1
;

319 
pSrc
[2 * 
i3
] = 
p1
 + 
p2
;

320 
pSrc
[2 * 
i3
 + 1] = 
p3
 - 
p4
;

321 
p1
 = 
co7
 * 
t1
;

322 
p2
 = 
si7
 * 
t2
;

323 
p3
 = 
co7
 * 
t2
;

324 
p4
 = 
si7
 * 
t1
;

325 
pSrc
[2 * 
i7
] = 
p1
 + 
p2
;

326 
pSrc
[2 * 
i7
 + 1] = 
p3
 - 
p4
;

327 
r1
 = (
r6
 - 
r8
Ë* 
C81
;

328 
r6
 = (r6 + 
r8
Ë* 
C81
;

329 
s1
 = (
s6
 - 
s8
Ë* 
C81
;

330 
s6
 = (s6 + 
s8
Ë* 
C81
;

331 
t1
 = 
r5
 - 
r1
;

332 
r5
 =Ñ5 + 
r1
;

333 
r8
 = 
r7
 - 
r6
;

334 
r7
 =Ñ7 + 
r6
;

335 
t2
 = 
s5
 - 
s1
;

336 
s5
 = s5 + 
s1
;

337 
s8
 = 
s7
 - 
s6
;

338 
s7
 = s7 + 
s6
;

339 
r1
 = 
r5
 + 
s7
;

340 
r5
 =Ñ5 - 
s7
;

341 
r6
 = 
t1
 + 
s8
;

342 
t1
 =Å1 - 
s8
;

343 
s1
 = 
s5
 - 
r7
;

344 
s5
 = s5 + 
r7
;

345 
s6
 = 
t2
 - 
r8
;

346 
t2
 =Å2 + 
r8
;

347 
p1
 = 
co2
 * 
r1
;

348 
p2
 = 
si2
 * 
s1
;

349 
p3
 = 
co2
 * 
s1
;

350 
p4
 = 
si2
 * 
r1
;

351 
pSrc
[2 * 
i2
] = 
p1
 + 
p2
;

352 
pSrc
[2 * 
i2
 + 1] = 
p3
 - 
p4
;

353 
p1
 = 
co8
 * 
r5
;

354 
p2
 = 
si8
 * 
s5
;

355 
p3
 = 
co8
 * 
s5
;

356 
p4
 = 
si8
 * 
r5
;

357 
pSrc
[2 * 
i8
] = 
p1
 + 
p2
;

358 
pSrc
[2 * 
i8
 + 1] = 
p3
 - 
p4
;

359 
p1
 = 
co6
 * 
r6
;

360 
p2
 = 
si6
 * 
s6
;

361 
p3
 = 
co6
 * 
s6
;

362 
p4
 = 
si6
 * 
r6
;

363 
pSrc
[2 * 
i6
] = 
p1
 + 
p2
;

364 
pSrc
[2 * 
i6
 + 1] = 
p3
 - 
p4
;

365 
p1
 = 
co4
 * 
t1
;

366 
p2
 = 
si4
 * 
t2
;

367 
p3
 = 
co4
 * 
t2
;

368 
p4
 = 
si4
 * 
t1
;

369 
pSrc
[2 * 
i4
] = 
p1
 + 
p2
;

370 
pSrc
[2 * 
i4
 + 1] = 
p3
 - 
p4
;

372 
i1
 +
n1
;

373 } 
i1
 < 
f·Lí
);

375 
j
++;

376 } 
j
 < 
n2
);

378 
twidC€fModifõr
 <<= 3;

379 } 
n2
 > 7);

380 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_dct4_f32.c

41 
	~"¨m_m©h.h
"

137 
	$¨m_d˘4_f32
(

138 c⁄° 
¨m_d˘4_ö°™˚_f32
 * 
S
,

139 
Êﬂt32_t
 * 
pSèã
,

140 
Êﬂt32_t
 * 
pI∆öeBuf„r
)

142 
uöt32_t
 
i
;

143 
Êﬂt32_t
 *
weights
 = 
S
->
pTwiddÀ
;

144 
Êﬂt32_t
 *
cosFa˘
 = 
S
->
pCosFa˘‹
;

145 
Êﬂt32_t
 *
pS1
, *
pS2
, *
pbuff
;

146 
Êﬂt32_t
 
ö
;

170 
	`¨m_sˇÀ_f32
(
pI∆öeBuf„r
, 2.0f,ÖI∆öeBuf„r, 
S
->
N
);

171 
	`¨m_mu…_f32
(
pI∆öeBuf„r
, 
cosFa˘
,ÖI∆öeBuf„r, 
S
->
N
);

180 
pS1
 = 
pSèã
;

183 
pS2
 = 
pSèã
 + (
S
->
N
 - 1u);

186 
pbuff
 = 
pI∆öeBuf„r
;

188 #i‚de‡
ARM_MATH_CM0_FAMILY


193 
i
 = (
uöt32_t
Ë
S
->
Nby2
 >> 2u;

201 *
pS1
++ = *
pbuff
++;

203 *
pS2
-- = *
pbuff
++;

205 *
pS1
++ = *
pbuff
++;

206 *
pS2
-- = *
pbuff
++;

208 *
pS1
++ = *
pbuff
++;

209 *
pS2
-- = *
pbuff
++;

211 *
pS1
++ = *
pbuff
++;

212 *
pS2
-- = *
pbuff
++;

215 
i
--;

216 } 
i
 > 0u);

219 
pbuff
 = 
pI∆öeBuf„r
;

222 
pS1
 = 
pSèã
;

225 
i
 = (
uöt32_t
Ë
S
->
N
 >> 2u;

232 *
pbuff
++ = *
pS1
++;

233 *
pbuff
++ = *
pS1
++;

234 *
pbuff
++ = *
pS1
++;

235 *
pbuff
++ = *
pS1
++;

238 
i
--;

239 } 
i
 > 0u);

246 
	`¨m_rf·_f32
(
S
->
pRf·
, 
pI∆öeBuf„r
, 
pSèã
);

251 
	`¨m_cm∂x_mu…_cm∂x_f32
(
pSèã
, 
weights
,ÖSèã, 
S
->
N
);

260 
i
 = ((
uöt32_t
Ë
S
->
N
 - 1u) >> 2u;

263 
pbuff
 = 
pI∆öeBuf„r
;

266 
pS1
 = 
pSèã
;

269 
ö
 = *
pS1
++ * (
Êﬂt32_t
) 0.5;

271 *
pbuff
++ = 
ö
;

274 
pS1
++;

282 
ö
 = *
pS1
++ - in;

283 *
pbuff
++ = 
ö
;

285 
pS1
++;

287 
ö
 = *
pS1
++ - in;

288 *
pbuff
++ = 
ö
;

289 
pS1
++;

291 
ö
 = *
pS1
++ - in;

292 *
pbuff
++ = 
ö
;

293 
pS1
++;

295 
ö
 = *
pS1
++ - in;

296 *
pbuff
++ = 
ö
;

297 
pS1
++;

300 
i
--;

301 } 
i
 > 0u);

305 
i
 = ((
uöt32_t
Ë
S
->
N
 - 1u) % 0x4u;

307 
i
 > 0u)

311 
ö
 = *
pS1
++ - in;

312 *
pbuff
++ = 
ö
;

314 
pS1
++;

317 
i
--;

324 
i
 = (
uöt32_t
Ë
S
->
N
 >> 2u;

327 
pbuff
 = 
pI∆öeBuf„r
;

333 
ö
 = *
pbuff
;

334 *
pbuff
++ = 
ö
 * 
S
->
n‹mÆize
;

336 
ö
 = *
pbuff
;

337 *
pbuff
++ = 
ö
 * 
S
->
n‹mÆize
;

339 
ö
 = *
pbuff
;

340 *
pbuff
++ = 
ö
 * 
S
->
n‹mÆize
;

342 
ö
 = *
pbuff
;

343 *
pbuff
++ = 
ö
 * 
S
->
n‹mÆize
;

346 
i
--;

347 } 
i
 > 0u);

355 
i
 = (
uöt32_t
Ë
S
->
Nby2
;

361 *
pS1
++ = *
pbuff
++;

363 *
pS2
-- = *
pbuff
++;

366 
i
--;

367 } 
i
 > 0u);

370 
pbuff
 = 
pI∆öeBuf„r
;

373 
pS1
 = 
pSèã
;

376 
i
 = (
uöt32_t
Ë
S
->
N
;

381 *
pbuff
++ = *
pS1
++;

384 
i
--;

385 } 
i
 > 0u);

392 
	`¨m_rf·_f32
(
S
->
pRf·
, 
pI∆öeBuf„r
, 
pSèã
);

397 
	`¨m_cm∂x_mu…_cm∂x_f32
(
pSèã
, 
weights
,ÖSèã, 
S
->
N
);

406 
pbuff
 = 
pI∆öeBuf„r
;

409 
pS1
 = 
pSèã
;

412 
ö
 = *
pS1
++ * (
Êﬂt32_t
) 0.5;

414 *
pbuff
++ = 
ö
;

417 
pS1
++;

420 
i
 = ((
uöt32_t
Ë
S
->
N
 - 1u);

426 
ö
 = *
pS1
++ - in;

427 *
pbuff
++ = 
ö
;

429 
pS1
++;

433 
i
--;

434 } 
i
 > 0u);

440 
i
 = (
uöt32_t
Ë
S
->
N
;

443 
pbuff
 = 
pI∆öeBuf„r
;

448 
ö
 = *
pbuff
;

449 *
pbuff
++ = 
ö
 * 
S
->
n‹mÆize
;

452 
i
--;

453 } 
i
 > 0u);

457 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_dct4_init_f32.c

42 
	~"¨m_m©h.h
"

75 c⁄° 
Êﬂt32_t
 
	gWeights_128
[256] = {

206 c⁄° 
Êﬂt32_t
 
	gWeights_512
[1024] = {

721 c⁄° 
Êﬂt32_t
 
	gWeights_2048
[4096] = {

2772 c⁄° 
Êﬂt32_t
 
	gWeights_8192
[16384] = {

10981 c⁄° 
Êﬂt32_t
 
	gcos_Á˘‹s_128
[128] = {

11048 c⁄° 
Êﬂt32_t
 
	gcos_Á˘‹s_512
[512] = {

11307 c⁄° 
Êﬂt32_t
 
	gcos_Á˘‹s_2048
[2048] = {

12334 c⁄° 
Êﬂt32_t
 
	gcos_Á˘‹s_8192
[8192] = {

16449 
¨m_°©us
 
	$¨m_d˘4_öô_f32
(

16450 
¨m_d˘4_ö°™˚_f32
 * 
S
,

16451 
¨m_rf·_ö°™˚_f32
 * 
S_RFFT
,

16452 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

16453 
uöt16_t
 
N
,

16454 
uöt16_t
 
Nby2
,

16455 
Êﬂt32_t
 
n‹mÆize
)

16458 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

16461 
Êﬂt32_t
 *
twiddÀPå
[4] =

16462 { (
Êﬂt32_t
 *Ë
Weights_128
, (Êﬂt32_à*Ë
Weights_512
,

16463 (
Êﬂt32_t
 *Ë
Weights_2048
, (Êﬂt32_à*Ë
Weights_8192


16467 
Êﬂt32_t
 *
pCosFa˘‹
[4] =

16468 { (
Êﬂt32_t
 *Ë
cos_Á˘‹s_128
, (Êﬂt32_à*Ë
cos_Á˘‹s_512
,

16469 (
Êﬂt32_t
 *Ë
cos_Á˘‹s_2048
, (Êﬂt32_à*Ë
cos_Á˘‹s_8192


16473 
S
->
N
 = N;

16476 
S
->
Nby2
 = Nby2;

16479 
S
->
n‹mÆize
 =Çormalize;

16482 
S
->
pRf·
 = 
S_RFFT
;

16485 
S
->
pCf·
 = 
S_CFFT
;

16487 
N
)

16491 
S
->
pTwiddÀ
 = 
twiddÀPå
[3];

16492 
S
->
pCosFa˘‹
 =ÖCosFactor[3];

16495 
S
->
pTwiddÀ
 = 
twiddÀPå
[2];

16496 
S
->
pCosFa˘‹
 =ÖCosFactor[2];

16499 
S
->
pTwiddÀ
 = 
twiddÀPå
[1];

16500 
S
->
pCosFa˘‹
 =ÖCosFactor[1];

16503 
S
->
pTwiddÀ
 = 
twiddÀPå
[0];

16504 
S
->
pCosFa˘‹
 =ÖCosFactor[0];

16507 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

16511 
	`¨m_rf·_öô_f32
(
S
->
pRf·
, S->
pCf·
, S->
N
, 0u, 1u);

16514  (
°©us
);

16515 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_dct4_init_q15.c

42 
	~"¨m_m©h.h
"

77 c⁄° 
q15_t
 
ALIGN4
 
	gWeightsQ15_128
[256] = {

112 c⁄° 
q15_t
 
ALIGN4
 
	gWeightsQ15_512
[1024] = {

243 c⁄° 
q15_t
 
ALIGN4
 
	gWeightsQ15_2048
[4096] = {

758 c⁄° 
q15_t
 
ALIGN4
 
	gWeightsQ15_8192
[16384] = {

2827 c⁄° 
q15_t
 
ALIGN4
 
	gcos_Á˘‹sQ15_128
[128] = {

2846 c⁄° 
q15_t
 
ALIGN4
 
	gcos_Á˘‹sQ15_512
[512] = {

2913 c⁄° 
q15_t
 
ALIGN4
 
	gcos_Á˘‹sQ15_2048
[2048] = {

3173 c⁄° 
q15_t
 
ALIGN4
 
	gcos_Á˘‹sQ15_8192
[8192] = {

4215 
¨m_°©us
 
	$¨m_d˘4_öô_q15
(

4216 
¨m_d˘4_ö°™˚_q15
 * 
S
,

4217 
¨m_rf·_ö°™˚_q15
 * 
S_RFFT
,

4218 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S_CFFT
,

4219 
uöt16_t
 
N
,

4220 
uöt16_t
 
Nby2
,

4221 
q15_t
 
n‹mÆize
)

4224 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

4227 
q15_t
 *
twiddÀPå
[4] = { (q15_à*Ë
WeightsQ15_128
, (q15_à*Ë
WeightsQ15_512
,

4228 (
q15_t
 *Ë
WeightsQ15_2048
, (q15_à*Ë
WeightsQ15_8192


4232 
q15_t
 *
pCosFa˘‹
[4] =

4233 { (
q15_t
 *Ë
cos_Á˘‹sQ15_128
, (q15_à*Ë
cos_Á˘‹sQ15_512
,

4234 (
q15_t
 *Ë
cos_Á˘‹sQ15_2048
, (q15_à*Ë
cos_Á˘‹sQ15_8192


4238 
S
->
N
 = N;

4241 
S
->
Nby2
 = Nby2;

4244 
S
->
n‹mÆize
 =Çormalize;

4247 
S
->
pRf·
 = 
S_RFFT
;

4250 
S
->
pCf·
 = 
S_CFFT
;

4252 
N
)

4256 
S
->
pTwiddÀ
 = 
twiddÀPå
[3];

4257 
S
->
pCosFa˘‹
 =ÖCosFactor[3];

4260 
S
->
pTwiddÀ
 = 
twiddÀPå
[2];

4261 
S
->
pCosFa˘‹
 =ÖCosFactor[2];

4264 
S
->
pTwiddÀ
 = 
twiddÀPå
[1];

4265 
S
->
pCosFa˘‹
 =ÖCosFactor[1];

4268 
S
->
pTwiddÀ
 = 
twiddÀPå
[0];

4269 
S
->
pCosFa˘‹
 =ÖCosFactor[0];

4272 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

4276 
	`¨m_rf·_öô_q15
(
S
->
pRf·
, S->
N
, 0u, 1u);

4279  (
°©us
);

4280 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_dct4_init_q31.c

42 
	~"¨m_m©h.h
"

77 c⁄° 
q31_t
 
	gWeightsQ31_128
[256] = {

144 c⁄° 
q31_t
 
	gWeightsQ31_512
[1024] = {

403 c⁄° 
q31_t
 
	gWeightsQ31_2048
[4096] = {

1430 c⁄° 
q31_t
 
	gWeightsQ31_8192
[16384] = {

5547 c⁄° 
q31_t
 
	gcos_Á˘‹sQ31_128
[128] = {

5582 c⁄° 
q31_t
 
	gcos_Á˘‹sQ31_512
[512] = {

5713 c⁄° 
q31_t
 
	gcos_Á˘‹sQ31_2048
[2048] = {

6229 c⁄° 
q31_t
 
	gcos_Á˘‹sQ31_8192
[8192] = {

8295 
¨m_°©us
 
	$¨m_d˘4_öô_q31
(

8296 
¨m_d˘4_ö°™˚_q31
 * 
S
,

8297 
¨m_rf·_ö°™˚_q31
 * 
S_RFFT
,

8298 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S_CFFT
,

8299 
uöt16_t
 
N
,

8300 
uöt16_t
 
Nby2
,

8301 
q31_t
 
n‹mÆize
)

8304 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

8307 
q31_t
 *
twiddÀPå
[4] = { (q31_à*Ë
WeightsQ31_128
, (q31_à*Ë
WeightsQ31_512
,

8308 (
q31_t
 *Ë
WeightsQ31_2048
, (q31_à*Ë
WeightsQ31_8192


8312 
q31_t
 *
pCosFa˘‹
[4] =

8313 { (
q31_t
 *Ë
cos_Á˘‹sQ31_128
, (q31_à*Ë
cos_Á˘‹sQ31_512
,

8314 (
q31_t
 *Ë
cos_Á˘‹sQ31_2048
, (q31_à*Ë
cos_Á˘‹sQ31_8192


8318 
S
->
N
 = N;

8321 
S
->
Nby2
 = Nby2;

8324 
S
->
n‹mÆize
 =Çormalize;

8327 
S
->
pRf·
 = 
S_RFFT
;

8330 
S
->
pCf·
 = 
S_CFFT
;

8332 
N
)

8336 
S
->
pTwiddÀ
 = 
twiddÀPå
[3];

8337 
S
->
pCosFa˘‹
 =ÖCosFactor[3];

8340 
S
->
pTwiddÀ
 = 
twiddÀPå
[2];

8341 
S
->
pCosFa˘‹
 =ÖCosFactor[2];

8344 
S
->
pTwiddÀ
 = 
twiddÀPå
[1];

8345 
S
->
pCosFa˘‹
 =ÖCosFactor[1];

8348 
S
->
pTwiddÀ
 = 
twiddÀPå
[0];

8349 
S
->
pCosFa˘‹
 =ÖCosFactor[0];

8352 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

8356 
	`¨m_rf·_öô_q31
(
S
->
pRf·
, S->
N
, 0, 1);

8359  (
°©us
);

8360 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_dct4_q15.c

41 
	~"¨m_m©h.h
"

63 
	$¨m_d˘4_q15
(

64 c⁄° 
¨m_d˘4_ö°™˚_q15
 * 
S
,

65 
q15_t
 * 
pSèã
,

66 
q15_t
 * 
pI∆öeBuf„r
)

68 
uöt32_t
 
i
;

69 
q15_t
 *
weights
 = 
S
->
pTwiddÀ
;

70 
q15_t
 *
cosFa˘
 = 
S
->
pCosFa˘‹
;

71 
q15_t
 *
pS1
, *
pS2
, *
pbuff
;

72 
q15_t
 
ö
;

96 
	`¨m_mu…_q15
(
pI∆öeBuf„r
, 
cosFa˘
,ÖI∆öeBuf„r, 
S
->
N
);

97 
	`¨m_shi·_q15
(
pI∆öeBuf„r
, 1,ÖI∆öeBuf„r, 
S
->
N
);

106 
pS1
 = 
pSèã
;

109 
pS2
 = 
pSèã
 + (
S
->
N
 - 1u);

112 
pbuff
 = 
pI∆öeBuf„r
;

115 #i‚de‡
ARM_MATH_CM0_FAMILY


120 
i
 = (
uöt32_t
Ë
S
->
Nby2
 >> 2u;

128 *
pS1
++ = *
pbuff
++;

130 *
pS2
-- = *
pbuff
++;

132 *
pS1
++ = *
pbuff
++;

133 *
pS2
-- = *
pbuff
++;

135 *
pS1
++ = *
pbuff
++;

136 *
pS2
-- = *
pbuff
++;

138 *
pS1
++ = *
pbuff
++;

139 *
pS2
-- = *
pbuff
++;

142 
i
--;

143 } 
i
 > 0u);

146 
pbuff
 = 
pI∆öeBuf„r
;

149 
pS1
 = 
pSèã
;

152 
i
 = (
uöt32_t
Ë
S
->
N
 >> 2u;

159 *
pbuff
++ = *
pS1
++;

160 *
pbuff
++ = *
pS1
++;

161 *
pbuff
++ = *
pS1
++;

162 *
pbuff
++ = *
pS1
++;

165 
i
--;

166 } 
i
 > 0u);

173 
	`¨m_rf·_q15
(
S
->
pRf·
, 
pI∆öeBuf„r
, 
pSèã
);

178 
	`¨m_cm∂x_mu…_cm∂x_q15
(
pSèã
, 
weights
,ÖSèã, 
S
->
N
);

182 
	`¨m_shi·_q15
(
pSèã
, 2,ÖSèã, 
S
->
N
 * 2);

191 
i
 = ((
uöt32_t
Ë
S
->
N
 - 1u) >> 2u;

194 
pbuff
 = 
pI∆öeBuf„r
;

197 
pS1
 = 
pSèã
;

200 
ö
 = *
pS1
++ >> 1u;

202 *
pbuff
++ = 
ö
;

205 
pS1
++;

213 
ö
 = *
pS1
++ - in;

214 *
pbuff
++ = 
ö
;

216 
pS1
++;

218 
ö
 = *
pS1
++ - in;

219 *
pbuff
++ = 
ö
;

220 
pS1
++;

222 
ö
 = *
pS1
++ - in;

223 *
pbuff
++ = 
ö
;

224 
pS1
++;

226 
ö
 = *
pS1
++ - in;

227 *
pbuff
++ = 
ö
;

228 
pS1
++;

231 
i
--;

232 } 
i
 > 0u);

236 
i
 = ((
uöt32_t
Ë
S
->
N
 - 1u) % 0x4u;

238 
i
 > 0u)

242 
ö
 = *
pS1
++ - in;

243 *
pbuff
++ = 
ö
;

245 
pS1
++;

248 
i
--;

255 
i
 = (
uöt32_t
Ë
S
->
N
 >> 2u;

258 
pbuff
 = 
pI∆öeBuf„r
;

264 
ö
 = *
pbuff
;

265 *
pbuff
++ = ((
q15_t
Ë(((
q31_t
Ë
ö
 * 
S
->
n‹mÆize
) >> 15));

267 
ö
 = *
pbuff
;

268 *
pbuff
++ = ((
q15_t
Ë(((
q31_t
Ë
ö
 * 
S
->
n‹mÆize
) >> 15));

270 
ö
 = *
pbuff
;

271 *
pbuff
++ = ((
q15_t
Ë(((
q31_t
Ë
ö
 * 
S
->
n‹mÆize
) >> 15));

273 
ö
 = *
pbuff
;

274 *
pbuff
++ = ((
q15_t
Ë(((
q31_t
Ë
ö
 * 
S
->
n‹mÆize
) >> 15));

277 
i
--;

278 } 
i
 > 0u);

286 
i
 = (
uöt32_t
Ë
S
->
Nby2
;

292 *
pS1
++ = *
pbuff
++;

294 *
pS2
-- = *
pbuff
++;

297 
i
--;

298 } 
i
 > 0u);

301 
pbuff
 = 
pI∆öeBuf„r
;

304 
pS1
 = 
pSèã
;

307 
i
 = (
uöt32_t
Ë
S
->
N
;

312 *
pbuff
++ = *
pS1
++;

315 
i
--;

316 } 
i
 > 0u);

323 
	`¨m_rf·_q15
(
S
->
pRf·
, 
pI∆öeBuf„r
, 
pSèã
);

328 
	`¨m_cm∂x_mu…_cm∂x_q15
(
pSèã
, 
weights
,ÖSèã, 
S
->
N
);

332 
	`¨m_shi·_q15
(
pSèã
, 2,ÖSèã, 
S
->
N
 * 2);

341 
i
 = ((
uöt32_t
Ë
S
->
N
 - 1u);

344 
pbuff
 = 
pI∆öeBuf„r
;

347 
pS1
 = 
pSèã
;

350 
ö
 = *
pS1
++ >> 1u;

352 *
pbuff
++ = 
ö
;

355 
pS1
++;

361 
ö
 = *
pS1
++ - in;

362 *
pbuff
++ = 
ö
;

364 
pS1
++;

367 
i
--;

368 } 
i
 > 0u);

373 
i
 = (
uöt32_t
Ë
S
->
N
;

376 
pbuff
 = 
pI∆öeBuf„r
;

381 
ö
 = *
pbuff
;

382 *
pbuff
++ = ((
q15_t
Ë(((
q31_t
Ë
ö
 * 
S
->
n‹mÆize
) >> 15));

385 
i
--;

386 } 
i
 > 0u);

390 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_dct4_q31.c

41 
	~"¨m_m©h.h
"

64 
	$¨m_d˘4_q31
(

65 c⁄° 
¨m_d˘4_ö°™˚_q31
 * 
S
,

66 
q31_t
 * 
pSèã
,

67 
q31_t
 * 
pI∆öeBuf„r
)

69 
uöt16_t
 
i
;

70 
q31_t
 *
weights
 = 
S
->
pTwiddÀ
;

71 
q31_t
 *
cosFa˘
 = 
S
->
pCosFa˘‹
;

72 
q31_t
 *
pS1
, *
pS2
, *
pbuff
;

73 
q31_t
 
ö
;

97 
	`¨m_mu…_q31
(
pI∆öeBuf„r
, 
cosFa˘
,ÖI∆öeBuf„r, 
S
->
N
);

98 
	`¨m_shi·_q31
(
pI∆öeBuf„r
, 1,ÖI∆öeBuf„r, 
S
->
N
);

107 
pS1
 = 
pSèã
;

110 
pS2
 = 
pSèã
 + (
S
->
N
 - 1u);

113 
pbuff
 = 
pI∆öeBuf„r
;

115 #i‚de‡
ARM_MATH_CM0_FAMILY


120 
i
 = 
S
->
Nby2
 >> 2u;

128 *
pS1
++ = *
pbuff
++;

130 *
pS2
-- = *
pbuff
++;

132 *
pS1
++ = *
pbuff
++;

133 *
pS2
-- = *
pbuff
++;

135 *
pS1
++ = *
pbuff
++;

136 *
pS2
-- = *
pbuff
++;

138 *
pS1
++ = *
pbuff
++;

139 *
pS2
-- = *
pbuff
++;

142 
i
--;

143 } 
i
 > 0u);

146 
pbuff
 = 
pI∆öeBuf„r
;

149 
pS1
 = 
pSèã
;

152 
i
 = 
S
->
N
 >> 2u;

159 *
pbuff
++ = *
pS1
++;

160 *
pbuff
++ = *
pS1
++;

161 *
pbuff
++ = *
pS1
++;

162 *
pbuff
++ = *
pS1
++;

165 
i
--;

166 } 
i
 > 0u);

173 
	`¨m_rf·_q31
(
S
->
pRf·
, 
pI∆öeBuf„r
, 
pSèã
);

178 
	`¨m_cm∂x_mu…_cm∂x_q31
(
pSèã
, 
weights
,ÖSèã, 
S
->
N
);

182 
	`¨m_shi·_q31
(
pSèã
, 2,ÖSèã, 
S
->
N
 * 2);

191 
i
 = (
S
->
N
 - 1u) >> 2u;

194 
pbuff
 = 
pI∆öeBuf„r
;

197 
pS1
 = 
pSèã
;

200 
ö
 = *
pS1
++ >> 1u;

202 *
pbuff
++ = 
ö
;

205 
pS1
++;

213 
ö
 = *
pS1
++ - in;

214 *
pbuff
++ = 
ö
;

216 
pS1
++;

218 
ö
 = *
pS1
++ - in;

219 *
pbuff
++ = 
ö
;

220 
pS1
++;

222 
ö
 = *
pS1
++ - in;

223 *
pbuff
++ = 
ö
;

224 
pS1
++;

226 
ö
 = *
pS1
++ - in;

227 *
pbuff
++ = 
ö
;

228 
pS1
++;

231 
i
--;

232 } 
i
 > 0u);

236 
i
 = (
S
->
N
 - 1u) % 0x4u;

238 
i
 > 0u)

242 
ö
 = *
pS1
++ - in;

243 *
pbuff
++ = 
ö
;

245 
pS1
++;

248 
i
--;

255 
i
 = 
S
->
N
 >> 2u;

258 
pbuff
 = 
pI∆öeBuf„r
;

264 
ö
 = *
pbuff
;

265 *
pbuff
++ = ((
q31_t
Ë(((
q63_t
Ë
ö
 * 
S
->
n‹mÆize
) >> 31));

267 
ö
 = *
pbuff
;

268 *
pbuff
++ = ((
q31_t
Ë(((
q63_t
Ë
ö
 * 
S
->
n‹mÆize
) >> 31));

270 
ö
 = *
pbuff
;

271 *
pbuff
++ = ((
q31_t
Ë(((
q63_t
Ë
ö
 * 
S
->
n‹mÆize
) >> 31));

273 
ö
 = *
pbuff
;

274 *
pbuff
++ = ((
q31_t
Ë(((
q63_t
Ë
ö
 * 
S
->
n‹mÆize
) >> 31));

277 
i
--;

278 } 
i
 > 0u);

286 
i
 = 
S
->
Nby2
;

292 *
pS1
++ = *
pbuff
++;

294 *
pS2
-- = *
pbuff
++;

297 
i
--;

298 } 
i
 > 0u);

301 
pbuff
 = 
pI∆öeBuf„r
;

304 
pS1
 = 
pSèã
;

307 
i
 = 
S
->
N
;

312 *
pbuff
++ = *
pS1
++;

315 
i
--;

316 } 
i
 > 0u);

323 
	`¨m_rf·_q31
(
S
->
pRf·
, 
pI∆öeBuf„r
, 
pSèã
);

328 
	`¨m_cm∂x_mu…_cm∂x_q31
(
pSèã
, 
weights
,ÖSèã, 
S
->
N
);

332 
	`¨m_shi·_q31
(
pSèã
, 2,ÖSèã, 
S
->
N
 * 2);

341 
pbuff
 = 
pI∆öeBuf„r
;

344 
pS1
 = 
pSèã
;

347 
ö
 = *
pS1
++ >> 1u;

349 *
pbuff
++ = 
ö
;

352 
pS1
++;

355 
i
 = (
S
->
N
 - 1u);

357 
i
 > 0u)

361 
ö
 = *
pS1
++ - in;

362 *
pbuff
++ = 
ö
;

364 
pS1
++;

367 
i
--;

374 
i
 = 
S
->
N
;

377 
pbuff
 = 
pI∆öeBuf„r
;

382 
ö
 = *
pbuff
;

383 *
pbuff
++ = ((
q31_t
Ë(((
q63_t
Ë
ö
 * 
S
->
n‹mÆize
) >> 31));

386 
i
--;

387 } 
i
 > 0u);

391 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_f32.c

41 
	~"¨m_m©h.h
"

43 
¨m_ødix4_buâîÊy_f32
(

44 
Êﬂt32_t
 * 
pSrc
,

45 
uöt16_t
 
f·Lí
,

46 
Êﬂt32_t
 * 
pC€f
,

47 
uöt16_t
 
twidC€fModifõr
);

49 
¨m_ødix4_buâîÊy_övî£_f32
(

50 
Êﬂt32_t
 * 
pSrc
,

51 
uöt16_t
 
f·Lí
,

52 
Êﬂt32_t
 * 
pC€f
,

53 
uöt16_t
 
twidC€fModifõr
,

54 
Êﬂt32_t
 
⁄ebyf·Lí
);

56 
¨m_bôªvîßl_f32
(

57 
Êﬂt32_t
 * 
pSrc
,

58 
uöt16_t
 
f·Size
,

59 
uöt16_t
 
bôRevFa˘‹
,

60 
uöt16_t
 * 
pBôRevTab
);

70 
¨m_•lô_rf·_f32
(

71 
Êﬂt32_t
 * 
pSrc
,

72 
uöt32_t
 
f·Lí
,

73 
Êﬂt32_t
 * 
pATabÀ
,

74 
Êﬂt32_t
 * 
pBTabÀ
,

75 
Êﬂt32_t
 * 
pD°
,

76 
uöt32_t
 
modifõr
);

77 
¨m_•lô_rif·_f32
(

78 
Êﬂt32_t
 * 
pSrc
,

79 
uöt32_t
 
f·Lí
,

80 
Êﬂt32_t
 * 
pATabÀ
,

81 
Êﬂt32_t
 * 
pBTabÀ
,

82 
Êﬂt32_t
 * 
pD°
,

83 
uöt32_t
 
modifõr
);

100 
	$¨m_rf·_f32
(

101 c⁄° 
¨m_rf·_ö°™˚_f32
 * 
S
,

102 
Êﬂt32_t
 * 
pSrc
,

103 
Êﬂt32_t
 * 
pD°
)

105 c⁄° 
¨m_cf·_ødix4_ö°™˚_f32
 *
S_CFFT
 = 
S
->
pCf·
;

109 if(
S
->
if·FœgR
 == 1u)

112 
	`¨m_•lô_rif·_f32
(
pSrc
, 
S
->
f·LíBy2
, S->
pTwiddÀARól
,

113 
S
->
pTwiddÀBRól
, 
pD°
, S->
twidC€fRModifõr
);

117 
	`¨m_ødix4_buâîÊy_övî£_f32
(
pD°
, 
S_CFFT
->
f·Lí
,

118 
S_CFFT
->
pTwiddÀ
,

119 
S_CFFT
->
twidC€fModifõr
,

120 
S_CFFT
->
⁄ebyf·Lí
);

123 if(
S
->
bôRevî£FœgR
 == 1u)

125 
	`¨m_bôªvîßl_f32
(
pD°
, 
S_CFFT
->
f·Lí
,

126 
S_CFFT
->
bôRevFa˘‹
, S_CFFT->
pBôRevTabÀ
);

135 
	`¨m_ødix4_buâîÊy_f32
(
pSrc
, 
S_CFFT
->
f·Lí
,

136 
S_CFFT
->
pTwiddÀ
, S_CFFT->
twidC€fModifõr
);

139 if(
S
->
bôRevî£FœgR
 == 1u)

141 
	`¨m_bôªvîßl_f32
(
pSrc
, 
S_CFFT
->
f·Lí
,

142 
S_CFFT
->
bôRevFa˘‹
, S_CFFT->
pBôRevTabÀ
);

147 
	`¨m_•lô_rf·_f32
(
pSrc
, 
S
->
f·LíBy2
, S->
pTwiddÀARól
,

148 
S
->
pTwiddÀBRól
, 
pD°
, S->
twidC€fRModifõr
);

151 
	}
}

168 
	$¨m_•lô_rf·_f32
(

169 
Êﬂt32_t
 * 
pSrc
,

170 
uöt32_t
 
f·Lí
,

171 
Êﬂt32_t
 * 
pATabÀ
,

172 
Êﬂt32_t
 * 
pBTabÀ
,

173 
Êﬂt32_t
 * 
pD°
,

174 
uöt32_t
 
modifõr
)

176 
uöt32_t
 
i
;

177 
Êﬂt32_t
 
outR
, 
outI
;

178 
Êﬂt32_t
 *
pC€fA
, *
pC€fB
;

179 
Êﬂt32_t
 
C€fA1
, 
C€fA2
, 
C€fB1
;

180 
Êﬂt32_t
 *
pD°1
 = &
pD°
[2], *
pD°2
 = &pD°[(4u * 
f·Lí
) - 1u];

181 
Êﬂt32_t
 *
pSrc1
 = &
pSrc
[2], *
pSrc2
 = &pSrc[(2u * 
f·Lí
) - 1u];

184 
pC€fA
 = &
pATabÀ
[
modifõr
 * 2u];

185 
pC€fB
 = &
pBTabÀ
[
modifõr
 * 2u];

187 
i
 = 
f·Lí
 - 1u;

189 
i
 > 0u)

202 
C€fA1
 = *
pC€fA
++;

204 
C€fA2
 = *
pC€fA
;

207 
outR
 = *
pSrc1
 * 
C€fA1
;

209 
outI
 = *
pSrc1
++ * 
C€fA2
;

212 
outR
 -(*
pSrc1
 + *
pSrc2
Ë* 
C€fA2
;

214 
outI
 +*
pSrc1
++ * 
C€fA1
;

216 
C€fB1
 = *
pC€fB
;

219 
outI
 -*
pSrc2
-- * 
C€fB1
;

221 
outI
 -*
pSrc2
 * 
C€fA2
;

224 
outR
 +*
pSrc2
-- * 
C€fB1
;

227 *
pD°1
++ = 
outR
;

228 *
pD°1
++ = 
outI
;

231 *
pD°2
-- = -
outI
;

232 *
pD°2
-- = 
outR
;

235 
pC€fB
 =ÖC€fB + (
modifõr
 * 2u);

236 
pC€fA
 =ÖC€fA + ((
modifõr
 * 2u) - 1u);

238 
i
--;

242 
pD°
[2u * 
f·Lí
] = 
pSrc
[0] -ÖSrc[1];

243 
pD°
[(2u * 
f·Lí
) + 1u] = 0.0f;

245 
pD°
[0] = 
pSrc
[0] +ÖSrc[1];

246 
pD°
[1] = 0.0f;

248 
	}
}

262 
	$¨m_•lô_rif·_f32
(

263 
Êﬂt32_t
 * 
pSrc
,

264 
uöt32_t
 
f·Lí
,

265 
Êﬂt32_t
 * 
pATabÀ
,

266 
Êﬂt32_t
 * 
pBTabÀ
,

267 
Êﬂt32_t
 * 
pD°
,

268 
uöt32_t
 
modifõr
)

270 
Êﬂt32_t
 
outR
, 
outI
;

271 
Êﬂt32_t
 *
pC€fA
, *
pC€fB
;

272 
Êﬂt32_t
 
C€fA1
, 
C€fA2
, 
C€fB1
;

273 
Êﬂt32_t
 *
pSrc1
 = &
pSrc
[0], *
pSrc2
 = &pSrc[(2u * 
f·Lí
) + 1u];

275 
pC€fA
 = &
pATabÀ
[0];

276 
pC€fB
 = &
pBTabÀ
[0];

278 
f·Lí
 > 0u)

291 
C€fA1
 = *
pC€fA
++;

292 
C€fA2
 = *
pC€fA
;

295 
outR
 = *
pSrc1
 * 
C€fA1
;

298 
outI
 = -(*
pSrc1
++Ë* 
C€fA2
;

301 
outR
 +(*
pSrc1
 + *
pSrc2
Ë* 
C€fA2
;

304 
outI
 +(*
pSrc1
++Ë* 
C€fA1
;

306 
C€fB1
 = *
pC€fB
;

309 
outI
 -*
pSrc2
-- * 
C€fB1
;

312 
outR
 +*
pSrc2
 * 
C€fB1
;

315 
outI
 +*
pSrc2
-- * 
C€fA2
;

318 *
pD°
++ = 
outR
;

319 *
pD°
++ = 
outI
;

322 
pC€fB
 =ÖC€fB + (
modifõr
 * 2u);

323 
pC€fA
 =ÖC€fA + ((
modifõr
 * 2u) - 1u);

326 
f·Lí
--;

329 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_fast_f32.c

41 
	~"¨m_m©h.h
"

43 
	$°age_rf·_f32
(

44 
¨m_rf·_Á°_ö°™˚_f32
 * 
S
,

45 
Êﬂt32_t
 * 
p
, flﬂt32_à* 
pOut
)

47 
uöt32_t
 
k
;

48 
Êﬂt32_t
 
twR
, 
twI
;

49 
Êﬂt32_t
 * 
pC€ff
 = 
S
->
pTwiddÀRFFT
;

50 
Êﬂt32_t
 *
pA
 = 
p
;

51 
Êﬂt32_t
 *
pB
 = 
p
;

52 
Êﬂt32_t
 
xAR
, 
xAI
, 
xBR
, 
xBI
;

53 
Êﬂt32_t
 
t1a
, 
t1b
;

54 
Êﬂt32_t
 
p0
, 
p1
, 
p2
, 
p3
;

57 
k
 = (
S
->
Söt
).
f·Lí
 - 1;

61 
xBR
 = 
pB
[0];

62 
xBI
 = 
pB
[1];

63 
xAR
 = 
pA
[0];

64 
xAI
 = 
pA
[1];

66 
twR
 = *
pC€ff
++ ;

67 
twI
 = *
pC€ff
++ ;

70 
t1a
 = 
xBR
 + 
xAR
 ;

73 
t1b
 = 
xBI
 + 
xAI
 ;

77 *
pOut
++ = 0.5‡* ( 
t1a
 + 
t1b
 );

78 *
pOut
++ = 0.5‡* ( 
t1a
 - 
t1b
 );

81 
pB
 = 
p
 + 2*
k
;

82 
pA
 += 2;

101 
xBI
 = 
pB
[1];

102 
xBR
 = 
pB
[0];

103 
xAR
 = 
pA
[0];

104 
xAI
 = 
pA
[1];

106 
twR
 = *
pC€ff
++;

107 
twI
 = *
pC€ff
++;

109 
t1a
 = 
xBR
 - 
xAR
 ;

110 
t1b
 = 
xBI
 + 
xAI
 ;

114 
p0
 = 
twR
 * 
t1a
;

115 
p1
 = 
twI
 * 
t1a
;

116 
p2
 = 
twR
 * 
t1b
;

117 
p3
 = 
twI
 * 
t1b
;

119 *
pOut
++ = 0.5‡* (
xAR
 + 
xBR
 + 
p0
 + 
p3
 );

120 *
pOut
++ = 0.5‡* (
xAI
 - 
xBI
 + 
p1
 - 
p2
 );

122 
pA
 += 2;

123 
pB
 -= 2;

124 
k
--;

125 } 
k
 > 0u);

126 
	}
}

129 
	$mîge_rf·_f32
(

130 
¨m_rf·_Á°_ö°™˚_f32
 * 
S
,

131 
Êﬂt32_t
 * 
p
, flﬂt32_à* 
pOut
)

133 
uöt32_t
 
k
;

134 
Êﬂt32_t
 
twR
, 
twI
;

135 
Êﬂt32_t
 *
pC€ff
 = 
S
->
pTwiddÀRFFT
;

136 
Êﬂt32_t
 *
pA
 = 
p
;

137 
Êﬂt32_t
 *
pB
 = 
p
;

138 
Êﬂt32_t
 
xAR
, 
xAI
, 
xBR
, 
xBI
;

139 
Êﬂt32_t
 
t1a
, 
t1b
, 
r
, 
s
, 
t
, 
u
;

141 
k
 = (
S
->
Söt
).
f·Lí
 - 1;

143 
xAR
 = 
pA
[0];

144 
xAI
 = 
pA
[1];

146 
pC€ff
 += 2 ;

148 *
pOut
++ = 0.5‡* ( 
xAR
 + 
xAI
 );

149 *
pOut
++ = 0.5‡* ( 
xAR
 - 
xAI
 );

151 
pB
 = 
p
 + 2*
k
 ;

152 
pA
 += 2 ;

154 
k
 > 0u)

159 
xBI
 = 
pB
[1] ;

160 
xBR
 = 
pB
[0] ;

161 
xAR
 = 
pA
[0];

162 
xAI
 = 
pA
[1];

164 
twR
 = *
pC€ff
++;

165 
twI
 = *
pC€ff
++;

167 
t1a
 = 
xAR
 - 
xBR
 ;

168 
t1b
 = 
xAI
 + 
xBI
 ;

170 
r
 = 
twR
 * 
t1a
;

171 
s
 = 
twI
 * 
t1b
;

172 
t
 = 
twI
 * 
t1a
;

173 
u
 = 
twR
 * 
t1b
;

177 *
pOut
++ = 0.5‡* (
xAR
 + 
xBR
 - 
r
 - 
s
 );

178 *
pOut
++ = 0.5‡* (
xAI
 - 
xBI
 + 
t
 - 
u
 );

180 
pA
 += 2;

181 
pB
 -= 2;

182 
k
--;

185 
	}
}

328 
	$¨m_rf·_Á°_f32
(

329 
¨m_rf·_Á°_ö°™˚_f32
 * 
S
,

330 
Êﬂt32_t
 * 
p
, flﬂt32_à* 
pOut
,

331 
uöt8_t
 
if·Fœg
)

333 
¨m_cf·_ö°™˚_f32
 * 
Söt
 = &(
S
->Sint);

334 
Söt
->
f·Lí
 = 
S
->
f·LíRFFT
 / 2;

337 if(
if·Fœg
)

340 
	`mîge_rf·_f32
(
S
, 
p
, 
pOut
);

343 
	`¨m_cf·_f32
–
Söt
, 
pOut
, 
if·Fœg
, 1);

348 
	`¨m_cf·_f32
–
Söt
, 
p
, 
if·Fœg
, 1);

351 
	`°age_rf·_f32
(
S
, 
p
, 
pOut
);

353 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_fast_init_f32.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

71 
¨m_°©us
 
	$¨m_rf·_Á°_öô_f32
(

72 
¨m_rf·_Á°_ö°™˚_f32
 * 
S
,

73 
uöt16_t
 
f·Lí
)

75 
¨m_cf·_ö°™˚_f32
 * 
Söt
;

77 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

79 
Söt
 = &(
S
->Sint);

80 
Söt
->
f·Lí
 = fftLen/2;

81 
S
->
f·LíRFFT
 = 
f·Lí
;

84 
Söt
->
f·Lí
)

89 
Söt
->
bôRevLígth
 = 
ARMBITREVINDEXTABLE2048_TABLE_LENGTH
;

91 
Söt
->
pBôRevTabÀ
 = (
uöt16_t
 *)
¨mBôRevIndexTabÀ2048
;

93 
Söt
->
pTwiddÀ
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_2048
;

94 
S
->
pTwiddÀRFFT
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_rf·_4096
;

97 
Söt
->
bôRevLígth
 = 
ARMBITREVINDEXTABLE1024_TABLE_LENGTH
;

98 
Söt
->
pBôRevTabÀ
 = (
uöt16_t
 *)
¨mBôRevIndexTabÀ1024
;

99 
Söt
->
pTwiddÀ
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_1024
;

100 
S
->
pTwiddÀRFFT
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_rf·_2048
;

103 
Söt
->
bôRevLígth
 = 
ARMBITREVINDEXTABLE_512_TABLE_LENGTH
;

104 
Söt
->
pBôRevTabÀ
 = (
uöt16_t
 *)
¨mBôRevIndexTabÀ512
;

105 
Söt
->
pTwiddÀ
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_512
;

106 
S
->
pTwiddÀRFFT
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_rf·_1024
;

109 
Söt
->
bôRevLígth
 = 
ARMBITREVINDEXTABLE_256_TABLE_LENGTH
;

110 
Söt
->
pBôRevTabÀ
 = (
uöt16_t
 *)
¨mBôRevIndexTabÀ256
;

111 
Söt
->
pTwiddÀ
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_256
;

112 
S
->
pTwiddÀRFFT
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_rf·_512
;

115 
Söt
->
bôRevLígth
 = 
ARMBITREVINDEXTABLE_128_TABLE_LENGTH
;

116 
Söt
->
pBôRevTabÀ
 = (
uöt16_t
 *)
¨mBôRevIndexTabÀ128
;

117 
Söt
->
pTwiddÀ
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_128
;

118 
S
->
pTwiddÀRFFT
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_rf·_256
;

121 
Söt
->
bôRevLígth
 = 
ARMBITREVINDEXTABLE__64_TABLE_LENGTH
;

122 
Söt
->
pBôRevTabÀ
 = (
uöt16_t
 *)
¨mBôRevIndexTabÀ64
;

123 
Söt
->
pTwiddÀ
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_64
;

124 
S
->
pTwiddÀRFFT
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_rf·_128
;

127 
Söt
->
bôRevLígth
 = 
ARMBITREVINDEXTABLE__32_TABLE_LENGTH
;

128 
Söt
->
pBôRevTabÀ
 = (
uöt16_t
 *)
¨mBôRevIndexTabÀ32
;

129 
Söt
->
pTwiddÀ
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_32
;

130 
S
->
pTwiddÀRFFT
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_rf·_64
;

133 
Söt
->
bôRevLígth
 = 
ARMBITREVINDEXTABLE__16_TABLE_LENGTH
;

134 
Söt
->
pBôRevTabÀ
 = (
uöt16_t
 *)
¨mBôRevIndexTabÀ16
;

135 
Söt
->
pTwiddÀ
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_16
;

136 
S
->
pTwiddÀRFFT
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_rf·_32
;

140 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

144  (
°©us
);

145 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_init_f32.c

42 
	~"¨m_m©h.h
"

67 c⁄° 
Êﬂt32_t
 
	gªÆC€fA
[8192] = {

4179 c⁄° 
Êﬂt32_t
 
	gªÆC€fB
[8192] = {

8304 
¨m_°©us
 
	$¨m_rf·_öô_f32
(

8305 
¨m_rf·_ö°™˚_f32
 * 
S
,

8306 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

8307 
uöt32_t
 
f·LíRól
,

8308 
uöt32_t
 
if·FœgR
,

8309 
uöt32_t
 
bôRevî£Fœg
)

8313 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

8316 
S
->
f·LíRól
 = (
uöt16_t
) fftLenReal;

8319 
S
->
f·LíBy2
 = (
uöt16_t
Ë
f·LíRól
 / 2u;

8322 
S
->
pTwiddÀARól
 = (
Êﬂt32_t
 *Ë
ªÆC€fA
;

8325 
S
->
pTwiddÀBRól
 = (
Êﬂt32_t
 *Ë
ªÆC€fB
;

8328 
S
->
if·FœgR
 = (
uöt8_t
) ifftFlagR;

8331 
S
->
bôRevî£FœgR
 = (
uöt8_t
Ë
bôRevî£Fœg
;

8334 
S
->
f·LíRól
)

8338 
S
->
twidC€fRModifõr
 = 1u;

8341 
S
->
twidC€fRModifõr
 = 4u;

8344 
S
->
twidC€fRModifõr
 = 16u;

8347 
S
->
twidC€fRModifõr
 = 64u;

8351 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

8356 
S
->
pCf·
 = 
S_CFFT
;

8358 if(
S
->
if·FœgR
)

8361 
	`¨m_cf·_ødix4_öô_f32
(
S
->
pCf·
, S->
f·LíBy2
, 1u, 0u);

8366 
	`¨m_cf·_ødix4_öô_f32
(
S
->
pCf·
, S->
f·LíBy2
, 0u, 0u);

8370  (
°©us
);

8372 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_init_q15.c

42 
	~"¨m_m©h.h
"

43 
	~"¨m_comm⁄_èbÀs.h
"

44 
	~"¨m_c⁄°_°ru˘s.h
"

71 c⁄° 
q15_t
 
ALIGN4
 
	gªÆC€fAQ15
[8192] = {

1113 c⁄° 
q15_t
 
ALIGN4
 
	gªÆC€fBQ15
[8192] = {

2160 
¨m_°©us
 
	$¨m_rf·_öô_q15
(

2161 
¨m_rf·_ö°™˚_q15
 * 
S
,

2162 
uöt32_t
 
f·LíRól
,

2163 
uöt32_t
 
if·FœgR
,

2164 
uöt32_t
 
bôRevî£Fœg
)

2167 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

2170 
S
->
f·LíRól
 = (
uöt16_t
) fftLenReal;

2173 
S
->
pTwiddÀARól
 = (
q15_t
 *Ë
ªÆC€fAQ15
;

2176 
S
->
pTwiddÀBRól
 = (
q15_t
 *Ë
ªÆC€fBQ15
;

2179 
S
->
if·FœgR
 = (
uöt8_t
) ifftFlagR;

2182 
S
->
bôRevî£FœgR
 = (
uöt8_t
Ë
bôRevî£Fœg
;

2185 
S
->
f·LíRól
)

2188 
S
->
twidC€fRModifõr
 = 1u;

2189 
S
->
pCf·
 = &
¨m_cf·_sR_q15_Àn4096
;

2192 
S
->
twidC€fRModifõr
 = 2u;

2193 
S
->
pCf·
 = &
¨m_cf·_sR_q15_Àn2048
;

2196 
S
->
twidC€fRModifõr
 = 4u;

2197 
S
->
pCf·
 = &
¨m_cf·_sR_q15_Àn1024
;

2200 
S
->
twidC€fRModifõr
 = 8u;

2201 
S
->
pCf·
 = &
¨m_cf·_sR_q15_Àn512
;

2204 
S
->
twidC€fRModifõr
 = 16u;

2205 
S
->
pCf·
 = &
¨m_cf·_sR_q15_Àn256
;

2208 
S
->
twidC€fRModifõr
 = 32u;

2209 
S
->
pCf·
 = &
¨m_cf·_sR_q15_Àn128
;

2212 
S
->
twidC€fRModifõr
 = 64u;

2213 
S
->
pCf·
 = &
¨m_cf·_sR_q15_Àn64
;

2216 
S
->
twidC€fRModifõr
 = 128u;

2217 
S
->
pCf·
 = &
¨m_cf·_sR_q15_Àn32
;

2220 
S
->
twidC€fRModifõr
 = 256u;

2221 
S
->
pCf·
 = &
¨m_cf·_sR_q15_Àn16
;

2225 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

2230  (
°©us
);

2231 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_init_q31.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

43 
	~"¨m_c⁄°_°ru˘s.h
"

70 c⁄° 
q31_t
 
	gªÆC€fAQ31
[8192] = {

2138 c⁄° 
q31_t
 
	gªÆC€fBQ31
[8192] = {

4210 
¨m_°©us
 
	$¨m_rf·_öô_q31
(

4211 
¨m_rf·_ö°™˚_q31
 * 
S
,

4212 
uöt32_t
 
f·LíRól
,

4213 
uöt32_t
 
if·FœgR
,

4214 
uöt32_t
 
bôRevî£Fœg
)

4217 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

4220 
S
->
f·LíRól
 = (
uöt16_t
) fftLenReal;

4223 
S
->
pTwiddÀARól
 = (
q31_t
 *Ë
ªÆC€fAQ31
;

4226 
S
->
pTwiddÀBRól
 = (
q31_t
 *Ë
ªÆC€fBQ31
;

4229 
S
->
if·FœgR
 = (
uöt8_t
) ifftFlagR;

4232 
S
->
bôRevî£FœgR
 = (
uöt8_t
Ë
bôRevî£Fœg
;

4235 
S
->
f·LíRól
)

4238 
S
->
twidC€fRModifõr
 = 1u;

4239 
S
->
pCf·
 = &
¨m_cf·_sR_q31_Àn4096
;

4242 
S
->
twidC€fRModifõr
 = 2u;

4243 
S
->
pCf·
 = &
¨m_cf·_sR_q31_Àn2048
;

4246 
S
->
twidC€fRModifõr
 = 4u;

4247 
S
->
pCf·
 = &
¨m_cf·_sR_q31_Àn1024
;

4250 
S
->
twidC€fRModifõr
 = 8u;

4251 
S
->
pCf·
 = &
¨m_cf·_sR_q31_Àn512
;

4254 
S
->
twidC€fRModifõr
 = 16u;

4255 
S
->
pCf·
 = &
¨m_cf·_sR_q31_Àn256
;

4258 
S
->
twidC€fRModifõr
 = 32u;

4259 
S
->
pCf·
 = &
¨m_cf·_sR_q31_Àn128
;

4262 
S
->
twidC€fRModifõr
 = 64u;

4263 
S
->
pCf·
 = &
¨m_cf·_sR_q31_Àn64
;

4266 
S
->
twidC€fRModifõr
 = 128u;

4267 
S
->
pCf·
 = &
¨m_cf·_sR_q31_Àn32
;

4270 
S
->
twidC€fRModifõr
 = 256u;

4271 
S
->
pCf·
 = &
¨m_cf·_sR_q31_Àn16
;

4275 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

4280  (
°©us
);

4281 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_q15.c

42 
	~"¨m_m©h.h
"

48 
¨m_•lô_rf·_q15
(

49 
q15_t
 * 
pSrc
,

50 
uöt32_t
 
f·Lí
,

51 
q15_t
 * 
pATabÀ
,

52 
q15_t
 * 
pBTabÀ
,

53 
q15_t
 * 
pD°
,

54 
uöt32_t
 
modifõr
);

56 
¨m_•lô_rif·_q15
(

57 
q15_t
 * 
pSrc
,

58 
uöt32_t
 
f·Lí
,

59 
q15_t
 * 
pATabÀ
,

60 
q15_t
 * 
pBTabÀ
,

61 
q15_t
 * 
pD°
,

62 
uöt32_t
 
modifõr
);

87 
	$¨m_rf·_q15
(

88 c⁄° 
¨m_rf·_ö°™˚_q15
 * 
S
,

89 
q15_t
 * 
pSrc
,

90 
q15_t
 * 
pD°
)

92 c⁄° 
¨m_cf·_ö°™˚_q15
 *
S_CFFT
 = 
S
->
pCf·
;

93 
uöt32_t
 
i
;

94 
uöt32_t
 
L2
 = 
S
->
f·LíRól
 >> 1;

97 if(
S
->
if·FœgR
 == 1u)

100 
	`¨m_•lô_rif·_q15
(
pSrc
, 
L2
, 
S
->
pTwiddÀARól
,

101 
S
->
pTwiddÀBRól
, 
pD°
, S->
twidC€fRModifõr
);

104 
	`¨m_cf·_q15
(
S_CFFT
, 
pD°
, 
S
->
if·FœgR
, S->
bôRevî£FœgR
);

106 
i
=0;i<
S
->
f·LíRól
;i++)

108 
pD°
[
i
] =ÖDst[i] << 1;

116 
	`¨m_cf·_q15
(
S_CFFT
, 
pSrc
, 
S
->
if·FœgR
, S->
bôRevî£FœgR
);

119 
	`¨m_•lô_rf·_q15
(
pSrc
, 
L2
, 
S
->
pTwiddÀARól
,

120 
S
->
pTwiddÀBRól
, 
pD°
, S->
twidC€fRModifõr
);

122 
	}
}

140 
	$¨m_•lô_rf·_q15
(

141 
q15_t
 * 
pSrc
,

142 
uöt32_t
 
f·Lí
,

143 
q15_t
 * 
pATabÀ
,

144 
q15_t
 * 
pBTabÀ
,

145 
q15_t
 * 
pD°
,

146 
uöt32_t
 
modifõr
)

148 
uöt32_t
 
i
;

149 
q31_t
 
outR
, 
outI
;

150 
q15_t
 *
pC€fA
, *
pC€fB
;

151 
q15_t
 *
pSrc1
, *
pSrc2
;

152 #i‚de‡
ARM_MATH_CM0_FAMILY


153 
q15_t
 *
pD1
, *
pD2
;

159 
pC€fA
 = &
pATabÀ
[
modifõr
 * 2u];

160 
pC€fB
 = &
pBTabÀ
[
modifõr
 * 2u];

162 
pSrc1
 = &
pSrc
[2];

163 
pSrc2
 = &
pSrc
[(2u * 
f·Lí
) - 2u];

165 #i‚de‡
ARM_MATH_CM0_FAMILY


168 
i
 = 1u;

169 
pD1
 = 
pD°
 + 2;

170 
pD2
 = 
pD°
 + (4u * 
f·Lí
) - 2;

172 
i
 = 
f·Lí
 - 1; i > 0; i--)

185 #i‚de‡
ARM_MATH_BIG_ENDIAN


188 
outR
 = 
	`__SMUSD
(*
	`__SIMD32
(
pSrc1
), *__SIMD32(
pC€fA
));

193 
outR
 = -(
	`__SMUSD
(*
	`__SIMD32
(
pSrc1
), *__SIMD32(
pC€fA
)));

199 
outR
 = 
	`__SMLAD
(*
	`__SIMD32
(
pSrc2
), *__SIMD32(
pC€fB
), outR) >> 16u;

204 #i‚de‡
ARM_MATH_BIG_ENDIAN


206 
outI
 = 
	`__SMUSDX
(*
	`__SIMD32
(
pSrc2
)--, *__SIMD32(
pC€fB
));

210 
outI
 = 
	`__SMUSDX
(*
	`__SIMD32
(
pC€fB
), *__SIMD32(
pSrc2
)--);

215 
outI
 = 
	`__SMLADX
(*
	`__SIMD32
(
pSrc1
)++, *__SIMD32(
pC€fA
), outI);

218 *
pD1
++ = (
q15_t
Ë
outR
;

219 *
pD1
++ = 
outI
 >> 16u;

222 
pD2
[0] = (
q15_t
Ë
outR
;

223 
pD2
[1] = -(
outI
 >> 16u);

224 
pD2
 -= 2;

227 
pC€fB
 =ÖC€fB + (2u * 
modifõr
);

228 
pC€fA
 =ÖC€fA + (2u * 
modifõr
);

231 
pD°
[2u * 
f·Lí
] = (
pSrc
[0] -ÖSrc[1]) >> 1;

232 
pD°
[(2u * 
f·Lí
) + 1u] = 0;

234 
pD°
[0] = (
pSrc
[0] +ÖSrc[1]) >> 1;

235 
pD°
[1] = 0;

240 
i
 = 1u;

242 
i
 < 
f·Lí
)

250 
outR
 = *
pSrc1
 * *
pC€fA
;

251 
outR
 = outR - (*(
pSrc1
 + 1Ë* *(
pC€fA
 + 1));

252 
outR
 = outR + (*
pSrc2
 * *
pC€fB
);

253 
outR
 = (outR + (*(
pSrc2
 + 1Ë* *(
pC€fB
 + 1))) >> 16;

261 
outI
 = *
pSrc2
 * *(
pC€fB
 + 1);

262 
outI
 = outI - (*(
pSrc2
 + 1Ë* *
pC€fB
);

263 
outI
 = outI + (*(
pSrc1
 + 1Ë* *
pC€fA
);

264 
outI
 = outI + (*
pSrc1
 * *(
pC€fA
 + 1));

267 
pSrc1
 += 2u;

268 
pSrc2
 -= 2u;

271 
pD°
[2u * 
i
] = (
q15_t
Ë
outR
;

272 
pD°
[(2u * 
i
Ë+ 1u] = 
outI
 >> 16u;

275 
pD°
[(4u * 
f·Lí
Ë- (2u * 
i
)] = (
q15_t
Ë
outR
;

276 
pD°
[((4u * 
f·Lí
Ë- (2u * 
i
)Ë+ 1u] = -(
outI
 >> 16u);

279 
pC€fB
 =ÖC€fB + (2u * 
modifõr
);

280 
pC€fA
 =ÖC€fA + (2u * 
modifõr
);

282 
i
++;

285 
pD°
[2u * 
f·Lí
] = (
pSrc
[0] -ÖSrc[1]) >> 1;

286 
pD°
[(2u * 
f·Lí
) + 1u] = 0;

288 
pD°
[0] = (
pSrc
[0] +ÖSrc[1]) >> 1;

289 
pD°
[1] = 0;

292 
	}
}

306 
	$¨m_•lô_rif·_q15
(

307 
q15_t
 * 
pSrc
,

308 
uöt32_t
 
f·Lí
,

309 
q15_t
 * 
pATabÀ
,

310 
q15_t
 * 
pBTabÀ
,

311 
q15_t
 * 
pD°
,

312 
uöt32_t
 
modifõr
)

314 
uöt32_t
 
i
;

315 
q31_t
 
outR
, 
outI
;

316 
q15_t
 *
pC€fA
, *
pC€fB
;

317 
q15_t
 *
pSrc1
, *
pSrc2
;

318 
q15_t
 *
pD°1
 = &
pD°
[0];

320 
pC€fA
 = &
pATabÀ
[0];

321 
pC€fB
 = &
pBTabÀ
[0];

323 
pSrc1
 = &
pSrc
[0];

324 
pSrc2
 = &
pSrc
[2u * 
f·Lí
];

326 #i‚de‡
ARM_MATH_CM0_FAMILY


329 
i
 = 
f·Lí
;

331 
i
 > 0u)

344 #i‚de‡
ARM_MATH_BIG_ENDIAN


348 
outR
 = 
	`__SMUSD
(*
	`__SIMD32
(
pSrc2
), *__SIMD32(
pC€fB
));

354 
outR
 = -(
	`__SMUSD
(*
	`__SIMD32
(
pSrc2
), *__SIMD32(
pC€fB
)));

360 
outR
 = 
	`__SMLAD
(*
	`__SIMD32
(
pSrc1
), *__SIMD32(
pC€fA
), outR) >> 16u;

365 
outI
 = 
	`__SMUADX
(*
	`__SIMD32
(
pSrc2
)--, *__SIMD32(
pC€fB
));

369 #i‚de‡
ARM_MATH_BIG_ENDIAN


371 
outI
 = 
	`__SMLSDX
(*
	`__SIMD32
(
pC€fA
), *__SIMD32(
pSrc1
)++, -outI);

375 
outI
 = 
	`__SMLSDX
(*
	`__SIMD32
(
pSrc1
)++, *__SIMD32(
pC€fA
), -outI);

380 #i‚de‡
ARM_MATH_BIG_ENDIAN


382 *
	`__SIMD32
(
pD°1
)++ = 
	`__PKHBT
(
outR
, (
outI
 >> 16u), 16);

386 *
	`__SIMD32
(
pD°1
)++ = 
	`__PKHBT
((
outI
 >> 16u), 
outR
, 16);

391 
pC€fB
 =ÖC€fB + (2u * 
modifõr
);

392 
pC€fA
 =ÖC€fA + (2u * 
modifõr
);

394 
i
--;

398 
i
 = 
f·Lí
;

400 
i
 > 0u)

408 
outR
 = *
pSrc2
 * *
pC€fB
;

409 
outR
 = outR - (*(
pSrc2
 + 1Ë* *(
pC€fB
 + 1));

410 
outR
 = outR + (*
pSrc1
 * *
pC€fA
);

411 
outR
 = (outR + (*(
pSrc1
 + 1Ë* *(
pC€fA
 + 1))) >> 16;

419 
outI
 = *(
pSrc1
 + 1Ë* *
pC€fA
;

420 
outI
 = outI - (*
pSrc1
 * *(
pC€fA
 + 1));

421 
outI
 = outI - (*
pSrc2
 * *(
pC€fB
 + 1));

422 
outI
 = outI - (*(
pSrc2
 + 1Ë* *(
pC€fB
));

425 
pSrc1
 += 2u;

426 
pSrc2
 -= 2u;

429 *
pD°1
++ = (
q15_t
Ë
outR
;

430 *
pD°1
++ = (
q15_t
Ë(
outI
 >> 16);

433 
pC€fB
 =ÖC€fB + (2u * 
modifõr
);

434 
pC€fA
 =ÖC€fA + (2u * 
modifõr
);

436 
i
--;

439 
	}
}

	@CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_q31.c

42 
	~"¨m_m©h.h
"

48 
¨m_•lô_rf·_q31
(

49 
q31_t
 * 
pSrc
,

50 
uöt32_t
 
f·Lí
,

51 
q31_t
 * 
pATabÀ
,

52 
q31_t
 * 
pBTabÀ
,

53 
q31_t
 * 
pD°
,

54 
uöt32_t
 
modifõr
);

56 
¨m_•lô_rif·_q31
(

57 
q31_t
 * 
pSrc
,

58 
uöt32_t
 
f·Lí
,

59 
q31_t
 * 
pATabÀ
,

60 
q31_t
 * 
pBTabÀ
,

61 
q31_t
 * 
pD°
,

62 
uöt32_t
 
modifõr
);

87 
	$¨m_rf·_q31
(

88 c⁄° 
¨m_rf·_ö°™˚_q31
 * 
S
,

89 
q31_t
 * 
pSrc
,

90 
q31_t
 * 
pD°
)

92 c⁄° 
¨m_cf·_ö°™˚_q31
 *
S_CFFT
 = 
S
->
pCf·
;

93 
uöt32_t
 
i
;

94 
uöt32_t
 
L2
 = 
S
->
f·LíRól
 >> 1;

97 if(
S
->
if·FœgR
 == 1u)

100 
	`¨m_•lô_rif·_q31
(
pSrc
, 
L2
, 
S
->
pTwiddÀARól
,

101 
S
->
pTwiddÀBRól
, 
pD°
, S->
twidC€fRModifõr
);

104 
	`¨m_cf·_q31
(
S_CFFT
, 
pD°
, 
S
->
if·FœgR
, S->
bôRevî£FœgR
);

106 
i
=0;i<
S
->
f·LíRól
;i++)

108 
pD°
[
i
] =ÖDst[i] << 1;

116 
	`¨m_cf·_q31
(
S_CFFT
, 
pSrc
, 
S
->
if·FœgR
, S->
bôRevî£FœgR
);

119 
	`¨m_•lô_rf·_q31
(
pSrc
, 
L2
, 
S
->
pTwiddÀARól
,

120 
S
->
pTwiddÀBRól
, 
pD°
, S->
twidC€fRModifõr
);

122 
	}
}

138 
	$¨m_•lô_rf·_q31
(

139 
q31_t
 * 
pSrc
,

140 
uöt32_t
 
f·Lí
,

141 
q31_t
 * 
pATabÀ
,

142 
q31_t
 * 
pBTabÀ
,

143 
q31_t
 * 
pD°
,

144 
uöt32_t
 
modifõr
)

146 
uöt32_t
 
i
;

147 
q31_t
 
outR
, 
outI
;

148 
q31_t
 *
pC€fA
, *
pC€fB
;

149 
q31_t
 
C€fA1
, 
C€fA2
, 
C€fB1
;

150 
q31_t
 *
pOut1
 = &
pD°
[2], *
pOut2
 = &pD°[(4u * 
f·Lí
) - 1u];

151 
q31_t
 *
pIn1
 = &
pSrc
[2], *
pIn2
 = &pSrc[(2u * 
f·Lí
) - 1u];

154 
pC€fA
 = &
pATabÀ
[
modifõr
 * 2u];

155 
pC€fB
 = &
pBTabÀ
[
modifõr
 * 2u];

157 
i
 = 
f·Lí
 - 1u;

159 
i
 > 0u)

171 
C€fA1
 = *
pC€fA
++;

172 
C€fA2
 = *
pC€fA
;

175 
	`mu…_32x32_kìp32_R
(
outR
, *
pIn1
, 
C€fA1
);

178 
	`mu…_32x32_kìp32_R
(
outI
, *
pIn1
++, 
C€fA2
);

181 
	`mu…Sub_32x32_kìp32_R
(
outR
, *
pIn1
, 
C€fA2
);

184 
	`mu…Acc_32x32_kìp32_R
(
outI
, *
pIn1
++, 
C€fA1
);

187 
	`mu…Sub_32x32_kìp32_R
(
outR
, *
pIn2
, 
C€fA2
);

188 
C€fB1
 = *
pC€fB
;

191 
	`mu…Sub_32x32_kìp32_R
(
outI
, *
pIn2
--, 
C€fB1
);

194 
	`mu…Acc_32x32_kìp32_R
(
outR
, *
pIn2
, 
C€fB1
);

197 
	`mu…Sub_32x32_kìp32_R
(
outI
, *
pIn2
--, 
C€fA2
);

200 *
pOut1
++ = 
outR
;

201 *
pOut1
++ = 
outI
;

204 *
pOut2
-- = -
outI
;

205 *
pOut2
-- = 
outR
;

208 
pC€fB
 =ÖC€fB + (
modifõr
 * 2u);

209 
pC€fA
 =ÖC€fA + ((
modifõr
 * 2u) - 1u);

211 
i
--;

213 
pD°
[2u * 
f·Lí
] = (
pSrc
[0] -ÖSrc[1]) >> 1;

214 
pD°
[(2u * 
f·Lí
) + 1u] = 0;

216 
pD°
[0] = (
pSrc
[0] +ÖSrc[1]) >> 1;

217 
pD°
[1] = 0;

218 
	}
}

230 
	$¨m_•lô_rif·_q31
(

231 
q31_t
 * 
pSrc
,

232 
uöt32_t
 
f·Lí
,

233 
q31_t
 * 
pATabÀ
,

234 
q31_t
 * 
pBTabÀ
,

235 
q31_t
 * 
pD°
,

236 
uöt32_t
 
modifõr
)

238 
q31_t
 
outR
, 
outI
;

239 
q31_t
 *
pC€fA
, *
pC€fB
;

240 
q31_t
 
C€fA1
, 
C€fA2
, 
C€fB1
;

241 
q31_t
 *
pIn1
 = &
pSrc
[0], *
pIn2
 = &pSrc[(2u * 
f·Lí
) + 1u];

243 
pC€fA
 = &
pATabÀ
[0];

244 
pC€fB
 = &
pBTabÀ
[0];

246 
f·Lí
 > 0u)

257 
C€fA1
 = *
pC€fA
++;

258 
C€fA2
 = *
pC€fA
;

261 
	`mu…_32x32_kìp32_R
(
outR
, *
pIn1
, 
C€fA1
);

264 
	`mu…_32x32_kìp32_R
(
outI
, *
pIn1
++, -
C€fA2
);

267 
	`mu…Acc_32x32_kìp32_R
(
outR
, *
pIn1
, 
C€fA2
);

270 
	`mu…Acc_32x32_kìp32_R
(
outI
, *
pIn1
++, 
C€fA1
);

273 
	`mu…Acc_32x32_kìp32_R
(
outR
, *
pIn2
, 
C€fA2
);

274 
C€fB1
 = *
pC€fB
;

277 
	`mu…Sub_32x32_kìp32_R
(
outI
, *
pIn2
--, 
C€fB1
);

280 
	`mu…Acc_32x32_kìp32_R
(
outR
, *
pIn2
, 
C€fB1
);

283 
	`mu…Acc_32x32_kìp32_R
(
outI
, *
pIn2
--, 
C€fA2
);

286 *
pD°
++ = 
outR
;

287 *
pD°
++ = 
outI
;

290 
pC€fB
 =ÖC€fB + (
modifõr
 * 2u);

291 
pC€fA
 =ÖC€fA + ((
modifõr
 * 2u) - 1u);

294 
f·Lí
--;

296 
	}
}

	@CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h

53 #i‚de‡
__STM32F4xx_H


54 
	#__STM32F4xx_H


	)

56 #ifde‡
__˝lu•lus


68 #i‡!
deföed
(
STM32F40_41xxx
Ë&& !deföed(
STM32F427_437xx
Ë&& !deföed(
STM32F429_439xx
Ë&& !deföed(
STM32F401xx
Ë&& !deföed(
STM32F411xE
) && \

69 !
	$deföed
(
STM32F446xx
)

92 #ifde‡
STM32F40XX


93 
	#STM32F40_41xxx


	)

97 #ifde‡
STM32F427X


98 
	#STM32F427_437xx


	)

105 #i‡!
	`deföed
(
STM32F40_41xxx
Ë&& !deföed(
STM32F427_437xx
Ë&& !deföed(
STM32F429_439xx
Ë&& !deföed(
STM32F401xx
Ë&& !deföed(
STM32F411xE
) && \

106 !
	$deföed
(
STM32F446xx
)

110 #i‡!
	`deföed
 (
USE_STDPERIPH_DRIVER
)

126 #i‡
	`deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F411xE
)

127 #i‡!
	`deföed
 (
HSE_VALUE
)

128 
	#HSE_VALUE
 ((
uöt32_t
)25000000Ë

	)

130 #ñi‡
	`deföed
(
STM32F446xx
)

131 #i‡!
	`deföed
 (
HSE_VALUE
)

132 
	#HSE_VALUE
 ((
uöt32_t
)8000000Ë

	)

139 #i‡!
	`deföed
 (
HSE_STARTUP_TIMEOUT
)

140 
	#HSE_STARTUP_TIMEOUT
 ((
uöt16_t
)0x05000Ë

	)

143 #i‡!
	`deföed
 (
HSI_VALUE
)

144 
	#HSI_VALUE
 ((
uöt32_t
)16000000Ë

	)

150 
	#__STM32F4XX_STDPERIPH_VERSION_MAIN
 (0x01Ë

	)

151 
	#__STM32F4XX_STDPERIPH_VERSION_SUB1
 (0x05Ë

	)

152 
	#__STM32F4XX_STDPERIPH_VERSION_SUB2
 (0x00Ë

	)

153 
	#__STM32F4XX_STDPERIPH_VERSION_RC
 (0x00Ë

	)

154 
	#__STM32F4XX_STDPERIPH_VERSION
 ((
__STM32F4XX_STDPERIPH_VERSION_MAIN
 << 24)\

	)

155 |(
__STM32F4XX_STDPERIPH_VERSION_SUB1
 << 16)\

156 |(
__STM32F4XX_STDPERIPH_VERSION_SUB2
 << 8)\

157 |(
__STM32F4XX_STDPERIPH_VERSION_RC
))

170 
	#__CM4_REV
 0x0001

	)

171 
	#__MPU_PRESENT
 1

	)

172 
	#__NVIC_PRIO_BITS
 4

	)

173 
	#__Víd‹_SysTickC⁄fig
 0

	)

174 
	#__FPU_PRESENT
 1

	)

180 
	eIRQn


183 
N⁄MaskabÀI¡_IRQn
 = -14,

184 
Mem‹yM™agemít_IRQn
 = -12,

185 
BusFau…_IRQn
 = -11,

186 
UßgeFau…_IRQn
 = -10,

187 
SVCÆl_IRQn
 = -5,

188 
DebugM⁄ô‹_IRQn
 = -4,

189 
PídSV_IRQn
 = -2,

190 
SysTick_IRQn
 = -1,

192 
WWDG_IRQn
 = 0,

193 
PVD_IRQn
 = 1,

194 
TAMP_STAMP_IRQn
 = 2,

195 
RTC_WKUP_IRQn
 = 3,

196 
FLASH_IRQn
 = 4,

197 
RCC_IRQn
 = 5,

198 
EXTI0_IRQn
 = 6,

199 
EXTI1_IRQn
 = 7,

200 
EXTI2_IRQn
 = 8,

201 
EXTI3_IRQn
 = 9,

202 
EXTI4_IRQn
 = 10,

203 
DMA1_Såóm0_IRQn
 = 11,

204 
DMA1_Såóm1_IRQn
 = 12,

205 
DMA1_Såóm2_IRQn
 = 13,

206 
DMA1_Såóm3_IRQn
 = 14,

207 
DMA1_Såóm4_IRQn
 = 15,

208 
DMA1_Såóm5_IRQn
 = 16,

209 
DMA1_Såóm6_IRQn
 = 17,

210 
ADC_IRQn
 = 18,

212 #i‡
	`deföed
(
STM32F40_41xxx
)

213 
CAN1_TX_IRQn
 = 19,

214 
CAN1_RX0_IRQn
 = 20,

215 
CAN1_RX1_IRQn
 = 21,

216 
CAN1_SCE_IRQn
 = 22,

217 
EXTI9_5_IRQn
 = 23,

218 
TIM1_BRK_TIM9_IRQn
 = 24,

219 
TIM1_UP_TIM10_IRQn
 = 25,

220 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

221 
TIM1_CC_IRQn
 = 27,

222 
TIM2_IRQn
 = 28,

223 
TIM3_IRQn
 = 29,

224 
TIM4_IRQn
 = 30,

225 
I2C1_EV_IRQn
 = 31,

226 
I2C1_ER_IRQn
 = 32,

227 
I2C2_EV_IRQn
 = 33,

228 
I2C2_ER_IRQn
 = 34,

229 
SPI1_IRQn
 = 35,

230 
SPI2_IRQn
 = 36,

231 
USART1_IRQn
 = 37,

232 
USART2_IRQn
 = 38,

233 
USART3_IRQn
 = 39,

234 
EXTI15_10_IRQn
 = 40,

235 
RTC_Aœrm_IRQn
 = 41,

236 
OTG_FS_WKUP_IRQn
 = 42,

237 
TIM8_BRK_TIM12_IRQn
 = 43,

238 
TIM8_UP_TIM13_IRQn
 = 44,

239 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

240 
TIM8_CC_IRQn
 = 46,

241 
DMA1_Såóm7_IRQn
 = 47,

242 
FSMC_IRQn
 = 48,

243 
SDIO_IRQn
 = 49,

244 
TIM5_IRQn
 = 50,

245 
SPI3_IRQn
 = 51,

246 
UART4_IRQn
 = 52,

247 
UART5_IRQn
 = 53,

248 
TIM6_DAC_IRQn
 = 54,

249 
TIM7_IRQn
 = 55,

250 
DMA2_Såóm0_IRQn
 = 56,

251 
DMA2_Såóm1_IRQn
 = 57,

252 
DMA2_Såóm2_IRQn
 = 58,

253 
DMA2_Såóm3_IRQn
 = 59,

254 
DMA2_Såóm4_IRQn
 = 60,

255 
ETH_IRQn
 = 61,

256 
ETH_WKUP_IRQn
 = 62,

257 
CAN2_TX_IRQn
 = 63,

258 
CAN2_RX0_IRQn
 = 64,

259 
CAN2_RX1_IRQn
 = 65,

260 
CAN2_SCE_IRQn
 = 66,

261 
OTG_FS_IRQn
 = 67,

262 
DMA2_Såóm5_IRQn
 = 68,

263 
DMA2_Såóm6_IRQn
 = 69,

264 
DMA2_Såóm7_IRQn
 = 70,

265 
USART6_IRQn
 = 71,

266 
I2C3_EV_IRQn
 = 72,

267 
I2C3_ER_IRQn
 = 73,

268 
OTG_HS_EP1_OUT_IRQn
 = 74,

269 
OTG_HS_EP1_IN_IRQn
 = 75,

270 
OTG_HS_WKUP_IRQn
 = 76,

271 
OTG_HS_IRQn
 = 77,

272 
DCMI_IRQn
 = 78,

273 
CRYP_IRQn
 = 79,

274 
HASH_RNG_IRQn
 = 80,

275 
FPU_IRQn
 = 81

278 #i‡
	`deföed
(
STM32F427_437xx
)

279 
CAN1_TX_IRQn
 = 19,

280 
CAN1_RX0_IRQn
 = 20,

281 
CAN1_RX1_IRQn
 = 21,

282 
CAN1_SCE_IRQn
 = 22,

283 
EXTI9_5_IRQn
 = 23,

284 
TIM1_BRK_TIM9_IRQn
 = 24,

285 
TIM1_UP_TIM10_IRQn
 = 25,

286 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

287 
TIM1_CC_IRQn
 = 27,

288 
TIM2_IRQn
 = 28,

289 
TIM3_IRQn
 = 29,

290 
TIM4_IRQn
 = 30,

291 
I2C1_EV_IRQn
 = 31,

292 
I2C1_ER_IRQn
 = 32,

293 
I2C2_EV_IRQn
 = 33,

294 
I2C2_ER_IRQn
 = 34,

295 
SPI1_IRQn
 = 35,

296 
SPI2_IRQn
 = 36,

297 
USART1_IRQn
 = 37,

298 
USART2_IRQn
 = 38,

299 
USART3_IRQn
 = 39,

300 
EXTI15_10_IRQn
 = 40,

301 
RTC_Aœrm_IRQn
 = 41,

302 
OTG_FS_WKUP_IRQn
 = 42,

303 
TIM8_BRK_TIM12_IRQn
 = 43,

304 
TIM8_UP_TIM13_IRQn
 = 44,

305 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

306 
TIM8_CC_IRQn
 = 46,

307 
DMA1_Såóm7_IRQn
 = 47,

308 
FMC_IRQn
 = 48,

309 
SDIO_IRQn
 = 49,

310 
TIM5_IRQn
 = 50,

311 
SPI3_IRQn
 = 51,

312 
UART4_IRQn
 = 52,

313 
UART5_IRQn
 = 53,

314 
TIM6_DAC_IRQn
 = 54,

315 
TIM7_IRQn
 = 55,

316 
DMA2_Såóm0_IRQn
 = 56,

317 
DMA2_Såóm1_IRQn
 = 57,

318 
DMA2_Såóm2_IRQn
 = 58,

319 
DMA2_Såóm3_IRQn
 = 59,

320 
DMA2_Såóm4_IRQn
 = 60,

321 
ETH_IRQn
 = 61,

322 
ETH_WKUP_IRQn
 = 62,

323 
CAN2_TX_IRQn
 = 63,

324 
CAN2_RX0_IRQn
 = 64,

325 
CAN2_RX1_IRQn
 = 65,

326 
CAN2_SCE_IRQn
 = 66,

327 
OTG_FS_IRQn
 = 67,

328 
DMA2_Såóm5_IRQn
 = 68,

329 
DMA2_Såóm6_IRQn
 = 69,

330 
DMA2_Såóm7_IRQn
 = 70,

331 
USART6_IRQn
 = 71,

332 
I2C3_EV_IRQn
 = 72,

333 
I2C3_ER_IRQn
 = 73,

334 
OTG_HS_EP1_OUT_IRQn
 = 74,

335 
OTG_HS_EP1_IN_IRQn
 = 75,

336 
OTG_HS_WKUP_IRQn
 = 76,

337 
OTG_HS_IRQn
 = 77,

338 
DCMI_IRQn
 = 78,

339 
CRYP_IRQn
 = 79,

340 
HASH_RNG_IRQn
 = 80,

341 
FPU_IRQn
 = 81,

342 
UART7_IRQn
 = 82,

343 
UART8_IRQn
 = 83,

344 
SPI4_IRQn
 = 84,

345 
SPI5_IRQn
 = 85,

346 
SPI6_IRQn
 = 86,

347 
SAI1_IRQn
 = 87,

348 
DMA2D_IRQn
 = 90

351 #i‡
	`deföed
(
STM32F429_439xx
)

352 
CAN1_TX_IRQn
 = 19,

353 
CAN1_RX0_IRQn
 = 20,

354 
CAN1_RX1_IRQn
 = 21,

355 
CAN1_SCE_IRQn
 = 22,

356 
EXTI9_5_IRQn
 = 23,

357 
TIM1_BRK_TIM9_IRQn
 = 24,

358 
TIM1_UP_TIM10_IRQn
 = 25,

359 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

360 
TIM1_CC_IRQn
 = 27,

361 
TIM2_IRQn
 = 28,

362 
TIM3_IRQn
 = 29,

363 
TIM4_IRQn
 = 30,

364 
I2C1_EV_IRQn
 = 31,

365 
I2C1_ER_IRQn
 = 32,

366 
I2C2_EV_IRQn
 = 33,

367 
I2C2_ER_IRQn
 = 34,

368 
SPI1_IRQn
 = 35,

369 
SPI2_IRQn
 = 36,

370 
USART1_IRQn
 = 37,

371 
USART2_IRQn
 = 38,

372 
USART3_IRQn
 = 39,

373 
EXTI15_10_IRQn
 = 40,

374 
RTC_Aœrm_IRQn
 = 41,

375 
OTG_FS_WKUP_IRQn
 = 42,

376 
TIM8_BRK_TIM12_IRQn
 = 43,

377 
TIM8_UP_TIM13_IRQn
 = 44,

378 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

379 
TIM8_CC_IRQn
 = 46,

380 
DMA1_Såóm7_IRQn
 = 47,

381 
FMC_IRQn
 = 48,

382 
SDIO_IRQn
 = 49,

383 
TIM5_IRQn
 = 50,

384 
SPI3_IRQn
 = 51,

385 
UART4_IRQn
 = 52,

386 
UART5_IRQn
 = 53,

387 
TIM6_DAC_IRQn
 = 54,

388 
TIM7_IRQn
 = 55,

389 
DMA2_Såóm0_IRQn
 = 56,

390 
DMA2_Såóm1_IRQn
 = 57,

391 
DMA2_Såóm2_IRQn
 = 58,

392 
DMA2_Såóm3_IRQn
 = 59,

393 
DMA2_Såóm4_IRQn
 = 60,

394 
ETH_IRQn
 = 61,

395 
ETH_WKUP_IRQn
 = 62,

396 
CAN2_TX_IRQn
 = 63,

397 
CAN2_RX0_IRQn
 = 64,

398 
CAN2_RX1_IRQn
 = 65,

399 
CAN2_SCE_IRQn
 = 66,

400 
OTG_FS_IRQn
 = 67,

401 
DMA2_Såóm5_IRQn
 = 68,

402 
DMA2_Såóm6_IRQn
 = 69,

403 
DMA2_Såóm7_IRQn
 = 70,

404 
USART6_IRQn
 = 71,

405 
I2C3_EV_IRQn
 = 72,

406 
I2C3_ER_IRQn
 = 73,

407 
OTG_HS_EP1_OUT_IRQn
 = 74,

408 
OTG_HS_EP1_IN_IRQn
 = 75,

409 
OTG_HS_WKUP_IRQn
 = 76,

410 
OTG_HS_IRQn
 = 77,

411 
DCMI_IRQn
 = 78,

412 
CRYP_IRQn
 = 79,

413 
HASH_RNG_IRQn
 = 80,

414 
FPU_IRQn
 = 81,

415 
UART7_IRQn
 = 82,

416 
UART8_IRQn
 = 83,

417 
SPI4_IRQn
 = 84,

418 
SPI5_IRQn
 = 85,

419 
SPI6_IRQn
 = 86,

420 
SAI1_IRQn
 = 87,

421 
LTDC_IRQn
 = 88,

422 
LTDC_ER_IRQn
 = 89,

423 
DMA2D_IRQn
 = 90

426 #i‡
	`deföed
(
STM32F401xx
Ë|| deföed(
STM32F411xE
)

427 
EXTI9_5_IRQn
 = 23,

428 
TIM1_BRK_TIM9_IRQn
 = 24,

429 
TIM1_UP_TIM10_IRQn
 = 25,

430 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

431 
TIM1_CC_IRQn
 = 27,

432 
TIM2_IRQn
 = 28,

433 
TIM3_IRQn
 = 29,

434 
TIM4_IRQn
 = 30,

435 
I2C1_EV_IRQn
 = 31,

436 
I2C1_ER_IRQn
 = 32,

437 
I2C2_EV_IRQn
 = 33,

438 
I2C2_ER_IRQn
 = 34,

439 
SPI1_IRQn
 = 35,

440 
SPI2_IRQn
 = 36,

441 
USART1_IRQn
 = 37,

442 
USART2_IRQn
 = 38,

443 
EXTI15_10_IRQn
 = 40,

444 
RTC_Aœrm_IRQn
 = 41,

445 
OTG_FS_WKUP_IRQn
 = 42,

446 
DMA1_Såóm7_IRQn
 = 47,

447 
SDIO_IRQn
 = 49,

448 
TIM5_IRQn
 = 50,

449 
SPI3_IRQn
 = 51,

450 
DMA2_Såóm0_IRQn
 = 56,

451 
DMA2_Såóm1_IRQn
 = 57,

452 
DMA2_Såóm2_IRQn
 = 58,

453 
DMA2_Såóm3_IRQn
 = 59,

454 
DMA2_Såóm4_IRQn
 = 60,

455 
OTG_FS_IRQn
 = 67,

456 
DMA2_Såóm5_IRQn
 = 68,

457 
DMA2_Såóm6_IRQn
 = 69,

458 
DMA2_Såóm7_IRQn
 = 70,

459 
USART6_IRQn
 = 71,

460 
I2C3_EV_IRQn
 = 72,

461 
I2C3_ER_IRQn
 = 73,

462 
FPU_IRQn
 = 81,

463 #i‡
	`deföed
(
STM32F401xx
)

464 
SPI4_IRQn
 = 84

466 #i‡
	`deföed
(
STM32F411xE
)

467 
SPI4_IRQn
 = 84,

468 
SPI5_IRQn
 = 85

472 #i‡
	`deföed
(
STM32F446xx
)

473 
CAN1_TX_IRQn
 = 19,

474 
CAN1_RX0_IRQn
 = 20,

475 
CAN1_RX1_IRQn
 = 21,

476 
CAN1_SCE_IRQn
 = 22,

477 
EXTI9_5_IRQn
 = 23,

478 
TIM1_BRK_TIM9_IRQn
 = 24,

479 
TIM1_UP_TIM10_IRQn
 = 25,

480 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

481 
TIM1_CC_IRQn
 = 27,

482 
TIM2_IRQn
 = 28,

483 
TIM3_IRQn
 = 29,

484 
TIM4_IRQn
 = 30,

485 
I2C1_EV_IRQn
 = 31,

486 
I2C1_ER_IRQn
 = 32,

487 
I2C2_EV_IRQn
 = 33,

488 
I2C2_ER_IRQn
 = 34,

489 
SPI1_IRQn
 = 35,

490 
SPI2_IRQn
 = 36,

491 
USART1_IRQn
 = 37,

492 
USART2_IRQn
 = 38,

493 
USART3_IRQn
 = 39,

494 
EXTI15_10_IRQn
 = 40,

495 
RTC_Aœrm_IRQn
 = 41,

496 
OTG_FS_WKUP_IRQn
 = 42,

497 
TIM8_BRK_IRQn
 = 43,

498 
TIM8_BRK_TIM12_IRQn
 = 43,

499 
TIM8_UP_TIM13_IRQn
 = 44,

500 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

501 
DMA1_Såóm7_IRQn
 = 47,

502 
FMC_IRQn
 = 48,

503 
SDIO_IRQn
 = 49,

504 
TIM5_IRQn
 = 50,

505 
SPI3_IRQn
 = 51,

506 
UART4_IRQn
 = 52,

507 
UART5_IRQn
 = 53,

508 
TIM6_DAC_IRQn
 = 54,

509 
TIM7_IRQn
 = 55,

510 
DMA2_Såóm0_IRQn
 = 56,

511 
DMA2_Såóm1_IRQn
 = 57,

512 
DMA2_Såóm2_IRQn
 = 58,

513 
DMA2_Såóm3_IRQn
 = 59,

514 
DMA2_Såóm4_IRQn
 = 60,

515 
CAN2_TX_IRQn
 = 63,

516 
CAN2_RX0_IRQn
 = 64,

517 
CAN2_RX1_IRQn
 = 65,

518 
CAN2_SCE_IRQn
 = 66,

519 
OTG_FS_IRQn
 = 67,

520 
DMA2_Såóm5_IRQn
 = 68,

521 
DMA2_Såóm6_IRQn
 = 69,

522 
DMA2_Såóm7_IRQn
 = 70,

523 
USART6_IRQn
 = 71,

524 
I2C3_EV_IRQn
 = 72,

525 
I2C3_ER_IRQn
 = 73,

526 
OTG_HS_EP1_OUT_IRQn
 = 74,

527 
OTG_HS_EP1_IN_IRQn
 = 75,

528 
OTG_HS_WKUP_IRQn
 = 76,

529 
OTG_HS_IRQn
 = 77,

530 
DCMI_IRQn
 = 78,

531 
FPU_IRQn
 = 81,

532 
SPI4_IRQn
 = 84,

533 
SAI1_IRQn
 = 87,

534 
SAI2_IRQn
 = 91,

535 
QUADSPI_IRQn
 = 92,

536 
CEC_IRQn
 = 93,

537 
SPDIF_RX_IRQn
 = 94,

538 
FMPI2C1_EV_IRQn
 = 95,

539 
FMPI2C1_ER_IRQn
 = 96

541 } 
	tIRQn_Ty≥
;

547 
	~"c‹e_cm4.h
"

548 
	~"sy°em_°m32f4xx.h
"

549 
	~<°döt.h
>

555 
öt32_t
 
	ts32
;

556 
öt16_t
 
	ts16
;

557 
öt8_t
 
	ts8
;

559 c⁄° 
	töt32_t
 
	tsc32
;

560 c⁄° 
	töt16_t
 
	tsc16
;

561 c⁄° 
	töt8_t
 
	tsc8
;

563 
__IO
 
	töt32_t
 
	tvs32
;

564 
__IO
 
	töt16_t
 
	tvs16
;

565 
__IO
 
	töt8_t
 
	tvs8
;

567 
__I
 
	töt32_t
 
	tvsc32
;

568 
__I
 
	töt16_t
 
	tvsc16
;

569 
__I
 
	töt8_t
 
	tvsc8
;

571 
uöt32_t
 
	tu32
;

572 
uöt16_t
 
	tu16
;

573 
uöt8_t
 
	tu8
;

575 c⁄° 
	tuöt32_t
 
	tuc32
;

576 c⁄° 
	tuöt16_t
 
	tuc16
;

577 c⁄° 
	tuöt8_t
 
	tuc8
;

579 
__IO
 
	tuöt32_t
 
	tvu32
;

580 
__IO
 
	tuöt16_t
 
	tvu16
;

581 
__IO
 
	tuöt8_t
 
	tvu8
;

583 
__I
 
	tuöt32_t
 
	tvuc32
;

584 
__I
 
	tuöt16_t
 
	tvuc16
;

585 
__I
 
	tuöt8_t
 
	tvuc8
;

587 íum {
RESET
 = 0, 
SET
 = !RESET} 
	tFœgSètus
, 
	tITSètus
;

589 íum {
DISABLE
 = 0, 
ENABLE
 = !DISABLE} 
	tFun˘i⁄ÆSèã
;

590 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

592 íum {
ERROR
 = 0, 
SUCCESS
 = !ERROR} 
	tEº‹Sètus
;

608 
__IO
 
uöt32_t
 
SR
;

609 
__IO
 
uöt32_t
 
CR1
;

610 
__IO
 
uöt32_t
 
CR2
;

611 
__IO
 
uöt32_t
 
SMPR1
;

612 
__IO
 
uöt32_t
 
SMPR2
;

613 
__IO
 
uöt32_t
 
JOFR1
;

614 
__IO
 
uöt32_t
 
JOFR2
;

615 
__IO
 
uöt32_t
 
JOFR3
;

616 
__IO
 
uöt32_t
 
JOFR4
;

617 
__IO
 
uöt32_t
 
HTR
;

618 
__IO
 
uöt32_t
 
LTR
;

619 
__IO
 
uöt32_t
 
SQR1
;

620 
__IO
 
uöt32_t
 
SQR2
;

621 
__IO
 
uöt32_t
 
SQR3
;

622 
__IO
 
uöt32_t
 
JSQR
;

623 
__IO
 
uöt32_t
 
JDR1
;

624 
__IO
 
uöt32_t
 
JDR2
;

625 
__IO
 
uöt32_t
 
JDR3
;

626 
__IO
 
uöt32_t
 
JDR4
;

627 
__IO
 
uöt32_t
 
DR
;

628 } 
	tADC_Ty≥Def
;

632 
__IO
 
uöt32_t
 
CSR
;

633 
__IO
 
uöt32_t
 
CCR
;

634 
__IO
 
uöt32_t
 
CDR
;

636 } 
	tADC_Comm⁄_Ty≥Def
;

645 
__IO
 
uöt32_t
 
TIR
;

646 
__IO
 
uöt32_t
 
TDTR
;

647 
__IO
 
uöt32_t
 
TDLR
;

648 
__IO
 
uöt32_t
 
TDHR
;

649 } 
	tCAN_TxMaûBox_Ty≥Def
;

657 
__IO
 
uöt32_t
 
RIR
;

658 
__IO
 
uöt32_t
 
RDTR
;

659 
__IO
 
uöt32_t
 
RDLR
;

660 
__IO
 
uöt32_t
 
RDHR
;

661 } 
	tCAN_FIFOMaûBox_Ty≥Def
;

669 
__IO
 
uöt32_t
 
FR1
;

670 
__IO
 
uöt32_t
 
FR2
;

671 } 
	tCAN_FûãrRegi°î_Ty≥Def
;

679 
__IO
 
uöt32_t
 
MCR
;

680 
__IO
 
uöt32_t
 
MSR
;

681 
__IO
 
uöt32_t
 
TSR
;

682 
__IO
 
uöt32_t
 
RF0R
;

683 
__IO
 
uöt32_t
 
RF1R
;

684 
__IO
 
uöt32_t
 
IER
;

685 
__IO
 
uöt32_t
 
ESR
;

686 
__IO
 
uöt32_t
 
BTR
;

687 
uöt32_t
 
RESERVED0
[88];

688 
CAN_TxMaûBox_Ty≥Def
 
sTxMaûBox
[3];

689 
CAN_FIFOMaûBox_Ty≥Def
 
sFIFOMaûBox
[2];

690 
uöt32_t
 
RESERVED1
[12];

691 
__IO
 
uöt32_t
 
FMR
;

692 
__IO
 
uöt32_t
 
FM1R
;

693 
uöt32_t
 
RESERVED2
;

694 
__IO
 
uöt32_t
 
FS1R
;

695 
uöt32_t
 
RESERVED3
;

696 
__IO
 
uöt32_t
 
FFA1R
;

697 
uöt32_t
 
RESERVED4
;

698 
__IO
 
uöt32_t
 
FA1R
;

699 
uöt32_t
 
RESERVED5
[8];

700 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[28];

701 } 
	tCAN_Ty≥Def
;

703 #i‡
	`deföed
(
STM32F446xx
)

709 
__IO
 
uöt32_t
 
CR
;

710 
__IO
 
uöt32_t
 
CFGR
;

711 
__IO
 
uöt32_t
 
TXDR
;

712 
__IO
 
uöt32_t
 
RXDR
;

713 
__IO
 
uöt32_t
 
ISR
;

714 
__IO
 
uöt32_t
 
IER
;

715 }
	tCEC_Ty≥Def
;

724 
__IO
 
uöt32_t
 
DR
;

725 
__IO
 
uöt8_t
 
IDR
;

726 
uöt8_t
 
RESERVED0
;

727 
uöt16_t
 
RESERVED1
;

728 
__IO
 
uöt32_t
 
CR
;

729 } 
	tCRC_Ty≥Def
;

737 
__IO
 
uöt32_t
 
CR
;

738 
__IO
 
uöt32_t
 
SWTRIGR
;

739 
__IO
 
uöt32_t
 
DHR12R1
;

740 
__IO
 
uöt32_t
 
DHR12L1
;

741 
__IO
 
uöt32_t
 
DHR8R1
;

742 
__IO
 
uöt32_t
 
DHR12R2
;

743 
__IO
 
uöt32_t
 
DHR12L2
;

744 
__IO
 
uöt32_t
 
DHR8R2
;

745 
__IO
 
uöt32_t
 
DHR12RD
;

746 
__IO
 
uöt32_t
 
DHR12LD
;

747 
__IO
 
uöt32_t
 
DHR8RD
;

748 
__IO
 
uöt32_t
 
DOR1
;

749 
__IO
 
uöt32_t
 
DOR2
;

750 
__IO
 
uöt32_t
 
SR
;

751 } 
	tDAC_Ty≥Def
;

759 
__IO
 
uöt32_t
 
IDCODE
;

760 
__IO
 
uöt32_t
 
CR
;

761 
__IO
 
uöt32_t
 
APB1FZ
;

762 
__IO
 
uöt32_t
 
APB2FZ
;

763 }
	tDBGMCU_Ty≥Def
;

771 
__IO
 
uöt32_t
 
CR
;

772 
__IO
 
uöt32_t
 
SR
;

773 
__IO
 
uöt32_t
 
RISR
;

774 
__IO
 
uöt32_t
 
IER
;

775 
__IO
 
uöt32_t
 
MISR
;

776 
__IO
 
uöt32_t
 
ICR
;

777 
__IO
 
uöt32_t
 
ESCR
;

778 
__IO
 
uöt32_t
 
ESUR
;

779 
__IO
 
uöt32_t
 
CWSTRTR
;

780 
__IO
 
uöt32_t
 
CWSIZER
;

781 
__IO
 
uöt32_t
 
DR
;

782 } 
	tDCMI_Ty≥Def
;

790 
__IO
 
uöt32_t
 
CR
;

791 
__IO
 
uöt32_t
 
NDTR
;

792 
__IO
 
uöt32_t
 
PAR
;

793 
__IO
 
uöt32_t
 
M0AR
;

794 
__IO
 
uöt32_t
 
M1AR
;

795 
__IO
 
uöt32_t
 
FCR
;

796 } 
	tDMA_Såóm_Ty≥Def
;

800 
__IO
 
uöt32_t
 
LISR
;

801 
__IO
 
uöt32_t
 
HISR
;

802 
__IO
 
uöt32_t
 
LIFCR
;

803 
__IO
 
uöt32_t
 
HIFCR
;

804 } 
	tDMA_Ty≥Def
;

812 
__IO
 
uöt32_t
 
CR
;

813 
__IO
 
uöt32_t
 
ISR
;

814 
__IO
 
uöt32_t
 
IFCR
;

815 
__IO
 
uöt32_t
 
FGMAR
;

816 
__IO
 
uöt32_t
 
FGOR
;

817 
__IO
 
uöt32_t
 
BGMAR
;

818 
__IO
 
uöt32_t
 
BGOR
;

819 
__IO
 
uöt32_t
 
FGPFCCR
;

820 
__IO
 
uöt32_t
 
FGCOLR
;

821 
__IO
 
uöt32_t
 
BGPFCCR
;

822 
__IO
 
uöt32_t
 
BGCOLR
;

823 
__IO
 
uöt32_t
 
FGCMAR
;

824 
__IO
 
uöt32_t
 
BGCMAR
;

825 
__IO
 
uöt32_t
 
OPFCCR
;

826 
__IO
 
uöt32_t
 
OCOLR
;

827 
__IO
 
uöt32_t
 
OMAR
;

828 
__IO
 
uöt32_t
 
OOR
;

829 
__IO
 
uöt32_t
 
NLR
;

830 
__IO
 
uöt32_t
 
LWR
;

831 
__IO
 
uöt32_t
 
AMTCR
;

832 
uöt32_t
 
RESERVED
[236];

833 
__IO
 
uöt32_t
 
FGCLUT
[256];

834 
__IO
 
uöt32_t
 
BGCLUT
[256];

835 } 
	tDMA2D_Ty≥Def
;

843 
__IO
 
uöt32_t
 
MACCR
;

844 
__IO
 
uöt32_t
 
MACFFR
;

845 
__IO
 
uöt32_t
 
MACHTHR
;

846 
__IO
 
uöt32_t
 
MACHTLR
;

847 
__IO
 
uöt32_t
 
MACMIIAR
;

848 
__IO
 
uöt32_t
 
MACMIIDR
;

849 
__IO
 
uöt32_t
 
MACFCR
;

850 
__IO
 
uöt32_t
 
MACVLANTR
;

851 
uöt32_t
 
RESERVED0
[2];

852 
__IO
 
uöt32_t
 
MACRWUFFR
;

853 
__IO
 
uöt32_t
 
MACPMTCSR
;

854 
uöt32_t
 
RESERVED1
[2];

855 
__IO
 
uöt32_t
 
MACSR
;

856 
__IO
 
uöt32_t
 
MACIMR
;

857 
__IO
 
uöt32_t
 
MACA0HR
;

858 
__IO
 
uöt32_t
 
MACA0LR
;

859 
__IO
 
uöt32_t
 
MACA1HR
;

860 
__IO
 
uöt32_t
 
MACA1LR
;

861 
__IO
 
uöt32_t
 
MACA2HR
;

862 
__IO
 
uöt32_t
 
MACA2LR
;

863 
__IO
 
uöt32_t
 
MACA3HR
;

864 
__IO
 
uöt32_t
 
MACA3LR
;

865 
uöt32_t
 
RESERVED2
[40];

866 
__IO
 
uöt32_t
 
MMCCR
;

867 
__IO
 
uöt32_t
 
MMCRIR
;

868 
__IO
 
uöt32_t
 
MMCTIR
;

869 
__IO
 
uöt32_t
 
MMCRIMR
;

870 
__IO
 
uöt32_t
 
MMCTIMR
;

871 
uöt32_t
 
RESERVED3
[14];

872 
__IO
 
uöt32_t
 
MMCTGFSCCR
;

873 
__IO
 
uöt32_t
 
MMCTGFMSCCR
;

874 
uöt32_t
 
RESERVED4
[5];

875 
__IO
 
uöt32_t
 
MMCTGFCR
;

876 
uöt32_t
 
RESERVED5
[10];

877 
__IO
 
uöt32_t
 
MMCRFCECR
;

878 
__IO
 
uöt32_t
 
MMCRFAECR
;

879 
uöt32_t
 
RESERVED6
[10];

880 
__IO
 
uöt32_t
 
MMCRGUFCR
;

881 
uöt32_t
 
RESERVED7
[334];

882 
__IO
 
uöt32_t
 
PTPTSCR
;

883 
__IO
 
uöt32_t
 
PTPSSIR
;

884 
__IO
 
uöt32_t
 
PTPTSHR
;

885 
__IO
 
uöt32_t
 
PTPTSLR
;

886 
__IO
 
uöt32_t
 
PTPTSHUR
;

887 
__IO
 
uöt32_t
 
PTPTSLUR
;

888 
__IO
 
uöt32_t
 
PTPTSAR
;

889 
__IO
 
uöt32_t
 
PTPTTHR
;

890 
__IO
 
uöt32_t
 
PTPTTLR
;

891 
__IO
 
uöt32_t
 
RESERVED8
;

892 
__IO
 
uöt32_t
 
PTPTSSR
;

893 
uöt32_t
 
RESERVED9
[565];

894 
__IO
 
uöt32_t
 
DMABMR
;

895 
__IO
 
uöt32_t
 
DMATPDR
;

896 
__IO
 
uöt32_t
 
DMARPDR
;

897 
__IO
 
uöt32_t
 
DMARDLAR
;

898 
__IO
 
uöt32_t
 
DMATDLAR
;

899 
__IO
 
uöt32_t
 
DMASR
;

900 
__IO
 
uöt32_t
 
DMAOMR
;

901 
__IO
 
uöt32_t
 
DMAIER
;

902 
__IO
 
uöt32_t
 
DMAMFBOCR
;

903 
__IO
 
uöt32_t
 
DMARSWTR
;

904 
uöt32_t
 
RESERVED10
[8];

905 
__IO
 
uöt32_t
 
DMACHTDR
;

906 
__IO
 
uöt32_t
 
DMACHRDR
;

907 
__IO
 
uöt32_t
 
DMACHTBAR
;

908 
__IO
 
uöt32_t
 
DMACHRBAR
;

909 } 
	tETH_Ty≥Def
;

917 
__IO
 
uöt32_t
 
IMR
;

918 
__IO
 
uöt32_t
 
EMR
;

919 
__IO
 
uöt32_t
 
RTSR
;

920 
__IO
 
uöt32_t
 
FTSR
;

921 
__IO
 
uöt32_t
 
SWIER
;

922 
__IO
 
uöt32_t
 
PR
;

923 } 
	tEXTI_Ty≥Def
;

931 
__IO
 
uöt32_t
 
ACR
;

932 
__IO
 
uöt32_t
 
KEYR
;

933 
__IO
 
uöt32_t
 
OPTKEYR
;

934 
__IO
 
uöt32_t
 
SR
;

935 
__IO
 
uöt32_t
 
CR
;

936 
__IO
 
uöt32_t
 
OPTCR
;

937 
__IO
 
uöt32_t
 
OPTCR1
;

938 } 
	tFLASH_Ty≥Def
;

940 #i‡
	`deföed
(
STM32F40_41xxx
)

947 
__IO
 
uöt32_t
 
BTCR
[8];

948 } 
	tFSMC_B™k1_Ty≥Def
;

956 
__IO
 
uöt32_t
 
BWTR
[7];

957 } 
	tFSMC_B™k1E_Ty≥Def
;

965 
__IO
 
uöt32_t
 
PCR2
;

966 
__IO
 
uöt32_t
 
SR2
;

967 
__IO
 
uöt32_t
 
PMEM2
;

968 
__IO
 
uöt32_t
 
PATT2
;

969 
uöt32_t
 
RESERVED0
;

970 
__IO
 
uöt32_t
 
ECCR2
;

971 } 
	tFSMC_B™k2_Ty≥Def
;

979 
__IO
 
uöt32_t
 
PCR3
;

980 
__IO
 
uöt32_t
 
SR3
;

981 
__IO
 
uöt32_t
 
PMEM3
;

982 
__IO
 
uöt32_t
 
PATT3
;

983 
uöt32_t
 
RESERVED0
;

984 
__IO
 
uöt32_t
 
ECCR3
;

985 } 
	tFSMC_B™k3_Ty≥Def
;

993 
__IO
 
uöt32_t
 
PCR4
;

994 
__IO
 
uöt32_t
 
SR4
;

995 
__IO
 
uöt32_t
 
PMEM4
;

996 
__IO
 
uöt32_t
 
PATT4
;

997 
__IO
 
uöt32_t
 
PIO4
;

998 } 
	tFSMC_B™k4_Ty≥Def
;

1001 #i‡
	`deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
)

1008 
__IO
 
uöt32_t
 
BTCR
[8];

1009 } 
	tFMC_B™k1_Ty≥Def
;

1017 
__IO
 
uöt32_t
 
BWTR
[7];

1018 } 
	tFMC_B™k1E_Ty≥Def
;

1026 
__IO
 
uöt32_t
 
PCR2
;

1027 
__IO
 
uöt32_t
 
SR2
;

1028 
__IO
 
uöt32_t
 
PMEM2
;

1029 
__IO
 
uöt32_t
 
PATT2
;

1030 
uöt32_t
 
RESERVED0
;

1031 
__IO
 
uöt32_t
 
ECCR2
;

1032 } 
	tFMC_B™k2_Ty≥Def
;

1040 
__IO
 
uöt32_t
 
PCR3
;

1041 
__IO
 
uöt32_t
 
SR3
;

1042 
__IO
 
uöt32_t
 
PMEM3
;

1043 
__IO
 
uöt32_t
 
PATT3
;

1044 
uöt32_t
 
RESERVED0
;

1045 
__IO
 
uöt32_t
 
ECCR3
;

1046 } 
	tFMC_B™k3_Ty≥Def
;

1054 
__IO
 
uöt32_t
 
PCR4
;

1055 
__IO
 
uöt32_t
 
SR4
;

1056 
__IO
 
uöt32_t
 
PMEM4
;

1057 
__IO
 
uöt32_t
 
PATT4
;

1058 
__IO
 
uöt32_t
 
PIO4
;

1059 } 
	tFMC_B™k4_Ty≥Def
;

1067 
__IO
 
uöt32_t
 
SDCR
[2];

1068 
__IO
 
uöt32_t
 
SDTR
[2];

1069 
__IO
 
uöt32_t
 
SDCMR
;

1070 
__IO
 
uöt32_t
 
SDRTR
;

1071 
__IO
 
uöt32_t
 
SDSR
;

1072 } 
	tFMC_B™k5_6_Ty≥Def
;

1081 
__IO
 
uöt32_t
 
MODER
;

1082 
__IO
 
uöt32_t
 
OTYPER
;

1083 
__IO
 
uöt32_t
 
OSPEEDR
;

1084 
__IO
 
uöt32_t
 
PUPDR
;

1085 
__IO
 
uöt32_t
 
IDR
;

1086 
__IO
 
uöt32_t
 
ODR
;

1087 
__IO
 
uöt16_t
 
BSRRL
;

1088 
__IO
 
uöt16_t
 
BSRRH
;

1089 
__IO
 
uöt32_t
 
LCKR
;

1090 
__IO
 
uöt32_t
 
AFR
[2];

1091 } 
	tGPIO_Ty≥Def
;

1099 
__IO
 
uöt32_t
 
MEMRMP
;

1100 
__IO
 
uöt32_t
 
PMC
;

1101 
__IO
 
uöt32_t
 
EXTICR
[4];

1102 
uöt32_t
 
RESERVED
[2];

1103 
__IO
 
uöt32_t
 
CMPCR
;

1104 } 
	tSYSCFG_Ty≥Def
;

1112 
__IO
 
uöt16_t
 
CR1
;

1113 
uöt16_t
 
RESERVED0
;

1114 
__IO
 
uöt16_t
 
CR2
;

1115 
uöt16_t
 
RESERVED1
;

1116 
__IO
 
uöt16_t
 
OAR1
;

1117 
uöt16_t
 
RESERVED2
;

1118 
__IO
 
uöt16_t
 
OAR2
;

1119 
uöt16_t
 
RESERVED3
;

1120 
__IO
 
uöt16_t
 
DR
;

1121 
uöt16_t
 
RESERVED4
;

1122 
__IO
 
uöt16_t
 
SR1
;

1123 
uöt16_t
 
RESERVED5
;

1124 
__IO
 
uöt16_t
 
SR2
;

1125 
uöt16_t
 
RESERVED6
;

1126 
__IO
 
uöt16_t
 
CCR
;

1127 
uöt16_t
 
RESERVED7
;

1128 
__IO
 
uöt16_t
 
TRISE
;

1129 
uöt16_t
 
RESERVED8
;

1130 
__IO
 
uöt16_t
 
FLTR
;

1131 
uöt16_t
 
RESERVED9
;

1132 } 
	tI2C_Ty≥Def
;

1134 #i‡
	`deföed
(
STM32F446xx
)

1141 
__IO
 
uöt32_t
 
CR1
;

1142 
__IO
 
uöt32_t
 
CR2
;

1143 
__IO
 
uöt32_t
 
OAR1
;

1144 
__IO
 
uöt32_t
 
OAR2
;

1145 
__IO
 
uöt32_t
 
TIMINGR
;

1146 
__IO
 
uöt32_t
 
TIMEOUTR
;

1147 
__IO
 
uöt32_t
 
ISR
;

1148 
__IO
 
uöt32_t
 
ICR
;

1149 
__IO
 
uöt32_t
 
PECR
;

1150 
__IO
 
uöt32_t
 
RXDR
;

1151 
__IO
 
uöt32_t
 
TXDR
;

1152 }
	tFMPI2C_Ty≥Def
;

1161 
__IO
 
uöt32_t
 
KR
;

1162 
__IO
 
uöt32_t
 
PR
;

1163 
__IO
 
uöt32_t
 
RLR
;

1164 
__IO
 
uöt32_t
 
SR
;

1165 } 
	tIWDG_Ty≥Def
;

1173 
uöt32_t
 
RESERVED0
[2];

1174 
__IO
 
uöt32_t
 
SSCR
;

1175 
__IO
 
uöt32_t
 
BPCR
;

1176 
__IO
 
uöt32_t
 
AWCR
;

1177 
__IO
 
uöt32_t
 
TWCR
;

1178 
__IO
 
uöt32_t
 
GCR
;

1179 
uöt32_t
 
RESERVED1
[2];

1180 
__IO
 
uöt32_t
 
SRCR
;

1181 
uöt32_t
 
RESERVED2
[1];

1182 
__IO
 
uöt32_t
 
BCCR
;

1183 
uöt32_t
 
RESERVED3
[1];

1184 
__IO
 
uöt32_t
 
IER
;

1185 
__IO
 
uöt32_t
 
ISR
;

1186 
__IO
 
uöt32_t
 
ICR
;

1187 
__IO
 
uöt32_t
 
LIPCR
;

1188 
__IO
 
uöt32_t
 
CPSR
;

1189 
__IO
 
uöt32_t
 
CDSR
;

1190 } 
	tLTDC_Ty≥Def
;

1198 
__IO
 
uöt32_t
 
CR
;

1199 
__IO
 
uöt32_t
 
WHPCR
;

1200 
__IO
 
uöt32_t
 
WVPCR
;

1201 
__IO
 
uöt32_t
 
CKCR
;

1202 
__IO
 
uöt32_t
 
PFCR
;

1203 
__IO
 
uöt32_t
 
CACR
;

1204 
__IO
 
uöt32_t
 
DCCR
;

1205 
__IO
 
uöt32_t
 
BFCR
;

1206 
uöt32_t
 
RESERVED0
[2];

1207 
__IO
 
uöt32_t
 
CFBAR
;

1208 
__IO
 
uöt32_t
 
CFBLR
;

1209 
__IO
 
uöt32_t
 
CFBLNR
;

1210 
uöt32_t
 
RESERVED1
[3];

1211 
__IO
 
uöt32_t
 
CLUTWR
;

1213 } 
	tLTDC_Layî_Ty≥Def
;

1221 
__IO
 
uöt32_t
 
CR
;

1222 
__IO
 
uöt32_t
 
CSR
;

1223 } 
	tPWR_Ty≥Def
;

1231 
__IO
 
uöt32_t
 
CR
;

1232 
__IO
 
uöt32_t
 
PLLCFGR
;

1233 
__IO
 
uöt32_t
 
CFGR
;

1234 
__IO
 
uöt32_t
 
CIR
;

1235 
__IO
 
uöt32_t
 
AHB1RSTR
;

1236 
__IO
 
uöt32_t
 
AHB2RSTR
;

1237 
__IO
 
uöt32_t
 
AHB3RSTR
;

1238 
uöt32_t
 
RESERVED0
;

1239 
__IO
 
uöt32_t
 
APB1RSTR
;

1240 
__IO
 
uöt32_t
 
APB2RSTR
;

1241 
uöt32_t
 
RESERVED1
[2];

1242 
__IO
 
uöt32_t
 
AHB1ENR
;

1243 
__IO
 
uöt32_t
 
AHB2ENR
;

1244 
__IO
 
uöt32_t
 
AHB3ENR
;

1245 
uöt32_t
 
RESERVED2
;

1246 
__IO
 
uöt32_t
 
APB1ENR
;

1247 
__IO
 
uöt32_t
 
APB2ENR
;

1248 
uöt32_t
 
RESERVED3
[2];

1249 
__IO
 
uöt32_t
 
AHB1LPENR
;

1250 
__IO
 
uöt32_t
 
AHB2LPENR
;

1251 
__IO
 
uöt32_t
 
AHB3LPENR
;

1252 
uöt32_t
 
RESERVED4
;

1253 
__IO
 
uöt32_t
 
APB1LPENR
;

1254 
__IO
 
uöt32_t
 
APB2LPENR
;

1255 
uöt32_t
 
RESERVED5
[2];

1256 
__IO
 
uöt32_t
 
BDCR
;

1257 
__IO
 
uöt32_t
 
CSR
;

1258 
uöt32_t
 
RESERVED6
[2];

1259 
__IO
 
uöt32_t
 
SSCGR
;

1260 
__IO
 
uöt32_t
 
PLLI2SCFGR
;

1261 
__IO
 
uöt32_t
 
PLLSAICFGR
;

1262 
__IO
 
uöt32_t
 
DCKCFGR
;

1263 
__IO
 
uöt32_t
 
CKGATENR
;

1264 
__IO
 
uöt32_t
 
DCKCFGR2
;

1266 } 
	tRCC_Ty≥Def
;

1274 
__IO
 
uöt32_t
 
TR
;

1275 
__IO
 
uöt32_t
 
DR
;

1276 
__IO
 
uöt32_t
 
CR
;

1277 
__IO
 
uöt32_t
 
ISR
;

1278 
__IO
 
uöt32_t
 
PRER
;

1279 
__IO
 
uöt32_t
 
WUTR
;

1280 
__IO
 
uöt32_t
 
CALIBR
;

1281 
__IO
 
uöt32_t
 
ALRMAR
;

1282 
__IO
 
uöt32_t
 
ALRMBR
;

1283 
__IO
 
uöt32_t
 
WPR
;

1284 
__IO
 
uöt32_t
 
SSR
;

1285 
__IO
 
uöt32_t
 
SHIFTR
;

1286 
__IO
 
uöt32_t
 
TSTR
;

1287 
__IO
 
uöt32_t
 
TSDR
;

1288 
__IO
 
uöt32_t
 
TSSSR
;

1289 
__IO
 
uöt32_t
 
CALR
;

1290 
__IO
 
uöt32_t
 
TAFCR
;

1291 
__IO
 
uöt32_t
 
ALRMASSR
;

1292 
__IO
 
uöt32_t
 
ALRMBSSR
;

1293 
uöt32_t
 
RESERVED7
;

1294 
__IO
 
uöt32_t
 
BKP0R
;

1295 
__IO
 
uöt32_t
 
BKP1R
;

1296 
__IO
 
uöt32_t
 
BKP2R
;

1297 
__IO
 
uöt32_t
 
BKP3R
;

1298 
__IO
 
uöt32_t
 
BKP4R
;

1299 
__IO
 
uöt32_t
 
BKP5R
;

1300 
__IO
 
uöt32_t
 
BKP6R
;

1301 
__IO
 
uöt32_t
 
BKP7R
;

1302 
__IO
 
uöt32_t
 
BKP8R
;

1303 
__IO
 
uöt32_t
 
BKP9R
;

1304 
__IO
 
uöt32_t
 
BKP10R
;

1305 
__IO
 
uöt32_t
 
BKP11R
;

1306 
__IO
 
uöt32_t
 
BKP12R
;

1307 
__IO
 
uöt32_t
 
BKP13R
;

1308 
__IO
 
uöt32_t
 
BKP14R
;

1309 
__IO
 
uöt32_t
 
BKP15R
;

1310 
__IO
 
uöt32_t
 
BKP16R
;

1311 
__IO
 
uöt32_t
 
BKP17R
;

1312 
__IO
 
uöt32_t
 
BKP18R
;

1313 
__IO
 
uöt32_t
 
BKP19R
;

1314 } 
	tRTC_Ty≥Def
;

1323 
__IO
 
uöt32_t
 
GCR
;

1324 } 
	tSAI_Ty≥Def
;

1328 
__IO
 
uöt32_t
 
CR1
;

1329 
__IO
 
uöt32_t
 
CR2
;

1330 
__IO
 
uöt32_t
 
FRCR
;

1331 
__IO
 
uöt32_t
 
SLOTR
;

1332 
__IO
 
uöt32_t
 
IMR
;

1333 
__IO
 
uöt32_t
 
SR
;

1334 
__IO
 
uöt32_t
 
CLRFR
;

1335 
__IO
 
uöt32_t
 
DR
;

1336 } 
	tSAI_Block_Ty≥Def
;

1344 
__IO
 
uöt32_t
 
POWER
;

1345 
__IO
 
uöt32_t
 
CLKCR
;

1346 
__IO
 
uöt32_t
 
ARG
;

1347 
__IO
 
uöt32_t
 
CMD
;

1348 
__I
 
uöt32_t
 
RESPCMD
;

1349 
__I
 
uöt32_t
 
RESP1
;

1350 
__I
 
uöt32_t
 
RESP2
;

1351 
__I
 
uöt32_t
 
RESP3
;

1352 
__I
 
uöt32_t
 
RESP4
;

1353 
__IO
 
uöt32_t
 
DTIMER
;

1354 
__IO
 
uöt32_t
 
DLEN
;

1355 
__IO
 
uöt32_t
 
DCTRL
;

1356 
__I
 
uöt32_t
 
DCOUNT
;

1357 
__I
 
uöt32_t
 
STA
;

1358 
__IO
 
uöt32_t
 
ICR
;

1359 
__IO
 
uöt32_t
 
MASK
;

1360 
uöt32_t
 
RESERVED0
[2];

1361 
__I
 
uöt32_t
 
FIFOCNT
;

1362 
uöt32_t
 
RESERVED1
[13];

1363 
__IO
 
uöt32_t
 
FIFO
;

1364 } 
	tSDIO_Ty≥Def
;

1372 
__IO
 
uöt16_t
 
CR1
;

1373 
uöt16_t
 
RESERVED0
;

1374 
__IO
 
uöt16_t
 
CR2
;

1375 
uöt16_t
 
RESERVED1
;

1376 
__IO
 
uöt16_t
 
SR
;

1377 
uöt16_t
 
RESERVED2
;

1378 
__IO
 
uöt16_t
 
DR
;

1379 
uöt16_t
 
RESERVED3
;

1380 
__IO
 
uöt16_t
 
CRCPR
;

1381 
uöt16_t
 
RESERVED4
;

1382 
__IO
 
uöt16_t
 
RXCRCR
;

1383 
uöt16_t
 
RESERVED5
;

1384 
__IO
 
uöt16_t
 
TXCRCR
;

1385 
uöt16_t
 
RESERVED6
;

1386 
__IO
 
uöt16_t
 
I2SCFGR
;

1387 
uöt16_t
 
RESERVED7
;

1388 
__IO
 
uöt16_t
 
I2SPR
;

1389 
uöt16_t
 
RESERVED8
;

1390 } 
	tSPI_Ty≥Def
;

1392 #i‡
	`deföed
(
STM32F446xx
)

1398 
__IO
 
uöt32_t
 
CR
;

1399 
__IO
 
uöt16_t
 
IMR
;

1400 
uöt16_t
 
RESERVED0
;

1401 
__IO
 
uöt32_t
 
SR
;

1402 
__IO
 
uöt16_t
 
IFCR
;

1403 
uöt16_t
 
RESERVED1
;

1404 
__IO
 
uöt32_t
 
DR
;

1405 
__IO
 
uöt32_t
 
CSR
;

1406 
__IO
 
uöt32_t
 
DIR
;

1407 
uöt16_t
 
RESERVED2
;

1408 } 
	tSPDIFRX_Ty≥Def
;

1415 
__IO
 
uöt32_t
 
CR
;

1416 
__IO
 
uöt32_t
 
DCR
;

1417 
__IO
 
uöt32_t
 
SR
;

1418 
__IO
 
uöt32_t
 
FCR
;

1419 
__IO
 
uöt32_t
 
DLR
;

1420 
__IO
 
uöt32_t
 
CCR
;

1421 
__IO
 
uöt32_t
 
AR
;

1422 
__IO
 
uöt32_t
 
ABR
;

1423 
__IO
 
uöt32_t
 
DR
;

1424 
__IO
 
uöt32_t
 
PSMKR
;

1425 
__IO
 
uöt32_t
 
PSMAR
;

1426 
__IO
 
uöt32_t
 
PIR
;

1427 
__IO
 
uöt32_t
 
LPTR
;

1428 } 
	tQUADSPI_Ty≥Def
;

1431 #i‡
	`deföed
(
STM32F446xx
)

1437 
__IO
 
uöt32_t
 
CR
;

1438 
__IO
 
uöt16_t
 
IMR
;

1439 
uöt16_t
 
RESERVED0
;

1440 
__IO
 
uöt32_t
 
SR
;

1441 
__IO
 
uöt16_t
 
IFCR
;

1442 
uöt16_t
 
RESERVED1
;

1443 
__IO
 
uöt32_t
 
DR
;

1444 
__IO
 
uöt32_t
 
CSR
;

1445 
__IO
 
uöt32_t
 
DIR
;

1446 
uöt16_t
 
RESERVED2
;

1447 } 
	tSPDIF_Ty≥Def
;

1456 
__IO
 
uöt16_t
 
CR1
;

1457 
uöt16_t
 
RESERVED0
;

1458 
__IO
 
uöt16_t
 
CR2
;

1459 
uöt16_t
 
RESERVED1
;

1460 
__IO
 
uöt16_t
 
SMCR
;

1461 
uöt16_t
 
RESERVED2
;

1462 
__IO
 
uöt16_t
 
DIER
;

1463 
uöt16_t
 
RESERVED3
;

1464 
__IO
 
uöt16_t
 
SR
;

1465 
uöt16_t
 
RESERVED4
;

1466 
__IO
 
uöt16_t
 
EGR
;

1467 
uöt16_t
 
RESERVED5
;

1468 
__IO
 
uöt16_t
 
CCMR1
;

1469 
uöt16_t
 
RESERVED6
;

1470 
__IO
 
uöt16_t
 
CCMR2
;

1471 
uöt16_t
 
RESERVED7
;

1472 
__IO
 
uöt16_t
 
CCER
;

1473 
uöt16_t
 
RESERVED8
;

1474 
__IO
 
uöt32_t
 
CNT
;

1475 
__IO
 
uöt16_t
 
PSC
;

1476 
uöt16_t
 
RESERVED9
;

1477 
__IO
 
uöt32_t
 
ARR
;

1478 
__IO
 
uöt16_t
 
RCR
;

1479 
uöt16_t
 
RESERVED10
;

1480 
__IO
 
uöt32_t
 
CCR1
;

1481 
__IO
 
uöt32_t
 
CCR2
;

1482 
__IO
 
uöt32_t
 
CCR3
;

1483 
__IO
 
uöt32_t
 
CCR4
;

1484 
__IO
 
uöt16_t
 
BDTR
;

1485 
uöt16_t
 
RESERVED11
;

1486 
__IO
 
uöt16_t
 
DCR
;

1487 
uöt16_t
 
RESERVED12
;

1488 
__IO
 
uöt16_t
 
DMAR
;

1489 
uöt16_t
 
RESERVED13
;

1490 
__IO
 
uöt16_t
 
OR
;

1491 
uöt16_t
 
RESERVED14
;

1492 } 
	tTIM_Ty≥Def
;

1500 
__IO
 
uöt16_t
 
SR
;

1501 
uöt16_t
 
RESERVED0
;

1502 
__IO
 
uöt16_t
 
DR
;

1503 
uöt16_t
 
RESERVED1
;

1504 
__IO
 
uöt16_t
 
BRR
;

1505 
uöt16_t
 
RESERVED2
;

1506 
__IO
 
uöt16_t
 
CR1
;

1507 
uöt16_t
 
RESERVED3
;

1508 
__IO
 
uöt16_t
 
CR2
;

1509 
uöt16_t
 
RESERVED4
;

1510 
__IO
 
uöt16_t
 
CR3
;

1511 
uöt16_t
 
RESERVED5
;

1512 
__IO
 
uöt16_t
 
GTPR
;

1513 
uöt16_t
 
RESERVED6
;

1514 } 
	tUSART_Ty≥Def
;

1522 
__IO
 
uöt32_t
 
CR
;

1523 
__IO
 
uöt32_t
 
CFR
;

1524 
__IO
 
uöt32_t
 
SR
;

1525 } 
	tWWDG_Ty≥Def
;

1533 
__IO
 
uöt32_t
 
CR
;

1534 
__IO
 
uöt32_t
 
SR
;

1535 
__IO
 
uöt32_t
 
DR
;

1536 
__IO
 
uöt32_t
 
DOUT
;

1537 
__IO
 
uöt32_t
 
DMACR
;

1538 
__IO
 
uöt32_t
 
IMSCR
;

1539 
__IO
 
uöt32_t
 
RISR
;

1540 
__IO
 
uöt32_t
 
MISR
;

1541 
__IO
 
uöt32_t
 
K0LR
;

1542 
__IO
 
uöt32_t
 
K0RR
;

1543 
__IO
 
uöt32_t
 
K1LR
;

1544 
__IO
 
uöt32_t
 
K1RR
;

1545 
__IO
 
uöt32_t
 
K2LR
;

1546 
__IO
 
uöt32_t
 
K2RR
;

1547 
__IO
 
uöt32_t
 
K3LR
;

1548 
__IO
 
uöt32_t
 
K3RR
;

1549 
__IO
 
uöt32_t
 
IV0LR
;

1550 
__IO
 
uöt32_t
 
IV0RR
;

1551 
__IO
 
uöt32_t
 
IV1LR
;

1552 
__IO
 
uöt32_t
 
IV1RR
;

1553 
__IO
 
uöt32_t
 
CSGCMCCM0R
;

1554 
__IO
 
uöt32_t
 
CSGCMCCM1R
;

1555 
__IO
 
uöt32_t
 
CSGCMCCM2R
;

1556 
__IO
 
uöt32_t
 
CSGCMCCM3R
;

1557 
__IO
 
uöt32_t
 
CSGCMCCM4R
;

1558 
__IO
 
uöt32_t
 
CSGCMCCM5R
;

1559 
__IO
 
uöt32_t
 
CSGCMCCM6R
;

1560 
__IO
 
uöt32_t
 
CSGCMCCM7R
;

1561 
__IO
 
uöt32_t
 
CSGCM0R
;

1562 
__IO
 
uöt32_t
 
CSGCM1R
;

1563 
__IO
 
uöt32_t
 
CSGCM2R
;

1564 
__IO
 
uöt32_t
 
CSGCM3R
;

1565 
__IO
 
uöt32_t
 
CSGCM4R
;

1566 
__IO
 
uöt32_t
 
CSGCM5R
;

1567 
__IO
 
uöt32_t
 
CSGCM6R
;

1568 
__IO
 
uöt32_t
 
CSGCM7R
;

1569 } 
	tCRYP_Ty≥Def
;

1577 
__IO
 
uöt32_t
 
CR
;

1578 
__IO
 
uöt32_t
 
DIN
;

1579 
__IO
 
uöt32_t
 
STR
;

1580 
__IO
 
uöt32_t
 
HR
[5];

1581 
__IO
 
uöt32_t
 
IMR
;

1582 
__IO
 
uöt32_t
 
SR
;

1583 
uöt32_t
 
RESERVED
[52];

1584 
__IO
 
uöt32_t
 
CSR
[54];

1585 } 
	tHASH_Ty≥Def
;

1593 
__IO
 
uöt32_t
 
HR
[8];

1594 } 
	tHASH_DIGEST_Ty≥Def
;

1602 
__IO
 
uöt32_t
 
CR
;

1603 
__IO
 
uöt32_t
 
SR
;

1604 
__IO
 
uöt32_t
 
DR
;

1605 } 
	tRNG_Ty≥Def
;

1614 
	#FLASH_BASE
 ((
uöt32_t
)0x08000000Ë

	)

1615 
	#CCMDATARAM_BASE
 ((
uöt32_t
)0x10000000Ë

	)

1616 
	#SRAM1_BASE
 ((
uöt32_t
)0x20000000Ë

	)

1617 
	#SRAM2_BASE
 ((
uöt32_t
)0x2001C000Ë

	)

1618 
	#SRAM3_BASE
 ((
uöt32_t
)0x20020000Ë

	)

1619 
	#PERIPH_BASE
 ((
uöt32_t
)0x40000000Ë

	)

1620 
	#BKPSRAM_BASE
 ((
uöt32_t
)0x40024000Ë

	)

1622 #i‡
	`deföed
(
STM32F40_41xxx
)

1623 
	#FSMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

1626 #i‡
	`deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
)

1627 
	#FMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

1630 #i‡
	`deföed
(
STM32F446xx
)

1631 
	#QSPI_R_BASE
 ((
uöt32_t
)0xA0001000Ë

	)

1634 
	#CCMDATARAM_BB_BASE
 ((
uöt32_t
)0x12000000Ë

	)

1635 
	#SRAM1_BB_BASE
 ((
uöt32_t
)0x22000000Ë

	)

1636 
	#SRAM2_BB_BASE
 ((
uöt32_t
)0x2201C000Ë

	)

1637 
	#SRAM3_BB_BASE
 ((
uöt32_t
)0x22400000Ë

	)

1638 
	#PERIPH_BB_BASE
 ((
uöt32_t
)0x42000000Ë

	)

1639 
	#BKPSRAM_BB_BASE
 ((
uöt32_t
)0x42024000Ë

	)

1642 
	#SRAM_BASE
 
SRAM1_BASE


	)

1643 
	#SRAM_BB_BASE
 
SRAM1_BB_BASE


	)

1647 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

1648 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x00010000)

	)

1649 
	#AHB1PERIPH_BASE
 (
PERIPH_BASE
 + 0x00020000)

	)

1650 
	#AHB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x10000000)

	)

1653 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x0000)

	)

1654 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x0400)

	)

1655 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x0800)

	)

1656 
	#TIM5_BASE
 (
APB1PERIPH_BASE
 + 0x0C00)

	)

1657 
	#TIM6_BASE
 (
APB1PERIPH_BASE
 + 0x1000)

	)

1658 
	#TIM7_BASE
 (
APB1PERIPH_BASE
 + 0x1400)

	)

1659 
	#TIM12_BASE
 (
APB1PERIPH_BASE
 + 0x1800)

	)

1660 
	#TIM13_BASE
 (
APB1PERIPH_BASE
 + 0x1C00)

	)

1661 
	#TIM14_BASE
 (
APB1PERIPH_BASE
 + 0x2000)

	)

1662 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x2800)

	)

1663 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x2C00)

	)

1664 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x3000)

	)

1665 
	#I2S2ext_BASE
 (
APB1PERIPH_BASE
 + 0x3400)

	)

1666 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x3800)

	)

1667 
	#SPI3_BASE
 (
APB1PERIPH_BASE
 + 0x3C00)

	)

1668 #i‡
	`deföed
(
STM32F446xx
)

1669 
	#SPDIFRX_BASE
 (
APB1PERIPH_BASE
 + 0x4000)

	)

1671 
	#I2S3ext_BASE
 (
APB1PERIPH_BASE
 + 0x4000)

	)

1672 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x4400)

	)

1673 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x4800)

	)

1674 
	#UART4_BASE
 (
APB1PERIPH_BASE
 + 0x4C00)

	)

1675 
	#UART5_BASE
 (
APB1PERIPH_BASE
 + 0x5000)

	)

1676 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x5400)

	)

1677 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x5800)

	)

1678 
	#I2C3_BASE
 (
APB1PERIPH_BASE
 + 0x5C00)

	)

1679 #i‡
	`deföed
(
STM32F446xx
)

1680 
	#FMPI2C1_BASE
 (
APB1PERIPH_BASE
 + 0x6000)

	)

1682 
	#CAN1_BASE
 (
APB1PERIPH_BASE
 + 0x6400)

	)

1683 
	#CAN2_BASE
 (
APB1PERIPH_BASE
 + 0x6800)

	)

1684 #i‡
	`deföed
(
STM32F446xx
)

1685 
	#CEC_BASE
 (
APB1PERIPH_BASE
 + 0x6C00)

	)

1687 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x7000)

	)

1688 
	#DAC_BASE
 (
APB1PERIPH_BASE
 + 0x7400)

	)

1689 
	#UART7_BASE
 (
APB1PERIPH_BASE
 + 0x7800)

	)

1690 
	#UART8_BASE
 (
APB1PERIPH_BASE
 + 0x7C00)

	)

1693 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x0000)

	)

1694 
	#TIM8_BASE
 (
APB2PERIPH_BASE
 + 0x0400)

	)

1695 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x1000)

	)

1696 
	#USART6_BASE
 (
APB2PERIPH_BASE
 + 0x1400)

	)

1697 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x2000)

	)

1698 
	#ADC2_BASE
 (
APB2PERIPH_BASE
 + 0x2100)

	)

1699 
	#ADC3_BASE
 (
APB2PERIPH_BASE
 + 0x2200)

	)

1700 
	#ADC_BASE
 (
APB2PERIPH_BASE
 + 0x2300)

	)

1701 
	#SDIO_BASE
 (
APB2PERIPH_BASE
 + 0x2C00)

	)

1702 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x3000)

	)

1703 
	#SPI4_BASE
 (
APB2PERIPH_BASE
 + 0x3400)

	)

1704 
	#SYSCFG_BASE
 (
APB2PERIPH_BASE
 + 0x3800)

	)

1705 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x3C00)

	)

1706 
	#TIM9_BASE
 (
APB2PERIPH_BASE
 + 0x4000)

	)

1707 
	#TIM10_BASE
 (
APB2PERIPH_BASE
 + 0x4400)

	)

1708 
	#TIM11_BASE
 (
APB2PERIPH_BASE
 + 0x4800)

	)

1709 
	#SPI5_BASE
 (
APB2PERIPH_BASE
 + 0x5000)

	)

1710 
	#SPI6_BASE
 (
APB2PERIPH_BASE
 + 0x5400)

	)

1711 
	#SAI1_BASE
 (
APB2PERIPH_BASE
 + 0x5800)

	)

1712 
	#SAI1_Block_A_BASE
 (
SAI1_BASE
 + 0x004)

	)

1713 
	#SAI1_Block_B_BASE
 (
SAI1_BASE
 + 0x024)

	)

1714 #i‡
	`deföed
(
STM32F446xx
)

1715 
	#SAI2_BASE
 (
APB2PERIPH_BASE
 + 0x5C00)

	)

1716 
	#SAI2_Block_A_BASE
 (
SAI2_BASE
 + 0x004)

	)

1717 
	#SAI2_Block_B_BASE
 (
SAI2_BASE
 + 0x024)

	)

1719 
	#LTDC_BASE
 (
APB2PERIPH_BASE
 + 0x6800)

	)

1720 
	#LTDC_Layî1_BASE
 (
LTDC_BASE
 + 0x84)

	)

1721 
	#LTDC_Layî2_BASE
 (
LTDC_BASE
 + 0x104)

	)

1724 
	#GPIOA_BASE
 (
AHB1PERIPH_BASE
 + 0x0000)

	)

1725 
	#GPIOB_BASE
 (
AHB1PERIPH_BASE
 + 0x0400)

	)

1726 
	#GPIOC_BASE
 (
AHB1PERIPH_BASE
 + 0x0800)

	)

1727 
	#GPIOD_BASE
 (
AHB1PERIPH_BASE
 + 0x0C00)

	)

1728 
	#GPIOE_BASE
 (
AHB1PERIPH_BASE
 + 0x1000)

	)

1729 
	#GPIOF_BASE
 (
AHB1PERIPH_BASE
 + 0x1400)

	)

1730 
	#GPIOG_BASE
 (
AHB1PERIPH_BASE
 + 0x1800)

	)

1731 
	#GPIOH_BASE
 (
AHB1PERIPH_BASE
 + 0x1C00)

	)

1732 
	#GPIOI_BASE
 (
AHB1PERIPH_BASE
 + 0x2000)

	)

1733 
	#GPIOJ_BASE
 (
AHB1PERIPH_BASE
 + 0x2400)

	)

1734 
	#GPIOK_BASE
 (
AHB1PERIPH_BASE
 + 0x2800)

	)

1735 
	#CRC_BASE
 (
AHB1PERIPH_BASE
 + 0x3000)

	)

1736 
	#RCC_BASE
 (
AHB1PERIPH_BASE
 + 0x3800)

	)

1737 
	#FLASH_R_BASE
 (
AHB1PERIPH_BASE
 + 0x3C00)

	)

1738 
	#DMA1_BASE
 (
AHB1PERIPH_BASE
 + 0x6000)

	)

1739 
	#DMA1_Såóm0_BASE
 (
DMA1_BASE
 + 0x010)

	)

1740 
	#DMA1_Såóm1_BASE
 (
DMA1_BASE
 + 0x028)

	)

1741 
	#DMA1_Såóm2_BASE
 (
DMA1_BASE
 + 0x040)

	)

1742 
	#DMA1_Såóm3_BASE
 (
DMA1_BASE
 + 0x058)

	)

1743 
	#DMA1_Såóm4_BASE
 (
DMA1_BASE
 + 0x070)

	)

1744 
	#DMA1_Såóm5_BASE
 (
DMA1_BASE
 + 0x088)

	)

1745 
	#DMA1_Såóm6_BASE
 (
DMA1_BASE
 + 0x0A0)

	)

1746 
	#DMA1_Såóm7_BASE
 (
DMA1_BASE
 + 0x0B8)

	)

1747 
	#DMA2_BASE
 (
AHB1PERIPH_BASE
 + 0x6400)

	)

1748 
	#DMA2_Såóm0_BASE
 (
DMA2_BASE
 + 0x010)

	)

1749 
	#DMA2_Såóm1_BASE
 (
DMA2_BASE
 + 0x028)

	)

1750 
	#DMA2_Såóm2_BASE
 (
DMA2_BASE
 + 0x040)

	)

1751 
	#DMA2_Såóm3_BASE
 (
DMA2_BASE
 + 0x058)

	)

1752 
	#DMA2_Såóm4_BASE
 (
DMA2_BASE
 + 0x070)

	)

1753 
	#DMA2_Såóm5_BASE
 (
DMA2_BASE
 + 0x088)

	)

1754 
	#DMA2_Såóm6_BASE
 (
DMA2_BASE
 + 0x0A0)

	)

1755 
	#DMA2_Såóm7_BASE
 (
DMA2_BASE
 + 0x0B8)

	)

1756 
	#ETH_BASE
 (
AHB1PERIPH_BASE
 + 0x8000)

	)

1757 
	#ETH_MAC_BASE
 (
ETH_BASE
)

	)

1758 
	#ETH_MMC_BASE
 (
ETH_BASE
 + 0x0100)

	)

1759 
	#ETH_PTP_BASE
 (
ETH_BASE
 + 0x0700)

	)

1760 
	#ETH_DMA_BASE
 (
ETH_BASE
 + 0x1000)

	)

1761 
	#DMA2D_BASE
 (
AHB1PERIPH_BASE
 + 0xB000)

	)

1764 
	#DCMI_BASE
 (
AHB2PERIPH_BASE
 + 0x50000)

	)

1765 
	#CRYP_BASE
 (
AHB2PERIPH_BASE
 + 0x60000)

	)

1766 
	#HASH_BASE
 (
AHB2PERIPH_BASE
 + 0x60400)

	)

1767 
	#HASH_DIGEST_BASE
 (
AHB2PERIPH_BASE
 + 0x60710)

	)

1768 
	#RNG_BASE
 (
AHB2PERIPH_BASE
 + 0x60800)

	)

1770 #i‡
	`deföed
(
STM32F40_41xxx
)

1772 
	#FSMC_B™k1_R_BASE
 (
FSMC_R_BASE
 + 0x0000)

	)

1773 
	#FSMC_B™k1E_R_BASE
 (
FSMC_R_BASE
 + 0x0104)

	)

1774 
	#FSMC_B™k2_R_BASE
 (
FSMC_R_BASE
 + 0x0060)

	)

1775 
	#FSMC_B™k3_R_BASE
 (
FSMC_R_BASE
 + 0x0080)

	)

1776 
	#FSMC_B™k4_R_BASE
 (
FSMC_R_BASE
 + 0x00A0)

	)

1779 #i‡
	`deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
)

1781 
	#FMC_B™k1_R_BASE
 (
FMC_R_BASE
 + 0x0000)

	)

1782 
	#FMC_B™k1E_R_BASE
 (
FMC_R_BASE
 + 0x0104)

	)

1783 
	#FMC_B™k2_R_BASE
 (
FMC_R_BASE
 + 0x0060)

	)

1784 
	#FMC_B™k3_R_BASE
 (
FMC_R_BASE
 + 0x0080)

	)

1785 
	#FMC_B™k4_R_BASE
 (
FMC_R_BASE
 + 0x00A0)

	)

1786 
	#FMC_B™k5_6_R_BASE
 (
FMC_R_BASE
 + 0x0140)

	)

1790 
	#DBGMCU_BASE
 ((
uöt32_t
 )0xE0042000)

	)

1799 #i‡
	`deföed
(
STM32F446xx
)

1800 
	#QUADSPI
 ((
QUADSPI_Ty≥Def
 *Ë
QSPI_R_BASE
)

	)

1802 
	#TIM2
 ((
TIM_Ty≥Def
 *Ë
TIM2_BASE
)

	)

1803 
	#TIM3
 ((
TIM_Ty≥Def
 *Ë
TIM3_BASE
)

	)

1804 
	#TIM4
 ((
TIM_Ty≥Def
 *Ë
TIM4_BASE
)

	)

1805 
	#TIM5
 ((
TIM_Ty≥Def
 *Ë
TIM5_BASE
)

	)

1806 
	#TIM6
 ((
TIM_Ty≥Def
 *Ë
TIM6_BASE
)

	)

1807 
	#TIM7
 ((
TIM_Ty≥Def
 *Ë
TIM7_BASE
)

	)

1808 
	#TIM12
 ((
TIM_Ty≥Def
 *Ë
TIM12_BASE
)

	)

1809 
	#TIM13
 ((
TIM_Ty≥Def
 *Ë
TIM13_BASE
)

	)

1810 
	#TIM14
 ((
TIM_Ty≥Def
 *Ë
TIM14_BASE
)

	)

1811 
	#RTC
 ((
RTC_Ty≥Def
 *Ë
RTC_BASE
)

	)

1812 
	#WWDG
 ((
WWDG_Ty≥Def
 *Ë
WWDG_BASE
)

	)

1813 
	#IWDG
 ((
IWDG_Ty≥Def
 *Ë
IWDG_BASE
)

	)

1814 
	#I2S2ext
 ((
SPI_Ty≥Def
 *Ë
I2S2ext_BASE
)

	)

1815 
	#SPI2
 ((
SPI_Ty≥Def
 *Ë
SPI2_BASE
)

	)

1816 
	#SPI3
 ((
SPI_Ty≥Def
 *Ë
SPI3_BASE
)

	)

1817 #i‡
	`deföed
(
STM32F446xx
)

1818 
	#SPDIFRX
 ((
SPDIFRX_Ty≥Def
 *Ë
SPDIFRX_BASE
)

	)

1820 
	#I2S3ext
 ((
SPI_Ty≥Def
 *Ë
I2S3ext_BASE
)

	)

1821 
	#USART2
 ((
USART_Ty≥Def
 *Ë
USART2_BASE
)

	)

1822 
	#USART3
 ((
USART_Ty≥Def
 *Ë
USART3_BASE
)

	)

1823 
	#UART4
 ((
USART_Ty≥Def
 *Ë
UART4_BASE
)

	)

1824 
	#UART5
 ((
USART_Ty≥Def
 *Ë
UART5_BASE
)

	)

1825 
	#I2C1
 ((
I2C_Ty≥Def
 *Ë
I2C1_BASE
)

	)

1826 
	#I2C2
 ((
I2C_Ty≥Def
 *Ë
I2C2_BASE
)

	)

1827 
	#I2C3
 ((
I2C_Ty≥Def
 *Ë
I2C3_BASE
)

	)

1828 #i‡
	`deföed
(
STM32F446xx
)

1829 
	#FMPI2C1
 ((
FMPI2C_Ty≥Def
 *Ë
FMPI2C1_BASE
)

	)

1831 
	#CAN1
 ((
CAN_Ty≥Def
 *Ë
CAN1_BASE
)

	)

1832 
	#CAN2
 ((
CAN_Ty≥Def
 *Ë
CAN2_BASE
)

	)

1833 #i‡
	`deföed
(
STM32F446xx
)

1834 
	#CEC
 ((
CEC_Ty≥Def
 *Ë
CEC_BASE
)

	)

1836 
	#PWR
 ((
PWR_Ty≥Def
 *Ë
PWR_BASE
)

	)

1837 
	#DAC
 ((
DAC_Ty≥Def
 *Ë
DAC_BASE
)

	)

1838 
	#UART7
 ((
USART_Ty≥Def
 *Ë
UART7_BASE
)

	)

1839 
	#UART8
 ((
USART_Ty≥Def
 *Ë
UART8_BASE
)

	)

1840 
	#TIM1
 ((
TIM_Ty≥Def
 *Ë
TIM1_BASE
)

	)

1841 
	#TIM8
 ((
TIM_Ty≥Def
 *Ë
TIM8_BASE
)

	)

1842 
	#USART1
 ((
USART_Ty≥Def
 *Ë
USART1_BASE
)

	)

1843 
	#USART6
 ((
USART_Ty≥Def
 *Ë
USART6_BASE
)

	)

1844 
	#ADC
 ((
ADC_Comm⁄_Ty≥Def
 *Ë
ADC_BASE
)

	)

1845 
	#ADC1
 ((
ADC_Ty≥Def
 *Ë
ADC1_BASE
)

	)

1846 
	#ADC2
 ((
ADC_Ty≥Def
 *Ë
ADC2_BASE
)

	)

1847 
	#ADC3
 ((
ADC_Ty≥Def
 *Ë
ADC3_BASE
)

	)

1848 
	#SDIO
 ((
SDIO_Ty≥Def
 *Ë
SDIO_BASE
)

	)

1849 
	#SPI1
 ((
SPI_Ty≥Def
 *Ë
SPI1_BASE
)

	)

1850 
	#SPI4
 ((
SPI_Ty≥Def
 *Ë
SPI4_BASE
)

	)

1851 
	#SYSCFG
 ((
SYSCFG_Ty≥Def
 *Ë
SYSCFG_BASE
)

	)

1852 
	#EXTI
 ((
EXTI_Ty≥Def
 *Ë
EXTI_BASE
)

	)

1853 
	#TIM9
 ((
TIM_Ty≥Def
 *Ë
TIM9_BASE
)

	)

1854 
	#TIM10
 ((
TIM_Ty≥Def
 *Ë
TIM10_BASE
)

	)

1855 
	#TIM11
 ((
TIM_Ty≥Def
 *Ë
TIM11_BASE
)

	)

1856 
	#SPI5
 ((
SPI_Ty≥Def
 *Ë
SPI5_BASE
)

	)

1857 
	#SPI6
 ((
SPI_Ty≥Def
 *Ë
SPI6_BASE
)

	)

1858 
	#SAI1
 ((
SAI_Ty≥Def
 *Ë
SAI1_BASE
)

	)

1859 
	#SAI1_Block_A
 ((
SAI_Block_Ty≥Def
 *)
SAI1_Block_A_BASE
)

	)

1860 
	#SAI1_Block_B
 ((
SAI_Block_Ty≥Def
 *)
SAI1_Block_B_BASE
)

	)

1861 #i‡
	`deföed
(
STM32F446xx
)

1862 
	#SAI2
 ((
SAI_Ty≥Def
 *Ë
SAI2_BASE
)

	)

1863 
	#SAI2_Block_A
 ((
SAI_Block_Ty≥Def
 *)
SAI2_Block_A_BASE
)

	)

1864 
	#SAI2_Block_B
 ((
SAI_Block_Ty≥Def
 *)
SAI2_Block_B_BASE
)

	)

1866 
	#LTDC
 ((
LTDC_Ty≥Def
 *)
LTDC_BASE
)

	)

1867 
	#LTDC_Layî1
 ((
LTDC_Layî_Ty≥Def
 *)
LTDC_Layî1_BASE
)

	)

1868 
	#LTDC_Layî2
 ((
LTDC_Layî_Ty≥Def
 *)
LTDC_Layî2_BASE
)

	)

1869 
	#GPIOA
 ((
GPIO_Ty≥Def
 *Ë
GPIOA_BASE
)

	)

1870 
	#GPIOB
 ((
GPIO_Ty≥Def
 *Ë
GPIOB_BASE
)

	)

1871 
	#GPIOC
 ((
GPIO_Ty≥Def
 *Ë
GPIOC_BASE
)

	)

1872 
	#GPIOD
 ((
GPIO_Ty≥Def
 *Ë
GPIOD_BASE
)

	)

1873 
	#GPIOE
 ((
GPIO_Ty≥Def
 *Ë
GPIOE_BASE
)

	)

1874 
	#GPIOF
 ((
GPIO_Ty≥Def
 *Ë
GPIOF_BASE
)

	)

1875 
	#GPIOG
 ((
GPIO_Ty≥Def
 *Ë
GPIOG_BASE
)

	)

1876 
	#GPIOH
 ((
GPIO_Ty≥Def
 *Ë
GPIOH_BASE
)

	)

1877 
	#GPIOI
 ((
GPIO_Ty≥Def
 *Ë
GPIOI_BASE
)

	)

1878 
	#GPIOJ
 ((
GPIO_Ty≥Def
 *Ë
GPIOJ_BASE
)

	)

1879 
	#GPIOK
 ((
GPIO_Ty≥Def
 *Ë
GPIOK_BASE
)

	)

1880 
	#CRC
 ((
CRC_Ty≥Def
 *Ë
CRC_BASE
)

	)

1881 
	#RCC
 ((
RCC_Ty≥Def
 *Ë
RCC_BASE
)

	)

1882 
	#FLASH
 ((
FLASH_Ty≥Def
 *Ë
FLASH_R_BASE
)

	)

1883 
	#DMA1
 ((
DMA_Ty≥Def
 *Ë
DMA1_BASE
)

	)

1884 
	#DMA1_Såóm0
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm0_BASE
)

	)

1885 
	#DMA1_Såóm1
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm1_BASE
)

	)

1886 
	#DMA1_Såóm2
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm2_BASE
)

	)

1887 
	#DMA1_Såóm3
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm3_BASE
)

	)

1888 
	#DMA1_Såóm4
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm4_BASE
)

	)

1889 
	#DMA1_Såóm5
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm5_BASE
)

	)

1890 
	#DMA1_Såóm6
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm6_BASE
)

	)

1891 
	#DMA1_Såóm7
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm7_BASE
)

	)

1892 
	#DMA2
 ((
DMA_Ty≥Def
 *Ë
DMA2_BASE
)

	)

1893 
	#DMA2_Såóm0
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm0_BASE
)

	)

1894 
	#DMA2_Såóm1
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm1_BASE
)

	)

1895 
	#DMA2_Såóm2
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm2_BASE
)

	)

1896 
	#DMA2_Såóm3
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm3_BASE
)

	)

1897 
	#DMA2_Såóm4
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm4_BASE
)

	)

1898 
	#DMA2_Såóm5
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm5_BASE
)

	)

1899 
	#DMA2_Såóm6
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm6_BASE
)

	)

1900 
	#DMA2_Såóm7
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm7_BASE
)

	)

1901 
	#ETH
 ((
ETH_Ty≥Def
 *Ë
ETH_BASE
)

	)

1902 
	#DMA2D
 ((
DMA2D_Ty≥Def
 *)
DMA2D_BASE
)

	)

1903 
	#DCMI
 ((
DCMI_Ty≥Def
 *Ë
DCMI_BASE
)

	)

1904 
	#CRYP
 ((
CRYP_Ty≥Def
 *Ë
CRYP_BASE
)

	)

1905 
	#HASH
 ((
HASH_Ty≥Def
 *Ë
HASH_BASE
)

	)

1906 
	#HASH_DIGEST
 ((
HASH_DIGEST_Ty≥Def
 *Ë
HASH_DIGEST_BASE
)

	)

1907 
	#RNG
 ((
RNG_Ty≥Def
 *Ë
RNG_BASE
)

	)

1909 #i‡
	`deföed
(
STM32F40_41xxx
)

1910 
	#FSMC_B™k1
 ((
FSMC_B™k1_Ty≥Def
 *Ë
FSMC_B™k1_R_BASE
)

	)

1911 
	#FSMC_B™k1E
 ((
FSMC_B™k1E_Ty≥Def
 *Ë
FSMC_B™k1E_R_BASE
)

	)

1912 
	#FSMC_B™k2
 ((
FSMC_B™k2_Ty≥Def
 *Ë
FSMC_B™k2_R_BASE
)

	)

1913 
	#FSMC_B™k3
 ((
FSMC_B™k3_Ty≥Def
 *Ë
FSMC_B™k3_R_BASE
)

	)

1914 
	#FSMC_B™k4
 ((
FSMC_B™k4_Ty≥Def
 *Ë
FSMC_B™k4_R_BASE
)

	)

1917 #i‡
	`deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
)

1918 
	#FMC_B™k1
 ((
FMC_B™k1_Ty≥Def
 *Ë
FMC_B™k1_R_BASE
)

	)

1919 
	#FMC_B™k1E
 ((
FMC_B™k1E_Ty≥Def
 *Ë
FMC_B™k1E_R_BASE
)

	)

1920 
	#FMC_B™k2
 ((
FMC_B™k2_Ty≥Def
 *Ë
FMC_B™k2_R_BASE
)

	)

1921 
	#FMC_B™k3
 ((
FMC_B™k3_Ty≥Def
 *Ë
FMC_B™k3_R_BASE
)

	)

1922 
	#FMC_B™k4
 ((
FMC_B™k4_Ty≥Def
 *Ë
FMC_B™k4_R_BASE
)

	)

1923 
	#FMC_B™k5_6
 ((
FMC_B™k5_6_Ty≥Def
 *Ë
FMC_B™k5_6_R_BASE
)

	)

1926 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *Ë
DBGMCU_BASE
)

	)

1950 
	#ADC_SR_AWD
 ((
uöt8_t
)0x01Ë

	)

1951 
	#ADC_SR_EOC
 ((
uöt8_t
)0x02Ë

	)

1952 
	#ADC_SR_JEOC
 ((
uöt8_t
)0x04Ë

	)

1953 
	#ADC_SR_JSTRT
 ((
uöt8_t
)0x08Ë

	)

1954 
	#ADC_SR_STRT
 ((
uöt8_t
)0x10Ë

	)

1955 
	#ADC_SR_OVR
 ((
uöt8_t
)0x20Ë

	)

1958 
	#ADC_CR1_AWDCH
 ((
uöt32_t
)0x0000001FË

	)

1959 
	#ADC_CR1_AWDCH_0
 ((
uöt32_t
)0x00000001Ë

	)

1960 
	#ADC_CR1_AWDCH_1
 ((
uöt32_t
)0x00000002Ë

	)

1961 
	#ADC_CR1_AWDCH_2
 ((
uöt32_t
)0x00000004Ë

	)

1962 
	#ADC_CR1_AWDCH_3
 ((
uöt32_t
)0x00000008Ë

	)

1963 
	#ADC_CR1_AWDCH_4
 ((
uöt32_t
)0x00000010Ë

	)

1964 
	#ADC_CR1_EOCIE
 ((
uöt32_t
)0x00000020Ë

	)

1965 
	#ADC_CR1_AWDIE
 ((
uöt32_t
)0x00000040Ë

	)

1966 
	#ADC_CR1_JEOCIE
 ((
uöt32_t
)0x00000080Ë

	)

1967 
	#ADC_CR1_SCAN
 ((
uöt32_t
)0x00000100Ë

	)

1968 
	#ADC_CR1_AWDSGL
 ((
uöt32_t
)0x00000200Ë

	)

1969 
	#ADC_CR1_JAUTO
 ((
uöt32_t
)0x00000400Ë

	)

1970 
	#ADC_CR1_DISCEN
 ((
uöt32_t
)0x00000800Ë

	)

1971 
	#ADC_CR1_JDISCEN
 ((
uöt32_t
)0x00001000Ë

	)

1972 
	#ADC_CR1_DISCNUM
 ((
uöt32_t
)0x0000E000Ë

	)

1973 
	#ADC_CR1_DISCNUM_0
 ((
uöt32_t
)0x00002000Ë

	)

1974 
	#ADC_CR1_DISCNUM_1
 ((
uöt32_t
)0x00004000Ë

	)

1975 
	#ADC_CR1_DISCNUM_2
 ((
uöt32_t
)0x00008000Ë

	)

1976 
	#ADC_CR1_JAWDEN
 ((
uöt32_t
)0x00400000Ë

	)

1977 
	#ADC_CR1_AWDEN
 ((
uöt32_t
)0x00800000Ë

	)

1978 
	#ADC_CR1_RES
 ((
uöt32_t
)0x03000000Ë

	)

1979 
	#ADC_CR1_RES_0
 ((
uöt32_t
)0x01000000Ë

	)

1980 
	#ADC_CR1_RES_1
 ((
uöt32_t
)0x02000000Ë

	)

1981 
	#ADC_CR1_OVRIE
 ((
uöt32_t
)0x04000000Ë

	)

1984 
	#ADC_CR2_ADON
 ((
uöt32_t
)0x00000001Ë

	)

1985 
	#ADC_CR2_CONT
 ((
uöt32_t
)0x00000002Ë

	)

1986 
	#ADC_CR2_DMA
 ((
uöt32_t
)0x00000100Ë

	)

1987 
	#ADC_CR2_DDS
 ((
uöt32_t
)0x00000200Ë

	)

1988 
	#ADC_CR2_EOCS
 ((
uöt32_t
)0x00000400Ë

	)

1989 
	#ADC_CR2_ALIGN
 ((
uöt32_t
)0x00000800Ë

	)

1990 
	#ADC_CR2_JEXTSEL
 ((
uöt32_t
)0x000F0000Ë

	)

1991 
	#ADC_CR2_JEXTSEL_0
 ((
uöt32_t
)0x00010000Ë

	)

1992 
	#ADC_CR2_JEXTSEL_1
 ((
uöt32_t
)0x00020000Ë

	)

1993 
	#ADC_CR2_JEXTSEL_2
 ((
uöt32_t
)0x00040000Ë

	)

1994 
	#ADC_CR2_JEXTSEL_3
 ((
uöt32_t
)0x00080000Ë

	)

1995 
	#ADC_CR2_JEXTEN
 ((
uöt32_t
)0x00300000Ë

	)

1996 
	#ADC_CR2_JEXTEN_0
 ((
uöt32_t
)0x00100000Ë

	)

1997 
	#ADC_CR2_JEXTEN_1
 ((
uöt32_t
)0x00200000Ë

	)

1998 
	#ADC_CR2_JSWSTART
 ((
uöt32_t
)0x00400000Ë

	)

1999 
	#ADC_CR2_EXTSEL
 ((
uöt32_t
)0x0F000000Ë

	)

2000 
	#ADC_CR2_EXTSEL_0
 ((
uöt32_t
)0x01000000Ë

	)

2001 
	#ADC_CR2_EXTSEL_1
 ((
uöt32_t
)0x02000000Ë

	)

2002 
	#ADC_CR2_EXTSEL_2
 ((
uöt32_t
)0x04000000Ë

	)

2003 
	#ADC_CR2_EXTSEL_3
 ((
uöt32_t
)0x08000000Ë

	)

2004 
	#ADC_CR2_EXTEN
 ((
uöt32_t
)0x30000000Ë

	)

2005 
	#ADC_CR2_EXTEN_0
 ((
uöt32_t
)0x10000000Ë

	)

2006 
	#ADC_CR2_EXTEN_1
 ((
uöt32_t
)0x20000000Ë

	)

2007 
	#ADC_CR2_SWSTART
 ((
uöt32_t
)0x40000000Ë

	)

2010 
	#ADC_SMPR1_SMP10
 ((
uöt32_t
)0x00000007Ë

	)

2011 
	#ADC_SMPR1_SMP10_0
 ((
uöt32_t
)0x00000001Ë

	)

2012 
	#ADC_SMPR1_SMP10_1
 ((
uöt32_t
)0x00000002Ë

	)

2013 
	#ADC_SMPR1_SMP10_2
 ((
uöt32_t
)0x00000004Ë

	)

2014 
	#ADC_SMPR1_SMP11
 ((
uöt32_t
)0x00000038Ë

	)

2015 
	#ADC_SMPR1_SMP11_0
 ((
uöt32_t
)0x00000008Ë

	)

2016 
	#ADC_SMPR1_SMP11_1
 ((
uöt32_t
)0x00000010Ë

	)

2017 
	#ADC_SMPR1_SMP11_2
 ((
uöt32_t
)0x00000020Ë

	)

2018 
	#ADC_SMPR1_SMP12
 ((
uöt32_t
)0x000001C0Ë

	)

2019 
	#ADC_SMPR1_SMP12_0
 ((
uöt32_t
)0x00000040Ë

	)

2020 
	#ADC_SMPR1_SMP12_1
 ((
uöt32_t
)0x00000080Ë

	)

2021 
	#ADC_SMPR1_SMP12_2
 ((
uöt32_t
)0x00000100Ë

	)

2022 
	#ADC_SMPR1_SMP13
 ((
uöt32_t
)0x00000E00Ë

	)

2023 
	#ADC_SMPR1_SMP13_0
 ((
uöt32_t
)0x00000200Ë

	)

2024 
	#ADC_SMPR1_SMP13_1
 ((
uöt32_t
)0x00000400Ë

	)

2025 
	#ADC_SMPR1_SMP13_2
 ((
uöt32_t
)0x00000800Ë

	)

2026 
	#ADC_SMPR1_SMP14
 ((
uöt32_t
)0x00007000Ë

	)

2027 
	#ADC_SMPR1_SMP14_0
 ((
uöt32_t
)0x00001000Ë

	)

2028 
	#ADC_SMPR1_SMP14_1
 ((
uöt32_t
)0x00002000Ë

	)

2029 
	#ADC_SMPR1_SMP14_2
 ((
uöt32_t
)0x00004000Ë

	)

2030 
	#ADC_SMPR1_SMP15
 ((
uöt32_t
)0x00038000Ë

	)

2031 
	#ADC_SMPR1_SMP15_0
 ((
uöt32_t
)0x00008000Ë

	)

2032 
	#ADC_SMPR1_SMP15_1
 ((
uöt32_t
)0x00010000Ë

	)

2033 
	#ADC_SMPR1_SMP15_2
 ((
uöt32_t
)0x00020000Ë

	)

2034 
	#ADC_SMPR1_SMP16
 ((
uöt32_t
)0x001C0000Ë

	)

2035 
	#ADC_SMPR1_SMP16_0
 ((
uöt32_t
)0x00040000Ë

	)

2036 
	#ADC_SMPR1_SMP16_1
 ((
uöt32_t
)0x00080000Ë

	)

2037 
	#ADC_SMPR1_SMP16_2
 ((
uöt32_t
)0x00100000Ë

	)

2038 
	#ADC_SMPR1_SMP17
 ((
uöt32_t
)0x00E00000Ë

	)

2039 
	#ADC_SMPR1_SMP17_0
 ((
uöt32_t
)0x00200000Ë

	)

2040 
	#ADC_SMPR1_SMP17_1
 ((
uöt32_t
)0x00400000Ë

	)

2041 
	#ADC_SMPR1_SMP17_2
 ((
uöt32_t
)0x00800000Ë

	)

2042 
	#ADC_SMPR1_SMP18
 ((
uöt32_t
)0x07000000Ë

	)

2043 
	#ADC_SMPR1_SMP18_0
 ((
uöt32_t
)0x01000000Ë

	)

2044 
	#ADC_SMPR1_SMP18_1
 ((
uöt32_t
)0x02000000Ë

	)

2045 
	#ADC_SMPR1_SMP18_2
 ((
uöt32_t
)0x04000000Ë

	)

2048 
	#ADC_SMPR2_SMP0
 ((
uöt32_t
)0x00000007Ë

	)

2049 
	#ADC_SMPR2_SMP0_0
 ((
uöt32_t
)0x00000001Ë

	)

2050 
	#ADC_SMPR2_SMP0_1
 ((
uöt32_t
)0x00000002Ë

	)

2051 
	#ADC_SMPR2_SMP0_2
 ((
uöt32_t
)0x00000004Ë

	)

2052 
	#ADC_SMPR2_SMP1
 ((
uöt32_t
)0x00000038Ë

	)

2053 
	#ADC_SMPR2_SMP1_0
 ((
uöt32_t
)0x00000008Ë

	)

2054 
	#ADC_SMPR2_SMP1_1
 ((
uöt32_t
)0x00000010Ë

	)

2055 
	#ADC_SMPR2_SMP1_2
 ((
uöt32_t
)0x00000020Ë

	)

2056 
	#ADC_SMPR2_SMP2
 ((
uöt32_t
)0x000001C0Ë

	)

2057 
	#ADC_SMPR2_SMP2_0
 ((
uöt32_t
)0x00000040Ë

	)

2058 
	#ADC_SMPR2_SMP2_1
 ((
uöt32_t
)0x00000080Ë

	)

2059 
	#ADC_SMPR2_SMP2_2
 ((
uöt32_t
)0x00000100Ë

	)

2060 
	#ADC_SMPR2_SMP3
 ((
uöt32_t
)0x00000E00Ë

	)

2061 
	#ADC_SMPR2_SMP3_0
 ((
uöt32_t
)0x00000200Ë

	)

2062 
	#ADC_SMPR2_SMP3_1
 ((
uöt32_t
)0x00000400Ë

	)

2063 
	#ADC_SMPR2_SMP3_2
 ((
uöt32_t
)0x00000800Ë

	)

2064 
	#ADC_SMPR2_SMP4
 ((
uöt32_t
)0x00007000Ë

	)

2065 
	#ADC_SMPR2_SMP4_0
 ((
uöt32_t
)0x00001000Ë

	)

2066 
	#ADC_SMPR2_SMP4_1
 ((
uöt32_t
)0x00002000Ë

	)

2067 
	#ADC_SMPR2_SMP4_2
 ((
uöt32_t
)0x00004000Ë

	)

2068 
	#ADC_SMPR2_SMP5
 ((
uöt32_t
)0x00038000Ë

	)

2069 
	#ADC_SMPR2_SMP5_0
 ((
uöt32_t
)0x00008000Ë

	)

2070 
	#ADC_SMPR2_SMP5_1
 ((
uöt32_t
)0x00010000Ë

	)

2071 
	#ADC_SMPR2_SMP5_2
 ((
uöt32_t
)0x00020000Ë

	)

2072 
	#ADC_SMPR2_SMP6
 ((
uöt32_t
)0x001C0000Ë

	)

2073 
	#ADC_SMPR2_SMP6_0
 ((
uöt32_t
)0x00040000Ë

	)

2074 
	#ADC_SMPR2_SMP6_1
 ((
uöt32_t
)0x00080000Ë

	)

2075 
	#ADC_SMPR2_SMP6_2
 ((
uöt32_t
)0x00100000Ë

	)

2076 
	#ADC_SMPR2_SMP7
 ((
uöt32_t
)0x00E00000Ë

	)

2077 
	#ADC_SMPR2_SMP7_0
 ((
uöt32_t
)0x00200000Ë

	)

2078 
	#ADC_SMPR2_SMP7_1
 ((
uöt32_t
)0x00400000Ë

	)

2079 
	#ADC_SMPR2_SMP7_2
 ((
uöt32_t
)0x00800000Ë

	)

2080 
	#ADC_SMPR2_SMP8
 ((
uöt32_t
)0x07000000Ë

	)

2081 
	#ADC_SMPR2_SMP8_0
 ((
uöt32_t
)0x01000000Ë

	)

2082 
	#ADC_SMPR2_SMP8_1
 ((
uöt32_t
)0x02000000Ë

	)

2083 
	#ADC_SMPR2_SMP8_2
 ((
uöt32_t
)0x04000000Ë

	)

2084 
	#ADC_SMPR2_SMP9
 ((
uöt32_t
)0x38000000Ë

	)

2085 
	#ADC_SMPR2_SMP9_0
 ((
uöt32_t
)0x08000000Ë

	)

2086 
	#ADC_SMPR2_SMP9_1
 ((
uöt32_t
)0x10000000Ë

	)

2087 
	#ADC_SMPR2_SMP9_2
 ((
uöt32_t
)0x20000000Ë

	)

2090 
	#ADC_JOFR1_JOFFSET1
 ((
uöt16_t
)0x0FFFË

	)

2093 
	#ADC_JOFR2_JOFFSET2
 ((
uöt16_t
)0x0FFFË

	)

2096 
	#ADC_JOFR3_JOFFSET3
 ((
uöt16_t
)0x0FFFË

	)

2099 
	#ADC_JOFR4_JOFFSET4
 ((
uöt16_t
)0x0FFFË

	)

2102 
	#ADC_HTR_HT
 ((
uöt16_t
)0x0FFFË

	)

2105 
	#ADC_LTR_LT
 ((
uöt16_t
)0x0FFFË

	)

2108 
	#ADC_SQR1_SQ13
 ((
uöt32_t
)0x0000001FË

	)

2109 
	#ADC_SQR1_SQ13_0
 ((
uöt32_t
)0x00000001Ë

	)

2110 
	#ADC_SQR1_SQ13_1
 ((
uöt32_t
)0x00000002Ë

	)

2111 
	#ADC_SQR1_SQ13_2
 ((
uöt32_t
)0x00000004Ë

	)

2112 
	#ADC_SQR1_SQ13_3
 ((
uöt32_t
)0x00000008Ë

	)

2113 
	#ADC_SQR1_SQ13_4
 ((
uöt32_t
)0x00000010Ë

	)

2114 
	#ADC_SQR1_SQ14
 ((
uöt32_t
)0x000003E0Ë

	)

2115 
	#ADC_SQR1_SQ14_0
 ((
uöt32_t
)0x00000020Ë

	)

2116 
	#ADC_SQR1_SQ14_1
 ((
uöt32_t
)0x00000040Ë

	)

2117 
	#ADC_SQR1_SQ14_2
 ((
uöt32_t
)0x00000080Ë

	)

2118 
	#ADC_SQR1_SQ14_3
 ((
uöt32_t
)0x00000100Ë

	)

2119 
	#ADC_SQR1_SQ14_4
 ((
uöt32_t
)0x00000200Ë

	)

2120 
	#ADC_SQR1_SQ15
 ((
uöt32_t
)0x00007C00Ë

	)

2121 
	#ADC_SQR1_SQ15_0
 ((
uöt32_t
)0x00000400Ë

	)

2122 
	#ADC_SQR1_SQ15_1
 ((
uöt32_t
)0x00000800Ë

	)

2123 
	#ADC_SQR1_SQ15_2
 ((
uöt32_t
)0x00001000Ë

	)

2124 
	#ADC_SQR1_SQ15_3
 ((
uöt32_t
)0x00002000Ë

	)

2125 
	#ADC_SQR1_SQ15_4
 ((
uöt32_t
)0x00004000Ë

	)

2126 
	#ADC_SQR1_SQ16
 ((
uöt32_t
)0x000F8000Ë

	)

2127 
	#ADC_SQR1_SQ16_0
 ((
uöt32_t
)0x00008000Ë

	)

2128 
	#ADC_SQR1_SQ16_1
 ((
uöt32_t
)0x00010000Ë

	)

2129 
	#ADC_SQR1_SQ16_2
 ((
uöt32_t
)0x00020000Ë

	)

2130 
	#ADC_SQR1_SQ16_3
 ((
uöt32_t
)0x00040000Ë

	)

2131 
	#ADC_SQR1_SQ16_4
 ((
uöt32_t
)0x00080000Ë

	)

2132 
	#ADC_SQR1_L
 ((
uöt32_t
)0x00F00000Ë

	)

2133 
	#ADC_SQR1_L_0
 ((
uöt32_t
)0x00100000Ë

	)

2134 
	#ADC_SQR1_L_1
 ((
uöt32_t
)0x00200000Ë

	)

2135 
	#ADC_SQR1_L_2
 ((
uöt32_t
)0x00400000Ë

	)

2136 
	#ADC_SQR1_L_3
 ((
uöt32_t
)0x00800000Ë

	)

2139 
	#ADC_SQR2_SQ7
 ((
uöt32_t
)0x0000001FË

	)

2140 
	#ADC_SQR2_SQ7_0
 ((
uöt32_t
)0x00000001Ë

	)

2141 
	#ADC_SQR2_SQ7_1
 ((
uöt32_t
)0x00000002Ë

	)

2142 
	#ADC_SQR2_SQ7_2
 ((
uöt32_t
)0x00000004Ë

	)

2143 
	#ADC_SQR2_SQ7_3
 ((
uöt32_t
)0x00000008Ë

	)

2144 
	#ADC_SQR2_SQ7_4
 ((
uöt32_t
)0x00000010Ë

	)

2145 
	#ADC_SQR2_SQ8
 ((
uöt32_t
)0x000003E0Ë

	)

2146 
	#ADC_SQR2_SQ8_0
 ((
uöt32_t
)0x00000020Ë

	)

2147 
	#ADC_SQR2_SQ8_1
 ((
uöt32_t
)0x00000040Ë

	)

2148 
	#ADC_SQR2_SQ8_2
 ((
uöt32_t
)0x00000080Ë

	)

2149 
	#ADC_SQR2_SQ8_3
 ((
uöt32_t
)0x00000100Ë

	)

2150 
	#ADC_SQR2_SQ8_4
 ((
uöt32_t
)0x00000200Ë

	)

2151 
	#ADC_SQR2_SQ9
 ((
uöt32_t
)0x00007C00Ë

	)

2152 
	#ADC_SQR2_SQ9_0
 ((
uöt32_t
)0x00000400Ë

	)

2153 
	#ADC_SQR2_SQ9_1
 ((
uöt32_t
)0x00000800Ë

	)

2154 
	#ADC_SQR2_SQ9_2
 ((
uöt32_t
)0x00001000Ë

	)

2155 
	#ADC_SQR2_SQ9_3
 ((
uöt32_t
)0x00002000Ë

	)

2156 
	#ADC_SQR2_SQ9_4
 ((
uöt32_t
)0x00004000Ë

	)

2157 
	#ADC_SQR2_SQ10
 ((
uöt32_t
)0x000F8000Ë

	)

2158 
	#ADC_SQR2_SQ10_0
 ((
uöt32_t
)0x00008000Ë

	)

2159 
	#ADC_SQR2_SQ10_1
 ((
uöt32_t
)0x00010000Ë

	)

2160 
	#ADC_SQR2_SQ10_2
 ((
uöt32_t
)0x00020000Ë

	)

2161 
	#ADC_SQR2_SQ10_3
 ((
uöt32_t
)0x00040000Ë

	)

2162 
	#ADC_SQR2_SQ10_4
 ((
uöt32_t
)0x00080000Ë

	)

2163 
	#ADC_SQR2_SQ11
 ((
uöt32_t
)0x01F00000Ë

	)

2164 
	#ADC_SQR2_SQ11_0
 ((
uöt32_t
)0x00100000Ë

	)

2165 
	#ADC_SQR2_SQ11_1
 ((
uöt32_t
)0x00200000Ë

	)

2166 
	#ADC_SQR2_SQ11_2
 ((
uöt32_t
)0x00400000Ë

	)

2167 
	#ADC_SQR2_SQ11_3
 ((
uöt32_t
)0x00800000Ë

	)

2168 
	#ADC_SQR2_SQ11_4
 ((
uöt32_t
)0x01000000Ë

	)

2169 
	#ADC_SQR2_SQ12
 ((
uöt32_t
)0x3E000000Ë

	)

2170 
	#ADC_SQR2_SQ12_0
 ((
uöt32_t
)0x02000000Ë

	)

2171 
	#ADC_SQR2_SQ12_1
 ((
uöt32_t
)0x04000000Ë

	)

2172 
	#ADC_SQR2_SQ12_2
 ((
uöt32_t
)0x08000000Ë

	)

2173 
	#ADC_SQR2_SQ12_3
 ((
uöt32_t
)0x10000000Ë

	)

2174 
	#ADC_SQR2_SQ12_4
 ((
uöt32_t
)0x20000000Ë

	)

2177 
	#ADC_SQR3_SQ1
 ((
uöt32_t
)0x0000001FË

	)

2178 
	#ADC_SQR3_SQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

2179 
	#ADC_SQR3_SQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

2180 
	#ADC_SQR3_SQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

2181 
	#ADC_SQR3_SQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

2182 
	#ADC_SQR3_SQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

2183 
	#ADC_SQR3_SQ2
 ((
uöt32_t
)0x000003E0Ë

	)

2184 
	#ADC_SQR3_SQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

2185 
	#ADC_SQR3_SQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

2186 
	#ADC_SQR3_SQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

2187 
	#ADC_SQR3_SQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

2188 
	#ADC_SQR3_SQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

2189 
	#ADC_SQR3_SQ3
 ((
uöt32_t
)0x00007C00Ë

	)

2190 
	#ADC_SQR3_SQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

2191 
	#ADC_SQR3_SQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

2192 
	#ADC_SQR3_SQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

2193 
	#ADC_SQR3_SQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

2194 
	#ADC_SQR3_SQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

2195 
	#ADC_SQR3_SQ4
 ((
uöt32_t
)0x000F8000Ë

	)

2196 
	#ADC_SQR3_SQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

2197 
	#ADC_SQR3_SQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

2198 
	#ADC_SQR3_SQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

2199 
	#ADC_SQR3_SQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

2200 
	#ADC_SQR3_SQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

2201 
	#ADC_SQR3_SQ5
 ((
uöt32_t
)0x01F00000Ë

	)

2202 
	#ADC_SQR3_SQ5_0
 ((
uöt32_t
)0x00100000Ë

	)

2203 
	#ADC_SQR3_SQ5_1
 ((
uöt32_t
)0x00200000Ë

	)

2204 
	#ADC_SQR3_SQ5_2
 ((
uöt32_t
)0x00400000Ë

	)

2205 
	#ADC_SQR3_SQ5_3
 ((
uöt32_t
)0x00800000Ë

	)

2206 
	#ADC_SQR3_SQ5_4
 ((
uöt32_t
)0x01000000Ë

	)

2207 
	#ADC_SQR3_SQ6
 ((
uöt32_t
)0x3E000000Ë

	)

2208 
	#ADC_SQR3_SQ6_0
 ((
uöt32_t
)0x02000000Ë

	)

2209 
	#ADC_SQR3_SQ6_1
 ((
uöt32_t
)0x04000000Ë

	)

2210 
	#ADC_SQR3_SQ6_2
 ((
uöt32_t
)0x08000000Ë

	)

2211 
	#ADC_SQR3_SQ6_3
 ((
uöt32_t
)0x10000000Ë

	)

2212 
	#ADC_SQR3_SQ6_4
 ((
uöt32_t
)0x20000000Ë

	)

2215 
	#ADC_JSQR_JSQ1
 ((
uöt32_t
)0x0000001FË

	)

2216 
	#ADC_JSQR_JSQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

2217 
	#ADC_JSQR_JSQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

2218 
	#ADC_JSQR_JSQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

2219 
	#ADC_JSQR_JSQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

2220 
	#ADC_JSQR_JSQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

2221 
	#ADC_JSQR_JSQ2
 ((
uöt32_t
)0x000003E0Ë

	)

2222 
	#ADC_JSQR_JSQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

2223 
	#ADC_JSQR_JSQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

2224 
	#ADC_JSQR_JSQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

2225 
	#ADC_JSQR_JSQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

2226 
	#ADC_JSQR_JSQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

2227 
	#ADC_JSQR_JSQ3
 ((
uöt32_t
)0x00007C00Ë

	)

2228 
	#ADC_JSQR_JSQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

2229 
	#ADC_JSQR_JSQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

2230 
	#ADC_JSQR_JSQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

2231 
	#ADC_JSQR_JSQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

2232 
	#ADC_JSQR_JSQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

2233 
	#ADC_JSQR_JSQ4
 ((
uöt32_t
)0x000F8000Ë

	)

2234 
	#ADC_JSQR_JSQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

2235 
	#ADC_JSQR_JSQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

2236 
	#ADC_JSQR_JSQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

2237 
	#ADC_JSQR_JSQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

2238 
	#ADC_JSQR_JSQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

2239 
	#ADC_JSQR_JL
 ((
uöt32_t
)0x00300000Ë

	)

2240 
	#ADC_JSQR_JL_0
 ((
uöt32_t
)0x00100000Ë

	)

2241 
	#ADC_JSQR_JL_1
 ((
uöt32_t
)0x00200000Ë

	)

2244 
	#ADC_JDR1_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2247 
	#ADC_JDR2_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2250 
	#ADC_JDR3_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2253 
	#ADC_JDR4_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2256 
	#ADC_DR_DATA
 ((
uöt32_t
)0x0000FFFFË

	)

2257 
	#ADC_DR_ADC2DATA
 ((
uöt32_t
)0xFFFF0000Ë

	)

2260 
	#ADC_CSR_AWD1
 ((
uöt32_t
)0x00000001Ë

	)

2261 
	#ADC_CSR_EOC1
 ((
uöt32_t
)0x00000002Ë

	)

2262 
	#ADC_CSR_JEOC1
 ((
uöt32_t
)0x00000004Ë

	)

2263 
	#ADC_CSR_JSTRT1
 ((
uöt32_t
)0x00000008Ë

	)

2264 
	#ADC_CSR_STRT1
 ((
uöt32_t
)0x00000010Ë

	)

2265 
	#ADC_CSR_DOVR1
 ((
uöt32_t
)0x00000020Ë

	)

2266 
	#ADC_CSR_AWD2
 ((
uöt32_t
)0x00000100Ë

	)

2267 
	#ADC_CSR_EOC2
 ((
uöt32_t
)0x00000200Ë

	)

2268 
	#ADC_CSR_JEOC2
 ((
uöt32_t
)0x00000400Ë

	)

2269 
	#ADC_CSR_JSTRT2
 ((
uöt32_t
)0x00000800Ë

	)

2270 
	#ADC_CSR_STRT2
 ((
uöt32_t
)0x00001000Ë

	)

2271 
	#ADC_CSR_DOVR2
 ((
uöt32_t
)0x00002000Ë

	)

2272 
	#ADC_CSR_AWD3
 ((
uöt32_t
)0x00010000Ë

	)

2273 
	#ADC_CSR_EOC3
 ((
uöt32_t
)0x00020000Ë

	)

2274 
	#ADC_CSR_JEOC3
 ((
uöt32_t
)0x00040000Ë

	)

2275 
	#ADC_CSR_JSTRT3
 ((
uöt32_t
)0x00080000Ë

	)

2276 
	#ADC_CSR_STRT3
 ((
uöt32_t
)0x00100000Ë

	)

2277 
	#ADC_CSR_DOVR3
 ((
uöt32_t
)0x00200000Ë

	)

2280 
	#ADC_CCR_MULTI
 ((
uöt32_t
)0x0000001FË

	)

2281 
	#ADC_CCR_MULTI_0
 ((
uöt32_t
)0x00000001Ë

	)

2282 
	#ADC_CCR_MULTI_1
 ((
uöt32_t
)0x00000002Ë

	)

2283 
	#ADC_CCR_MULTI_2
 ((
uöt32_t
)0x00000004Ë

	)

2284 
	#ADC_CCR_MULTI_3
 ((
uöt32_t
)0x00000008Ë

	)

2285 
	#ADC_CCR_MULTI_4
 ((
uöt32_t
)0x00000010Ë

	)

2286 
	#ADC_CCR_DELAY
 ((
uöt32_t
)0x00000F00Ë

	)

2287 
	#ADC_CCR_DELAY_0
 ((
uöt32_t
)0x00000100Ë

	)

2288 
	#ADC_CCR_DELAY_1
 ((
uöt32_t
)0x00000200Ë

	)

2289 
	#ADC_CCR_DELAY_2
 ((
uöt32_t
)0x00000400Ë

	)

2290 
	#ADC_CCR_DELAY_3
 ((
uöt32_t
)0x00000800Ë

	)

2291 
	#ADC_CCR_DDS
 ((
uöt32_t
)0x00002000Ë

	)

2292 
	#ADC_CCR_DMA
 ((
uöt32_t
)0x0000C000Ë

	)

2293 
	#ADC_CCR_DMA_0
 ((
uöt32_t
)0x00004000Ë

	)

2294 
	#ADC_CCR_DMA_1
 ((
uöt32_t
)0x00008000Ë

	)

2295 
	#ADC_CCR_ADCPRE
 ((
uöt32_t
)0x00030000Ë

	)

2296 
	#ADC_CCR_ADCPRE_0
 ((
uöt32_t
)0x00010000Ë

	)

2297 
	#ADC_CCR_ADCPRE_1
 ((
uöt32_t
)0x00020000Ë

	)

2298 
	#ADC_CCR_VBATE
 ((
uöt32_t
)0x00400000Ë

	)

2299 
	#ADC_CCR_TSVREFE
 ((
uöt32_t
)0x00800000Ë

	)

2302 
	#ADC_CDR_DATA1
 ((
uöt32_t
)0x0000FFFFË

	)

2303 
	#ADC_CDR_DATA2
 ((
uöt32_t
)0xFFFF0000Ë

	)

2312 
	#CAN_MCR_INRQ
 ((
uöt16_t
)0x0001Ë

	)

2313 
	#CAN_MCR_SLEEP
 ((
uöt16_t
)0x0002Ë

	)

2314 
	#CAN_MCR_TXFP
 ((
uöt16_t
)0x0004Ë

	)

2315 
	#CAN_MCR_RFLM
 ((
uöt16_t
)0x0008Ë

	)

2316 
	#CAN_MCR_NART
 ((
uöt16_t
)0x0010Ë

	)

2317 
	#CAN_MCR_AWUM
 ((
uöt16_t
)0x0020Ë

	)

2318 
	#CAN_MCR_ABOM
 ((
uöt16_t
)0x0040Ë

	)

2319 
	#CAN_MCR_TTCM
 ((
uöt16_t
)0x0080Ë

	)

2320 
	#CAN_MCR_RESET
 ((
uöt16_t
)0x8000Ë

	)

2323 
	#CAN_MSR_INAK
 ((
uöt16_t
)0x0001Ë

	)

2324 
	#CAN_MSR_SLAK
 ((
uöt16_t
)0x0002Ë

	)

2325 
	#CAN_MSR_ERRI
 ((
uöt16_t
)0x0004Ë

	)

2326 
	#CAN_MSR_WKUI
 ((
uöt16_t
)0x0008Ë

	)

2327 
	#CAN_MSR_SLAKI
 ((
uöt16_t
)0x0010Ë

	)

2328 
	#CAN_MSR_TXM
 ((
uöt16_t
)0x0100Ë

	)

2329 
	#CAN_MSR_RXM
 ((
uöt16_t
)0x0200Ë

	)

2330 
	#CAN_MSR_SAMP
 ((
uöt16_t
)0x0400Ë

	)

2331 
	#CAN_MSR_RX
 ((
uöt16_t
)0x0800Ë

	)

2334 
	#CAN_TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

2335 
	#CAN_TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

2336 
	#CAN_TSR_ALST0
 ((
uöt32_t
)0x00000004Ë

	)

2337 
	#CAN_TSR_TERR0
 ((
uöt32_t
)0x00000008Ë

	)

2338 
	#CAN_TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

2339 
	#CAN_TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

2340 
	#CAN_TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

2341 
	#CAN_TSR_ALST1
 ((
uöt32_t
)0x00000400Ë

	)

2342 
	#CAN_TSR_TERR1
 ((
uöt32_t
)0x00000800Ë

	)

2343 
	#CAN_TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

2344 
	#CAN_TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

2345 
	#CAN_TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

2346 
	#CAN_TSR_ALST2
 ((
uöt32_t
)0x00040000Ë

	)

2347 
	#CAN_TSR_TERR2
 ((
uöt32_t
)0x00080000Ë

	)

2348 
	#CAN_TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

2349 
	#CAN_TSR_CODE
 ((
uöt32_t
)0x03000000Ë

	)

2351 
	#CAN_TSR_TME
 ((
uöt32_t
)0x1C000000Ë

	)

2352 
	#CAN_TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

2353 
	#CAN_TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

2354 
	#CAN_TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

2356 
	#CAN_TSR_LOW
 ((
uöt32_t
)0xE0000000Ë

	)

2357 
	#CAN_TSR_LOW0
 ((
uöt32_t
)0x20000000Ë

	)

2358 
	#CAN_TSR_LOW1
 ((
uöt32_t
)0x40000000Ë

	)

2359 
	#CAN_TSR_LOW2
 ((
uöt32_t
)0x80000000Ë

	)

2362 
	#CAN_RF0R_FMP0
 ((
uöt8_t
)0x03Ë

	)

2363 
	#CAN_RF0R_FULL0
 ((
uöt8_t
)0x08Ë

	)

2364 
	#CAN_RF0R_FOVR0
 ((
uöt8_t
)0x10Ë

	)

2365 
	#CAN_RF0R_RFOM0
 ((
uöt8_t
)0x20Ë

	)

2368 
	#CAN_RF1R_FMP1
 ((
uöt8_t
)0x03Ë

	)

2369 
	#CAN_RF1R_FULL1
 ((
uöt8_t
)0x08Ë

	)

2370 
	#CAN_RF1R_FOVR1
 ((
uöt8_t
)0x10Ë

	)

2371 
	#CAN_RF1R_RFOM1
 ((
uöt8_t
)0x20Ë

	)

2374 
	#CAN_IER_TMEIE
 ((
uöt32_t
)0x00000001Ë

	)

2375 
	#CAN_IER_FMPIE0
 ((
uöt32_t
)0x00000002Ë

	)

2376 
	#CAN_IER_FFIE0
 ((
uöt32_t
)0x00000004Ë

	)

2377 
	#CAN_IER_FOVIE0
 ((
uöt32_t
)0x00000008Ë

	)

2378 
	#CAN_IER_FMPIE1
 ((
uöt32_t
)0x00000010Ë

	)

2379 
	#CAN_IER_FFIE1
 ((
uöt32_t
)0x00000020Ë

	)

2380 
	#CAN_IER_FOVIE1
 ((
uöt32_t
)0x00000040Ë

	)

2381 
	#CAN_IER_EWGIE
 ((
uöt32_t
)0x00000100Ë

	)

2382 
	#CAN_IER_EPVIE
 ((
uöt32_t
)0x00000200Ë

	)

2383 
	#CAN_IER_BOFIE
 ((
uöt32_t
)0x00000400Ë

	)

2384 
	#CAN_IER_LECIE
 ((
uöt32_t
)0x00000800Ë

	)

2385 
	#CAN_IER_ERRIE
 ((
uöt32_t
)0x00008000Ë

	)

2386 
	#CAN_IER_WKUIE
 ((
uöt32_t
)0x00010000Ë

	)

2387 
	#CAN_IER_SLKIE
 ((
uöt32_t
)0x00020000Ë

	)

2390 
	#CAN_ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

2391 
	#CAN_ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

2392 
	#CAN_ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

2394 
	#CAN_ESR_LEC
 ((
uöt32_t
)0x00000070Ë

	)

2395 
	#CAN_ESR_LEC_0
 ((
uöt32_t
)0x00000010Ë

	)

2396 
	#CAN_ESR_LEC_1
 ((
uöt32_t
)0x00000020Ë

	)

2397 
	#CAN_ESR_LEC_2
 ((
uöt32_t
)0x00000040Ë

	)

2399 
	#CAN_ESR_TEC
 ((
uöt32_t
)0x00FF0000Ë

	)

2400 
	#CAN_ESR_REC
 ((
uöt32_t
)0xFF000000Ë

	)

2403 
	#CAN_BTR_BRP
 ((
uöt32_t
)0x000003FFË

	)

2404 
	#CAN_BTR_TS1
 ((
uöt32_t
)0x000F0000Ë

	)

2405 
	#CAN_BTR_TS2
 ((
uöt32_t
)0x00700000Ë

	)

2406 
	#CAN_BTR_SJW
 ((
uöt32_t
)0x03000000Ë

	)

2407 
	#CAN_BTR_LBKM
 ((
uöt32_t
)0x40000000Ë

	)

2408 
	#CAN_BTR_SILM
 ((
uöt32_t
)0x80000000Ë

	)

2412 
	#CAN_TI0R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2413 
	#CAN_TI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2414 
	#CAN_TI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2415 
	#CAN_TI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2416 
	#CAN_TI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2419 
	#CAN_TDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2420 
	#CAN_TDT0R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2421 
	#CAN_TDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2424 
	#CAN_TDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2425 
	#CAN_TDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2426 
	#CAN_TDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2427 
	#CAN_TDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2430 
	#CAN_TDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2431 
	#CAN_TDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2432 
	#CAN_TDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2433 
	#CAN_TDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2436 
	#CAN_TI1R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2437 
	#CAN_TI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2438 
	#CAN_TI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2439 
	#CAN_TI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2440 
	#CAN_TI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2443 
	#CAN_TDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2444 
	#CAN_TDT1R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2445 
	#CAN_TDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2448 
	#CAN_TDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2449 
	#CAN_TDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2450 
	#CAN_TDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2451 
	#CAN_TDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2454 
	#CAN_TDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2455 
	#CAN_TDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2456 
	#CAN_TDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2457 
	#CAN_TDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2460 
	#CAN_TI2R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2461 
	#CAN_TI2R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2462 
	#CAN_TI2R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2463 
	#CAN_TI2R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2464 
	#CAN_TI2R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2467 
	#CAN_TDT2R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2468 
	#CAN_TDT2R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2469 
	#CAN_TDT2R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2472 
	#CAN_TDL2R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2473 
	#CAN_TDL2R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2474 
	#CAN_TDL2R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2475 
	#CAN_TDL2R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2478 
	#CAN_TDH2R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2479 
	#CAN_TDH2R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2480 
	#CAN_TDH2R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2481 
	#CAN_TDH2R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2484 
	#CAN_RI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2485 
	#CAN_RI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2486 
	#CAN_RI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2487 
	#CAN_RI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2490 
	#CAN_RDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2491 
	#CAN_RDT0R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

2492 
	#CAN_RDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2495 
	#CAN_RDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2496 
	#CAN_RDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2497 
	#CAN_RDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2498 
	#CAN_RDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2501 
	#CAN_RDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2502 
	#CAN_RDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2503 
	#CAN_RDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2504 
	#CAN_RDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2507 
	#CAN_RI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2508 
	#CAN_RI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2509 
	#CAN_RI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2510 
	#CAN_RI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2513 
	#CAN_RDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2514 
	#CAN_RDT1R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

2515 
	#CAN_RDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2518 
	#CAN_RDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2519 
	#CAN_RDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2520 
	#CAN_RDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2521 
	#CAN_RDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2524 
	#CAN_RDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2525 
	#CAN_RDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2526 
	#CAN_RDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2527 
	#CAN_RDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2531 
	#CAN_FMR_FINIT
 ((
uöt8_t
)0x01Ë

	)

2534 
	#CAN_FM1R_FBM
 ((
uöt16_t
)0x3FFFË

	)

2535 
	#CAN_FM1R_FBM0
 ((
uöt16_t
)0x0001Ë

	)

2536 
	#CAN_FM1R_FBM1
 ((
uöt16_t
)0x0002Ë

	)

2537 
	#CAN_FM1R_FBM2
 ((
uöt16_t
)0x0004Ë

	)

2538 
	#CAN_FM1R_FBM3
 ((
uöt16_t
)0x0008Ë

	)

2539 
	#CAN_FM1R_FBM4
 ((
uöt16_t
)0x0010Ë

	)

2540 
	#CAN_FM1R_FBM5
 ((
uöt16_t
)0x0020Ë

	)

2541 
	#CAN_FM1R_FBM6
 ((
uöt16_t
)0x0040Ë

	)

2542 
	#CAN_FM1R_FBM7
 ((
uöt16_t
)0x0080Ë

	)

2543 
	#CAN_FM1R_FBM8
 ((
uöt16_t
)0x0100Ë

	)

2544 
	#CAN_FM1R_FBM9
 ((
uöt16_t
)0x0200Ë

	)

2545 
	#CAN_FM1R_FBM10
 ((
uöt16_t
)0x0400Ë

	)

2546 
	#CAN_FM1R_FBM11
 ((
uöt16_t
)0x0800Ë

	)

2547 
	#CAN_FM1R_FBM12
 ((
uöt16_t
)0x1000Ë

	)

2548 
	#CAN_FM1R_FBM13
 ((
uöt16_t
)0x2000Ë

	)

2551 
	#CAN_FS1R_FSC
 ((
uöt16_t
)0x3FFFË

	)

2552 
	#CAN_FS1R_FSC0
 ((
uöt16_t
)0x0001Ë

	)

2553 
	#CAN_FS1R_FSC1
 ((
uöt16_t
)0x0002Ë

	)

2554 
	#CAN_FS1R_FSC2
 ((
uöt16_t
)0x0004Ë

	)

2555 
	#CAN_FS1R_FSC3
 ((
uöt16_t
)0x0008Ë

	)

2556 
	#CAN_FS1R_FSC4
 ((
uöt16_t
)0x0010Ë

	)

2557 
	#CAN_FS1R_FSC5
 ((
uöt16_t
)0x0020Ë

	)

2558 
	#CAN_FS1R_FSC6
 ((
uöt16_t
)0x0040Ë

	)

2559 
	#CAN_FS1R_FSC7
 ((
uöt16_t
)0x0080Ë

	)

2560 
	#CAN_FS1R_FSC8
 ((
uöt16_t
)0x0100Ë

	)

2561 
	#CAN_FS1R_FSC9
 ((
uöt16_t
)0x0200Ë

	)

2562 
	#CAN_FS1R_FSC10
 ((
uöt16_t
)0x0400Ë

	)

2563 
	#CAN_FS1R_FSC11
 ((
uöt16_t
)0x0800Ë

	)

2564 
	#CAN_FS1R_FSC12
 ((
uöt16_t
)0x1000Ë

	)

2565 
	#CAN_FS1R_FSC13
 ((
uöt16_t
)0x2000Ë

	)

2568 
	#CAN_FFA1R_FFA
 ((
uöt16_t
)0x3FFFË

	)

2569 
	#CAN_FFA1R_FFA0
 ((
uöt16_t
)0x0001Ë

	)

2570 
	#CAN_FFA1R_FFA1
 ((
uöt16_t
)0x0002Ë

	)

2571 
	#CAN_FFA1R_FFA2
 ((
uöt16_t
)0x0004Ë

	)

2572 
	#CAN_FFA1R_FFA3
 ((
uöt16_t
)0x0008Ë

	)

2573 
	#CAN_FFA1R_FFA4
 ((
uöt16_t
)0x0010Ë

	)

2574 
	#CAN_FFA1R_FFA5
 ((
uöt16_t
)0x0020Ë

	)

2575 
	#CAN_FFA1R_FFA6
 ((
uöt16_t
)0x0040Ë

	)

2576 
	#CAN_FFA1R_FFA7
 ((
uöt16_t
)0x0080Ë

	)

2577 
	#CAN_FFA1R_FFA8
 ((
uöt16_t
)0x0100Ë

	)

2578 
	#CAN_FFA1R_FFA9
 ((
uöt16_t
)0x0200Ë

	)

2579 
	#CAN_FFA1R_FFA10
 ((
uöt16_t
)0x0400Ë

	)

2580 
	#CAN_FFA1R_FFA11
 ((
uöt16_t
)0x0800Ë

	)

2581 
	#CAN_FFA1R_FFA12
 ((
uöt16_t
)0x1000Ë

	)

2582 
	#CAN_FFA1R_FFA13
 ((
uöt16_t
)0x2000Ë

	)

2585 
	#CAN_FA1R_FACT
 ((
uöt16_t
)0x3FFFË

	)

2586 
	#CAN_FA1R_FACT0
 ((
uöt16_t
)0x0001Ë

	)

2587 
	#CAN_FA1R_FACT1
 ((
uöt16_t
)0x0002Ë

	)

2588 
	#CAN_FA1R_FACT2
 ((
uöt16_t
)0x0004Ë

	)

2589 
	#CAN_FA1R_FACT3
 ((
uöt16_t
)0x0008Ë

	)

2590 
	#CAN_FA1R_FACT4
 ((
uöt16_t
)0x0010Ë

	)

2591 
	#CAN_FA1R_FACT5
 ((
uöt16_t
)0x0020Ë

	)

2592 
	#CAN_FA1R_FACT6
 ((
uöt16_t
)0x0040Ë

	)

2593 
	#CAN_FA1R_FACT7
 ((
uöt16_t
)0x0080Ë

	)

2594 
	#CAN_FA1R_FACT8
 ((
uöt16_t
)0x0100Ë

	)

2595 
	#CAN_FA1R_FACT9
 ((
uöt16_t
)0x0200Ë

	)

2596 
	#CAN_FA1R_FACT10
 ((
uöt16_t
)0x0400Ë

	)

2597 
	#CAN_FA1R_FACT11
 ((
uöt16_t
)0x0800Ë

	)

2598 
	#CAN_FA1R_FACT12
 ((
uöt16_t
)0x1000Ë

	)

2599 
	#CAN_FA1R_FACT13
 ((
uöt16_t
)0x2000Ë

	)

2602 
	#CAN_F0R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2603 
	#CAN_F0R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2604 
	#CAN_F0R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2605 
	#CAN_F0R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2606 
	#CAN_F0R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2607 
	#CAN_F0R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2608 
	#CAN_F0R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2609 
	#CAN_F0R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2610 
	#CAN_F0R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2611 
	#CAN_F0R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2612 
	#CAN_F0R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2613 
	#CAN_F0R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2614 
	#CAN_F0R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2615 
	#CAN_F0R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2616 
	#CAN_F0R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2617 
	#CAN_F0R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2618 
	#CAN_F0R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2619 
	#CAN_F0R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2620 
	#CAN_F0R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2621 
	#CAN_F0R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2622 
	#CAN_F0R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2623 
	#CAN_F0R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2624 
	#CAN_F0R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2625 
	#CAN_F0R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2626 
	#CAN_F0R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2627 
	#CAN_F0R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2628 
	#CAN_F0R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2629 
	#CAN_F0R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2630 
	#CAN_F0R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2631 
	#CAN_F0R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2632 
	#CAN_F0R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2633 
	#CAN_F0R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2636 
	#CAN_F1R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2637 
	#CAN_F1R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2638 
	#CAN_F1R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2639 
	#CAN_F1R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2640 
	#CAN_F1R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2641 
	#CAN_F1R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2642 
	#CAN_F1R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2643 
	#CAN_F1R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2644 
	#CAN_F1R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2645 
	#CAN_F1R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2646 
	#CAN_F1R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2647 
	#CAN_F1R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2648 
	#CAN_F1R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2649 
	#CAN_F1R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2650 
	#CAN_F1R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2651 
	#CAN_F1R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2652 
	#CAN_F1R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2653 
	#CAN_F1R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2654 
	#CAN_F1R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2655 
	#CAN_F1R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2656 
	#CAN_F1R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2657 
	#CAN_F1R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2658 
	#CAN_F1R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2659 
	#CAN_F1R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2660 
	#CAN_F1R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2661 
	#CAN_F1R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2662 
	#CAN_F1R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2663 
	#CAN_F1R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2664 
	#CAN_F1R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2665 
	#CAN_F1R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2666 
	#CAN_F1R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2667 
	#CAN_F1R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2670 
	#CAN_F2R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2671 
	#CAN_F2R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2672 
	#CAN_F2R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2673 
	#CAN_F2R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2674 
	#CAN_F2R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2675 
	#CAN_F2R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2676 
	#CAN_F2R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2677 
	#CAN_F2R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2678 
	#CAN_F2R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2679 
	#CAN_F2R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2680 
	#CAN_F2R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2681 
	#CAN_F2R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2682 
	#CAN_F2R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2683 
	#CAN_F2R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2684 
	#CAN_F2R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2685 
	#CAN_F2R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2686 
	#CAN_F2R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2687 
	#CAN_F2R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2688 
	#CAN_F2R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2689 
	#CAN_F2R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2690 
	#CAN_F2R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2691 
	#CAN_F2R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2692 
	#CAN_F2R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2693 
	#CAN_F2R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2694 
	#CAN_F2R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2695 
	#CAN_F2R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2696 
	#CAN_F2R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2697 
	#CAN_F2R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2698 
	#CAN_F2R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2699 
	#CAN_F2R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2700 
	#CAN_F2R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2701 
	#CAN_F2R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2704 
	#CAN_F3R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2705 
	#CAN_F3R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2706 
	#CAN_F3R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2707 
	#CAN_F3R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2708 
	#CAN_F3R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2709 
	#CAN_F3R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2710 
	#CAN_F3R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2711 
	#CAN_F3R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2712 
	#CAN_F3R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2713 
	#CAN_F3R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2714 
	#CAN_F3R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2715 
	#CAN_F3R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2716 
	#CAN_F3R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2717 
	#CAN_F3R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2718 
	#CAN_F3R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2719 
	#CAN_F3R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2720 
	#CAN_F3R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2721 
	#CAN_F3R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2722 
	#CAN_F3R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2723 
	#CAN_F3R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2724 
	#CAN_F3R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2725 
	#CAN_F3R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2726 
	#CAN_F3R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2727 
	#CAN_F3R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2728 
	#CAN_F3R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2729 
	#CAN_F3R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2730 
	#CAN_F3R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2731 
	#CAN_F3R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2732 
	#CAN_F3R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2733 
	#CAN_F3R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2734 
	#CAN_F3R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2735 
	#CAN_F3R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2738 
	#CAN_F4R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2739 
	#CAN_F4R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2740 
	#CAN_F4R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2741 
	#CAN_F4R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2742 
	#CAN_F4R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2743 
	#CAN_F4R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2744 
	#CAN_F4R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2745 
	#CAN_F4R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2746 
	#CAN_F4R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2747 
	#CAN_F4R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2748 
	#CAN_F4R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2749 
	#CAN_F4R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2750 
	#CAN_F4R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2751 
	#CAN_F4R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2752 
	#CAN_F4R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2753 
	#CAN_F4R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2754 
	#CAN_F4R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2755 
	#CAN_F4R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2756 
	#CAN_F4R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2757 
	#CAN_F4R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2758 
	#CAN_F4R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2759 
	#CAN_F4R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2760 
	#CAN_F4R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2761 
	#CAN_F4R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2762 
	#CAN_F4R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2763 
	#CAN_F4R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2764 
	#CAN_F4R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2765 
	#CAN_F4R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2766 
	#CAN_F4R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2767 
	#CAN_F4R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2768 
	#CAN_F4R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2769 
	#CAN_F4R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2772 
	#CAN_F5R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2773 
	#CAN_F5R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2774 
	#CAN_F5R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2775 
	#CAN_F5R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2776 
	#CAN_F5R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2777 
	#CAN_F5R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2778 
	#CAN_F5R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2779 
	#CAN_F5R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2780 
	#CAN_F5R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2781 
	#CAN_F5R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2782 
	#CAN_F5R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2783 
	#CAN_F5R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2784 
	#CAN_F5R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2785 
	#CAN_F5R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2786 
	#CAN_F5R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2787 
	#CAN_F5R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2788 
	#CAN_F5R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2789 
	#CAN_F5R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2790 
	#CAN_F5R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2791 
	#CAN_F5R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2792 
	#CAN_F5R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2793 
	#CAN_F5R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2794 
	#CAN_F5R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2795 
	#CAN_F5R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2796 
	#CAN_F5R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2797 
	#CAN_F5R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2798 
	#CAN_F5R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2799 
	#CAN_F5R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2800 
	#CAN_F5R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2801 
	#CAN_F5R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2802 
	#CAN_F5R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2803 
	#CAN_F5R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2806 
	#CAN_F6R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2807 
	#CAN_F6R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2808 
	#CAN_F6R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2809 
	#CAN_F6R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2810 
	#CAN_F6R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2811 
	#CAN_F6R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2812 
	#CAN_F6R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2813 
	#CAN_F6R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2814 
	#CAN_F6R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2815 
	#CAN_F6R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2816 
	#CAN_F6R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2817 
	#CAN_F6R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2818 
	#CAN_F6R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2819 
	#CAN_F6R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2820 
	#CAN_F6R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2821 
	#CAN_F6R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2822 
	#CAN_F6R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2823 
	#CAN_F6R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2824 
	#CAN_F6R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2825 
	#CAN_F6R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2826 
	#CAN_F6R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2827 
	#CAN_F6R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2828 
	#CAN_F6R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2829 
	#CAN_F6R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2830 
	#CAN_F6R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2831 
	#CAN_F6R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2832 
	#CAN_F6R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2833 
	#CAN_F6R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2834 
	#CAN_F6R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2835 
	#CAN_F6R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2836 
	#CAN_F6R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2837 
	#CAN_F6R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2840 
	#CAN_F7R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2841 
	#CAN_F7R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2842 
	#CAN_F7R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2843 
	#CAN_F7R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2844 
	#CAN_F7R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2845 
	#CAN_F7R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2846 
	#CAN_F7R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2847 
	#CAN_F7R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2848 
	#CAN_F7R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2849 
	#CAN_F7R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2850 
	#CAN_F7R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2851 
	#CAN_F7R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2852 
	#CAN_F7R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2853 
	#CAN_F7R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2854 
	#CAN_F7R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2855 
	#CAN_F7R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2856 
	#CAN_F7R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2857 
	#CAN_F7R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2858 
	#CAN_F7R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2859 
	#CAN_F7R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2860 
	#CAN_F7R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2861 
	#CAN_F7R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2862 
	#CAN_F7R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2863 
	#CAN_F7R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2864 
	#CAN_F7R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2865 
	#CAN_F7R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2866 
	#CAN_F7R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2867 
	#CAN_F7R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2868 
	#CAN_F7R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2869 
	#CAN_F7R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2870 
	#CAN_F7R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2871 
	#CAN_F7R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2874 
	#CAN_F8R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2875 
	#CAN_F8R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2876 
	#CAN_F8R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2877 
	#CAN_F8R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2878 
	#CAN_F8R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2879 
	#CAN_F8R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2880 
	#CAN_F8R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2881 
	#CAN_F8R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2882 
	#CAN_F8R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2883 
	#CAN_F8R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2884 
	#CAN_F8R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2885 
	#CAN_F8R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2886 
	#CAN_F8R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2887 
	#CAN_F8R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2888 
	#CAN_F8R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2889 
	#CAN_F8R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2890 
	#CAN_F8R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2891 
	#CAN_F8R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2892 
	#CAN_F8R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2893 
	#CAN_F8R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2894 
	#CAN_F8R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2895 
	#CAN_F8R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2896 
	#CAN_F8R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2897 
	#CAN_F8R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2898 
	#CAN_F8R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2899 
	#CAN_F8R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2900 
	#CAN_F8R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2901 
	#CAN_F8R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2902 
	#CAN_F8R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2903 
	#CAN_F8R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2904 
	#CAN_F8R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2905 
	#CAN_F8R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2908 
	#CAN_F9R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2909 
	#CAN_F9R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2910 
	#CAN_F9R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2911 
	#CAN_F9R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2912 
	#CAN_F9R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2913 
	#CAN_F9R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2914 
	#CAN_F9R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2915 
	#CAN_F9R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2916 
	#CAN_F9R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2917 
	#CAN_F9R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2918 
	#CAN_F9R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2919 
	#CAN_F9R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2920 
	#CAN_F9R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2921 
	#CAN_F9R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2922 
	#CAN_F9R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2923 
	#CAN_F9R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2924 
	#CAN_F9R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2925 
	#CAN_F9R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2926 
	#CAN_F9R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2927 
	#CAN_F9R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2928 
	#CAN_F9R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2929 
	#CAN_F9R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2930 
	#CAN_F9R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2931 
	#CAN_F9R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2932 
	#CAN_F9R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2933 
	#CAN_F9R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2934 
	#CAN_F9R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2935 
	#CAN_F9R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2936 
	#CAN_F9R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2937 
	#CAN_F9R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2938 
	#CAN_F9R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2939 
	#CAN_F9R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2942 
	#CAN_F10R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2943 
	#CAN_F10R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2944 
	#CAN_F10R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2945 
	#CAN_F10R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2946 
	#CAN_F10R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2947 
	#CAN_F10R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2948 
	#CAN_F10R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2949 
	#CAN_F10R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2950 
	#CAN_F10R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2951 
	#CAN_F10R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2952 
	#CAN_F10R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2953 
	#CAN_F10R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2954 
	#CAN_F10R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2955 
	#CAN_F10R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2956 
	#CAN_F10R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2957 
	#CAN_F10R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2958 
	#CAN_F10R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2959 
	#CAN_F10R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2960 
	#CAN_F10R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2961 
	#CAN_F10R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2962 
	#CAN_F10R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2963 
	#CAN_F10R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2964 
	#CAN_F10R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2965 
	#CAN_F10R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2966 
	#CAN_F10R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2967 
	#CAN_F10R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2968 
	#CAN_F10R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2969 
	#CAN_F10R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2970 
	#CAN_F10R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2971 
	#CAN_F10R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2972 
	#CAN_F10R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2973 
	#CAN_F10R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2976 
	#CAN_F11R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2977 
	#CAN_F11R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2978 
	#CAN_F11R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2979 
	#CAN_F11R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2980 
	#CAN_F11R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2981 
	#CAN_F11R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2982 
	#CAN_F11R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2983 
	#CAN_F11R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2984 
	#CAN_F11R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2985 
	#CAN_F11R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2986 
	#CAN_F11R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2987 
	#CAN_F11R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2988 
	#CAN_F11R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2989 
	#CAN_F11R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2990 
	#CAN_F11R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2991 
	#CAN_F11R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2992 
	#CAN_F11R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2993 
	#CAN_F11R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2994 
	#CAN_F11R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2995 
	#CAN_F11R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2996 
	#CAN_F11R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2997 
	#CAN_F11R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2998 
	#CAN_F11R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2999 
	#CAN_F11R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3000 
	#CAN_F11R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3001 
	#CAN_F11R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3002 
	#CAN_F11R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3003 
	#CAN_F11R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3004 
	#CAN_F11R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3005 
	#CAN_F11R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3006 
	#CAN_F11R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3007 
	#CAN_F11R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3010 
	#CAN_F12R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3011 
	#CAN_F12R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3012 
	#CAN_F12R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3013 
	#CAN_F12R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3014 
	#CAN_F12R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3015 
	#CAN_F12R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3016 
	#CAN_F12R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3017 
	#CAN_F12R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3018 
	#CAN_F12R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3019 
	#CAN_F12R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3020 
	#CAN_F12R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3021 
	#CAN_F12R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3022 
	#CAN_F12R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3023 
	#CAN_F12R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3024 
	#CAN_F12R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3025 
	#CAN_F12R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3026 
	#CAN_F12R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3027 
	#CAN_F12R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3028 
	#CAN_F12R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3029 
	#CAN_F12R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3030 
	#CAN_F12R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3031 
	#CAN_F12R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3032 
	#CAN_F12R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3033 
	#CAN_F12R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3034 
	#CAN_F12R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3035 
	#CAN_F12R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3036 
	#CAN_F12R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3037 
	#CAN_F12R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3038 
	#CAN_F12R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3039 
	#CAN_F12R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3040 
	#CAN_F12R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3041 
	#CAN_F12R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3044 
	#CAN_F13R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3045 
	#CAN_F13R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3046 
	#CAN_F13R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3047 
	#CAN_F13R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3048 
	#CAN_F13R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3049 
	#CAN_F13R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3050 
	#CAN_F13R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3051 
	#CAN_F13R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3052 
	#CAN_F13R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3053 
	#CAN_F13R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3054 
	#CAN_F13R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3055 
	#CAN_F13R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3056 
	#CAN_F13R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3057 
	#CAN_F13R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3058 
	#CAN_F13R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3059 
	#CAN_F13R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3060 
	#CAN_F13R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3061 
	#CAN_F13R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3062 
	#CAN_F13R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3063 
	#CAN_F13R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3064 
	#CAN_F13R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3065 
	#CAN_F13R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3066 
	#CAN_F13R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3067 
	#CAN_F13R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3068 
	#CAN_F13R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3069 
	#CAN_F13R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3070 
	#CAN_F13R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3071 
	#CAN_F13R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3072 
	#CAN_F13R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3073 
	#CAN_F13R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3074 
	#CAN_F13R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3075 
	#CAN_F13R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3078 
	#CAN_F0R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3079 
	#CAN_F0R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3080 
	#CAN_F0R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3081 
	#CAN_F0R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3082 
	#CAN_F0R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3083 
	#CAN_F0R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3084 
	#CAN_F0R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3085 
	#CAN_F0R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3086 
	#CAN_F0R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3087 
	#CAN_F0R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3088 
	#CAN_F0R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3089 
	#CAN_F0R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3090 
	#CAN_F0R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3091 
	#CAN_F0R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3092 
	#CAN_F0R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3093 
	#CAN_F0R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3094 
	#CAN_F0R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3095 
	#CAN_F0R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3096 
	#CAN_F0R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3097 
	#CAN_F0R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3098 
	#CAN_F0R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3099 
	#CAN_F0R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3100 
	#CAN_F0R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3101 
	#CAN_F0R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3102 
	#CAN_F0R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3103 
	#CAN_F0R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3104 
	#CAN_F0R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3105 
	#CAN_F0R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3106 
	#CAN_F0R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3107 
	#CAN_F0R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3108 
	#CAN_F0R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3109 
	#CAN_F0R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3112 
	#CAN_F1R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3113 
	#CAN_F1R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3114 
	#CAN_F1R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3115 
	#CAN_F1R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3116 
	#CAN_F1R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3117 
	#CAN_F1R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3118 
	#CAN_F1R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3119 
	#CAN_F1R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3120 
	#CAN_F1R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3121 
	#CAN_F1R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3122 
	#CAN_F1R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3123 
	#CAN_F1R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3124 
	#CAN_F1R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3125 
	#CAN_F1R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3126 
	#CAN_F1R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3127 
	#CAN_F1R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3128 
	#CAN_F1R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3129 
	#CAN_F1R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3130 
	#CAN_F1R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3131 
	#CAN_F1R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3132 
	#CAN_F1R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3133 
	#CAN_F1R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3134 
	#CAN_F1R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3135 
	#CAN_F1R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3136 
	#CAN_F1R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3137 
	#CAN_F1R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3138 
	#CAN_F1R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3139 
	#CAN_F1R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3140 
	#CAN_F1R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3141 
	#CAN_F1R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3142 
	#CAN_F1R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3143 
	#CAN_F1R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3146 
	#CAN_F2R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3147 
	#CAN_F2R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3148 
	#CAN_F2R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3149 
	#CAN_F2R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3150 
	#CAN_F2R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3151 
	#CAN_F2R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3152 
	#CAN_F2R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3153 
	#CAN_F2R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3154 
	#CAN_F2R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3155 
	#CAN_F2R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3156 
	#CAN_F2R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3157 
	#CAN_F2R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3158 
	#CAN_F2R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3159 
	#CAN_F2R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3160 
	#CAN_F2R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3161 
	#CAN_F2R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3162 
	#CAN_F2R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3163 
	#CAN_F2R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3164 
	#CAN_F2R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3165 
	#CAN_F2R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3166 
	#CAN_F2R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3167 
	#CAN_F2R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3168 
	#CAN_F2R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3169 
	#CAN_F2R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3170 
	#CAN_F2R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3171 
	#CAN_F2R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3172 
	#CAN_F2R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3173 
	#CAN_F2R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3174 
	#CAN_F2R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3175 
	#CAN_F2R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3176 
	#CAN_F2R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3177 
	#CAN_F2R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3180 
	#CAN_F3R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3181 
	#CAN_F3R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3182 
	#CAN_F3R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3183 
	#CAN_F3R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3184 
	#CAN_F3R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3185 
	#CAN_F3R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3186 
	#CAN_F3R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3187 
	#CAN_F3R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3188 
	#CAN_F3R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3189 
	#CAN_F3R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3190 
	#CAN_F3R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3191 
	#CAN_F3R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3192 
	#CAN_F3R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3193 
	#CAN_F3R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3194 
	#CAN_F3R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3195 
	#CAN_F3R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3196 
	#CAN_F3R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3197 
	#CAN_F3R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3198 
	#CAN_F3R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3199 
	#CAN_F3R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3200 
	#CAN_F3R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3201 
	#CAN_F3R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3202 
	#CAN_F3R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3203 
	#CAN_F3R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3204 
	#CAN_F3R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3205 
	#CAN_F3R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3206 
	#CAN_F3R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3207 
	#CAN_F3R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3208 
	#CAN_F3R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3209 
	#CAN_F3R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3210 
	#CAN_F3R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3211 
	#CAN_F3R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3214 
	#CAN_F4R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3215 
	#CAN_F4R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3216 
	#CAN_F4R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3217 
	#CAN_F4R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3218 
	#CAN_F4R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3219 
	#CAN_F4R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3220 
	#CAN_F4R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3221 
	#CAN_F4R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3222 
	#CAN_F4R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3223 
	#CAN_F4R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3224 
	#CAN_F4R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3225 
	#CAN_F4R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3226 
	#CAN_F4R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3227 
	#CAN_F4R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3228 
	#CAN_F4R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3229 
	#CAN_F4R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3230 
	#CAN_F4R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3231 
	#CAN_F4R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3232 
	#CAN_F4R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3233 
	#CAN_F4R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3234 
	#CAN_F4R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3235 
	#CAN_F4R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3236 
	#CAN_F4R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3237 
	#CAN_F4R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3238 
	#CAN_F4R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3239 
	#CAN_F4R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3240 
	#CAN_F4R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3241 
	#CAN_F4R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3242 
	#CAN_F4R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3243 
	#CAN_F4R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3244 
	#CAN_F4R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3245 
	#CAN_F4R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3248 
	#CAN_F5R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3249 
	#CAN_F5R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3250 
	#CAN_F5R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3251 
	#CAN_F5R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3252 
	#CAN_F5R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3253 
	#CAN_F5R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3254 
	#CAN_F5R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3255 
	#CAN_F5R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3256 
	#CAN_F5R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3257 
	#CAN_F5R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3258 
	#CAN_F5R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3259 
	#CAN_F5R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3260 
	#CAN_F5R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3261 
	#CAN_F5R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3262 
	#CAN_F5R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3263 
	#CAN_F5R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3264 
	#CAN_F5R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3265 
	#CAN_F5R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3266 
	#CAN_F5R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3267 
	#CAN_F5R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3268 
	#CAN_F5R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3269 
	#CAN_F5R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3270 
	#CAN_F5R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3271 
	#CAN_F5R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3272 
	#CAN_F5R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3273 
	#CAN_F5R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3274 
	#CAN_F5R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3275 
	#CAN_F5R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3276 
	#CAN_F5R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3277 
	#CAN_F5R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3278 
	#CAN_F5R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3279 
	#CAN_F5R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3282 
	#CAN_F6R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3283 
	#CAN_F6R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3284 
	#CAN_F6R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3285 
	#CAN_F6R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3286 
	#CAN_F6R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3287 
	#CAN_F6R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3288 
	#CAN_F6R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3289 
	#CAN_F6R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3290 
	#CAN_F6R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3291 
	#CAN_F6R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3292 
	#CAN_F6R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3293 
	#CAN_F6R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3294 
	#CAN_F6R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3295 
	#CAN_F6R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3296 
	#CAN_F6R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3297 
	#CAN_F6R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3298 
	#CAN_F6R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3299 
	#CAN_F6R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3300 
	#CAN_F6R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3301 
	#CAN_F6R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3302 
	#CAN_F6R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3303 
	#CAN_F6R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3304 
	#CAN_F6R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3305 
	#CAN_F6R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3306 
	#CAN_F6R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3307 
	#CAN_F6R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3308 
	#CAN_F6R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3309 
	#CAN_F6R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3310 
	#CAN_F6R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3311 
	#CAN_F6R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3312 
	#CAN_F6R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3313 
	#CAN_F6R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3316 
	#CAN_F7R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3317 
	#CAN_F7R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3318 
	#CAN_F7R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3319 
	#CAN_F7R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3320 
	#CAN_F7R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3321 
	#CAN_F7R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3322 
	#CAN_F7R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3323 
	#CAN_F7R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3324 
	#CAN_F7R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3325 
	#CAN_F7R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3326 
	#CAN_F7R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3327 
	#CAN_F7R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3328 
	#CAN_F7R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3329 
	#CAN_F7R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3330 
	#CAN_F7R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3331 
	#CAN_F7R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3332 
	#CAN_F7R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3333 
	#CAN_F7R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3334 
	#CAN_F7R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3335 
	#CAN_F7R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3336 
	#CAN_F7R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3337 
	#CAN_F7R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3338 
	#CAN_F7R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3339 
	#CAN_F7R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3340 
	#CAN_F7R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3341 
	#CAN_F7R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3342 
	#CAN_F7R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3343 
	#CAN_F7R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3344 
	#CAN_F7R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3345 
	#CAN_F7R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3346 
	#CAN_F7R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3347 
	#CAN_F7R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3350 
	#CAN_F8R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3351 
	#CAN_F8R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3352 
	#CAN_F8R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3353 
	#CAN_F8R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3354 
	#CAN_F8R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3355 
	#CAN_F8R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3356 
	#CAN_F8R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3357 
	#CAN_F8R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3358 
	#CAN_F8R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3359 
	#CAN_F8R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3360 
	#CAN_F8R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3361 
	#CAN_F8R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3362 
	#CAN_F8R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3363 
	#CAN_F8R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3364 
	#CAN_F8R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3365 
	#CAN_F8R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3366 
	#CAN_F8R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3367 
	#CAN_F8R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3368 
	#CAN_F8R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3369 
	#CAN_F8R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3370 
	#CAN_F8R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3371 
	#CAN_F8R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3372 
	#CAN_F8R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3373 
	#CAN_F8R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3374 
	#CAN_F8R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3375 
	#CAN_F8R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3376 
	#CAN_F8R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3377 
	#CAN_F8R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3378 
	#CAN_F8R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3379 
	#CAN_F8R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3380 
	#CAN_F8R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3381 
	#CAN_F8R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3384 
	#CAN_F9R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3385 
	#CAN_F9R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3386 
	#CAN_F9R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3387 
	#CAN_F9R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3388 
	#CAN_F9R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3389 
	#CAN_F9R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3390 
	#CAN_F9R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3391 
	#CAN_F9R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3392 
	#CAN_F9R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3393 
	#CAN_F9R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3394 
	#CAN_F9R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3395 
	#CAN_F9R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3396 
	#CAN_F9R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3397 
	#CAN_F9R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3398 
	#CAN_F9R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3399 
	#CAN_F9R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3400 
	#CAN_F9R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3401 
	#CAN_F9R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3402 
	#CAN_F9R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3403 
	#CAN_F9R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3404 
	#CAN_F9R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3405 
	#CAN_F9R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3406 
	#CAN_F9R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3407 
	#CAN_F9R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3408 
	#CAN_F9R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3409 
	#CAN_F9R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3410 
	#CAN_F9R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3411 
	#CAN_F9R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3412 
	#CAN_F9R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3413 
	#CAN_F9R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3414 
	#CAN_F9R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3415 
	#CAN_F9R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3418 
	#CAN_F10R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3419 
	#CAN_F10R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3420 
	#CAN_F10R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3421 
	#CAN_F10R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3422 
	#CAN_F10R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3423 
	#CAN_F10R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3424 
	#CAN_F10R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3425 
	#CAN_F10R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3426 
	#CAN_F10R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3427 
	#CAN_F10R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3428 
	#CAN_F10R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3429 
	#CAN_F10R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3430 
	#CAN_F10R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3431 
	#CAN_F10R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3432 
	#CAN_F10R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3433 
	#CAN_F10R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3434 
	#CAN_F10R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3435 
	#CAN_F10R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3436 
	#CAN_F10R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3437 
	#CAN_F10R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3438 
	#CAN_F10R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3439 
	#CAN_F10R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3440 
	#CAN_F10R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3441 
	#CAN_F10R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3442 
	#CAN_F10R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3443 
	#CAN_F10R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3444 
	#CAN_F10R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3445 
	#CAN_F10R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3446 
	#CAN_F10R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3447 
	#CAN_F10R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3448 
	#CAN_F10R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3449 
	#CAN_F10R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3452 
	#CAN_F11R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3453 
	#CAN_F11R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3454 
	#CAN_F11R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3455 
	#CAN_F11R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3456 
	#CAN_F11R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3457 
	#CAN_F11R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3458 
	#CAN_F11R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3459 
	#CAN_F11R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3460 
	#CAN_F11R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3461 
	#CAN_F11R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3462 
	#CAN_F11R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3463 
	#CAN_F11R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3464 
	#CAN_F11R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3465 
	#CAN_F11R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3466 
	#CAN_F11R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3467 
	#CAN_F11R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3468 
	#CAN_F11R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3469 
	#CAN_F11R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3470 
	#CAN_F11R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3471 
	#CAN_F11R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3472 
	#CAN_F11R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3473 
	#CAN_F11R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3474 
	#CAN_F11R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3475 
	#CAN_F11R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3476 
	#CAN_F11R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3477 
	#CAN_F11R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3478 
	#CAN_F11R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3479 
	#CAN_F11R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3480 
	#CAN_F11R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3481 
	#CAN_F11R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3482 
	#CAN_F11R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3483 
	#CAN_F11R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3486 
	#CAN_F12R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3487 
	#CAN_F12R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3488 
	#CAN_F12R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3489 
	#CAN_F12R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3490 
	#CAN_F12R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3491 
	#CAN_F12R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3492 
	#CAN_F12R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3493 
	#CAN_F12R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3494 
	#CAN_F12R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3495 
	#CAN_F12R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3496 
	#CAN_F12R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3497 
	#CAN_F12R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3498 
	#CAN_F12R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3499 
	#CAN_F12R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3500 
	#CAN_F12R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3501 
	#CAN_F12R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3502 
	#CAN_F12R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3503 
	#CAN_F12R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3504 
	#CAN_F12R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3505 
	#CAN_F12R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3506 
	#CAN_F12R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3507 
	#CAN_F12R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3508 
	#CAN_F12R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3509 
	#CAN_F12R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3510 
	#CAN_F12R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3511 
	#CAN_F12R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3512 
	#CAN_F12R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3513 
	#CAN_F12R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3514 
	#CAN_F12R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3515 
	#CAN_F12R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3516 
	#CAN_F12R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3517 
	#CAN_F12R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3520 
	#CAN_F13R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3521 
	#CAN_F13R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3522 
	#CAN_F13R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3523 
	#CAN_F13R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3524 
	#CAN_F13R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3525 
	#CAN_F13R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3526 
	#CAN_F13R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3527 
	#CAN_F13R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3528 
	#CAN_F13R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3529 
	#CAN_F13R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3530 
	#CAN_F13R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3531 
	#CAN_F13R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3532 
	#CAN_F13R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3533 
	#CAN_F13R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3534 
	#CAN_F13R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3535 
	#CAN_F13R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3536 
	#CAN_F13R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3537 
	#CAN_F13R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3538 
	#CAN_F13R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3539 
	#CAN_F13R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3540 
	#CAN_F13R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3541 
	#CAN_F13R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3542 
	#CAN_F13R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3543 
	#CAN_F13R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3544 
	#CAN_F13R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3545 
	#CAN_F13R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3546 
	#CAN_F13R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3547 
	#CAN_F13R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3548 
	#CAN_F13R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3549 
	#CAN_F13R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3550 
	#CAN_F13R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3551 
	#CAN_F13R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3553 #i‡
	`deföed
(
STM32F446xx
)

3561 
	#CEC_CR_CECEN
 ((
uöt32_t
)0x00000001Ë

	)

3562 
	#CEC_CR_TXSOM
 ((
uöt32_t
)0x00000002Ë

	)

3563 
	#CEC_CR_TXEOM
 ((
uöt32_t
)0x00000004Ë

	)

3566 
	#CEC_CFGR_SFT
 ((
uöt32_t
)0x00000007Ë

	)

3567 
	#CEC_CFGR_RXTOL
 ((
uöt32_t
)0x00000008Ë

	)

3568 
	#CEC_CFGR_BRESTP
 ((
uöt32_t
)0x00000010Ë

	)

3569 
	#CEC_CFGR_BREGEN
 ((
uöt32_t
)0x00000020Ë

	)

3570 
	#CEC_CFGR_LREGEN
 ((
uöt32_t
)0x00000040Ë

	)

3571 
	#CEC_CFGR_SFTOPT
 ((
uöt32_t
)0x00000100Ë

	)

3572 
	#CEC_CFGR_BRDNOGEN
 ((
uöt32_t
)0x00000080Ë

	)

3573 
	#CEC_CFGR_OAR
 ((
uöt32_t
)0x7FFF0000Ë

	)

3574 
	#CEC_CFGR_LSTN
 ((
uöt32_t
)0x80000000Ë

	)

3577 
	#CEC_TXDR_TXD
 ((
uöt32_t
)0x000000FFË

	)

3580 
	#CEC_TXDR_RXD
 ((
uöt32_t
)0x000000FFË

	)

3583 
	#CEC_ISR_RXBR
 ((
uöt32_t
)0x00000001Ë

	)

3584 
	#CEC_ISR_RXEND
 ((
uöt32_t
)0x00000002Ë

	)

3585 
	#CEC_ISR_RXOVR
 ((
uöt32_t
)0x00000004Ë

	)

3586 
	#CEC_ISR_BRE
 ((
uöt32_t
)0x00000008Ë

	)

3587 
	#CEC_ISR_SBPE
 ((
uöt32_t
)0x00000010Ë

	)

3588 
	#CEC_ISR_LBPE
 ((
uöt32_t
)0x00000020Ë

	)

3589 
	#CEC_ISR_RXACKE
 ((
uöt32_t
)0x00000040Ë

	)

3590 
	#CEC_ISR_ARBLST
 ((
uöt32_t
)0x00000080Ë

	)

3591 
	#CEC_ISR_TXBR
 ((
uöt32_t
)0x00000100Ë

	)

3592 
	#CEC_ISR_TXEND
 ((
uöt32_t
)0x00000200Ë

	)

3593 
	#CEC_ISR_TXUDR
 ((
uöt32_t
)0x00000400Ë

	)

3594 
	#CEC_ISR_TXERR
 ((
uöt32_t
)0x00000800Ë

	)

3595 
	#CEC_ISR_TXACKE
 ((
uöt32_t
)0x00001000Ë

	)

3598 
	#CEC_IER_RXBRIE
 ((
uöt32_t
)0x00000001Ë

	)

3599 
	#CEC_IER_RXENDIE
 ((
uöt32_t
)0x00000002Ë

	)

3600 
	#CEC_IER_RXOVRIE
 ((
uöt32_t
)0x00000004Ë

	)

3601 
	#CEC_IER_BREIEIE
 ((
uöt32_t
)0x00000008Ë

	)

3602 
	#CEC_IER_SBPEIE
 ((
uöt32_t
)0x00000010Ë

	)

3603 
	#CEC_IER_LBPEIE
 ((
uöt32_t
)0x00000020Ë

	)

3604 
	#CEC_IER_RXACKEIE
 ((
uöt32_t
)0x00000040Ë

	)

3605 
	#CEC_IER_ARBLSTIE
 ((
uöt32_t
)0x00000080Ë

	)

3606 
	#CEC_IER_TXBRIE
 ((
uöt32_t
)0x00000100Ë

	)

3607 
	#CEC_IER_TXENDIE
 ((
uöt32_t
)0x00000200Ë

	)

3608 
	#CEC_IER_TXUDRIE
 ((
uöt32_t
)0x00000400Ë

	)

3609 
	#CEC_IER_TXERRIE
 ((
uöt32_t
)0x00000800Ë

	)

3610 
	#CEC_IER_TXACKEIE
 ((
uöt32_t
)0x00001000Ë

	)

3619 
	#CRC_DR_DR
 ((
uöt32_t
)0xFFFFFFFFË

	)

3623 
	#CRC_IDR_IDR
 ((
uöt8_t
)0xFFË

	)

3627 
	#CRC_CR_RESET
 ((
uöt8_t
)0x01Ë

	)

3635 
	#CRYP_CR_ALGODIR
 ((
uöt32_t
)0x00000004)

	)

3637 
	#CRYP_CR_ALGOMODE
 ((
uöt32_t
)0x00080038)

	)

3638 
	#CRYP_CR_ALGOMODE_0
 ((
uöt32_t
)0x00000008)

	)

3639 
	#CRYP_CR_ALGOMODE_1
 ((
uöt32_t
)0x00000010)

	)

3640 
	#CRYP_CR_ALGOMODE_2
 ((
uöt32_t
)0x00000020)

	)

3641 
	#CRYP_CR_ALGOMODE_TDES_ECB
 ((
uöt32_t
)0x00000000)

	)

3642 
	#CRYP_CR_ALGOMODE_TDES_CBC
 ((
uöt32_t
)0x00000008)

	)

3643 
	#CRYP_CR_ALGOMODE_DES_ECB
 ((
uöt32_t
)0x00000010)

	)

3644 
	#CRYP_CR_ALGOMODE_DES_CBC
 ((
uöt32_t
)0x00000018)

	)

3645 
	#CRYP_CR_ALGOMODE_AES_ECB
 ((
uöt32_t
)0x00000020)

	)

3646 
	#CRYP_CR_ALGOMODE_AES_CBC
 ((
uöt32_t
)0x00000028)

	)

3647 
	#CRYP_CR_ALGOMODE_AES_CTR
 ((
uöt32_t
)0x00000030)

	)

3648 
	#CRYP_CR_ALGOMODE_AES_KEY
 ((
uöt32_t
)0x00000038)

	)

3650 
	#CRYP_CR_DATATYPE
 ((
uöt32_t
)0x000000C0)

	)

3651 
	#CRYP_CR_DATATYPE_0
 ((
uöt32_t
)0x00000040)

	)

3652 
	#CRYP_CR_DATATYPE_1
 ((
uöt32_t
)0x00000080)

	)

3653 
	#CRYP_CR_KEYSIZE
 ((
uöt32_t
)0x00000300)

	)

3654 
	#CRYP_CR_KEYSIZE_0
 ((
uöt32_t
)0x00000100)

	)

3655 
	#CRYP_CR_KEYSIZE_1
 ((
uöt32_t
)0x00000200)

	)

3656 
	#CRYP_CR_FFLUSH
 ((
uöt32_t
)0x00004000)

	)

3657 
	#CRYP_CR_CRYPEN
 ((
uöt32_t
)0x00008000)

	)

3659 
	#CRYP_CR_GCM_CCMPH
 ((
uöt32_t
)0x00030000)

	)

3660 
	#CRYP_CR_GCM_CCMPH_0
 ((
uöt32_t
)0x00010000)

	)

3661 
	#CRYP_CR_GCM_CCMPH_1
 ((
uöt32_t
)0x00020000)

	)

3662 
	#CRYP_CR_ALGOMODE_3
 ((
uöt32_t
)0x00080000)

	)

3665 
	#CRYP_SR_IFEM
 ((
uöt32_t
)0x00000001)

	)

3666 
	#CRYP_SR_IFNF
 ((
uöt32_t
)0x00000002)

	)

3667 
	#CRYP_SR_OFNE
 ((
uöt32_t
)0x00000004)

	)

3668 
	#CRYP_SR_OFFU
 ((
uöt32_t
)0x00000008)

	)

3669 
	#CRYP_SR_BUSY
 ((
uöt32_t
)0x00000010)

	)

3671 
	#CRYP_DMACR_DIEN
 ((
uöt32_t
)0x00000001)

	)

3672 
	#CRYP_DMACR_DOEN
 ((
uöt32_t
)0x00000002)

	)

3674 
	#CRYP_IMSCR_INIM
 ((
uöt32_t
)0x00000001)

	)

3675 
	#CRYP_IMSCR_OUTIM
 ((
uöt32_t
)0x00000002)

	)

3677 
	#CRYP_RISR_OUTRIS
 ((
uöt32_t
)0x00000001)

	)

3678 
	#CRYP_RISR_INRIS
 ((
uöt32_t
)0x00000002)

	)

3680 
	#CRYP_MISR_INMIS
 ((
uöt32_t
)0x00000001)

	)

3681 
	#CRYP_MISR_OUTMIS
 ((
uöt32_t
)0x00000002)

	)

3689 
	#DAC_CR_EN1
 ((
uöt32_t
)0x00000001Ë

	)

3690 
	#DAC_CR_BOFF1
 ((
uöt32_t
)0x00000002Ë

	)

3691 
	#DAC_CR_TEN1
 ((
uöt32_t
)0x00000004Ë

	)

3693 
	#DAC_CR_TSEL1
 ((
uöt32_t
)0x00000038Ë

	)

3694 
	#DAC_CR_TSEL1_0
 ((
uöt32_t
)0x00000008Ë

	)

3695 
	#DAC_CR_TSEL1_1
 ((
uöt32_t
)0x00000010Ë

	)

3696 
	#DAC_CR_TSEL1_2
 ((
uöt32_t
)0x00000020Ë

	)

3698 
	#DAC_CR_WAVE1
 ((
uöt32_t
)0x000000C0Ë

	)

3699 
	#DAC_CR_WAVE1_0
 ((
uöt32_t
)0x00000040Ë

	)

3700 
	#DAC_CR_WAVE1_1
 ((
uöt32_t
)0x00000080Ë

	)

3702 
	#DAC_CR_MAMP1
 ((
uöt32_t
)0x00000F00Ë

	)

3703 
	#DAC_CR_MAMP1_0
 ((
uöt32_t
)0x00000100Ë

	)

3704 
	#DAC_CR_MAMP1_1
 ((
uöt32_t
)0x00000200Ë

	)

3705 
	#DAC_CR_MAMP1_2
 ((
uöt32_t
)0x00000400Ë

	)

3706 
	#DAC_CR_MAMP1_3
 ((
uöt32_t
)0x00000800Ë

	)

3708 
	#DAC_CR_DMAEN1
 ((
uöt32_t
)0x00001000Ë

	)

3709 
	#DAC_CR_EN2
 ((
uöt32_t
)0x00010000Ë

	)

3710 
	#DAC_CR_BOFF2
 ((
uöt32_t
)0x00020000Ë

	)

3711 
	#DAC_CR_TEN2
 ((
uöt32_t
)0x00040000Ë

	)

3713 
	#DAC_CR_TSEL2
 ((
uöt32_t
)0x00380000Ë

	)

3714 
	#DAC_CR_TSEL2_0
 ((
uöt32_t
)0x00080000Ë

	)

3715 
	#DAC_CR_TSEL2_1
 ((
uöt32_t
)0x00100000Ë

	)

3716 
	#DAC_CR_TSEL2_2
 ((
uöt32_t
)0x00200000Ë

	)

3718 
	#DAC_CR_WAVE2
 ((
uöt32_t
)0x00C00000Ë

	)

3719 
	#DAC_CR_WAVE2_0
 ((
uöt32_t
)0x00400000Ë

	)

3720 
	#DAC_CR_WAVE2_1
 ((
uöt32_t
)0x00800000Ë

	)

3722 
	#DAC_CR_MAMP2
 ((
uöt32_t
)0x0F000000Ë

	)

3723 
	#DAC_CR_MAMP2_0
 ((
uöt32_t
)0x01000000Ë

	)

3724 
	#DAC_CR_MAMP2_1
 ((
uöt32_t
)0x02000000Ë

	)

3725 
	#DAC_CR_MAMP2_2
 ((
uöt32_t
)0x04000000Ë

	)

3726 
	#DAC_CR_MAMP2_3
 ((
uöt32_t
)0x08000000Ë

	)

3728 
	#DAC_CR_DMAEN2
 ((
uöt32_t
)0x10000000Ë

	)

3731 
	#DAC_SWTRIGR_SWTRIG1
 ((
uöt8_t
)0x01Ë

	)

3732 
	#DAC_SWTRIGR_SWTRIG2
 ((
uöt8_t
)0x02Ë

	)

3735 
	#DAC_DHR12R1_DACC1DHR
 ((
uöt16_t
)0x0FFFË

	)

3738 
	#DAC_DHR12L1_DACC1DHR
 ((
uöt16_t
)0xFFF0Ë

	)

3741 
	#DAC_DHR8R1_DACC1DHR
 ((
uöt8_t
)0xFFË

	)

3744 
	#DAC_DHR12R2_DACC2DHR
 ((
uöt16_t
)0x0FFFË

	)

3747 
	#DAC_DHR12L2_DACC2DHR
 ((
uöt16_t
)0xFFF0Ë

	)

3750 
	#DAC_DHR8R2_DACC2DHR
 ((
uöt8_t
)0xFFË

	)

3753 
	#DAC_DHR12RD_DACC1DHR
 ((
uöt32_t
)0x00000FFFË

	)

3754 
	#DAC_DHR12RD_DACC2DHR
 ((
uöt32_t
)0x0FFF0000Ë

	)

3757 
	#DAC_DHR12LD_DACC1DHR
 ((
uöt32_t
)0x0000FFF0Ë

	)

3758 
	#DAC_DHR12LD_DACC2DHR
 ((
uöt32_t
)0xFFF00000Ë

	)

3761 
	#DAC_DHR8RD_DACC1DHR
 ((
uöt16_t
)0x00FFË

	)

3762 
	#DAC_DHR8RD_DACC2DHR
 ((
uöt16_t
)0xFF00Ë

	)

3765 
	#DAC_DOR1_DACC1DOR
 ((
uöt16_t
)0x0FFFË

	)

3768 
	#DAC_DOR2_DACC2DOR
 ((
uöt16_t
)0x0FFFË

	)

3771 
	#DAC_SR_DMAUDR1
 ((
uöt32_t
)0x00002000Ë

	)

3772 
	#DAC_SR_DMAUDR2
 ((
uöt32_t
)0x20000000Ë

	)

3786 
	#DCMI_CR_CAPTURE
 ((
uöt32_t
)0x00000001)

	)

3787 
	#DCMI_CR_CM
 ((
uöt32_t
)0x00000002)

	)

3788 
	#DCMI_CR_CROP
 ((
uöt32_t
)0x00000004)

	)

3789 
	#DCMI_CR_JPEG
 ((
uöt32_t
)0x00000008)

	)

3790 
	#DCMI_CR_ESS
 ((
uöt32_t
)0x00000010)

	)

3791 
	#DCMI_CR_PCKPOL
 ((
uöt32_t
)0x00000020)

	)

3792 
	#DCMI_CR_HSPOL
 ((
uöt32_t
)0x00000040)

	)

3793 
	#DCMI_CR_VSPOL
 ((
uöt32_t
)0x00000080)

	)

3794 
	#DCMI_CR_FCRC_0
 ((
uöt32_t
)0x00000100)

	)

3795 
	#DCMI_CR_FCRC_1
 ((
uöt32_t
)0x00000200)

	)

3796 
	#DCMI_CR_EDM_0
 ((
uöt32_t
)0x00000400)

	)

3797 
	#DCMI_CR_EDM_1
 ((
uöt32_t
)0x00000800)

	)

3798 
	#DCMI_CR_CRE
 ((
uöt32_t
)0x00001000)

	)

3799 
	#DCMI_CR_ENABLE
 ((
uöt32_t
)0x00004000)

	)

3802 
	#DCMI_SR_HSYNC
 ((
uöt32_t
)0x00000001)

	)

3803 
	#DCMI_SR_VSYNC
 ((
uöt32_t
)0x00000002)

	)

3804 
	#DCMI_SR_FNE
 ((
uöt32_t
)0x00000004)

	)

3807 
	#DCMI_RISR_FRAME_RIS
 ((
uöt32_t
)0x00000001)

	)

3808 
	#DCMI_RISR_OVF_RIS
 ((
uöt32_t
)0x00000002)

	)

3809 
	#DCMI_RISR_ERR_RIS
 ((
uöt32_t
)0x00000004)

	)

3810 
	#DCMI_RISR_VSYNC_RIS
 ((
uöt32_t
)0x00000008)

	)

3811 
	#DCMI_RISR_LINE_RIS
 ((
uöt32_t
)0x00000010)

	)

3814 
	#DCMI_IER_FRAME_IE
 ((
uöt32_t
)0x00000001)

	)

3815 
	#DCMI_IER_OVF_IE
 ((
uöt32_t
)0x00000002)

	)

3816 
	#DCMI_IER_ERR_IE
 ((
uöt32_t
)0x00000004)

	)

3817 
	#DCMI_IER_VSYNC_IE
 ((
uöt32_t
)0x00000008)

	)

3818 
	#DCMI_IER_LINE_IE
 ((
uöt32_t
)0x00000010)

	)

3821 
	#DCMI_MISR_FRAME_MIS
 ((
uöt32_t
)0x00000001)

	)

3822 
	#DCMI_MISR_OVF_MIS
 ((
uöt32_t
)0x00000002)

	)

3823 
	#DCMI_MISR_ERR_MIS
 ((
uöt32_t
)0x00000004)

	)

3824 
	#DCMI_MISR_VSYNC_MIS
 ((
uöt32_t
)0x00000008)

	)

3825 
	#DCMI_MISR_LINE_MIS
 ((
uöt32_t
)0x00000010)

	)

3828 
	#DCMI_ICR_FRAME_ISC
 ((
uöt32_t
)0x00000001)

	)

3829 
	#DCMI_ICR_OVF_ISC
 ((
uöt32_t
)0x00000002)

	)

3830 
	#DCMI_ICR_ERR_ISC
 ((
uöt32_t
)0x00000004)

	)

3831 
	#DCMI_ICR_VSYNC_ISC
 ((
uöt32_t
)0x00000008)

	)

3832 
	#DCMI_ICR_LINE_ISC
 ((
uöt32_t
)0x00000010)

	)

3840 
	#DMA_SxCR_CHSEL
 ((
uöt32_t
)0x0E000000)

	)

3841 
	#DMA_SxCR_CHSEL_0
 ((
uöt32_t
)0x02000000)

	)

3842 
	#DMA_SxCR_CHSEL_1
 ((
uöt32_t
)0x04000000)

	)

3843 
	#DMA_SxCR_CHSEL_2
 ((
uöt32_t
)0x08000000)

	)

3844 
	#DMA_SxCR_MBURST
 ((
uöt32_t
)0x01800000)

	)

3845 
	#DMA_SxCR_MBURST_0
 ((
uöt32_t
)0x00800000)

	)

3846 
	#DMA_SxCR_MBURST_1
 ((
uöt32_t
)0x01000000)

	)

3847 
	#DMA_SxCR_PBURST
 ((
uöt32_t
)0x00600000)

	)

3848 
	#DMA_SxCR_PBURST_0
 ((
uöt32_t
)0x00200000)

	)

3849 
	#DMA_SxCR_PBURST_1
 ((
uöt32_t
)0x00400000)

	)

3850 
	#DMA_SxCR_ACK
 ((
uöt32_t
)0x00100000)

	)

3851 
	#DMA_SxCR_CT
 ((
uöt32_t
)0x00080000)

	)

3852 
	#DMA_SxCR_DBM
 ((
uöt32_t
)0x00040000)

	)

3853 
	#DMA_SxCR_PL
 ((
uöt32_t
)0x00030000)

	)

3854 
	#DMA_SxCR_PL_0
 ((
uöt32_t
)0x00010000)

	)

3855 
	#DMA_SxCR_PL_1
 ((
uöt32_t
)0x00020000)

	)

3856 
	#DMA_SxCR_PINCOS
 ((
uöt32_t
)0x00008000)

	)

3857 
	#DMA_SxCR_MSIZE
 ((
uöt32_t
)0x00006000)

	)

3858 
	#DMA_SxCR_MSIZE_0
 ((
uöt32_t
)0x00002000)

	)

3859 
	#DMA_SxCR_MSIZE_1
 ((
uöt32_t
)0x00004000)

	)

3860 
	#DMA_SxCR_PSIZE
 ((
uöt32_t
)0x00001800)

	)

3861 
	#DMA_SxCR_PSIZE_0
 ((
uöt32_t
)0x00000800)

	)

3862 
	#DMA_SxCR_PSIZE_1
 ((
uöt32_t
)0x00001000)

	)

3863 
	#DMA_SxCR_MINC
 ((
uöt32_t
)0x00000400)

	)

3864 
	#DMA_SxCR_PINC
 ((
uöt32_t
)0x00000200)

	)

3865 
	#DMA_SxCR_CIRC
 ((
uöt32_t
)0x00000100)

	)

3866 
	#DMA_SxCR_DIR
 ((
uöt32_t
)0x000000C0)

	)

3867 
	#DMA_SxCR_DIR_0
 ((
uöt32_t
)0x00000040)

	)

3868 
	#DMA_SxCR_DIR_1
 ((
uöt32_t
)0x00000080)

	)

3869 
	#DMA_SxCR_PFCTRL
 ((
uöt32_t
)0x00000020)

	)

3870 
	#DMA_SxCR_TCIE
 ((
uöt32_t
)0x00000010)

	)

3871 
	#DMA_SxCR_HTIE
 ((
uöt32_t
)0x00000008)

	)

3872 
	#DMA_SxCR_TEIE
 ((
uöt32_t
)0x00000004)

	)

3873 
	#DMA_SxCR_DMEIE
 ((
uöt32_t
)0x00000002)

	)

3874 
	#DMA_SxCR_EN
 ((
uöt32_t
)0x00000001)

	)

3877 
	#DMA_SxNDT
 ((
uöt32_t
)0x0000FFFF)

	)

3878 
	#DMA_SxNDT_0
 ((
uöt32_t
)0x00000001)

	)

3879 
	#DMA_SxNDT_1
 ((
uöt32_t
)0x00000002)

	)

3880 
	#DMA_SxNDT_2
 ((
uöt32_t
)0x00000004)

	)

3881 
	#DMA_SxNDT_3
 ((
uöt32_t
)0x00000008)

	)

3882 
	#DMA_SxNDT_4
 ((
uöt32_t
)0x00000010)

	)

3883 
	#DMA_SxNDT_5
 ((
uöt32_t
)0x00000020)

	)

3884 
	#DMA_SxNDT_6
 ((
uöt32_t
)0x00000040)

	)

3885 
	#DMA_SxNDT_7
 ((
uöt32_t
)0x00000080)

	)

3886 
	#DMA_SxNDT_8
 ((
uöt32_t
)0x00000100)

	)

3887 
	#DMA_SxNDT_9
 ((
uöt32_t
)0x00000200)

	)

3888 
	#DMA_SxNDT_10
 ((
uöt32_t
)0x00000400)

	)

3889 
	#DMA_SxNDT_11
 ((
uöt32_t
)0x00000800)

	)

3890 
	#DMA_SxNDT_12
 ((
uöt32_t
)0x00001000)

	)

3891 
	#DMA_SxNDT_13
 ((
uöt32_t
)0x00002000)

	)

3892 
	#DMA_SxNDT_14
 ((
uöt32_t
)0x00004000)

	)

3893 
	#DMA_SxNDT_15
 ((
uöt32_t
)0x00008000)

	)

3896 
	#DMA_SxFCR_FEIE
 ((
uöt32_t
)0x00000080)

	)

3897 
	#DMA_SxFCR_FS
 ((
uöt32_t
)0x00000038)

	)

3898 
	#DMA_SxFCR_FS_0
 ((
uöt32_t
)0x00000008)

	)

3899 
	#DMA_SxFCR_FS_1
 ((
uöt32_t
)0x00000010)

	)

3900 
	#DMA_SxFCR_FS_2
 ((
uöt32_t
)0x00000020)

	)

3901 
	#DMA_SxFCR_DMDIS
 ((
uöt32_t
)0x00000004)

	)

3902 
	#DMA_SxFCR_FTH
 ((
uöt32_t
)0x00000003)

	)

3903 
	#DMA_SxFCR_FTH_0
 ((
uöt32_t
)0x00000001)

	)

3904 
	#DMA_SxFCR_FTH_1
 ((
uöt32_t
)0x00000002)

	)

3907 
	#DMA_LISR_TCIF3
 ((
uöt32_t
)0x08000000)

	)

3908 
	#DMA_LISR_HTIF3
 ((
uöt32_t
)0x04000000)

	)

3909 
	#DMA_LISR_TEIF3
 ((
uöt32_t
)0x02000000)

	)

3910 
	#DMA_LISR_DMEIF3
 ((
uöt32_t
)0x01000000)

	)

3911 
	#DMA_LISR_FEIF3
 ((
uöt32_t
)0x00400000)

	)

3912 
	#DMA_LISR_TCIF2
 ((
uöt32_t
)0x00200000)

	)

3913 
	#DMA_LISR_HTIF2
 ((
uöt32_t
)0x00100000)

	)

3914 
	#DMA_LISR_TEIF2
 ((
uöt32_t
)0x00080000)

	)

3915 
	#DMA_LISR_DMEIF2
 ((
uöt32_t
)0x00040000)

	)

3916 
	#DMA_LISR_FEIF2
 ((
uöt32_t
)0x00010000)

	)

3917 
	#DMA_LISR_TCIF1
 ((
uöt32_t
)0x00000800)

	)

3918 
	#DMA_LISR_HTIF1
 ((
uöt32_t
)0x00000400)

	)

3919 
	#DMA_LISR_TEIF1
 ((
uöt32_t
)0x00000200)

	)

3920 
	#DMA_LISR_DMEIF1
 ((
uöt32_t
)0x00000100)

	)

3921 
	#DMA_LISR_FEIF1
 ((
uöt32_t
)0x00000040)

	)

3922 
	#DMA_LISR_TCIF0
 ((
uöt32_t
)0x00000020)

	)

3923 
	#DMA_LISR_HTIF0
 ((
uöt32_t
)0x00000010)

	)

3924 
	#DMA_LISR_TEIF0
 ((
uöt32_t
)0x00000008)

	)

3925 
	#DMA_LISR_DMEIF0
 ((
uöt32_t
)0x00000004)

	)

3926 
	#DMA_LISR_FEIF0
 ((
uöt32_t
)0x00000001)

	)

3929 
	#DMA_HISR_TCIF7
 ((
uöt32_t
)0x08000000)

	)

3930 
	#DMA_HISR_HTIF7
 ((
uöt32_t
)0x04000000)

	)

3931 
	#DMA_HISR_TEIF7
 ((
uöt32_t
)0x02000000)

	)

3932 
	#DMA_HISR_DMEIF7
 ((
uöt32_t
)0x01000000)

	)

3933 
	#DMA_HISR_FEIF7
 ((
uöt32_t
)0x00400000)

	)

3934 
	#DMA_HISR_TCIF6
 ((
uöt32_t
)0x00200000)

	)

3935 
	#DMA_HISR_HTIF6
 ((
uöt32_t
)0x00100000)

	)

3936 
	#DMA_HISR_TEIF6
 ((
uöt32_t
)0x00080000)

	)

3937 
	#DMA_HISR_DMEIF6
 ((
uöt32_t
)0x00040000)

	)

3938 
	#DMA_HISR_FEIF6
 ((
uöt32_t
)0x00010000)

	)

3939 
	#DMA_HISR_TCIF5
 ((
uöt32_t
)0x00000800)

	)

3940 
	#DMA_HISR_HTIF5
 ((
uöt32_t
)0x00000400)

	)

3941 
	#DMA_HISR_TEIF5
 ((
uöt32_t
)0x00000200)

	)

3942 
	#DMA_HISR_DMEIF5
 ((
uöt32_t
)0x00000100)

	)

3943 
	#DMA_HISR_FEIF5
 ((
uöt32_t
)0x00000040)

	)

3944 
	#DMA_HISR_TCIF4
 ((
uöt32_t
)0x00000020)

	)

3945 
	#DMA_HISR_HTIF4
 ((
uöt32_t
)0x00000010)

	)

3946 
	#DMA_HISR_TEIF4
 ((
uöt32_t
)0x00000008)

	)

3947 
	#DMA_HISR_DMEIF4
 ((
uöt32_t
)0x00000004)

	)

3948 
	#DMA_HISR_FEIF4
 ((
uöt32_t
)0x00000001)

	)

3951 
	#DMA_LIFCR_CTCIF3
 ((
uöt32_t
)0x08000000)

	)

3952 
	#DMA_LIFCR_CHTIF3
 ((
uöt32_t
)0x04000000)

	)

3953 
	#DMA_LIFCR_CTEIF3
 ((
uöt32_t
)0x02000000)

	)

3954 
	#DMA_LIFCR_CDMEIF3
 ((
uöt32_t
)0x01000000)

	)

3955 
	#DMA_LIFCR_CFEIF3
 ((
uöt32_t
)0x00400000)

	)

3956 
	#DMA_LIFCR_CTCIF2
 ((
uöt32_t
)0x00200000)

	)

3957 
	#DMA_LIFCR_CHTIF2
 ((
uöt32_t
)0x00100000)

	)

3958 
	#DMA_LIFCR_CTEIF2
 ((
uöt32_t
)0x00080000)

	)

3959 
	#DMA_LIFCR_CDMEIF2
 ((
uöt32_t
)0x00040000)

	)

3960 
	#DMA_LIFCR_CFEIF2
 ((
uöt32_t
)0x00010000)

	)

3961 
	#DMA_LIFCR_CTCIF1
 ((
uöt32_t
)0x00000800)

	)

3962 
	#DMA_LIFCR_CHTIF1
 ((
uöt32_t
)0x00000400)

	)

3963 
	#DMA_LIFCR_CTEIF1
 ((
uöt32_t
)0x00000200)

	)

3964 
	#DMA_LIFCR_CDMEIF1
 ((
uöt32_t
)0x00000100)

	)

3965 
	#DMA_LIFCR_CFEIF1
 ((
uöt32_t
)0x00000040)

	)

3966 
	#DMA_LIFCR_CTCIF0
 ((
uöt32_t
)0x00000020)

	)

3967 
	#DMA_LIFCR_CHTIF0
 ((
uöt32_t
)0x00000010)

	)

3968 
	#DMA_LIFCR_CTEIF0
 ((
uöt32_t
)0x00000008)

	)

3969 
	#DMA_LIFCR_CDMEIF0
 ((
uöt32_t
)0x00000004)

	)

3970 
	#DMA_LIFCR_CFEIF0
 ((
uöt32_t
)0x00000001)

	)

3973 
	#DMA_HIFCR_CTCIF7
 ((
uöt32_t
)0x08000000)

	)

3974 
	#DMA_HIFCR_CHTIF7
 ((
uöt32_t
)0x04000000)

	)

3975 
	#DMA_HIFCR_CTEIF7
 ((
uöt32_t
)0x02000000)

	)

3976 
	#DMA_HIFCR_CDMEIF7
 ((
uöt32_t
)0x01000000)

	)

3977 
	#DMA_HIFCR_CFEIF7
 ((
uöt32_t
)0x00400000)

	)

3978 
	#DMA_HIFCR_CTCIF6
 ((
uöt32_t
)0x00200000)

	)

3979 
	#DMA_HIFCR_CHTIF6
 ((
uöt32_t
)0x00100000)

	)

3980 
	#DMA_HIFCR_CTEIF6
 ((
uöt32_t
)0x00080000)

	)

3981 
	#DMA_HIFCR_CDMEIF6
 ((
uöt32_t
)0x00040000)

	)

3982 
	#DMA_HIFCR_CFEIF6
 ((
uöt32_t
)0x00010000)

	)

3983 
	#DMA_HIFCR_CTCIF5
 ((
uöt32_t
)0x00000800)

	)

3984 
	#DMA_HIFCR_CHTIF5
 ((
uöt32_t
)0x00000400)

	)

3985 
	#DMA_HIFCR_CTEIF5
 ((
uöt32_t
)0x00000200)

	)

3986 
	#DMA_HIFCR_CDMEIF5
 ((
uöt32_t
)0x00000100)

	)

3987 
	#DMA_HIFCR_CFEIF5
 ((
uöt32_t
)0x00000040)

	)

3988 
	#DMA_HIFCR_CTCIF4
 ((
uöt32_t
)0x00000020)

	)

3989 
	#DMA_HIFCR_CHTIF4
 ((
uöt32_t
)0x00000010)

	)

3990 
	#DMA_HIFCR_CTEIF4
 ((
uöt32_t
)0x00000008)

	)

3991 
	#DMA_HIFCR_CDMEIF4
 ((
uöt32_t
)0x00000004)

	)

3992 
	#DMA_HIFCR_CFEIF4
 ((
uöt32_t
)0x00000001)

	)

4002 
	#DMA2D_CR_START
 ((
uöt32_t
)0x00000001Ë

	)

4003 
	#DMA2D_CR_SUSP
 ((
uöt32_t
)0x00000002Ë

	)

4004 
	#DMA2D_CR_ABORT
 ((
uöt32_t
)0x00000004Ë

	)

4005 
	#DMA2D_CR_TEIE
 ((
uöt32_t
)0x00000100Ë

	)

4006 
	#DMA2D_CR_TCIE
 ((
uöt32_t
)0x00000200Ë

	)

4007 
	#DMA2D_CR_TWIE
 ((
uöt32_t
)0x00000400Ë

	)

4008 
	#DMA2D_CR_CAEIE
 ((
uöt32_t
)0x00000800Ë

	)

4009 
	#DMA2D_CR_CTCIE
 ((
uöt32_t
)0x00001000Ë

	)

4010 
	#DMA2D_CR_CEIE
 ((
uöt32_t
)0x00002000Ë

	)

4011 
	#DMA2D_CR_MODE
 ((
uöt32_t
)0x00030000Ë

	)

4015 
	#DMA2D_ISR_TEIF
 ((
uöt32_t
)0x00000001Ë

	)

4016 
	#DMA2D_ISR_TCIF
 ((
uöt32_t
)0x00000002Ë

	)

4017 
	#DMA2D_ISR_TWIF
 ((
uöt32_t
)0x00000004Ë

	)

4018 
	#DMA2D_ISR_CAEIF
 ((
uöt32_t
)0x00000008Ë

	)

4019 
	#DMA2D_ISR_CTCIF
 ((
uöt32_t
)0x00000010Ë

	)

4020 
	#DMA2D_ISR_CEIF
 ((
uöt32_t
)0x00000020Ë

	)

4024 
	#DMA2D_IFSR_CTEIF
 ((
uöt32_t
)0x00000001Ë

	)

4025 
	#DMA2D_IFSR_CTCIF
 ((
uöt32_t
)0x00000002Ë

	)

4026 
	#DMA2D_IFSR_CTWIF
 ((
uöt32_t
)0x00000004Ë

	)

4027 
	#DMA2D_IFSR_CCAEIF
 ((
uöt32_t
)0x00000008Ë

	)

4028 
	#DMA2D_IFSR_CCTCIF
 ((
uöt32_t
)0x00000010Ë

	)

4029 
	#DMA2D_IFSR_CCEIF
 ((
uöt32_t
)0x00000020Ë

	)

4033 
	#DMA2D_FGMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

4037 
	#DMA2D_FGOR_LO
 ((
uöt32_t
)0x00003FFFË

	)

4041 
	#DMA2D_BGMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

4045 
	#DMA2D_BGOR_LO
 ((
uöt32_t
)0x00003FFFË

	)

4049 
	#DMA2D_FGPFCCR_CM
 ((
uöt32_t
)0x0000000FË

	)

4050 
	#DMA2D_FGPFCCR_CCM
 ((
uöt32_t
)0x00000010Ë

	)

4051 
	#DMA2D_FGPFCCR_START
 ((
uöt32_t
)0x00000020Ë

	)

4052 
	#DMA2D_FGPFCCR_CS
 ((
uöt32_t
)0x0000FF00Ë

	)

4053 
	#DMA2D_FGPFCCR_AM
 ((
uöt32_t
)0x00030000Ë

	)

4054 
	#DMA2D_FGPFCCR_ALPHA
 ((
uöt32_t
)0xFF000000Ë

	)

4058 
	#DMA2D_FGCOLR_BLUE
 ((
uöt32_t
)0x000000FFË

	)

4059 
	#DMA2D_FGCOLR_GREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

4060 
	#DMA2D_FGCOLR_RED
 ((
uöt32_t
)0x00FF0000Ë

	)

4064 
	#DMA2D_BGPFCCR_CM
 ((
uöt32_t
)0x0000000FË

	)

4065 
	#DMA2D_BGPFCCR_CCM
 ((
uöt32_t
)0x00000010Ë

	)

4066 
	#DMA2D_BGPFCCR_START
 ((
uöt32_t
)0x00000020Ë

	)

4067 
	#DMA2D_BGPFCCR_CS
 ((
uöt32_t
)0x0000FF00Ë

	)

4068 
	#DMA2D_BGPFCCR_AM
 ((
uöt32_t
)0x00030000Ë

	)

4069 
	#DMA2D_BGPFCCR_ALPHA
 ((
uöt32_t
)0xFF000000Ë

	)

4073 
	#DMA2D_BGCOLR_BLUE
 ((
uöt32_t
)0x000000FFË

	)

4074 
	#DMA2D_BGCOLR_GREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

4075 
	#DMA2D_BGCOLR_RED
 ((
uöt32_t
)0x00FF0000Ë

	)

4079 
	#DMA2D_FGCMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

4083 
	#DMA2D_BGCMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

4087 
	#DMA2D_OPFCCR_CM
 ((
uöt32_t
)0x00000007Ë

	)

4093 
	#DMA2D_OCOLR_BLUE_1
 ((
uöt32_t
)0x000000FFË

	)

4094 
	#DMA2D_OCOLR_GREEN_1
 ((
uöt32_t
)0x0000FF00Ë

	)

4095 
	#DMA2D_OCOLR_RED_1
 ((
uöt32_t
)0x00FF0000Ë

	)

4096 
	#DMA2D_OCOLR_ALPHA_1
 ((
uöt32_t
)0xFF000000Ë

	)

4099 
	#DMA2D_OCOLR_BLUE_2
 ((
uöt32_t
)0x0000001FË

	)

4100 
	#DMA2D_OCOLR_GREEN_2
 ((
uöt32_t
)0x000007E0Ë

	)

4101 
	#DMA2D_OCOLR_RED_2
 ((
uöt32_t
)0x0000F800Ë

	)

4104 
	#DMA2D_OCOLR_BLUE_3
 ((
uöt32_t
)0x0000001FË

	)

4105 
	#DMA2D_OCOLR_GREEN_3
 ((
uöt32_t
)0x000003E0Ë

	)

4106 
	#DMA2D_OCOLR_RED_3
 ((
uöt32_t
)0x00007C00Ë

	)

4107 
	#DMA2D_OCOLR_ALPHA_3
 ((
uöt32_t
)0x00008000Ë

	)

4110 
	#DMA2D_OCOLR_BLUE_4
 ((
uöt32_t
)0x0000000FË

	)

4111 
	#DMA2D_OCOLR_GREEN_4
 ((
uöt32_t
)0x000000F0Ë

	)

4112 
	#DMA2D_OCOLR_RED_4
 ((
uöt32_t
)0x00000F00Ë

	)

4113 
	#DMA2D_OCOLR_ALPHA_4
 ((
uöt32_t
)0x0000F000Ë

	)

4117 
	#DMA2D_OMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

4121 
	#DMA2D_OOR_LO
 ((
uöt32_t
)0x00003FFFË

	)

4125 
	#DMA2D_NLR_NL
 ((
uöt32_t
)0x0000FFFFË

	)

4126 
	#DMA2D_NLR_PL
 ((
uöt32_t
)0x3FFF0000Ë

	)

4130 
	#DMA2D_LWR_LW
 ((
uöt32_t
)0x0000FFFFË

	)

4134 
	#DMA2D_AMTCR_EN
 ((
uöt32_t
)0x00000001Ë

	)

4135 
	#DMA2D_AMTCR_DT
 ((
uöt32_t
)0x0000FF00Ë

	)

4150 
	#EXTI_IMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

4151 
	#EXTI_IMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

4152 
	#EXTI_IMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

4153 
	#EXTI_IMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

4154 
	#EXTI_IMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

4155 
	#EXTI_IMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

4156 
	#EXTI_IMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

4157 
	#EXTI_IMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

4158 
	#EXTI_IMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

4159 
	#EXTI_IMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

4160 
	#EXTI_IMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

4161 
	#EXTI_IMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

4162 
	#EXTI_IMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

4163 
	#EXTI_IMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

4164 
	#EXTI_IMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

4165 
	#EXTI_IMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

4166 
	#EXTI_IMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

4167 
	#EXTI_IMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

4168 
	#EXTI_IMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

4169 
	#EXTI_IMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

4172 
	#EXTI_EMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

4173 
	#EXTI_EMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

4174 
	#EXTI_EMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

4175 
	#EXTI_EMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

4176 
	#EXTI_EMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

4177 
	#EXTI_EMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

4178 
	#EXTI_EMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

4179 
	#EXTI_EMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

4180 
	#EXTI_EMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

4181 
	#EXTI_EMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

4182 
	#EXTI_EMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

4183 
	#EXTI_EMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

4184 
	#EXTI_EMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

4185 
	#EXTI_EMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

4186 
	#EXTI_EMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

4187 
	#EXTI_EMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

4188 
	#EXTI_EMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

4189 
	#EXTI_EMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

4190 
	#EXTI_EMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

4191 
	#EXTI_EMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

4194 
	#EXTI_RTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

4195 
	#EXTI_RTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

4196 
	#EXTI_RTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

4197 
	#EXTI_RTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

4198 
	#EXTI_RTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

4199 
	#EXTI_RTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

4200 
	#EXTI_RTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

4201 
	#EXTI_RTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

4202 
	#EXTI_RTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

4203 
	#EXTI_RTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

4204 
	#EXTI_RTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

4205 
	#EXTI_RTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

4206 
	#EXTI_RTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

4207 
	#EXTI_RTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

4208 
	#EXTI_RTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

4209 
	#EXTI_RTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

4210 
	#EXTI_RTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

4211 
	#EXTI_RTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

4212 
	#EXTI_RTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

4213 
	#EXTI_RTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

4216 
	#EXTI_FTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

4217 
	#EXTI_FTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

4218 
	#EXTI_FTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

4219 
	#EXTI_FTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

4220 
	#EXTI_FTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

4221 
	#EXTI_FTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

4222 
	#EXTI_FTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

4223 
	#EXTI_FTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

4224 
	#EXTI_FTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

4225 
	#EXTI_FTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

4226 
	#EXTI_FTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

4227 
	#EXTI_FTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

4228 
	#EXTI_FTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

4229 
	#EXTI_FTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

4230 
	#EXTI_FTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

4231 
	#EXTI_FTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

4232 
	#EXTI_FTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

4233 
	#EXTI_FTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

4234 
	#EXTI_FTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

4235 
	#EXTI_FTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

4238 
	#EXTI_SWIER_SWIER0
 ((
uöt32_t
)0x00000001Ë

	)

4239 
	#EXTI_SWIER_SWIER1
 ((
uöt32_t
)0x00000002Ë

	)

4240 
	#EXTI_SWIER_SWIER2
 ((
uöt32_t
)0x00000004Ë

	)

4241 
	#EXTI_SWIER_SWIER3
 ((
uöt32_t
)0x00000008Ë

	)

4242 
	#EXTI_SWIER_SWIER4
 ((
uöt32_t
)0x00000010Ë

	)

4243 
	#EXTI_SWIER_SWIER5
 ((
uöt32_t
)0x00000020Ë

	)

4244 
	#EXTI_SWIER_SWIER6
 ((
uöt32_t
)0x00000040Ë

	)

4245 
	#EXTI_SWIER_SWIER7
 ((
uöt32_t
)0x00000080Ë

	)

4246 
	#EXTI_SWIER_SWIER8
 ((
uöt32_t
)0x00000100Ë

	)

4247 
	#EXTI_SWIER_SWIER9
 ((
uöt32_t
)0x00000200Ë

	)

4248 
	#EXTI_SWIER_SWIER10
 ((
uöt32_t
)0x00000400Ë

	)

4249 
	#EXTI_SWIER_SWIER11
 ((
uöt32_t
)0x00000800Ë

	)

4250 
	#EXTI_SWIER_SWIER12
 ((
uöt32_t
)0x00001000Ë

	)

4251 
	#EXTI_SWIER_SWIER13
 ((
uöt32_t
)0x00002000Ë

	)

4252 
	#EXTI_SWIER_SWIER14
 ((
uöt32_t
)0x00004000Ë

	)

4253 
	#EXTI_SWIER_SWIER15
 ((
uöt32_t
)0x00008000Ë

	)

4254 
	#EXTI_SWIER_SWIER16
 ((
uöt32_t
)0x00010000Ë

	)

4255 
	#EXTI_SWIER_SWIER17
 ((
uöt32_t
)0x00020000Ë

	)

4256 
	#EXTI_SWIER_SWIER18
 ((
uöt32_t
)0x00040000Ë

	)

4257 
	#EXTI_SWIER_SWIER19
 ((
uöt32_t
)0x00080000Ë

	)

4260 
	#EXTI_PR_PR0
 ((
uöt32_t
)0x00000001Ë

	)

4261 
	#EXTI_PR_PR1
 ((
uöt32_t
)0x00000002Ë

	)

4262 
	#EXTI_PR_PR2
 ((
uöt32_t
)0x00000004Ë

	)

4263 
	#EXTI_PR_PR3
 ((
uöt32_t
)0x00000008Ë

	)

4264 
	#EXTI_PR_PR4
 ((
uöt32_t
)0x00000010Ë

	)

4265 
	#EXTI_PR_PR5
 ((
uöt32_t
)0x00000020Ë

	)

4266 
	#EXTI_PR_PR6
 ((
uöt32_t
)0x00000040Ë

	)

4267 
	#EXTI_PR_PR7
 ((
uöt32_t
)0x00000080Ë

	)

4268 
	#EXTI_PR_PR8
 ((
uöt32_t
)0x00000100Ë

	)

4269 
	#EXTI_PR_PR9
 ((
uöt32_t
)0x00000200Ë

	)

4270 
	#EXTI_PR_PR10
 ((
uöt32_t
)0x00000400Ë

	)

4271 
	#EXTI_PR_PR11
 ((
uöt32_t
)0x00000800Ë

	)

4272 
	#EXTI_PR_PR12
 ((
uöt32_t
)0x00001000Ë

	)

4273 
	#EXTI_PR_PR13
 ((
uöt32_t
)0x00002000Ë

	)

4274 
	#EXTI_PR_PR14
 ((
uöt32_t
)0x00004000Ë

	)

4275 
	#EXTI_PR_PR15
 ((
uöt32_t
)0x00008000Ë

	)

4276 
	#EXTI_PR_PR16
 ((
uöt32_t
)0x00010000Ë

	)

4277 
	#EXTI_PR_PR17
 ((
uöt32_t
)0x00020000Ë

	)

4278 
	#EXTI_PR_PR18
 ((
uöt32_t
)0x00040000Ë

	)

4279 
	#EXTI_PR_PR19
 ((
uöt32_t
)0x00080000Ë

	)

4287 
	#FLASH_ACR_LATENCY
 ((
uöt32_t
)0x0000000F)

	)

4288 
	#FLASH_ACR_LATENCY_0WS
 ((
uöt32_t
)0x00000000)

	)

4289 
	#FLASH_ACR_LATENCY_1WS
 ((
uöt32_t
)0x00000001)

	)

4290 
	#FLASH_ACR_LATENCY_2WS
 ((
uöt32_t
)0x00000002)

	)

4291 
	#FLASH_ACR_LATENCY_3WS
 ((
uöt32_t
)0x00000003)

	)

4292 
	#FLASH_ACR_LATENCY_4WS
 ((
uöt32_t
)0x00000004)

	)

4293 
	#FLASH_ACR_LATENCY_5WS
 ((
uöt32_t
)0x00000005)

	)

4294 
	#FLASH_ACR_LATENCY_6WS
 ((
uöt32_t
)0x00000006)

	)

4295 
	#FLASH_ACR_LATENCY_7WS
 ((
uöt32_t
)0x00000007)

	)

4296 
	#FLASH_ACR_LATENCY_8WS
 ((
uöt32_t
)0x00000008)

	)

4297 
	#FLASH_ACR_LATENCY_9WS
 ((
uöt32_t
)0x00000009)

	)

4298 
	#FLASH_ACR_LATENCY_10WS
 ((
uöt32_t
)0x0000000A)

	)

4299 
	#FLASH_ACR_LATENCY_11WS
 ((
uöt32_t
)0x0000000B)

	)

4300 
	#FLASH_ACR_LATENCY_12WS
 ((
uöt32_t
)0x0000000C)

	)

4301 
	#FLASH_ACR_LATENCY_13WS
 ((
uöt32_t
)0x0000000D)

	)

4302 
	#FLASH_ACR_LATENCY_14WS
 ((
uöt32_t
)0x0000000E)

	)

4303 
	#FLASH_ACR_LATENCY_15WS
 ((
uöt32_t
)0x0000000F)

	)

4305 
	#FLASH_ACR_PRFTEN
 ((
uöt32_t
)0x00000100)

	)

4306 
	#FLASH_ACR_ICEN
 ((
uöt32_t
)0x00000200)

	)

4307 
	#FLASH_ACR_DCEN
 ((
uöt32_t
)0x00000400)

	)

4308 
	#FLASH_ACR_ICRST
 ((
uöt32_t
)0x00000800)

	)

4309 
	#FLASH_ACR_DCRST
 ((
uöt32_t
)0x00001000)

	)

4310 
	#FLASH_ACR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C00)

	)

4311 
	#FLASH_ACR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023C03)

	)

4314 
	#FLASH_SR_EOP
 ((
uöt32_t
)0x00000001)

	)

4315 
	#FLASH_SR_SOP
 ((
uöt32_t
)0x00000002)

	)

4316 
	#FLASH_SR_WRPERR
 ((
uöt32_t
)0x00000010)

	)

4317 
	#FLASH_SR_PGAERR
 ((
uöt32_t
)0x00000020)

	)

4318 
	#FLASH_SR_PGPERR
 ((
uöt32_t
)0x00000040)

	)

4319 
	#FLASH_SR_PGSERR
 ((
uöt32_t
)0x00000080)

	)

4320 
	#FLASH_SR_BSY
 ((
uöt32_t
)0x00010000)

	)

4323 
	#FLASH_CR_PG
 ((
uöt32_t
)0x00000001)

	)

4324 
	#FLASH_CR_SER
 ((
uöt32_t
)0x00000002)

	)

4325 
	#FLASH_CR_MER
 ((
uöt32_t
)0x00000004)

	)

4326 
	#FLASH_CR_MER1
 
FLASH_CR_MER


	)

4327 
	#FLASH_CR_SNB
 ((
uöt32_t
)0x000000F8)

	)

4328 
	#FLASH_CR_SNB_0
 ((
uöt32_t
)0x00000008)

	)

4329 
	#FLASH_CR_SNB_1
 ((
uöt32_t
)0x00000010)

	)

4330 
	#FLASH_CR_SNB_2
 ((
uöt32_t
)0x00000020)

	)

4331 
	#FLASH_CR_SNB_3
 ((
uöt32_t
)0x00000040)

	)

4332 
	#FLASH_CR_SNB_4
 ((
uöt32_t
)0x00000040)

	)

4333 
	#FLASH_CR_PSIZE
 ((
uöt32_t
)0x00000300)

	)

4334 
	#FLASH_CR_PSIZE_0
 ((
uöt32_t
)0x00000100)

	)

4335 
	#FLASH_CR_PSIZE_1
 ((
uöt32_t
)0x00000200)

	)

4336 
	#FLASH_CR_MER2
 ((
uöt32_t
)0x00008000)

	)

4337 
	#FLASH_CR_STRT
 ((
uöt32_t
)0x00010000)

	)

4338 
	#FLASH_CR_EOPIE
 ((
uöt32_t
)0x01000000)

	)

4339 
	#FLASH_CR_LOCK
 ((
uöt32_t
)0x80000000)

	)

4342 
	#FLASH_OPTCR_OPTLOCK
 ((
uöt32_t
)0x00000001)

	)

4343 
	#FLASH_OPTCR_OPTSTRT
 ((
uöt32_t
)0x00000002)

	)

4344 
	#FLASH_OPTCR_BOR_LEV_0
 ((
uöt32_t
)0x00000004)

	)

4345 
	#FLASH_OPTCR_BOR_LEV_1
 ((
uöt32_t
)0x00000008)

	)

4346 
	#FLASH_OPTCR_BOR_LEV
 ((
uöt32_t
)0x0000000C)

	)

4347 
	#FLASH_OPTCR_BFB2
 ((
uöt32_t
)0x00000010)

	)

4349 
	#FLASH_OPTCR_WDG_SW
 ((
uöt32_t
)0x00000020)

	)

4350 
	#FLASH_OPTCR_nRST_STOP
 ((
uöt32_t
)0x00000040)

	)

4351 
	#FLASH_OPTCR_nRST_STDBY
 ((
uöt32_t
)0x00000080)

	)

4352 
	#FLASH_OPTCR_RDP
 ((
uöt32_t
)0x0000FF00)

	)

4353 
	#FLASH_OPTCR_RDP_0
 ((
uöt32_t
)0x00000100)

	)

4354 
	#FLASH_OPTCR_RDP_1
 ((
uöt32_t
)0x00000200)

	)

4355 
	#FLASH_OPTCR_RDP_2
 ((
uöt32_t
)0x00000400)

	)

4356 
	#FLASH_OPTCR_RDP_3
 ((
uöt32_t
)0x00000800)

	)

4357 
	#FLASH_OPTCR_RDP_4
 ((
uöt32_t
)0x00001000)

	)

4358 
	#FLASH_OPTCR_RDP_5
 ((
uöt32_t
)0x00002000)

	)

4359 
	#FLASH_OPTCR_RDP_6
 ((
uöt32_t
)0x00004000)

	)

4360 
	#FLASH_OPTCR_RDP_7
 ((
uöt32_t
)0x00008000)

	)

4361 
	#FLASH_OPTCR_nWRP
 ((
uöt32_t
)0x0FFF0000)

	)

4362 
	#FLASH_OPTCR_nWRP_0
 ((
uöt32_t
)0x00010000)

	)

4363 
	#FLASH_OPTCR_nWRP_1
 ((
uöt32_t
)0x00020000)

	)

4364 
	#FLASH_OPTCR_nWRP_2
 ((
uöt32_t
)0x00040000)

	)

4365 
	#FLASH_OPTCR_nWRP_3
 ((
uöt32_t
)0x00080000)

	)

4366 
	#FLASH_OPTCR_nWRP_4
 ((
uöt32_t
)0x00100000)

	)

4367 
	#FLASH_OPTCR_nWRP_5
 ((
uöt32_t
)0x00200000)

	)

4368 
	#FLASH_OPTCR_nWRP_6
 ((
uöt32_t
)0x00400000)

	)

4369 
	#FLASH_OPTCR_nWRP_7
 ((
uöt32_t
)0x00800000)

	)

4370 
	#FLASH_OPTCR_nWRP_8
 ((
uöt32_t
)0x01000000)

	)

4371 
	#FLASH_OPTCR_nWRP_9
 ((
uöt32_t
)0x02000000)

	)

4372 
	#FLASH_OPTCR_nWRP_10
 ((
uöt32_t
)0x04000000)

	)

4373 
	#FLASH_OPTCR_nWRP_11
 ((
uöt32_t
)0x08000000)

	)

4375 
	#FLASH_OPTCR_DB1M
 ((
uöt32_t
)0x40000000)

	)

4376 
	#FLASH_OPTCR_SPRMOD
 ((
uöt32_t
)0x80000000)

	)

4379 
	#FLASH_OPTCR1_nWRP
 ((
uöt32_t
)0x0FFF0000)

	)

4380 
	#FLASH_OPTCR1_nWRP_0
 ((
uöt32_t
)0x00010000)

	)

4381 
	#FLASH_OPTCR1_nWRP_1
 ((
uöt32_t
)0x00020000)

	)

4382 
	#FLASH_OPTCR1_nWRP_2
 ((
uöt32_t
)0x00040000)

	)

4383 
	#FLASH_OPTCR1_nWRP_3
 ((
uöt32_t
)0x00080000)

	)

4384 
	#FLASH_OPTCR1_nWRP_4
 ((
uöt32_t
)0x00100000)

	)

4385 
	#FLASH_OPTCR1_nWRP_5
 ((
uöt32_t
)0x00200000)

	)

4386 
	#FLASH_OPTCR1_nWRP_6
 ((
uöt32_t
)0x00400000)

	)

4387 
	#FLASH_OPTCR1_nWRP_7
 ((
uöt32_t
)0x00800000)

	)

4388 
	#FLASH_OPTCR1_nWRP_8
 ((
uöt32_t
)0x01000000)

	)

4389 
	#FLASH_OPTCR1_nWRP_9
 ((
uöt32_t
)0x02000000)

	)

4390 
	#FLASH_OPTCR1_nWRP_10
 ((
uöt32_t
)0x04000000)

	)

4391 
	#FLASH_OPTCR1_nWRP_11
 ((
uöt32_t
)0x08000000)

	)

4393 #i‡
	`deföed
(
STM32F40_41xxx
)

4400 
	#FSMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4401 
	#FSMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4403 
	#FSMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4404 
	#FSMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4405 
	#FSMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4407 
	#FSMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4408 
	#FSMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4409 
	#FSMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4411 
	#FSMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4412 
	#FSMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4413 
	#FSMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4414 
	#FSMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4415 
	#FSMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4416 
	#FSMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4417 
	#FSMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4418 
	#FSMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4419 
	#FSMC_BCR1_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4420 
	#FSMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4423 
	#FSMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4424 
	#FSMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4426 
	#FSMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4427 
	#FSMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4428 
	#FSMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4430 
	#FSMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4431 
	#FSMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4432 
	#FSMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4434 
	#FSMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4435 
	#FSMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4436 
	#FSMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4437 
	#FSMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4438 
	#FSMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4439 
	#FSMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4440 
	#FSMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4441 
	#FSMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4442 
	#FSMC_BCR2_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4443 
	#FSMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4446 
	#FSMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4447 
	#FSMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4449 
	#FSMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4450 
	#FSMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4451 
	#FSMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4453 
	#FSMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4454 
	#FSMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4455 
	#FSMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4457 
	#FSMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4458 
	#FSMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4459 
	#FSMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4460 
	#FSMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4461 
	#FSMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4462 
	#FSMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4463 
	#FSMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4464 
	#FSMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4465 
	#FSMC_BCR3_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4466 
	#FSMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4469 
	#FSMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4470 
	#FSMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4472 
	#FSMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4473 
	#FSMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4474 
	#FSMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4476 
	#FSMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4477 
	#FSMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4478 
	#FSMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4480 
	#FSMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4481 
	#FSMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4482 
	#FSMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4483 
	#FSMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4484 
	#FSMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4485 
	#FSMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4486 
	#FSMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4487 
	#FSMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4488 
	#FSMC_BCR4_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4489 
	#FSMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4492 
	#FSMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4493 
	#FSMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4494 
	#FSMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4495 
	#FSMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4496 
	#FSMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4498 
	#FSMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4499 
	#FSMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4500 
	#FSMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4501 
	#FSMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4502 
	#FSMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4504 
	#FSMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4505 
	#FSMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4506 
	#FSMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4507 
	#FSMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4508 
	#FSMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4510 
	#FSMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4511 
	#FSMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4512 
	#FSMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4513 
	#FSMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4514 
	#FSMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4516 
	#FSMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4517 
	#FSMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4518 
	#FSMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4519 
	#FSMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4520 
	#FSMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4522 
	#FSMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4523 
	#FSMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4524 
	#FSMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4525 
	#FSMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4526 
	#FSMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4528 
	#FSMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4529 
	#FSMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4530 
	#FSMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4533 
	#FSMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4534 
	#FSMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4535 
	#FSMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4536 
	#FSMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4537 
	#FSMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4539 
	#FSMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4540 
	#FSMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4541 
	#FSMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4542 
	#FSMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4543 
	#FSMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4545 
	#FSMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4546 
	#FSMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4547 
	#FSMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4548 
	#FSMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4549 
	#FSMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4551 
	#FSMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4552 
	#FSMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4553 
	#FSMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4554 
	#FSMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4555 
	#FSMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4557 
	#FSMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4558 
	#FSMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4559 
	#FSMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4560 
	#FSMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4561 
	#FSMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4563 
	#FSMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4564 
	#FSMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4565 
	#FSMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4566 
	#FSMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4567 
	#FSMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4569 
	#FSMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4570 
	#FSMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4571 
	#FSMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4574 
	#FSMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4575 
	#FSMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4576 
	#FSMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4577 
	#FSMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4578 
	#FSMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4580 
	#FSMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4581 
	#FSMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4582 
	#FSMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4583 
	#FSMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4584 
	#FSMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4586 
	#FSMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4587 
	#FSMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4588 
	#FSMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4589 
	#FSMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4590 
	#FSMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4592 
	#FSMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4593 
	#FSMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4594 
	#FSMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4595 
	#FSMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4596 
	#FSMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4598 
	#FSMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4599 
	#FSMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4600 
	#FSMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4601 
	#FSMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4602 
	#FSMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4604 
	#FSMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4605 
	#FSMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4606 
	#FSMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4607 
	#FSMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4608 
	#FSMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4610 
	#FSMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4611 
	#FSMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4612 
	#FSMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4615 
	#FSMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4616 
	#FSMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4617 
	#FSMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4618 
	#FSMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4619 
	#FSMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4621 
	#FSMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4622 
	#FSMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4623 
	#FSMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4624 
	#FSMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4625 
	#FSMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4627 
	#FSMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4628 
	#FSMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4629 
	#FSMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4630 
	#FSMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4631 
	#FSMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4633 
	#FSMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4634 
	#FSMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4635 
	#FSMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4636 
	#FSMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4637 
	#FSMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4639 
	#FSMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4640 
	#FSMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4641 
	#FSMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4642 
	#FSMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4643 
	#FSMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4645 
	#FSMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4646 
	#FSMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4647 
	#FSMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4648 
	#FSMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4649 
	#FSMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4651 
	#FSMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4652 
	#FSMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4653 
	#FSMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4656 
	#FSMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4657 
	#FSMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4658 
	#FSMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4659 
	#FSMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4660 
	#FSMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4662 
	#FSMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4663 
	#FSMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4664 
	#FSMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4665 
	#FSMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4666 
	#FSMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4668 
	#FSMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4669 
	#FSMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4670 
	#FSMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4671 
	#FSMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4672 
	#FSMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4674 
	#FSMC_BWTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4675 
	#FSMC_BWTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4676 
	#FSMC_BWTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4677 
	#FSMC_BWTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4678 
	#FSMC_BWTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4680 
	#FSMC_BWTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4681 
	#FSMC_BWTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4682 
	#FSMC_BWTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4683 
	#FSMC_BWTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4684 
	#FSMC_BWTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4686 
	#FSMC_BWTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4687 
	#FSMC_BWTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4688 
	#FSMC_BWTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4689 
	#FSMC_BWTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4690 
	#FSMC_BWTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4692 
	#FSMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4693 
	#FSMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4694 
	#FSMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4697 
	#FSMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4698 
	#FSMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4699 
	#FSMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4700 
	#FSMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4701 
	#FSMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4703 
	#FSMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4704 
	#FSMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4705 
	#FSMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4706 
	#FSMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4707 
	#FSMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4709 
	#FSMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4710 
	#FSMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4711 
	#FSMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4712 
	#FSMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4713 
	#FSMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4715 
	#FSMC_BWTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4716 
	#FSMC_BWTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4717 
	#FSMC_BWTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4718 
	#FSMC_BWTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4719 
	#FSMC_BWTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4721 
	#FSMC_BWTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4722 
	#FSMC_BWTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4723 
	#FSMC_BWTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4724 
	#FSMC_BWTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4725 
	#FSMC_BWTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4727 
	#FSMC_BWTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4728 
	#FSMC_BWTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4729 
	#FSMC_BWTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4730 
	#FSMC_BWTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4731 
	#FSMC_BWTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4733 
	#FSMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4734 
	#FSMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4735 
	#FSMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4738 
	#FSMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4739 
	#FSMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4740 
	#FSMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4741 
	#FSMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4742 
	#FSMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4744 
	#FSMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4745 
	#FSMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4746 
	#FSMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4747 
	#FSMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4748 
	#FSMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4750 
	#FSMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4751 
	#FSMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4752 
	#FSMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4753 
	#FSMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4754 
	#FSMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4756 
	#FSMC_BWTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4757 
	#FSMC_BWTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4758 
	#FSMC_BWTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4759 
	#FSMC_BWTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4760 
	#FSMC_BWTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4762 
	#FSMC_BWTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4763 
	#FSMC_BWTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4764 
	#FSMC_BWTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4765 
	#FSMC_BWTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4766 
	#FSMC_BWTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4768 
	#FSMC_BWTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4769 
	#FSMC_BWTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4770 
	#FSMC_BWTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4771 
	#FSMC_BWTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4772 
	#FSMC_BWTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4774 
	#FSMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4775 
	#FSMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4776 
	#FSMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4779 
	#FSMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4780 
	#FSMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4781 
	#FSMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4782 
	#FSMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4783 
	#FSMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4785 
	#FSMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4786 
	#FSMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4787 
	#FSMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4788 
	#FSMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4789 
	#FSMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4791 
	#FSMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4792 
	#FSMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4793 
	#FSMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4794 
	#FSMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4795 
	#FSMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4797 
	#FSMC_BWTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4798 
	#FSMC_BWTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4799 
	#FSMC_BWTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4800 
	#FSMC_BWTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4801 
	#FSMC_BWTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4803 
	#FSMC_BWTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4804 
	#FSMC_BWTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4805 
	#FSMC_BWTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4806 
	#FSMC_BWTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4807 
	#FSMC_BWTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4809 
	#FSMC_BWTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4810 
	#FSMC_BWTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4811 
	#FSMC_BWTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4812 
	#FSMC_BWTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4813 
	#FSMC_BWTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4815 
	#FSMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4816 
	#FSMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4817 
	#FSMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4820 
	#FSMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4821 
	#FSMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4822 
	#FSMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4824 
	#FSMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4825 
	#FSMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4826 
	#FSMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4828 
	#FSMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4830 
	#FSMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4831 
	#FSMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4832 
	#FSMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4833 
	#FSMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4834 
	#FSMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4836 
	#FSMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4837 
	#FSMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4838 
	#FSMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4839 
	#FSMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4840 
	#FSMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4842 
	#FSMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4843 
	#FSMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4844 
	#FSMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4845 
	#FSMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4848 
	#FSMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4849 
	#FSMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4850 
	#FSMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4852 
	#FSMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4853 
	#FSMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4854 
	#FSMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4856 
	#FSMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4858 
	#FSMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4859 
	#FSMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4860 
	#FSMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4861 
	#FSMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4862 
	#FSMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4864 
	#FSMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4865 
	#FSMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4866 
	#FSMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4867 
	#FSMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4868 
	#FSMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4870 
	#FSMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4871 
	#FSMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4872 
	#FSMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4873 
	#FSMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4876 
	#FSMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4877 
	#FSMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4878 
	#FSMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4880 
	#FSMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4881 
	#FSMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4882 
	#FSMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4884 
	#FSMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4886 
	#FSMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4887 
	#FSMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4888 
	#FSMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4889 
	#FSMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4890 
	#FSMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4892 
	#FSMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4893 
	#FSMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4894 
	#FSMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4895 
	#FSMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4896 
	#FSMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4898 
	#FSMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4899 
	#FSMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4900 
	#FSMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4901 
	#FSMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4904 
	#FSMC_SR2_IRS
 ((
uöt8_t
)0x01Ë

	)

4905 
	#FSMC_SR2_ILS
 ((
uöt8_t
)0x02Ë

	)

4906 
	#FSMC_SR2_IFS
 ((
uöt8_t
)0x04Ë

	)

4907 
	#FSMC_SR2_IREN
 ((
uöt8_t
)0x08Ë

	)

4908 
	#FSMC_SR2_ILEN
 ((
uöt8_t
)0x10Ë

	)

4909 
	#FSMC_SR2_IFEN
 ((
uöt8_t
)0x20Ë

	)

4910 
	#FSMC_SR2_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4913 
	#FSMC_SR3_IRS
 ((
uöt8_t
)0x01Ë

	)

4914 
	#FSMC_SR3_ILS
 ((
uöt8_t
)0x02Ë

	)

4915 
	#FSMC_SR3_IFS
 ((
uöt8_t
)0x04Ë

	)

4916 
	#FSMC_SR3_IREN
 ((
uöt8_t
)0x08Ë

	)

4917 
	#FSMC_SR3_ILEN
 ((
uöt8_t
)0x10Ë

	)

4918 
	#FSMC_SR3_IFEN
 ((
uöt8_t
)0x20Ë

	)

4919 
	#FSMC_SR3_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4922 
	#FSMC_SR4_IRS
 ((
uöt8_t
)0x01Ë

	)

4923 
	#FSMC_SR4_ILS
 ((
uöt8_t
)0x02Ë

	)

4924 
	#FSMC_SR4_IFS
 ((
uöt8_t
)0x04Ë

	)

4925 
	#FSMC_SR4_IREN
 ((
uöt8_t
)0x08Ë

	)

4926 
	#FSMC_SR4_ILEN
 ((
uöt8_t
)0x10Ë

	)

4927 
	#FSMC_SR4_IFEN
 ((
uöt8_t
)0x20Ë

	)

4928 
	#FSMC_SR4_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4931 
	#FSMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

4932 
	#FSMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

4933 
	#FSMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

4934 
	#FSMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

4935 
	#FSMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

4936 
	#FSMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

4937 
	#FSMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

4938 
	#FSMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

4939 
	#FSMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

4941 
	#FSMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

4942 
	#FSMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

4943 
	#FSMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

4944 
	#FSMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

4945 
	#FSMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

4946 
	#FSMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

4947 
	#FSMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

4948 
	#FSMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

4949 
	#FSMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

4951 
	#FSMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

4952 
	#FSMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

4953 
	#FSMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

4954 
	#FSMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

4955 
	#FSMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

4956 
	#FSMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

4957 
	#FSMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

4958 
	#FSMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

4959 
	#FSMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

4961 
	#FSMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

4962 
	#FSMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

4963 
	#FSMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

4964 
	#FSMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

4965 
	#FSMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

4966 
	#FSMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

4967 
	#FSMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

4968 
	#FSMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

4969 
	#FSMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

4972 
	#FSMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

4973 
	#FSMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

4974 
	#FSMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

4975 
	#FSMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

4976 
	#FSMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

4977 
	#FSMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

4978 
	#FSMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

4979 
	#FSMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

4980 
	#FSMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

4982 
	#FSMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

4983 
	#FSMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

4984 
	#FSMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

4985 
	#FSMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

4986 
	#FSMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

4987 
	#FSMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

4988 
	#FSMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

4989 
	#FSMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

4990 
	#FSMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

4992 
	#FSMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

4993 
	#FSMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

4994 
	#FSMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

4995 
	#FSMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

4996 
	#FSMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

4997 
	#FSMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

4998 
	#FSMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

4999 
	#FSMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5000 
	#FSMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5002 
	#FSMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5003 
	#FSMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5004 
	#FSMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5005 
	#FSMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5006 
	#FSMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5007 
	#FSMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5008 
	#FSMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5009 
	#FSMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5010 
	#FSMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5013 
	#FSMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

5014 
	#FSMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5015 
	#FSMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5016 
	#FSMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5017 
	#FSMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5018 
	#FSMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5019 
	#FSMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5020 
	#FSMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5021 
	#FSMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5023 
	#FSMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5024 
	#FSMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5025 
	#FSMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5026 
	#FSMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5027 
	#FSMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5028 
	#FSMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5029 
	#FSMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5030 
	#FSMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5031 
	#FSMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5033 
	#FSMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5034 
	#FSMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5035 
	#FSMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5036 
	#FSMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5037 
	#FSMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5038 
	#FSMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5039 
	#FSMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5040 
	#FSMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5041 
	#FSMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5043 
	#FSMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5044 
	#FSMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5045 
	#FSMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5046 
	#FSMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5047 
	#FSMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5048 
	#FSMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5049 
	#FSMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5050 
	#FSMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5051 
	#FSMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5054 
	#FSMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

5055 
	#FSMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

5056 
	#FSMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

5057 
	#FSMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

5058 
	#FSMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

5059 
	#FSMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

5060 
	#FSMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

5061 
	#FSMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

5062 
	#FSMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

5064 
	#FSMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

5065 
	#FSMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

5066 
	#FSMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

5067 
	#FSMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

5068 
	#FSMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

5069 
	#FSMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

5070 
	#FSMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

5071 
	#FSMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5072 
	#FSMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5074 
	#FSMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5075 
	#FSMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5076 
	#FSMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5077 
	#FSMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5078 
	#FSMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5079 
	#FSMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5080 
	#FSMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5081 
	#FSMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5082 
	#FSMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5084 
	#FSMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5085 
	#FSMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5086 
	#FSMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5087 
	#FSMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5088 
	#FSMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5089 
	#FSMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5090 
	#FSMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5091 
	#FSMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5092 
	#FSMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5095 
	#FSMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

5096 
	#FSMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5097 
	#FSMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5098 
	#FSMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5099 
	#FSMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5100 
	#FSMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5101 
	#FSMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5102 
	#FSMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5103 
	#FSMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5105 
	#FSMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5106 
	#FSMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5107 
	#FSMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5108 
	#FSMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5109 
	#FSMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5110 
	#FSMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5111 
	#FSMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5112 
	#FSMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5113 
	#FSMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5115 
	#FSMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5116 
	#FSMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5117 
	#FSMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5118 
	#FSMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5119 
	#FSMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5120 
	#FSMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5121 
	#FSMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5122 
	#FSMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5123 
	#FSMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5125 
	#FSMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5126 
	#FSMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5127 
	#FSMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5128 
	#FSMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5129 
	#FSMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5130 
	#FSMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5131 
	#FSMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5132 
	#FSMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5133 
	#FSMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5136 
	#FSMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

5137 
	#FSMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5138 
	#FSMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5139 
	#FSMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5140 
	#FSMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5141 
	#FSMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5142 
	#FSMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5143 
	#FSMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5144 
	#FSMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5146 
	#FSMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5147 
	#FSMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5148 
	#FSMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5149 
	#FSMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5150 
	#FSMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5151 
	#FSMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5152 
	#FSMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5153 
	#FSMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5154 
	#FSMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5156 
	#FSMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5157 
	#FSMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5158 
	#FSMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5159 
	#FSMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5160 
	#FSMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5161 
	#FSMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5162 
	#FSMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5163 
	#FSMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5164 
	#FSMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5166 
	#FSMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5167 
	#FSMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5168 
	#FSMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5169 
	#FSMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5170 
	#FSMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5171 
	#FSMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5172 
	#FSMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5173 
	#FSMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5174 
	#FSMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5177 
	#FSMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

5178 
	#FSMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5179 
	#FSMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5180 
	#FSMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5181 
	#FSMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5182 
	#FSMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5183 
	#FSMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5184 
	#FSMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5185 
	#FSMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5187 
	#FSMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5188 
	#FSMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5189 
	#FSMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5190 
	#FSMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5191 
	#FSMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5192 
	#FSMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5193 
	#FSMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5194 
	#FSMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5195 
	#FSMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5197 
	#FSMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5198 
	#FSMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5199 
	#FSMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5200 
	#FSMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5201 
	#FSMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5202 
	#FSMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5203 
	#FSMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5204 
	#FSMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5205 
	#FSMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5207 
	#FSMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5208 
	#FSMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5209 
	#FSMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5210 
	#FSMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5211 
	#FSMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5212 
	#FSMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5213 
	#FSMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5214 
	#FSMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5215 
	#FSMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5218 
	#FSMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

5221 
	#FSMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

5224 #i‡
	`deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
)

5231 
	#FMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

5232 
	#FMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

5234 
	#FMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

5235 
	#FMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

5236 
	#FMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

5238 
	#FMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

5239 
	#FMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5240 
	#FMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5242 
	#FMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

5243 
	#FMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

5244 
	#FMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

5245 
	#FMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

5246 
	#FMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

5247 
	#FMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

5248 
	#FMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

5249 
	#FMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

5250 
	#FMC_BCR1_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

5251 
	#FMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

5252 
	#FMC_BCR1_CCLKEN
 ((
uöt32_t
)0x00100000Ë

	)

5255 
	#FMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

5256 
	#FMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

5258 
	#FMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

5259 
	#FMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

5260 
	#FMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

5262 
	#FMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

5263 
	#FMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5264 
	#FMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5266 
	#FMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

5267 
	#FMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

5268 
	#FMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

5269 
	#FMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

5270 
	#FMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

5271 
	#FMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

5272 
	#FMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

5273 
	#FMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

5274 
	#FMC_BCR2_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

5275 
	#FMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

5278 
	#FMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

5279 
	#FMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

5281 
	#FMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

5282 
	#FMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

5283 
	#FMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

5285 
	#FMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

5286 
	#FMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5287 
	#FMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5289 
	#FMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

5290 
	#FMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

5291 
	#FMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

5292 
	#FMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

5293 
	#FMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

5294 
	#FMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

5295 
	#FMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

5296 
	#FMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

5297 
	#FMC_BCR3_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

5298 
	#FMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

5301 
	#FMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

5302 
	#FMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

5304 
	#FMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

5305 
	#FMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

5306 
	#FMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

5308 
	#FMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

5309 
	#FMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5310 
	#FMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5312 
	#FMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

5313 
	#FMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

5314 
	#FMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

5315 
	#FMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

5316 
	#FMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

5317 
	#FMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

5318 
	#FMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

5319 
	#FMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

5320 
	#FMC_BCR4_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

5321 
	#FMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

5324 
	#FMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5325 
	#FMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5326 
	#FMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5327 
	#FMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5328 
	#FMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5330 
	#FMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5331 
	#FMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5332 
	#FMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5333 
	#FMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5334 
	#FMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5336 
	#FMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5337 
	#FMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5338 
	#FMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5339 
	#FMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5340 
	#FMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5341 
	#FMC_BTR1_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5342 
	#FMC_BTR1_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5343 
	#FMC_BTR1_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5344 
	#FMC_BTR1_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5346 
	#FMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5347 
	#FMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5348 
	#FMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5349 
	#FMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5350 
	#FMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5352 
	#FMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5353 
	#FMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5354 
	#FMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5355 
	#FMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5356 
	#FMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5358 
	#FMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5359 
	#FMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5360 
	#FMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5361 
	#FMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5362 
	#FMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5364 
	#FMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5365 
	#FMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5366 
	#FMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5369 
	#FMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5370 
	#FMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5371 
	#FMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5372 
	#FMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5373 
	#FMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5375 
	#FMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5376 
	#FMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5377 
	#FMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5378 
	#FMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5379 
	#FMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5381 
	#FMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5382 
	#FMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5383 
	#FMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5384 
	#FMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5385 
	#FMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5386 
	#FMC_BTR2_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5387 
	#FMC_BTR2_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5388 
	#FMC_BTR2_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5389 
	#FMC_BTR2_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5391 
	#FMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5392 
	#FMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5393 
	#FMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5394 
	#FMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5395 
	#FMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5397 
	#FMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5398 
	#FMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5399 
	#FMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5400 
	#FMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5401 
	#FMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5403 
	#FMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5404 
	#FMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5405 
	#FMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5406 
	#FMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5407 
	#FMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5409 
	#FMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5410 
	#FMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5411 
	#FMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5414 
	#FMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5415 
	#FMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5416 
	#FMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5417 
	#FMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5418 
	#FMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5420 
	#FMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5421 
	#FMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5422 
	#FMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5423 
	#FMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5424 
	#FMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5426 
	#FMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5427 
	#FMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5428 
	#FMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5429 
	#FMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5430 
	#FMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5431 
	#FMC_BTR3_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5432 
	#FMC_BTR3_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5433 
	#FMC_BTR3_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5434 
	#FMC_BTR3_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5436 
	#FMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5437 
	#FMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5438 
	#FMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5439 
	#FMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5440 
	#FMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5442 
	#FMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5443 
	#FMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5444 
	#FMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5445 
	#FMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5446 
	#FMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5448 
	#FMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5449 
	#FMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5450 
	#FMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5451 
	#FMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5452 
	#FMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5454 
	#FMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5455 
	#FMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5456 
	#FMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5459 
	#FMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5460 
	#FMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5461 
	#FMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5462 
	#FMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5463 
	#FMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5465 
	#FMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5466 
	#FMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5467 
	#FMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5468 
	#FMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5469 
	#FMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5471 
	#FMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5472 
	#FMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5473 
	#FMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5474 
	#FMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5475 
	#FMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5476 
	#FMC_BTR4_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5477 
	#FMC_BTR4_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5478 
	#FMC_BTR4_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5479 
	#FMC_BTR4_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5481 
	#FMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5482 
	#FMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5483 
	#FMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5484 
	#FMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5485 
	#FMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5487 
	#FMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5488 
	#FMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5489 
	#FMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5490 
	#FMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5491 
	#FMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5493 
	#FMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5494 
	#FMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5495 
	#FMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5496 
	#FMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5497 
	#FMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5499 
	#FMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5500 
	#FMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5501 
	#FMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5504 
	#FMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5505 
	#FMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5506 
	#FMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5507 
	#FMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5508 
	#FMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5510 
	#FMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5511 
	#FMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5512 
	#FMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5513 
	#FMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5514 
	#FMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5516 
	#FMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5517 
	#FMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5518 
	#FMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5519 
	#FMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5520 
	#FMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5521 
	#FMC_BWTR1_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5522 
	#FMC_BWTR1_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5523 
	#FMC_BWTR1_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5524 
	#FMC_BWTR1_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5526 
	#FMC_BWTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5527 
	#FMC_BWTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5528 
	#FMC_BWTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5529 
	#FMC_BWTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5530 
	#FMC_BWTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5532 
	#FMC_BWTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5533 
	#FMC_BWTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5534 
	#FMC_BWTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5535 
	#FMC_BWTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5536 
	#FMC_BWTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5538 
	#FMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5539 
	#FMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5540 
	#FMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5543 
	#FMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5544 
	#FMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5545 
	#FMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5546 
	#FMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5547 
	#FMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5549 
	#FMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5550 
	#FMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5551 
	#FMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5552 
	#FMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5553 
	#FMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5555 
	#FMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5556 
	#FMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5557 
	#FMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5558 
	#FMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5559 
	#FMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5560 
	#FMC_BWTR2_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5561 
	#FMC_BWTR2_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5562 
	#FMC_BWTR2_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5563 
	#FMC_BWTR2_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5565 
	#FMC_BWTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5566 
	#FMC_BWTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5567 
	#FMC_BWTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5568 
	#FMC_BWTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5569 
	#FMC_BWTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5571 
	#FMC_BWTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5572 
	#FMC_BWTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5573 
	#FMC_BWTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5574 
	#FMC_BWTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5575 
	#FMC_BWTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5577 
	#FMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5578 
	#FMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5579 
	#FMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5582 
	#FMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5583 
	#FMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5584 
	#FMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5585 
	#FMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5586 
	#FMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5588 
	#FMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5589 
	#FMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5590 
	#FMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5591 
	#FMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5592 
	#FMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5594 
	#FMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5595 
	#FMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5596 
	#FMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5597 
	#FMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5598 
	#FMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5599 
	#FMC_BWTR3_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5600 
	#FMC_BWTR3_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5601 
	#FMC_BWTR3_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5602 
	#FMC_BWTR3_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5604 
	#FMC_BWTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5605 
	#FMC_BWTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5606 
	#FMC_BWTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5607 
	#FMC_BWTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5608 
	#FMC_BWTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5610 
	#FMC_BWTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5611 
	#FMC_BWTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5612 
	#FMC_BWTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5613 
	#FMC_BWTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5614 
	#FMC_BWTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5616 
	#FMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5617 
	#FMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5618 
	#FMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5621 
	#FMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5622 
	#FMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5623 
	#FMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5624 
	#FMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5625 
	#FMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5627 
	#FMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5628 
	#FMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5629 
	#FMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5630 
	#FMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5631 
	#FMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5633 
	#FMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5634 
	#FMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5635 
	#FMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5636 
	#FMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5637 
	#FMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5638 
	#FMC_BWTR4_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

5639 
	#FMC_BWTR4_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

5640 
	#FMC_BWTR4_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

5641 
	#FMC_BWTR4_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

5643 
	#FMC_BWTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5644 
	#FMC_BWTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5645 
	#FMC_BWTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5646 
	#FMC_BWTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5647 
	#FMC_BWTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5649 
	#FMC_BWTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5650 
	#FMC_BWTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5651 
	#FMC_BWTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5652 
	#FMC_BWTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5653 
	#FMC_BWTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5655 
	#FMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5656 
	#FMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5657 
	#FMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5660 
	#FMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5661 
	#FMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5662 
	#FMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5664 
	#FMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5665 
	#FMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5666 
	#FMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5668 
	#FMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5670 
	#FMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5671 
	#FMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5672 
	#FMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5673 
	#FMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5674 
	#FMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5676 
	#FMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5677 
	#FMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5678 
	#FMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5679 
	#FMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5680 
	#FMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5682 
	#FMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5683 
	#FMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5684 
	#FMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5685 
	#FMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5688 
	#FMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5689 
	#FMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5690 
	#FMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5692 
	#FMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5693 
	#FMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5694 
	#FMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5696 
	#FMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5698 
	#FMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5699 
	#FMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5700 
	#FMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5701 
	#FMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5702 
	#FMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5704 
	#FMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5705 
	#FMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5706 
	#FMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5707 
	#FMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5708 
	#FMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5710 
	#FMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5711 
	#FMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5712 
	#FMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5713 
	#FMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5716 
	#FMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5717 
	#FMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5718 
	#FMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5720 
	#FMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5721 
	#FMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5722 
	#FMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5724 
	#FMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5726 
	#FMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5727 
	#FMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5728 
	#FMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5729 
	#FMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5730 
	#FMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5732 
	#FMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5733 
	#FMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5734 
	#FMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5735 
	#FMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5736 
	#FMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5738 
	#FMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5739 
	#FMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5740 
	#FMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5741 
	#FMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5744 
	#FMC_SR2_IRS
 ((
uöt8_t
)0x01Ë

	)

5745 
	#FMC_SR2_ILS
 ((
uöt8_t
)0x02Ë

	)

5746 
	#FMC_SR2_IFS
 ((
uöt8_t
)0x04Ë

	)

5747 
	#FMC_SR2_IREN
 ((
uöt8_t
)0x08Ë

	)

5748 
	#FMC_SR2_ILEN
 ((
uöt8_t
)0x10Ë

	)

5749 
	#FMC_SR2_IFEN
 ((
uöt8_t
)0x20Ë

	)

5750 
	#FMC_SR2_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5753 
	#FMC_SR3_IRS
 ((
uöt8_t
)0x01Ë

	)

5754 
	#FMC_SR3_ILS
 ((
uöt8_t
)0x02Ë

	)

5755 
	#FMC_SR3_IFS
 ((
uöt8_t
)0x04Ë

	)

5756 
	#FMC_SR3_IREN
 ((
uöt8_t
)0x08Ë

	)

5757 
	#FMC_SR3_ILEN
 ((
uöt8_t
)0x10Ë

	)

5758 
	#FMC_SR3_IFEN
 ((
uöt8_t
)0x20Ë

	)

5759 
	#FMC_SR3_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5762 
	#FMC_SR4_IRS
 ((
uöt8_t
)0x01Ë

	)

5763 
	#FMC_SR4_ILS
 ((
uöt8_t
)0x02Ë

	)

5764 
	#FMC_SR4_IFS
 ((
uöt8_t
)0x04Ë

	)

5765 
	#FMC_SR4_IREN
 ((
uöt8_t
)0x08Ë

	)

5766 
	#FMC_SR4_ILEN
 ((
uöt8_t
)0x10Ë

	)

5767 
	#FMC_SR4_IFEN
 ((
uöt8_t
)0x20Ë

	)

5768 
	#FMC_SR4_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5771 
	#FMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

5772 
	#FMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

5773 
	#FMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

5774 
	#FMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

5775 
	#FMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

5776 
	#FMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

5777 
	#FMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

5778 
	#FMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

5779 
	#FMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

5781 
	#FMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

5782 
	#FMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

5783 
	#FMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

5784 
	#FMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

5785 
	#FMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

5786 
	#FMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

5787 
	#FMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

5788 
	#FMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5789 
	#FMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5791 
	#FMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5792 
	#FMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5793 
	#FMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5794 
	#FMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5795 
	#FMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5796 
	#FMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5797 
	#FMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5798 
	#FMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5799 
	#FMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5801 
	#FMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5802 
	#FMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5803 
	#FMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5804 
	#FMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5805 
	#FMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5806 
	#FMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5807 
	#FMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5808 
	#FMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5809 
	#FMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5812 
	#FMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

5813 
	#FMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5814 
	#FMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5815 
	#FMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5816 
	#FMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5817 
	#FMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5818 
	#FMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5819 
	#FMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5820 
	#FMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5822 
	#FMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5823 
	#FMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5824 
	#FMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5825 
	#FMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5826 
	#FMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5827 
	#FMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5828 
	#FMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5829 
	#FMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5830 
	#FMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5832 
	#FMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5833 
	#FMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5834 
	#FMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5835 
	#FMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5836 
	#FMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5837 
	#FMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5838 
	#FMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5839 
	#FMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5840 
	#FMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5842 
	#FMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5843 
	#FMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5844 
	#FMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5845 
	#FMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5846 
	#FMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5847 
	#FMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5848 
	#FMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5849 
	#FMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5850 
	#FMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5853 
	#FMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

5854 
	#FMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5855 
	#FMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5856 
	#FMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5857 
	#FMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5858 
	#FMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5859 
	#FMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5860 
	#FMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5861 
	#FMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5863 
	#FMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5864 
	#FMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5865 
	#FMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5866 
	#FMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5867 
	#FMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5868 
	#FMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5869 
	#FMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5870 
	#FMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5871 
	#FMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5873 
	#FMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5874 
	#FMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5875 
	#FMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5876 
	#FMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5877 
	#FMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5878 
	#FMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5879 
	#FMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5880 
	#FMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5881 
	#FMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5883 
	#FMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5884 
	#FMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5885 
	#FMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5886 
	#FMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5887 
	#FMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5888 
	#FMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5889 
	#FMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5890 
	#FMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5891 
	#FMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5894 
	#FMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

5895 
	#FMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

5896 
	#FMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

5897 
	#FMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

5898 
	#FMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

5899 
	#FMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

5900 
	#FMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

5901 
	#FMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

5902 
	#FMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

5904 
	#FMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

5905 
	#FMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

5906 
	#FMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

5907 
	#FMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

5908 
	#FMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

5909 
	#FMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

5910 
	#FMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

5911 
	#FMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5912 
	#FMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5914 
	#FMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5915 
	#FMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5916 
	#FMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5917 
	#FMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5918 
	#FMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5919 
	#FMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5920 
	#FMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5921 
	#FMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5922 
	#FMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5924 
	#FMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5925 
	#FMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5926 
	#FMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5927 
	#FMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5928 
	#FMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5929 
	#FMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5930 
	#FMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5931 
	#FMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5932 
	#FMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5935 
	#FMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

5936 
	#FMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5937 
	#FMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5938 
	#FMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5939 
	#FMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5940 
	#FMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5941 
	#FMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5942 
	#FMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5943 
	#FMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5945 
	#FMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5946 
	#FMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5947 
	#FMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5948 
	#FMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5949 
	#FMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5950 
	#FMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5951 
	#FMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5952 
	#FMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5953 
	#FMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5955 
	#FMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5956 
	#FMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5957 
	#FMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5958 
	#FMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5959 
	#FMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5960 
	#FMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5961 
	#FMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5962 
	#FMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5963 
	#FMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5965 
	#FMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5966 
	#FMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5967 
	#FMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5968 
	#FMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5969 
	#FMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5970 
	#FMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5971 
	#FMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5972 
	#FMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5973 
	#FMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5976 
	#FMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

5977 
	#FMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5978 
	#FMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5979 
	#FMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5980 
	#FMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5981 
	#FMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5982 
	#FMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5983 
	#FMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5984 
	#FMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5986 
	#FMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5987 
	#FMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5988 
	#FMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5989 
	#FMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5990 
	#FMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5991 
	#FMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5992 
	#FMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5993 
	#FMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5994 
	#FMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5996 
	#FMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5997 
	#FMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5998 
	#FMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5999 
	#FMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

6000 
	#FMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

6001 
	#FMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

6002 
	#FMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

6003 
	#FMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

6004 
	#FMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

6006 
	#FMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

6007 
	#FMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

6008 
	#FMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

6009 
	#FMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

6010 
	#FMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

6011 
	#FMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

6012 
	#FMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

6013 
	#FMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

6014 
	#FMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

6017 
	#FMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

6018 
	#FMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

6019 
	#FMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

6020 
	#FMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

6021 
	#FMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

6022 
	#FMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

6023 
	#FMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

6024 
	#FMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

6025 
	#FMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

6027 
	#FMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

6028 
	#FMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

6029 
	#FMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

6030 
	#FMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

6031 
	#FMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

6032 
	#FMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

6033 
	#FMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

6034 
	#FMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

6035 
	#FMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

6037 
	#FMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

6038 
	#FMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

6039 
	#FMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

6040 
	#FMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

6041 
	#FMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

6042 
	#FMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

6043 
	#FMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

6044 
	#FMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

6045 
	#FMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

6047 
	#FMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

6048 
	#FMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

6049 
	#FMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

6050 
	#FMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

6051 
	#FMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

6052 
	#FMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

6053 
	#FMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

6054 
	#FMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

6055 
	#FMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

6058 
	#FMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

6061 
	#FMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

6064 
	#FMC_SDCR1_NC
 ((
uöt32_t
)0x00000003Ë

	)

6065 
	#FMC_SDCR1_NC_0
 ((
uöt32_t
)0x00000001Ë

	)

6066 
	#FMC_SDCR1_NC_1
 ((
uöt32_t
)0x00000002Ë

	)

6068 
	#FMC_SDCR1_NR
 ((
uöt32_t
)0x0000000CË

	)

6069 
	#FMC_SDCR1_NR_0
 ((
uöt32_t
)0x00000004Ë

	)

6070 
	#FMC_SDCR1_NR_1
 ((
uöt32_t
)0x00000008Ë

	)

6072 
	#FMC_SDCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

6073 
	#FMC_SDCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

6074 
	#FMC_SDCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

6076 
	#FMC_SDCR1_NB
 ((
uöt32_t
)0x00000040Ë

	)

6078 
	#FMC_SDCR1_CAS
 ((
uöt32_t
)0x00000180Ë

	)

6079 
	#FMC_SDCR1_CAS_0
 ((
uöt32_t
)0x00000080Ë

	)

6080 
	#FMC_SDCR1_CAS_1
 ((
uöt32_t
)0x00000100Ë

	)

6082 
	#FMC_SDCR1_WP
 ((
uöt32_t
)0x00000200Ë

	)

6084 
	#FMC_SDCR1_SDCLK
 ((
uöt32_t
)0x00000C00Ë

	)

6085 
	#FMC_SDCR1_SDCLK_0
 ((
uöt32_t
)0x00000400Ë

	)

6086 
	#FMC_SDCR1_SDCLK_1
 ((
uöt32_t
)0x00000800Ë

	)

6088 
	#FMC_SDCR1_RBURST
 ((
uöt32_t
)0x00001000Ë

	)

6090 
	#FMC_SDCR1_RPIPE
 ((
uöt32_t
)0x00006000Ë

	)

6091 
	#FMC_SDCR1_RPIPE_0
 ((
uöt32_t
)0x00002000Ë

	)

6092 
	#FMC_SDCR1_RPIPE_1
 ((
uöt32_t
)0x00004000Ë

	)

6095 
	#FMC_SDCR2_NC
 ((
uöt32_t
)0x00000003Ë

	)

6096 
	#FMC_SDCR2_NC_0
 ((
uöt32_t
)0x00000001Ë

	)

6097 
	#FMC_SDCR2_NC_1
 ((
uöt32_t
)0x00000002Ë

	)

6099 
	#FMC_SDCR2_NR
 ((
uöt32_t
)0x0000000CË

	)

6100 
	#FMC_SDCR2_NR_0
 ((
uöt32_t
)0x00000004Ë

	)

6101 
	#FMC_SDCR2_NR_1
 ((
uöt32_t
)0x00000008Ë

	)

6103 
	#FMC_SDCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

6104 
	#FMC_SDCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

6105 
	#FMC_SDCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

6107 
	#FMC_SDCR2_NB
 ((
uöt32_t
)0x00000040Ë

	)

6109 
	#FMC_SDCR2_CAS
 ((
uöt32_t
)0x00000180Ë

	)

6110 
	#FMC_SDCR2_CAS_0
 ((
uöt32_t
)0x00000080Ë

	)

6111 
	#FMC_SDCR2_CAS_1
 ((
uöt32_t
)0x00000100Ë

	)

6113 
	#FMC_SDCR2_WP
 ((
uöt32_t
)0x00000200Ë

	)

6115 
	#FMC_SDCR2_SDCLK
 ((
uöt32_t
)0x00000C00Ë

	)

6116 
	#FMC_SDCR2_SDCLK_0
 ((
uöt32_t
)0x00000400Ë

	)

6117 
	#FMC_SDCR2_SDCLK_1
 ((
uöt32_t
)0x00000800Ë

	)

6119 
	#FMC_SDCR2_RBURST
 ((
uöt32_t
)0x00001000Ë

	)

6121 
	#FMC_SDCR2_RPIPE
 ((
uöt32_t
)0x00006000Ë

	)

6122 
	#FMC_SDCR2_RPIPE_0
 ((
uöt32_t
)0x00002000Ë

	)

6123 
	#FMC_SDCR2_RPIPE_1
 ((
uöt32_t
)0x00004000Ë

	)

6126 
	#FMC_SDTR1_TMRD
 ((
uöt32_t
)0x0000000FË

	)

6127 
	#FMC_SDTR1_TMRD_0
 ((
uöt32_t
)0x00000001Ë

	)

6128 
	#FMC_SDTR1_TMRD_1
 ((
uöt32_t
)0x00000002Ë

	)

6129 
	#FMC_SDTR1_TMRD_2
 ((
uöt32_t
)0x00000004Ë

	)

6130 
	#FMC_SDTR1_TMRD_3
 ((
uöt32_t
)0x00000008Ë

	)

6132 
	#FMC_SDTR1_TXSR
 ((
uöt32_t
)0x000000F0Ë

	)

6133 
	#FMC_SDTR1_TXSR_0
 ((
uöt32_t
)0x00000010Ë

	)

6134 
	#FMC_SDTR1_TXSR_1
 ((
uöt32_t
)0x00000020Ë

	)

6135 
	#FMC_SDTR1_TXSR_2
 ((
uöt32_t
)0x00000040Ë

	)

6136 
	#FMC_SDTR1_TXSR_3
 ((
uöt32_t
)0x00000080Ë

	)

6138 
	#FMC_SDTR1_TRAS
 ((
uöt32_t
)0x00000F00Ë

	)

6139 
	#FMC_SDTR1_TRAS_0
 ((
uöt32_t
)0x00000100Ë

	)

6140 
	#FMC_SDTR1_TRAS_1
 ((
uöt32_t
)0x00000200Ë

	)

6141 
	#FMC_SDTR1_TRAS_2
 ((
uöt32_t
)0x00000400Ë

	)

6142 
	#FMC_SDTR1_TRAS_3
 ((
uöt32_t
)0x00000800Ë

	)

6144 
	#FMC_SDTR1_TRC
 ((
uöt32_t
)0x0000F000Ë

	)

6145 
	#FMC_SDTR1_TRC_0
 ((
uöt32_t
)0x00001000Ë

	)

6146 
	#FMC_SDTR1_TRC_1
 ((
uöt32_t
)0x00002000Ë

	)

6147 
	#FMC_SDTR1_TRC_2
 ((
uöt32_t
)0x00004000Ë

	)

6149 
	#FMC_SDTR1_TWR
 ((
uöt32_t
)0x000F0000Ë

	)

6150 
	#FMC_SDTR1_TWR_0
 ((
uöt32_t
)0x00010000Ë

	)

6151 
	#FMC_SDTR1_TWR_1
 ((
uöt32_t
)0x00020000Ë

	)

6152 
	#FMC_SDTR1_TWR_2
 ((
uöt32_t
)0x00040000Ë

	)

6154 
	#FMC_SDTR1_TRP
 ((
uöt32_t
)0x00F00000Ë

	)

6155 
	#FMC_SDTR1_TRP_0
 ((
uöt32_t
)0x00100000Ë

	)

6156 
	#FMC_SDTR1_TRP_1
 ((
uöt32_t
)0x00200000Ë

	)

6157 
	#FMC_SDTR1_TRP_2
 ((
uöt32_t
)0x00400000Ë

	)

6159 
	#FMC_SDTR1_TRCD
 ((
uöt32_t
)0x0F000000Ë

	)

6160 
	#FMC_SDTR1_TRCD_0
 ((
uöt32_t
)0x01000000Ë

	)

6161 
	#FMC_SDTR1_TRCD_1
 ((
uöt32_t
)0x02000000Ë

	)

6162 
	#FMC_SDTR1_TRCD_2
 ((
uöt32_t
)0x04000000Ë

	)

6165 
	#FMC_SDTR2_TMRD
 ((
uöt32_t
)0x0000000FË

	)

6166 
	#FMC_SDTR2_TMRD_0
 ((
uöt32_t
)0x00000001Ë

	)

6167 
	#FMC_SDTR2_TMRD_1
 ((
uöt32_t
)0x00000002Ë

	)

6168 
	#FMC_SDTR2_TMRD_2
 ((
uöt32_t
)0x00000004Ë

	)

6169 
	#FMC_SDTR2_TMRD_3
 ((
uöt32_t
)0x00000008Ë

	)

6171 
	#FMC_SDTR2_TXSR
 ((
uöt32_t
)0x000000F0Ë

	)

6172 
	#FMC_SDTR2_TXSR_0
 ((
uöt32_t
)0x00000010Ë

	)

6173 
	#FMC_SDTR2_TXSR_1
 ((
uöt32_t
)0x00000020Ë

	)

6174 
	#FMC_SDTR2_TXSR_2
 ((
uöt32_t
)0x00000040Ë

	)

6175 
	#FMC_SDTR2_TXSR_3
 ((
uöt32_t
)0x00000080Ë

	)

6177 
	#FMC_SDTR2_TRAS
 ((
uöt32_t
)0x00000F00Ë

	)

6178 
	#FMC_SDTR2_TRAS_0
 ((
uöt32_t
)0x00000100Ë

	)

6179 
	#FMC_SDTR2_TRAS_1
 ((
uöt32_t
)0x00000200Ë

	)

6180 
	#FMC_SDTR2_TRAS_2
 ((
uöt32_t
)0x00000400Ë

	)

6181 
	#FMC_SDTR2_TRAS_3
 ((
uöt32_t
)0x00000800Ë

	)

6183 
	#FMC_SDTR2_TRC
 ((
uöt32_t
)0x0000F000Ë

	)

6184 
	#FMC_SDTR2_TRC_0
 ((
uöt32_t
)0x00001000Ë

	)

6185 
	#FMC_SDTR2_TRC_1
 ((
uöt32_t
)0x00002000Ë

	)

6186 
	#FMC_SDTR2_TRC_2
 ((
uöt32_t
)0x00004000Ë

	)

6188 
	#FMC_SDTR2_TWR
 ((
uöt32_t
)0x000F0000Ë

	)

6189 
	#FMC_SDTR2_TWR_0
 ((
uöt32_t
)0x00010000Ë

	)

6190 
	#FMC_SDTR2_TWR_1
 ((
uöt32_t
)0x00020000Ë

	)

6191 
	#FMC_SDTR2_TWR_2
 ((
uöt32_t
)0x00040000Ë

	)

6193 
	#FMC_SDTR2_TRP
 ((
uöt32_t
)0x00F00000Ë

	)

6194 
	#FMC_SDTR2_TRP_0
 ((
uöt32_t
)0x00100000Ë

	)

6195 
	#FMC_SDTR2_TRP_1
 ((
uöt32_t
)0x00200000Ë

	)

6196 
	#FMC_SDTR2_TRP_2
 ((
uöt32_t
)0x00400000Ë

	)

6198 
	#FMC_SDTR2_TRCD
 ((
uöt32_t
)0x0F000000Ë

	)

6199 
	#FMC_SDTR2_TRCD_0
 ((
uöt32_t
)0x01000000Ë

	)

6200 
	#FMC_SDTR2_TRCD_1
 ((
uöt32_t
)0x02000000Ë

	)

6201 
	#FMC_SDTR2_TRCD_2
 ((
uöt32_t
)0x04000000Ë

	)

6204 
	#FMC_SDCMR_MODE
 ((
uöt32_t
)0x00000007Ë

	)

6205 
	#FMC_SDCMR_MODE_0
 ((
uöt32_t
)0x00000001Ë

	)

6206 
	#FMC_SDCMR_MODE_1
 ((
uöt32_t
)0x00000002Ë

	)

6207 
	#FMC_SDCMR_MODE_2
 ((
uöt32_t
)0x00000003Ë

	)

6209 
	#FMC_SDCMR_CTB2
 ((
uöt32_t
)0x00000008Ë

	)

6211 
	#FMC_SDCMR_CTB1
 ((
uöt32_t
)0x00000010Ë

	)

6213 
	#FMC_SDCMR_NRFS
 ((
uöt32_t
)0x000001E0Ë

	)

6214 
	#FMC_SDCMR_NRFS_0
 ((
uöt32_t
)0x00000020Ë

	)

6215 
	#FMC_SDCMR_NRFS_1
 ((
uöt32_t
)0x00000040Ë

	)

6216 
	#FMC_SDCMR_NRFS_2
 ((
uöt32_t
)0x00000080Ë

	)

6217 
	#FMC_SDCMR_NRFS_3
 ((
uöt32_t
)0x00000100Ë

	)

6219 
	#FMC_SDCMR_MRD
 ((
uöt32_t
)0x003FFE00Ë

	)

6222 
	#FMC_SDRTR_CRE
 ((
uöt32_t
)0x00000001Ë

	)

6224 
	#FMC_SDRTR_COUNT
 ((
uöt32_t
)0x00003FFEË

	)

6226 
	#FMC_SDRTR_REIE
 ((
uöt32_t
)0x00004000Ë

	)

6229 
	#FMC_SDSR_RE
 ((
uöt32_t
)0x00000001Ë

	)

6231 
	#FMC_SDSR_MODES1
 ((
uöt32_t
)0x00000006Ë

	)

6232 
	#FMC_SDSR_MODES1_0
 ((
uöt32_t
)0x00000002Ë

	)

6233 
	#FMC_SDSR_MODES1_1
 ((
uöt32_t
)0x00000004Ë

	)

6235 
	#FMC_SDSR_MODES2
 ((
uöt32_t
)0x00000018Ë

	)

6236 
	#FMC_SDSR_MODES2_0
 ((
uöt32_t
)0x00000008Ë

	)

6237 
	#FMC_SDSR_MODES2_1
 ((
uöt32_t
)0x00000010Ë

	)

6239 
	#FMC_SDSR_BUSY
 ((
uöt32_t
)0x00000020Ë

	)

6249 
	#GPIO_MODER_MODER0
 ((
uöt32_t
)0x00000003)

	)

6250 
	#GPIO_MODER_MODER0_0
 ((
uöt32_t
)0x00000001)

	)

6251 
	#GPIO_MODER_MODER0_1
 ((
uöt32_t
)0x00000002)

	)

6253 
	#GPIO_MODER_MODER1
 ((
uöt32_t
)0x0000000C)

	)

6254 
	#GPIO_MODER_MODER1_0
 ((
uöt32_t
)0x00000004)

	)

6255 
	#GPIO_MODER_MODER1_1
 ((
uöt32_t
)0x00000008)

	)

6257 
	#GPIO_MODER_MODER2
 ((
uöt32_t
)0x00000030)

	)

6258 
	#GPIO_MODER_MODER2_0
 ((
uöt32_t
)0x00000010)

	)

6259 
	#GPIO_MODER_MODER2_1
 ((
uöt32_t
)0x00000020)

	)

6261 
	#GPIO_MODER_MODER3
 ((
uöt32_t
)0x000000C0)

	)

6262 
	#GPIO_MODER_MODER3_0
 ((
uöt32_t
)0x00000040)

	)

6263 
	#GPIO_MODER_MODER3_1
 ((
uöt32_t
)0x00000080)

	)

6265 
	#GPIO_MODER_MODER4
 ((
uöt32_t
)0x00000300)

	)

6266 
	#GPIO_MODER_MODER4_0
 ((
uöt32_t
)0x00000100)

	)

6267 
	#GPIO_MODER_MODER4_1
 ((
uöt32_t
)0x00000200)

	)

6269 
	#GPIO_MODER_MODER5
 ((
uöt32_t
)0x00000C00)

	)

6270 
	#GPIO_MODER_MODER5_0
 ((
uöt32_t
)0x00000400)

	)

6271 
	#GPIO_MODER_MODER5_1
 ((
uöt32_t
)0x00000800)

	)

6273 
	#GPIO_MODER_MODER6
 ((
uöt32_t
)0x00003000)

	)

6274 
	#GPIO_MODER_MODER6_0
 ((
uöt32_t
)0x00001000)

	)

6275 
	#GPIO_MODER_MODER6_1
 ((
uöt32_t
)0x00002000)

	)

6277 
	#GPIO_MODER_MODER7
 ((
uöt32_t
)0x0000C000)

	)

6278 
	#GPIO_MODER_MODER7_0
 ((
uöt32_t
)0x00004000)

	)

6279 
	#GPIO_MODER_MODER7_1
 ((
uöt32_t
)0x00008000)

	)

6281 
	#GPIO_MODER_MODER8
 ((
uöt32_t
)0x00030000)

	)

6282 
	#GPIO_MODER_MODER8_0
 ((
uöt32_t
)0x00010000)

	)

6283 
	#GPIO_MODER_MODER8_1
 ((
uöt32_t
)0x00020000)

	)

6285 
	#GPIO_MODER_MODER9
 ((
uöt32_t
)0x000C0000)

	)

6286 
	#GPIO_MODER_MODER9_0
 ((
uöt32_t
)0x00040000)

	)

6287 
	#GPIO_MODER_MODER9_1
 ((
uöt32_t
)0x00080000)

	)

6289 
	#GPIO_MODER_MODER10
 ((
uöt32_t
)0x00300000)

	)

6290 
	#GPIO_MODER_MODER10_0
 ((
uöt32_t
)0x00100000)

	)

6291 
	#GPIO_MODER_MODER10_1
 ((
uöt32_t
)0x00200000)

	)

6293 
	#GPIO_MODER_MODER11
 ((
uöt32_t
)0x00C00000)

	)

6294 
	#GPIO_MODER_MODER11_0
 ((
uöt32_t
)0x00400000)

	)

6295 
	#GPIO_MODER_MODER11_1
 ((
uöt32_t
)0x00800000)

	)

6297 
	#GPIO_MODER_MODER12
 ((
uöt32_t
)0x03000000)

	)

6298 
	#GPIO_MODER_MODER12_0
 ((
uöt32_t
)0x01000000)

	)

6299 
	#GPIO_MODER_MODER12_1
 ((
uöt32_t
)0x02000000)

	)

6301 
	#GPIO_MODER_MODER13
 ((
uöt32_t
)0x0C000000)

	)

6302 
	#GPIO_MODER_MODER13_0
 ((
uöt32_t
)0x04000000)

	)

6303 
	#GPIO_MODER_MODER13_1
 ((
uöt32_t
)0x08000000)

	)

6305 
	#GPIO_MODER_MODER14
 ((
uöt32_t
)0x30000000)

	)

6306 
	#GPIO_MODER_MODER14_0
 ((
uöt32_t
)0x10000000)

	)

6307 
	#GPIO_MODER_MODER14_1
 ((
uöt32_t
)0x20000000)

	)

6309 
	#GPIO_MODER_MODER15
 ((
uöt32_t
)0xC0000000)

	)

6310 
	#GPIO_MODER_MODER15_0
 ((
uöt32_t
)0x40000000)

	)

6311 
	#GPIO_MODER_MODER15_1
 ((
uöt32_t
)0x80000000)

	)

6314 
	#GPIO_OTYPER_OT_0
 ((
uöt32_t
)0x00000001)

	)

6315 
	#GPIO_OTYPER_OT_1
 ((
uöt32_t
)0x00000002)

	)

6316 
	#GPIO_OTYPER_OT_2
 ((
uöt32_t
)0x00000004)

	)

6317 
	#GPIO_OTYPER_OT_3
 ((
uöt32_t
)0x00000008)

	)

6318 
	#GPIO_OTYPER_OT_4
 ((
uöt32_t
)0x00000010)

	)

6319 
	#GPIO_OTYPER_OT_5
 ((
uöt32_t
)0x00000020)

	)

6320 
	#GPIO_OTYPER_OT_6
 ((
uöt32_t
)0x00000040)

	)

6321 
	#GPIO_OTYPER_OT_7
 ((
uöt32_t
)0x00000080)

	)

6322 
	#GPIO_OTYPER_OT_8
 ((
uöt32_t
)0x00000100)

	)

6323 
	#GPIO_OTYPER_OT_9
 ((
uöt32_t
)0x00000200)

	)

6324 
	#GPIO_OTYPER_OT_10
 ((
uöt32_t
)0x00000400)

	)

6325 
	#GPIO_OTYPER_OT_11
 ((
uöt32_t
)0x00000800)

	)

6326 
	#GPIO_OTYPER_OT_12
 ((
uöt32_t
)0x00001000)

	)

6327 
	#GPIO_OTYPER_OT_13
 ((
uöt32_t
)0x00002000)

	)

6328 
	#GPIO_OTYPER_OT_14
 ((
uöt32_t
)0x00004000)

	)

6329 
	#GPIO_OTYPER_OT_15
 ((
uöt32_t
)0x00008000)

	)

6332 
	#GPIO_OSPEEDER_OSPEEDR0
 ((
uöt32_t
)0x00000003)

	)

6333 
	#GPIO_OSPEEDER_OSPEEDR0_0
 ((
uöt32_t
)0x00000001)

	)

6334 
	#GPIO_OSPEEDER_OSPEEDR0_1
 ((
uöt32_t
)0x00000002)

	)

6336 
	#GPIO_OSPEEDER_OSPEEDR1
 ((
uöt32_t
)0x0000000C)

	)

6337 
	#GPIO_OSPEEDER_OSPEEDR1_0
 ((
uöt32_t
)0x00000004)

	)

6338 
	#GPIO_OSPEEDER_OSPEEDR1_1
 ((
uöt32_t
)0x00000008)

	)

6340 
	#GPIO_OSPEEDER_OSPEEDR2
 ((
uöt32_t
)0x00000030)

	)

6341 
	#GPIO_OSPEEDER_OSPEEDR2_0
 ((
uöt32_t
)0x00000010)

	)

6342 
	#GPIO_OSPEEDER_OSPEEDR2_1
 ((
uöt32_t
)0x00000020)

	)

6344 
	#GPIO_OSPEEDER_OSPEEDR3
 ((
uöt32_t
)0x000000C0)

	)

6345 
	#GPIO_OSPEEDER_OSPEEDR3_0
 ((
uöt32_t
)0x00000040)

	)

6346 
	#GPIO_OSPEEDER_OSPEEDR3_1
 ((
uöt32_t
)0x00000080)

	)

6348 
	#GPIO_OSPEEDER_OSPEEDR4
 ((
uöt32_t
)0x00000300)

	)

6349 
	#GPIO_OSPEEDER_OSPEEDR4_0
 ((
uöt32_t
)0x00000100)

	)

6350 
	#GPIO_OSPEEDER_OSPEEDR4_1
 ((
uöt32_t
)0x00000200)

	)

6352 
	#GPIO_OSPEEDER_OSPEEDR5
 ((
uöt32_t
)0x00000C00)

	)

6353 
	#GPIO_OSPEEDER_OSPEEDR5_0
 ((
uöt32_t
)0x00000400)

	)

6354 
	#GPIO_OSPEEDER_OSPEEDR5_1
 ((
uöt32_t
)0x00000800)

	)

6356 
	#GPIO_OSPEEDER_OSPEEDR6
 ((
uöt32_t
)0x00003000)

	)

6357 
	#GPIO_OSPEEDER_OSPEEDR6_0
 ((
uöt32_t
)0x00001000)

	)

6358 
	#GPIO_OSPEEDER_OSPEEDR6_1
 ((
uöt32_t
)0x00002000)

	)

6360 
	#GPIO_OSPEEDER_OSPEEDR7
 ((
uöt32_t
)0x0000C000)

	)

6361 
	#GPIO_OSPEEDER_OSPEEDR7_0
 ((
uöt32_t
)0x00004000)

	)

6362 
	#GPIO_OSPEEDER_OSPEEDR7_1
 ((
uöt32_t
)0x00008000)

	)

6364 
	#GPIO_OSPEEDER_OSPEEDR8
 ((
uöt32_t
)0x00030000)

	)

6365 
	#GPIO_OSPEEDER_OSPEEDR8_0
 ((
uöt32_t
)0x00010000)

	)

6366 
	#GPIO_OSPEEDER_OSPEEDR8_1
 ((
uöt32_t
)0x00020000)

	)

6368 
	#GPIO_OSPEEDER_OSPEEDR9
 ((
uöt32_t
)0x000C0000)

	)

6369 
	#GPIO_OSPEEDER_OSPEEDR9_0
 ((
uöt32_t
)0x00040000)

	)

6370 
	#GPIO_OSPEEDER_OSPEEDR9_1
 ((
uöt32_t
)0x00080000)

	)

6372 
	#GPIO_OSPEEDER_OSPEEDR10
 ((
uöt32_t
)0x00300000)

	)

6373 
	#GPIO_OSPEEDER_OSPEEDR10_0
 ((
uöt32_t
)0x00100000)

	)

6374 
	#GPIO_OSPEEDER_OSPEEDR10_1
 ((
uöt32_t
)0x00200000)

	)

6376 
	#GPIO_OSPEEDER_OSPEEDR11
 ((
uöt32_t
)0x00C00000)

	)

6377 
	#GPIO_OSPEEDER_OSPEEDR11_0
 ((
uöt32_t
)0x00400000)

	)

6378 
	#GPIO_OSPEEDER_OSPEEDR11_1
 ((
uöt32_t
)0x00800000)

	)

6380 
	#GPIO_OSPEEDER_OSPEEDR12
 ((
uöt32_t
)0x03000000)

	)

6381 
	#GPIO_OSPEEDER_OSPEEDR12_0
 ((
uöt32_t
)0x01000000)

	)

6382 
	#GPIO_OSPEEDER_OSPEEDR12_1
 ((
uöt32_t
)0x02000000)

	)

6384 
	#GPIO_OSPEEDER_OSPEEDR13
 ((
uöt32_t
)0x0C000000)

	)

6385 
	#GPIO_OSPEEDER_OSPEEDR13_0
 ((
uöt32_t
)0x04000000)

	)

6386 
	#GPIO_OSPEEDER_OSPEEDR13_1
 ((
uöt32_t
)0x08000000)

	)

6388 
	#GPIO_OSPEEDER_OSPEEDR14
 ((
uöt32_t
)0x30000000)

	)

6389 
	#GPIO_OSPEEDER_OSPEEDR14_0
 ((
uöt32_t
)0x10000000)

	)

6390 
	#GPIO_OSPEEDER_OSPEEDR14_1
 ((
uöt32_t
)0x20000000)

	)

6392 
	#GPIO_OSPEEDER_OSPEEDR15
 ((
uöt32_t
)0xC0000000)

	)

6393 
	#GPIO_OSPEEDER_OSPEEDR15_0
 ((
uöt32_t
)0x40000000)

	)

6394 
	#GPIO_OSPEEDER_OSPEEDR15_1
 ((
uöt32_t
)0x80000000)

	)

6397 
	#GPIO_PUPDR_PUPDR0
 ((
uöt32_t
)0x00000003)

	)

6398 
	#GPIO_PUPDR_PUPDR0_0
 ((
uöt32_t
)0x00000001)

	)

6399 
	#GPIO_PUPDR_PUPDR0_1
 ((
uöt32_t
)0x00000002)

	)

6401 
	#GPIO_PUPDR_PUPDR1
 ((
uöt32_t
)0x0000000C)

	)

6402 
	#GPIO_PUPDR_PUPDR1_0
 ((
uöt32_t
)0x00000004)

	)

6403 
	#GPIO_PUPDR_PUPDR1_1
 ((
uöt32_t
)0x00000008)

	)

6405 
	#GPIO_PUPDR_PUPDR2
 ((
uöt32_t
)0x00000030)

	)

6406 
	#GPIO_PUPDR_PUPDR2_0
 ((
uöt32_t
)0x00000010)

	)

6407 
	#GPIO_PUPDR_PUPDR2_1
 ((
uöt32_t
)0x00000020)

	)

6409 
	#GPIO_PUPDR_PUPDR3
 ((
uöt32_t
)0x000000C0)

	)

6410 
	#GPIO_PUPDR_PUPDR3_0
 ((
uöt32_t
)0x00000040)

	)

6411 
	#GPIO_PUPDR_PUPDR3_1
 ((
uöt32_t
)0x00000080)

	)

6413 
	#GPIO_PUPDR_PUPDR4
 ((
uöt32_t
)0x00000300)

	)

6414 
	#GPIO_PUPDR_PUPDR4_0
 ((
uöt32_t
)0x00000100)

	)

6415 
	#GPIO_PUPDR_PUPDR4_1
 ((
uöt32_t
)0x00000200)

	)

6417 
	#GPIO_PUPDR_PUPDR5
 ((
uöt32_t
)0x00000C00)

	)

6418 
	#GPIO_PUPDR_PUPDR5_0
 ((
uöt32_t
)0x00000400)

	)

6419 
	#GPIO_PUPDR_PUPDR5_1
 ((
uöt32_t
)0x00000800)

	)

6421 
	#GPIO_PUPDR_PUPDR6
 ((
uöt32_t
)0x00003000)

	)

6422 
	#GPIO_PUPDR_PUPDR6_0
 ((
uöt32_t
)0x00001000)

	)

6423 
	#GPIO_PUPDR_PUPDR6_1
 ((
uöt32_t
)0x00002000)

	)

6425 
	#GPIO_PUPDR_PUPDR7
 ((
uöt32_t
)0x0000C000)

	)

6426 
	#GPIO_PUPDR_PUPDR7_0
 ((
uöt32_t
)0x00004000)

	)

6427 
	#GPIO_PUPDR_PUPDR7_1
 ((
uöt32_t
)0x00008000)

	)

6429 
	#GPIO_PUPDR_PUPDR8
 ((
uöt32_t
)0x00030000)

	)

6430 
	#GPIO_PUPDR_PUPDR8_0
 ((
uöt32_t
)0x00010000)

	)

6431 
	#GPIO_PUPDR_PUPDR8_1
 ((
uöt32_t
)0x00020000)

	)

6433 
	#GPIO_PUPDR_PUPDR9
 ((
uöt32_t
)0x000C0000)

	)

6434 
	#GPIO_PUPDR_PUPDR9_0
 ((
uöt32_t
)0x00040000)

	)

6435 
	#GPIO_PUPDR_PUPDR9_1
 ((
uöt32_t
)0x00080000)

	)

6437 
	#GPIO_PUPDR_PUPDR10
 ((
uöt32_t
)0x00300000)

	)

6438 
	#GPIO_PUPDR_PUPDR10_0
 ((
uöt32_t
)0x00100000)

	)

6439 
	#GPIO_PUPDR_PUPDR10_1
 ((
uöt32_t
)0x00200000)

	)

6441 
	#GPIO_PUPDR_PUPDR11
 ((
uöt32_t
)0x00C00000)

	)

6442 
	#GPIO_PUPDR_PUPDR11_0
 ((
uöt32_t
)0x00400000)

	)

6443 
	#GPIO_PUPDR_PUPDR11_1
 ((
uöt32_t
)0x00800000)

	)

6445 
	#GPIO_PUPDR_PUPDR12
 ((
uöt32_t
)0x03000000)

	)

6446 
	#GPIO_PUPDR_PUPDR12_0
 ((
uöt32_t
)0x01000000)

	)

6447 
	#GPIO_PUPDR_PUPDR12_1
 ((
uöt32_t
)0x02000000)

	)

6449 
	#GPIO_PUPDR_PUPDR13
 ((
uöt32_t
)0x0C000000)

	)

6450 
	#GPIO_PUPDR_PUPDR13_0
 ((
uöt32_t
)0x04000000)

	)

6451 
	#GPIO_PUPDR_PUPDR13_1
 ((
uöt32_t
)0x08000000)

	)

6453 
	#GPIO_PUPDR_PUPDR14
 ((
uöt32_t
)0x30000000)

	)

6454 
	#GPIO_PUPDR_PUPDR14_0
 ((
uöt32_t
)0x10000000)

	)

6455 
	#GPIO_PUPDR_PUPDR14_1
 ((
uöt32_t
)0x20000000)

	)

6457 
	#GPIO_PUPDR_PUPDR15
 ((
uöt32_t
)0xC0000000)

	)

6458 
	#GPIO_PUPDR_PUPDR15_0
 ((
uöt32_t
)0x40000000)

	)

6459 
	#GPIO_PUPDR_PUPDR15_1
 ((
uöt32_t
)0x80000000)

	)

6462 
	#GPIO_IDR_IDR_0
 ((
uöt32_t
)0x00000001)

	)

6463 
	#GPIO_IDR_IDR_1
 ((
uöt32_t
)0x00000002)

	)

6464 
	#GPIO_IDR_IDR_2
 ((
uöt32_t
)0x00000004)

	)

6465 
	#GPIO_IDR_IDR_3
 ((
uöt32_t
)0x00000008)

	)

6466 
	#GPIO_IDR_IDR_4
 ((
uöt32_t
)0x00000010)

	)

6467 
	#GPIO_IDR_IDR_5
 ((
uöt32_t
)0x00000020)

	)

6468 
	#GPIO_IDR_IDR_6
 ((
uöt32_t
)0x00000040)

	)

6469 
	#GPIO_IDR_IDR_7
 ((
uöt32_t
)0x00000080)

	)

6470 
	#GPIO_IDR_IDR_8
 ((
uöt32_t
)0x00000100)

	)

6471 
	#GPIO_IDR_IDR_9
 ((
uöt32_t
)0x00000200)

	)

6472 
	#GPIO_IDR_IDR_10
 ((
uöt32_t
)0x00000400)

	)

6473 
	#GPIO_IDR_IDR_11
 ((
uöt32_t
)0x00000800)

	)

6474 
	#GPIO_IDR_IDR_12
 ((
uöt32_t
)0x00001000)

	)

6475 
	#GPIO_IDR_IDR_13
 ((
uöt32_t
)0x00002000)

	)

6476 
	#GPIO_IDR_IDR_14
 ((
uöt32_t
)0x00004000)

	)

6477 
	#GPIO_IDR_IDR_15
 ((
uöt32_t
)0x00008000)

	)

6479 
	#GPIO_OTYPER_IDR_0
 
GPIO_IDR_IDR_0


	)

6480 
	#GPIO_OTYPER_IDR_1
 
GPIO_IDR_IDR_1


	)

6481 
	#GPIO_OTYPER_IDR_2
 
GPIO_IDR_IDR_2


	)

6482 
	#GPIO_OTYPER_IDR_3
 
GPIO_IDR_IDR_3


	)

6483 
	#GPIO_OTYPER_IDR_4
 
GPIO_IDR_IDR_4


	)

6484 
	#GPIO_OTYPER_IDR_5
 
GPIO_IDR_IDR_5


	)

6485 
	#GPIO_OTYPER_IDR_6
 
GPIO_IDR_IDR_6


	)

6486 
	#GPIO_OTYPER_IDR_7
 
GPIO_IDR_IDR_7


	)

6487 
	#GPIO_OTYPER_IDR_8
 
GPIO_IDR_IDR_8


	)

6488 
	#GPIO_OTYPER_IDR_9
 
GPIO_IDR_IDR_9


	)

6489 
	#GPIO_OTYPER_IDR_10
 
GPIO_IDR_IDR_10


	)

6490 
	#GPIO_OTYPER_IDR_11
 
GPIO_IDR_IDR_11


	)

6491 
	#GPIO_OTYPER_IDR_12
 
GPIO_IDR_IDR_12


	)

6492 
	#GPIO_OTYPER_IDR_13
 
GPIO_IDR_IDR_13


	)

6493 
	#GPIO_OTYPER_IDR_14
 
GPIO_IDR_IDR_14


	)

6494 
	#GPIO_OTYPER_IDR_15
 
GPIO_IDR_IDR_15


	)

6497 
	#GPIO_ODR_ODR_0
 ((
uöt32_t
)0x00000001)

	)

6498 
	#GPIO_ODR_ODR_1
 ((
uöt32_t
)0x00000002)

	)

6499 
	#GPIO_ODR_ODR_2
 ((
uöt32_t
)0x00000004)

	)

6500 
	#GPIO_ODR_ODR_3
 ((
uöt32_t
)0x00000008)

	)

6501 
	#GPIO_ODR_ODR_4
 ((
uöt32_t
)0x00000010)

	)

6502 
	#GPIO_ODR_ODR_5
 ((
uöt32_t
)0x00000020)

	)

6503 
	#GPIO_ODR_ODR_6
 ((
uöt32_t
)0x00000040)

	)

6504 
	#GPIO_ODR_ODR_7
 ((
uöt32_t
)0x00000080)

	)

6505 
	#GPIO_ODR_ODR_8
 ((
uöt32_t
)0x00000100)

	)

6506 
	#GPIO_ODR_ODR_9
 ((
uöt32_t
)0x00000200)

	)

6507 
	#GPIO_ODR_ODR_10
 ((
uöt32_t
)0x00000400)

	)

6508 
	#GPIO_ODR_ODR_11
 ((
uöt32_t
)0x00000800)

	)

6509 
	#GPIO_ODR_ODR_12
 ((
uöt32_t
)0x00001000)

	)

6510 
	#GPIO_ODR_ODR_13
 ((
uöt32_t
)0x00002000)

	)

6511 
	#GPIO_ODR_ODR_14
 ((
uöt32_t
)0x00004000)

	)

6512 
	#GPIO_ODR_ODR_15
 ((
uöt32_t
)0x00008000)

	)

6514 
	#GPIO_OTYPER_ODR_0
 
GPIO_ODR_ODR_0


	)

6515 
	#GPIO_OTYPER_ODR_1
 
GPIO_ODR_ODR_1


	)

6516 
	#GPIO_OTYPER_ODR_2
 
GPIO_ODR_ODR_2


	)

6517 
	#GPIO_OTYPER_ODR_3
 
GPIO_ODR_ODR_3


	)

6518 
	#GPIO_OTYPER_ODR_4
 
GPIO_ODR_ODR_4


	)

6519 
	#GPIO_OTYPER_ODR_5
 
GPIO_ODR_ODR_5


	)

6520 
	#GPIO_OTYPER_ODR_6
 
GPIO_ODR_ODR_6


	)

6521 
	#GPIO_OTYPER_ODR_7
 
GPIO_ODR_ODR_7


	)

6522 
	#GPIO_OTYPER_ODR_8
 
GPIO_ODR_ODR_8


	)

6523 
	#GPIO_OTYPER_ODR_9
 
GPIO_ODR_ODR_9


	)

6524 
	#GPIO_OTYPER_ODR_10
 
GPIO_ODR_ODR_10


	)

6525 
	#GPIO_OTYPER_ODR_11
 
GPIO_ODR_ODR_11


	)

6526 
	#GPIO_OTYPER_ODR_12
 
GPIO_ODR_ODR_12


	)

6527 
	#GPIO_OTYPER_ODR_13
 
GPIO_ODR_ODR_13


	)

6528 
	#GPIO_OTYPER_ODR_14
 
GPIO_ODR_ODR_14


	)

6529 
	#GPIO_OTYPER_ODR_15
 
GPIO_ODR_ODR_15


	)

6532 
	#GPIO_BSRR_BS_0
 ((
uöt32_t
)0x00000001)

	)

6533 
	#GPIO_BSRR_BS_1
 ((
uöt32_t
)0x00000002)

	)

6534 
	#GPIO_BSRR_BS_2
 ((
uöt32_t
)0x00000004)

	)

6535 
	#GPIO_BSRR_BS_3
 ((
uöt32_t
)0x00000008)

	)

6536 
	#GPIO_BSRR_BS_4
 ((
uöt32_t
)0x00000010)

	)

6537 
	#GPIO_BSRR_BS_5
 ((
uöt32_t
)0x00000020)

	)

6538 
	#GPIO_BSRR_BS_6
 ((
uöt32_t
)0x00000040)

	)

6539 
	#GPIO_BSRR_BS_7
 ((
uöt32_t
)0x00000080)

	)

6540 
	#GPIO_BSRR_BS_8
 ((
uöt32_t
)0x00000100)

	)

6541 
	#GPIO_BSRR_BS_9
 ((
uöt32_t
)0x00000200)

	)

6542 
	#GPIO_BSRR_BS_10
 ((
uöt32_t
)0x00000400)

	)

6543 
	#GPIO_BSRR_BS_11
 ((
uöt32_t
)0x00000800)

	)

6544 
	#GPIO_BSRR_BS_12
 ((
uöt32_t
)0x00001000)

	)

6545 
	#GPIO_BSRR_BS_13
 ((
uöt32_t
)0x00002000)

	)

6546 
	#GPIO_BSRR_BS_14
 ((
uöt32_t
)0x00004000)

	)

6547 
	#GPIO_BSRR_BS_15
 ((
uöt32_t
)0x00008000)

	)

6548 
	#GPIO_BSRR_BR_0
 ((
uöt32_t
)0x00010000)

	)

6549 
	#GPIO_BSRR_BR_1
 ((
uöt32_t
)0x00020000)

	)

6550 
	#GPIO_BSRR_BR_2
 ((
uöt32_t
)0x00040000)

	)

6551 
	#GPIO_BSRR_BR_3
 ((
uöt32_t
)0x00080000)

	)

6552 
	#GPIO_BSRR_BR_4
 ((
uöt32_t
)0x00100000)

	)

6553 
	#GPIO_BSRR_BR_5
 ((
uöt32_t
)0x00200000)

	)

6554 
	#GPIO_BSRR_BR_6
 ((
uöt32_t
)0x00400000)

	)

6555 
	#GPIO_BSRR_BR_7
 ((
uöt32_t
)0x00800000)

	)

6556 
	#GPIO_BSRR_BR_8
 ((
uöt32_t
)0x01000000)

	)

6557 
	#GPIO_BSRR_BR_9
 ((
uöt32_t
)0x02000000)

	)

6558 
	#GPIO_BSRR_BR_10
 ((
uöt32_t
)0x04000000)

	)

6559 
	#GPIO_BSRR_BR_11
 ((
uöt32_t
)0x08000000)

	)

6560 
	#GPIO_BSRR_BR_12
 ((
uöt32_t
)0x10000000)

	)

6561 
	#GPIO_BSRR_BR_13
 ((
uöt32_t
)0x20000000)

	)

6562 
	#GPIO_BSRR_BR_14
 ((
uöt32_t
)0x40000000)

	)

6563 
	#GPIO_BSRR_BR_15
 ((
uöt32_t
)0x80000000)

	)

6571 
	#HASH_CR_INIT
 ((
uöt32_t
)0x00000004)

	)

6572 
	#HASH_CR_DMAE
 ((
uöt32_t
)0x00000008)

	)

6573 
	#HASH_CR_DATATYPE
 ((
uöt32_t
)0x00000030)

	)

6574 
	#HASH_CR_DATATYPE_0
 ((
uöt32_t
)0x00000010)

	)

6575 
	#HASH_CR_DATATYPE_1
 ((
uöt32_t
)0x00000020)

	)

6576 
	#HASH_CR_MODE
 ((
uöt32_t
)0x00000040)

	)

6577 
	#HASH_CR_ALGO
 ((
uöt32_t
)0x00040080)

	)

6578 
	#HASH_CR_ALGO_0
 ((
uöt32_t
)0x00000080)

	)

6579 
	#HASH_CR_ALGO_1
 ((
uöt32_t
)0x00040000)

	)

6580 
	#HASH_CR_NBW
 ((
uöt32_t
)0x00000F00)

	)

6581 
	#HASH_CR_NBW_0
 ((
uöt32_t
)0x00000100)

	)

6582 
	#HASH_CR_NBW_1
 ((
uöt32_t
)0x00000200)

	)

6583 
	#HASH_CR_NBW_2
 ((
uöt32_t
)0x00000400)

	)

6584 
	#HASH_CR_NBW_3
 ((
uöt32_t
)0x00000800)

	)

6585 
	#HASH_CR_DINNE
 ((
uöt32_t
)0x00001000)

	)

6586 
	#HASH_CR_MDMAT
 ((
uöt32_t
)0x00002000)

	)

6587 
	#HASH_CR_LKEY
 ((
uöt32_t
)0x00010000)

	)

6590 
	#HASH_STR_NBW
 ((
uöt32_t
)0x0000001F)

	)

6591 
	#HASH_STR_NBW_0
 ((
uöt32_t
)0x00000001)

	)

6592 
	#HASH_STR_NBW_1
 ((
uöt32_t
)0x00000002)

	)

6593 
	#HASH_STR_NBW_2
 ((
uöt32_t
)0x00000004)

	)

6594 
	#HASH_STR_NBW_3
 ((
uöt32_t
)0x00000008)

	)

6595 
	#HASH_STR_NBW_4
 ((
uöt32_t
)0x00000010)

	)

6596 
	#HASH_STR_DCAL
 ((
uöt32_t
)0x00000100)

	)

6599 
	#HASH_IMR_DINIM
 ((
uöt32_t
)0x00000001)

	)

6600 
	#HASH_IMR_DCIM
 ((
uöt32_t
)0x00000002)

	)

6603 
	#HASH_SR_DINIS
 ((
uöt32_t
)0x00000001)

	)

6604 
	#HASH_SR_DCIS
 ((
uöt32_t
)0x00000002)

	)

6605 
	#HASH_SR_DMAS
 ((
uöt32_t
)0x00000004)

	)

6606 
	#HASH_SR_BUSY
 ((
uöt32_t
)0x00000008)

	)

6614 
	#I2C_CR1_PE
 ((
uöt16_t
)0x0001Ë

	)

6615 
	#I2C_CR1_SMBUS
 ((
uöt16_t
)0x0002Ë

	)

6616 
	#I2C_CR1_SMBTYPE
 ((
uöt16_t
)0x0008Ë

	)

6617 
	#I2C_CR1_ENARP
 ((
uöt16_t
)0x0010Ë

	)

6618 
	#I2C_CR1_ENPEC
 ((
uöt16_t
)0x0020Ë

	)

6619 
	#I2C_CR1_ENGC
 ((
uöt16_t
)0x0040Ë

	)

6620 
	#I2C_CR1_NOSTRETCH
 ((
uöt16_t
)0x0080Ë

	)

6621 
	#I2C_CR1_START
 ((
uöt16_t
)0x0100Ë

	)

6622 
	#I2C_CR1_STOP
 ((
uöt16_t
)0x0200Ë

	)

6623 
	#I2C_CR1_ACK
 ((
uöt16_t
)0x0400Ë

	)

6624 
	#I2C_CR1_POS
 ((
uöt16_t
)0x0800Ë

	)

6625 
	#I2C_CR1_PEC
 ((
uöt16_t
)0x1000Ë

	)

6626 
	#I2C_CR1_ALERT
 ((
uöt16_t
)0x2000Ë

	)

6627 
	#I2C_CR1_SWRST
 ((
uöt16_t
)0x8000Ë

	)

6630 
	#I2C_CR2_FREQ
 ((
uöt16_t
)0x003FË

	)

6631 
	#I2C_CR2_FREQ_0
 ((
uöt16_t
)0x0001Ë

	)

6632 
	#I2C_CR2_FREQ_1
 ((
uöt16_t
)0x0002Ë

	)

6633 
	#I2C_CR2_FREQ_2
 ((
uöt16_t
)0x0004Ë

	)

6634 
	#I2C_CR2_FREQ_3
 ((
uöt16_t
)0x0008Ë

	)

6635 
	#I2C_CR2_FREQ_4
 ((
uöt16_t
)0x0010Ë

	)

6636 
	#I2C_CR2_FREQ_5
 ((
uöt16_t
)0x0020Ë

	)

6638 
	#I2C_CR2_ITERREN
 ((
uöt16_t
)0x0100Ë

	)

6639 
	#I2C_CR2_ITEVTEN
 ((
uöt16_t
)0x0200Ë

	)

6640 
	#I2C_CR2_ITBUFEN
 ((
uöt16_t
)0x0400Ë

	)

6641 
	#I2C_CR2_DMAEN
 ((
uöt16_t
)0x0800Ë

	)

6642 
	#I2C_CR2_LAST
 ((
uöt16_t
)0x1000Ë

	)

6645 
	#I2C_OAR1_ADD1_7
 ((
uöt16_t
)0x00FEË

	)

6646 
	#I2C_OAR1_ADD8_9
 ((
uöt16_t
)0x0300Ë

	)

6648 
	#I2C_OAR1_ADD0
 ((
uöt16_t
)0x0001Ë

	)

6649 
	#I2C_OAR1_ADD1
 ((
uöt16_t
)0x0002Ë

	)

6650 
	#I2C_OAR1_ADD2
 ((
uöt16_t
)0x0004Ë

	)

6651 
	#I2C_OAR1_ADD3
 ((
uöt16_t
)0x0008Ë

	)

6652 
	#I2C_OAR1_ADD4
 ((
uöt16_t
)0x0010Ë

	)

6653 
	#I2C_OAR1_ADD5
 ((
uöt16_t
)0x0020Ë

	)

6654 
	#I2C_OAR1_ADD6
 ((
uöt16_t
)0x0040Ë

	)

6655 
	#I2C_OAR1_ADD7
 ((
uöt16_t
)0x0080Ë

	)

6656 
	#I2C_OAR1_ADD8
 ((
uöt16_t
)0x0100Ë

	)

6657 
	#I2C_OAR1_ADD9
 ((
uöt16_t
)0x0200Ë

	)

6659 
	#I2C_OAR1_ADDMODE
 ((
uöt16_t
)0x8000Ë

	)

6662 
	#I2C_OAR2_ENDUAL
 ((
uöt8_t
)0x01Ë

	)

6663 
	#I2C_OAR2_ADD2
 ((
uöt8_t
)0xFEË

	)

6666 
	#I2C_DR_DR
 ((
uöt8_t
)0xFFË

	)

6669 
	#I2C_SR1_SB
 ((
uöt16_t
)0x0001Ë

	)

6670 
	#I2C_SR1_ADDR
 ((
uöt16_t
)0x0002Ë

	)

6671 
	#I2C_SR1_BTF
 ((
uöt16_t
)0x0004Ë

	)

6672 
	#I2C_SR1_ADD10
 ((
uöt16_t
)0x0008Ë

	)

6673 
	#I2C_SR1_STOPF
 ((
uöt16_t
)0x0010Ë

	)

6674 
	#I2C_SR1_RXNE
 ((
uöt16_t
)0x0040Ë

	)

6675 
	#I2C_SR1_TXE
 ((
uöt16_t
)0x0080Ë

	)

6676 
	#I2C_SR1_BERR
 ((
uöt16_t
)0x0100Ë

	)

6677 
	#I2C_SR1_ARLO
 ((
uöt16_t
)0x0200Ë

	)

6678 
	#I2C_SR1_AF
 ((
uöt16_t
)0x0400Ë

	)

6679 
	#I2C_SR1_OVR
 ((
uöt16_t
)0x0800Ë

	)

6680 
	#I2C_SR1_PECERR
 ((
uöt16_t
)0x1000Ë

	)

6681 
	#I2C_SR1_TIMEOUT
 ((
uöt16_t
)0x4000Ë

	)

6682 
	#I2C_SR1_SMBALERT
 ((
uöt16_t
)0x8000Ë

	)

6685 
	#I2C_SR2_MSL
 ((
uöt16_t
)0x0001Ë

	)

6686 
	#I2C_SR2_BUSY
 ((
uöt16_t
)0x0002Ë

	)

6687 
	#I2C_SR2_TRA
 ((
uöt16_t
)0x0004Ë

	)

6688 
	#I2C_SR2_GENCALL
 ((
uöt16_t
)0x0010Ë

	)

6689 
	#I2C_SR2_SMBDEFAULT
 ((
uöt16_t
)0x0020Ë

	)

6690 
	#I2C_SR2_SMBHOST
 ((
uöt16_t
)0x0040Ë

	)

6691 
	#I2C_SR2_DUALF
 ((
uöt16_t
)0x0080Ë

	)

6692 
	#I2C_SR2_PEC
 ((
uöt16_t
)0xFF00Ë

	)

6695 
	#I2C_CCR_CCR
 ((
uöt16_t
)0x0FFFË

	)

6696 
	#I2C_CCR_DUTY
 ((
uöt16_t
)0x4000Ë

	)

6697 
	#I2C_CCR_FS
 ((
uöt16_t
)0x8000Ë

	)

6700 
	#I2C_TRISE_TRISE
 ((
uöt8_t
)0x3FË

	)

6703 
	#I2C_FLTR_DNF
 ((
uöt8_t
)0x0FË

	)

6704 
	#I2C_FLTR_ANOFF
 ((
uöt8_t
)0x10Ë

	)

6712 
	#FMPI2C_CR1_PE
 ((
uöt32_t
)0x00000001Ë

	)

6713 
	#FMPI2C_CR1_TXIE
 ((
uöt32_t
)0x00000002Ë

	)

6714 
	#FMPI2C_CR1_RXIE
 ((
uöt32_t
)0x00000004Ë

	)

6715 
	#FMPI2C_CR1_ADDRIE
 ((
uöt32_t
)0x00000008Ë

	)

6716 
	#FMPI2C_CR1_NACKIE
 ((
uöt32_t
)0x00000010Ë

	)

6717 
	#FMPI2C_CR1_STOPIE
 ((
uöt32_t
)0x00000020Ë

	)

6718 
	#FMPI2C_CR1_TCIE
 ((
uöt32_t
)0x00000040Ë

	)

6719 
	#FMPI2C_CR1_ERRIE
 ((
uöt32_t
)0x00000080Ë

	)

6720 
	#FMPI2C_CR1_DFN
 ((
uöt32_t
)0x00000F00Ë

	)

6721 
	#FMPI2C_CR1_ANFOFF
 ((
uöt32_t
)0x00001000Ë

	)

6722 
	#FMPI2C_CR1_SWRST
 ((
uöt32_t
)0x00002000Ë

	)

6723 
	#FMPI2C_CR1_TXDMAEN
 ((
uöt32_t
)0x00004000Ë

	)

6724 
	#FMPI2C_CR1_RXDMAEN
 ((
uöt32_t
)0x00008000Ë

	)

6725 
	#FMPI2C_CR1_SBC
 ((
uöt32_t
)0x00010000Ë

	)

6726 
	#FMPI2C_CR1_NOSTRETCH
 ((
uöt32_t
)0x00020000Ë

	)

6727 
	#FMPI2C_CR1_WUPEN
 ((
uöt32_t
)0x00040000Ë

	)

6728 
	#FMPI2C_CR1_GCEN
 ((
uöt32_t
)0x00080000Ë

	)

6729 
	#FMPI2C_CR1_SMBHEN
 ((
uöt32_t
)0x00100000Ë

	)

6730 
	#FMPI2C_CR1_SMBDEN
 ((
uöt32_t
)0x00200000Ë

	)

6731 
	#FMPI2C_CR1_ALERTEN
 ((
uöt32_t
)0x00400000Ë

	)

6732 
	#FMPI2C_CR1_PECEN
 ((
uöt32_t
)0x00800000Ë

	)

6735 
	#FMPI2C_CR2_SADD
 ((
uöt32_t
)0x000003FFË

	)

6736 
	#FMPI2C_CR2_RD_WRN
 ((
uöt32_t
)0x00000400Ë

	)

6737 
	#FMPI2C_CR2_ADD10
 ((
uöt32_t
)0x00000800Ë

	)

6738 
	#FMPI2C_CR2_HEAD10R
 ((
uöt32_t
)0x00001000Ë

	)

6739 
	#FMPI2C_CR2_START
 ((
uöt32_t
)0x00002000Ë

	)

6740 
	#FMPI2C_CR2_STOP
 ((
uöt32_t
)0x00004000Ë

	)

6741 
	#FMPI2C_CR2_NACK
 ((
uöt32_t
)0x00008000Ë

	)

6742 
	#FMPI2C_CR2_NBYTES
 ((
uöt32_t
)0x00FF0000Ë

	)

6743 
	#FMPI2C_CR2_RELOAD
 ((
uöt32_t
)0x01000000Ë

	)

6744 
	#FMPI2C_CR2_AUTOEND
 ((
uöt32_t
)0x02000000Ë

	)

6745 
	#FMPI2C_CR2_PECBYTE
 ((
uöt32_t
)0x04000000Ë

	)

6748 
	#FMPI2C_OAR1_OA1
 ((
uöt32_t
)0x000003FFË

	)

6749 
	#FMPI2C_OAR1_OA1MODE
 ((
uöt32_t
)0x00000400Ë

	)

6750 
	#FMPI2C_OAR1_OA1EN
 ((
uöt32_t
)0x00008000Ë

	)

6753 
	#FMPI2C_OAR2_OA2
 ((
uöt32_t
)0x000000FEË

	)

6754 
	#FMPI2C_OAR2_OA2MSK
 ((
uöt32_t
)0x00000700Ë

	)

6755 
	#FMPI2C_OAR2_OA2EN
 ((
uöt32_t
)0x00008000Ë

	)

6758 
	#FMPI2C_TIMINGR_SCLL
 ((
uöt32_t
)0x000000FFË

	)

6759 
	#FMPI2C_TIMINGR_SCLH
 ((
uöt32_t
)0x0000FF00Ë

	)

6760 
	#FMPI2C_TIMINGR_SDADEL
 ((
uöt32_t
)0x000F0000Ë

	)

6761 
	#FMPI2C_TIMINGR_SCLDEL
 ((
uöt32_t
)0x00F00000Ë

	)

6762 
	#FMPI2C_TIMINGR_PRESC
 ((
uöt32_t
)0xF0000000Ë

	)

6765 
	#FMPI2C_TIMEOUTR_TIMEOUTA
 ((
uöt32_t
)0x00000FFFË

	)

6766 
	#FMPI2C_TIMEOUTR_TIDLE
 ((
uöt32_t
)0x00001000Ë

	)

6767 
	#FMPI2C_TIMEOUTR_TIMOUTEN
 ((
uöt32_t
)0x00008000Ë

	)

6768 
	#FMPI2C_TIMEOUTR_TIMEOUTB
 ((
uöt32_t
)0x0FFF0000Ë

	)

6769 
	#FMPI2C_TIMEOUTR_TEXTEN
 ((
uöt32_t
)0x80000000Ë

	)

6772 
	#FMPI2C_ISR_TXE
 ((
uöt32_t
)0x00000001Ë

	)

6773 
	#FMPI2C_ISR_TXIS
 ((
uöt32_t
)0x00000002Ë

	)

6774 
	#FMPI2C_ISR_RXNE
 ((
uöt32_t
)0x00000004Ë

	)

6775 
	#FMPI2C_ISR_ADDR
 ((
uöt32_t
)0x00000008Ë

	)

6776 
	#FMPI2C_ISR_NACKF
 ((
uöt32_t
)0x00000010Ë

	)

6777 
	#FMPI2C_ISR_STOPF
 ((
uöt32_t
)0x00000020Ë

	)

6778 
	#FMPI2C_ISR_TC
 ((
uöt32_t
)0x00000040Ë

	)

6779 
	#FMPI2C_ISR_TCR
 ((
uöt32_t
)0x00000080Ë

	)

6780 
	#FMPI2C_ISR_BERR
 ((
uöt32_t
)0x00000100Ë

	)

6781 
	#FMPI2C_ISR_ARLO
 ((
uöt32_t
)0x00000200Ë

	)

6782 
	#FMPI2C_ISR_OVR
 ((
uöt32_t
)0x00000400Ë

	)

6783 
	#FMPI2C_ISR_PECERR
 ((
uöt32_t
)0x00000800Ë

	)

6784 
	#FMPI2C_ISR_TIMEOUT
 ((
uöt32_t
)0x00001000Ë

	)

6785 
	#FMPI2C_ISR_ALERT
 ((
uöt32_t
)0x00002000Ë

	)

6786 
	#FMPI2C_ISR_BUSY
 ((
uöt32_t
)0x00008000Ë

	)

6787 
	#FMPI2C_ISR_DIR
 ((
uöt32_t
)0x00010000Ë

	)

6788 
	#FMPI2C_ISR_ADDCODE
 ((
uöt32_t
)0x00FE0000Ë

	)

6791 
	#FMPI2C_ICR_ADDRCF
 ((
uöt32_t
)0x00000008Ë

	)

6792 
	#FMPI2C_ICR_NACKCF
 ((
uöt32_t
)0x00000010Ë

	)

6793 
	#FMPI2C_ICR_STOPCF
 ((
uöt32_t
)0x00000020Ë

	)

6794 
	#FMPI2C_ICR_BERRCF
 ((
uöt32_t
)0x00000100Ë

	)

6795 
	#FMPI2C_ICR_ARLOCF
 ((
uöt32_t
)0x00000200Ë

	)

6796 
	#FMPI2C_ICR_OVRCF
 ((
uöt32_t
)0x00000400Ë

	)

6797 
	#FMPI2C_ICR_PECCF
 ((
uöt32_t
)0x00000800Ë

	)

6798 
	#FMPI2C_ICR_TIMOUTCF
 ((
uöt32_t
)0x00001000Ë

	)

6799 
	#FMPI2C_ICR_ALERTCF
 ((
uöt32_t
)0x00002000Ë

	)

6802 
	#FMPI2C_PECR_PEC
 ((
uöt32_t
)0x000000FFË

	)

6805 
	#FMPI2C_RXDR_RXDATA
 ((
uöt32_t
)0x000000FFË

	)

6808 
	#FMPI2C_TXDR_TXDATA
 ((
uöt32_t
)0x000000FFË

	)

6816 
	#IWDG_KR_KEY
 ((
uöt16_t
)0xFFFFË

	)

6819 
	#IWDG_PR_PR
 ((
uöt8_t
)0x07Ë

	)

6820 
	#IWDG_PR_PR_0
 ((
uöt8_t
)0x01Ë

	)

6821 
	#IWDG_PR_PR_1
 ((
uöt8_t
)0x02Ë

	)

6822 
	#IWDG_PR_PR_2
 ((
uöt8_t
)0x04Ë

	)

6825 
	#IWDG_RLR_RL
 ((
uöt16_t
)0x0FFFË

	)

6828 
	#IWDG_SR_PVU
 ((
uöt8_t
)0x01Ë

	)

6829 
	#IWDG_SR_RVU
 ((
uöt8_t
)0x02Ë

	)

6839 
	#LTDC_SSCR_VSH
 ((
uöt32_t
)0x000007FFË

	)

6840 
	#LTDC_SSCR_HSW
 ((
uöt32_t
)0x0FFF0000Ë

	)

6844 
	#LTDC_BPCR_AVBP
 ((
uöt32_t
)0x000007FFË

	)

6845 
	#LTDC_BPCR_AHBP
 ((
uöt32_t
)0x0FFF0000Ë

	)

6849 
	#LTDC_AWCR_AAH
 ((
uöt32_t
)0x000007FFË

	)

6850 
	#LTDC_AWCR_AAW
 ((
uöt32_t
)0x0FFF0000Ë

	)

6854 
	#LTDC_TWCR_TOTALH
 ((
uöt32_t
)0x000007FFË

	)

6855 
	#LTDC_TWCR_TOTALW
 ((
uöt32_t
)0x0FFF0000Ë

	)

6859 
	#LTDC_GCR_LTDCEN
 ((
uöt32_t
)0x00000001Ë

	)

6860 
	#LTDC_GCR_DBW
 ((
uöt32_t
)0x00000070Ë

	)

6861 
	#LTDC_GCR_DGW
 ((
uöt32_t
)0x00000700Ë

	)

6862 
	#LTDC_GCR_DRW
 ((
uöt32_t
)0x00007000Ë

	)

6863 
	#LTDC_GCR_DTEN
 ((
uöt32_t
)0x00010000Ë

	)

6864 
	#LTDC_GCR_PCPOL
 ((
uöt32_t
)0x10000000Ë

	)

6865 
	#LTDC_GCR_DEPOL
 ((
uöt32_t
)0x20000000Ë

	)

6866 
	#LTDC_GCR_VSPOL
 ((
uöt32_t
)0x40000000Ë

	)

6867 
	#LTDC_GCR_HSPOL
 ((
uöt32_t
)0x80000000Ë

	)

6871 
	#LTDC_SRCR_IMR
 ((
uöt32_t
)0x00000001Ë

	)

6872 
	#LTDC_SRCR_VBR
 ((
uöt32_t
)0x00000002Ë

	)

6876 
	#LTDC_BCCR_BCBLUE
 ((
uöt32_t
)0x000000FFË

	)

6877 
	#LTDC_BCCR_BCGREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

6878 
	#LTDC_BCCR_BCRED
 ((
uöt32_t
)0x00FF0000Ë

	)

6882 
	#LTDC_IER_LIE
 ((
uöt32_t
)0x00000001Ë

	)

6883 
	#LTDC_IER_FUIE
 ((
uöt32_t
)0x00000002Ë

	)

6884 
	#LTDC_IER_TERRIE
 ((
uöt32_t
)0x00000004Ë

	)

6885 
	#LTDC_IER_RRIE
 ((
uöt32_t
)0x00000008Ë

	)

6889 
	#LTDC_ISR_LIF
 ((
uöt32_t
)0x00000001Ë

	)

6890 
	#LTDC_ISR_FUIF
 ((
uöt32_t
)0x00000002Ë

	)

6891 
	#LTDC_ISR_TERRIF
 ((
uöt32_t
)0x00000004Ë

	)

6892 
	#LTDC_ISR_RRIF
 ((
uöt32_t
)0x00000008Ë

	)

6896 
	#LTDC_ICR_CLIF
 ((
uöt32_t
)0x00000001Ë

	)

6897 
	#LTDC_ICR_CFUIF
 ((
uöt32_t
)0x00000002Ë

	)

6898 
	#LTDC_ICR_CTERRIF
 ((
uöt32_t
)0x00000004Ë

	)

6899 
	#LTDC_ICR_CRRIF
 ((
uöt32_t
)0x00000008Ë

	)

6903 
	#LTDC_LIPCR_LIPOS
 ((
uöt32_t
)0x000007FFË

	)

6907 
	#LTDC_CPSR_CYPOS
 ((
uöt32_t
)0x0000FFFFË

	)

6908 
	#LTDC_CPSR_CXPOS
 ((
uöt32_t
)0xFFFF0000Ë

	)

6912 
	#LTDC_CDSR_VDES
 ((
uöt32_t
)0x00000001Ë

	)

6913 
	#LTDC_CDSR_HDES
 ((
uöt32_t
)0x00000002Ë

	)

6914 
	#LTDC_CDSR_VSYNCS
 ((
uöt32_t
)0x00000004Ë

	)

6915 
	#LTDC_CDSR_HSYNCS
 ((
uöt32_t
)0x00000008Ë

	)

6919 
	#LTDC_LxCR_LEN
 ((
uöt32_t
)0x00000001Ë

	)

6920 
	#LTDC_LxCR_COLKEN
 ((
uöt32_t
)0x00000002Ë

	)

6921 
	#LTDC_LxCR_CLUTEN
 ((
uöt32_t
)0x00000010Ë

	)

6925 
	#LTDC_LxWHPCR_WHSTPOS
 ((
uöt32_t
)0x00000FFFË

	)

6926 
	#LTDC_LxWHPCR_WHSPPOS
 ((
uöt32_t
)0xFFFF0000Ë

	)

6930 
	#LTDC_LxWVPCR_WVSTPOS
 ((
uöt32_t
)0x00000FFFË

	)

6931 
	#LTDC_LxWVPCR_WVSPPOS
 ((
uöt32_t
)0xFFFF0000Ë

	)

6935 
	#LTDC_LxCKCR_CKBLUE
 ((
uöt32_t
)0x000000FFË

	)

6936 
	#LTDC_LxCKCR_CKGREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

6937 
	#LTDC_LxCKCR_CKRED
 ((
uöt32_t
)0x00FF0000Ë

	)

6941 
	#LTDC_LxPFCR_PF
 ((
uöt32_t
)0x00000007Ë

	)

6945 
	#LTDC_LxCACR_CONSTA
 ((
uöt32_t
)0x000000FFË

	)

6949 
	#LTDC_LxDCCR_DCBLUE
 ((
uöt32_t
)0x000000FFË

	)

6950 
	#LTDC_LxDCCR_DCGREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

6951 
	#LTDC_LxDCCR_DCRED
 ((
uöt32_t
)0x00FF0000Ë

	)

6952 
	#LTDC_LxDCCR_DCALPHA
 ((
uöt32_t
)0xFF000000Ë

	)

6956 
	#LTDC_LxBFCR_BF2
 ((
uöt32_t
)0x00000007Ë

	)

6957 
	#LTDC_LxBFCR_BF1
 ((
uöt32_t
)0x00000700Ë

	)

6961 
	#LTDC_LxCFBAR_CFBADD
 ((
uöt32_t
)0xFFFFFFFFË

	)

6965 
	#LTDC_LxCFBLR_CFBLL
 ((
uöt32_t
)0x00001FFFË

	)

6966 
	#LTDC_LxCFBLR_CFBP
 ((
uöt32_t
)0x1FFF0000Ë

	)

6970 
	#LTDC_LxCFBLNR_CFBLNBR
 ((
uöt32_t
)0x000007FFË

	)

6974 
	#LTDC_LxCLUTWR_BLUE
 ((
uöt32_t
)0x000000FFË

	)

6975 
	#LTDC_LxCLUTWR_GREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

6976 
	#LTDC_LxCLUTWR_RED
 ((
uöt32_t
)0x00FF0000Ë

	)

6977 
	#LTDC_LxCLUTWR_CLUTADD
 ((
uöt32_t
)0xFF000000Ë

	)

6985 
	#PWR_CR_LPDS
 ((
uöt32_t
)0x00000001Ë

	)

6986 
	#PWR_CR_PDDS
 ((
uöt32_t
)0x00000002Ë

	)

6987 
	#PWR_CR_CWUF
 ((
uöt32_t
)0x00000004Ë

	)

6988 
	#PWR_CR_CSBF
 ((
uöt32_t
)0x00000008Ë

	)

6989 
	#PWR_CR_PVDE
 ((
uöt32_t
)0x00000010Ë

	)

6991 
	#PWR_CR_PLS
 ((
uöt32_t
)0x000000E0Ë

	)

6992 
	#PWR_CR_PLS_0
 ((
uöt32_t
)0x00000020Ë

	)

6993 
	#PWR_CR_PLS_1
 ((
uöt32_t
)0x00000040Ë

	)

6994 
	#PWR_CR_PLS_2
 ((
uöt32_t
)0x00000080Ë

	)

6997 
	#PWR_CR_PLS_LEV0
 ((
uöt32_t
)0x00000000Ë

	)

6998 
	#PWR_CR_PLS_LEV1
 ((
uöt32_t
)0x00000020Ë

	)

6999 
	#PWR_CR_PLS_LEV2
 ((
uöt32_t
)0x00000040Ë

	)

7000 
	#PWR_CR_PLS_LEV3
 ((
uöt32_t
)0x00000060Ë

	)

7001 
	#PWR_CR_PLS_LEV4
 ((
uöt32_t
)0x00000080Ë

	)

7002 
	#PWR_CR_PLS_LEV5
 ((
uöt32_t
)0x000000A0Ë

	)

7003 
	#PWR_CR_PLS_LEV6
 ((
uöt32_t
)0x000000C0Ë

	)

7004 
	#PWR_CR_PLS_LEV7
 ((
uöt32_t
)0x000000E0Ë

	)

7006 
	#PWR_CR_DBP
 ((
uöt32_t
)0x00000100Ë

	)

7007 
	#PWR_CR_FPDS
 ((
uöt32_t
)0x00000200Ë

	)

7008 
	#PWR_CR_LPUDS
 ((
uöt32_t
)0x00000400Ë

	)

7009 
	#PWR_CR_MRUDS
 ((
uöt32_t
)0x00000800Ë

	)

7011 
	#PWR_CR_LPLVDS
 ((
uöt32_t
)0x00000400Ë

	)

7012 
	#PWR_CR_MRLVDS
 ((
uöt32_t
)0x00000800Ë

	)

7014 
	#PWR_CR_ADCDC1
 ((
uöt32_t
)0x00002000Ë

	)

7016 
	#PWR_CR_VOS
 ((
uöt32_t
)0x0000C000Ë

	)

7017 
	#PWR_CR_VOS_0
 ((
uöt32_t
)0x00004000Ë

	)

7018 
	#PWR_CR_VOS_1
 ((
uöt32_t
)0x00008000Ë

	)

7020 
	#PWR_CR_ODEN
 ((
uöt32_t
)0x00010000Ë

	)

7021 
	#PWR_CR_ODSWEN
 ((
uöt32_t
)0x00020000Ë

	)

7022 
	#PWR_CR_UDEN
 ((
uöt32_t
)0x000C0000Ë

	)

7023 
	#PWR_CR_UDEN_0
 ((
uöt32_t
)0x00040000Ë

	)

7024 
	#PWR_CR_UDEN_1
 ((
uöt32_t
)0x00080000Ë

	)

7026 
	#PWR_CR_FMSSR
 ((
uöt32_t
)0x00100000Ë

	)

7027 
	#PWR_CR_FISSR
 ((
uöt32_t
)0x00200000Ë

	)

7030 
	#PWR_CR_PMODE
 
PWR_CR_VOS


	)

7033 
	#PWR_CSR_WUF
 ((
uöt32_t
)0x00000001Ë

	)

7034 
	#PWR_CSR_SBF
 ((
uöt32_t
)0x00000002Ë

	)

7035 
	#PWR_CSR_PVDO
 ((
uöt32_t
)0x00000004Ë

	)

7036 
	#PWR_CSR_BRR
 ((
uöt32_t
)0x00000008Ë

	)

7037 
	#PWR_CSR_WUPP
 ((
uöt32_t
)0x00000080Ë

	)

7038 
	#PWR_CSR_EWUP
 ((
uöt32_t
)0x00000100Ë

	)

7039 
	#PWR_CSR_BRE
 ((
uöt32_t
)0x00000200Ë

	)

7040 
	#PWR_CSR_VOSRDY
 ((
uöt32_t
)0x00004000Ë

	)

7041 
	#PWR_CSR_ODRDY
 ((
uöt32_t
)0x00010000Ë

	)

7042 
	#PWR_CSR_ODSWRDY
 ((
uöt32_t
)0x00020000Ë

	)

7043 
	#PWR_CSR_UDSWRDY
 ((
uöt32_t
)0x000C0000Ë

	)

7046 
	#PWR_CSR_REGRDY
 
PWR_CSR_VOSRDY


	)

7048 #i‡
	`deföed
(
STM32F446xx
)

7055 
	#QUADSPI_CR_EN
 ((
uöt32_t
)0x00000001Ë

	)

7056 
	#QUADSPI_CR_ABORT
 ((
uöt32_t
)0x00000002Ë

	)

7057 
	#QUADSPI_CR_DMAEN
 ((
uöt32_t
)0x00000004Ë

	)

7058 
	#QUADSPI_CR_TCEN
 ((
uöt32_t
)0x00000008Ë

	)

7059 
	#QUADSPI_CR_SSHIFT
 ((
uöt32_t
)0x00000030Ë

	)

7060 
	#QUADSPI_CR_SSHIFT_0
 ((
uöt32_t
)0x00000010Ë

	)

7061 
	#QUADSPI_CR_SSHIFT_1
 ((
uöt32_t
)0x00000020Ë

	)

7062 
	#QUADSPI_CR_DFM
 ((
uöt32_t
)0x00000040Ë

	)

7063 
	#QUADSPI_CR_FSEL
 ((
uöt32_t
)0x00000080Ë

	)

7064 
	#QUADSPI_CR_FTHRES
 ((
uöt32_t
)0x00000F00Ë

	)

7065 
	#QUADSPI_CR_FTHRES_0
 ((
uöt32_t
)0x00000100Ë

	)

7066 
	#QUADSPI_CR_FTHRES_1
 ((
uöt32_t
)0x00000200Ë

	)

7067 
	#QUADSPI_CR_FTHRES_2
 ((
uöt32_t
)0x00000400Ë

	)

7068 
	#QUADSPI_CR_FTHRES_3
 ((
uöt32_t
)0x00000800Ë

	)

7069 
	#QUADSPI_CR_TEIE
 ((
uöt32_t
)0x00010000Ë

	)

7070 
	#QUADSPI_CR_TCIE
 ((
uöt32_t
)0x00020000Ë

	)

7071 
	#QUADSPI_CR_FTIE
 ((
uöt32_t
)0x00040000Ë

	)

7072 
	#QUADSPI_CR_SMIE
 ((
uöt32_t
)0x00080000Ë

	)

7073 
	#QUADSPI_CR_TOIE
 ((
uöt32_t
)0x00100000Ë

	)

7074 
	#QUADSPI_CR_APMS
 ((
uöt32_t
)0x00400000Ë

	)

7075 
	#QUADSPI_CR_PMM
 ((
uöt32_t
)0x00800000Ë

	)

7076 
	#QUADSPI_CR_PRESCALER
 ((
uöt32_t
)0xFF000000Ë

	)

7077 
	#QUADSPI_CR_PRESCALER_0
 ((
uöt32_t
)0x01000000Ë

	)

7078 
	#QUADSPI_CR_PRESCALER_1
 ((
uöt32_t
)0x02000000Ë

	)

7079 
	#QUADSPI_CR_PRESCALER_2
 ((
uöt32_t
)0x04000000Ë

	)

7080 
	#QUADSPI_CR_PRESCALER_3
 ((
uöt32_t
)0x08000000Ë

	)

7081 
	#QUADSPI_CR_PRESCALER_4
 ((
uöt32_t
)0x10000000Ë

	)

7082 
	#QUADSPI_CR_PRESCALER_5
 ((
uöt32_t
)0x20000000Ë

	)

7083 
	#QUADSPI_CR_PRESCALER_6
 ((
uöt32_t
)0x40000000Ë

	)

7084 
	#QUADSPI_CR_PRESCALER_7
 ((
uöt32_t
)0x80000000Ë

	)

7087 
	#QUADSPI_DCR_CKMODE
 ((
uöt32_t
)0x00000001Ë

	)

7088 
	#QUADSPI_DCR_CSHT
 ((
uöt32_t
)0x00000700Ë

	)

7089 
	#QUADSPI_DCR_CSHT_0
 ((
uöt32_t
)0x00000100Ë

	)

7090 
	#QUADSPI_DCR_CSHT_1
 ((
uöt32_t
)0x00000200Ë

	)

7091 
	#QUADSPI_DCR_CSHT_2
 ((
uöt32_t
)0x00000400Ë

	)

7092 
	#QUADSPI_DCR_FSIZE
 ((
uöt32_t
)0x001F0000Ë

	)

7093 
	#QUADSPI_DCR_FSIZE_0
 ((
uöt32_t
)0x00010000Ë

	)

7094 
	#QUADSPI_DCR_FSIZE_1
 ((
uöt32_t
)0x00020000Ë

	)

7095 
	#QUADSPI_DCR_FSIZE_2
 ((
uöt32_t
)0x00040000Ë

	)

7096 
	#QUADSPI_DCR_FSIZE_3
 ((
uöt32_t
)0x00080000Ë

	)

7097 
	#QUADSPI_DCR_FSIZE_4
 ((
uöt32_t
)0x00100000Ë

	)

7100 
	#QUADSPI_SR_TEF
 ((
uöt32_t
)0x00000001Ë

	)

7101 
	#QUADSPI_SR_TCF
 ((
uöt32_t
)0x00000002Ë

	)

7102 
	#QUADSPI_SR_FTF
 ((
uöt32_t
)0x00000004Ë

	)

7103 
	#QUADSPI_SR_SMF
 ((
uöt32_t
)0x00000008Ë

	)

7104 
	#QUADSPI_SR_TOF
 ((
uöt32_t
)0x00000010Ë

	)

7105 
	#QUADSPI_SR_BUSY
 ((
uöt32_t
)0x00000020Ë

	)

7106 
	#QUADSPI_SR_FLEVEL
 ((
uöt32_t
)0x00003F00Ë

	)

7107 
	#QUADSPI_SR_FLEVEL_0
 ((
uöt32_t
)0x00000100Ë

	)

7108 
	#QUADSPI_SR_FLEVEL_1
 ((
uöt32_t
)0x00000200Ë

	)

7109 
	#QUADSPI_SR_FLEVEL_2
 ((
uöt32_t
)0x00000400Ë

	)

7110 
	#QUADSPI_SR_FLEVEL_3
 ((
uöt32_t
)0x00000800Ë

	)

7111 
	#QUADSPI_SR_FLEVEL_4
 ((
uöt32_t
)0x00001000Ë

	)

7112 
	#QUADSPI_SR_FLEVEL_5
 ((
uöt32_t
)0x00002000Ë

	)

7115 
	#QUADSPI_FCR_CTEF
 ((
uöt32_t
)0x00000001Ë

	)

7116 
	#QUADSPI_FCR_CTCF
 ((
uöt32_t
)0x00000002Ë

	)

7117 
	#QUADSPI_FCR_CSMF
 ((
uöt32_t
)0x00000008Ë

	)

7118 
	#QUADSPI_FCR_CTOF
 ((
uöt32_t
)0x00000010Ë

	)

7121 
	#QUADSPI_DLR_DL
 ((
uöt32_t
)0xFFFFFFFFË

	)

7124 
	#QUADSPI_CCR_INSTRUCTION
 ((
uöt32_t
)0x000000FFË

	)

7125 
	#QUADSPI_CCR_INSTRUCTION_0
 ((
uöt32_t
)0x00000001Ë

	)

7126 
	#QUADSPI_CCR_INSTRUCTION_1
 ((
uöt32_t
)0x00000002Ë

	)

7127 
	#QUADSPI_CCR_INSTRUCTION_2
 ((
uöt32_t
)0x00000004Ë

	)

7128 
	#QUADSPI_CCR_INSTRUCTION_3
 ((
uöt32_t
)0x00000008Ë

	)

7129 
	#QUADSPI_CCR_INSTRUCTION_4
 ((
uöt32_t
)0x00000010Ë

	)

7130 
	#QUADSPI_CCR_INSTRUCTION_5
 ((
uöt32_t
)0x00000020Ë

	)

7131 
	#QUADSPI_CCR_INSTRUCTION_6
 ((
uöt32_t
)0x00000040Ë

	)

7132 
	#QUADSPI_CCR_INSTRUCTION_7
 ((
uöt32_t
)0x00000080Ë

	)

7133 
	#QUADSPI_CCR_IMODE
 ((
uöt32_t
)0x00000300Ë

	)

7134 
	#QUADSPI_CCR_IMODE_0
 ((
uöt32_t
)0x00000100Ë

	)

7135 
	#QUADSPI_CCR_IMODE_1
 ((
uöt32_t
)0x00000200Ë

	)

7136 
	#QUADSPI_CCR_ADMODE
 ((
uöt32_t
)0x00000C00Ë

	)

7137 
	#QUADSPI_CCR_ADMODE_0
 ((
uöt32_t
)0x00000400Ë

	)

7138 
	#QUADSPI_CCR_ADMODE_1
 ((
uöt32_t
)0x00000800Ë

	)

7139 
	#QUADSPI_CCR_ADSIZE
 ((
uöt32_t
)0x00003000Ë

	)

7140 
	#QUADSPI_CCR_ADSIZE_0
 ((
uöt32_t
)0x00001000Ë

	)

7141 
	#QUADSPI_CCR_ADSIZE_1
 ((
uöt32_t
)0x00002000Ë

	)

7142 
	#QUADSPI_CCR_ABMODE
 ((
uöt32_t
)0x0000C000Ë

	)

7143 
	#QUADSPI_CCR_ABMODE_0
 ((
uöt32_t
)0x00004000Ë

	)

7144 
	#QUADSPI_CCR_ABMODE_1
 ((
uöt32_t
)0x00008000Ë

	)

7145 
	#QUADSPI_CCR_ABSIZE
 ((
uöt32_t
)0x00030000Ë

	)

7146 
	#QUADSPI_CCR_ABSIZE_0
 ((
uöt32_t
)0x00010000Ë

	)

7147 
	#QUADSPI_CCR_ABSIZE_1
 ((
uöt32_t
)0x00020000Ë

	)

7148 
	#QUADSPI_CCR_DCYC
 ((
uöt32_t
)0x007C0000Ë

	)

7149 
	#QUADSPI_CCR_DCYC_0
 ((
uöt32_t
)0x00040000Ë

	)

7150 
	#QUADSPI_CCR_DCYC_1
 ((
uöt32_t
)0x00080000Ë

	)

7151 
	#QUADSPI_CCR_DCYC_2
 ((
uöt32_t
)0x00100000Ë

	)

7152 
	#QUADSPI_CCR_DCYC_3
 ((
uöt32_t
)0x00200000Ë

	)

7153 
	#QUADSPI_CCR_DCYC_4
 ((
uöt32_t
)0x00400000Ë

	)

7154 
	#QUADSPI_CCR_DMODE
 ((
uöt32_t
)0x03000000Ë

	)

7155 
	#QUADSPI_CCR_DMODE_0
 ((
uöt32_t
)0x01000000Ë

	)

7156 
	#QUADSPI_CCR_DMODE_1
 ((
uöt32_t
)0x02000000Ë

	)

7157 
	#QUADSPI_CCR_FMODE
 ((
uöt32_t
)0x0C000000Ë

	)

7158 
	#QUADSPI_CCR_FMODE_0
 ((
uöt32_t
)0x04000000Ë

	)

7159 
	#QUADSPI_CCR_FMODE_1
 ((
uöt32_t
)0x08000000Ë

	)

7160 
	#QUADSPI_CCR_SIOO
 ((
uöt32_t
)0x10000000Ë

	)

7161 
	#QUADSPI_CCR_DHHC
 ((
uöt32_t
)0x40000000Ë

	)

7162 
	#QUADSPI_CCR_DDRM
 ((
uöt32_t
)0x80000000Ë

	)

7164 
	#QUADSPI_AR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

7167 
	#QUADSPI_ABR_ALTERNATE
 ((
uöt32_t
)0xFFFFFFFFË

	)

7170 
	#QUADSPI_DR_DATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

7173 
	#QUADSPI_PSMKR_MASK
 ((
uöt32_t
)0xFFFFFFFFË

	)

7176 
	#QUADSPI_PSMAR_MATCH
 ((
uöt32_t
)0xFFFFFFFFË

	)

7179 
	#QUADSPI_PIR_INTERVAL
 ((
uöt32_t
)0x0000FFFFË

	)

7182 
	#QUADSPI_LPTR_TIMEOUT
 ((
uöt32_t
)0x0000FFFFË

	)

7191 
	#RCC_CR_HSION
 ((
uöt32_t
)0x00000001)

	)

7192 
	#RCC_CR_HSIRDY
 ((
uöt32_t
)0x00000002)

	)

7194 
	#RCC_CR_HSITRIM
 ((
uöt32_t
)0x000000F8)

	)

7195 
	#RCC_CR_HSITRIM_0
 ((
uöt32_t
)0x00000008)

	)

7196 
	#RCC_CR_HSITRIM_1
 ((
uöt32_t
)0x00000010)

	)

7197 
	#RCC_CR_HSITRIM_2
 ((
uöt32_t
)0x00000020)

	)

7198 
	#RCC_CR_HSITRIM_3
 ((
uöt32_t
)0x00000040)

	)

7199 
	#RCC_CR_HSITRIM_4
 ((
uöt32_t
)0x00000080)

	)

7201 
	#RCC_CR_HSICAL
 ((
uöt32_t
)0x0000FF00)

	)

7202 
	#RCC_CR_HSICAL_0
 ((
uöt32_t
)0x00000100)

	)

7203 
	#RCC_CR_HSICAL_1
 ((
uöt32_t
)0x00000200)

	)

7204 
	#RCC_CR_HSICAL_2
 ((
uöt32_t
)0x00000400)

	)

7205 
	#RCC_CR_HSICAL_3
 ((
uöt32_t
)0x00000800)

	)

7206 
	#RCC_CR_HSICAL_4
 ((
uöt32_t
)0x00001000)

	)

7207 
	#RCC_CR_HSICAL_5
 ((
uöt32_t
)0x00002000)

	)

7208 
	#RCC_CR_HSICAL_6
 ((
uöt32_t
)0x00004000)

	)

7209 
	#RCC_CR_HSICAL_7
 ((
uöt32_t
)0x00008000)

	)

7211 
	#RCC_CR_HSEON
 ((
uöt32_t
)0x00010000)

	)

7212 
	#RCC_CR_HSERDY
 ((
uöt32_t
)0x00020000)

	)

7213 
	#RCC_CR_HSEBYP
 ((
uöt32_t
)0x00040000)

	)

7214 
	#RCC_CR_CSSON
 ((
uöt32_t
)0x00080000)

	)

7215 
	#RCC_CR_PLLON
 ((
uöt32_t
)0x01000000)

	)

7216 
	#RCC_CR_PLLRDY
 ((
uöt32_t
)0x02000000)

	)

7217 
	#RCC_CR_PLLI2SON
 ((
uöt32_t
)0x04000000)

	)

7218 
	#RCC_CR_PLLI2SRDY
 ((
uöt32_t
)0x08000000)

	)

7219 
	#RCC_CR_PLLSAION
 ((
uöt32_t
)0x10000000)

	)

7220 
	#RCC_CR_PLLSAIRDY
 ((
uöt32_t
)0x20000000)

	)

7223 
	#RCC_PLLCFGR_PLLM
 ((
uöt32_t
)0x0000003F)

	)

7224 
	#RCC_PLLCFGR_PLLM_0
 ((
uöt32_t
)0x00000001)

	)

7225 
	#RCC_PLLCFGR_PLLM_1
 ((
uöt32_t
)0x00000002)

	)

7226 
	#RCC_PLLCFGR_PLLM_2
 ((
uöt32_t
)0x00000004)

	)

7227 
	#RCC_PLLCFGR_PLLM_3
 ((
uöt32_t
)0x00000008)

	)

7228 
	#RCC_PLLCFGR_PLLM_4
 ((
uöt32_t
)0x00000010)

	)

7229 
	#RCC_PLLCFGR_PLLM_5
 ((
uöt32_t
)0x00000020)

	)

7231 
	#RCC_PLLCFGR_PLLN
 ((
uöt32_t
)0x00007FC0)

	)

7232 
	#RCC_PLLCFGR_PLLN_0
 ((
uöt32_t
)0x00000040)

	)

7233 
	#RCC_PLLCFGR_PLLN_1
 ((
uöt32_t
)0x00000080)

	)

7234 
	#RCC_PLLCFGR_PLLN_2
 ((
uöt32_t
)0x00000100)

	)

7235 
	#RCC_PLLCFGR_PLLN_3
 ((
uöt32_t
)0x00000200)

	)

7236 
	#RCC_PLLCFGR_PLLN_4
 ((
uöt32_t
)0x00000400)

	)

7237 
	#RCC_PLLCFGR_PLLN_5
 ((
uöt32_t
)0x00000800)

	)

7238 
	#RCC_PLLCFGR_PLLN_6
 ((
uöt32_t
)0x00001000)

	)

7239 
	#RCC_PLLCFGR_PLLN_7
 ((
uöt32_t
)0x00002000)

	)

7240 
	#RCC_PLLCFGR_PLLN_8
 ((
uöt32_t
)0x00004000)

	)

7242 
	#RCC_PLLCFGR_PLLP
 ((
uöt32_t
)0x00030000)

	)

7243 
	#RCC_PLLCFGR_PLLP_0
 ((
uöt32_t
)0x00010000)

	)

7244 
	#RCC_PLLCFGR_PLLP_1
 ((
uöt32_t
)0x00020000)

	)

7246 
	#RCC_PLLCFGR_PLLSRC
 ((
uöt32_t
)0x00400000)

	)

7247 
	#RCC_PLLCFGR_PLLSRC_HSE
 ((
uöt32_t
)0x00400000)

	)

7248 
	#RCC_PLLCFGR_PLLSRC_HSI
 ((
uöt32_t
)0x00000000)

	)

7250 
	#RCC_PLLCFGR_PLLQ
 ((
uöt32_t
)0x0F000000)

	)

7251 
	#RCC_PLLCFGR_PLLQ_0
 ((
uöt32_t
)0x01000000)

	)

7252 
	#RCC_PLLCFGR_PLLQ_1
 ((
uöt32_t
)0x02000000)

	)

7253 
	#RCC_PLLCFGR_PLLQ_2
 ((
uöt32_t
)0x04000000)

	)

7254 
	#RCC_PLLCFGR_PLLQ_3
 ((
uöt32_t
)0x08000000)

	)

7256 #i‡
	`deföed
(
STM32F446xx
)

7257 
	#RCC_PLLCFGR_PLLR
 ((
uöt32_t
)0x70000000)

	)

7258 
	#RCC_PLLCFGR_PLLR_0
 ((
uöt32_t
)0x10000000)

	)

7259 
	#RCC_PLLCFGR_PLLR_1
 ((
uöt32_t
)0x20000000)

	)

7260 
	#RCC_PLLCFGR_PLLR_2
 ((
uöt32_t
)0x40000000)

	)

7265 
	#RCC_CFGR_SW
 ((
uöt32_t
)0x00000003Ë

	)

7266 
	#RCC_CFGR_SW_0
 ((
uöt32_t
)0x00000001Ë

	)

7267 
	#RCC_CFGR_SW_1
 ((
uöt32_t
)0x00000002Ë

	)

7269 
	#RCC_CFGR_SW_HSI
 ((
uöt32_t
)0x00000000Ë

	)

7270 
	#RCC_CFGR_SW_HSE
 ((
uöt32_t
)0x00000001Ë

	)

7271 
	#RCC_CFGR_SW_PLL
 ((
uöt32_t
)0x00000002Ë

	)

7272 #i‡
	`deföed
(
STM32F446xx
)

7273 
	#RCC_CFGR_SW_PLLR
 ((
uöt32_t
)0x00000003Ë

	)

7277 
	#RCC_CFGR_SWS
 ((
uöt32_t
)0x0000000CË

	)

7278 
	#RCC_CFGR_SWS_0
 ((
uöt32_t
)0x00000004Ë

	)

7279 
	#RCC_CFGR_SWS_1
 ((
uöt32_t
)0x00000008Ë

	)

7281 
	#RCC_CFGR_SWS_HSI
 ((
uöt32_t
)0x00000000Ë

	)

7282 
	#RCC_CFGR_SWS_HSE
 ((
uöt32_t
)0x00000004Ë

	)

7283 
	#RCC_CFGR_SWS_PLL
 ((
uöt32_t
)0x00000008Ë

	)

7284 #i‡
	`deföed
(
STM32F446xx
)

7285 
	#RCC_CFGR_SWS_PLLR
 ((
uöt32_t
)0x0000000CË

	)

7289 
	#RCC_CFGR_HPRE
 ((
uöt32_t
)0x000000F0Ë

	)

7290 
	#RCC_CFGR_HPRE_0
 ((
uöt32_t
)0x00000010Ë

	)

7291 
	#RCC_CFGR_HPRE_1
 ((
uöt32_t
)0x00000020Ë

	)

7292 
	#RCC_CFGR_HPRE_2
 ((
uöt32_t
)0x00000040Ë

	)

7293 
	#RCC_CFGR_HPRE_3
 ((
uöt32_t
)0x00000080Ë

	)

7295 
	#RCC_CFGR_HPRE_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

7296 
	#RCC_CFGR_HPRE_DIV2
 ((
uöt32_t
)0x00000080Ë

	)

7297 
	#RCC_CFGR_HPRE_DIV4
 ((
uöt32_t
)0x00000090Ë

	)

7298 
	#RCC_CFGR_HPRE_DIV8
 ((
uöt32_t
)0x000000A0Ë

	)

7299 
	#RCC_CFGR_HPRE_DIV16
 ((
uöt32_t
)0x000000B0Ë

	)

7300 
	#RCC_CFGR_HPRE_DIV64
 ((
uöt32_t
)0x000000C0Ë

	)

7301 
	#RCC_CFGR_HPRE_DIV128
 ((
uöt32_t
)0x000000D0Ë

	)

7302 
	#RCC_CFGR_HPRE_DIV256
 ((
uöt32_t
)0x000000E0Ë

	)

7303 
	#RCC_CFGR_HPRE_DIV512
 ((
uöt32_t
)0x000000F0Ë

	)

7306 
	#RCC_CFGR_PPRE1
 ((
uöt32_t
)0x00001C00Ë

	)

7307 
	#RCC_CFGR_PPRE1_0
 ((
uöt32_t
)0x00000400Ë

	)

7308 
	#RCC_CFGR_PPRE1_1
 ((
uöt32_t
)0x00000800Ë

	)

7309 
	#RCC_CFGR_PPRE1_2
 ((
uöt32_t
)0x00001000Ë

	)

7311 
	#RCC_CFGR_PPRE1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

7312 
	#RCC_CFGR_PPRE1_DIV2
 ((
uöt32_t
)0x00001000Ë

	)

7313 
	#RCC_CFGR_PPRE1_DIV4
 ((
uöt32_t
)0x00001400Ë

	)

7314 
	#RCC_CFGR_PPRE1_DIV8
 ((
uöt32_t
)0x00001800Ë

	)

7315 
	#RCC_CFGR_PPRE1_DIV16
 ((
uöt32_t
)0x00001C00Ë

	)

7318 
	#RCC_CFGR_PPRE2
 ((
uöt32_t
)0x0000E000Ë

	)

7319 
	#RCC_CFGR_PPRE2_0
 ((
uöt32_t
)0x00002000Ë

	)

7320 
	#RCC_CFGR_PPRE2_1
 ((
uöt32_t
)0x00004000Ë

	)

7321 
	#RCC_CFGR_PPRE2_2
 ((
uöt32_t
)0x00008000Ë

	)

7323 
	#RCC_CFGR_PPRE2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

7324 
	#RCC_CFGR_PPRE2_DIV2
 ((
uöt32_t
)0x00008000Ë

	)

7325 
	#RCC_CFGR_PPRE2_DIV4
 ((
uöt32_t
)0x0000A000Ë

	)

7326 
	#RCC_CFGR_PPRE2_DIV8
 ((
uöt32_t
)0x0000C000Ë

	)

7327 
	#RCC_CFGR_PPRE2_DIV16
 ((
uöt32_t
)0x0000E000Ë

	)

7330 
	#RCC_CFGR_RTCPRE
 ((
uöt32_t
)0x001F0000)

	)

7331 
	#RCC_CFGR_RTCPRE_0
 ((
uöt32_t
)0x00010000)

	)

7332 
	#RCC_CFGR_RTCPRE_1
 ((
uöt32_t
)0x00020000)

	)

7333 
	#RCC_CFGR_RTCPRE_2
 ((
uöt32_t
)0x00040000)

	)

7334 
	#RCC_CFGR_RTCPRE_3
 ((
uöt32_t
)0x00080000)

	)

7335 
	#RCC_CFGR_RTCPRE_4
 ((
uöt32_t
)0x00100000)

	)

7338 
	#RCC_CFGR_MCO1
 ((
uöt32_t
)0x00600000)

	)

7339 
	#RCC_CFGR_MCO1_0
 ((
uöt32_t
)0x00200000)

	)

7340 
	#RCC_CFGR_MCO1_1
 ((
uöt32_t
)0x00400000)

	)

7342 
	#RCC_CFGR_I2SSRC
 ((
uöt32_t
)0x00800000)

	)

7344 
	#RCC_CFGR_MCO1PRE
 ((
uöt32_t
)0x07000000)

	)

7345 
	#RCC_CFGR_MCO1PRE_0
 ((
uöt32_t
)0x01000000)

	)

7346 
	#RCC_CFGR_MCO1PRE_1
 ((
uöt32_t
)0x02000000)

	)

7347 
	#RCC_CFGR_MCO1PRE_2
 ((
uöt32_t
)0x04000000)

	)

7349 
	#RCC_CFGR_MCO2PRE
 ((
uöt32_t
)0x38000000)

	)

7350 
	#RCC_CFGR_MCO2PRE_0
 ((
uöt32_t
)0x08000000)

	)

7351 
	#RCC_CFGR_MCO2PRE_1
 ((
uöt32_t
)0x10000000)

	)

7352 
	#RCC_CFGR_MCO2PRE_2
 ((
uöt32_t
)0x20000000)

	)

7354 
	#RCC_CFGR_MCO2
 ((
uöt32_t
)0xC0000000)

	)

7355 
	#RCC_CFGR_MCO2_0
 ((
uöt32_t
)0x40000000)

	)

7356 
	#RCC_CFGR_MCO2_1
 ((
uöt32_t
)0x80000000)

	)

7359 
	#RCC_CIR_LSIRDYF
 ((
uöt32_t
)0x00000001)

	)

7360 
	#RCC_CIR_LSERDYF
 ((
uöt32_t
)0x00000002)

	)

7361 
	#RCC_CIR_HSIRDYF
 ((
uöt32_t
)0x00000004)

	)

7362 
	#RCC_CIR_HSERDYF
 ((
uöt32_t
)0x00000008)

	)

7363 
	#RCC_CIR_PLLRDYF
 ((
uöt32_t
)0x00000010)

	)

7364 
	#RCC_CIR_PLLI2SRDYF
 ((
uöt32_t
)0x00000020)

	)

7365 
	#RCC_CIR_PLLSAIRDYF
 ((
uöt32_t
)0x00000040)

	)

7366 
	#RCC_CIR_CSSF
 ((
uöt32_t
)0x00000080)

	)

7367 
	#RCC_CIR_LSIRDYIE
 ((
uöt32_t
)0x00000100)

	)

7368 
	#RCC_CIR_LSERDYIE
 ((
uöt32_t
)0x00000200)

	)

7369 
	#RCC_CIR_HSIRDYIE
 ((
uöt32_t
)0x00000400)

	)

7370 
	#RCC_CIR_HSERDYIE
 ((
uöt32_t
)0x00000800)

	)

7371 
	#RCC_CIR_PLLRDYIE
 ((
uöt32_t
)0x00001000)

	)

7372 
	#RCC_CIR_PLLI2SRDYIE
 ((
uöt32_t
)0x00002000)

	)

7373 
	#RCC_CIR_PLLSAIRDYIE
 ((
uöt32_t
)0x00004000)

	)

7374 
	#RCC_CIR_LSIRDYC
 ((
uöt32_t
)0x00010000)

	)

7375 
	#RCC_CIR_LSERDYC
 ((
uöt32_t
)0x00020000)

	)

7376 
	#RCC_CIR_HSIRDYC
 ((
uöt32_t
)0x00040000)

	)

7377 
	#RCC_CIR_HSERDYC
 ((
uöt32_t
)0x00080000)

	)

7378 
	#RCC_CIR_PLLRDYC
 ((
uöt32_t
)0x00100000)

	)

7379 
	#RCC_CIR_PLLI2SRDYC
 ((
uöt32_t
)0x00200000)

	)

7380 
	#RCC_CIR_PLLSAIRDYC
 ((
uöt32_t
)0x00400000)

	)

7381 
	#RCC_CIR_CSSC
 ((
uöt32_t
)0x00800000)

	)

7384 
	#RCC_AHB1RSTR_GPIOARST
 ((
uöt32_t
)0x00000001)

	)

7385 
	#RCC_AHB1RSTR_GPIOBRST
 ((
uöt32_t
)0x00000002)

	)

7386 
	#RCC_AHB1RSTR_GPIOCRST
 ((
uöt32_t
)0x00000004)

	)

7387 
	#RCC_AHB1RSTR_GPIODRST
 ((
uöt32_t
)0x00000008)

	)

7388 
	#RCC_AHB1RSTR_GPIOERST
 ((
uöt32_t
)0x00000010)

	)

7389 
	#RCC_AHB1RSTR_GPIOFRST
 ((
uöt32_t
)0x00000020)

	)

7390 
	#RCC_AHB1RSTR_GPIOGRST
 ((
uöt32_t
)0x00000040)

	)

7391 
	#RCC_AHB1RSTR_GPIOHRST
 ((
uöt32_t
)0x00000080)

	)

7392 
	#RCC_AHB1RSTR_GPIOIRST
 ((
uöt32_t
)0x00000100)

	)

7393 
	#RCC_AHB1RSTR_GPIOJRST
 ((
uöt32_t
)0x00000200)

	)

7394 
	#RCC_AHB1RSTR_GPIOKRST
 ((
uöt32_t
)0x00000400)

	)

7395 
	#RCC_AHB1RSTR_CRCRST
 ((
uöt32_t
)0x00001000)

	)

7396 
	#RCC_AHB1RSTR_DMA1RST
 ((
uöt32_t
)0x00200000)

	)

7397 
	#RCC_AHB1RSTR_DMA2RST
 ((
uöt32_t
)0x00400000)

	)

7398 
	#RCC_AHB1RSTR_DMA2DRST
 ((
uöt32_t
)0x00800000)

	)

7399 
	#RCC_AHB1RSTR_ETHMACRST
 ((
uöt32_t
)0x02000000)

	)

7400 
	#RCC_AHB1RSTR_OTGHRST
 ((
uöt32_t
)0x10000000)

	)

7403 
	#RCC_AHB2RSTR_DCMIRST
 ((
uöt32_t
)0x00000001)

	)

7404 
	#RCC_AHB2RSTR_CRYPRST
 ((
uöt32_t
)0x00000010)

	)

7405 
	#RCC_AHB2RSTR_HASHRST
 ((
uöt32_t
)0x00000020)

	)

7407 
	#RCC_AHB2RSTR_HSAHRST
 
RCC_AHB2RSTR_HASHRST


	)

7408 
	#RCC_AHB2RSTR_RNGRST
 ((
uöt32_t
)0x00000040)

	)

7409 
	#RCC_AHB2RSTR_OTGFSRST
 ((
uöt32_t
)0x00000080)

	)

7412 #i‡
	`deföed
(
STM32F40_41xxx
)

7413 
	#RCC_AHB3RSTR_FSMCRST
 ((
uöt32_t
)0x00000001)

	)

7416 #i‡
	`deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
)

7417 
	#RCC_AHB3RSTR_FMCRST
 ((
uöt32_t
)0x00000001)

	)

7419 #i‡
	`deföed
(
STM32F446xx
)

7420 
	#RCC_AHB3RSTR_QSPIRST
 ((
uöt32_t
)0x00000002)

	)

7424 
	#RCC_APB1RSTR_TIM2RST
 ((
uöt32_t
)0x00000001)

	)

7425 
	#RCC_APB1RSTR_TIM3RST
 ((
uöt32_t
)0x00000002)

	)

7426 
	#RCC_APB1RSTR_TIM4RST
 ((
uöt32_t
)0x00000004)

	)

7427 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008)

	)

7428 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010)

	)

7429 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020)

	)

7430 
	#RCC_APB1RSTR_TIM12RST
 ((
uöt32_t
)0x00000040)

	)

7431 
	#RCC_APB1RSTR_TIM13RST
 ((
uöt32_t
)0x00000080)

	)

7432 
	#RCC_APB1RSTR_TIM14RST
 ((
uöt32_t
)0x00000100)

	)

7433 
	#RCC_APB1RSTR_WWDGRST
 ((
uöt32_t
)0x00000800)

	)

7434 
	#RCC_APB1RSTR_SPI2RST
 ((
uöt32_t
)0x00004000)

	)

7435 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00008000)

	)

7436 #i‡
	`deföed
(
STM32F446xx
)

7437 
	#RCC_APB1RSTR_SPDIFRXRST
 ((
uöt32_t
)0x00010000)

	)

7439 
	#RCC_APB1RSTR_USART2RST
 ((
uöt32_t
)0x00020000)

	)

7440 
	#RCC_APB1RSTR_USART3RST
 ((
uöt32_t
)0x00040000)

	)

7441 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000)

	)

7442 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000)

	)

7443 
	#RCC_APB1RSTR_I2C1RST
 ((
uöt32_t
)0x00200000)

	)

7444 
	#RCC_APB1RSTR_I2C2RST
 ((
uöt32_t
)0x00400000)

	)

7445 
	#RCC_APB1RSTR_I2C3RST
 ((
uöt32_t
)0x00800000)

	)

7446 #i‡
	`deföed
(
STM32F446xx
)

7447 
	#RCC_APB1RSTR_FMPI2C1RST
 ((
uöt32_t
)0x01000000)

	)

7449 
	#RCC_APB1RSTR_CAN1RST
 ((
uöt32_t
)0x02000000)

	)

7450 
	#RCC_APB1RSTR_CAN2RST
 ((
uöt32_t
)0x04000000)

	)

7451 #i‡
	`deföed
(
STM32F446xx
)

7452 
	#RCC_APB1RSTR_CECRST
 ((
uöt32_t
)0x08000000)

	)

7454 
	#RCC_APB1RSTR_PWRRST
 ((
uöt32_t
)0x10000000)

	)

7455 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000)

	)

7456 
	#RCC_APB1RSTR_UART7RST
 ((
uöt32_t
)0x40000000)

	)

7457 
	#RCC_APB1RSTR_UART8RST
 ((
uöt32_t
)0x80000000)

	)

7460 
	#RCC_APB2RSTR_TIM1RST
 ((
uöt32_t
)0x00000001)

	)

7461 
	#RCC_APB2RSTR_TIM8RST
 ((
uöt32_t
)0x00000002)

	)

7462 
	#RCC_APB2RSTR_USART1RST
 ((
uöt32_t
)0x00000010)

	)

7463 
	#RCC_APB2RSTR_USART6RST
 ((
uöt32_t
)0x00000020)

	)

7464 
	#RCC_APB2RSTR_ADCRST
 ((
uöt32_t
)0x00000100)

	)

7465 
	#RCC_APB2RSTR_SDIORST
 ((
uöt32_t
)0x00000800)

	)

7466 
	#RCC_APB2RSTR_SPI1RST
 ((
uöt32_t
)0x00001000)

	)

7467 
	#RCC_APB2RSTR_SPI4RST
 ((
uöt32_t
)0x00002000)

	)

7468 
	#RCC_APB2RSTR_SYSCFGRST
 ((
uöt32_t
)0x00004000)

	)

7469 
	#RCC_APB2RSTR_TIM9RST
 ((
uöt32_t
)0x00010000)

	)

7470 
	#RCC_APB2RSTR_TIM10RST
 ((
uöt32_t
)0x00020000)

	)

7471 
	#RCC_APB2RSTR_TIM11RST
 ((
uöt32_t
)0x00040000)

	)

7472 
	#RCC_APB2RSTR_SPI5RST
 ((
uöt32_t
)0x00100000)

	)

7473 
	#RCC_APB2RSTR_SPI6RST
 ((
uöt32_t
)0x00200000)

	)

7474 
	#RCC_APB2RSTR_SAI1RST
 ((
uöt32_t
)0x00400000)

	)

7475 #i‡
	`deföed
(
STM32F446xx
)

7476 
	#RCC_APB2RSTR_SAI2RST
 ((
uöt32_t
)0x00800000)

	)

7478 
	#RCC_APB2RSTR_LTDCRST
 ((
uöt32_t
)0x04000000)

	)

7481 
	#RCC_APB2RSTR_SPI1
 
RCC_APB2RSTR_SPI1RST


	)

7484 
	#RCC_AHB1ENR_GPIOAEN
 ((
uöt32_t
)0x00000001)

	)

7485 
	#RCC_AHB1ENR_GPIOBEN
 ((
uöt32_t
)0x00000002)

	)

7486 
	#RCC_AHB1ENR_GPIOCEN
 ((
uöt32_t
)0x00000004)

	)

7487 
	#RCC_AHB1ENR_GPIODEN
 ((
uöt32_t
)0x00000008)

	)

7488 
	#RCC_AHB1ENR_GPIOEEN
 ((
uöt32_t
)0x00000010)

	)

7489 
	#RCC_AHB1ENR_GPIOFEN
 ((
uöt32_t
)0x00000020)

	)

7490 
	#RCC_AHB1ENR_GPIOGEN
 ((
uöt32_t
)0x00000040)

	)

7491 
	#RCC_AHB1ENR_GPIOHEN
 ((
uöt32_t
)0x00000080)

	)

7492 
	#RCC_AHB1ENR_GPIOIEN
 ((
uöt32_t
)0x00000100)

	)

7493 
	#RCC_AHB1ENR_GPIOJEN
 ((
uöt32_t
)0x00000200)

	)

7494 
	#RCC_AHB1ENR_GPIOKEN
 ((
uöt32_t
)0x00000400)

	)

7495 
	#RCC_AHB1ENR_CRCEN
 ((
uöt32_t
)0x00001000)

	)

7496 
	#RCC_AHB1ENR_BKPSRAMEN
 ((
uöt32_t
)0x00040000)

	)

7497 
	#RCC_AHB1ENR_CCMDATARAMEN
 ((
uöt32_t
)0x00100000)

	)

7498 
	#RCC_AHB1ENR_DMA1EN
 ((
uöt32_t
)0x00200000)

	)

7499 
	#RCC_AHB1ENR_DMA2EN
 ((
uöt32_t
)0x00400000)

	)

7500 
	#RCC_AHB1ENR_DMA2DEN
 ((
uöt32_t
)0x00800000)

	)

7501 
	#RCC_AHB1ENR_ETHMACEN
 ((
uöt32_t
)0x02000000)

	)

7502 
	#RCC_AHB1ENR_ETHMACTXEN
 ((
uöt32_t
)0x04000000)

	)

7503 
	#RCC_AHB1ENR_ETHMACRXEN
 ((
uöt32_t
)0x08000000)

	)

7504 
	#RCC_AHB1ENR_ETHMACPTPEN
 ((
uöt32_t
)0x10000000)

	)

7505 
	#RCC_AHB1ENR_OTGHSEN
 ((
uöt32_t
)0x20000000)

	)

7506 
	#RCC_AHB1ENR_OTGHSULPIEN
 ((
uöt32_t
)0x40000000)

	)

7509 
	#RCC_AHB2ENR_DCMIEN
 ((
uöt32_t
)0x00000001)

	)

7510 
	#RCC_AHB2ENR_CRYPEN
 ((
uöt32_t
)0x00000010)

	)

7511 
	#RCC_AHB2ENR_HASHEN
 ((
uöt32_t
)0x00000020)

	)

7512 
	#RCC_AHB2ENR_RNGEN
 ((
uöt32_t
)0x00000040)

	)

7513 
	#RCC_AHB2ENR_OTGFSEN
 ((
uöt32_t
)0x00000080)

	)

7517 #i‡
	`deföed
(
STM32F40_41xxx
)

7518 
	#RCC_AHB3ENR_FSMCEN
 ((
uöt32_t
)0x00000001)

	)

7521 #i‡
	`deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
)

7522 
	#RCC_AHB3ENR_FMCEN
 ((
uöt32_t
)0x00000001)

	)

7525 #i‡
	`deföed
(
STM32F446xx
)

7526 
	#RCC_AHB3ENR_QSPIEN
 ((
uöt32_t
)0x00000002)

	)

7530 
	#RCC_APB1ENR_TIM2EN
 ((
uöt32_t
)0x00000001)

	)

7531 
	#RCC_APB1ENR_TIM3EN
 ((
uöt32_t
)0x00000002)

	)

7532 
	#RCC_APB1ENR_TIM4EN
 ((
uöt32_t
)0x00000004)

	)

7533 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008)

	)

7534 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010)

	)

7535 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020)

	)

7536 
	#RCC_APB1ENR_TIM12EN
 ((
uöt32_t
)0x00000040)

	)

7537 
	#RCC_APB1ENR_TIM13EN
 ((
uöt32_t
)0x00000080)

	)

7538 
	#RCC_APB1ENR_TIM14EN
 ((
uöt32_t
)0x00000100)

	)

7539 
	#RCC_APB1ENR_WWDGEN
 ((
uöt32_t
)0x00000800)

	)

7540 
	#RCC_APB1ENR_SPI2EN
 ((
uöt32_t
)0x00004000)

	)

7541 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000)

	)

7542 #i‡
	`deföed
(
STM32F446xx
)

7543 
	#RCC_APB1ENR_SPDIFRXEN
 ((
uöt32_t
)0x00010000)

	)

7545 
	#RCC_APB1ENR_USART2EN
 ((
uöt32_t
)0x00020000)

	)

7546 
	#RCC_APB1ENR_USART3EN
 ((
uöt32_t
)0x00040000)

	)

7547 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000)

	)

7548 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000)

	)

7549 
	#RCC_APB1ENR_I2C1EN
 ((
uöt32_t
)0x00200000)

	)

7550 
	#RCC_APB1ENR_I2C2EN
 ((
uöt32_t
)0x00400000)

	)

7551 
	#RCC_APB1ENR_I2C3EN
 ((
uöt32_t
)0x00800000)

	)

7552 #i‡
	`deföed
(
STM32F446xx
)

7553 
	#RCC_APB1ENR_FMPI2C1EN
 ((
uöt32_t
)0x01000000)

	)

7555 
	#RCC_APB1ENR_CAN1EN
 ((
uöt32_t
)0x02000000)

	)

7556 
	#RCC_APB1ENR_CAN2EN
 ((
uöt32_t
)0x04000000)

	)

7557 #i‡
	`deföed
(
STM32F446xx
)

7558 
	#RCC_APB1ENR_CECEN
 ((
uöt32_t
)0x08000000)

	)

7560 
	#RCC_APB1ENR_PWREN
 ((
uöt32_t
)0x10000000)

	)

7561 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000)

	)

7562 
	#RCC_APB1ENR_UART7EN
 ((
uöt32_t
)0x40000000)

	)

7563 
	#RCC_APB1ENR_UART8EN
 ((
uöt32_t
)0x80000000)

	)

7566 
	#RCC_APB2ENR_TIM1EN
 ((
uöt32_t
)0x00000001)

	)

7567 
	#RCC_APB2ENR_TIM8EN
 ((
uöt32_t
)0x00000002)

	)

7568 
	#RCC_APB2ENR_USART1EN
 ((
uöt32_t
)0x00000010)

	)

7569 
	#RCC_APB2ENR_USART6EN
 ((
uöt32_t
)0x00000020)

	)

7570 
	#RCC_APB2ENR_ADC1EN
 ((
uöt32_t
)0x00000100)

	)

7571 
	#RCC_APB2ENR_ADC2EN
 ((
uöt32_t
)0x00000200)

	)

7572 
	#RCC_APB2ENR_ADC3EN
 ((
uöt32_t
)0x00000400)

	)

7573 
	#RCC_APB2ENR_SDIOEN
 ((
uöt32_t
)0x00000800)

	)

7574 
	#RCC_APB2ENR_SPI1EN
 ((
uöt32_t
)0x00001000)

	)

7575 
	#RCC_APB2ENR_SPI4EN
 ((
uöt32_t
)0x00002000)

	)

7576 
	#RCC_APB2ENR_SYSCFGEN
 ((
uöt32_t
)0x00004000)

	)

7577 
	#RCC_APB2ENR_TIM9EN
 ((
uöt32_t
)0x00010000)

	)

7578 
	#RCC_APB2ENR_TIM10EN
 ((
uöt32_t
)0x00020000)

	)

7579 
	#RCC_APB2ENR_TIM11EN
 ((
uöt32_t
)0x00040000)

	)

7580 
	#RCC_APB2ENR_SPI5EN
 ((
uöt32_t
)0x00100000)

	)

7581 
	#RCC_APB2ENR_SPI6EN
 ((
uöt32_t
)0x00200000)

	)

7582 
	#RCC_APB2ENR_SAI1EN
 ((
uöt32_t
)0x00400000)

	)

7583 #i‡
	`deföed
(
STM32F446xx
)

7584 
	#RCC_APB2ENR_SAI2EN
 ((
uöt32_t
)0x00800000)

	)

7586 
	#RCC_APB2ENR_LTDCEN
 ((
uöt32_t
)0x04000000)

	)

7589 
	#RCC_AHB1LPENR_GPIOALPEN
 ((
uöt32_t
)0x00000001)

	)

7590 
	#RCC_AHB1LPENR_GPIOBLPEN
 ((
uöt32_t
)0x00000002)

	)

7591 
	#RCC_AHB1LPENR_GPIOCLPEN
 ((
uöt32_t
)0x00000004)

	)

7592 
	#RCC_AHB1LPENR_GPIODLPEN
 ((
uöt32_t
)0x00000008)

	)

7593 
	#RCC_AHB1LPENR_GPIOELPEN
 ((
uöt32_t
)0x00000010)

	)

7594 
	#RCC_AHB1LPENR_GPIOFLPEN
 ((
uöt32_t
)0x00000020)

	)

7595 
	#RCC_AHB1LPENR_GPIOGLPEN
 ((
uöt32_t
)0x00000040)

	)

7596 
	#RCC_AHB1LPENR_GPIOHLPEN
 ((
uöt32_t
)0x00000080)

	)

7597 
	#RCC_AHB1LPENR_GPIOILPEN
 ((
uöt32_t
)0x00000100)

	)

7598 
	#RCC_AHB1LPENR_GPIOJLPEN
 ((
uöt32_t
)0x00000200)

	)

7599 
	#RCC_AHB1LPENR_GPIOKLPEN
 ((
uöt32_t
)0x00000400)

	)

7600 
	#RCC_AHB1LPENR_CRCLPEN
 ((
uöt32_t
)0x00001000)

	)

7601 
	#RCC_AHB1LPENR_FLITFLPEN
 ((
uöt32_t
)0x00008000)

	)

7602 
	#RCC_AHB1LPENR_SRAM1LPEN
 ((
uöt32_t
)0x00010000)

	)

7603 
	#RCC_AHB1LPENR_SRAM2LPEN
 ((
uöt32_t
)0x00020000)

	)

7604 
	#RCC_AHB1LPENR_BKPSRAMLPEN
 ((
uöt32_t
)0x00040000)

	)

7605 
	#RCC_AHB1LPENR_SRAM3LPEN
 ((
uöt32_t
)0x00080000)

	)

7606 
	#RCC_AHB1LPENR_DMA1LPEN
 ((
uöt32_t
)0x00200000)

	)

7607 
	#RCC_AHB1LPENR_DMA2LPEN
 ((
uöt32_t
)0x00400000)

	)

7608 
	#RCC_AHB1LPENR_DMA2DLPEN
 ((
uöt32_t
)0x00800000)

	)

7609 
	#RCC_AHB1LPENR_ETHMACLPEN
 ((
uöt32_t
)0x02000000)

	)

7610 
	#RCC_AHB1LPENR_ETHMACTXLPEN
 ((
uöt32_t
)0x04000000)

	)

7611 
	#RCC_AHB1LPENR_ETHMACRXLPEN
 ((
uöt32_t
)0x08000000)

	)

7612 
	#RCC_AHB1LPENR_ETHMACPTPLPEN
 ((
uöt32_t
)0x10000000)

	)

7613 
	#RCC_AHB1LPENR_OTGHSLPEN
 ((
uöt32_t
)0x20000000)

	)

7614 
	#RCC_AHB1LPENR_OTGHSULPILPEN
 ((
uöt32_t
)0x40000000)

	)

7617 
	#RCC_AHB2LPENR_DCMILPEN
 ((
uöt32_t
)0x00000001)

	)

7618 
	#RCC_AHB2LPENR_CRYPLPEN
 ((
uöt32_t
)0x00000010)

	)

7619 
	#RCC_AHB2LPENR_HASHLPEN
 ((
uöt32_t
)0x00000020)

	)

7620 
	#RCC_AHB2LPENR_RNGLPEN
 ((
uöt32_t
)0x00000040)

	)

7621 
	#RCC_AHB2LPENR_OTGFSLPEN
 ((
uöt32_t
)0x00000080)

	)

7624 #i‡
	`deföed
(
STM32F40_41xxx
)

7625 
	#RCC_AHB3LPENR_FSMCLPEN
 ((
uöt32_t
)0x00000001)

	)

7628 #i‡
	`deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
)

7629 
	#RCC_AHB3LPENR_FMCLPEN
 ((
uöt32_t
)0x00000001)

	)

7631 #i‡
	`deföed
(
STM32F446xx
)

7632 
	#RCC_AHB3LPENR_QSPILPEN
 ((
uöt32_t
)0x00000002)

	)

7636 
	#RCC_APB1LPENR_TIM2LPEN
 ((
uöt32_t
)0x00000001)

	)

7637 
	#RCC_APB1LPENR_TIM3LPEN
 ((
uöt32_t
)0x00000002)

	)

7638 
	#RCC_APB1LPENR_TIM4LPEN
 ((
uöt32_t
)0x00000004)

	)

7639 
	#RCC_APB1LPENR_TIM5LPEN
 ((
uöt32_t
)0x00000008)

	)

7640 
	#RCC_APB1LPENR_TIM6LPEN
 ((
uöt32_t
)0x00000010)

	)

7641 
	#RCC_APB1LPENR_TIM7LPEN
 ((
uöt32_t
)0x00000020)

	)

7642 
	#RCC_APB1LPENR_TIM12LPEN
 ((
uöt32_t
)0x00000040)

	)

7643 
	#RCC_APB1LPENR_TIM13LPEN
 ((
uöt32_t
)0x00000080)

	)

7644 
	#RCC_APB1LPENR_TIM14LPEN
 ((
uöt32_t
)0x00000100)

	)

7645 
	#RCC_APB1LPENR_WWDGLPEN
 ((
uöt32_t
)0x00000800)

	)

7646 
	#RCC_APB1LPENR_SPI2LPEN
 ((
uöt32_t
)0x00004000)

	)

7647 
	#RCC_APB1LPENR_SPI3LPEN
 ((
uöt32_t
)0x00008000)

	)

7648 #i‡
	`deföed
(
STM32F446xx
)

7649 
	#RCC_APB1LPENR_SPDIFRXLPEN
 ((
uöt32_t
)0x00010000)

	)

7651 
	#RCC_APB1LPENR_USART2LPEN
 ((
uöt32_t
)0x00020000)

	)

7652 
	#RCC_APB1LPENR_USART3LPEN
 ((
uöt32_t
)0x00040000)

	)

7653 
	#RCC_APB1LPENR_UART4LPEN
 ((
uöt32_t
)0x00080000)

	)

7654 
	#RCC_APB1LPENR_UART5LPEN
 ((
uöt32_t
)0x00100000)

	)

7655 
	#RCC_APB1LPENR_I2C1LPEN
 ((
uöt32_t
)0x00200000)

	)

7656 
	#RCC_APB1LPENR_I2C2LPEN
 ((
uöt32_t
)0x00400000)

	)

7657 
	#RCC_APB1LPENR_I2C3LPEN
 ((
uöt32_t
)0x00800000)

	)

7658 #i‡
	`deföed
(
STM32F446xx
)

7659 
	#RCC_APB1LPENR_FMPI2C1LPEN
 ((
uöt32_t
)0x01000000)

	)

7661 
	#RCC_APB1LPENR_CAN1LPEN
 ((
uöt32_t
)0x02000000)

	)

7662 
	#RCC_APB1LPENR_CAN2LPEN
 ((
uöt32_t
)0x04000000)

	)

7663 #i‡
	`deföed
(
STM32F446xx
)

7664 
	#RCC_APB1LPENR_CECLPEN
 ((
uöt32_t
)0x08000000)

	)

7666 
	#RCC_APB1LPENR_PWRLPEN
 ((
uöt32_t
)0x10000000)

	)

7667 
	#RCC_APB1LPENR_DACLPEN
 ((
uöt32_t
)0x20000000)

	)

7668 
	#RCC_APB1LPENR_UART7LPEN
 ((
uöt32_t
)0x40000000)

	)

7669 
	#RCC_APB1LPENR_UART8LPEN
 ((
uöt32_t
)0x80000000)

	)

7672 
	#RCC_APB2LPENR_TIM1LPEN
 ((
uöt32_t
)0x00000001)

	)

7673 
	#RCC_APB2LPENR_TIM8LPEN
 ((
uöt32_t
)0x00000002)

	)

7674 
	#RCC_APB2LPENR_USART1LPEN
 ((
uöt32_t
)0x00000010)

	)

7675 
	#RCC_APB2LPENR_USART6LPEN
 ((
uöt32_t
)0x00000020)

	)

7676 
	#RCC_APB2LPENR_ADC1LPEN
 ((
uöt32_t
)0x00000100)

	)

7677 
	#RCC_APB2LPENR_ADC2PEN
 ((
uöt32_t
)0x00000200)

	)

7678 
	#RCC_APB2LPENR_ADC3LPEN
 ((
uöt32_t
)0x00000400)

	)

7679 
	#RCC_APB2LPENR_SDIOLPEN
 ((
uöt32_t
)0x00000800)

	)

7680 
	#RCC_APB2LPENR_SPI1LPEN
 ((
uöt32_t
)0x00001000)

	)

7681 
	#RCC_APB2LPENR_SPI4LPEN
 ((
uöt32_t
)0x00002000)

	)

7682 
	#RCC_APB2LPENR_SYSCFGLPEN
 ((
uöt32_t
)0x00004000)

	)

7683 
	#RCC_APB2LPENR_TIM9LPEN
 ((
uöt32_t
)0x00010000)

	)

7684 
	#RCC_APB2LPENR_TIM10LPEN
 ((
uöt32_t
)0x00020000)

	)

7685 
	#RCC_APB2LPENR_TIM11LPEN
 ((
uöt32_t
)0x00040000)

	)

7686 
	#RCC_APB2LPENR_SPI5LPEN
 ((
uöt32_t
)0x00100000)

	)

7687 
	#RCC_APB2LPENR_SPI6LPEN
 ((
uöt32_t
)0x00200000)

	)

7688 
	#RCC_APB2LPENR_SAI1LPEN
 ((
uöt32_t
)0x00400000)

	)

7689 #i‡
	`deföed
(
STM32F446xx
)

7690 
	#RCC_APB2LPENR_SAI2LPEN
 ((
uöt32_t
)0x00800000)

	)

7692 
	#RCC_APB2LPENR_LTDCLPEN
 ((
uöt32_t
)0x04000000)

	)

7695 
	#RCC_BDCR_LSEON
 ((
uöt32_t
)0x00000001)

	)

7696 
	#RCC_BDCR_LSERDY
 ((
uöt32_t
)0x00000002)

	)

7697 
	#RCC_BDCR_LSEBYP
 ((
uöt32_t
)0x00000004)

	)

7698 
	#RCC_BDCR_LSEMOD
 ((
uöt32_t
)0x00000008)

	)

7700 
	#RCC_BDCR_RTCSEL
 ((
uöt32_t
)0x00000300)

	)

7701 
	#RCC_BDCR_RTCSEL_0
 ((
uöt32_t
)0x00000100)

	)

7702 
	#RCC_BDCR_RTCSEL_1
 ((
uöt32_t
)0x00000200)

	)

7704 
	#RCC_BDCR_RTCEN
 ((
uöt32_t
)0x00008000)

	)

7705 
	#RCC_BDCR_BDRST
 ((
uöt32_t
)0x00010000)

	)

7708 
	#RCC_CSR_LSION
 ((
uöt32_t
)0x00000001)

	)

7709 
	#RCC_CSR_LSIRDY
 ((
uöt32_t
)0x00000002)

	)

7710 
	#RCC_CSR_RMVF
 ((
uöt32_t
)0x01000000)

	)

7711 
	#RCC_CSR_BORRSTF
 ((
uöt32_t
)0x02000000)

	)

7712 
	#RCC_CSR_PADRSTF
 ((
uöt32_t
)0x04000000)

	)

7713 
	#RCC_CSR_PORRSTF
 ((
uöt32_t
)0x08000000)

	)

7714 
	#RCC_CSR_SFTRSTF
 ((
uöt32_t
)0x10000000)

	)

7715 
	#RCC_CSR_WDGRSTF
 ((
uöt32_t
)0x20000000)

	)

7716 
	#RCC_CSR_WWDGRSTF
 ((
uöt32_t
)0x40000000)

	)

7717 
	#RCC_CSR_LPWRRSTF
 ((
uöt32_t
)0x80000000)

	)

7720 
	#RCC_SSCGR_MODPER
 ((
uöt32_t
)0x00001FFF)

	)

7721 
	#RCC_SSCGR_INCSTEP
 ((
uöt32_t
)0x0FFFE000)

	)

7722 
	#RCC_SSCGR_SPREADSEL
 ((
uöt32_t
)0x40000000)

	)

7723 
	#RCC_SSCGR_SSCGEN
 ((
uöt32_t
)0x80000000)

	)

7726 
	#RCC_PLLI2SCFGR_PLLI2SM
 ((
uöt32_t
)0x0000003F)

	)

7727 
	#RCC_PLLI2SCFGR_PLLI2SM_0
 ((
uöt32_t
)0x00000001)

	)

7728 
	#RCC_PLLI2SCFGR_PLLI2SM_1
 ((
uöt32_t
)0x00000002)

	)

7729 
	#RCC_PLLI2SCFGR_PLLI2SM_2
 ((
uöt32_t
)0x00000004)

	)

7730 
	#RCC_PLLI2SCFGR_PLLI2SM_3
 ((
uöt32_t
)0x00000008)

	)

7731 
	#RCC_PLLI2SCFGR_PLLI2SM_4
 ((
uöt32_t
)0x00000010)

	)

7732 
	#RCC_PLLI2SCFGR_PLLI2SM_5
 ((
uöt32_t
)0x00000020)

	)

7734 
	#RCC_PLLI2SCFGR_PLLI2SN
 ((
uöt32_t
)0x00007FC0)

	)

7735 
	#RCC_PLLI2SCFGR_PLLI2SN_0
 ((
uöt32_t
)0x00000040)

	)

7736 
	#RCC_PLLI2SCFGR_PLLI2SN_1
 ((
uöt32_t
)0x00000080)

	)

7737 
	#RCC_PLLI2SCFGR_PLLI2SN_2
 ((
uöt32_t
)0x00000100)

	)

7738 
	#RCC_PLLI2SCFGR_PLLI2SN_3
 ((
uöt32_t
)0x00000200)

	)

7739 
	#RCC_PLLI2SCFGR_PLLI2SN_4
 ((
uöt32_t
)0x00000400)

	)

7740 
	#RCC_PLLI2SCFGR_PLLI2SN_5
 ((
uöt32_t
)0x00000800)

	)

7741 
	#RCC_PLLI2SCFGR_PLLI2SN_6
 ((
uöt32_t
)0x00001000)

	)

7742 
	#RCC_PLLI2SCFGR_PLLI2SN_7
 ((
uöt32_t
)0x00002000)

	)

7743 
	#RCC_PLLI2SCFGR_PLLI2SN_8
 ((
uöt32_t
)0x00004000)

	)

7745 #i‡
	`deföed
(
STM32F446xx
)

7746 
	#RCC_PLLI2SCFGR_PLLI2SP
 ((
uöt32_t
)0x00030000)

	)

7747 
	#RCC_PLLI2SCFGR_PLLI2SP_0
 ((
uöt32_t
)0x00010000)

	)

7748 
	#RCC_PLLI2SCFGR_PLLI2SP_1
 ((
uöt32_t
)0x00020000)

	)

7751 
	#RCC_PLLI2SCFGR_PLLI2SQ
 ((
uöt32_t
)0x0F000000)

	)

7752 
	#RCC_PLLI2SCFGR_PLLI2SQ_0
 ((
uöt32_t
)0x01000000)

	)

7753 
	#RCC_PLLI2SCFGR_PLLI2SQ_1
 ((
uöt32_t
)0x02000000)

	)

7754 
	#RCC_PLLI2SCFGR_PLLI2SQ_2
 ((
uöt32_t
)0x04000000)

	)

7755 
	#RCC_PLLI2SCFGR_PLLI2SQ_3
 ((
uöt32_t
)0x08000000)

	)

7757 
	#RCC_PLLI2SCFGR_PLLI2SR
 ((
uöt32_t
)0x70000000)

	)

7758 
	#RCC_PLLI2SCFGR_PLLI2SR_0
 ((
uöt32_t
)0x10000000)

	)

7759 
	#RCC_PLLI2SCFGR_PLLI2SR_1
 ((
uöt32_t
)0x20000000)

	)

7760 
	#RCC_PLLI2SCFGR_PLLI2SR_2
 ((
uöt32_t
)0x40000000)

	)

7763 #i‡
	`deföed
(
STM32F446xx
)

7764 
	#RCC_PLLSAICFGR_PLLSAIM
 ((
uöt32_t
)0x0000003F)

	)

7765 
	#RCC_PLLSAICFGR_PLLSAIM_0
 ((
uöt32_t
)0x00000001)

	)

7766 
	#RCC_PLLSAICFGR_PLLSAIM_1
 ((
uöt32_t
)0x00000002)

	)

7767 
	#RCC_PLLSAICFGR_PLLSAIM_2
 ((
uöt32_t
)0x00000004)

	)

7768 
	#RCC_PLLSAICFGR_PLLSAIM_3
 ((
uöt32_t
)0x00000008)

	)

7769 
	#RCC_PLLSAICFGR_PLLSAIM_4
 ((
uöt32_t
)0x00000010)

	)

7770 
	#RCC_PLLSAICFGR_PLLSAIM_5
 ((
uöt32_t
)0x00000020)

	)

7773 
	#RCC_PLLSAICFGR_PLLSAIN
 ((
uöt32_t
)0x00007FC0)

	)

7774 
	#RCC_PLLSAICFGR_PLLSAIN_0
 ((
uöt32_t
)0x00000040)

	)

7775 
	#RCC_PLLSAICFGR_PLLSAIN_1
 ((
uöt32_t
)0x00000080)

	)

7776 
	#RCC_PLLSAICFGR_PLLSAIN_2
 ((
uöt32_t
)0x00000100)

	)

7777 
	#RCC_PLLSAICFGR_PLLSAIN_3
 ((
uöt32_t
)0x00000200)

	)

7778 
	#RCC_PLLSAICFGR_PLLSAIN_4
 ((
uöt32_t
)0x00000400)

	)

7779 
	#RCC_PLLSAICFGR_PLLSAIN_5
 ((
uöt32_t
)0x00000800)

	)

7780 
	#RCC_PLLSAICFGR_PLLSAIN_6
 ((
uöt32_t
)0x00001000)

	)

7781 
	#RCC_PLLSAICFGR_PLLSAIN_7
 ((
uöt32_t
)0x00002000)

	)

7782 
	#RCC_PLLSAICFGR_PLLSAIN_8
 ((
uöt32_t
)0x00004000)

	)

7784 #i‡
	`deföed
(
STM32F446xx
)

7785 
	#RCC_PLLSAICFGR_PLLSAIP
 ((
uöt32_t
)0x00030000)

	)

7786 
	#RCC_PLLSAICFGR_PLLSAIP_0
 ((
uöt32_t
)0x00010000)

	)

7787 
	#RCC_PLLSAICFGR_PLLSAIP_1
 ((
uöt32_t
)0x00020000)

	)

7790 
	#RCC_PLLSAICFGR_PLLSAIQ
 ((
uöt32_t
)0x0F000000)

	)

7791 
	#RCC_PLLSAICFGR_PLLSAIQ_0
 ((
uöt32_t
)0x01000000)

	)

7792 
	#RCC_PLLSAICFGR_PLLSAIQ_1
 ((
uöt32_t
)0x02000000)

	)

7793 
	#RCC_PLLSAICFGR_PLLSAIQ_2
 ((
uöt32_t
)0x04000000)

	)

7794 
	#RCC_PLLSAICFGR_PLLSAIQ_3
 ((
uöt32_t
)0x08000000)

	)

7796 
	#RCC_PLLSAICFGR_PLLSAIR
 ((
uöt32_t
)0x70000000)

	)

7797 
	#RCC_PLLSAICFGR_PLLSAIR_0
 ((
uöt32_t
)0x10000000)

	)

7798 
	#RCC_PLLSAICFGR_PLLSAIR_1
 ((
uöt32_t
)0x20000000)

	)

7799 
	#RCC_PLLSAICFGR_PLLSAIR_2
 ((
uöt32_t
)0x40000000)

	)

7802 
	#RCC_DCKCFGR_PLLI2SDIVQ
 ((
uöt32_t
)0x0000001F)

	)

7803 
	#RCC_DCKCFGR_PLLSAIDIVQ
 ((
uöt32_t
)0x00001F00)

	)

7804 
	#RCC_DCKCFGR_PLLSAIDIVR
 ((
uöt32_t
)0x00030000)

	)

7806 
	#RCC_DCKCFGR_SAI1ASRC
 ((
uöt32_t
)0x00300000)

	)

7807 
	#RCC_DCKCFGR_SAI1ASRC_0
 ((
uöt32_t
)0x00100000)

	)

7808 
	#RCC_DCKCFGR_SAI1ASRC_1
 ((
uöt32_t
)0x00200000)

	)

7809 #i‡
	`deföed
(
STM32F446xx
)

7810 
	#RCC_DCKCFGR_SAI1SRC
 ((
uöt32_t
)0x00300000)

	)

7811 
	#RCC_DCKCFGR_SAI1SRC_0
 ((
uöt32_t
)0x00100000)

	)

7812 
	#RCC_DCKCFGR_SAI1SRC_1
 ((
uöt32_t
)0x00200000)

	)

7815 
	#RCC_DCKCFGR_SAI1BSRC
 ((
uöt32_t
)0x00C00000)

	)

7816 
	#RCC_DCKCFGR_SAI1BSRC_0
 ((
uöt32_t
)0x00400000)

	)

7817 
	#RCC_DCKCFGR_SAI1BSRC_1
 ((
uöt32_t
)0x00800000)

	)

7818 #i‡
	`deföed
(
STM32F446xx
)

7819 
	#RCC_DCKCFGR_SAI2SRC
 ((
uöt32_t
)0x00C00000)

	)

7820 
	#RCC_DCKCFGR_SAI2SRC_0
 ((
uöt32_t
)0x00400000)

	)

7821 
	#RCC_DCKCFGR_SAI2SRC_1
 ((
uöt32_t
)0x00800000)

	)

7824 
	#RCC_DCKCFGR_TIMPRE
 ((
uöt32_t
)0x01000000)

	)

7825 
	#RCC_DCKCFGR_CK48MSEL
 ((
uöt32_t
)0x08000000)

	)

7827 #i‡
	`deföed
(
STM32F446xx
)

7828 
	#RCC_DCKCFGR_I2S1SRC
 ((
uöt32_t
)0x06000000)

	)

7829 
	#RCC_DCKCFGR_I2S1SRC_0
 ((
uöt32_t
)0x02000000)

	)

7830 
	#RCC_DCKCFGR_I2S1SRC_1
 ((
uöt32_t
)0x04000000)

	)

7831 
	#RCC_DCKCFGR_I2S2SRC
 ((
uöt32_t
)0x18000000)

	)

7832 
	#RCC_DCKCFGR_I2S2SRC_0
 ((
uöt32_t
)0x08000000)

	)

7833 
	#RCC_DCKCFGR_I2S2SRC_1
 ((
uöt32_t
)0x10000000)

	)

7836 
	#RCC_CKGATENR_AHB2APB1_CKEN
 ((
uöt32_t
)0x00000001)

	)

7837 
	#RCC_CKGATENR_AHB2APB2_CKEN
 ((
uöt32_t
)0x00000002)

	)

7838 
	#RCC_CKGATENR_CM4DBG_CKEN
 ((
uöt32_t
)0x00000004)

	)

7839 
	#RCC_CKGATENR_SPARE_CKEN
 ((
uöt32_t
)0x00000008)

	)

7840 
	#RCC_CKGATENR_SRAM_CKEN
 ((
uöt32_t
)0x00000010)

	)

7841 
	#RCC_CKGATENR_FLITF_CKEN
 ((
uöt32_t
)0x00000020)

	)

7842 
	#RCC_CKGATENR_RCC_CKEN
 ((
uöt32_t
)0x00000040)

	)

7845 
	#RCC_DCKCFGR2_FMPI2C1SEL
 ((
uöt32_t
)0x00C00000)

	)

7846 
	#RCC_DCKCFGR2_FMPI2C1SEL_0
 ((
uöt32_t
)0x00400000)

	)

7847 
	#RCC_DCKCFGR2_FMPI2C1SEL_1
 ((
uöt32_t
)0x00800000)

	)

7848 
	#RCC_DCKCFGR2_CECSEL
 ((
uöt32_t
)0x04000000)

	)

7849 
	#RCC_DCKCFGR2_CK48MSEL
 ((
uöt32_t
)0x08000000)

	)

7850 
	#RCC_DCKCFGR2_SDIOSEL
 ((
uöt32_t
)0x10000000)

	)

7851 
	#RCC_DCKCFGR2_SPDIFRXSEL
 ((
uöt32_t
)0x20000000)

	)

7860 
	#RNG_CR_RNGEN
 ((
uöt32_t
)0x00000004)

	)

7861 
	#RNG_CR_IE
 ((
uöt32_t
)0x00000008)

	)

7864 
	#RNG_SR_DRDY
 ((
uöt32_t
)0x00000001)

	)

7865 
	#RNG_SR_CECS
 ((
uöt32_t
)0x00000002)

	)

7866 
	#RNG_SR_SECS
 ((
uöt32_t
)0x00000004)

	)

7867 
	#RNG_SR_CEIS
 ((
uöt32_t
)0x00000020)

	)

7868 
	#RNG_SR_SEIS
 ((
uöt32_t
)0x00000040)

	)

7876 
	#RTC_TR_PM
 ((
uöt32_t
)0x00400000)

	)

7877 
	#RTC_TR_HT
 ((
uöt32_t
)0x00300000)

	)

7878 
	#RTC_TR_HT_0
 ((
uöt32_t
)0x00100000)

	)

7879 
	#RTC_TR_HT_1
 ((
uöt32_t
)0x00200000)

	)

7880 
	#RTC_TR_HU
 ((
uöt32_t
)0x000F0000)

	)

7881 
	#RTC_TR_HU_0
 ((
uöt32_t
)0x00010000)

	)

7882 
	#RTC_TR_HU_1
 ((
uöt32_t
)0x00020000)

	)

7883 
	#RTC_TR_HU_2
 ((
uöt32_t
)0x00040000)

	)

7884 
	#RTC_TR_HU_3
 ((
uöt32_t
)0x00080000)

	)

7885 
	#RTC_TR_MNT
 ((
uöt32_t
)0x00007000)

	)

7886 
	#RTC_TR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

7887 
	#RTC_TR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

7888 
	#RTC_TR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

7889 
	#RTC_TR_MNU
 ((
uöt32_t
)0x00000F00)

	)

7890 
	#RTC_TR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

7891 
	#RTC_TR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

7892 
	#RTC_TR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

7893 
	#RTC_TR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

7894 
	#RTC_TR_ST
 ((
uöt32_t
)0x00000070)

	)

7895 
	#RTC_TR_ST_0
 ((
uöt32_t
)0x00000010)

	)

7896 
	#RTC_TR_ST_1
 ((
uöt32_t
)0x00000020)

	)

7897 
	#RTC_TR_ST_2
 ((
uöt32_t
)0x00000040)

	)

7898 
	#RTC_TR_SU
 ((
uöt32_t
)0x0000000F)

	)

7899 
	#RTC_TR_SU_0
 ((
uöt32_t
)0x00000001)

	)

7900 
	#RTC_TR_SU_1
 ((
uöt32_t
)0x00000002)

	)

7901 
	#RTC_TR_SU_2
 ((
uöt32_t
)0x00000004)

	)

7902 
	#RTC_TR_SU_3
 ((
uöt32_t
)0x00000008)

	)

7905 
	#RTC_DR_YT
 ((
uöt32_t
)0x00F00000)

	)

7906 
	#RTC_DR_YT_0
 ((
uöt32_t
)0x00100000)

	)

7907 
	#RTC_DR_YT_1
 ((
uöt32_t
)0x00200000)

	)

7908 
	#RTC_DR_YT_2
 ((
uöt32_t
)0x00400000)

	)

7909 
	#RTC_DR_YT_3
 ((
uöt32_t
)0x00800000)

	)

7910 
	#RTC_DR_YU
 ((
uöt32_t
)0x000F0000)

	)

7911 
	#RTC_DR_YU_0
 ((
uöt32_t
)0x00010000)

	)

7912 
	#RTC_DR_YU_1
 ((
uöt32_t
)0x00020000)

	)

7913 
	#RTC_DR_YU_2
 ((
uöt32_t
)0x00040000)

	)

7914 
	#RTC_DR_YU_3
 ((
uöt32_t
)0x00080000)

	)

7915 
	#RTC_DR_WDU
 ((
uöt32_t
)0x0000E000)

	)

7916 
	#RTC_DR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

7917 
	#RTC_DR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

7918 
	#RTC_DR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

7919 
	#RTC_DR_MT
 ((
uöt32_t
)0x00001000)

	)

7920 
	#RTC_DR_MU
 ((
uöt32_t
)0x00000F00)

	)

7921 
	#RTC_DR_MU_0
 ((
uöt32_t
)0x00000100)

	)

7922 
	#RTC_DR_MU_1
 ((
uöt32_t
)0x00000200)

	)

7923 
	#RTC_DR_MU_2
 ((
uöt32_t
)0x00000400)

	)

7924 
	#RTC_DR_MU_3
 ((
uöt32_t
)0x00000800)

	)

7925 
	#RTC_DR_DT
 ((
uöt32_t
)0x00000030)

	)

7926 
	#RTC_DR_DT_0
 ((
uöt32_t
)0x00000010)

	)

7927 
	#RTC_DR_DT_1
 ((
uöt32_t
)0x00000020)

	)

7928 
	#RTC_DR_DU
 ((
uöt32_t
)0x0000000F)

	)

7929 
	#RTC_DR_DU_0
 ((
uöt32_t
)0x00000001)

	)

7930 
	#RTC_DR_DU_1
 ((
uöt32_t
)0x00000002)

	)

7931 
	#RTC_DR_DU_2
 ((
uöt32_t
)0x00000004)

	)

7932 
	#RTC_DR_DU_3
 ((
uöt32_t
)0x00000008)

	)

7935 
	#RTC_CR_COE
 ((
uöt32_t
)0x00800000)

	)

7936 
	#RTC_CR_OSEL
 ((
uöt32_t
)0x00600000)

	)

7937 
	#RTC_CR_OSEL_0
 ((
uöt32_t
)0x00200000)

	)

7938 
	#RTC_CR_OSEL_1
 ((
uöt32_t
)0x00400000)

	)

7939 
	#RTC_CR_POL
 ((
uöt32_t
)0x00100000)

	)

7940 
	#RTC_CR_COSEL
 ((
uöt32_t
)0x00080000)

	)

7941 
	#RTC_CR_BCK
 ((
uöt32_t
)0x00040000)

	)

7942 
	#RTC_CR_SUB1H
 ((
uöt32_t
)0x00020000)

	)

7943 
	#RTC_CR_ADD1H
 ((
uöt32_t
)0x00010000)

	)

7944 
	#RTC_CR_TSIE
 ((
uöt32_t
)0x00008000)

	)

7945 
	#RTC_CR_WUTIE
 ((
uöt32_t
)0x00004000)

	)

7946 
	#RTC_CR_ALRBIE
 ((
uöt32_t
)0x00002000)

	)

7947 
	#RTC_CR_ALRAIE
 ((
uöt32_t
)0x00001000)

	)

7948 
	#RTC_CR_TSE
 ((
uöt32_t
)0x00000800)

	)

7949 
	#RTC_CR_WUTE
 ((
uöt32_t
)0x00000400)

	)

7950 
	#RTC_CR_ALRBE
 ((
uöt32_t
)0x00000200)

	)

7951 
	#RTC_CR_ALRAE
 ((
uöt32_t
)0x00000100)

	)

7952 
	#RTC_CR_DCE
 ((
uöt32_t
)0x00000080)

	)

7953 
	#RTC_CR_FMT
 ((
uöt32_t
)0x00000040)

	)

7954 
	#RTC_CR_BYPSHAD
 ((
uöt32_t
)0x00000020)

	)

7955 
	#RTC_CR_REFCKON
 ((
uöt32_t
)0x00000010)

	)

7956 
	#RTC_CR_TSEDGE
 ((
uöt32_t
)0x00000008)

	)

7957 
	#RTC_CR_WUCKSEL
 ((
uöt32_t
)0x00000007)

	)

7958 
	#RTC_CR_WUCKSEL_0
 ((
uöt32_t
)0x00000001)

	)

7959 
	#RTC_CR_WUCKSEL_1
 ((
uöt32_t
)0x00000002)

	)

7960 
	#RTC_CR_WUCKSEL_2
 ((
uöt32_t
)0x00000004)

	)

7963 
	#RTC_ISR_RECALPF
 ((
uöt32_t
)0x00010000)

	)

7964 
	#RTC_ISR_TAMP1F
 ((
uöt32_t
)0x00002000)

	)

7965 
	#RTC_ISR_TSOVF
 ((
uöt32_t
)0x00001000)

	)

7966 
	#RTC_ISR_TSF
 ((
uöt32_t
)0x00000800)

	)

7967 
	#RTC_ISR_WUTF
 ((
uöt32_t
)0x00000400)

	)

7968 
	#RTC_ISR_ALRBF
 ((
uöt32_t
)0x00000200)

	)

7969 
	#RTC_ISR_ALRAF
 ((
uöt32_t
)0x00000100)

	)

7970 
	#RTC_ISR_INIT
 ((
uöt32_t
)0x00000080)

	)

7971 
	#RTC_ISR_INITF
 ((
uöt32_t
)0x00000040)

	)

7972 
	#RTC_ISR_RSF
 ((
uöt32_t
)0x00000020)

	)

7973 
	#RTC_ISR_INITS
 ((
uöt32_t
)0x00000010)

	)

7974 
	#RTC_ISR_SHPF
 ((
uöt32_t
)0x00000008)

	)

7975 
	#RTC_ISR_WUTWF
 ((
uöt32_t
)0x00000004)

	)

7976 
	#RTC_ISR_ALRBWF
 ((
uöt32_t
)0x00000002)

	)

7977 
	#RTC_ISR_ALRAWF
 ((
uöt32_t
)0x00000001)

	)

7980 
	#RTC_PRER_PREDIV_A
 ((
uöt32_t
)0x007F0000)

	)

7981 
	#RTC_PRER_PREDIV_S
 ((
uöt32_t
)0x00001FFF)

	)

7984 
	#RTC_WUTR_WUT
 ((
uöt32_t
)0x0000FFFF)

	)

7987 
	#RTC_CALIBR_DCS
 ((
uöt32_t
)0x00000080)

	)

7988 
	#RTC_CALIBR_DC
 ((
uöt32_t
)0x0000001F)

	)

7991 
	#RTC_ALRMAR_MSK4
 ((
uöt32_t
)0x80000000)

	)

7992 
	#RTC_ALRMAR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

7993 
	#RTC_ALRMAR_DT
 ((
uöt32_t
)0x30000000)

	)

7994 
	#RTC_ALRMAR_DT_0
 ((
uöt32_t
)0x10000000)

	)

7995 
	#RTC_ALRMAR_DT_1
 ((
uöt32_t
)0x20000000)

	)

7996 
	#RTC_ALRMAR_DU
 ((
uöt32_t
)0x0F000000)

	)

7997 
	#RTC_ALRMAR_DU_0
 ((
uöt32_t
)0x01000000)

	)

7998 
	#RTC_ALRMAR_DU_1
 ((
uöt32_t
)0x02000000)

	)

7999 
	#RTC_ALRMAR_DU_2
 ((
uöt32_t
)0x04000000)

	)

8000 
	#RTC_ALRMAR_DU_3
 ((
uöt32_t
)0x08000000)

	)

8001 
	#RTC_ALRMAR_MSK3
 ((
uöt32_t
)0x00800000)

	)

8002 
	#RTC_ALRMAR_PM
 ((
uöt32_t
)0x00400000)

	)

8003 
	#RTC_ALRMAR_HT
 ((
uöt32_t
)0x00300000)

	)

8004 
	#RTC_ALRMAR_HT_0
 ((
uöt32_t
)0x00100000)

	)

8005 
	#RTC_ALRMAR_HT_1
 ((
uöt32_t
)0x00200000)

	)

8006 
	#RTC_ALRMAR_HU
 ((
uöt32_t
)0x000F0000)

	)

8007 
	#RTC_ALRMAR_HU_0
 ((
uöt32_t
)0x00010000)

	)

8008 
	#RTC_ALRMAR_HU_1
 ((
uöt32_t
)0x00020000)

	)

8009 
	#RTC_ALRMAR_HU_2
 ((
uöt32_t
)0x00040000)

	)

8010 
	#RTC_ALRMAR_HU_3
 ((
uöt32_t
)0x00080000)

	)

8011 
	#RTC_ALRMAR_MSK2
 ((
uöt32_t
)0x00008000)

	)

8012 
	#RTC_ALRMAR_MNT
 ((
uöt32_t
)0x00007000)

	)

8013 
	#RTC_ALRMAR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

8014 
	#RTC_ALRMAR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

8015 
	#RTC_ALRMAR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

8016 
	#RTC_ALRMAR_MNU
 ((
uöt32_t
)0x00000F00)

	)

8017 
	#RTC_ALRMAR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

8018 
	#RTC_ALRMAR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

8019 
	#RTC_ALRMAR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

8020 
	#RTC_ALRMAR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

8021 
	#RTC_ALRMAR_MSK1
 ((
uöt32_t
)0x00000080)

	)

8022 
	#RTC_ALRMAR_ST
 ((
uöt32_t
)0x00000070)

	)

8023 
	#RTC_ALRMAR_ST_0
 ((
uöt32_t
)0x00000010)

	)

8024 
	#RTC_ALRMAR_ST_1
 ((
uöt32_t
)0x00000020)

	)

8025 
	#RTC_ALRMAR_ST_2
 ((
uöt32_t
)0x00000040)

	)

8026 
	#RTC_ALRMAR_SU
 ((
uöt32_t
)0x0000000F)

	)

8027 
	#RTC_ALRMAR_SU_0
 ((
uöt32_t
)0x00000001)

	)

8028 
	#RTC_ALRMAR_SU_1
 ((
uöt32_t
)0x00000002)

	)

8029 
	#RTC_ALRMAR_SU_2
 ((
uöt32_t
)0x00000004)

	)

8030 
	#RTC_ALRMAR_SU_3
 ((
uöt32_t
)0x00000008)

	)

8033 
	#RTC_ALRMBR_MSK4
 ((
uöt32_t
)0x80000000)

	)

8034 
	#RTC_ALRMBR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

8035 
	#RTC_ALRMBR_DT
 ((
uöt32_t
)0x30000000)

	)

8036 
	#RTC_ALRMBR_DT_0
 ((
uöt32_t
)0x10000000)

	)

8037 
	#RTC_ALRMBR_DT_1
 ((
uöt32_t
)0x20000000)

	)

8038 
	#RTC_ALRMBR_DU
 ((
uöt32_t
)0x0F000000)

	)

8039 
	#RTC_ALRMBR_DU_0
 ((
uöt32_t
)0x01000000)

	)

8040 
	#RTC_ALRMBR_DU_1
 ((
uöt32_t
)0x02000000)

	)

8041 
	#RTC_ALRMBR_DU_2
 ((
uöt32_t
)0x04000000)

	)

8042 
	#RTC_ALRMBR_DU_3
 ((
uöt32_t
)0x08000000)

	)

8043 
	#RTC_ALRMBR_MSK3
 ((
uöt32_t
)0x00800000)

	)

8044 
	#RTC_ALRMBR_PM
 ((
uöt32_t
)0x00400000)

	)

8045 
	#RTC_ALRMBR_HT
 ((
uöt32_t
)0x00300000)

	)

8046 
	#RTC_ALRMBR_HT_0
 ((
uöt32_t
)0x00100000)

	)

8047 
	#RTC_ALRMBR_HT_1
 ((
uöt32_t
)0x00200000)

	)

8048 
	#RTC_ALRMBR_HU
 ((
uöt32_t
)0x000F0000)

	)

8049 
	#RTC_ALRMBR_HU_0
 ((
uöt32_t
)0x00010000)

	)

8050 
	#RTC_ALRMBR_HU_1
 ((
uöt32_t
)0x00020000)

	)

8051 
	#RTC_ALRMBR_HU_2
 ((
uöt32_t
)0x00040000)

	)

8052 
	#RTC_ALRMBR_HU_3
 ((
uöt32_t
)0x00080000)

	)

8053 
	#RTC_ALRMBR_MSK2
 ((
uöt32_t
)0x00008000)

	)

8054 
	#RTC_ALRMBR_MNT
 ((
uöt32_t
)0x00007000)

	)

8055 
	#RTC_ALRMBR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

8056 
	#RTC_ALRMBR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

8057 
	#RTC_ALRMBR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

8058 
	#RTC_ALRMBR_MNU
 ((
uöt32_t
)0x00000F00)

	)

8059 
	#RTC_ALRMBR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

8060 
	#RTC_ALRMBR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

8061 
	#RTC_ALRMBR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

8062 
	#RTC_ALRMBR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

8063 
	#RTC_ALRMBR_MSK1
 ((
uöt32_t
)0x00000080)

	)

8064 
	#RTC_ALRMBR_ST
 ((
uöt32_t
)0x00000070)

	)

8065 
	#RTC_ALRMBR_ST_0
 ((
uöt32_t
)0x00000010)

	)

8066 
	#RTC_ALRMBR_ST_1
 ((
uöt32_t
)0x00000020)

	)

8067 
	#RTC_ALRMBR_ST_2
 ((
uöt32_t
)0x00000040)

	)

8068 
	#RTC_ALRMBR_SU
 ((
uöt32_t
)0x0000000F)

	)

8069 
	#RTC_ALRMBR_SU_0
 ((
uöt32_t
)0x00000001)

	)

8070 
	#RTC_ALRMBR_SU_1
 ((
uöt32_t
)0x00000002)

	)

8071 
	#RTC_ALRMBR_SU_2
 ((
uöt32_t
)0x00000004)

	)

8072 
	#RTC_ALRMBR_SU_3
 ((
uöt32_t
)0x00000008)

	)

8075 
	#RTC_WPR_KEY
 ((
uöt32_t
)0x000000FF)

	)

8078 
	#RTC_SSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

8081 
	#RTC_SHIFTR_SUBFS
 ((
uöt32_t
)0x00007FFF)

	)

8082 
	#RTC_SHIFTR_ADD1S
 ((
uöt32_t
)0x80000000)

	)

8085 
	#RTC_TSTR_PM
 ((
uöt32_t
)0x00400000)

	)

8086 
	#RTC_TSTR_HT
 ((
uöt32_t
)0x00300000)

	)

8087 
	#RTC_TSTR_HT_0
 ((
uöt32_t
)0x00100000)

	)

8088 
	#RTC_TSTR_HT_1
 ((
uöt32_t
)0x00200000)

	)

8089 
	#RTC_TSTR_HU
 ((
uöt32_t
)0x000F0000)

	)

8090 
	#RTC_TSTR_HU_0
 ((
uöt32_t
)0x00010000)

	)

8091 
	#RTC_TSTR_HU_1
 ((
uöt32_t
)0x00020000)

	)

8092 
	#RTC_TSTR_HU_2
 ((
uöt32_t
)0x00040000)

	)

8093 
	#RTC_TSTR_HU_3
 ((
uöt32_t
)0x00080000)

	)

8094 
	#RTC_TSTR_MNT
 ((
uöt32_t
)0x00007000)

	)

8095 
	#RTC_TSTR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

8096 
	#RTC_TSTR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

8097 
	#RTC_TSTR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

8098 
	#RTC_TSTR_MNU
 ((
uöt32_t
)0x00000F00)

	)

8099 
	#RTC_TSTR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

8100 
	#RTC_TSTR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

8101 
	#RTC_TSTR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

8102 
	#RTC_TSTR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

8103 
	#RTC_TSTR_ST
 ((
uöt32_t
)0x00000070)

	)

8104 
	#RTC_TSTR_ST_0
 ((
uöt32_t
)0x00000010)

	)

8105 
	#RTC_TSTR_ST_1
 ((
uöt32_t
)0x00000020)

	)

8106 
	#RTC_TSTR_ST_2
 ((
uöt32_t
)0x00000040)

	)

8107 
	#RTC_TSTR_SU
 ((
uöt32_t
)0x0000000F)

	)

8108 
	#RTC_TSTR_SU_0
 ((
uöt32_t
)0x00000001)

	)

8109 
	#RTC_TSTR_SU_1
 ((
uöt32_t
)0x00000002)

	)

8110 
	#RTC_TSTR_SU_2
 ((
uöt32_t
)0x00000004)

	)

8111 
	#RTC_TSTR_SU_3
 ((
uöt32_t
)0x00000008)

	)

8114 
	#RTC_TSDR_WDU
 ((
uöt32_t
)0x0000E000)

	)

8115 
	#RTC_TSDR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

8116 
	#RTC_TSDR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

8117 
	#RTC_TSDR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

8118 
	#RTC_TSDR_MT
 ((
uöt32_t
)0x00001000)

	)

8119 
	#RTC_TSDR_MU
 ((
uöt32_t
)0x00000F00)

	)

8120 
	#RTC_TSDR_MU_0
 ((
uöt32_t
)0x00000100)

	)

8121 
	#RTC_TSDR_MU_1
 ((
uöt32_t
)0x00000200)

	)

8122 
	#RTC_TSDR_MU_2
 ((
uöt32_t
)0x00000400)

	)

8123 
	#RTC_TSDR_MU_3
 ((
uöt32_t
)0x00000800)

	)

8124 
	#RTC_TSDR_DT
 ((
uöt32_t
)0x00000030)

	)

8125 
	#RTC_TSDR_DT_0
 ((
uöt32_t
)0x00000010)

	)

8126 
	#RTC_TSDR_DT_1
 ((
uöt32_t
)0x00000020)

	)

8127 
	#RTC_TSDR_DU
 ((
uöt32_t
)0x0000000F)

	)

8128 
	#RTC_TSDR_DU_0
 ((
uöt32_t
)0x00000001)

	)

8129 
	#RTC_TSDR_DU_1
 ((
uöt32_t
)0x00000002)

	)

8130 
	#RTC_TSDR_DU_2
 ((
uöt32_t
)0x00000004)

	)

8131 
	#RTC_TSDR_DU_3
 ((
uöt32_t
)0x00000008)

	)

8134 
	#RTC_TSSSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

8137 
	#RTC_CALR_CALP
 ((
uöt32_t
)0x00008000)

	)

8138 
	#RTC_CALR_CALW8
 ((
uöt32_t
)0x00004000)

	)

8139 
	#RTC_CALR_CALW16
 ((
uöt32_t
)0x00002000)

	)

8140 
	#RTC_CALR_CALM
 ((
uöt32_t
)0x000001FF)

	)

8141 
	#RTC_CALR_CALM_0
 ((
uöt32_t
)0x00000001)

	)

8142 
	#RTC_CALR_CALM_1
 ((
uöt32_t
)0x00000002)

	)

8143 
	#RTC_CALR_CALM_2
 ((
uöt32_t
)0x00000004)

	)

8144 
	#RTC_CALR_CALM_3
 ((
uöt32_t
)0x00000008)

	)

8145 
	#RTC_CALR_CALM_4
 ((
uöt32_t
)0x00000010)

	)

8146 
	#RTC_CALR_CALM_5
 ((
uöt32_t
)0x00000020)

	)

8147 
	#RTC_CALR_CALM_6
 ((
uöt32_t
)0x00000040)

	)

8148 
	#RTC_CALR_CALM_7
 ((
uöt32_t
)0x00000080)

	)

8149 
	#RTC_CALR_CALM_8
 ((
uöt32_t
)0x00000100)

	)

8152 
	#RTC_TAFCR_ALARMOUTTYPE
 ((
uöt32_t
)0x00040000)

	)

8153 
	#RTC_TAFCR_TSINSEL
 ((
uöt32_t
)0x00020000)

	)

8154 
	#RTC_TAFCR_TAMPINSEL
 ((
uöt32_t
)0x00010000)

	)

8155 
	#RTC_TAFCR_TAMPPUDIS
 ((
uöt32_t
)0x00008000)

	)

8156 
	#RTC_TAFCR_TAMPPRCH
 ((
uöt32_t
)0x00006000)

	)

8157 
	#RTC_TAFCR_TAMPPRCH_0
 ((
uöt32_t
)0x00002000)

	)

8158 
	#RTC_TAFCR_TAMPPRCH_1
 ((
uöt32_t
)0x00004000)

	)

8159 
	#RTC_TAFCR_TAMPFLT
 ((
uöt32_t
)0x00001800)

	)

8160 
	#RTC_TAFCR_TAMPFLT_0
 ((
uöt32_t
)0x00000800)

	)

8161 
	#RTC_TAFCR_TAMPFLT_1
 ((
uöt32_t
)0x00001000)

	)

8162 
	#RTC_TAFCR_TAMPFREQ
 ((
uöt32_t
)0x00000700)

	)

8163 
	#RTC_TAFCR_TAMPFREQ_0
 ((
uöt32_t
)0x00000100)

	)

8164 
	#RTC_TAFCR_TAMPFREQ_1
 ((
uöt32_t
)0x00000200)

	)

8165 
	#RTC_TAFCR_TAMPFREQ_2
 ((
uöt32_t
)0x00000400)

	)

8166 
	#RTC_TAFCR_TAMPTS
 ((
uöt32_t
)0x00000080)

	)

8167 
	#RTC_TAFCR_TAMPIE
 ((
uöt32_t
)0x00000004)

	)

8168 
	#RTC_TAFCR_TAMP1TRG
 ((
uöt32_t
)0x00000002)

	)

8169 
	#RTC_TAFCR_TAMP1E
 ((
uöt32_t
)0x00000001)

	)

8172 
	#RTC_ALRMASSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

8173 
	#RTC_ALRMASSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

8174 
	#RTC_ALRMASSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

8175 
	#RTC_ALRMASSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

8176 
	#RTC_ALRMASSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

8177 
	#RTC_ALRMASSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

8180 
	#RTC_ALRMBSSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

8181 
	#RTC_ALRMBSSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

8182 
	#RTC_ALRMBSSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

8183 
	#RTC_ALRMBSSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

8184 
	#RTC_ALRMBSSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

8185 
	#RTC_ALRMBSSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

8188 
	#RTC_BKP0R
 ((
uöt32_t
)0xFFFFFFFF)

	)

8191 
	#RTC_BKP1R
 ((
uöt32_t
)0xFFFFFFFF)

	)

8194 
	#RTC_BKP2R
 ((
uöt32_t
)0xFFFFFFFF)

	)

8197 
	#RTC_BKP3R
 ((
uöt32_t
)0xFFFFFFFF)

	)

8200 
	#RTC_BKP4R
 ((
uöt32_t
)0xFFFFFFFF)

	)

8203 
	#RTC_BKP5R
 ((
uöt32_t
)0xFFFFFFFF)

	)

8206 
	#RTC_BKP6R
 ((
uöt32_t
)0xFFFFFFFF)

	)

8209 
	#RTC_BKP7R
 ((
uöt32_t
)0xFFFFFFFF)

	)

8212 
	#RTC_BKP8R
 ((
uöt32_t
)0xFFFFFFFF)

	)

8215 
	#RTC_BKP9R
 ((
uöt32_t
)0xFFFFFFFF)

	)

8218 
	#RTC_BKP10R
 ((
uöt32_t
)0xFFFFFFFF)

	)

8221 
	#RTC_BKP11R
 ((
uöt32_t
)0xFFFFFFFF)

	)

8224 
	#RTC_BKP12R
 ((
uöt32_t
)0xFFFFFFFF)

	)

8227 
	#RTC_BKP13R
 ((
uöt32_t
)0xFFFFFFFF)

	)

8230 
	#RTC_BKP14R
 ((
uöt32_t
)0xFFFFFFFF)

	)

8233 
	#RTC_BKP15R
 ((
uöt32_t
)0xFFFFFFFF)

	)

8236 
	#RTC_BKP16R
 ((
uöt32_t
)0xFFFFFFFF)

	)

8239 
	#RTC_BKP17R
 ((
uöt32_t
)0xFFFFFFFF)

	)

8242 
	#RTC_BKP18R
 ((
uöt32_t
)0xFFFFFFFF)

	)

8245 
	#RTC_BKP19R
 ((
uöt32_t
)0xFFFFFFFF)

	)

8253 
	#SAI_GCR_SYNCIN
 ((
uöt32_t
)0x00000003Ë

	)

8254 
	#SAI_GCR_SYNCIN_0
 ((
uöt32_t
)0x00000001Ë

	)

8255 
	#SAI_GCR_SYNCIN_1
 ((
uöt32_t
)0x00000002Ë

	)

8257 
	#SAI_GCR_SYNCOUT
 ((
uöt32_t
)0x00000030Ë

	)

8258 
	#SAI_GCR_SYNCOUT_0
 ((
uöt32_t
)0x00000010Ë

	)

8259 
	#SAI_GCR_SYNCOUT_1
 ((
uöt32_t
)0x00000020Ë

	)

8262 
	#SAI_xCR1_MODE
 ((
uöt32_t
)0x00000003Ë

	)

8263 
	#SAI_xCR1_MODE_0
 ((
uöt32_t
)0x00000001Ë

	)

8264 
	#SAI_xCR1_MODE_1
 ((
uöt32_t
)0x00000002Ë

	)

8266 
	#SAI_xCR1_PRTCFG
 ((
uöt32_t
)0x0000000CË

	)

8267 
	#SAI_xCR1_PRTCFG_0
 ((
uöt32_t
)0x00000004Ë

	)

8268 
	#SAI_xCR1_PRTCFG_1
 ((
uöt32_t
)0x00000008Ë

	)

8270 
	#SAI_xCR1_DS
 ((
uöt32_t
)0x000000E0Ë

	)

8271 
	#SAI_xCR1_DS_0
 ((
uöt32_t
)0x00000020Ë

	)

8272 
	#SAI_xCR1_DS_1
 ((
uöt32_t
)0x00000040Ë

	)

8273 
	#SAI_xCR1_DS_2
 ((
uöt32_t
)0x00000080Ë

	)

8275 
	#SAI_xCR1_LSBFIRST
 ((
uöt32_t
)0x00000100Ë

	)

8276 
	#SAI_xCR1_CKSTR
 ((
uöt32_t
)0x00000200Ë

	)

8278 
	#SAI_xCR1_SYNCEN
 ((
uöt32_t
)0x00000C00Ë

	)

8279 
	#SAI_xCR1_SYNCEN_0
 ((
uöt32_t
)0x00000400Ë

	)

8280 
	#SAI_xCR1_SYNCEN_1
 ((
uöt32_t
)0x00000800Ë

	)

8282 
	#SAI_xCR1_MONO
 ((
uöt32_t
)0x00001000Ë

	)

8283 
	#SAI_xCR1_OUTDRIV
 ((
uöt32_t
)0x00002000Ë

	)

8284 
	#SAI_xCR1_SAIEN
 ((
uöt32_t
)0x00010000Ë

	)

8285 
	#SAI_xCR1_DMAEN
 ((
uöt32_t
)0x00020000Ë

	)

8286 
	#SAI_xCR1_NODIV
 ((
uöt32_t
)0x00080000Ë

	)

8288 
	#SAI_xCR1_MCKDIV
 ((
uöt32_t
)0x00780000Ë

	)

8289 
	#SAI_xCR1_MCKDIV_0
 ((
uöt32_t
)0x00080000Ë

	)

8290 
	#SAI_xCR1_MCKDIV_1
 ((
uöt32_t
)0x00100000Ë

	)

8291 
	#SAI_xCR1_MCKDIV_2
 ((
uöt32_t
)0x00200000Ë

	)

8292 
	#SAI_xCR1_MCKDIV_3
 ((
uöt32_t
)0x00400000Ë

	)

8295 
	#SAI_xCR2_FTH
 ((
uöt32_t
)0x00000003Ë

	)

8296 
	#SAI_xCR2_FTH_0
 ((
uöt32_t
)0x00000001Ë

	)

8297 
	#SAI_xCR2_FTH_1
 ((
uöt32_t
)0x00000002Ë

	)

8299 
	#SAI_xCR2_FFLUSH
 ((
uöt32_t
)0x00000008Ë

	)

8300 
	#SAI_xCR2_TRIS
 ((
uöt32_t
)0x00000010Ë

	)

8301 
	#SAI_xCR2_MUTE
 ((
uöt32_t
)0x00000020Ë

	)

8302 
	#SAI_xCR2_MUTEVAL
 ((
uöt32_t
)0x00000040Ë

	)

8304 
	#SAI_xCR2_MUTECNT
 ((
uöt32_t
)0x00001F80Ë

	)

8305 
	#SAI_xCR2_MUTECNT_0
 ((
uöt32_t
)0x00000080Ë

	)

8306 
	#SAI_xCR2_MUTECNT_1
 ((
uöt32_t
)0x00000100Ë

	)

8307 
	#SAI_xCR2_MUTECNT_2
 ((
uöt32_t
)0x00000200Ë

	)

8308 
	#SAI_xCR2_MUTECNT_3
 ((
uöt32_t
)0x00000400Ë

	)

8309 
	#SAI_xCR2_MUTECNT_4
 ((
uöt32_t
)0x00000800Ë

	)

8310 
	#SAI_xCR2_MUTECNT_5
 ((
uöt32_t
)0x00001000Ë

	)

8312 
	#SAI_xCR2_CPL
 ((
uöt32_t
)0x00080000Ë

	)

8314 
	#SAI_xCR2_COMP
 ((
uöt32_t
)0x0000C000Ë

	)

8315 
	#SAI_xCR2_COMP_0
 ((
uöt32_t
)0x00004000Ë

	)

8316 
	#SAI_xCR2_COMP_1
 ((
uöt32_t
)0x00008000Ë

	)

8319 
	#SAI_xFRCR_FRL
 ((
uöt32_t
)0x000000FFË

	)

8320 
	#SAI_xFRCR_FRL_0
 ((
uöt32_t
)0x00000001Ë

	)

8321 
	#SAI_xFRCR_FRL_1
 ((
uöt32_t
)0x00000002Ë

	)

8322 
	#SAI_xFRCR_FRL_2
 ((
uöt32_t
)0x00000004Ë

	)

8323 
	#SAI_xFRCR_FRL_3
 ((
uöt32_t
)0x00000008Ë

	)

8324 
	#SAI_xFRCR_FRL_4
 ((
uöt32_t
)0x00000010Ë

	)

8325 
	#SAI_xFRCR_FRL_5
 ((
uöt32_t
)0x00000020Ë

	)

8326 
	#SAI_xFRCR_FRL_6
 ((
uöt32_t
)0x00000040Ë

	)

8327 
	#SAI_xFRCR_FRL_7
 ((
uöt32_t
)0x00000080Ë

	)

8329 
	#SAI_xFRCR_FSALL
 ((
uöt32_t
)0x00007F00Ë

	)

8330 
	#SAI_xFRCR_FSALL_0
 ((
uöt32_t
)0x00000100Ë

	)

8331 
	#SAI_xFRCR_FSALL_1
 ((
uöt32_t
)0x00000200Ë

	)

8332 
	#SAI_xFRCR_FSALL_2
 ((
uöt32_t
)0x00000400Ë

	)

8333 
	#SAI_xFRCR_FSALL_3
 ((
uöt32_t
)0x00000800Ë

	)

8334 
	#SAI_xFRCR_FSALL_4
 ((
uöt32_t
)0x00001000Ë

	)

8335 
	#SAI_xFRCR_FSALL_5
 ((
uöt32_t
)0x00002000Ë

	)

8336 
	#SAI_xFRCR_FSALL_6
 ((
uöt32_t
)0x00004000Ë

	)

8338 
	#SAI_xFRCR_FSDEF
 ((
uöt32_t
)0x00010000Ë

	)

8339 
	#SAI_xFRCR_FSPO
 ((
uöt32_t
)0x00020000Ë

	)

8340 
	#SAI_xFRCR_FSOFF
 ((
uöt32_t
)0x00040000Ë

	)

8343 
	#SAI_xSLOTR_FBOFF
 ((
uöt32_t
)0x0000001FË

	)

8344 
	#SAI_xSLOTR_FBOFF_0
 ((
uöt32_t
)0x00000001Ë

	)

8345 
	#SAI_xSLOTR_FBOFF_1
 ((
uöt32_t
)0x00000002Ë

	)

8346 
	#SAI_xSLOTR_FBOFF_2
 ((
uöt32_t
)0x00000004Ë

	)

8347 
	#SAI_xSLOTR_FBOFF_3
 ((
uöt32_t
)0x00000008Ë

	)

8348 
	#SAI_xSLOTR_FBOFF_4
 ((
uöt32_t
)0x00000010Ë

	)

8350 
	#SAI_xSLOTR_SLOTSZ
 ((
uöt32_t
)0x000000C0Ë

	)

8351 
	#SAI_xSLOTR_SLOTSZ_0
 ((
uöt32_t
)0x00000040Ë

	)

8352 
	#SAI_xSLOTR_SLOTSZ_1
 ((
uöt32_t
)0x00000080Ë

	)

8354 
	#SAI_xSLOTR_NBSLOT
 ((
uöt32_t
)0x00000F00Ë

	)

8355 
	#SAI_xSLOTR_NBSLOT_0
 ((
uöt32_t
)0x00000100Ë

	)

8356 
	#SAI_xSLOTR_NBSLOT_1
 ((
uöt32_t
)0x00000200Ë

	)

8357 
	#SAI_xSLOTR_NBSLOT_2
 ((
uöt32_t
)0x00000400Ë

	)

8358 
	#SAI_xSLOTR_NBSLOT_3
 ((
uöt32_t
)0x00000800Ë

	)

8360 
	#SAI_xSLOTR_SLOTEN
 ((
uöt32_t
)0xFFFF0000Ë

	)

8363 
	#SAI_xIMR_OVRUDRIE
 ((
uöt32_t
)0x00000001Ë

	)

8364 
	#SAI_xIMR_MUTEDETIE
 ((
uöt32_t
)0x00000002Ë

	)

8365 
	#SAI_xIMR_WCKCFGIE
 ((
uöt32_t
)0x00000004Ë

	)

8366 
	#SAI_xIMR_FREQIE
 ((
uöt32_t
)0x00000008Ë

	)

8367 
	#SAI_xIMR_CNRDYIE
 ((
uöt32_t
)0x00000010Ë

	)

8368 
	#SAI_xIMR_AFSDETIE
 ((
uöt32_t
)0x00000020Ë

	)

8369 
	#SAI_xIMR_LFSDETIE
 ((
uöt32_t
)0x00000040Ë

	)

8372 
	#SAI_xSR_OVRUDR
 ((
uöt32_t
)0x00000001Ë

	)

8373 
	#SAI_xSR_MUTEDET
 ((
uöt32_t
)0x00000002Ë

	)

8374 
	#SAI_xSR_WCKCFG
 ((
uöt32_t
)0x00000004Ë

	)

8375 
	#SAI_xSR_FREQ
 ((
uöt32_t
)0x00000008Ë

	)

8376 
	#SAI_xSR_CNRDY
 ((
uöt32_t
)0x00000010Ë

	)

8377 
	#SAI_xSR_AFSDET
 ((
uöt32_t
)0x00000020Ë

	)

8378 
	#SAI_xSR_LFSDET
 ((
uöt32_t
)0x00000040Ë

	)

8380 
	#SAI_xSR_FLVL
 ((
uöt32_t
)0x00070000Ë

	)

8381 
	#SAI_xSR_FLVL_0
 ((
uöt32_t
)0x00010000Ë

	)

8382 
	#SAI_xSR_FLVL_1
 ((
uöt32_t
)0x00020000Ë

	)

8383 
	#SAI_xSR_FLVL_2
 ((
uöt32_t
)0x00030000Ë

	)

8386 
	#SAI_xCLRFR_COVRUDR
 ((
uöt32_t
)0x00000001Ë

	)

8387 
	#SAI_xCLRFR_CMUTEDET
 ((
uöt32_t
)0x00000002Ë

	)

8388 
	#SAI_xCLRFR_CWCKCFG
 ((
uöt32_t
)0x00000004Ë

	)

8389 
	#SAI_xCLRFR_CFREQ
 ((
uöt32_t
)0x00000008Ë

	)

8390 
	#SAI_xCLRFR_CCNRDY
 ((
uöt32_t
)0x00000010Ë

	)

8391 
	#SAI_xCLRFR_CAFSDET
 ((
uöt32_t
)0x00000020Ë

	)

8392 
	#SAI_xCLRFR_CLFSDET
 ((
uöt32_t
)0x00000040Ë

	)

8395 
	#SAI_xDR_DATA
 ((
uöt32_t
)0xFFFFFFFF)

	)

8397 #i‡
	`deföed
(
STM32F446xx
)

8404 
	#SPDIFRX_CR_SPDIFEN
 ((
uöt32_t
)0x00000003Ë

	)

8405 
	#SPDIFRX_CR_RXDMAEN
 ((
uöt32_t
)0x00000004Ë

	)

8406 
	#SPDIFRX_CR_RXSTEO
 ((
uöt32_t
)0x00000008Ë

	)

8407 
	#SPDIFRX_CR_DRFMT
 ((
uöt32_t
)0x00000030Ë

	)

8408 
	#SPDIFRX_CR_PMSK
 ((
uöt32_t
)0x00000040Ë

	)

8409 
	#SPDIFRX_CR_VMSK
 ((
uöt32_t
)0x00000080Ë

	)

8410 
	#SPDIFRX_CR_CUMSK
 ((
uöt32_t
)0x00000100Ë

	)

8411 
	#SPDIFRX_CR_PTMSK
 ((
uöt32_t
)0x00000200Ë

	)

8412 
	#SPDIFRX_CR_CBDMAEN
 ((
uöt32_t
)0x00000400Ë

	)

8413 
	#SPDIFRX_CR_CHSEL
 ((
uöt32_t
)0x00000800Ë

	)

8414 
	#SPDIFRX_CR_NBTR
 ((
uöt32_t
)0x00003000Ë

	)

8415 
	#SPDIFRX_CR_WFA
 ((
uöt32_t
)0x00004000Ë

	)

8416 
	#SPDIFRX_CR_INSEL
 ((
uöt32_t
)0x00070000Ë

	)

8419 
	#SPDIFRX_IMR_RXNEIE
 ((
uöt32_t
)0x00000001Ë

	)

8420 
	#SPDIFRX_IMR_CSRNEIE
 ((
uöt32_t
)0x00000002Ë

	)

8421 
	#SPDIFRX_IMR_PERRIE
 ((
uöt32_t
)0x00000004Ë

	)

8422 
	#SPDIFRX_IMR_OVRIE
 ((
uöt32_t
)0x00000008Ë

	)

8423 
	#SPDIFRX_IMR_SBLKIE
 ((
uöt32_t
)0x00000010Ë

	)

8424 
	#SPDIFRX_IMR_SYNCDIE
 ((
uöt32_t
)0x00000020Ë

	)

8425 
	#SPDIFRX_IMR_IFEIE
 ((
uöt32_t
)0x00000040Ë

	)

8428 
	#SPDIFRX_SR_RXNE
 ((
uöt32_t
)0x00000001Ë

	)

8429 
	#SPDIFRX_SR_CSRNE
 ((
uöt32_t
)0x00000002Ë

	)

8430 
	#SPDIFRX_SR_PERR
 ((
uöt32_t
)0x00000004Ë

	)

8431 
	#SPDIFRX_SR_OVR
 ((
uöt32_t
)0x00000008Ë

	)

8432 
	#SPDIFRX_SR_SBD
 ((
uöt32_t
)0x00000010Ë

	)

8433 
	#SPDIFRX_SR_SYNCD
 ((
uöt32_t
)0x00000020Ë

	)

8434 
	#SPDIFRX_SR_FERR
 ((
uöt32_t
)0x00000040Ë

	)

8435 
	#SPDIFRX_SR_SERR
 ((
uöt32_t
)0x00000080Ë

	)

8436 
	#SPDIFRX_SR_TERR
 ((
uöt32_t
)0x00000100Ë

	)

8437 
	#SPDIFRX_SR_WIDTH5
 ((
uöt32_t
)0x7FFF0000Ë

	)

8440 
	#SPDIFRX_IFCR_PERRCF
 ((
uöt32_t
)0x00000004Ë

	)

8441 
	#SPDIFRX_IFCR_OVRCF
 ((
uöt32_t
)0x00000008Ë

	)

8442 
	#SPDIFRX_IFCR_SBDCF
 ((
uöt32_t
)0x00000010Ë

	)

8443 
	#SPDIFRX_IFCR_SYNCDCF
 ((
uöt32_t
)0x00000020Ë

	)

8446 
	#SPDIFRX_DR0_DR
 ((
uöt32_t
)0x00FFFFFFË

	)

8447 
	#SPDIFRX_DR0_PE
 ((
uöt32_t
)0x01000000Ë

	)

8448 
	#SPDIFRX_DR0_V
 ((
uöt32_t
)0x02000000Ë

	)

8449 
	#SPDIFRX_DR0_U
 ((
uöt32_t
)0x04000000Ë

	)

8450 
	#SPDIFRX_DR0_C
 ((
uöt32_t
)0x08000000Ë

	)

8451 
	#SPDIFRX_DR0_PT
 ((
uöt32_t
)0x30000000Ë

	)

8454 
	#SPDIFRX_DR1_DR
 ((
uöt32_t
)0xFFFFFF00Ë

	)

8455 
	#SPDIFRX_DR1_PT
 ((
uöt32_t
)0x00000030Ë

	)

8456 
	#SPDIFRX_DR1_C
 ((
uöt32_t
)0x00000008Ë

	)

8457 
	#SPDIFRX_DR1_U
 ((
uöt32_t
)0x00000004Ë

	)

8458 
	#SPDIFRX_DR1_V
 ((
uöt32_t
)0x00000002Ë

	)

8459 
	#SPDIFRX_DR1_PE
 ((
uöt32_t
)0x00000001Ë

	)

8462 
	#SPDIFRX_DR1_DRNL1
 ((
uöt32_t
)0xFFFF0000Ë

	)

8463 
	#SPDIFRX_DR1_DRNL2
 ((
uöt32_t
)0x0000FFFFË

	)

8466 
	#SPDIFRX_CSR_USR
 ((
uöt32_t
)0x0000FFFFË

	)

8467 
	#SPDIFRX_CSR_CS
 ((
uöt32_t
)0x00FF0000Ë

	)

8468 
	#SPDIFRX_CSR_SOB
 ((
uöt32_t
)0x01000000Ë

	)

8471 
	#SPDIFRX_DIR_THI
 ((
uöt32_t
)0x000013FFË

	)

8472 
	#SPDIFRX_DIR_TLO
 ((
uöt32_t
)0x1FFF0000Ë

	)

8481 
	#SDIO_POWER_PWRCTRL
 ((
uöt8_t
)0x03Ë

	)

8482 
	#SDIO_POWER_PWRCTRL_0
 ((
uöt8_t
)0x01Ë

	)

8483 
	#SDIO_POWER_PWRCTRL_1
 ((
uöt8_t
)0x02Ë

	)

8486 
	#SDIO_CLKCR_CLKDIV
 ((
uöt16_t
)0x00FFË

	)

8487 
	#SDIO_CLKCR_CLKEN
 ((
uöt16_t
)0x0100Ë

	)

8488 
	#SDIO_CLKCR_PWRSAV
 ((
uöt16_t
)0x0200Ë

	)

8489 
	#SDIO_CLKCR_BYPASS
 ((
uöt16_t
)0x0400Ë

	)

8491 
	#SDIO_CLKCR_WIDBUS
 ((
uöt16_t
)0x1800Ë

	)

8492 
	#SDIO_CLKCR_WIDBUS_0
 ((
uöt16_t
)0x0800Ë

	)

8493 
	#SDIO_CLKCR_WIDBUS_1
 ((
uöt16_t
)0x1000Ë

	)

8495 
	#SDIO_CLKCR_NEGEDGE
 ((
uöt16_t
)0x2000Ë

	)

8496 
	#SDIO_CLKCR_HWFC_EN
 ((
uöt16_t
)0x4000Ë

	)

8499 
	#SDIO_ARG_CMDARG
 ((
uöt32_t
)0xFFFFFFFFË

	)

8502 
	#SDIO_CMD_CMDINDEX
 ((
uöt16_t
)0x003FË

	)

8504 
	#SDIO_CMD_WAITRESP
 ((
uöt16_t
)0x00C0Ë

	)

8505 
	#SDIO_CMD_WAITRESP_0
 ((
uöt16_t
)0x0040Ë

	)

8506 
	#SDIO_CMD_WAITRESP_1
 ((
uöt16_t
)0x0080Ë

	)

8508 
	#SDIO_CMD_WAITINT
 ((
uöt16_t
)0x0100Ë

	)

8509 
	#SDIO_CMD_WAITPEND
 ((
uöt16_t
)0x0200Ë

	)

8510 
	#SDIO_CMD_CPSMEN
 ((
uöt16_t
)0x0400Ë

	)

8511 
	#SDIO_CMD_SDIOSUSPEND
 ((
uöt16_t
)0x0800Ë

	)

8512 
	#SDIO_CMD_ENCMDCOMPL
 ((
uöt16_t
)0x1000Ë

	)

8513 
	#SDIO_CMD_NIEN
 ((
uöt16_t
)0x2000Ë

	)

8514 
	#SDIO_CMD_CEATACMD
 ((
uöt16_t
)0x4000Ë

	)

8517 
	#SDIO_RESPCMD_RESPCMD
 ((
uöt8_t
)0x3FË

	)

8520 
	#SDIO_RESP0_CARDSTATUS0
 ((
uöt32_t
)0xFFFFFFFFË

	)

8523 
	#SDIO_RESP1_CARDSTATUS1
 ((
uöt32_t
)0xFFFFFFFFË

	)

8526 
	#SDIO_RESP2_CARDSTATUS2
 ((
uöt32_t
)0xFFFFFFFFË

	)

8529 
	#SDIO_RESP3_CARDSTATUS3
 ((
uöt32_t
)0xFFFFFFFFË

	)

8532 
	#SDIO_RESP4_CARDSTATUS4
 ((
uöt32_t
)0xFFFFFFFFË

	)

8535 
	#SDIO_DTIMER_DATATIME
 ((
uöt32_t
)0xFFFFFFFFË

	)

8538 
	#SDIO_DLEN_DATALENGTH
 ((
uöt32_t
)0x01FFFFFFË

	)

8541 
	#SDIO_DCTRL_DTEN
 ((
uöt16_t
)0x0001Ë

	)

8542 
	#SDIO_DCTRL_DTDIR
 ((
uöt16_t
)0x0002Ë

	)

8543 
	#SDIO_DCTRL_DTMODE
 ((
uöt16_t
)0x0004Ë

	)

8544 
	#SDIO_DCTRL_DMAEN
 ((
uöt16_t
)0x0008Ë

	)

8546 
	#SDIO_DCTRL_DBLOCKSIZE
 ((
uöt16_t
)0x00F0Ë

	)

8547 
	#SDIO_DCTRL_DBLOCKSIZE_0
 ((
uöt16_t
)0x0010Ë

	)

8548 
	#SDIO_DCTRL_DBLOCKSIZE_1
 ((
uöt16_t
)0x0020Ë

	)

8549 
	#SDIO_DCTRL_DBLOCKSIZE_2
 ((
uöt16_t
)0x0040Ë

	)

8550 
	#SDIO_DCTRL_DBLOCKSIZE_3
 ((
uöt16_t
)0x0080Ë

	)

8552 
	#SDIO_DCTRL_RWSTART
 ((
uöt16_t
)0x0100Ë

	)

8553 
	#SDIO_DCTRL_RWSTOP
 ((
uöt16_t
)0x0200Ë

	)

8554 
	#SDIO_DCTRL_RWMOD
 ((
uöt16_t
)0x0400Ë

	)

8555 
	#SDIO_DCTRL_SDIOEN
 ((
uöt16_t
)0x0800Ë

	)

8558 
	#SDIO_DCOUNT_DATACOUNT
 ((
uöt32_t
)0x01FFFFFFË

	)

8561 
	#SDIO_STA_CCRCFAIL
 ((
uöt32_t
)0x00000001Ë

	)

8562 
	#SDIO_STA_DCRCFAIL
 ((
uöt32_t
)0x00000002Ë

	)

8563 
	#SDIO_STA_CTIMEOUT
 ((
uöt32_t
)0x00000004Ë

	)

8564 
	#SDIO_STA_DTIMEOUT
 ((
uöt32_t
)0x00000008Ë

	)

8565 
	#SDIO_STA_TXUNDERR
 ((
uöt32_t
)0x00000010Ë

	)

8566 
	#SDIO_STA_RXOVERR
 ((
uöt32_t
)0x00000020Ë

	)

8567 
	#SDIO_STA_CMDREND
 ((
uöt32_t
)0x00000040Ë

	)

8568 
	#SDIO_STA_CMDSENT
 ((
uöt32_t
)0x00000080Ë

	)

8569 
	#SDIO_STA_DATAEND
 ((
uöt32_t
)0x00000100Ë

	)

8570 
	#SDIO_STA_STBITERR
 ((
uöt32_t
)0x00000200Ë

	)

8571 
	#SDIO_STA_DBCKEND
 ((
uöt32_t
)0x00000400Ë

	)

8572 
	#SDIO_STA_CMDACT
 ((
uöt32_t
)0x00000800Ë

	)

8573 
	#SDIO_STA_TXACT
 ((
uöt32_t
)0x00001000Ë

	)

8574 
	#SDIO_STA_RXACT
 ((
uöt32_t
)0x00002000Ë

	)

8575 
	#SDIO_STA_TXFIFOHE
 ((
uöt32_t
)0x00004000Ë

	)

8576 
	#SDIO_STA_RXFIFOHF
 ((
uöt32_t
)0x00008000Ë

	)

8577 
	#SDIO_STA_TXFIFOF
 ((
uöt32_t
)0x00010000Ë

	)

8578 
	#SDIO_STA_RXFIFOF
 ((
uöt32_t
)0x00020000Ë

	)

8579 
	#SDIO_STA_TXFIFOE
 ((
uöt32_t
)0x00040000Ë

	)

8580 
	#SDIO_STA_RXFIFOE
 ((
uöt32_t
)0x00080000Ë

	)

8581 
	#SDIO_STA_TXDAVL
 ((
uöt32_t
)0x00100000Ë

	)

8582 
	#SDIO_STA_RXDAVL
 ((
uöt32_t
)0x00200000Ë

	)

8583 
	#SDIO_STA_SDIOIT
 ((
uöt32_t
)0x00400000Ë

	)

8584 
	#SDIO_STA_CEATAEND
 ((
uöt32_t
)0x00800000Ë

	)

8587 
	#SDIO_ICR_CCRCFAILC
 ((
uöt32_t
)0x00000001Ë

	)

8588 
	#SDIO_ICR_DCRCFAILC
 ((
uöt32_t
)0x00000002Ë

	)

8589 
	#SDIO_ICR_CTIMEOUTC
 ((
uöt32_t
)0x00000004Ë

	)

8590 
	#SDIO_ICR_DTIMEOUTC
 ((
uöt32_t
)0x00000008Ë

	)

8591 
	#SDIO_ICR_TXUNDERRC
 ((
uöt32_t
)0x00000010Ë

	)

8592 
	#SDIO_ICR_RXOVERRC
 ((
uöt32_t
)0x00000020Ë

	)

8593 
	#SDIO_ICR_CMDRENDC
 ((
uöt32_t
)0x00000040Ë

	)

8594 
	#SDIO_ICR_CMDSENTC
 ((
uöt32_t
)0x00000080Ë

	)

8595 
	#SDIO_ICR_DATAENDC
 ((
uöt32_t
)0x00000100Ë

	)

8596 
	#SDIO_ICR_STBITERRC
 ((
uöt32_t
)0x00000200Ë

	)

8597 
	#SDIO_ICR_DBCKENDC
 ((
uöt32_t
)0x00000400Ë

	)

8598 
	#SDIO_ICR_SDIOITC
 ((
uöt32_t
)0x00400000Ë

	)

8599 
	#SDIO_ICR_CEATAENDC
 ((
uöt32_t
)0x00800000Ë

	)

8602 
	#SDIO_MASK_CCRCFAILIE
 ((
uöt32_t
)0x00000001Ë

	)

8603 
	#SDIO_MASK_DCRCFAILIE
 ((
uöt32_t
)0x00000002Ë

	)

8604 
	#SDIO_MASK_CTIMEOUTIE
 ((
uöt32_t
)0x00000004Ë

	)

8605 
	#SDIO_MASK_DTIMEOUTIE
 ((
uöt32_t
)0x00000008Ë

	)

8606 
	#SDIO_MASK_TXUNDERRIE
 ((
uöt32_t
)0x00000010Ë

	)

8607 
	#SDIO_MASK_RXOVERRIE
 ((
uöt32_t
)0x00000020Ë

	)

8608 
	#SDIO_MASK_CMDRENDIE
 ((
uöt32_t
)0x00000040Ë

	)

8609 
	#SDIO_MASK_CMDSENTIE
 ((
uöt32_t
)0x00000080Ë

	)

8610 
	#SDIO_MASK_DATAENDIE
 ((
uöt32_t
)0x00000100Ë

	)

8611 
	#SDIO_MASK_STBITERRIE
 ((
uöt32_t
)0x00000200Ë

	)

8612 
	#SDIO_MASK_DBCKENDIE
 ((
uöt32_t
)0x00000400Ë

	)

8613 
	#SDIO_MASK_CMDACTIE
 ((
uöt32_t
)0x00000800Ë

	)

8614 
	#SDIO_MASK_TXACTIE
 ((
uöt32_t
)0x00001000Ë

	)

8615 
	#SDIO_MASK_RXACTIE
 ((
uöt32_t
)0x00002000Ë

	)

8616 
	#SDIO_MASK_TXFIFOHEIE
 ((
uöt32_t
)0x00004000Ë

	)

8617 
	#SDIO_MASK_RXFIFOHFIE
 ((
uöt32_t
)0x00008000Ë

	)

8618 
	#SDIO_MASK_TXFIFOFIE
 ((
uöt32_t
)0x00010000Ë

	)

8619 
	#SDIO_MASK_RXFIFOFIE
 ((
uöt32_t
)0x00020000Ë

	)

8620 
	#SDIO_MASK_TXFIFOEIE
 ((
uöt32_t
)0x00040000Ë

	)

8621 
	#SDIO_MASK_RXFIFOEIE
 ((
uöt32_t
)0x00080000Ë

	)

8622 
	#SDIO_MASK_TXDAVLIE
 ((
uöt32_t
)0x00100000Ë

	)

8623 
	#SDIO_MASK_RXDAVLIE
 ((
uöt32_t
)0x00200000Ë

	)

8624 
	#SDIO_MASK_SDIOITIE
 ((
uöt32_t
)0x00400000Ë

	)

8625 
	#SDIO_MASK_CEATAENDIE
 ((
uöt32_t
)0x00800000Ë

	)

8628 
	#SDIO_FIFOCNT_FIFOCOUNT
 ((
uöt32_t
)0x00FFFFFFË

	)

8631 
	#SDIO_FIFO_FIFODATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

8639 
	#SPI_CR1_CPHA
 ((
uöt16_t
)0x0001Ë

	)

8640 
	#SPI_CR1_CPOL
 ((
uöt16_t
)0x0002Ë

	)

8641 
	#SPI_CR1_MSTR
 ((
uöt16_t
)0x0004Ë

	)

8643 
	#SPI_CR1_BR
 ((
uöt16_t
)0x0038Ë

	)

8644 
	#SPI_CR1_BR_0
 ((
uöt16_t
)0x0008Ë

	)

8645 
	#SPI_CR1_BR_1
 ((
uöt16_t
)0x0010Ë

	)

8646 
	#SPI_CR1_BR_2
 ((
uöt16_t
)0x0020Ë

	)

8648 
	#SPI_CR1_SPE
 ((
uöt16_t
)0x0040Ë

	)

8649 
	#SPI_CR1_LSBFIRST
 ((
uöt16_t
)0x0080Ë

	)

8650 
	#SPI_CR1_SSI
 ((
uöt16_t
)0x0100Ë

	)

8651 
	#SPI_CR1_SSM
 ((
uöt16_t
)0x0200Ë

	)

8652 
	#SPI_CR1_RXONLY
 ((
uöt16_t
)0x0400Ë

	)

8653 
	#SPI_CR1_DFF
 ((
uöt16_t
)0x0800Ë

	)

8654 
	#SPI_CR1_CRCNEXT
 ((
uöt16_t
)0x1000Ë

	)

8655 
	#SPI_CR1_CRCEN
 ((
uöt16_t
)0x2000Ë

	)

8656 
	#SPI_CR1_BIDIOE
 ((
uöt16_t
)0x4000Ë

	)

8657 
	#SPI_CR1_BIDIMODE
 ((
uöt16_t
)0x8000Ë

	)

8660 
	#SPI_CR2_RXDMAEN
 ((
uöt8_t
)0x01Ë

	)

8661 
	#SPI_CR2_TXDMAEN
 ((
uöt8_t
)0x02Ë

	)

8662 
	#SPI_CR2_SSOE
 ((
uöt8_t
)0x04Ë

	)

8663 
	#SPI_CR2_ERRIE
 ((
uöt8_t
)0x20Ë

	)

8664 
	#SPI_CR2_RXNEIE
 ((
uöt8_t
)0x40Ë

	)

8665 
	#SPI_CR2_TXEIE
 ((
uöt8_t
)0x80Ë

	)

8668 
	#SPI_SR_RXNE
 ((
uöt8_t
)0x01Ë

	)

8669 
	#SPI_SR_TXE
 ((
uöt8_t
)0x02Ë

	)

8670 
	#SPI_SR_CHSIDE
 ((
uöt8_t
)0x04Ë

	)

8671 
	#SPI_SR_UDR
 ((
uöt8_t
)0x08Ë

	)

8672 
	#SPI_SR_CRCERR
 ((
uöt8_t
)0x10Ë

	)

8673 
	#SPI_SR_MODF
 ((
uöt8_t
)0x20Ë

	)

8674 
	#SPI_SR_OVR
 ((
uöt8_t
)0x40Ë

	)

8675 
	#SPI_SR_BSY
 ((
uöt8_t
)0x80Ë

	)

8678 
	#SPI_DR_DR
 ((
uöt16_t
)0xFFFFË

	)

8681 
	#SPI_CRCPR_CRCPOLY
 ((
uöt16_t
)0xFFFFË

	)

8684 
	#SPI_RXCRCR_RXCRC
 ((
uöt16_t
)0xFFFFË

	)

8687 
	#SPI_TXCRCR_TXCRC
 ((
uöt16_t
)0xFFFFË

	)

8690 
	#SPI_I2SCFGR_CHLEN
 ((
uöt16_t
)0x0001Ë

	)

8692 
	#SPI_I2SCFGR_DATLEN
 ((
uöt16_t
)0x0006Ë

	)

8693 
	#SPI_I2SCFGR_DATLEN_0
 ((
uöt16_t
)0x0002Ë

	)

8694 
	#SPI_I2SCFGR_DATLEN_1
 ((
uöt16_t
)0x0004Ë

	)

8696 
	#SPI_I2SCFGR_CKPOL
 ((
uöt16_t
)0x0008Ë

	)

8698 
	#SPI_I2SCFGR_I2SSTD
 ((
uöt16_t
)0x0030Ë

	)

8699 
	#SPI_I2SCFGR_I2SSTD_0
 ((
uöt16_t
)0x0010Ë

	)

8700 
	#SPI_I2SCFGR_I2SSTD_1
 ((
uöt16_t
)0x0020Ë

	)

8702 
	#SPI_I2SCFGR_PCMSYNC
 ((
uöt16_t
)0x0080Ë

	)

8704 
	#SPI_I2SCFGR_I2SCFG
 ((
uöt16_t
)0x0300Ë

	)

8705 
	#SPI_I2SCFGR_I2SCFG_0
 ((
uöt16_t
)0x0100Ë

	)

8706 
	#SPI_I2SCFGR_I2SCFG_1
 ((
uöt16_t
)0x0200Ë

	)

8708 
	#SPI_I2SCFGR_I2SE
 ((
uöt16_t
)0x0400Ë

	)

8709 
	#SPI_I2SCFGR_I2SMOD
 ((
uöt16_t
)0x0800Ë

	)

8712 
	#SPI_I2SPR_I2SDIV
 ((
uöt16_t
)0x00FFË

	)

8713 
	#SPI_I2SPR_ODD
 ((
uöt16_t
)0x0100Ë

	)

8714 
	#SPI_I2SPR_MCKOE
 ((
uöt16_t
)0x0200Ë

	)

8722 
	#SYSCFG_MEMRMP_MEM_MODE
 ((
uöt32_t
)0x00000007Ë

	)

8723 
	#SYSCFG_MEMRMP_MEM_MODE_0
 ((
uöt32_t
)0x00000001Ë

	)

8724 
	#SYSCFG_MEMRMP_MEM_MODE_1
 ((
uöt32_t
)0x00000002Ë

	)

8725 
	#SYSCFG_MEMRMP_MEM_MODE_2
 ((
uöt32_t
)0x00000004Ë

	)

8727 
	#SYSCFG_MEMRMP_FB_MODE
 ((
uöt32_t
)0x00000100Ë

	)

8729 
	#SYSCFG_MEMRMP_SWP_FMC
 ((
uöt32_t
)0x00000C00Ë

	)

8730 
	#SYSCFG_MEMRMP_SWP_FMC_0
 ((
uöt32_t
)0x00000400Ë

	)

8731 
	#SYSCFG_MEMRMP_SWP_FMC_1
 ((
uöt32_t
)0x00000800Ë

	)

8735 
	#SYSCFG_PMC_ADCxDC2
 ((
uöt32_t
)0x00070000Ë

	)

8736 
	#SYSCFG_PMC_ADC1DC2
 ((
uöt32_t
)0x00010000Ë

	)

8737 
	#SYSCFG_PMC_ADC2DC2
 ((
uöt32_t
)0x00020000Ë

	)

8738 
	#SYSCFG_PMC_ADC3DC2
 ((
uöt32_t
)0x00040000Ë

	)

8740 
	#SYSCFG_PMC_MII_RMII_SEL
 ((
uöt32_t
)0x00800000Ë

	)

8742 
	#SYSCFG_PMC_MII_RMII
 
SYSCFG_PMC_MII_RMII_SEL


	)

8745 
	#SYSCFG_EXTICR1_EXTI0
 ((
uöt16_t
)0x000FË

	)

8746 
	#SYSCFG_EXTICR1_EXTI1
 ((
uöt16_t
)0x00F0Ë

	)

8747 
	#SYSCFG_EXTICR1_EXTI2
 ((
uöt16_t
)0x0F00Ë

	)

8748 
	#SYSCFG_EXTICR1_EXTI3
 ((
uöt16_t
)0xF000Ë

	)

8752 
	#SYSCFG_EXTICR1_EXTI0_PA
 ((
uöt16_t
)0x0000Ë

	)

8753 
	#SYSCFG_EXTICR1_EXTI0_PB
 ((
uöt16_t
)0x0001Ë

	)

8754 
	#SYSCFG_EXTICR1_EXTI0_PC
 ((
uöt16_t
)0x0002Ë

	)

8755 
	#SYSCFG_EXTICR1_EXTI0_PD
 ((
uöt16_t
)0x0003Ë

	)

8756 
	#SYSCFG_EXTICR1_EXTI0_PE
 ((
uöt16_t
)0x0004Ë

	)

8757 
	#SYSCFG_EXTICR1_EXTI0_PF
 ((
uöt16_t
)0x0005Ë

	)

8758 
	#SYSCFG_EXTICR1_EXTI0_PG
 ((
uöt16_t
)0x0006Ë

	)

8759 
	#SYSCFG_EXTICR1_EXTI0_PH
 ((
uöt16_t
)0x0007Ë

	)

8760 
	#SYSCFG_EXTICR1_EXTI0_PI
 ((
uöt16_t
)0x0008Ë

	)

8761 
	#SYSCFG_EXTICR1_EXTI0_PJ
 ((
uöt16_t
)0x0009Ë

	)

8762 
	#SYSCFG_EXTICR1_EXTI0_PK
 ((
uöt16_t
)0x000AË

	)

8767 
	#SYSCFG_EXTICR1_EXTI1_PA
 ((
uöt16_t
)0x0000Ë

	)

8768 
	#SYSCFG_EXTICR1_EXTI1_PB
 ((
uöt16_t
)0x0010Ë

	)

8769 
	#SYSCFG_EXTICR1_EXTI1_PC
 ((
uöt16_t
)0x0020Ë

	)

8770 
	#SYSCFG_EXTICR1_EXTI1_PD
 ((
uöt16_t
)0x0030Ë

	)

8771 
	#SYSCFG_EXTICR1_EXTI1_PE
 ((
uöt16_t
)0x0040Ë

	)

8772 
	#SYSCFG_EXTICR1_EXTI1_PF
 ((
uöt16_t
)0x0050Ë

	)

8773 
	#SYSCFG_EXTICR1_EXTI1_PG
 ((
uöt16_t
)0x0060Ë

	)

8774 
	#SYSCFG_EXTICR1_EXTI1_PH
 ((
uöt16_t
)0x0070Ë

	)

8775 
	#SYSCFG_EXTICR1_EXTI1_PI
 ((
uöt16_t
)0x0080Ë

	)

8776 
	#SYSCFG_EXTICR1_EXTI1_PJ
 ((
uöt16_t
)0x0090Ë

	)

8777 
	#SYSCFG_EXTICR1_EXTI1_PK
 ((
uöt16_t
)0x00A0Ë

	)

8782 
	#SYSCFG_EXTICR1_EXTI2_PA
 ((
uöt16_t
)0x0000Ë

	)

8783 
	#SYSCFG_EXTICR1_EXTI2_PB
 ((
uöt16_t
)0x0100Ë

	)

8784 
	#SYSCFG_EXTICR1_EXTI2_PC
 ((
uöt16_t
)0x0200Ë

	)

8785 
	#SYSCFG_EXTICR1_EXTI2_PD
 ((
uöt16_t
)0x0300Ë

	)

8786 
	#SYSCFG_EXTICR1_EXTI2_PE
 ((
uöt16_t
)0x0400Ë

	)

8787 
	#SYSCFG_EXTICR1_EXTI2_PF
 ((
uöt16_t
)0x0500Ë

	)

8788 
	#SYSCFG_EXTICR1_EXTI2_PG
 ((
uöt16_t
)0x0600Ë

	)

8789 
	#SYSCFG_EXTICR1_EXTI2_PH
 ((
uöt16_t
)0x0700Ë

	)

8790 
	#SYSCFG_EXTICR1_EXTI2_PI
 ((
uöt16_t
)0x0800Ë

	)

8791 
	#SYSCFG_EXTICR1_EXTI2_PJ
 ((
uöt16_t
)0x0900Ë

	)

8792 
	#SYSCFG_EXTICR1_EXTI2_PK
 ((
uöt16_t
)0x0A00Ë

	)

8797 
	#SYSCFG_EXTICR1_EXTI3_PA
 ((
uöt16_t
)0x0000Ë

	)

8798 
	#SYSCFG_EXTICR1_EXTI3_PB
 ((
uöt16_t
)0x1000Ë

	)

8799 
	#SYSCFG_EXTICR1_EXTI3_PC
 ((
uöt16_t
)0x2000Ë

	)

8800 
	#SYSCFG_EXTICR1_EXTI3_PD
 ((
uöt16_t
)0x3000Ë

	)

8801 
	#SYSCFG_EXTICR1_EXTI3_PE
 ((
uöt16_t
)0x4000Ë

	)

8802 
	#SYSCFG_EXTICR1_EXTI3_PF
 ((
uöt16_t
)0x5000Ë

	)

8803 
	#SYSCFG_EXTICR1_EXTI3_PG
 ((
uöt16_t
)0x6000Ë

	)

8804 
	#SYSCFG_EXTICR1_EXTI3_PH
 ((
uöt16_t
)0x7000Ë

	)

8805 
	#SYSCFG_EXTICR1_EXTI3_PI
 ((
uöt16_t
)0x8000Ë

	)

8806 
	#SYSCFG_EXTICR1_EXTI3_PJ
 ((
uöt16_t
)0x9000Ë

	)

8807 
	#SYSCFG_EXTICR1_EXTI3_PK
 ((
uöt16_t
)0xA000Ë

	)

8810 
	#SYSCFG_EXTICR2_EXTI4
 ((
uöt16_t
)0x000FË

	)

8811 
	#SYSCFG_EXTICR2_EXTI5
 ((
uöt16_t
)0x00F0Ë

	)

8812 
	#SYSCFG_EXTICR2_EXTI6
 ((
uöt16_t
)0x0F00Ë

	)

8813 
	#SYSCFG_EXTICR2_EXTI7
 ((
uöt16_t
)0xF000Ë

	)

8817 
	#SYSCFG_EXTICR2_EXTI4_PA
 ((
uöt16_t
)0x0000Ë

	)

8818 
	#SYSCFG_EXTICR2_EXTI4_PB
 ((
uöt16_t
)0x0001Ë

	)

8819 
	#SYSCFG_EXTICR2_EXTI4_PC
 ((
uöt16_t
)0x0002Ë

	)

8820 
	#SYSCFG_EXTICR2_EXTI4_PD
 ((
uöt16_t
)0x0003Ë

	)

8821 
	#SYSCFG_EXTICR2_EXTI4_PE
 ((
uöt16_t
)0x0004Ë

	)

8822 
	#SYSCFG_EXTICR2_EXTI4_PF
 ((
uöt16_t
)0x0005Ë

	)

8823 
	#SYSCFG_EXTICR2_EXTI4_PG
 ((
uöt16_t
)0x0006Ë

	)

8824 
	#SYSCFG_EXTICR2_EXTI4_PH
 ((
uöt16_t
)0x0007Ë

	)

8825 
	#SYSCFG_EXTICR2_EXTI4_PI
 ((
uöt16_t
)0x0008Ë

	)

8826 
	#SYSCFG_EXTICR2_EXTI4_PJ
 ((
uöt16_t
)0x0009Ë

	)

8827 
	#SYSCFG_EXTICR2_EXTI4_PK
 ((
uöt16_t
)0x000AË

	)

8832 
	#SYSCFG_EXTICR2_EXTI5_PA
 ((
uöt16_t
)0x0000Ë

	)

8833 
	#SYSCFG_EXTICR2_EXTI5_PB
 ((
uöt16_t
)0x0010Ë

	)

8834 
	#SYSCFG_EXTICR2_EXTI5_PC
 ((
uöt16_t
)0x0020Ë

	)

8835 
	#SYSCFG_EXTICR2_EXTI5_PD
 ((
uöt16_t
)0x0030Ë

	)

8836 
	#SYSCFG_EXTICR2_EXTI5_PE
 ((
uöt16_t
)0x0040Ë

	)

8837 
	#SYSCFG_EXTICR2_EXTI5_PF
 ((
uöt16_t
)0x0050Ë

	)

8838 
	#SYSCFG_EXTICR2_EXTI5_PG
 ((
uöt16_t
)0x0060Ë

	)

8839 
	#SYSCFG_EXTICR2_EXTI5_PH
 ((
uöt16_t
)0x0070Ë

	)

8840 
	#SYSCFG_EXTICR2_EXTI5_PI
 ((
uöt16_t
)0x0080Ë

	)

8841 
	#SYSCFG_EXTICR2_EXTI5_PJ
 ((
uöt16_t
)0x0090Ë

	)

8842 
	#SYSCFG_EXTICR2_EXTI5_PK
 ((
uöt16_t
)0x00A0Ë

	)

8847 
	#SYSCFG_EXTICR2_EXTI6_PA
 ((
uöt16_t
)0x0000Ë

	)

8848 
	#SYSCFG_EXTICR2_EXTI6_PB
 ((
uöt16_t
)0x0100Ë

	)

8849 
	#SYSCFG_EXTICR2_EXTI6_PC
 ((
uöt16_t
)0x0200Ë

	)

8850 
	#SYSCFG_EXTICR2_EXTI6_PD
 ((
uöt16_t
)0x0300Ë

	)

8851 
	#SYSCFG_EXTICR2_EXTI6_PE
 ((
uöt16_t
)0x0400Ë

	)

8852 
	#SYSCFG_EXTICR2_EXTI6_PF
 ((
uöt16_t
)0x0500Ë

	)

8853 
	#SYSCFG_EXTICR2_EXTI6_PG
 ((
uöt16_t
)0x0600Ë

	)

8854 
	#SYSCFG_EXTICR2_EXTI6_PH
 ((
uöt16_t
)0x0700Ë

	)

8855 
	#SYSCFG_EXTICR2_EXTI6_PI
 ((
uöt16_t
)0x0800Ë

	)

8856 
	#SYSCFG_EXTICR2_EXTI6_PJ
 ((
uöt16_t
)0x0900Ë

	)

8857 
	#SYSCFG_EXTICR2_EXTI6_PK
 ((
uöt16_t
)0x0A00Ë

	)

8862 
	#SYSCFG_EXTICR2_EXTI7_PA
 ((
uöt16_t
)0x0000Ë

	)

8863 
	#SYSCFG_EXTICR2_EXTI7_PB
 ((
uöt16_t
)0x1000Ë

	)

8864 
	#SYSCFG_EXTICR2_EXTI7_PC
 ((
uöt16_t
)0x2000Ë

	)

8865 
	#SYSCFG_EXTICR2_EXTI7_PD
 ((
uöt16_t
)0x3000Ë

	)

8866 
	#SYSCFG_EXTICR2_EXTI7_PE
 ((
uöt16_t
)0x4000Ë

	)

8867 
	#SYSCFG_EXTICR2_EXTI7_PF
 ((
uöt16_t
)0x5000Ë

	)

8868 
	#SYSCFG_EXTICR2_EXTI7_PG
 ((
uöt16_t
)0x6000Ë

	)

8869 
	#SYSCFG_EXTICR2_EXTI7_PH
 ((
uöt16_t
)0x7000Ë

	)

8870 
	#SYSCFG_EXTICR2_EXTI7_PI
 ((
uöt16_t
)0x8000Ë

	)

8871 
	#SYSCFG_EXTICR2_EXTI7_PJ
 ((
uöt16_t
)0x9000Ë

	)

8872 
	#SYSCFG_EXTICR2_EXTI7_PK
 ((
uöt16_t
)0xA000Ë

	)

8875 
	#SYSCFG_EXTICR3_EXTI8
 ((
uöt16_t
)0x000FË

	)

8876 
	#SYSCFG_EXTICR3_EXTI9
 ((
uöt16_t
)0x00F0Ë

	)

8877 
	#SYSCFG_EXTICR3_EXTI10
 ((
uöt16_t
)0x0F00Ë

	)

8878 
	#SYSCFG_EXTICR3_EXTI11
 ((
uöt16_t
)0xF000Ë

	)

8883 
	#SYSCFG_EXTICR3_EXTI8_PA
 ((
uöt16_t
)0x0000Ë

	)

8884 
	#SYSCFG_EXTICR3_EXTI8_PB
 ((
uöt16_t
)0x0001Ë

	)

8885 
	#SYSCFG_EXTICR3_EXTI8_PC
 ((
uöt16_t
)0x0002Ë

	)

8886 
	#SYSCFG_EXTICR3_EXTI8_PD
 ((
uöt16_t
)0x0003Ë

	)

8887 
	#SYSCFG_EXTICR3_EXTI8_PE
 ((
uöt16_t
)0x0004Ë

	)

8888 
	#SYSCFG_EXTICR3_EXTI8_PF
 ((
uöt16_t
)0x0005Ë

	)

8889 
	#SYSCFG_EXTICR3_EXTI8_PG
 ((
uöt16_t
)0x0006Ë

	)

8890 
	#SYSCFG_EXTICR3_EXTI8_PH
 ((
uöt16_t
)0x0007Ë

	)

8891 
	#SYSCFG_EXTICR3_EXTI8_PI
 ((
uöt16_t
)0x0008Ë

	)

8892 
	#SYSCFG_EXTICR3_EXTI8_PJ
 ((
uöt16_t
)0x0009Ë

	)

8897 
	#SYSCFG_EXTICR3_EXTI9_PA
 ((
uöt16_t
)0x0000Ë

	)

8898 
	#SYSCFG_EXTICR3_EXTI9_PB
 ((
uöt16_t
)0x0010Ë

	)

8899 
	#SYSCFG_EXTICR3_EXTI9_PC
 ((
uöt16_t
)0x0020Ë

	)

8900 
	#SYSCFG_EXTICR3_EXTI9_PD
 ((
uöt16_t
)0x0030Ë

	)

8901 
	#SYSCFG_EXTICR3_EXTI9_PE
 ((
uöt16_t
)0x0040Ë

	)

8902 
	#SYSCFG_EXTICR3_EXTI9_PF
 ((
uöt16_t
)0x0050Ë

	)

8903 
	#SYSCFG_EXTICR3_EXTI9_PG
 ((
uöt16_t
)0x0060Ë

	)

8904 
	#SYSCFG_EXTICR3_EXTI9_PH
 ((
uöt16_t
)0x0070Ë

	)

8905 
	#SYSCFG_EXTICR3_EXTI9_PI
 ((
uöt16_t
)0x0080Ë

	)

8906 
	#SYSCFG_EXTICR3_EXTI9_PJ
 ((
uöt16_t
)0x0090Ë

	)

8911 
	#SYSCFG_EXTICR3_EXTI10_PA
 ((
uöt16_t
)0x0000Ë

	)

8912 
	#SYSCFG_EXTICR3_EXTI10_PB
 ((
uöt16_t
)0x0100Ë

	)

8913 
	#SYSCFG_EXTICR3_EXTI10_PC
 ((
uöt16_t
)0x0200Ë

	)

8914 
	#SYSCFG_EXTICR3_EXTI10_PD
 ((
uöt16_t
)0x0300Ë

	)

8915 
	#SYSCFG_EXTICR3_EXTI10_PE
 ((
uöt16_t
)0x0400Ë

	)

8916 
	#SYSCFG_EXTICR3_EXTI10_PF
 ((
uöt16_t
)0x0500Ë

	)

8917 
	#SYSCFG_EXTICR3_EXTI10_PG
 ((
uöt16_t
)0x0600Ë

	)

8918 
	#SYSCFG_EXTICR3_EXTI10_PH
 ((
uöt16_t
)0x0700Ë

	)

8919 
	#SYSCFG_EXTICR3_EXTI10_PI
 ((
uöt16_t
)0x0800Ë

	)

8920 
	#SYSCFG_EXTICR3_EXTI10_PJ
 ((
uöt16_t
)0x0900Ë

	)

8925 
	#SYSCFG_EXTICR3_EXTI11_PA
 ((
uöt16_t
)0x0000Ë

	)

8926 
	#SYSCFG_EXTICR3_EXTI11_PB
 ((
uöt16_t
)0x1000Ë

	)

8927 
	#SYSCFG_EXTICR3_EXTI11_PC
 ((
uöt16_t
)0x2000Ë

	)

8928 
	#SYSCFG_EXTICR3_EXTI11_PD
 ((
uöt16_t
)0x3000Ë

	)

8929 
	#SYSCFG_EXTICR3_EXTI11_PE
 ((
uöt16_t
)0x4000Ë

	)

8930 
	#SYSCFG_EXTICR3_EXTI11_PF
 ((
uöt16_t
)0x5000Ë

	)

8931 
	#SYSCFG_EXTICR3_EXTI11_PG
 ((
uöt16_t
)0x6000Ë

	)

8932 
	#SYSCFG_EXTICR3_EXTI11_PH
 ((
uöt16_t
)0x7000Ë

	)

8933 
	#SYSCFG_EXTICR3_EXTI11_PI
 ((
uöt16_t
)0x8000Ë

	)

8934 
	#SYSCFG_EXTICR3_EXTI11_PJ
 ((
uöt16_t
)0x9000Ë

	)

8937 
	#SYSCFG_EXTICR4_EXTI12
 ((
uöt16_t
)0x000FË

	)

8938 
	#SYSCFG_EXTICR4_EXTI13
 ((
uöt16_t
)0x00F0Ë

	)

8939 
	#SYSCFG_EXTICR4_EXTI14
 ((
uöt16_t
)0x0F00Ë

	)

8940 
	#SYSCFG_EXTICR4_EXTI15
 ((
uöt16_t
)0xF000Ë

	)

8944 
	#SYSCFG_EXTICR4_EXTI12_PA
 ((
uöt16_t
)0x0000Ë

	)

8945 
	#SYSCFG_EXTICR4_EXTI12_PB
 ((
uöt16_t
)0x0001Ë

	)

8946 
	#SYSCFG_EXTICR4_EXTI12_PC
 ((
uöt16_t
)0x0002Ë

	)

8947 
	#SYSCFG_EXTICR4_EXTI12_PD
 ((
uöt16_t
)0x0003Ë

	)

8948 
	#SYSCFG_EXTICR4_EXTI12_PE
 ((
uöt16_t
)0x0004Ë

	)

8949 
	#SYSCFG_EXTICR4_EXTI12_PF
 ((
uöt16_t
)0x0005Ë

	)

8950 
	#SYSCFG_EXTICR4_EXTI12_PG
 ((
uöt16_t
)0x0006Ë

	)

8951 
	#SYSCFG_EXTICR4_EXTI12_PH
 ((
uöt16_t
)0x0007Ë

	)

8952 
	#SYSCFG_EXTICR4_EXTI12_PI
 ((
uöt16_t
)0x0008Ë

	)

8953 
	#SYSCFG_EXTICR4_EXTI12_PJ
 ((
uöt16_t
)0x0009Ë

	)

8958 
	#SYSCFG_EXTICR4_EXTI13_PA
 ((
uöt16_t
)0x0000Ë

	)

8959 
	#SYSCFG_EXTICR4_EXTI13_PB
 ((
uöt16_t
)0x0010Ë

	)

8960 
	#SYSCFG_EXTICR4_EXTI13_PC
 ((
uöt16_t
)0x0020Ë

	)

8961 
	#SYSCFG_EXTICR4_EXTI13_PD
 ((
uöt16_t
)0x0030Ë

	)

8962 
	#SYSCFG_EXTICR4_EXTI13_PE
 ((
uöt16_t
)0x0040Ë

	)

8963 
	#SYSCFG_EXTICR4_EXTI13_PF
 ((
uöt16_t
)0x0050Ë

	)

8964 
	#SYSCFG_EXTICR4_EXTI13_PG
 ((
uöt16_t
)0x0060Ë

	)

8965 
	#SYSCFG_EXTICR4_EXTI13_PH
 ((
uöt16_t
)0x0070Ë

	)

8966 
	#SYSCFG_EXTICR4_EXTI13_PI
 ((
uöt16_t
)0x0008Ë

	)

8967 
	#SYSCFG_EXTICR4_EXTI13_PJ
 ((
uöt16_t
)0x0009Ë

	)

8972 
	#SYSCFG_EXTICR4_EXTI14_PA
 ((
uöt16_t
)0x0000Ë

	)

8973 
	#SYSCFG_EXTICR4_EXTI14_PB
 ((
uöt16_t
)0x0100Ë

	)

8974 
	#SYSCFG_EXTICR4_EXTI14_PC
 ((
uöt16_t
)0x0200Ë

	)

8975 
	#SYSCFG_EXTICR4_EXTI14_PD
 ((
uöt16_t
)0x0300Ë

	)

8976 
	#SYSCFG_EXTICR4_EXTI14_PE
 ((
uöt16_t
)0x0400Ë

	)

8977 
	#SYSCFG_EXTICR4_EXTI14_PF
 ((
uöt16_t
)0x0500Ë

	)

8978 
	#SYSCFG_EXTICR4_EXTI14_PG
 ((
uöt16_t
)0x0600Ë

	)

8979 
	#SYSCFG_EXTICR4_EXTI14_PH
 ((
uöt16_t
)0x0700Ë

	)

8980 
	#SYSCFG_EXTICR4_EXTI14_PI
 ((
uöt16_t
)0x0800Ë

	)

8981 
	#SYSCFG_EXTICR4_EXTI14_PJ
 ((
uöt16_t
)0x0900Ë

	)

8986 
	#SYSCFG_EXTICR4_EXTI15_PA
 ((
uöt16_t
)0x0000Ë

	)

8987 
	#SYSCFG_EXTICR4_EXTI15_PB
 ((
uöt16_t
)0x1000Ë

	)

8988 
	#SYSCFG_EXTICR4_EXTI15_PC
 ((
uöt16_t
)0x2000Ë

	)

8989 
	#SYSCFG_EXTICR4_EXTI15_PD
 ((
uöt16_t
)0x3000Ë

	)

8990 
	#SYSCFG_EXTICR4_EXTI15_PE
 ((
uöt16_t
)0x4000Ë

	)

8991 
	#SYSCFG_EXTICR4_EXTI15_PF
 ((
uöt16_t
)0x5000Ë

	)

8992 
	#SYSCFG_EXTICR4_EXTI15_PG
 ((
uöt16_t
)0x6000Ë

	)

8993 
	#SYSCFG_EXTICR4_EXTI15_PH
 ((
uöt16_t
)0x7000Ë

	)

8994 
	#SYSCFG_EXTICR4_EXTI15_PI
 ((
uöt16_t
)0x8000Ë

	)

8995 
	#SYSCFG_EXTICR4_EXTI15_PJ
 ((
uöt16_t
)0x9000Ë

	)

8998 
	#SYSCFG_CMPCR_CMP_PD
 ((
uöt32_t
)0x00000001Ë

	)

8999 
	#SYSCFG_CMPCR_READY
 ((
uöt32_t
)0x00000100Ë

	)

9007 
	#TIM_CR1_CEN
 ((
uöt16_t
)0x0001Ë

	)

9008 
	#TIM_CR1_UDIS
 ((
uöt16_t
)0x0002Ë

	)

9009 
	#TIM_CR1_URS
 ((
uöt16_t
)0x0004Ë

	)

9010 
	#TIM_CR1_OPM
 ((
uöt16_t
)0x0008Ë

	)

9011 
	#TIM_CR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

9013 
	#TIM_CR1_CMS
 ((
uöt16_t
)0x0060Ë

	)

9014 
	#TIM_CR1_CMS_0
 ((
uöt16_t
)0x0020Ë

	)

9015 
	#TIM_CR1_CMS_1
 ((
uöt16_t
)0x0040Ë

	)

9017 
	#TIM_CR1_ARPE
 ((
uöt16_t
)0x0080Ë

	)

9019 
	#TIM_CR1_CKD
 ((
uöt16_t
)0x0300Ë

	)

9020 
	#TIM_CR1_CKD_0
 ((
uöt16_t
)0x0100Ë

	)

9021 
	#TIM_CR1_CKD_1
 ((
uöt16_t
)0x0200Ë

	)

9024 
	#TIM_CR2_CCPC
 ((
uöt16_t
)0x0001Ë

	)

9025 
	#TIM_CR2_CCUS
 ((
uöt16_t
)0x0004Ë

	)

9026 
	#TIM_CR2_CCDS
 ((
uöt16_t
)0x0008Ë

	)

9028 
	#TIM_CR2_MMS
 ((
uöt16_t
)0x0070Ë

	)

9029 
	#TIM_CR2_MMS_0
 ((
uöt16_t
)0x0010Ë

	)

9030 
	#TIM_CR2_MMS_1
 ((
uöt16_t
)0x0020Ë

	)

9031 
	#TIM_CR2_MMS_2
 ((
uöt16_t
)0x0040Ë

	)

9033 
	#TIM_CR2_TI1S
 ((
uöt16_t
)0x0080Ë

	)

9034 
	#TIM_CR2_OIS1
 ((
uöt16_t
)0x0100Ë

	)

9035 
	#TIM_CR2_OIS1N
 ((
uöt16_t
)0x0200Ë

	)

9036 
	#TIM_CR2_OIS2
 ((
uöt16_t
)0x0400Ë

	)

9037 
	#TIM_CR2_OIS2N
 ((
uöt16_t
)0x0800Ë

	)

9038 
	#TIM_CR2_OIS3
 ((
uöt16_t
)0x1000Ë

	)

9039 
	#TIM_CR2_OIS3N
 ((
uöt16_t
)0x2000Ë

	)

9040 
	#TIM_CR2_OIS4
 ((
uöt16_t
)0x4000Ë

	)

9043 
	#TIM_SMCR_SMS
 ((
uöt16_t
)0x0007Ë

	)

9044 
	#TIM_SMCR_SMS_0
 ((
uöt16_t
)0x0001Ë

	)

9045 
	#TIM_SMCR_SMS_1
 ((
uöt16_t
)0x0002Ë

	)

9046 
	#TIM_SMCR_SMS_2
 ((
uöt16_t
)0x0004Ë

	)

9048 
	#TIM_SMCR_TS
 ((
uöt16_t
)0x0070Ë

	)

9049 
	#TIM_SMCR_TS_0
 ((
uöt16_t
)0x0010Ë

	)

9050 
	#TIM_SMCR_TS_1
 ((
uöt16_t
)0x0020Ë

	)

9051 
	#TIM_SMCR_TS_2
 ((
uöt16_t
)0x0040Ë

	)

9053 
	#TIM_SMCR_MSM
 ((
uöt16_t
)0x0080Ë

	)

9055 
	#TIM_SMCR_ETF
 ((
uöt16_t
)0x0F00Ë

	)

9056 
	#TIM_SMCR_ETF_0
 ((
uöt16_t
)0x0100Ë

	)

9057 
	#TIM_SMCR_ETF_1
 ((
uöt16_t
)0x0200Ë

	)

9058 
	#TIM_SMCR_ETF_2
 ((
uöt16_t
)0x0400Ë

	)

9059 
	#TIM_SMCR_ETF_3
 ((
uöt16_t
)0x0800Ë

	)

9061 
	#TIM_SMCR_ETPS
 ((
uöt16_t
)0x3000Ë

	)

9062 
	#TIM_SMCR_ETPS_0
 ((
uöt16_t
)0x1000Ë

	)

9063 
	#TIM_SMCR_ETPS_1
 ((
uöt16_t
)0x2000Ë

	)

9065 
	#TIM_SMCR_ECE
 ((
uöt16_t
)0x4000Ë

	)

9066 
	#TIM_SMCR_ETP
 ((
uöt16_t
)0x8000Ë

	)

9069 
	#TIM_DIER_UIE
 ((
uöt16_t
)0x0001Ë

	)

9070 
	#TIM_DIER_CC1IE
 ((
uöt16_t
)0x0002Ë

	)

9071 
	#TIM_DIER_CC2IE
 ((
uöt16_t
)0x0004Ë

	)

9072 
	#TIM_DIER_CC3IE
 ((
uöt16_t
)0x0008Ë

	)

9073 
	#TIM_DIER_CC4IE
 ((
uöt16_t
)0x0010Ë

	)

9074 
	#TIM_DIER_COMIE
 ((
uöt16_t
)0x0020Ë

	)

9075 
	#TIM_DIER_TIE
 ((
uöt16_t
)0x0040Ë

	)

9076 
	#TIM_DIER_BIE
 ((
uöt16_t
)0x0080Ë

	)

9077 
	#TIM_DIER_UDE
 ((
uöt16_t
)0x0100Ë

	)

9078 
	#TIM_DIER_CC1DE
 ((
uöt16_t
)0x0200Ë

	)

9079 
	#TIM_DIER_CC2DE
 ((
uöt16_t
)0x0400Ë

	)

9080 
	#TIM_DIER_CC3DE
 ((
uöt16_t
)0x0800Ë

	)

9081 
	#TIM_DIER_CC4DE
 ((
uöt16_t
)0x1000Ë

	)

9082 
	#TIM_DIER_COMDE
 ((
uöt16_t
)0x2000Ë

	)

9083 
	#TIM_DIER_TDE
 ((
uöt16_t
)0x4000Ë

	)

9086 
	#TIM_SR_UIF
 ((
uöt16_t
)0x0001Ë

	)

9087 
	#TIM_SR_CC1IF
 ((
uöt16_t
)0x0002Ë

	)

9088 
	#TIM_SR_CC2IF
 ((
uöt16_t
)0x0004Ë

	)

9089 
	#TIM_SR_CC3IF
 ((
uöt16_t
)0x0008Ë

	)

9090 
	#TIM_SR_CC4IF
 ((
uöt16_t
)0x0010Ë

	)

9091 
	#TIM_SR_COMIF
 ((
uöt16_t
)0x0020Ë

	)

9092 
	#TIM_SR_TIF
 ((
uöt16_t
)0x0040Ë

	)

9093 
	#TIM_SR_BIF
 ((
uöt16_t
)0x0080Ë

	)

9094 
	#TIM_SR_CC1OF
 ((
uöt16_t
)0x0200Ë

	)

9095 
	#TIM_SR_CC2OF
 ((
uöt16_t
)0x0400Ë

	)

9096 
	#TIM_SR_CC3OF
 ((
uöt16_t
)0x0800Ë

	)

9097 
	#TIM_SR_CC4OF
 ((
uöt16_t
)0x1000Ë

	)

9100 
	#TIM_EGR_UG
 ((
uöt8_t
)0x01Ë

	)

9101 
	#TIM_EGR_CC1G
 ((
uöt8_t
)0x02Ë

	)

9102 
	#TIM_EGR_CC2G
 ((
uöt8_t
)0x04Ë

	)

9103 
	#TIM_EGR_CC3G
 ((
uöt8_t
)0x08Ë

	)

9104 
	#TIM_EGR_CC4G
 ((
uöt8_t
)0x10Ë

	)

9105 
	#TIM_EGR_COMG
 ((
uöt8_t
)0x20Ë

	)

9106 
	#TIM_EGR_TG
 ((
uöt8_t
)0x40Ë

	)

9107 
	#TIM_EGR_BG
 ((
uöt8_t
)0x80Ë

	)

9110 
	#TIM_CCMR1_CC1S
 ((
uöt16_t
)0x0003Ë

	)

9111 
	#TIM_CCMR1_CC1S_0
 ((
uöt16_t
)0x0001Ë

	)

9112 
	#TIM_CCMR1_CC1S_1
 ((
uöt16_t
)0x0002Ë

	)

9114 
	#TIM_CCMR1_OC1FE
 ((
uöt16_t
)0x0004Ë

	)

9115 
	#TIM_CCMR1_OC1PE
 ((
uöt16_t
)0x0008Ë

	)

9117 
	#TIM_CCMR1_OC1M
 ((
uöt16_t
)0x0070Ë

	)

9118 
	#TIM_CCMR1_OC1M_0
 ((
uöt16_t
)0x0010Ë

	)

9119 
	#TIM_CCMR1_OC1M_1
 ((
uöt16_t
)0x0020Ë

	)

9120 
	#TIM_CCMR1_OC1M_2
 ((
uöt16_t
)0x0040Ë

	)

9122 
	#TIM_CCMR1_OC1CE
 ((
uöt16_t
)0x0080Ë

	)

9124 
	#TIM_CCMR1_CC2S
 ((
uöt16_t
)0x0300Ë

	)

9125 
	#TIM_CCMR1_CC2S_0
 ((
uöt16_t
)0x0100Ë

	)

9126 
	#TIM_CCMR1_CC2S_1
 ((
uöt16_t
)0x0200Ë

	)

9128 
	#TIM_CCMR1_OC2FE
 ((
uöt16_t
)0x0400Ë

	)

9129 
	#TIM_CCMR1_OC2PE
 ((
uöt16_t
)0x0800Ë

	)

9131 
	#TIM_CCMR1_OC2M
 ((
uöt16_t
)0x7000Ë

	)

9132 
	#TIM_CCMR1_OC2M_0
 ((
uöt16_t
)0x1000Ë

	)

9133 
	#TIM_CCMR1_OC2M_1
 ((
uöt16_t
)0x2000Ë

	)

9134 
	#TIM_CCMR1_OC2M_2
 ((
uöt16_t
)0x4000Ë

	)

9136 
	#TIM_CCMR1_OC2CE
 ((
uöt16_t
)0x8000Ë

	)

9140 
	#TIM_CCMR1_IC1PSC
 ((
uöt16_t
)0x000CË

	)

9141 
	#TIM_CCMR1_IC1PSC_0
 ((
uöt16_t
)0x0004Ë

	)

9142 
	#TIM_CCMR1_IC1PSC_1
 ((
uöt16_t
)0x0008Ë

	)

9144 
	#TIM_CCMR1_IC1F
 ((
uöt16_t
)0x00F0Ë

	)

9145 
	#TIM_CCMR1_IC1F_0
 ((
uöt16_t
)0x0010Ë

	)

9146 
	#TIM_CCMR1_IC1F_1
 ((
uöt16_t
)0x0020Ë

	)

9147 
	#TIM_CCMR1_IC1F_2
 ((
uöt16_t
)0x0040Ë

	)

9148 
	#TIM_CCMR1_IC1F_3
 ((
uöt16_t
)0x0080Ë

	)

9150 
	#TIM_CCMR1_IC2PSC
 ((
uöt16_t
)0x0C00Ë

	)

9151 
	#TIM_CCMR1_IC2PSC_0
 ((
uöt16_t
)0x0400Ë

	)

9152 
	#TIM_CCMR1_IC2PSC_1
 ((
uöt16_t
)0x0800Ë

	)

9154 
	#TIM_CCMR1_IC2F
 ((
uöt16_t
)0xF000Ë

	)

9155 
	#TIM_CCMR1_IC2F_0
 ((
uöt16_t
)0x1000Ë

	)

9156 
	#TIM_CCMR1_IC2F_1
 ((
uöt16_t
)0x2000Ë

	)

9157 
	#TIM_CCMR1_IC2F_2
 ((
uöt16_t
)0x4000Ë

	)

9158 
	#TIM_CCMR1_IC2F_3
 ((
uöt16_t
)0x8000Ë

	)

9161 
	#TIM_CCMR2_CC3S
 ((
uöt16_t
)0x0003Ë

	)

9162 
	#TIM_CCMR2_CC3S_0
 ((
uöt16_t
)0x0001Ë

	)

9163 
	#TIM_CCMR2_CC3S_1
 ((
uöt16_t
)0x0002Ë

	)

9165 
	#TIM_CCMR2_OC3FE
 ((
uöt16_t
)0x0004Ë

	)

9166 
	#TIM_CCMR2_OC3PE
 ((
uöt16_t
)0x0008Ë

	)

9168 
	#TIM_CCMR2_OC3M
 ((
uöt16_t
)0x0070Ë

	)

9169 
	#TIM_CCMR2_OC3M_0
 ((
uöt16_t
)0x0010Ë

	)

9170 
	#TIM_CCMR2_OC3M_1
 ((
uöt16_t
)0x0020Ë

	)

9171 
	#TIM_CCMR2_OC3M_2
 ((
uöt16_t
)0x0040Ë

	)

9173 
	#TIM_CCMR2_OC3CE
 ((
uöt16_t
)0x0080Ë

	)

9175 
	#TIM_CCMR2_CC4S
 ((
uöt16_t
)0x0300Ë

	)

9176 
	#TIM_CCMR2_CC4S_0
 ((
uöt16_t
)0x0100Ë

	)

9177 
	#TIM_CCMR2_CC4S_1
 ((
uöt16_t
)0x0200Ë

	)

9179 
	#TIM_CCMR2_OC4FE
 ((
uöt16_t
)0x0400Ë

	)

9180 
	#TIM_CCMR2_OC4PE
 ((
uöt16_t
)0x0800Ë

	)

9182 
	#TIM_CCMR2_OC4M
 ((
uöt16_t
)0x7000Ë

	)

9183 
	#TIM_CCMR2_OC4M_0
 ((
uöt16_t
)0x1000Ë

	)

9184 
	#TIM_CCMR2_OC4M_1
 ((
uöt16_t
)0x2000Ë

	)

9185 
	#TIM_CCMR2_OC4M_2
 ((
uöt16_t
)0x4000Ë

	)

9187 
	#TIM_CCMR2_OC4CE
 ((
uöt16_t
)0x8000Ë

	)

9191 
	#TIM_CCMR2_IC3PSC
 ((
uöt16_t
)0x000CË

	)

9192 
	#TIM_CCMR2_IC3PSC_0
 ((
uöt16_t
)0x0004Ë

	)

9193 
	#TIM_CCMR2_IC3PSC_1
 ((
uöt16_t
)0x0008Ë

	)

9195 
	#TIM_CCMR2_IC3F
 ((
uöt16_t
)0x00F0Ë

	)

9196 
	#TIM_CCMR2_IC3F_0
 ((
uöt16_t
)0x0010Ë

	)

9197 
	#TIM_CCMR2_IC3F_1
 ((
uöt16_t
)0x0020Ë

	)

9198 
	#TIM_CCMR2_IC3F_2
 ((
uöt16_t
)0x0040Ë

	)

9199 
	#TIM_CCMR2_IC3F_3
 ((
uöt16_t
)0x0080Ë

	)

9201 
	#TIM_CCMR2_IC4PSC
 ((
uöt16_t
)0x0C00Ë

	)

9202 
	#TIM_CCMR2_IC4PSC_0
 ((
uöt16_t
)0x0400Ë

	)

9203 
	#TIM_CCMR2_IC4PSC_1
 ((
uöt16_t
)0x0800Ë

	)

9205 
	#TIM_CCMR2_IC4F
 ((
uöt16_t
)0xF000Ë

	)

9206 
	#TIM_CCMR2_IC4F_0
 ((
uöt16_t
)0x1000Ë

	)

9207 
	#TIM_CCMR2_IC4F_1
 ((
uöt16_t
)0x2000Ë

	)

9208 
	#TIM_CCMR2_IC4F_2
 ((
uöt16_t
)0x4000Ë

	)

9209 
	#TIM_CCMR2_IC4F_3
 ((
uöt16_t
)0x8000Ë

	)

9212 
	#TIM_CCER_CC1E
 ((
uöt16_t
)0x0001Ë

	)

9213 
	#TIM_CCER_CC1P
 ((
uöt16_t
)0x0002Ë

	)

9214 
	#TIM_CCER_CC1NE
 ((
uöt16_t
)0x0004Ë

	)

9215 
	#TIM_CCER_CC1NP
 ((
uöt16_t
)0x0008Ë

	)

9216 
	#TIM_CCER_CC2E
 ((
uöt16_t
)0x0010Ë

	)

9217 
	#TIM_CCER_CC2P
 ((
uöt16_t
)0x0020Ë

	)

9218 
	#TIM_CCER_CC2NE
 ((
uöt16_t
)0x0040Ë

	)

9219 
	#TIM_CCER_CC2NP
 ((
uöt16_t
)0x0080Ë

	)

9220 
	#TIM_CCER_CC3E
 ((
uöt16_t
)0x0100Ë

	)

9221 
	#TIM_CCER_CC3P
 ((
uöt16_t
)0x0200Ë

	)

9222 
	#TIM_CCER_CC3NE
 ((
uöt16_t
)0x0400Ë

	)

9223 
	#TIM_CCER_CC3NP
 ((
uöt16_t
)0x0800Ë

	)

9224 
	#TIM_CCER_CC4E
 ((
uöt16_t
)0x1000Ë

	)

9225 
	#TIM_CCER_CC4P
 ((
uöt16_t
)0x2000Ë

	)

9226 
	#TIM_CCER_CC4NP
 ((
uöt16_t
)0x8000Ë

	)

9229 
	#TIM_CNT_CNT
 ((
uöt16_t
)0xFFFFË

	)

9232 
	#TIM_PSC_PSC
 ((
uöt16_t
)0xFFFFË

	)

9235 
	#TIM_ARR_ARR
 ((
uöt16_t
)0xFFFFË

	)

9238 
	#TIM_RCR_REP
 ((
uöt8_t
)0xFFË

	)

9241 
	#TIM_CCR1_CCR1
 ((
uöt16_t
)0xFFFFË

	)

9244 
	#TIM_CCR2_CCR2
 ((
uöt16_t
)0xFFFFË

	)

9247 
	#TIM_CCR3_CCR3
 ((
uöt16_t
)0xFFFFË

	)

9250 
	#TIM_CCR4_CCR4
 ((
uöt16_t
)0xFFFFË

	)

9253 
	#TIM_BDTR_DTG
 ((
uöt16_t
)0x00FFË

	)

9254 
	#TIM_BDTR_DTG_0
 ((
uöt16_t
)0x0001Ë

	)

9255 
	#TIM_BDTR_DTG_1
 ((
uöt16_t
)0x0002Ë

	)

9256 
	#TIM_BDTR_DTG_2
 ((
uöt16_t
)0x0004Ë

	)

9257 
	#TIM_BDTR_DTG_3
 ((
uöt16_t
)0x0008Ë

	)

9258 
	#TIM_BDTR_DTG_4
 ((
uöt16_t
)0x0010Ë

	)

9259 
	#TIM_BDTR_DTG_5
 ((
uöt16_t
)0x0020Ë

	)

9260 
	#TIM_BDTR_DTG_6
 ((
uöt16_t
)0x0040Ë

	)

9261 
	#TIM_BDTR_DTG_7
 ((
uöt16_t
)0x0080Ë

	)

9263 
	#TIM_BDTR_LOCK
 ((
uöt16_t
)0x0300Ë

	)

9264 
	#TIM_BDTR_LOCK_0
 ((
uöt16_t
)0x0100Ë

	)

9265 
	#TIM_BDTR_LOCK_1
 ((
uöt16_t
)0x0200Ë

	)

9267 
	#TIM_BDTR_OSSI
 ((
uöt16_t
)0x0400Ë

	)

9268 
	#TIM_BDTR_OSSR
 ((
uöt16_t
)0x0800Ë

	)

9269 
	#TIM_BDTR_BKE
 ((
uöt16_t
)0x1000Ë

	)

9270 
	#TIM_BDTR_BKP
 ((
uöt16_t
)0x2000Ë

	)

9271 
	#TIM_BDTR_AOE
 ((
uöt16_t
)0x4000Ë

	)

9272 
	#TIM_BDTR_MOE
 ((
uöt16_t
)0x8000Ë

	)

9275 
	#TIM_DCR_DBA
 ((
uöt16_t
)0x001FË

	)

9276 
	#TIM_DCR_DBA_0
 ((
uöt16_t
)0x0001Ë

	)

9277 
	#TIM_DCR_DBA_1
 ((
uöt16_t
)0x0002Ë

	)

9278 
	#TIM_DCR_DBA_2
 ((
uöt16_t
)0x0004Ë

	)

9279 
	#TIM_DCR_DBA_3
 ((
uöt16_t
)0x0008Ë

	)

9280 
	#TIM_DCR_DBA_4
 ((
uöt16_t
)0x0010Ë

	)

9282 
	#TIM_DCR_DBL
 ((
uöt16_t
)0x1F00Ë

	)

9283 
	#TIM_DCR_DBL_0
 ((
uöt16_t
)0x0100Ë

	)

9284 
	#TIM_DCR_DBL_1
 ((
uöt16_t
)0x0200Ë

	)

9285 
	#TIM_DCR_DBL_2
 ((
uöt16_t
)0x0400Ë

	)

9286 
	#TIM_DCR_DBL_3
 ((
uöt16_t
)0x0800Ë

	)

9287 
	#TIM_DCR_DBL_4
 ((
uöt16_t
)0x1000Ë

	)

9290 
	#TIM_DMAR_DMAB
 ((
uöt16_t
)0xFFFFË

	)

9293 
	#TIM_OR_TI4_RMP
 ((
uöt16_t
)0x00C0Ë

	)

9294 
	#TIM_OR_TI4_RMP_0
 ((
uöt16_t
)0x0040Ë

	)

9295 
	#TIM_OR_TI4_RMP_1
 ((
uöt16_t
)0x0080Ë

	)

9296 
	#TIM_OR_ITR1_RMP
 ((
uöt16_t
)0x0C00Ë

	)

9297 
	#TIM_OR_ITR1_RMP_0
 ((
uöt16_t
)0x0400Ë

	)

9298 
	#TIM_OR_ITR1_RMP_1
 ((
uöt16_t
)0x0800Ë

	)

9307 
	#USART_SR_PE
 ((
uöt16_t
)0x0001Ë

	)

9308 
	#USART_SR_FE
 ((
uöt16_t
)0x0002Ë

	)

9309 
	#USART_SR_NE
 ((
uöt16_t
)0x0004Ë

	)

9310 
	#USART_SR_ORE
 ((
uöt16_t
)0x0008Ë

	)

9311 
	#USART_SR_IDLE
 ((
uöt16_t
)0x0010Ë

	)

9312 
	#USART_SR_RXNE
 ((
uöt16_t
)0x0020Ë

	)

9313 
	#USART_SR_TC
 ((
uöt16_t
)0x0040Ë

	)

9314 
	#USART_SR_TXE
 ((
uöt16_t
)0x0080Ë

	)

9315 
	#USART_SR_LBD
 ((
uöt16_t
)0x0100Ë

	)

9316 
	#USART_SR_CTS
 ((
uöt16_t
)0x0200Ë

	)

9319 
	#USART_DR_DR
 ((
uöt16_t
)0x01FFË

	)

9322 
	#USART_BRR_DIV_Fø˘i⁄
 ((
uöt16_t
)0x000FË

	)

9323 
	#USART_BRR_DIV_M™tisß
 ((
uöt16_t
)0xFFF0Ë

	)

9326 
	#USART_CR1_SBK
 ((
uöt16_t
)0x0001Ë

	)

9327 
	#USART_CR1_RWU
 ((
uöt16_t
)0x0002Ë

	)

9328 
	#USART_CR1_RE
 ((
uöt16_t
)0x0004Ë

	)

9329 
	#USART_CR1_TE
 ((
uöt16_t
)0x0008Ë

	)

9330 
	#USART_CR1_IDLEIE
 ((
uöt16_t
)0x0010Ë

	)

9331 
	#USART_CR1_RXNEIE
 ((
uöt16_t
)0x0020Ë

	)

9332 
	#USART_CR1_TCIE
 ((
uöt16_t
)0x0040Ë

	)

9333 
	#USART_CR1_TXEIE
 ((
uöt16_t
)0x0080Ë

	)

9334 
	#USART_CR1_PEIE
 ((
uöt16_t
)0x0100Ë

	)

9335 
	#USART_CR1_PS
 ((
uöt16_t
)0x0200Ë

	)

9336 
	#USART_CR1_PCE
 ((
uöt16_t
)0x0400Ë

	)

9337 
	#USART_CR1_WAKE
 ((
uöt16_t
)0x0800Ë

	)

9338 
	#USART_CR1_M
 ((
uöt16_t
)0x1000Ë

	)

9339 
	#USART_CR1_UE
 ((
uöt16_t
)0x2000Ë

	)

9340 
	#USART_CR1_OVER8
 ((
uöt16_t
)0x8000Ë

	)

9343 
	#USART_CR2_ADD
 ((
uöt16_t
)0x000FË

	)

9344 
	#USART_CR2_LBDL
 ((
uöt16_t
)0x0020Ë

	)

9345 
	#USART_CR2_LBDIE
 ((
uöt16_t
)0x0040Ë

	)

9346 
	#USART_CR2_LBCL
 ((
uöt16_t
)0x0100Ë

	)

9347 
	#USART_CR2_CPHA
 ((
uöt16_t
)0x0200Ë

	)

9348 
	#USART_CR2_CPOL
 ((
uöt16_t
)0x0400Ë

	)

9349 
	#USART_CR2_CLKEN
 ((
uöt16_t
)0x0800Ë

	)

9351 
	#USART_CR2_STOP
 ((
uöt16_t
)0x3000Ë

	)

9352 
	#USART_CR2_STOP_0
 ((
uöt16_t
)0x1000Ë

	)

9353 
	#USART_CR2_STOP_1
 ((
uöt16_t
)0x2000Ë

	)

9355 
	#USART_CR2_LINEN
 ((
uöt16_t
)0x4000Ë

	)

9358 
	#USART_CR3_EIE
 ((
uöt16_t
)0x0001Ë

	)

9359 
	#USART_CR3_IREN
 ((
uöt16_t
)0x0002Ë

	)

9360 
	#USART_CR3_IRLP
 ((
uöt16_t
)0x0004Ë

	)

9361 
	#USART_CR3_HDSEL
 ((
uöt16_t
)0x0008Ë

	)

9362 
	#USART_CR3_NACK
 ((
uöt16_t
)0x0010Ë

	)

9363 
	#USART_CR3_SCEN
 ((
uöt16_t
)0x0020Ë

	)

9364 
	#USART_CR3_DMAR
 ((
uöt16_t
)0x0040Ë

	)

9365 
	#USART_CR3_DMAT
 ((
uöt16_t
)0x0080Ë

	)

9366 
	#USART_CR3_RTSE
 ((
uöt16_t
)0x0100Ë

	)

9367 
	#USART_CR3_CTSE
 ((
uöt16_t
)0x0200Ë

	)

9368 
	#USART_CR3_CTSIE
 ((
uöt16_t
)0x0400Ë

	)

9369 
	#USART_CR3_ONEBIT
 ((
uöt16_t
)0x0800Ë

	)

9372 
	#USART_GTPR_PSC
 ((
uöt16_t
)0x00FFË

	)

9373 
	#USART_GTPR_PSC_0
 ((
uöt16_t
)0x0001Ë

	)

9374 
	#USART_GTPR_PSC_1
 ((
uöt16_t
)0x0002Ë

	)

9375 
	#USART_GTPR_PSC_2
 ((
uöt16_t
)0x0004Ë

	)

9376 
	#USART_GTPR_PSC_3
 ((
uöt16_t
)0x0008Ë

	)

9377 
	#USART_GTPR_PSC_4
 ((
uöt16_t
)0x0010Ë

	)

9378 
	#USART_GTPR_PSC_5
 ((
uöt16_t
)0x0020Ë

	)

9379 
	#USART_GTPR_PSC_6
 ((
uöt16_t
)0x0040Ë

	)

9380 
	#USART_GTPR_PSC_7
 ((
uöt16_t
)0x0080Ë

	)

9382 
	#USART_GTPR_GT
 ((
uöt16_t
)0xFF00Ë

	)

9390 
	#WWDG_CR_T
 ((
uöt8_t
)0x7FË

	)

9391 
	#WWDG_CR_T0
 ((
uöt8_t
)0x01Ë

	)

9392 
	#WWDG_CR_T1
 ((
uöt8_t
)0x02Ë

	)

9393 
	#WWDG_CR_T2
 ((
uöt8_t
)0x04Ë

	)

9394 
	#WWDG_CR_T3
 ((
uöt8_t
)0x08Ë

	)

9395 
	#WWDG_CR_T4
 ((
uöt8_t
)0x10Ë

	)

9396 
	#WWDG_CR_T5
 ((
uöt8_t
)0x20Ë

	)

9397 
	#WWDG_CR_T6
 ((
uöt8_t
)0x40Ë

	)

9399 
	#WWDG_CR_WDGA
 ((
uöt8_t
)0x80Ë

	)

9402 
	#WWDG_CFR_W
 ((
uöt16_t
)0x007FË

	)

9403 
	#WWDG_CFR_W0
 ((
uöt16_t
)0x0001Ë

	)

9404 
	#WWDG_CFR_W1
 ((
uöt16_t
)0x0002Ë

	)

9405 
	#WWDG_CFR_W2
 ((
uöt16_t
)0x0004Ë

	)

9406 
	#WWDG_CFR_W3
 ((
uöt16_t
)0x0008Ë

	)

9407 
	#WWDG_CFR_W4
 ((
uöt16_t
)0x0010Ë

	)

9408 
	#WWDG_CFR_W5
 ((
uöt16_t
)0x0020Ë

	)

9409 
	#WWDG_CFR_W6
 ((
uöt16_t
)0x0040Ë

	)

9411 
	#WWDG_CFR_WDGTB
 ((
uöt16_t
)0x0180Ë

	)

9412 
	#WWDG_CFR_WDGTB0
 ((
uöt16_t
)0x0080Ë

	)

9413 
	#WWDG_CFR_WDGTB1
 ((
uöt16_t
)0x0100Ë

	)

9415 
	#WWDG_CFR_EWI
 ((
uöt16_t
)0x0200Ë

	)

9418 
	#WWDG_SR_EWIF
 ((
uöt8_t
)0x01Ë

	)

9427 
	#DBGMCU_IDCODE_DEV_ID
 ((
uöt32_t
)0x00000FFF)

	)

9428 
	#DBGMCU_IDCODE_REV_ID
 ((
uöt32_t
)0xFFFF0000)

	)

9431 
	#DBGMCU_CR_DBG_SLEEP
 ((
uöt32_t
)0x00000001)

	)

9432 
	#DBGMCU_CR_DBG_STOP
 ((
uöt32_t
)0x00000002)

	)

9433 
	#DBGMCU_CR_DBG_STANDBY
 ((
uöt32_t
)0x00000004)

	)

9434 
	#DBGMCU_CR_TRACE_IOEN
 ((
uöt32_t
)0x00000020)

	)

9436 
	#DBGMCU_CR_TRACE_MODE
 ((
uöt32_t
)0x000000C0)

	)

9437 
	#DBGMCU_CR_TRACE_MODE_0
 ((
uöt32_t
)0x00000040)

	)

9438 
	#DBGMCU_CR_TRACE_MODE_1
 ((
uöt32_t
)0x00000080)

	)

9441 
	#DBGMCU_APB1_FZ_DBG_TIM2_STOP
 ((
uöt32_t
)0x00000001)

	)

9442 
	#DBGMCU_APB1_FZ_DBG_TIM3_STOP
 ((
uöt32_t
)0x00000002)

	)

9443 
	#DBGMCU_APB1_FZ_DBG_TIM4_STOP
 ((
uöt32_t
)0x00000004)

	)

9444 
	#DBGMCU_APB1_FZ_DBG_TIM5_STOP
 ((
uöt32_t
)0x00000008)

	)

9445 
	#DBGMCU_APB1_FZ_DBG_TIM6_STOP
 ((
uöt32_t
)0x00000010)

	)

9446 
	#DBGMCU_APB1_FZ_DBG_TIM7_STOP
 ((
uöt32_t
)0x00000020)

	)

9447 
	#DBGMCU_APB1_FZ_DBG_TIM12_STOP
 ((
uöt32_t
)0x00000040)

	)

9448 
	#DBGMCU_APB1_FZ_DBG_TIM13_STOP
 ((
uöt32_t
)0x00000080)

	)

9449 
	#DBGMCU_APB1_FZ_DBG_TIM14_STOP
 ((
uöt32_t
)0x00000100)

	)

9450 
	#DBGMCU_APB1_FZ_DBG_RTC_STOP
 ((
uöt32_t
)0x00000400)

	)

9451 
	#DBGMCU_APB1_FZ_DBG_WWDG_STOP
 ((
uöt32_t
)0x00000800)

	)

9452 
	#DBGMCU_APB1_FZ_DBG_IWDG_STOP
 ((
uöt32_t
)0x00001000)

	)

9453 
	#DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00200000)

	)

9454 
	#DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00400000)

	)

9455 
	#DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00800000)

	)

9456 
	#DBGMCU_APB1_FZ_DBG_CAN1_STOP
 ((
uöt32_t
)0x02000000)

	)

9457 
	#DBGMCU_APB1_FZ_DBG_CAN2_STOP
 ((
uöt32_t
)0x04000000)

	)

9459 
	#DBGMCU_APB1_FZ_DBG_IWDEG_STOP
 
DBGMCU_APB1_FZ_DBG_IWDG_STOP


	)

9462 
	#DBGMCU_APB1_FZ_DBG_TIM1_STOP
 ((
uöt32_t
)0x00000001)

	)

9463 
	#DBGMCU_APB1_FZ_DBG_TIM8_STOP
 ((
uöt32_t
)0x00000002)

	)

9464 
	#DBGMCU_APB1_FZ_DBG_TIM9_STOP
 ((
uöt32_t
)0x00010000)

	)

9465 
	#DBGMCU_APB1_FZ_DBG_TIM10_STOP
 ((
uöt32_t
)0x00020000)

	)

9466 
	#DBGMCU_APB1_FZ_DBG_TIM11_STOP
 ((
uöt32_t
)0x00040000)

	)

9474 
	#ETH_MACCR_WD
 ((
uöt32_t
)0x00800000Ë

	)

9475 
	#ETH_MACCR_JD
 ((
uöt32_t
)0x00400000Ë

	)

9476 
	#ETH_MACCR_IFG
 ((
uöt32_t
)0x000E0000Ë

	)

9477 
	#ETH_MACCR_IFG_96Bô
 ((
uöt32_t
)0x00000000Ë

	)

9478 
	#ETH_MACCR_IFG_88Bô
 ((
uöt32_t
)0x00020000Ë

	)

9479 
	#ETH_MACCR_IFG_80Bô
 ((
uöt32_t
)0x00040000Ë

	)

9480 
	#ETH_MACCR_IFG_72Bô
 ((
uöt32_t
)0x00060000Ë

	)

9481 
	#ETH_MACCR_IFG_64Bô
 ((
uöt32_t
)0x00080000Ë

	)

9482 
	#ETH_MACCR_IFG_56Bô
 ((
uöt32_t
)0x000A0000Ë

	)

9483 
	#ETH_MACCR_IFG_48Bô
 ((
uöt32_t
)0x000C0000Ë

	)

9484 
	#ETH_MACCR_IFG_40Bô
 ((
uöt32_t
)0x000E0000Ë

	)

9485 
	#ETH_MACCR_CSD
 ((
uöt32_t
)0x00010000Ë

	)

9486 
	#ETH_MACCR_FES
 ((
uöt32_t
)0x00004000Ë

	)

9487 
	#ETH_MACCR_ROD
 ((
uöt32_t
)0x00002000Ë

	)

9488 
	#ETH_MACCR_LM
 ((
uöt32_t
)0x00001000Ë

	)

9489 
	#ETH_MACCR_DM
 ((
uöt32_t
)0x00000800Ë

	)

9490 
	#ETH_MACCR_IPCO
 ((
uöt32_t
)0x00000400Ë

	)

9491 
	#ETH_MACCR_RD
 ((
uöt32_t
)0x00000200Ë

	)

9492 
	#ETH_MACCR_APCS
 ((
uöt32_t
)0x00000080Ë

	)

9493 
	#ETH_MACCR_BL
 ((
uöt32_t
)0x00000060Ë

	)

9495 
	#ETH_MACCR_BL_10
 ((
uöt32_t
)0x00000000Ë

	)

9496 
	#ETH_MACCR_BL_8
 ((
uöt32_t
)0x00000020Ë

	)

9497 
	#ETH_MACCR_BL_4
 ((
uöt32_t
)0x00000040Ë

	)

9498 
	#ETH_MACCR_BL_1
 ((
uöt32_t
)0x00000060Ë

	)

9499 
	#ETH_MACCR_DC
 ((
uöt32_t
)0x00000010Ë

	)

9500 
	#ETH_MACCR_TE
 ((
uöt32_t
)0x00000008Ë

	)

9501 
	#ETH_MACCR_RE
 ((
uöt32_t
)0x00000004Ë

	)

9504 
	#ETH_MACFFR_RA
 ((
uöt32_t
)0x80000000Ë

	)

9505 
	#ETH_MACFFR_HPF
 ((
uöt32_t
)0x00000400Ë

	)

9506 
	#ETH_MACFFR_SAF
 ((
uöt32_t
)0x00000200Ë

	)

9507 
	#ETH_MACFFR_SAIF
 ((
uöt32_t
)0x00000100Ë

	)

9508 
	#ETH_MACFFR_PCF
 ((
uöt32_t
)0x000000C0Ë

	)

9509 
	#ETH_MACFFR_PCF_BlockAŒ
 ((
uöt32_t
)0x00000040Ë

	)

9510 
	#ETH_MACFFR_PCF_F‹w¨dAŒ
 ((
uöt32_t
)0x00000080Ë

	)

9511 
	#ETH_MACFFR_PCF_F‹w¨dPas£dAddrFûãr
 ((
uöt32_t
)0x000000C0Ë

	)

9512 
	#ETH_MACFFR_BFD
 ((
uöt32_t
)0x00000020Ë

	)

9513 
	#ETH_MACFFR_PAM
 ((
uöt32_t
)0x00000010Ë

	)

9514 
	#ETH_MACFFR_DAIF
 ((
uöt32_t
)0x00000008Ë

	)

9515 
	#ETH_MACFFR_HM
 ((
uöt32_t
)0x00000004Ë

	)

9516 
	#ETH_MACFFR_HU
 ((
uöt32_t
)0x00000002Ë

	)

9517 
	#ETH_MACFFR_PM
 ((
uöt32_t
)0x00000001Ë

	)

9520 
	#ETH_MACHTHR_HTH
 ((
uöt32_t
)0xFFFFFFFFË

	)

9523 
	#ETH_MACHTLR_HTL
 ((
uöt32_t
)0xFFFFFFFFË

	)

9526 
	#ETH_MACMIIAR_PA
 ((
uöt32_t
)0x0000F800Ë

	)

9527 
	#ETH_MACMIIAR_MR
 ((
uöt32_t
)0x000007C0Ë

	)

9528 
	#ETH_MACMIIAR_CR
 ((
uöt32_t
)0x0000001CË

	)

9529 
	#ETH_MACMIIAR_CR_Div42
 ((
uöt32_t
)0x00000000Ë

	)

9530 
	#ETH_MACMIIAR_CR_Div62
 ((
uöt32_t
)0x00000004Ë

	)

9531 
	#ETH_MACMIIAR_CR_Div16
 ((
uöt32_t
)0x00000008Ë

	)

9532 
	#ETH_MACMIIAR_CR_Div26
 ((
uöt32_t
)0x0000000CË

	)

9533 
	#ETH_MACMIIAR_CR_Div102
 ((
uöt32_t
)0x00000010Ë

	)

9534 
	#ETH_MACMIIAR_MW
 ((
uöt32_t
)0x00000002Ë

	)

9535 
	#ETH_MACMIIAR_MB
 ((
uöt32_t
)0x00000001Ë

	)

9538 
	#ETH_MACMIIDR_MD
 ((
uöt32_t
)0x0000FFFFË

	)

9541 
	#ETH_MACFCR_PT
 ((
uöt32_t
)0xFFFF0000Ë

	)

9542 
	#ETH_MACFCR_ZQPD
 ((
uöt32_t
)0x00000080Ë

	)

9543 
	#ETH_MACFCR_PLT
 ((
uöt32_t
)0x00000030Ë

	)

9544 
	#ETH_MACFCR_PLT_Möus4
 ((
uöt32_t
)0x00000000Ë

	)

9545 
	#ETH_MACFCR_PLT_Möus28
 ((
uöt32_t
)0x00000010Ë

	)

9546 
	#ETH_MACFCR_PLT_Möus144
 ((
uöt32_t
)0x00000020Ë

	)

9547 
	#ETH_MACFCR_PLT_Möus256
 ((
uöt32_t
)0x00000030Ë

	)

9548 
	#ETH_MACFCR_UPFD
 ((
uöt32_t
)0x00000008Ë

	)

9549 
	#ETH_MACFCR_RFCE
 ((
uöt32_t
)0x00000004Ë

	)

9550 
	#ETH_MACFCR_TFCE
 ((
uöt32_t
)0x00000002Ë

	)

9551 
	#ETH_MACFCR_FCBBPA
 ((
uöt32_t
)0x00000001Ë

	)

9554 
	#ETH_MACVLANTR_VLANTC
 ((
uöt32_t
)0x00010000Ë

	)

9555 
	#ETH_MACVLANTR_VLANTI
 ((
uöt32_t
)0x0000FFFFË

	)

9558 
	#ETH_MACRWUFFR_D
 ((
uöt32_t
)0xFFFFFFFFË

	)

9572 
	#ETH_MACPMTCSR_WFFRPR
 ((
uöt32_t
)0x80000000Ë

	)

9573 
	#ETH_MACPMTCSR_GU
 ((
uöt32_t
)0x00000200Ë

	)

9574 
	#ETH_MACPMTCSR_WFR
 ((
uöt32_t
)0x00000040Ë

	)

9575 
	#ETH_MACPMTCSR_MPR
 ((
uöt32_t
)0x00000020Ë

	)

9576 
	#ETH_MACPMTCSR_WFE
 ((
uöt32_t
)0x00000004Ë

	)

9577 
	#ETH_MACPMTCSR_MPE
 ((
uöt32_t
)0x00000002Ë

	)

9578 
	#ETH_MACPMTCSR_PD
 ((
uöt32_t
)0x00000001Ë

	)

9581 
	#ETH_MACSR_TSTS
 ((
uöt32_t
)0x00000200Ë

	)

9582 
	#ETH_MACSR_MMCTS
 ((
uöt32_t
)0x00000040Ë

	)

9583 
	#ETH_MACSR_MMMCRS
 ((
uöt32_t
)0x00000020Ë

	)

9584 
	#ETH_MACSR_MMCS
 ((
uöt32_t
)0x00000010Ë

	)

9585 
	#ETH_MACSR_PMTS
 ((
uöt32_t
)0x00000008Ë

	)

9588 
	#ETH_MACIMR_TSTIM
 ((
uöt32_t
)0x00000200Ë

	)

9589 
	#ETH_MACIMR_PMTIM
 ((
uöt32_t
)0x00000008Ë

	)

9592 
	#ETH_MACA0HR_MACA0H
 ((
uöt32_t
)0x0000FFFFË

	)

9595 
	#ETH_MACA0LR_MACA0L
 ((
uöt32_t
)0xFFFFFFFFË

	)

9598 
	#ETH_MACA1HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

9599 
	#ETH_MACA1HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

9600 
	#ETH_MACA1HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

9601 
	#ETH_MACA1HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

9602 
	#ETH_MACA1HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

9603 
	#ETH_MACA1HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

9604 
	#ETH_MACA1HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

9605 
	#ETH_MACA1HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

9606 
	#ETH_MACA1HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

9607 
	#ETH_MACA1HR_MACA1H
 ((
uöt32_t
)0x0000FFFFË

	)

9610 
	#ETH_MACA1LR_MACA1L
 ((
uöt32_t
)0xFFFFFFFFË

	)

9613 
	#ETH_MACA2HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

9614 
	#ETH_MACA2HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

9615 
	#ETH_MACA2HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

9616 
	#ETH_MACA2HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

9617 
	#ETH_MACA2HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

9618 
	#ETH_MACA2HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

9619 
	#ETH_MACA2HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

9620 
	#ETH_MACA2HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

9621 
	#ETH_MACA2HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

9622 
	#ETH_MACA2HR_MACA2H
 ((
uöt32_t
)0x0000FFFFË

	)

9625 
	#ETH_MACA2LR_MACA2L
 ((
uöt32_t
)0xFFFFFFFFË

	)

9628 
	#ETH_MACA3HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

9629 
	#ETH_MACA3HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

9630 
	#ETH_MACA3HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

9631 
	#ETH_MACA3HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

9632 
	#ETH_MACA3HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

9633 
	#ETH_MACA3HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

9634 
	#ETH_MACA3HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

9635 
	#ETH_MACA3HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

9636 
	#ETH_MACA3HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

9637 
	#ETH_MACA3HR_MACA3H
 ((
uöt32_t
)0x0000FFFFË

	)

9640 
	#ETH_MACA3LR_MACA3L
 ((
uöt32_t
)0xFFFFFFFFË

	)

9647 
	#ETH_MMCCR_MCFHP
 ((
uöt32_t
)0x00000020Ë

	)

9648 
	#ETH_MMCCR_MCP
 ((
uöt32_t
)0x00000010Ë

	)

9649 
	#ETH_MMCCR_MCF
 ((
uöt32_t
)0x00000008Ë

	)

9650 
	#ETH_MMCCR_ROR
 ((
uöt32_t
)0x00000004Ë

	)

9651 
	#ETH_MMCCR_CSR
 ((
uöt32_t
)0x00000002Ë

	)

9652 
	#ETH_MMCCR_CR
 ((
uöt32_t
)0x00000001Ë

	)

9655 
	#ETH_MMCRIR_RGUFS
 ((
uöt32_t
)0x00020000Ë

	)

9656 
	#ETH_MMCRIR_RFAES
 ((
uöt32_t
)0x00000040Ë

	)

9657 
	#ETH_MMCRIR_RFCES
 ((
uöt32_t
)0x00000020Ë

	)

9660 
	#ETH_MMCTIR_TGFS
 ((
uöt32_t
)0x00200000Ë

	)

9661 
	#ETH_MMCTIR_TGFMSCS
 ((
uöt32_t
)0x00008000Ë

	)

9662 
	#ETH_MMCTIR_TGFSCS
 ((
uöt32_t
)0x00004000Ë

	)

9665 
	#ETH_MMCRIMR_RGUFM
 ((
uöt32_t
)0x00020000Ë

	)

9666 
	#ETH_MMCRIMR_RFAEM
 ((
uöt32_t
)0x00000040Ë

	)

9667 
	#ETH_MMCRIMR_RFCEM
 ((
uöt32_t
)0x00000020Ë

	)

9670 
	#ETH_MMCTIMR_TGFM
 ((
uöt32_t
)0x00200000Ë

	)

9671 
	#ETH_MMCTIMR_TGFMSCM
 ((
uöt32_t
)0x00008000Ë

	)

9672 
	#ETH_MMCTIMR_TGFSCM
 ((
uöt32_t
)0x00004000Ë

	)

9675 
	#ETH_MMCTGFSCCR_TGFSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

9678 
	#ETH_MMCTGFMSCCR_TGFMSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

9681 
	#ETH_MMCTGFCR_TGFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

9684 
	#ETH_MMCRFCECR_RFCEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

9687 
	#ETH_MMCRFAECR_RFAEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

9690 
	#ETH_MMCRGUFCR_RGUFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

9697 
	#ETH_PTPTSCR_TSCNT
 ((
uöt32_t
)0x00030000Ë

	)

9698 
	#ETH_PTPTSSR_TSSMRME
 ((
uöt32_t
)0x00008000Ë

	)

9699 
	#ETH_PTPTSSR_TSSEME
 ((
uöt32_t
)0x00004000Ë

	)

9700 
	#ETH_PTPTSSR_TSSIPV4FE
 ((
uöt32_t
)0x00002000Ë

	)

9701 
	#ETH_PTPTSSR_TSSIPV6FE
 ((
uöt32_t
)0x00001000Ë

	)

9702 
	#ETH_PTPTSSR_TSSPTPOEFE
 ((
uöt32_t
)0x00000800Ë

	)

9703 
	#ETH_PTPTSSR_TSPTPPSV2E
 ((
uöt32_t
)0x00000400Ë

	)

9704 
	#ETH_PTPTSSR_TSSSR
 ((
uöt32_t
)0x00000200Ë

	)

9705 
	#ETH_PTPTSSR_TSSARFE
 ((
uöt32_t
)0x00000100Ë

	)

9707 
	#ETH_PTPTSCR_TSARU
 ((
uöt32_t
)0x00000020Ë

	)

9708 
	#ETH_PTPTSCR_TSITE
 ((
uöt32_t
)0x00000010Ë

	)

9709 
	#ETH_PTPTSCR_TSSTU
 ((
uöt32_t
)0x00000008Ë

	)

9710 
	#ETH_PTPTSCR_TSSTI
 ((
uöt32_t
)0x00000004Ë

	)

9711 
	#ETH_PTPTSCR_TSFCU
 ((
uöt32_t
)0x00000002Ë

	)

9712 
	#ETH_PTPTSCR_TSE
 ((
uöt32_t
)0x00000001Ë

	)

9715 
	#ETH_PTPSSIR_STSSI
 ((
uöt32_t
)0x000000FFË

	)

9718 
	#ETH_PTPTSHR_STS
 ((
uöt32_t
)0xFFFFFFFFË

	)

9721 
	#ETH_PTPTSLR_STPNS
 ((
uöt32_t
)0x80000000Ë

	)

9722 
	#ETH_PTPTSLR_STSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

9725 
	#ETH_PTPTSHUR_TSUS
 ((
uöt32_t
)0xFFFFFFFFË

	)

9728 
	#ETH_PTPTSLUR_TSUPNS
 ((
uöt32_t
)0x80000000Ë

	)

9729 
	#ETH_PTPTSLUR_TSUSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

9732 
	#ETH_PTPTSAR_TSA
 ((
uöt32_t
)0xFFFFFFFFË

	)

9735 
	#ETH_PTPTTHR_TTSH
 ((
uöt32_t
)0xFFFFFFFFË

	)

9738 
	#ETH_PTPTTLR_TTSL
 ((
uöt32_t
)0xFFFFFFFFË

	)

9741 
	#ETH_PTPTSSR_TSTTR
 ((
uöt32_t
)0x00000020Ë

	)

9742 
	#ETH_PTPTSSR_TSSO
 ((
uöt32_t
)0x00000010Ë

	)

9749 
	#ETH_DMABMR_AAB
 ((
uöt32_t
)0x02000000Ë

	)

9750 
	#ETH_DMABMR_FPM
 ((
uöt32_t
)0x01000000Ë

	)

9751 
	#ETH_DMABMR_USP
 ((
uöt32_t
)0x00800000Ë

	)

9752 
	#ETH_DMABMR_RDP
 ((
uöt32_t
)0x007E0000Ë

	)

9753 
	#ETH_DMABMR_RDP_1Bót
 ((
uöt32_t
)0x00020000Ë

	)

9754 
	#ETH_DMABMR_RDP_2Bót
 ((
uöt32_t
)0x00040000Ë

	)

9755 
	#ETH_DMABMR_RDP_4Bót
 ((
uöt32_t
)0x00080000Ë

	)

9756 
	#ETH_DMABMR_RDP_8Bót
 ((
uöt32_t
)0x00100000Ë

	)

9757 
	#ETH_DMABMR_RDP_16Bót
 ((
uöt32_t
)0x00200000Ë

	)

9758 
	#ETH_DMABMR_RDP_32Bót
 ((
uöt32_t
)0x00400000Ë

	)

9759 
	#ETH_DMABMR_RDP_4xPBL_4Bót
 ((
uöt32_t
)0x01020000Ë

	)

9760 
	#ETH_DMABMR_RDP_4xPBL_8Bót
 ((
uöt32_t
)0x01040000Ë

	)

9761 
	#ETH_DMABMR_RDP_4xPBL_16Bót
 ((
uöt32_t
)0x01080000Ë

	)

9762 
	#ETH_DMABMR_RDP_4xPBL_32Bót
 ((
uöt32_t
)0x01100000Ë

	)

9763 
	#ETH_DMABMR_RDP_4xPBL_64Bót
 ((
uöt32_t
)0x01200000Ë

	)

9764 
	#ETH_DMABMR_RDP_4xPBL_128Bót
 ((
uöt32_t
)0x01400000Ë

	)

9765 
	#ETH_DMABMR_FB
 ((
uöt32_t
)0x00010000Ë

	)

9766 
	#ETH_DMABMR_RTPR
 ((
uöt32_t
)0x0000C000Ë

	)

9767 
	#ETH_DMABMR_RTPR_1_1
 ((
uöt32_t
)0x00000000Ë

	)

9768 
	#ETH_DMABMR_RTPR_2_1
 ((
uöt32_t
)0x00004000Ë

	)

9769 
	#ETH_DMABMR_RTPR_3_1
 ((
uöt32_t
)0x00008000Ë

	)

9770 
	#ETH_DMABMR_RTPR_4_1
 ((
uöt32_t
)0x0000C000Ë

	)

9771 
	#ETH_DMABMR_PBL
 ((
uöt32_t
)0x00003F00Ë

	)

9772 
	#ETH_DMABMR_PBL_1Bót
 ((
uöt32_t
)0x00000100Ë

	)

9773 
	#ETH_DMABMR_PBL_2Bót
 ((
uöt32_t
)0x00000200Ë

	)

9774 
	#ETH_DMABMR_PBL_4Bót
 ((
uöt32_t
)0x00000400Ë

	)

9775 
	#ETH_DMABMR_PBL_8Bót
 ((
uöt32_t
)0x00000800Ë

	)

9776 
	#ETH_DMABMR_PBL_16Bót
 ((
uöt32_t
)0x00001000Ë

	)

9777 
	#ETH_DMABMR_PBL_32Bót
 ((
uöt32_t
)0x00002000Ë

	)

9778 
	#ETH_DMABMR_PBL_4xPBL_4Bót
 ((
uöt32_t
)0x01000100Ë

	)

9779 
	#ETH_DMABMR_PBL_4xPBL_8Bót
 ((
uöt32_t
)0x01000200Ë

	)

9780 
	#ETH_DMABMR_PBL_4xPBL_16Bót
 ((
uöt32_t
)0x01000400Ë

	)

9781 
	#ETH_DMABMR_PBL_4xPBL_32Bót
 ((
uöt32_t
)0x01000800Ë

	)

9782 
	#ETH_DMABMR_PBL_4xPBL_64Bót
 ((
uöt32_t
)0x01001000Ë

	)

9783 
	#ETH_DMABMR_PBL_4xPBL_128Bót
 ((
uöt32_t
)0x01002000Ë

	)

9784 
	#ETH_DMABMR_EDE
 ((
uöt32_t
)0x00000080Ë

	)

9785 
	#ETH_DMABMR_DSL
 ((
uöt32_t
)0x0000007CË

	)

9786 
	#ETH_DMABMR_DA
 ((
uöt32_t
)0x00000002Ë

	)

9787 
	#ETH_DMABMR_SR
 ((
uöt32_t
)0x00000001Ë

	)

9790 
	#ETH_DMATPDR_TPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

9793 
	#ETH_DMARPDR_RPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

9796 
	#ETH_DMARDLAR_SRL
 ((
uöt32_t
)0xFFFFFFFFË

	)

9799 
	#ETH_DMATDLAR_STL
 ((
uöt32_t
)0xFFFFFFFFË

	)

9802 
	#ETH_DMASR_TSTS
 ((
uöt32_t
)0x20000000Ë

	)

9803 
	#ETH_DMASR_PMTS
 ((
uöt32_t
)0x10000000Ë

	)

9804 
	#ETH_DMASR_MMCS
 ((
uöt32_t
)0x08000000Ë

	)

9805 
	#ETH_DMASR_EBS
 ((
uöt32_t
)0x03800000Ë

	)

9807 
	#ETH_DMASR_EBS_DescAc˚ss
 ((
uöt32_t
)0x02000000Ë

	)

9808 
	#ETH_DMASR_EBS_RódTønsf
 ((
uöt32_t
)0x01000000Ë

	)

9809 
	#ETH_DMASR_EBS_D©aTønsfTx
 ((
uöt32_t
)0x00800000Ë

	)

9810 
	#ETH_DMASR_TPS
 ((
uöt32_t
)0x00700000Ë

	)

9811 
	#ETH_DMASR_TPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

9812 
	#ETH_DMASR_TPS_Fëchög
 ((
uöt32_t
)0x00100000Ë

	)

9813 
	#ETH_DMASR_TPS_Waôög
 ((
uöt32_t
)0x00200000Ë

	)

9814 
	#ETH_DMASR_TPS_Ródög
 ((
uöt32_t
)0x00300000Ë

	)

9815 
	#ETH_DMASR_TPS_Su•íded
 ((
uöt32_t
)0x00600000Ë

	)

9816 
	#ETH_DMASR_TPS_Closög
 ((
uöt32_t
)0x00700000Ë

	)

9817 
	#ETH_DMASR_RPS
 ((
uöt32_t
)0x000E0000Ë

	)

9818 
	#ETH_DMASR_RPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

9819 
	#ETH_DMASR_RPS_Fëchög
 ((
uöt32_t
)0x00020000Ë

	)

9820 
	#ETH_DMASR_RPS_Waôög
 ((
uöt32_t
)0x00060000Ë

	)

9821 
	#ETH_DMASR_RPS_Su•íded
 ((
uöt32_t
)0x00080000Ë

	)

9822 
	#ETH_DMASR_RPS_Closög
 ((
uöt32_t
)0x000A0000Ë

	)

9823 
	#ETH_DMASR_RPS_Queuög
 ((
uöt32_t
)0x000E0000Ë

	)

9824 
	#ETH_DMASR_NIS
 ((
uöt32_t
)0x00010000Ë

	)

9825 
	#ETH_DMASR_AIS
 ((
uöt32_t
)0x00008000Ë

	)

9826 
	#ETH_DMASR_ERS
 ((
uöt32_t
)0x00004000Ë

	)

9827 
	#ETH_DMASR_FBES
 ((
uöt32_t
)0x00002000Ë

	)

9828 
	#ETH_DMASR_ETS
 ((
uöt32_t
)0x00000400Ë

	)

9829 
	#ETH_DMASR_RWTS
 ((
uöt32_t
)0x00000200Ë

	)

9830 
	#ETH_DMASR_RPSS
 ((
uöt32_t
)0x00000100Ë

	)

9831 
	#ETH_DMASR_RBUS
 ((
uöt32_t
)0x00000080Ë

	)

9832 
	#ETH_DMASR_RS
 ((
uöt32_t
)0x00000040Ë

	)

9833 
	#ETH_DMASR_TUS
 ((
uöt32_t
)0x00000020Ë

	)

9834 
	#ETH_DMASR_ROS
 ((
uöt32_t
)0x00000010Ë

	)

9835 
	#ETH_DMASR_TJTS
 ((
uöt32_t
)0x00000008Ë

	)

9836 
	#ETH_DMASR_TBUS
 ((
uöt32_t
)0x00000004Ë

	)

9837 
	#ETH_DMASR_TPSS
 ((
uöt32_t
)0x00000002Ë

	)

9838 
	#ETH_DMASR_TS
 ((
uöt32_t
)0x00000001Ë

	)

9841 
	#ETH_DMAOMR_DTCEFD
 ((
uöt32_t
)0x04000000Ë

	)

9842 
	#ETH_DMAOMR_RSF
 ((
uöt32_t
)0x02000000Ë

	)

9843 
	#ETH_DMAOMR_DFRF
 ((
uöt32_t
)0x01000000Ë

	)

9844 
	#ETH_DMAOMR_TSF
 ((
uöt32_t
)0x00200000Ë

	)

9845 
	#ETH_DMAOMR_FTF
 ((
uöt32_t
)0x00100000Ë

	)

9846 
	#ETH_DMAOMR_TTC
 ((
uöt32_t
)0x0001C000Ë

	)

9847 
	#ETH_DMAOMR_TTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

9848 
	#ETH_DMAOMR_TTC_128Byãs
 ((
uöt32_t
)0x00004000Ë

	)

9849 
	#ETH_DMAOMR_TTC_192Byãs
 ((
uöt32_t
)0x00008000Ë

	)

9850 
	#ETH_DMAOMR_TTC_256Byãs
 ((
uöt32_t
)0x0000C000Ë

	)

9851 
	#ETH_DMAOMR_TTC_40Byãs
 ((
uöt32_t
)0x00010000Ë

	)

9852 
	#ETH_DMAOMR_TTC_32Byãs
 ((
uöt32_t
)0x00014000Ë

	)

9853 
	#ETH_DMAOMR_TTC_24Byãs
 ((
uöt32_t
)0x00018000Ë

	)

9854 
	#ETH_DMAOMR_TTC_16Byãs
 ((
uöt32_t
)0x0001C000Ë

	)

9855 
	#ETH_DMAOMR_ST
 ((
uöt32_t
)0x00002000Ë

	)

9856 
	#ETH_DMAOMR_FEF
 ((
uöt32_t
)0x00000080Ë

	)

9857 
	#ETH_DMAOMR_FUGF
 ((
uöt32_t
)0x00000040Ë

	)

9858 
	#ETH_DMAOMR_RTC
 ((
uöt32_t
)0x00000018Ë

	)

9859 
	#ETH_DMAOMR_RTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

9860 
	#ETH_DMAOMR_RTC_32Byãs
 ((
uöt32_t
)0x00000008Ë

	)

9861 
	#ETH_DMAOMR_RTC_96Byãs
 ((
uöt32_t
)0x00000010Ë

	)

9862 
	#ETH_DMAOMR_RTC_128Byãs
 ((
uöt32_t
)0x00000018Ë

	)

9863 
	#ETH_DMAOMR_OSF
 ((
uöt32_t
)0x00000004Ë

	)

9864 
	#ETH_DMAOMR_SR
 ((
uöt32_t
)0x00000002Ë

	)

9867 
	#ETH_DMAIER_NISE
 ((
uöt32_t
)0x00010000Ë

	)

9868 
	#ETH_DMAIER_AISE
 ((
uöt32_t
)0x00008000Ë

	)

9869 
	#ETH_DMAIER_ERIE
 ((
uöt32_t
)0x00004000Ë

	)

9870 
	#ETH_DMAIER_FBEIE
 ((
uöt32_t
)0x00002000Ë

	)

9871 
	#ETH_DMAIER_ETIE
 ((
uöt32_t
)0x00000400Ë

	)

9872 
	#ETH_DMAIER_RWTIE
 ((
uöt32_t
)0x00000200Ë

	)

9873 
	#ETH_DMAIER_RPSIE
 ((
uöt32_t
)0x00000100Ë

	)

9874 
	#ETH_DMAIER_RBUIE
 ((
uöt32_t
)0x00000080Ë

	)

9875 
	#ETH_DMAIER_RIE
 ((
uöt32_t
)0x00000040Ë

	)

9876 
	#ETH_DMAIER_TUIE
 ((
uöt32_t
)0x00000020Ë

	)

9877 
	#ETH_DMAIER_ROIE
 ((
uöt32_t
)0x00000010Ë

	)

9878 
	#ETH_DMAIER_TJTIE
 ((
uöt32_t
)0x00000008Ë

	)

9879 
	#ETH_DMAIER_TBUIE
 ((
uöt32_t
)0x00000004Ë

	)

9880 
	#ETH_DMAIER_TPSIE
 ((
uöt32_t
)0x00000002Ë

	)

9881 
	#ETH_DMAIER_TIE
 ((
uöt32_t
)0x00000001Ë

	)

9884 
	#ETH_DMAMFBOCR_OFOC
 ((
uöt32_t
)0x10000000Ë

	)

9885 
	#ETH_DMAMFBOCR_MFA
 ((
uöt32_t
)0x0FFE0000Ë

	)

9886 
	#ETH_DMAMFBOCR_OMFC
 ((
uöt32_t
)0x00010000Ë

	)

9887 
	#ETH_DMAMFBOCR_MFC
 ((
uöt32_t
)0x0000FFFFË

	)

9890 
	#ETH_DMACHTDR_HTDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

9893 
	#ETH_DMACHRDR_HRDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

9896 
	#ETH_DMACHTBAR_HTBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

9899 
	#ETH_DMACHRBAR_HRBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

9909 #ifde‡
USE_STDPERIPH_DRIVER


9910 
	~"°m32f4xx_c⁄f.h
"

9917 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

9919 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

9921 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

9923 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

9925 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

9927 
	#READ_REG
(
REG
Ë((REG))

	)

9929 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~(CLEARMASK))Ë| (SETMASK)))

	)

9935 #ifde‡
__˝lu•lus


9936 
	}
}

	@CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h

39 #i‚de‡
__SYSTEM_STM32F4XX_H


40 
	#__SYSTEM_STM32F4XX_H


	)

42 #ifde‡
__˝lu•lus


59 
uöt32_t
 
Sy°emC‹eClock
;

86 
Sy°emInô
();

87 
Sy°emC‹eClockUpd©e
();

92 #ifde‡
__˝lu•lus


	@CMSIS/Device/ST/STM32F4xx/Source/Templates/system_stm32f4xx.c

317 
	~"°m32f4xx.h
"

338 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
)

342 #i‡
deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
)

346 #i‡
deföed
(
STM32F411xE
)

356 #i‡
deföed
(
USE_HSE_BYPASS
)

357 
	#HSE_BYPASS_INPUT_FREQUENCY
 8000000

	)

364 
	#VECT_TAB_OFFSET
 0x00

	)

369 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
)

371 
	#PLL_M
 25

	)

372 #ñi‡
deföed
 (
STM32F446xx
)

373 
	#PLL_M
 8

	)

374 #ñi‡
deföed
 (
STM32F411xE
)

376 #i‡
deföed
(
USE_HSE_BYPASS
)

377 
	#PLL_M
 8

	)

379 
	#PLL_M
 16

	)

385 
	#PLL_Q
 7

	)

387 #i‡
deföed
(
STM32F446xx
)

389 
	#PLL_R
 7

	)

392 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
)

393 
	#PLL_N
 360

	)

395 
	#PLL_P
 2

	)

398 #i‡
deföed
(
STM32F401xx
)

399 
	#PLL_N
 336

	)

401 
	#PLL_P
 4

	)

404 #i‡
deföed
(
STM32F411xE
)

405 
	#PLL_N
 400

	)

407 
	#PLL_P
 4

	)

428 #i‡
deföed
(
STM32F40_41xxx
)

429 
uöt32_t
 
	gSy°emC‹eClock
 = 168000000;

432 #i‡
deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
)

433 
uöt32_t
 
	gSy°emC‹eClock
 = 180000000;

436 #i‡
deföed
(
STM32F401xx
)

437 
uöt32_t
 
	gSy°emC‹eClock
 = 84000000;

440 #i‡
deföed
(
STM32F411xE
)

441 
uöt32_t
 
	gSy°emC‹eClock
 = 100000000;

444 
__I
 
uöt8_t
 
	gAHBPªscTabÀ
[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

454 
SëSysClock
();

456 #i‡
deföed
(
DATA_IN_ExtSRAM
Ë|| deföed(
DATA_IN_ExtSDRAM
)

457 
Sy°emInô_ExtMemCé
();

475 
	$Sy°emInô
()

478 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

479 
SCB
->
CPACR
 |= ((3UL << 10*2)|(3UL << 11*2));

483 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

486 
RCC
->
CFGR
 = 0x00000000;

489 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

492 
RCC
->
PLLCFGR
 = 0x24003010;

495 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

498 
RCC
->
CIR
 = 0x00000000;

500 #i‡
	`deföed
(
DATA_IN_ExtSRAM
Ë|| deföed(
DATA_IN_ExtSDRAM
)

501 
	`Sy°emInô_ExtMemCé
();

506 
	`SëSysClock
();

509 #ifde‡
VECT_TAB_SRAM


510 
SCB
->
VTOR
 = 
SRAM_BASE
 | 
VECT_TAB_OFFSET
;

512 
SCB
->
VTOR
 = 
FLASH_BASE
 | 
VECT_TAB_OFFSET
;

514 
	}
}

552 
	$Sy°emC‹eClockUpd©e
()

554 
uöt32_t
 
tmp
 = 0, 
∂lvco
 = 0, 
∂Õ
 = 2, 
∂lsour˚
 = 0, 
∂lm
 = 2;

555 #i‡
	`deföed
(
STM32F446xx
)

556 
uöt32_t
 
∂Ã
 = 2;

559 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

561 
tmp
)

564 
Sy°emC‹eClock
 = 
HSI_VALUE
;

567 
Sy°emC‹eClock
 = 
HSE_VALUE
;

573 
∂lsour˚
 = (
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
) >> 22;

574 
∂lm
 = 
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
;

576 #i‡
	`deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F446xx
)

577 i‡(
∂lsour˚
 != 0)

580 
∂lvco
 = (
HSE_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

585 
∂lvco
 = (
HSI_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

587 #ñi‡
	`deföed
(
STM32F411xE
)

588 #i‡
	`deföed
(
USE_HSE_BYPASS
)

589 i‡(
∂lsour˚
 != 0)

592 
∂lvco
 = (
HSE_BYPASS_INPUT_FREQUENCY
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

595 i‡(
∂lsour˚
 == 0)

598 
∂lvco
 = (
HSI_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

602 
∂Õ
 = (((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLP
) >>16) + 1 ) *2;

603 
Sy°emC‹eClock
 = 
∂lvco
/
∂Õ
;

605 #i‡
	`deföed
(
STM32F446xx
)

610 
∂lsour˚
 = (
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
) >> 22;

611 
∂lm
 = 
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
;

612 i‡(
∂lsour˚
 != 0)

615 
∂lvco
 = (
HSE_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

620 
∂lvco
 = (
HSI_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

623 
∂Ã
 = (((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLR
) >>28) + 1 ) *2;

624 
Sy°emC‹eClock
 = 
∂lvco
/
∂Ã
;

628 
Sy°emC‹eClock
 = 
HSI_VALUE
;

633 
tmp
 = 
AHBPªscTabÀ
[((
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
) >> 4)];

635 
Sy°emC‹eClock
 >>
tmp
;

636 
	}
}

646 
	$SëSysClock
()

648 #i‡
	`deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F446xx
)

652 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

655 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

660 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

661 
SèπUpCou¡î
++;

662 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

664 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

666 
HSESètus
 = (
uöt32_t
)0x01;

670 
HSESètus
 = (
uöt32_t
)0x00;

673 i‡(
HSESètus
 =(
uöt32_t
)0x01)

676 
RCC
->
APB1ENR
 |
RCC_APB1ENR_PWREN
;

677 
PWR
->
CR
 |
PWR_CR_VOS
;

680 
RCC
->
CFGR
 |
RCC_CFGR_HPRE_DIV1
;

682 #i‡
	`deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
)

684 
RCC
->
CFGR
 |
RCC_CFGR_PPRE2_DIV2
;

687 
RCC
->
CFGR
 |
RCC_CFGR_PPRE1_DIV4
;

690 #i‡
	`deföed
(
STM32F401xx
)

692 
RCC
->
CFGR
 |
RCC_CFGR_PPRE2_DIV1
;

695 
RCC
->
CFGR
 |
RCC_CFGR_PPRE1_DIV2
;

698 #i‡
	`deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
)

700 
RCC
->
PLLCFGR
 = 
PLL_M
 | (
PLL_N
 << 6Ë| (((
PLL_P
 >> 1) -1) << 16) |

701 (
RCC_PLLCFGR_PLLSRC_HSE
Ë| (
PLL_Q
 << 24);

704 #i‡
	`deföed
(
STM32F446xx
)

706 
RCC
->
PLLCFGR
 = 
PLL_M
 | (
PLL_N
 << 6Ë| (((
PLL_P
 >> 1) -1) << 16) |

707 (
RCC_PLLCFGR_PLLSRC_HSE
Ë| (
PLL_Q
 << 24Ë| (
PLL_R
 << 28);

711 
RCC
->
CR
 |
RCC_CR_PLLON
;

714 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

718 #i‡
	`deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
)

720 
PWR
->
CR
 |
PWR_CR_ODEN
;

721 (
PWR
->
CSR
 & 
PWR_CSR_ODRDY
) == 0)

724 
PWR
->
CR
 |
PWR_CR_ODSWEN
;

725 (
PWR
->
CSR
 & 
PWR_CSR_ODSWRDY
) == 0)

729 
FLASH
->
ACR
 = 
FLASH_ACR_PRFTEN
 | 
FLASH_ACR_ICEN
 |
FLASH_ACR_DCEN
 |
FLASH_ACR_LATENCY_5WS
;

732 #i‡
	`deföed
(
STM32F40_41xxx
)

734 
FLASH
->
ACR
 = 
FLASH_ACR_PRFTEN
 | 
FLASH_ACR_ICEN
 |
FLASH_ACR_DCEN
 |
FLASH_ACR_LATENCY_5WS
;

737 #i‡
	`deföed
(
STM32F401xx
)

739 
FLASH
->
ACR
 = 
FLASH_ACR_PRFTEN
 | 
FLASH_ACR_ICEN
 |
FLASH_ACR_DCEN
 |
FLASH_ACR_LATENCY_2WS
;

743 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

744 
RCC
->
CFGR
 |
RCC_CFGR_SW_PLL
;

747 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
 ) !
RCC_CFGR_SWS_PLL
);

755 #ñi‡
	`deföed
(
STM32F411xE
)

756 #i‡
	`deföed
(
USE_HSE_BYPASS
)

760 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

763 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
 | 
RCC_CR_HSEBYP
);

768 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

769 
SèπUpCou¡î
++;

770 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

772 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

774 
HSESètus
 = (
uöt32_t
)0x01;

778 
HSESètus
 = (
uöt32_t
)0x00;

781 i‡(
HSESètus
 =(
uöt32_t
)0x01)

784 
RCC
->
APB1ENR
 |
RCC_APB1ENR_PWREN
;

785 
PWR
->
CR
 |
PWR_CR_VOS
;

788 
RCC
->
CFGR
 |
RCC_CFGR_HPRE_DIV1
;

791 
RCC
->
CFGR
 |
RCC_CFGR_PPRE2_DIV1
;

794 
RCC
->
CFGR
 |
RCC_CFGR_PPRE1_DIV2
;

797 
RCC
->
PLLCFGR
 = 
PLL_M
 | (
PLL_N
 << 6Ë| (((
PLL_P
 >> 1) -1) << 16) |

798 (
RCC_PLLCFGR_PLLSRC_HSE
Ë| (
PLL_Q
 << 24);

801 
RCC
->
CR
 |
RCC_CR_PLLON
;

804 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

809 
FLASH
->
ACR
 = 
FLASH_ACR_PRFTEN
 | 
FLASH_ACR_ICEN
 |
FLASH_ACR_DCEN
 |
FLASH_ACR_LATENCY_2WS
;

812 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

813 
RCC
->
CFGR
 |
RCC_CFGR_SW_PLL
;

816 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
 ) !
RCC_CFGR_SWS_PLL
);

826 
RCC
->
APB1ENR
 |
RCC_APB1ENR_PWREN
;

827 
PWR
->
CR
 |
PWR_CR_VOS
;

830 
RCC
->
CFGR
 |
RCC_CFGR_HPRE_DIV1
;

833 
RCC
->
CFGR
 |
RCC_CFGR_PPRE2_DIV1
;

836 
RCC
->
CFGR
 |
RCC_CFGR_PPRE1_DIV2
;

839 
RCC
->
PLLCFGR
 = 
PLL_M
 | (
PLL_N
 << 6Ë| (((
PLL_P
 >> 1Ë-1Ë<< 16Ë| (
PLL_Q
 << 24);

842 
RCC
->
CR
 |
RCC_CR_PLLON
;

845 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

850 
FLASH
->
ACR
 = 
FLASH_ACR_PRFTEN
 | 
FLASH_ACR_ICEN
 |
FLASH_ACR_DCEN
 |
FLASH_ACR_LATENCY_2WS
;

853 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

854 
RCC
->
CFGR
 |
RCC_CFGR_SW_PLL
;

857 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
 ) !
RCC_CFGR_SWS_PLL
);

862 
	}
}

870 #ifde‡
DATA_IN_ExtSRAM


879 
	$Sy°emInô_ExtMemCé
()

902 
RCC
->
AHB1ENR
 |= 0x00000078;

905 
GPIOD
->
AFR
[0] = 0x00cc00cc;

906 
GPIOD
->
AFR
[1] = 0xcccccccc;

908 
GPIOD
->
MODER
 = 0xaaaa0a0a;

910 
GPIOD
->
OSPEEDR
 = 0xffff0f0f;

912 
GPIOD
->
OTYPER
 = 0x00000000;

914 
GPIOD
->
PUPDR
 = 0x00000000;

917 
GPIOE
->
AFR
[0] = 0xcccccccc;

918 
GPIOE
->
AFR
[1] = 0xcccccccc;

920 
GPIOE
->
MODER
 = 0xaaaaaaaa;

922 
GPIOE
->
OSPEEDR
 = 0xffffffff;

924 
GPIOE
->
OTYPER
 = 0x00000000;

926 
GPIOE
->
PUPDR
 = 0x00000000;

929 
GPIOF
->
AFR
[0] = 0x00cccccc;

930 
GPIOF
->
AFR
[1] = 0xcccc0000;

932 
GPIOF
->
MODER
 = 0xaa000aaa;

934 
GPIOF
->
OSPEEDR
 = 0xff000fff;

936 
GPIOF
->
OTYPER
 = 0x00000000;

938 
GPIOF
->
PUPDR
 = 0x00000000;

941 
GPIOG
->
AFR
[0] = 0x00cccccc;

942 
GPIOG
->
AFR
[1] = 0x000000c0;

944 
GPIOG
->
MODER
 = 0x00080aaa;

946 
GPIOG
->
OSPEEDR
 = 0x000c0fff;

948 
GPIOG
->
OTYPER
 = 0x00000000;

950 
GPIOG
->
PUPDR
 = 0x00000000;

954 
RCC
->
AHB3ENR
 |= 0x00000001;

956 #i‡
	`deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
)

958 
FMC_B™k1
->
BTCR
[2] = 0x00001011;

959 
FMC_B™k1
->
BTCR
[3] = 0x00000201;

960 
FMC_B™k1E
->
BWTR
[2] = 0x0fffffff;

963 #i‡
	`deföed
(
STM32F40_41xxx
)

965 
FSMC_B™k1
->
BTCR
[2] = 0x00001011;

966 
FSMC_B™k1
->
BTCR
[3] = 0x00000201;

967 
FSMC_B™k1E
->
BWTR
[2] = 0x0fffffff;

1024 
	}
}

1027 #ifde‡
DATA_IN_ExtSDRAM


1036 
	$Sy°emInô_ExtMemCé
()

1038 
uöt32_t
 
tm¥eg
 = 0, 
timeout
 = 0xFFFF;

1039 
uöt32_t
 
ödex
;

1043 
RCC
->
AHB1ENR
 |= 0x000001FC;

1046 
GPIOC
->
AFR
[0] = 0x0000000c;

1047 
GPIOC
->
AFR
[1] = 0x00007700;

1049 
GPIOC
->
MODER
 = 0x00a00002;

1051 
GPIOC
->
OSPEEDR
 = 0x00a00002;

1053 
GPIOC
->
OTYPER
 = 0x00000000;

1055 
GPIOC
->
PUPDR
 = 0x00500000;

1058 
GPIOD
->
AFR
[0] = 0x000000CC;

1059 
GPIOD
->
AFR
[1] = 0xCC000CCC;

1061 
GPIOD
->
MODER
 = 0xA02A000A;

1063 
GPIOD
->
OSPEEDR
 = 0xA02A000A;

1065 
GPIOD
->
OTYPER
 = 0x00000000;

1067 
GPIOD
->
PUPDR
 = 0x00000000;

1070 
GPIOE
->
AFR
[0] = 0xC00000CC;

1071 
GPIOE
->
AFR
[1] = 0xCCCCCCCC;

1073 
GPIOE
->
MODER
 = 0xAAAA800A;

1075 
GPIOE
->
OSPEEDR
 = 0xAAAA800A;

1077 
GPIOE
->
OTYPER
 = 0x00000000;

1079 
GPIOE
->
PUPDR
 = 0x00000000;

1082 
GPIOF
->
AFR
[0] = 0xcccccccc;

1083 
GPIOF
->
AFR
[1] = 0xcccccccc;

1085 
GPIOF
->
MODER
 = 0xAA800AAA;

1087 
GPIOF
->
OSPEEDR
 = 0xAA800AAA;

1089 
GPIOF
->
OTYPER
 = 0x00000000;

1091 
GPIOF
->
PUPDR
 = 0x00000000;

1094 
GPIOG
->
AFR
[0] = 0xcccccccc;

1095 
GPIOG
->
AFR
[1] = 0xcccccccc;

1097 
GPIOG
->
MODER
 = 0xaaaaaaaa;

1099 
GPIOG
->
OSPEEDR
 = 0xaaaaaaaa;

1101 
GPIOG
->
OTYPER
 = 0x00000000;

1103 
GPIOG
->
PUPDR
 = 0x00000000;

1106 
GPIOH
->
AFR
[0] = 0x00C0CC00;

1107 
GPIOH
->
AFR
[1] = 0xCCCCCCCC;

1109 
GPIOH
->
MODER
 = 0xAAAA08A0;

1111 
GPIOH
->
OSPEEDR
 = 0xAAAA08A0;

1113 
GPIOH
->
OTYPER
 = 0x00000000;

1115 
GPIOH
->
PUPDR
 = 0x00000000;

1118 
GPIOI
->
AFR
[0] = 0xCCCCCCCC;

1119 
GPIOI
->
AFR
[1] = 0x00000CC0;

1121 
GPIOI
->
MODER
 = 0x0028AAAA;

1123 
GPIOI
->
OSPEEDR
 = 0x0028AAAA;

1125 
GPIOI
->
OTYPER
 = 0x00000000;

1127 
GPIOI
->
PUPDR
 = 0x00000000;

1131 
RCC
->
AHB3ENR
 |= 0x00000001;

1134 
FMC_B™k5_6
->
SDCR
[0] = 0x000039D0;

1135 
FMC_B™k5_6
->
SDTR
[0] = 0x01115351;

1139 
FMC_B™k5_6
->
SDCMR
 = 0x00000011;

1140 
tm¥eg
 = 
FMC_B™k5_6
->
SDSR
 & 0x00000020;

1141 (
tm¥eg
 !0Ë& (
timeout
-- > 0))

1143 
tm¥eg
 = 
FMC_B™k5_6
->
SDSR
 & 0x00000020;

1147 
ödex
 = 0; index<1000; index++);

1150 
FMC_B™k5_6
->
SDCMR
 = 0x00000012;

1151 
timeout
 = 0xFFFF;

1152 (
tm¥eg
 !0Ë& (
timeout
-- > 0))

1154 
tm¥eg
 = 
FMC_B™k5_6
->
SDSR
 & 0x00000020;

1158 
FMC_B™k5_6
->
SDCMR
 = 0x00000073;

1159 
timeout
 = 0xFFFF;

1160 (
tm¥eg
 !0Ë& (
timeout
-- > 0))

1162 
tm¥eg
 = 
FMC_B™k5_6
->
SDSR
 & 0x00000020;

1166 
FMC_B™k5_6
->
SDCMR
 = 0x00046014;

1167 
timeout
 = 0xFFFF;

1168 (
tm¥eg
 !0Ë& (
timeout
-- > 0))

1170 
tm¥eg
 = 
FMC_B™k5_6
->
SDSR
 & 0x00000020;

1174 
tm¥eg
 = 
FMC_B™k5_6
->
SDRTR
;

1175 
FMC_B™k5_6
->
SDRTR
 = (
tm¥eg
 | (0x0000027C<<1));

1178 
tm¥eg
 = 
FMC_B™k5_6
->
SDCR
[0];

1179 
FMC_B™k5_6
->
SDCR
[0] = (
tm¥eg
 & 0xFFFFFDFF);

1205 
	}
}

	@CMSIS/Include/arm_common_tables.h

41 #i‚de‡
_ARM_COMMON_TABLES_H


42 
	#_ARM_COMMON_TABLES_H


	)

44 
	~"¨m_m©h.h
"

46 c⁄° 
uöt16_t
 
¨mBôRevTabÀ
[1024];

47 c⁄° 
q15_t
 
¨mRecùTabÀQ15
[64];

48 c⁄° 
q31_t
 
¨mRecùTabÀQ31
[64];

51 c⁄° 
Êﬂt32_t
 
twiddÀC€f_16
[32];

52 c⁄° 
Êﬂt32_t
 
twiddÀC€f_32
[64];

53 c⁄° 
Êﬂt32_t
 
twiddÀC€f_64
[128];

54 c⁄° 
Êﬂt32_t
 
twiddÀC€f_128
[256];

55 c⁄° 
Êﬂt32_t
 
twiddÀC€f_256
[512];

56 c⁄° 
Êﬂt32_t
 
twiddÀC€f_512
[1024];

57 c⁄° 
Êﬂt32_t
 
twiddÀC€f_1024
[2048];

58 c⁄° 
Êﬂt32_t
 
twiddÀC€f_2048
[4096];

59 c⁄° 
Êﬂt32_t
 
twiddÀC€f_4096
[8192];

60 
	#twiddÀC€f
 
twiddÀC€f_4096


	)

61 c⁄° 
q31_t
 
twiddÀC€f_16_q31
[24];

62 c⁄° 
q31_t
 
twiddÀC€f_32_q31
[48];

63 c⁄° 
q31_t
 
twiddÀC€f_64_q31
[96];

64 c⁄° 
q31_t
 
twiddÀC€f_128_q31
[192];

65 c⁄° 
q31_t
 
twiddÀC€f_256_q31
[384];

66 c⁄° 
q31_t
 
twiddÀC€f_512_q31
[768];

67 c⁄° 
q31_t
 
twiddÀC€f_1024_q31
[1536];

68 c⁄° 
q31_t
 
twiddÀC€f_2048_q31
[3072];

69 c⁄° 
q31_t
 
twiddÀC€f_4096_q31
[6144];

70 c⁄° 
q15_t
 
twiddÀC€f_16_q15
[24];

71 c⁄° 
q15_t
 
twiddÀC€f_32_q15
[48];

72 c⁄° 
q15_t
 
twiddÀC€f_64_q15
[96];

73 c⁄° 
q15_t
 
twiddÀC€f_128_q15
[192];

74 c⁄° 
q15_t
 
twiddÀC€f_256_q15
[384];

75 c⁄° 
q15_t
 
twiddÀC€f_512_q15
[768];

76 c⁄° 
q15_t
 
twiddÀC€f_1024_q15
[1536];

77 c⁄° 
q15_t
 
twiddÀC€f_2048_q15
[3072];

78 c⁄° 
q15_t
 
twiddÀC€f_4096_q15
[6144];

79 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_32
[32];

80 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_64
[64];

81 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_128
[128];

82 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_256
[256];

83 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_512
[512];

84 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_1024
[1024];

85 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_2048
[2048];

86 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_4096
[4096];

90 
	#ARMBITREVINDEXTABLE__16_TABLE_LENGTH
 ((
uöt16_t
)20 )

	)

91 
	#ARMBITREVINDEXTABLE__32_TABLE_LENGTH
 ((
uöt16_t
)48 )

	)

92 
	#ARMBITREVINDEXTABLE__64_TABLE_LENGTH
 ((
uöt16_t
)56 )

	)

93 
	#ARMBITREVINDEXTABLE_128_TABLE_LENGTH
 ((
uöt16_t
)208 )

	)

94 
	#ARMBITREVINDEXTABLE_256_TABLE_LENGTH
 ((
uöt16_t
)440 )

	)

95 
	#ARMBITREVINDEXTABLE_512_TABLE_LENGTH
 ((
uöt16_t
)448 )

	)

96 
	#ARMBITREVINDEXTABLE1024_TABLE_LENGTH
 ((
uöt16_t
)1800)

	)

97 
	#ARMBITREVINDEXTABLE2048_TABLE_LENGTH
 ((
uöt16_t
)3808)

	)

98 
	#ARMBITREVINDEXTABLE4096_TABLE_LENGTH
 ((
uöt16_t
)4032)

	)

100 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ16
[
ARMBITREVINDEXTABLE__16_TABLE_LENGTH
];

101 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ32
[
ARMBITREVINDEXTABLE__32_TABLE_LENGTH
];

102 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ64
[
ARMBITREVINDEXTABLE__64_TABLE_LENGTH
];

103 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ128
[
ARMBITREVINDEXTABLE_128_TABLE_LENGTH
];

104 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ256
[
ARMBITREVINDEXTABLE_256_TABLE_LENGTH
];

105 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ512
[
ARMBITREVINDEXTABLE_512_TABLE_LENGTH
];

106 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ1024
[
ARMBITREVINDEXTABLE1024_TABLE_LENGTH
];

107 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ2048
[
ARMBITREVINDEXTABLE2048_TABLE_LENGTH
];

108 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ4096
[
ARMBITREVINDEXTABLE4096_TABLE_LENGTH
];

111 
	#ARMBITREVINDEXTABLE_FIXED___16_TABLE_LENGTH
 ((
uöt16_t
)12 )

	)

112 
	#ARMBITREVINDEXTABLE_FIXED___32_TABLE_LENGTH
 ((
uöt16_t
)24 )

	)

113 
	#ARMBITREVINDEXTABLE_FIXED___64_TABLE_LENGTH
 ((
uöt16_t
)56 )

	)

114 
	#ARMBITREVINDEXTABLE_FIXED__128_TABLE_LENGTH
 ((
uöt16_t
)112 )

	)

115 
	#ARMBITREVINDEXTABLE_FIXED__256_TABLE_LENGTH
 ((
uöt16_t
)240 )

	)

116 
	#ARMBITREVINDEXTABLE_FIXED__512_TABLE_LENGTH
 ((
uöt16_t
)480 )

	)

117 
	#ARMBITREVINDEXTABLE_FIXED_1024_TABLE_LENGTH
 ((
uöt16_t
)992 )

	)

118 
	#ARMBITREVINDEXTABLE_FIXED_2048_TABLE_LENGTH
 ((
uöt16_t
)1984)

	)

119 
	#ARMBITREVINDEXTABLE_FIXED_4096_TABLE_LENGTH
 ((
uöt16_t
)4032)

	)

121 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_16
[
ARMBITREVINDEXTABLE_FIXED___16_TABLE_LENGTH
];

122 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_32
[
ARMBITREVINDEXTABLE_FIXED___32_TABLE_LENGTH
];

123 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_64
[
ARMBITREVINDEXTABLE_FIXED___64_TABLE_LENGTH
];

124 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_128
[
ARMBITREVINDEXTABLE_FIXED__128_TABLE_LENGTH
];

125 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_256
[
ARMBITREVINDEXTABLE_FIXED__256_TABLE_LENGTH
];

126 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_512
[
ARMBITREVINDEXTABLE_FIXED__512_TABLE_LENGTH
];

127 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_1024
[
ARMBITREVINDEXTABLE_FIXED_1024_TABLE_LENGTH
];

128 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_2048
[
ARMBITREVINDEXTABLE_FIXED_2048_TABLE_LENGTH
];

129 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_4096
[
ARMBITREVINDEXTABLE_FIXED_4096_TABLE_LENGTH
];

132 c⁄° 
Êﬂt32_t
 
söTabÀ_f32
[
FAST_MATH_TABLE_SIZE
 + 1];

133 c⁄° 
q31_t
 
söTabÀ_q31
[
FAST_MATH_TABLE_SIZE
 + 1];

134 c⁄° 
q15_t
 
söTabÀ_q15
[
FAST_MATH_TABLE_SIZE
 + 1];

	@CMSIS/Include/arm_const_structs.h

43 #i‚de‡
_ARM_CONST_STRUCTS_H


44 
	#_ARM_CONST_STRUCTS_H


	)

46 
	~"¨m_m©h.h
"

47 
	~"¨m_comm⁄_èbÀs.h
"

49 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn16
;

50 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn32
;

51 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn64
;

52 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn128
;

53 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn256
;

54 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn512
;

55 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn1024
;

56 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn2048
;

57 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn4096
;

59 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn16
;

60 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn32
;

61 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn64
;

62 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn128
;

63 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn256
;

64 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn512
;

65 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn1024
;

66 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn2048
;

67 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn4096
;

69 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn16
;

70 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn32
;

71 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn64
;

72 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn128
;

73 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn256
;

74 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn512
;

75 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn1024
;

76 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn2048
;

77 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn4096
;

	@CMSIS/Include/arm_math.h

281 #i‚de‡
_ARM_MATH_H


282 
	#_ARM_MATH_H


	)

284 
	#__CMSIS_GENERIC


	)

286 #i‡
deföed
(
ARM_MATH_CM7
)

287 
	~"c‹e_cm7.h
"

288 #ñi‡
deföed
 (
ARM_MATH_CM4
)

289 
	~"c‹e_cm4.h
"

290 #ñi‡
deföed
 (
ARM_MATH_CM3
)

291 
	~"c‹e_cm3.h
"

292 #ñi‡
deföed
 (
ARM_MATH_CM0
)

293 
	~"c‹e_cm0.h
"

294 
	#ARM_MATH_CM0_FAMILY


	)

295 #ñi‡
deföed
 (
ARM_MATH_CM0PLUS
)

296 
	~"c‹e_cm0∂us.h
"

297 
	#ARM_MATH_CM0_FAMILY


	)

302 #unde‡
__CMSIS_GENERIC


303 
	~"°rög.h
"

304 
	~"m©h.h
"

305 #ifdef 
__˝lu•lus


315 
	#DELTA_Q31
 (0x100)

	)

316 
	#DELTA_Q15
 0x5

	)

317 
	#INDEX_MASK
 0x0000003F

	)

318 #i‚de‡
PI


319 
	#PI
 3.14159265358979f

	)

326 
	#FAST_MATH_TABLE_SIZE
 512

	)

327 
	#FAST_MATH_Q31_SHIFT
 (32 - 10)

	)

328 
	#FAST_MATH_Q15_SHIFT
 (16 - 10)

	)

329 
	#CONTROLLER_Q31_SHIFT
 (32 - 9)

	)

330 
	#TABLE_SIZE
 256

	)

331 
	#TABLE_SPACING_Q31
 0x400000

	)

332 
	#TABLE_SPACING_Q15
 0x80

	)

339 
	#INPUT_SPACING
 0xB60B61

	)

344 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


345 
	#ALIGN4


	)

347 #i‡
deföed
 (
__GNUC__
)

348 
	#ALIGN4
 
	`__©åibuã__
((
	`Æig√d
(4)))

	)

350 
	#ALIGN4
 
	`__Æign
(4)

	)

360 
ARM_MATH_SUCCESS
 = 0,

361 
ARM_MATH_ARGUMENT_ERROR
 = -1,

362 
ARM_MATH_LENGTH_ERROR
 = -2,

363 
ARM_MATH_SIZE_MISMATCH
 = -3,

364 
ARM_MATH_NANINF
 = -4,

365 
ARM_MATH_SINGULAR
 = -5,

366 
ARM_MATH_TEST_FAILURE
 = -6

367 } 
	t¨m_°©us
;

372 
öt8_t
 
	tq7_t
;

377 
öt16_t
 
	tq15_t
;

382 
öt32_t
 
	tq31_t
;

387 
öt64_t
 
	tq63_t
;

392 
	tÊﬂt32_t
;

397 
	tÊﬂt64_t
;

402 #i‡
deföed
 
__CC_ARM


403 
	#__SIMD32_TYPE
 
öt32_t
 
__∑cked


	)

404 
	#CMSIS_UNUSED
 
	`__©åibuã__
((
unu£d
))

	)

405 #ñi‡
deföed
 
__ICCARM__


406 
	#CMSIS_UNUSED


	)

407 
	#__SIMD32_TYPE
 
öt32_t
 
__∑cked


	)

408 #ñi‡
deföed
 
__GNUC__


409 
	#__SIMD32_TYPE
 
öt32_t


	)

410 
	#CMSIS_UNUSED
 
	`__©åibuã__
((
unu£d
))

	)

411 #ñi‡
deföed
 
__CSMC__


412 
	#CMSIS_UNUSED


	)

413 
	#__SIMD32_TYPE
 
öt32_t


	)

415 #îr‹ 
Unknown
 
compûî


418 
	#__SIMD32
(
addr
Ë(*(
__SIMD32_TYPE
 **Ë& (addr))

	)

419 
	#__SIMD32_CONST
(
addr
Ë((
__SIMD32_TYPE
 *)◊ddr))

	)

421 
	#_SIMD32_OFFSET
(
addr
Ë(*(
__SIMD32_TYPE
 *Ë◊ddr))

	)

423 
	#__SIMD64
(
addr
Ë(*(
öt64_t
 **Ë& (addr))

	)

425 #i‡
deföed
 (
ARM_MATH_CM3
Ë|| deföed (
ARM_MATH_CM0_FAMILY
)

429 
	#__PKHBT
(
ARG1
, 
ARG2
, 
ARG3
Ë–(((
öt32_t
)(ARG1Ë<< 0Ë& (öt32_t)0x0000FFFFË| \

	)

430 (((
öt32_t
)(
ARG2
Ë<< 
ARG3
) & (int32_t)0xFFFF0000) )

431 
	#__PKHTB
(
ARG1
, 
ARG2
, 
ARG3
Ë–(((
öt32_t
)(ARG1Ë<< 0Ë& (öt32_t)0xFFFF0000Ë| \

	)

432 (((
öt32_t
)(
ARG2
Ë>> 
ARG3
) & (int32_t)0x0000FFFF) )

440 #i‚de‡
ARM_MATH_BIG_ENDIAN


442 
	#__PACKq7
(
v0
,
v1
,
v2
,
v3
Ë–(((
öt32_t
)(v0Ë<< 0Ë& (öt32_t)0x000000FFË| \

	)

443 (((
öt32_t
)(
v1
) << 8) & (int32_t)0x0000FF00) | \

444 (((
öt32_t
)(
v2
) << 16) & (int32_t)0x00FF0000) | \

445 (((
öt32_t
)(
v3
) << 24) & (int32_t)0xFF000000) )

448 
	#__PACKq7
(
v0
,
v1
,
v2
,
v3
Ë–(((
öt32_t
)(v3Ë<< 0Ë& (öt32_t)0x000000FFË| \

	)

449 (((
öt32_t
)(
v2
) << 8) & (int32_t)0x0000FF00) | \

450 (((
öt32_t
)(
v1
) << 16) & (int32_t)0x00FF0000) | \

451 (((
öt32_t
)(
v0
) << 24) & (int32_t)0xFF000000) )

459 
__INLINE
 
q31_t
 
˛ù_q63_to_q31
(

460 
q63_t
 
x
)

462  ((
q31_t
Ë(
x
 >> 32) != ((q31_t) x >> 31)) ?

463 ((0x7FFFFFFF ^ ((
q31_t
Ë(
x
 >> 63)))) : (q31_t) x;

469 
__INLINE
 
q15_t
 
˛ù_q63_to_q15
(

470 
q63_t
 
x
)

472  ((
q31_t
Ë(
x
 >> 32) != ((q31_t) x >> 31)) ?

473 ((0x7FFF ^ ((
q15_t
Ë(
x
 >> 63)))) : (q15_t) (x >> 15);

479 
__INLINE
 
q7_t
 
˛ù_q31_to_q7
(

480 
q31_t
 
x
)

482  ((
q31_t
Ë(
x
 >> 24) != ((q31_t) x >> 23)) ?

483 ((0x7F ^ ((
q7_t
Ë(
x
 >> 31)))) : (q7_t) x;

489 
__INLINE
 
q15_t
 
˛ù_q31_to_q15
(

490 
q31_t
 
x
)

492  ((
q31_t
Ë(
x
 >> 16) != ((q31_t) x >> 15)) ?

493 ((0x7FFF ^ ((
q15_t
Ë(
x
 >> 31)))) : (q15_t) x;

500 
__INLINE
 
q63_t
 
mu…32x64
(

501 
q63_t
 
x
,

502 
q31_t
 
y
)

504  ((((
q63_t
Ë(
x
 & 0x00000000FFFFFFFFË* 
y
) >> 32) +

505 (((
q63_t
Ë(
x
 >> 32Ë* 
y
)));

509 #i‡
deföed
 (
ARM_MATH_CM0_FAMILY
Ë&& deföed ( 
__CC_ARM
 )

510 
	#__CLZ
 
__˛z


	)

513 #i‡
deföed
 (
ARM_MATH_CM0_FAMILY
Ë&& ((deföed (
__ICCARM__
)Ë||(deföed (
__GNUC__
)Ë|| deföed (
__TASKING__
) )

515 
__INLINE
 
uöt32_t
 
__CLZ
(

516 
q31_t
 
d©a
);

519 
__INLINE
 
uöt32_t
 
__CLZ
(

520 
q31_t
 
d©a
)

522 
uöt32_t
 
cou¡
 = 0;

523 
uöt32_t
 
mask
 = 0x80000000;

525 (
d©a
 & 
mask
) == 0)

527 
cou¡
 += 1u;

528 
mask
 = mask >> 1u;

531  (
cou¡
);

541 
__INLINE
 
uöt32_t
 
¨m_ªcù_q31
(

542 
q31_t
 
ö
,

543 
q31_t
 * 
d°
,

544 
q31_t
 * 
pRecùTabÀ
)

547 
uöt32_t
 
out
, 
ãmpVÆ
;

548 
uöt32_t
 
ödex
, 
i
;

549 
uöt32_t
 
signBôs
;

551 if(
ö
 > 0)

553 
signBôs
 = 
__CLZ
(
ö
) - 1;

557 
signBôs
 = 
__CLZ
(-
ö
) - 1;

561 
ö
 = i¿<< 
signBôs
;

564 
ödex
 = (
uöt32_t
Ë(
ö
 >> 24u);

565 
ödex
 = (ödex & 
INDEX_MASK
);

568 
out
 = 
pRecùTabÀ
[
ödex
];

572 
i
 = 0u; i < 2u; i++)

574 
ãmpVÆ
 = (
q31_t
Ë(((
q63_t
Ë
ö
 * 
out
) >> 31u);

575 
ãmpVÆ
 = 0x7FFFFFFF -ÅempVal;

578 
out
 = (
q31_t
Ë
˛ù_q63_to_q31
(((
q63_t
Ëouà* 
ãmpVÆ
) >> 30u);

582 *
d°
 = 
out
;

585  (
signBôs
 + 1u);

592 
__INLINE
 
uöt32_t
 
¨m_ªcù_q15
(

593 
q15_t
 
ö
,

594 
q15_t
 * 
d°
,

595 
q15_t
 * 
pRecùTabÀ
)

598 
uöt32_t
 
out
 = 0, 
ãmpVÆ
 = 0;

599 
uöt32_t
 
ödex
 = 0, 
i
 = 0;

600 
uöt32_t
 
signBôs
 = 0;

602 if(
ö
 > 0)

604 
signBôs
 = 
__CLZ
(
ö
) - 17;

608 
signBôs
 = 
__CLZ
(-
ö
) - 17;

612 
ö
 = i¿<< 
signBôs
;

615 
ödex
 = 
ö
 >> 8;

616 
ödex
 = (ödex & 
INDEX_MASK
);

619 
out
 = 
pRecùTabÀ
[
ödex
];

623 
i
 = 0; i < 2; i++)

625 
ãmpVÆ
 = (
q15_t
Ë(((
q31_t
Ë
ö
 * 
out
) >> 15);

626 
ãmpVÆ
 = 0x7FFF -ÅempVal;

628 
out
 = (
q15_t
Ë(((
q31_t
Ëouà* 
ãmpVÆ
) >> 14);

632 *
d°
 = 
out
;

635  (
signBôs
 + 1);

643 #i‡
deföed
(
ARM_MATH_CM0_FAMILY
)

645 
__INLINE
 
q31_t
 
__SSAT
(

646 
q31_t
 
x
,

647 
uöt32_t
 
y
)

649 
öt32_t
 
posMax
, 
√gMö
;

650 
uöt32_t
 
i
;

652 
posMax
 = 1;

653 
i
 = 0; i < (
y
 - 1); i++)

655 
posMax
 =ÖosMax * 2;

658 if(
x
 > 0)

660 
posMax
 = (posMax - 1);

662 if(
x
 > 
posMax
)

664 
x
 = 
posMax
;

669 
√gMö
 = -
posMax
;

671 if(
x
 < 
√gMö
)

673 
x
 = 
√gMö
;

676  (
x
);

688 #i‡
deföed
 (
ARM_MATH_CM3
Ë|| deföed (
ARM_MATH_CM0_FAMILY
)

693 
__INLINE
 
q31_t
 
__QADD8
(

694 
q31_t
 
x
,

695 
q31_t
 
y
)

698 
q31_t
 
sum
;

699 
q7_t
 
r
, 
s
, 
t
, 
u
;

701 
r
 = (
q7_t
Ë
x
;

702 
s
 = (
q7_t
Ë
y
;

704 
r
 = 
__SSAT
((
q31_t
Ë‘ + 
s
), 8);

705 
s
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 16Ë>> 24Ë+ ((
y
 << 16) >> 24))), 8);

706 
t
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 8Ë>> 24Ë+ ((
y
 << 8) >> 24))), 8);

707 
u
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 24Ë+ (
y
 >> 24))), 8);

709 
sum
 =

710 (((
q31_t
Ë
u
 << 24Ë& 0xFF000000Ë| (((q31_tË
t
 << 16) & 0x00FF0000) |

711 (((
q31_t
Ë
s
 << 8Ë& 0x0000FF00Ë| (
r
 & 0x000000FF);

713  
sum
;

720 
__INLINE
 
q31_t
 
__QSUB8
(

721 
q31_t
 
x
,

722 
q31_t
 
y
)

725 
q31_t
 
sum
;

726 
q31_t
 
r
, 
s
, 
t
, 
u
;

728 
r
 = (
q7_t
Ë
x
;

729 
s
 = (
q7_t
Ë
y
;

731 
r
 = 
__SSAT
(‘ - 
s
), 8);

732 
s
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 16Ë>> 24Ë- ((
y
 << 16) >> 24))), 8) << 8;

733 
t
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 8Ë>> 24Ë- ((
y
 << 8) >> 24))), 8) << 16;

734 
u
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 24Ë- (
y
 >> 24))), 8) << 24;

736 
sum
 =

737 (
u
 & 0xFF000000Ë| (
t
 & 0x00FF0000Ë| (
s
 & 0x0000FF00Ë| (
r
 &

740  
sum
;

750 
__INLINE
 
q31_t
 
__QADD16
(

751 
q31_t
 
x
,

752 
q31_t
 
y
)

755 
q31_t
 
sum
;

756 
q31_t
 
r
, 
s
;

758 
r
 = (
q15_t
Ë
x
;

759 
s
 = (
q15_t
Ë
y
;

761 
r
 = 
__SSAT
‘ + 
s
, 16);

762 
s
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 16Ë+ (
y
 >> 16))), 16) << 16;

764 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

766  
sum
;

773 
__INLINE
 
q31_t
 
__SHADD16
(

774 
q31_t
 
x
,

775 
q31_t
 
y
)

778 
q31_t
 
sum
;

779 
q31_t
 
r
, 
s
;

781 
r
 = (
q15_t
Ë
x
;

782 
s
 = (
q15_t
Ë
y
;

784 
r
 = (‘ >> 1Ë+ (
s
 >> 1));

785 
s
 = ((
q31_t
Ë((
x
 >> 17Ë+ (
y
 >> 17))) << 16;

787 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

789  
sum
;

796 
__INLINE
 
q31_t
 
__QSUB16
(

797 
q31_t
 
x
,

798 
q31_t
 
y
)

801 
q31_t
 
sum
;

802 
q31_t
 
r
, 
s
;

804 
r
 = (
q15_t
Ë
x
;

805 
s
 = (
q15_t
Ë
y
;

807 
r
 = 
__SSAT
‘ - 
s
, 16);

808 
s
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 16Ë- (
y
 >> 16))), 16) << 16;

810 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

812  
sum
;

818 
__INLINE
 
q31_t
 
__SHSUB16
(

819 
q31_t
 
x
,

820 
q31_t
 
y
)

823 
q31_t
 
diff
;

824 
q31_t
 
r
, 
s
;

826 
r
 = (
q15_t
Ë
x
;

827 
s
 = (
q15_t
Ë
y
;

829 
r
 = (‘ >> 1Ë- (
s
 >> 1));

830 
s
 = (((
x
 >> 17Ë- (
y
 >> 17)) << 16);

832 
diff
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

834  
diff
;

840 
__INLINE
 
q31_t
 
__QASX
(

841 
q31_t
 
x
,

842 
q31_t
 
y
)

845 
q31_t
 
sum
 = 0;

847 
sum
 =

848 ((
sum
 +

849 
˛ù_q31_to_q15
((
q31_t
Ë((
q15_t
Ë(
x
 >> 16Ë+ (q15_tË
y
))) << 16) +

850 
˛ù_q31_to_q15
((
q31_t
Ë((
q15_t
Ë
x
 - (q15_tË(
y
 >> 16)));

852  
sum
;

858 
__INLINE
 
q31_t
 
__SHASX
(

859 
q31_t
 
x
,

860 
q31_t
 
y
)

863 
q31_t
 
sum
;

864 
q31_t
 
r
, 
s
;

866 
r
 = (
q15_t
Ë
x
;

867 
s
 = (
q15_t
Ë
y
;

869 
r
 = (‘ >> 1Ë- (
y
 >> 17));

870 
s
 = (((
x
 >> 17) + (s >> 1)) << 16);

872 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

874  
sum
;

881 
__INLINE
 
q31_t
 
__QSAX
(

882 
q31_t
 
x
,

883 
q31_t
 
y
)

886 
q31_t
 
sum
 = 0;

888 
sum
 =

889 ((
sum
 +

890 
˛ù_q31_to_q15
((
q31_t
Ë((
q15_t
Ë(
x
 >> 16Ë- (q15_tË
y
))) << 16) +

891 
˛ù_q31_to_q15
((
q31_t
Ë((
q15_t
Ë
x
 + (q15_tË(
y
 >> 16)));

893  
sum
;

899 
__INLINE
 
q31_t
 
__SHSAX
(

900 
q31_t
 
x
,

901 
q31_t
 
y
)

904 
q31_t
 
sum
;

905 
q31_t
 
r
, 
s
;

907 
r
 = (
q15_t
Ë
x
;

908 
s
 = (
q15_t
Ë
y
;

910 
r
 = (‘ >> 1Ë+ (
y
 >> 17));

911 
s
 = (((
x
 >> 17) - (s >> 1)) << 16);

913 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

915  
sum
;

921 
__INLINE
 
q31_t
 
__SMUSDX
(

922 
q31_t
 
x
,

923 
q31_t
 
y
)

926  ((
q31_t
Ë(((
q15_t
Ë
x
 * (q15_tË(
y
 >> 16)) -

927 ((
q15_t
Ë(
x
 >> 16Ë* (q15_tË
y
)));

933 
__INLINE
 
q31_t
 
__SMUADX
(

934 
q31_t
 
x
,

935 
q31_t
 
y
)

938  ((
q31_t
Ë(((
q15_t
Ë
x
 * (q15_tË(
y
 >> 16)) +

939 ((
q15_t
Ë(
x
 >> 16Ë* (q15_tË
y
)));

945 
__INLINE
 
q31_t
 
__QADD
(

946 
q31_t
 
x
,

947 
q31_t
 
y
)

949  
˛ù_q63_to_q31
((
q63_t
Ë
x
 + 
y
);

955 
__INLINE
 
q31_t
 
__QSUB
(

956 
q31_t
 
x
,

957 
q31_t
 
y
)

959  
˛ù_q63_to_q31
((
q63_t
Ë
x
 - 
y
);

965 
__INLINE
 
q31_t
 
__SMLAD
(

966 
q31_t
 
x
,

967 
q31_t
 
y
,

968 
q31_t
 
sum
)

971  (
sum
 + ((
q15_t
Ë(
x
 >> 16Ë* (q15_tË(
y
 >> 16)) +

972 ((
q15_t
Ë
x
 * (q15_tË
y
));

978 
__INLINE
 
q31_t
 
__SMLADX
(

979 
q31_t
 
x
,

980 
q31_t
 
y
,

981 
q31_t
 
sum
)

984  (
sum
 + ((
q15_t
Ë(
x
 >> 16Ë* (q15_tË(
y
)) +

985 ((
q15_t
Ë
x
 * (q15_tË(
y
 >> 16)));

991 
__INLINE
 
q31_t
 
__SMLSDX
(

992 
q31_t
 
x
,

993 
q31_t
 
y
,

994 
q31_t
 
sum
)

997  (
sum
 - ((
q15_t
Ë(
x
 >> 16Ë* (q15_tË(
y
)) +

998 ((
q15_t
Ë
x
 * (q15_tË(
y
 >> 16)));

1004 
__INLINE
 
q63_t
 
__SMLALD
(

1005 
q31_t
 
x
,

1006 
q31_t
 
y
,

1007 
q63_t
 
sum
)

1010  (
sum
 + ((
q15_t
Ë(
x
 >> 16Ë* (q15_tË(
y
 >> 16)) +

1011 ((
q15_t
Ë
x
 * (q15_tË
y
));

1017 
__INLINE
 
q63_t
 
__SMLALDX
(

1018 
q31_t
 
x
,

1019 
q31_t
 
y
,

1020 
q63_t
 
sum
)

1023  (
sum
 + ((
q15_t
Ë(
x
 >> 16Ë* (q15_tË
y
)) +

1024 ((
q15_t
Ë
x
 * (q15_tË(
y
 >> 16));

1030 
__INLINE
 
q31_t
 
__SMUAD
(

1031 
q31_t
 
x
,

1032 
q31_t
 
y
)

1035  (((
x
 >> 16Ë* (
y
 >> 16)) +

1036 (((
x
 << 16Ë>> 16Ë* ((
y
 << 16) >> 16)));

1042 
__INLINE
 
q31_t
 
__SMUSD
(

1043 
q31_t
 
x
,

1044 
q31_t
 
y
)

1047  (-((
x
 >> 16Ë* (
y
 >> 16)) +

1048 (((
x
 << 16Ë>> 16Ë* ((
y
 << 16) >> 16)));

1055 
__INLINE
 
q31_t
 
__SXTB16
(

1056 
q31_t
 
x
)

1059  ((((
x
 << 24) >> 24) & 0x0000FFFF) |

1060 (((
x
 << 8) >> 8) & 0xFFFF0000));

1072 
uöt16_t
 
numT≠s
;

1073 
q7_t
 *
pSèã
;

1074 
q7_t
 *
pC€ffs
;

1075 } 
	t¨m_fú_ö°™˚_q7
;

1082 
uöt16_t
 
numT≠s
;

1083 
q15_t
 *
pSèã
;

1084 
q15_t
 *
pC€ffs
;

1085 } 
	t¨m_fú_ö°™˚_q15
;

1092 
uöt16_t
 
numT≠s
;

1093 
q31_t
 *
pSèã
;

1094 
q31_t
 *
pC€ffs
;

1095 } 
	t¨m_fú_ö°™˚_q31
;

1102 
uöt16_t
 
numT≠s
;

1103 
Êﬂt32_t
 *
pSèã
;

1104 
Êﬂt32_t
 *
pC€ffs
;

1105 } 
	t¨m_fú_ö°™˚_f32
;

1116 
¨m_fú_q7
(

1117 c⁄° 
¨m_fú_ö°™˚_q7
 * 
S
,

1118 
q7_t
 * 
pSrc
,

1119 
q7_t
 * 
pD°
,

1120 
uöt32_t
 
blockSize
);

1132 
¨m_fú_öô_q7
(

1133 
¨m_fú_ö°™˚_q7
 * 
S
,

1134 
uöt16_t
 
numT≠s
,

1135 
q7_t
 * 
pC€ffs
,

1136 
q7_t
 * 
pSèã
,

1137 
uöt32_t
 
blockSize
);

1148 
¨m_fú_q15
(

1149 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

1150 
q15_t
 * 
pSrc
,

1151 
q15_t
 * 
pD°
,

1152 
uöt32_t
 
blockSize
);

1162 
¨m_fú_Á°_q15
(

1163 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

1164 
q15_t
 * 
pSrc
,

1165 
q15_t
 * 
pD°
,

1166 
uöt32_t
 
blockSize
);

1179 
¨m_°©us
 
¨m_fú_öô_q15
(

1180 
¨m_fú_ö°™˚_q15
 * 
S
,

1181 
uöt16_t
 
numT≠s
,

1182 
q15_t
 * 
pC€ffs
,

1183 
q15_t
 * 
pSèã
,

1184 
uöt32_t
 
blockSize
);

1194 
¨m_fú_q31
(

1195 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

1196 
q31_t
 * 
pSrc
,

1197 
q31_t
 * 
pD°
,

1198 
uöt32_t
 
blockSize
);

1208 
¨m_fú_Á°_q31
(

1209 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

1210 
q31_t
 * 
pSrc
,

1211 
q31_t
 * 
pD°
,

1212 
uöt32_t
 
blockSize
);

1223 
¨m_fú_öô_q31
(

1224 
¨m_fú_ö°™˚_q31
 * 
S
,

1225 
uöt16_t
 
numT≠s
,

1226 
q31_t
 * 
pC€ffs
,

1227 
q31_t
 * 
pSèã
,

1228 
uöt32_t
 
blockSize
);

1238 
¨m_fú_f32
(

1239 c⁄° 
¨m_fú_ö°™˚_f32
 * 
S
,

1240 
Êﬂt32_t
 * 
pSrc
,

1241 
Êﬂt32_t
 * 
pD°
,

1242 
uöt32_t
 
blockSize
);

1253 
¨m_fú_öô_f32
(

1254 
¨m_fú_ö°™˚_f32
 * 
S
,

1255 
uöt16_t
 
numT≠s
,

1256 
Êﬂt32_t
 * 
pC€ffs
,

1257 
Êﬂt32_t
 * 
pSèã
,

1258 
uöt32_t
 
blockSize
);

1266 
öt8_t
 
numSèges
;

1267 
q15_t
 *
pSèã
;

1268 
q15_t
 *
pC€ffs
;

1269 
öt8_t
 
po°Shi·
;

1271 } 
	t¨m_biquad_ˇsd_df1_ö°_q15
;

1279 
uöt32_t
 
numSèges
;

1280 
q31_t
 *
pSèã
;

1281 
q31_t
 *
pC€ffs
;

1282 
uöt8_t
 
po°Shi·
;

1284 } 
	t¨m_biquad_ˇsd_df1_ö°_q31
;

1291 
uöt32_t
 
numSèges
;

1292 
Êﬂt32_t
 *
pSèã
;

1293 
Êﬂt32_t
 *
pC€ffs
;

1296 } 
	t¨m_biquad_ˇsd_df1_ö°_f32
;

1309 
¨m_biquad_ˇsˇde_df1_q15
(

1310 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1311 
q15_t
 * 
pSrc
,

1312 
q15_t
 * 
pD°
,

1313 
uöt32_t
 
blockSize
);

1325 
¨m_biquad_ˇsˇde_df1_öô_q15
(

1326 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1327 
uöt8_t
 
numSèges
,

1328 
q15_t
 * 
pC€ffs
,

1329 
q15_t
 * 
pSèã
,

1330 
öt8_t
 
po°Shi·
);

1342 
¨m_biquad_ˇsˇde_df1_Á°_q15
(

1343 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1344 
q15_t
 * 
pSrc
,

1345 
q15_t
 * 
pD°
,

1346 
uöt32_t
 
blockSize
);

1358 
¨m_biquad_ˇsˇde_df1_q31
(

1359 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1360 
q31_t
 * 
pSrc
,

1361 
q31_t
 * 
pD°
,

1362 
uöt32_t
 
blockSize
);

1373 
¨m_biquad_ˇsˇde_df1_Á°_q31
(

1374 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1375 
q31_t
 * 
pSrc
,

1376 
q31_t
 * 
pD°
,

1377 
uöt32_t
 
blockSize
);

1389 
¨m_biquad_ˇsˇde_df1_öô_q31
(

1390 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1391 
uöt8_t
 
numSèges
,

1392 
q31_t
 * 
pC€ffs
,

1393 
q31_t
 * 
pSèã
,

1394 
öt8_t
 
po°Shi·
);

1405 
¨m_biquad_ˇsˇde_df1_f32
(

1406 c⁄° 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

1407 
Êﬂt32_t
 * 
pSrc
,

1408 
Êﬂt32_t
 * 
pD°
,

1409 
uöt32_t
 
blockSize
);

1420 
¨m_biquad_ˇsˇde_df1_öô_f32
(

1421 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

1422 
uöt8_t
 
numSèges
,

1423 
Êﬂt32_t
 * 
pC€ffs
,

1424 
Êﬂt32_t
 * 
pSèã
);

1433 
uöt16_t
 
numRows
;

1434 
uöt16_t
 
numCﬁs
;

1435 
Êﬂt32_t
 *
pD©a
;

1436 } 
	t¨m_m©rix_ö°™˚_f32
;

1445 
uöt16_t
 
numRows
;

1446 
uöt16_t
 
numCﬁs
;

1447 
Êﬂt64_t
 *
pD©a
;

1448 } 
	t¨m_m©rix_ö°™˚_f64
;

1456 
uöt16_t
 
numRows
;

1457 
uöt16_t
 
numCﬁs
;

1458 
q15_t
 *
pD©a
;

1460 } 
	t¨m_m©rix_ö°™˚_q15
;

1468 
uöt16_t
 
numRows
;

1469 
uöt16_t
 
numCﬁs
;

1470 
q31_t
 *
pD©a
;

1472 } 
	t¨m_m©rix_ö°™˚_q31
;

1485 
¨m_°©us
 
¨m_m©_add_f32
(

1486 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1487 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1488 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1499 
¨m_°©us
 
¨m_m©_add_q15
(

1500 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1501 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1502 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1513 
¨m_°©us
 
¨m_m©_add_q31
(

1514 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1515 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1516 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1527 
¨m_°©us
 
¨m_m©_cm∂x_mu…_f32
(

1528 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1529 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1530 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1541 
¨m_°©us
 
¨m_m©_cm∂x_mu…_q15
(

1542 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1543 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1544 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

1545 
q15_t
 * 
pS¸©ch
);

1556 
¨m_°©us
 
¨m_m©_cm∂x_mu…_q31
(

1557 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1558 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1559 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1570 
¨m_°©us
 
¨m_m©_å™s_f32
(

1571 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

1572 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1583 
¨m_°©us
 
¨m_m©_å™s_q15
(

1584 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

1585 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1595 
¨m_°©us
 
¨m_m©_å™s_q31
(

1596 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

1597 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1609 
¨m_°©us
 
¨m_m©_mu…_f32
(

1610 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1611 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1612 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1624 
¨m_°©us
 
¨m_m©_mu…_q15
(

1625 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1626 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1627 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

1628 
q15_t
 * 
pSèã
);

1640 
¨m_°©us
 
¨m_m©_mu…_Á°_q15
(

1641 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1642 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1643 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

1644 
q15_t
 * 
pSèã
);

1655 
¨m_°©us
 
¨m_m©_mu…_q31
(

1656 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1657 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1658 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1669 
¨m_°©us
 
¨m_m©_mu…_Á°_q31
(

1670 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1671 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1672 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1684 
¨m_°©us
 
¨m_m©_sub_f32
(

1685 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1686 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1687 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1698 
¨m_°©us
 
¨m_m©_sub_q15
(

1699 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1700 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1701 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1712 
¨m_°©us
 
¨m_m©_sub_q31
(

1713 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1714 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1715 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1726 
¨m_°©us
 
¨m_m©_sˇÀ_f32
(

1727 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

1728 
Êﬂt32_t
 
sˇÀ
,

1729 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1741 
¨m_°©us
 
¨m_m©_sˇÀ_q15
(

1742 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

1743 
q15_t
 
sˇÀFø˘
,

1744 
öt32_t
 
shi·
,

1745 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1757 
¨m_°©us
 
¨m_m©_sˇÀ_q31
(

1758 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

1759 
q31_t
 
sˇÀFø˘
,

1760 
öt32_t
 
shi·
,

1761 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1773 
¨m_m©_öô_q31
(

1774 
¨m_m©rix_ö°™˚_q31
 * 
S
,

1775 
uöt16_t
 
nRows
,

1776 
uöt16_t
 
nCﬁumns
,

1777 
q31_t
 * 
pD©a
);

1788 
¨m_m©_öô_q15
(

1789 
¨m_m©rix_ö°™˚_q15
 * 
S
,

1790 
uöt16_t
 
nRows
,

1791 
uöt16_t
 
nCﬁumns
,

1792 
q15_t
 * 
pD©a
);

1803 
¨m_m©_öô_f32
(

1804 
¨m_m©rix_ö°™˚_f32
 * 
S
,

1805 
uöt16_t
 
nRows
,

1806 
uöt16_t
 
nCﬁumns
,

1807 
Êﬂt32_t
 * 
pD©a
);

1816 
q15_t
 
A0
;

1817 #ifde‡
ARM_MATH_CM0_FAMILY


1818 
q15_t
 
A1
;

1819 
q15_t
 
A2
;

1821 
q31_t
 
A1
;

1823 
q15_t
 
°©e
[3];

1824 
q15_t
 
Kp
;

1825 
q15_t
 
Ki
;

1826 
q15_t
 
Kd
;

1827 } 
	t¨m_pid_ö°™˚_q15
;

1834 
q31_t
 
A0
;

1835 
q31_t
 
A1
;

1836 
q31_t
 
A2
;

1837 
q31_t
 
°©e
[3];

1838 
q31_t
 
Kp
;

1839 
q31_t
 
Ki
;

1840 
q31_t
 
Kd
;

1842 } 
	t¨m_pid_ö°™˚_q31
;

1849 
Êﬂt32_t
 
A0
;

1850 
Êﬂt32_t
 
A1
;

1851 
Êﬂt32_t
 
A2
;

1852 
Êﬂt32_t
 
°©e
[3];

1853 
Êﬂt32_t
 
Kp
;

1854 
Êﬂt32_t
 
Ki
;

1855 
Êﬂt32_t
 
Kd
;

1856 } 
	t¨m_pid_ö°™˚_f32
;

1866 
¨m_pid_öô_f32
(

1867 
¨m_pid_ö°™˚_f32
 * 
S
,

1868 
öt32_t
 
ª£tSèãFœg
);

1875 
¨m_pid_ª£t_f32
(

1876 
¨m_pid_ö°™˚_f32
 * 
S
);

1885 
¨m_pid_öô_q31
(

1886 
¨m_pid_ö°™˚_q31
 * 
S
,

1887 
öt32_t
 
ª£tSèãFœg
);

1896 
¨m_pid_ª£t_q31
(

1897 
¨m_pid_ö°™˚_q31
 * 
S
);

1905 
¨m_pid_öô_q15
(

1906 
¨m_pid_ö°™˚_q15
 * 
S
,

1907 
öt32_t
 
ª£tSèãFœg
);

1914 
¨m_pid_ª£t_q15
(

1915 
¨m_pid_ö°™˚_q15
 * 
S
);

1923 
uöt32_t
 
nVÆues
;

1924 
Êﬂt32_t
 
x1
;

1925 
Êﬂt32_t
 
xS∑cög
;

1926 
Êﬂt32_t
 *
pYD©a
;

1927 } 
	t¨m_löór_öãΩ_ö°™˚_f32
;

1935 
uöt16_t
 
numRows
;

1936 
uöt16_t
 
numCﬁs
;

1937 
Êﬂt32_t
 *
pD©a
;

1938 } 
	t¨m_bûöór_öãΩ_ö°™˚_f32
;

1946 
uöt16_t
 
numRows
;

1947 
uöt16_t
 
numCﬁs
;

1948 
q31_t
 *
pD©a
;

1949 } 
	t¨m_bûöór_öãΩ_ö°™˚_q31
;

1957 
uöt16_t
 
numRows
;

1958 
uöt16_t
 
numCﬁs
;

1959 
q15_t
 *
pD©a
;

1960 } 
	t¨m_bûöór_öãΩ_ö°™˚_q15
;

1968 
uöt16_t
 
numRows
;

1969 
uöt16_t
 
numCﬁs
;

1970 
q7_t
 *
pD©a
;

1971 } 
	t¨m_bûöór_öãΩ_ö°™˚_q7
;

1983 
¨m_mu…_q7
(

1984 
q7_t
 * 
pSrcA
,

1985 
q7_t
 * 
pSrcB
,

1986 
q7_t
 * 
pD°
,

1987 
uöt32_t
 
blockSize
);

1998 
¨m_mu…_q15
(

1999 
q15_t
 * 
pSrcA
,

2000 
q15_t
 * 
pSrcB
,

2001 
q15_t
 * 
pD°
,

2002 
uöt32_t
 
blockSize
);

2013 
¨m_mu…_q31
(

2014 
q31_t
 * 
pSrcA
,

2015 
q31_t
 * 
pSrcB
,

2016 
q31_t
 * 
pD°
,

2017 
uöt32_t
 
blockSize
);

2028 
¨m_mu…_f32
(

2029 
Êﬂt32_t
 * 
pSrcA
,

2030 
Êﬂt32_t
 * 
pSrcB
,

2031 
Êﬂt32_t
 * 
pD°
,

2032 
uöt32_t
 
blockSize
);

2045 
uöt16_t
 
f·Lí
;

2046 
uöt8_t
 
if·Fœg
;

2047 
uöt8_t
 
bôRevî£Fœg
;

2048 
q15_t
 *
pTwiddÀ
;

2049 
uöt16_t
 *
pBôRevTabÀ
;

2050 
uöt16_t
 
twidC€fModifõr
;

2051 
uöt16_t
 
bôRevFa˘‹
;

2052 } 
	t¨m_cf·_ødix2_ö°™˚_q15
;

2055 
¨m_°©us
 
¨m_cf·_ødix2_öô_q15
(

2056 
¨m_cf·_ødix2_ö°™˚_q15
 * 
S
,

2057 
uöt16_t
 
f·Lí
,

2058 
uöt8_t
 
if·Fœg
,

2059 
uöt8_t
 
bôRevî£Fœg
);

2062 
¨m_cf·_ødix2_q15
(

2063 c⁄° 
¨m_cf·_ødix2_ö°™˚_q15
 * 
S
,

2064 
q15_t
 * 
pSrc
);

2074 
uöt16_t
 
f·Lí
;

2075 
uöt8_t
 
if·Fœg
;

2076 
uöt8_t
 
bôRevî£Fœg
;

2077 
q15_t
 *
pTwiddÀ
;

2078 
uöt16_t
 *
pBôRevTabÀ
;

2079 
uöt16_t
 
twidC€fModifõr
;

2080 
uöt16_t
 
bôRevFa˘‹
;

2081 } 
	t¨m_cf·_ødix4_ö°™˚_q15
;

2084 
¨m_°©us
 
¨m_cf·_ødix4_öô_q15
(

2085 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

2086 
uöt16_t
 
f·Lí
,

2087 
uöt8_t
 
if·Fœg
,

2088 
uöt8_t
 
bôRevî£Fœg
);

2091 
¨m_cf·_ødix4_q15
(

2092 c⁄° 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

2093 
q15_t
 * 
pSrc
);

2101 
uöt16_t
 
f·Lí
;

2102 
uöt8_t
 
if·Fœg
;

2103 
uöt8_t
 
bôRevî£Fœg
;

2104 
q31_t
 *
pTwiddÀ
;

2105 
uöt16_t
 *
pBôRevTabÀ
;

2106 
uöt16_t
 
twidC€fModifõr
;

2107 
uöt16_t
 
bôRevFa˘‹
;

2108 } 
	t¨m_cf·_ødix2_ö°™˚_q31
;

2111 
¨m_°©us
 
¨m_cf·_ødix2_öô_q31
(

2112 
¨m_cf·_ødix2_ö°™˚_q31
 * 
S
,

2113 
uöt16_t
 
f·Lí
,

2114 
uöt8_t
 
if·Fœg
,

2115 
uöt8_t
 
bôRevî£Fœg
);

2118 
¨m_cf·_ødix2_q31
(

2119 c⁄° 
¨m_cf·_ødix2_ö°™˚_q31
 * 
S
,

2120 
q31_t
 * 
pSrc
);

2128 
uöt16_t
 
f·Lí
;

2129 
uöt8_t
 
if·Fœg
;

2130 
uöt8_t
 
bôRevî£Fœg
;

2131 
q31_t
 *
pTwiddÀ
;

2132 
uöt16_t
 *
pBôRevTabÀ
;

2133 
uöt16_t
 
twidC€fModifõr
;

2134 
uöt16_t
 
bôRevFa˘‹
;

2135 } 
	t¨m_cf·_ødix4_ö°™˚_q31
;

2138 
¨m_cf·_ødix4_q31
(

2139 c⁄° 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

2140 
q31_t
 * 
pSrc
);

2143 
¨m_°©us
 
¨m_cf·_ødix4_öô_q31
(

2144 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

2145 
uöt16_t
 
f·Lí
,

2146 
uöt8_t
 
if·Fœg
,

2147 
uöt8_t
 
bôRevî£Fœg
);

2155 
uöt16_t
 
f·Lí
;

2156 
uöt8_t
 
if·Fœg
;

2157 
uöt8_t
 
bôRevî£Fœg
;

2158 
Êﬂt32_t
 *
pTwiddÀ
;

2159 
uöt16_t
 *
pBôRevTabÀ
;

2160 
uöt16_t
 
twidC€fModifõr
;

2161 
uöt16_t
 
bôRevFa˘‹
;

2162 
Êﬂt32_t
 
⁄ebyf·Lí
;

2163 } 
	t¨m_cf·_ødix2_ö°™˚_f32
;

2166 
¨m_°©us
 
¨m_cf·_ødix2_öô_f32
(

2167 
¨m_cf·_ødix2_ö°™˚_f32
 * 
S
,

2168 
uöt16_t
 
f·Lí
,

2169 
uöt8_t
 
if·Fœg
,

2170 
uöt8_t
 
bôRevî£Fœg
);

2173 
¨m_cf·_ødix2_f32
(

2174 c⁄° 
¨m_cf·_ødix2_ö°™˚_f32
 * 
S
,

2175 
Êﬂt32_t
 * 
pSrc
);

2183 
uöt16_t
 
f·Lí
;

2184 
uöt8_t
 
if·Fœg
;

2185 
uöt8_t
 
bôRevî£Fœg
;

2186 
Êﬂt32_t
 *
pTwiddÀ
;

2187 
uöt16_t
 *
pBôRevTabÀ
;

2188 
uöt16_t
 
twidC€fModifõr
;

2189 
uöt16_t
 
bôRevFa˘‹
;

2190 
Êﬂt32_t
 
⁄ebyf·Lí
;

2191 } 
	t¨m_cf·_ødix4_ö°™˚_f32
;

2194 
¨m_°©us
 
¨m_cf·_ødix4_öô_f32
(

2195 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

2196 
uöt16_t
 
f·Lí
,

2197 
uöt8_t
 
if·Fœg
,

2198 
uöt8_t
 
bôRevî£Fœg
);

2201 
¨m_cf·_ødix4_f32
(

2202 c⁄° 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

2203 
Êﬂt32_t
 * 
pSrc
);

2211 
uöt16_t
 
f·Lí
;

2212 c⁄° 
q15_t
 *
pTwiddÀ
;

2213 c⁄° 
uöt16_t
 *
pBôRevTabÀ
;

2214 
uöt16_t
 
bôRevLígth
;

2215 } 
	t¨m_cf·_ö°™˚_q15
;

2217 
¨m_cf·_q15
(

2218 c⁄° 
¨m_cf·_ö°™˚_q15
 * 
S
,

2219 
q15_t
 * 
p1
,

2220 
uöt8_t
 
if·Fœg
,

2221 
uöt8_t
 
bôRevî£Fœg
);

2229 
uöt16_t
 
f·Lí
;

2230 c⁄° 
q31_t
 *
pTwiddÀ
;

2231 c⁄° 
uöt16_t
 *
pBôRevTabÀ
;

2232 
uöt16_t
 
bôRevLígth
;

2233 } 
	t¨m_cf·_ö°™˚_q31
;

2235 
¨m_cf·_q31
(

2236 c⁄° 
¨m_cf·_ö°™˚_q31
 * 
S
,

2237 
q31_t
 * 
p1
,

2238 
uöt8_t
 
if·Fœg
,

2239 
uöt8_t
 
bôRevî£Fœg
);

2247 
uöt16_t
 
f·Lí
;

2248 c⁄° 
Êﬂt32_t
 *
pTwiddÀ
;

2249 c⁄° 
uöt16_t
 *
pBôRevTabÀ
;

2250 
uöt16_t
 
bôRevLígth
;

2251 } 
	t¨m_cf·_ö°™˚_f32
;

2253 
¨m_cf·_f32
(

2254 c⁄° 
¨m_cf·_ö°™˚_f32
 * 
S
,

2255 
Êﬂt32_t
 * 
p1
,

2256 
uöt8_t
 
if·Fœg
,

2257 
uöt8_t
 
bôRevî£Fœg
);

2265 
uöt32_t
 
f·LíRól
;

2266 
uöt8_t
 
if·FœgR
;

2267 
uöt8_t
 
bôRevî£FœgR
;

2268 
uöt32_t
 
twidC€fRModifõr
;

2269 
q15_t
 *
pTwiddÀARól
;

2270 
q15_t
 *
pTwiddÀBRól
;

2271 c⁄° 
¨m_cf·_ö°™˚_q15
 *
pCf·
;

2272 } 
	t¨m_rf·_ö°™˚_q15
;

2274 
¨m_°©us
 
¨m_rf·_öô_q15
(

2275 
¨m_rf·_ö°™˚_q15
 * 
S
,

2276 
uöt32_t
 
f·LíRól
,

2277 
uöt32_t
 
if·FœgR
,

2278 
uöt32_t
 
bôRevî£Fœg
);

2280 
¨m_rf·_q15
(

2281 c⁄° 
¨m_rf·_ö°™˚_q15
 * 
S
,

2282 
q15_t
 * 
pSrc
,

2283 
q15_t
 * 
pD°
);

2291 
uöt32_t
 
f·LíRól
;

2292 
uöt8_t
 
if·FœgR
;

2293 
uöt8_t
 
bôRevî£FœgR
;

2294 
uöt32_t
 
twidC€fRModifõr
;

2295 
q31_t
 *
pTwiddÀARól
;

2296 
q31_t
 *
pTwiddÀBRól
;

2297 c⁄° 
¨m_cf·_ö°™˚_q31
 *
pCf·
;

2298 } 
	t¨m_rf·_ö°™˚_q31
;

2300 
¨m_°©us
 
¨m_rf·_öô_q31
(

2301 
¨m_rf·_ö°™˚_q31
 * 
S
,

2302 
uöt32_t
 
f·LíRól
,

2303 
uöt32_t
 
if·FœgR
,

2304 
uöt32_t
 
bôRevî£Fœg
);

2306 
¨m_rf·_q31
(

2307 c⁄° 
¨m_rf·_ö°™˚_q31
 * 
S
,

2308 
q31_t
 * 
pSrc
,

2309 
q31_t
 * 
pD°
);

2317 
uöt32_t
 
f·LíRól
;

2318 
uöt16_t
 
f·LíBy2
;

2319 
uöt8_t
 
if·FœgR
;

2320 
uöt8_t
 
bôRevî£FœgR
;

2321 
uöt32_t
 
twidC€fRModifõr
;

2322 
Êﬂt32_t
 *
pTwiddÀARól
;

2323 
Êﬂt32_t
 *
pTwiddÀBRól
;

2324 
¨m_cf·_ødix4_ö°™˚_f32
 *
pCf·
;

2325 } 
	t¨m_rf·_ö°™˚_f32
;

2327 
¨m_°©us
 
¨m_rf·_öô_f32
(

2328 
¨m_rf·_ö°™˚_f32
 * 
S
,

2329 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

2330 
uöt32_t
 
f·LíRól
,

2331 
uöt32_t
 
if·FœgR
,

2332 
uöt32_t
 
bôRevî£Fœg
);

2334 
¨m_rf·_f32
(

2335 c⁄° 
¨m_rf·_ö°™˚_f32
 * 
S
,

2336 
Êﬂt32_t
 * 
pSrc
,

2337 
Êﬂt32_t
 * 
pD°
);

2345 
¨m_cf·_ö°™˚_f32
 
Söt
;

2346 
uöt16_t
 
f·LíRFFT
;

2347 
Êﬂt32_t
 * 
pTwiddÀRFFT
;

2348 } 
	t¨m_rf·_Á°_ö°™˚_f32
 ;

2350 
¨m_°©us
 
¨m_rf·_Á°_öô_f32
 (

2351 
¨m_rf·_Á°_ö°™˚_f32
 * 
S
,

2352 
uöt16_t
 
f·Lí
);

2354 
¨m_rf·_Á°_f32
(

2355 
¨m_rf·_Á°_ö°™˚_f32
 * 
S
,

2356 
Êﬂt32_t
 * 
p
, flﬂt32_à* 
pOut
,

2357 
uöt8_t
 
if·Fœg
);

2365 
uöt16_t
 
N
;

2366 
uöt16_t
 
Nby2
;

2367 
Êﬂt32_t
 
n‹mÆize
;

2368 
Êﬂt32_t
 *
pTwiddÀ
;

2369 
Êﬂt32_t
 *
pCosFa˘‹
;

2370 
¨m_rf·_ö°™˚_f32
 *
pRf·
;

2371 
¨m_cf·_ødix4_ö°™˚_f32
 *
pCf·
;

2372 } 
	t¨m_d˘4_ö°™˚_f32
;

2385 
¨m_°©us
 
¨m_d˘4_öô_f32
(

2386 
¨m_d˘4_ö°™˚_f32
 * 
S
,

2387 
¨m_rf·_ö°™˚_f32
 * 
S_RFFT
,

2388 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

2389 
uöt16_t
 
N
,

2390 
uöt16_t
 
Nby2
,

2391 
Êﬂt32_t
 
n‹mÆize
);

2401 
¨m_d˘4_f32
(

2402 c⁄° 
¨m_d˘4_ö°™˚_f32
 * 
S
,

2403 
Êﬂt32_t
 * 
pSèã
,

2404 
Êﬂt32_t
 * 
pI∆öeBuf„r
);

2412 
uöt16_t
 
N
;

2413 
uöt16_t
 
Nby2
;

2414 
q31_t
 
n‹mÆize
;

2415 
q31_t
 *
pTwiddÀ
;

2416 
q31_t
 *
pCosFa˘‹
;

2417 
¨m_rf·_ö°™˚_q31
 *
pRf·
;

2418 
¨m_cf·_ødix4_ö°™˚_q31
 *
pCf·
;

2419 } 
	t¨m_d˘4_ö°™˚_q31
;

2432 
¨m_°©us
 
¨m_d˘4_öô_q31
(

2433 
¨m_d˘4_ö°™˚_q31
 * 
S
,

2434 
¨m_rf·_ö°™˚_q31
 * 
S_RFFT
,

2435 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S_CFFT
,

2436 
uöt16_t
 
N
,

2437 
uöt16_t
 
Nby2
,

2438 
q31_t
 
n‹mÆize
);

2448 
¨m_d˘4_q31
(

2449 c⁄° 
¨m_d˘4_ö°™˚_q31
 * 
S
,

2450 
q31_t
 * 
pSèã
,

2451 
q31_t
 * 
pI∆öeBuf„r
);

2459 
uöt16_t
 
N
;

2460 
uöt16_t
 
Nby2
;

2461 
q15_t
 
n‹mÆize
;

2462 
q15_t
 *
pTwiddÀ
;

2463 
q15_t
 *
pCosFa˘‹
;

2464 
¨m_rf·_ö°™˚_q15
 *
pRf·
;

2465 
¨m_cf·_ødix4_ö°™˚_q15
 *
pCf·
;

2466 } 
	t¨m_d˘4_ö°™˚_q15
;

2479 
¨m_°©us
 
¨m_d˘4_öô_q15
(

2480 
¨m_d˘4_ö°™˚_q15
 * 
S
,

2481 
¨m_rf·_ö°™˚_q15
 * 
S_RFFT
,

2482 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S_CFFT
,

2483 
uöt16_t
 
N
,

2484 
uöt16_t
 
Nby2
,

2485 
q15_t
 
n‹mÆize
);

2495 
¨m_d˘4_q15
(

2496 c⁄° 
¨m_d˘4_ö°™˚_q15
 * 
S
,

2497 
q15_t
 * 
pSèã
,

2498 
q15_t
 * 
pI∆öeBuf„r
);

2509 
¨m_add_f32
(

2510 
Êﬂt32_t
 * 
pSrcA
,

2511 
Êﬂt32_t
 * 
pSrcB
,

2512 
Êﬂt32_t
 * 
pD°
,

2513 
uöt32_t
 
blockSize
);

2524 
¨m_add_q7
(

2525 
q7_t
 * 
pSrcA
,

2526 
q7_t
 * 
pSrcB
,

2527 
q7_t
 * 
pD°
,

2528 
uöt32_t
 
blockSize
);

2539 
¨m_add_q15
(

2540 
q15_t
 * 
pSrcA
,

2541 
q15_t
 * 
pSrcB
,

2542 
q15_t
 * 
pD°
,

2543 
uöt32_t
 
blockSize
);

2554 
¨m_add_q31
(

2555 
q31_t
 * 
pSrcA
,

2556 
q31_t
 * 
pSrcB
,

2557 
q31_t
 * 
pD°
,

2558 
uöt32_t
 
blockSize
);

2569 
¨m_sub_f32
(

2570 
Êﬂt32_t
 * 
pSrcA
,

2571 
Êﬂt32_t
 * 
pSrcB
,

2572 
Êﬂt32_t
 * 
pD°
,

2573 
uöt32_t
 
blockSize
);

2584 
¨m_sub_q7
(

2585 
q7_t
 * 
pSrcA
,

2586 
q7_t
 * 
pSrcB
,

2587 
q7_t
 * 
pD°
,

2588 
uöt32_t
 
blockSize
);

2599 
¨m_sub_q15
(

2600 
q15_t
 * 
pSrcA
,

2601 
q15_t
 * 
pSrcB
,

2602 
q15_t
 * 
pD°
,

2603 
uöt32_t
 
blockSize
);

2614 
¨m_sub_q31
(

2615 
q31_t
 * 
pSrcA
,

2616 
q31_t
 * 
pSrcB
,

2617 
q31_t
 * 
pD°
,

2618 
uöt32_t
 
blockSize
);

2629 
¨m_sˇÀ_f32
(

2630 
Êﬂt32_t
 * 
pSrc
,

2631 
Êﬂt32_t
 
sˇÀ
,

2632 
Êﬂt32_t
 * 
pD°
,

2633 
uöt32_t
 
blockSize
);

2645 
¨m_sˇÀ_q7
(

2646 
q7_t
 * 
pSrc
,

2647 
q7_t
 
sˇÀFø˘
,

2648 
öt8_t
 
shi·
,

2649 
q7_t
 * 
pD°
,

2650 
uöt32_t
 
blockSize
);

2662 
¨m_sˇÀ_q15
(

2663 
q15_t
 * 
pSrc
,

2664 
q15_t
 
sˇÀFø˘
,

2665 
öt8_t
 
shi·
,

2666 
q15_t
 * 
pD°
,

2667 
uöt32_t
 
blockSize
);

2679 
¨m_sˇÀ_q31
(

2680 
q31_t
 * 
pSrc
,

2681 
q31_t
 
sˇÀFø˘
,

2682 
öt8_t
 
shi·
,

2683 
q31_t
 * 
pD°
,

2684 
uöt32_t
 
blockSize
);

2694 
¨m_abs_q7
(

2695 
q7_t
 * 
pSrc
,

2696 
q7_t
 * 
pD°
,

2697 
uöt32_t
 
blockSize
);

2707 
¨m_abs_f32
(

2708 
Êﬂt32_t
 * 
pSrc
,

2709 
Êﬂt32_t
 * 
pD°
,

2710 
uöt32_t
 
blockSize
);

2720 
¨m_abs_q15
(

2721 
q15_t
 * 
pSrc
,

2722 
q15_t
 * 
pD°
,

2723 
uöt32_t
 
blockSize
);

2733 
¨m_abs_q31
(

2734 
q31_t
 * 
pSrc
,

2735 
q31_t
 * 
pD°
,

2736 
uöt32_t
 
blockSize
);

2747 
¨m_dŸ_¥od_f32
(

2748 
Êﬂt32_t
 * 
pSrcA
,

2749 
Êﬂt32_t
 * 
pSrcB
,

2750 
uöt32_t
 
blockSize
,

2751 
Êﬂt32_t
 * 
ªsu…
);

2762 
¨m_dŸ_¥od_q7
(

2763 
q7_t
 * 
pSrcA
,

2764 
q7_t
 * 
pSrcB
,

2765 
uöt32_t
 
blockSize
,

2766 
q31_t
 * 
ªsu…
);

2777 
¨m_dŸ_¥od_q15
(

2778 
q15_t
 * 
pSrcA
,

2779 
q15_t
 * 
pSrcB
,

2780 
uöt32_t
 
blockSize
,

2781 
q63_t
 * 
ªsu…
);

2792 
¨m_dŸ_¥od_q31
(

2793 
q31_t
 * 
pSrcA
,

2794 
q31_t
 * 
pSrcB
,

2795 
uöt32_t
 
blockSize
,

2796 
q63_t
 * 
ªsu…
);

2807 
¨m_shi·_q7
(

2808 
q7_t
 * 
pSrc
,

2809 
öt8_t
 
shi·Bôs
,

2810 
q7_t
 * 
pD°
,

2811 
uöt32_t
 
blockSize
);

2822 
¨m_shi·_q15
(

2823 
q15_t
 * 
pSrc
,

2824 
öt8_t
 
shi·Bôs
,

2825 
q15_t
 * 
pD°
,

2826 
uöt32_t
 
blockSize
);

2837 
¨m_shi·_q31
(

2838 
q31_t
 * 
pSrc
,

2839 
öt8_t
 
shi·Bôs
,

2840 
q31_t
 * 
pD°
,

2841 
uöt32_t
 
blockSize
);

2852 
¨m_off£t_f32
(

2853 
Êﬂt32_t
 * 
pSrc
,

2854 
Êﬂt32_t
 
off£t
,

2855 
Êﬂt32_t
 * 
pD°
,

2856 
uöt32_t
 
blockSize
);

2867 
¨m_off£t_q7
(

2868 
q7_t
 * 
pSrc
,

2869 
q7_t
 
off£t
,

2870 
q7_t
 * 
pD°
,

2871 
uöt32_t
 
blockSize
);

2882 
¨m_off£t_q15
(

2883 
q15_t
 * 
pSrc
,

2884 
q15_t
 
off£t
,

2885 
q15_t
 * 
pD°
,

2886 
uöt32_t
 
blockSize
);

2897 
¨m_off£t_q31
(

2898 
q31_t
 * 
pSrc
,

2899 
q31_t
 
off£t
,

2900 
q31_t
 * 
pD°
,

2901 
uöt32_t
 
blockSize
);

2911 
¨m_√g©e_f32
(

2912 
Êﬂt32_t
 * 
pSrc
,

2913 
Êﬂt32_t
 * 
pD°
,

2914 
uöt32_t
 
blockSize
);

2924 
¨m_√g©e_q7
(

2925 
q7_t
 * 
pSrc
,

2926 
q7_t
 * 
pD°
,

2927 
uöt32_t
 
blockSize
);

2937 
¨m_√g©e_q15
(

2938 
q15_t
 * 
pSrc
,

2939 
q15_t
 * 
pD°
,

2940 
uöt32_t
 
blockSize
);

2950 
¨m_√g©e_q31
(

2951 
q31_t
 * 
pSrc
,

2952 
q31_t
 * 
pD°
,

2953 
uöt32_t
 
blockSize
);

2961 
¨m_c›y_f32
(

2962 
Êﬂt32_t
 * 
pSrc
,

2963 
Êﬂt32_t
 * 
pD°
,

2964 
uöt32_t
 
blockSize
);

2973 
¨m_c›y_q7
(

2974 
q7_t
 * 
pSrc
,

2975 
q7_t
 * 
pD°
,

2976 
uöt32_t
 
blockSize
);

2985 
¨m_c›y_q15
(

2986 
q15_t
 * 
pSrc
,

2987 
q15_t
 * 
pD°
,

2988 
uöt32_t
 
blockSize
);

2997 
¨m_c›y_q31
(

2998 
q31_t
 * 
pSrc
,

2999 
q31_t
 * 
pD°
,

3000 
uöt32_t
 
blockSize
);

3008 
¨m_fûl_f32
(

3009 
Êﬂt32_t
 
vÆue
,

3010 
Êﬂt32_t
 * 
pD°
,

3011 
uöt32_t
 
blockSize
);

3020 
¨m_fûl_q7
(

3021 
q7_t
 
vÆue
,

3022 
q7_t
 * 
pD°
,

3023 
uöt32_t
 
blockSize
);

3032 
¨m_fûl_q15
(

3033 
q15_t
 
vÆue
,

3034 
q15_t
 * 
pD°
,

3035 
uöt32_t
 
blockSize
);

3044 
¨m_fûl_q31
(

3045 
q31_t
 
vÆue
,

3046 
q31_t
 * 
pD°
,

3047 
uöt32_t
 
blockSize
);

3059 
¨m_c⁄v_f32
(

3060 
Êﬂt32_t
 * 
pSrcA
,

3061 
uöt32_t
 
§cALí
,

3062 
Êﬂt32_t
 * 
pSrcB
,

3063 
uöt32_t
 
§cBLí
,

3064 
Êﬂt32_t
 * 
pD°
);

3080 
¨m_c⁄v_›t_q15
(

3081 
q15_t
 * 
pSrcA
,

3082 
uöt32_t
 
§cALí
,

3083 
q15_t
 * 
pSrcB
,

3084 
uöt32_t
 
§cBLí
,

3085 
q15_t
 * 
pD°
,

3086 
q15_t
 * 
pS¸©ch1
,

3087 
q15_t
 * 
pS¸©ch2
);

3100 
¨m_c⁄v_q15
(

3101 
q15_t
 * 
pSrcA
,

3102 
uöt32_t
 
§cALí
,

3103 
q15_t
 * 
pSrcB
,

3104 
uöt32_t
 
§cBLí
,

3105 
q15_t
 * 
pD°
);

3117 
¨m_c⁄v_Á°_q15
(

3118 
q15_t
 * 
pSrcA
,

3119 
uöt32_t
 
§cALí
,

3120 
q15_t
 * 
pSrcB
,

3121 
uöt32_t
 
§cBLí
,

3122 
q15_t
 * 
pD°
);

3136 
¨m_c⁄v_Á°_›t_q15
(

3137 
q15_t
 * 
pSrcA
,

3138 
uöt32_t
 
§cALí
,

3139 
q15_t
 * 
pSrcB
,

3140 
uöt32_t
 
§cBLí
,

3141 
q15_t
 * 
pD°
,

3142 
q15_t
 * 
pS¸©ch1
,

3143 
q15_t
 * 
pS¸©ch2
);

3157 
¨m_c⁄v_q31
(

3158 
q31_t
 * 
pSrcA
,

3159 
uöt32_t
 
§cALí
,

3160 
q31_t
 * 
pSrcB
,

3161 
uöt32_t
 
§cBLí
,

3162 
q31_t
 * 
pD°
);

3174 
¨m_c⁄v_Á°_q31
(

3175 
q31_t
 * 
pSrcA
,

3176 
uöt32_t
 
§cALí
,

3177 
q31_t
 * 
pSrcB
,

3178 
uöt32_t
 
§cBLí
,

3179 
q31_t
 * 
pD°
);

3194 
¨m_c⁄v_›t_q7
(

3195 
q7_t
 * 
pSrcA
,

3196 
uöt32_t
 
§cALí
,

3197 
q7_t
 * 
pSrcB
,

3198 
uöt32_t
 
§cBLí
,

3199 
q7_t
 * 
pD°
,

3200 
q15_t
 * 
pS¸©ch1
,

3201 
q15_t
 * 
pS¸©ch2
);

3215 
¨m_c⁄v_q7
(

3216 
q7_t
 * 
pSrcA
,

3217 
uöt32_t
 
§cALí
,

3218 
q7_t
 * 
pSrcB
,

3219 
uöt32_t
 
§cBLí
,

3220 
q7_t
 * 
pD°
);

3235 
¨m_°©us
 
¨m_c⁄v_∑πül_f32
(

3236 
Êﬂt32_t
 * 
pSrcA
,

3237 
uöt32_t
 
§cALí
,

3238 
Êﬂt32_t
 * 
pSrcB
,

3239 
uöt32_t
 
§cBLí
,

3240 
Êﬂt32_t
 * 
pD°
,

3241 
uöt32_t
 
fú°Index
,

3242 
uöt32_t
 
numPoöts
);

3258 
¨m_°©us
 
¨m_c⁄v_∑πül_›t_q15
(

3259 
q15_t
 * 
pSrcA
,

3260 
uöt32_t
 
§cALí
,

3261 
q15_t
 * 
pSrcB
,

3262 
uöt32_t
 
§cBLí
,

3263 
q15_t
 * 
pD°
,

3264 
uöt32_t
 
fú°Index
,

3265 
uöt32_t
 
numPoöts
,

3266 
q15_t
 * 
pS¸©ch1
,

3267 
q15_t
 * 
pS¸©ch2
);

3282 
¨m_°©us
 
¨m_c⁄v_∑πül_q15
(

3283 
q15_t
 * 
pSrcA
,

3284 
uöt32_t
 
§cALí
,

3285 
q15_t
 * 
pSrcB
,

3286 
uöt32_t
 
§cBLí
,

3287 
q15_t
 * 
pD°
,

3288 
uöt32_t
 
fú°Index
,

3289 
uöt32_t
 
numPoöts
);

3303 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_q15
(

3304 
q15_t
 * 
pSrcA
,

3305 
uöt32_t
 
§cALí
,

3306 
q15_t
 * 
pSrcB
,

3307 
uöt32_t
 
§cBLí
,

3308 
q15_t
 * 
pD°
,

3309 
uöt32_t
 
fú°Index
,

3310 
uöt32_t
 
numPoöts
);

3327 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_›t_q15
(

3328 
q15_t
 * 
pSrcA
,

3329 
uöt32_t
 
§cALí
,

3330 
q15_t
 * 
pSrcB
,

3331 
uöt32_t
 
§cBLí
,

3332 
q15_t
 * 
pD°
,

3333 
uöt32_t
 
fú°Index
,

3334 
uöt32_t
 
numPoöts
,

3335 
q15_t
 * 
pS¸©ch1
,

3336 
q15_t
 * 
pS¸©ch2
);

3351 
¨m_°©us
 
¨m_c⁄v_∑πül_q31
(

3352 
q31_t
 * 
pSrcA
,

3353 
uöt32_t
 
§cALí
,

3354 
q31_t
 * 
pSrcB
,

3355 
uöt32_t
 
§cBLí
,

3356 
q31_t
 * 
pD°
,

3357 
uöt32_t
 
fú°Index
,

3358 
uöt32_t
 
numPoöts
);

3373 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_q31
(

3374 
q31_t
 * 
pSrcA
,

3375 
uöt32_t
 
§cALí
,

3376 
q31_t
 * 
pSrcB
,

3377 
uöt32_t
 
§cBLí
,

3378 
q31_t
 * 
pD°
,

3379 
uöt32_t
 
fú°Index
,

3380 
uöt32_t
 
numPoöts
);

3397 
¨m_°©us
 
¨m_c⁄v_∑πül_›t_q7
(

3398 
q7_t
 * 
pSrcA
,

3399 
uöt32_t
 
§cALí
,

3400 
q7_t
 * 
pSrcB
,

3401 
uöt32_t
 
§cBLí
,

3402 
q7_t
 * 
pD°
,

3403 
uöt32_t
 
fú°Index
,

3404 
uöt32_t
 
numPoöts
,

3405 
q15_t
 * 
pS¸©ch1
,

3406 
q15_t
 * 
pS¸©ch2
);

3421 
¨m_°©us
 
¨m_c⁄v_∑πül_q7
(

3422 
q7_t
 * 
pSrcA
,

3423 
uöt32_t
 
§cALí
,

3424 
q7_t
 * 
pSrcB
,

3425 
uöt32_t
 
§cBLí
,

3426 
q7_t
 * 
pD°
,

3427 
uöt32_t
 
fú°Index
,

3428 
uöt32_t
 
numPoöts
);

3438 
uöt8_t
 
M
;

3439 
uöt16_t
 
numT≠s
;

3440 
q15_t
 *
pC€ffs
;

3441 
q15_t
 *
pSèã
;

3442 } 
	t¨m_fú_decim©e_ö°™˚_q15
;

3450 
uöt8_t
 
M
;

3451 
uöt16_t
 
numT≠s
;

3452 
q31_t
 *
pC€ffs
;

3453 
q31_t
 *
pSèã
;

3455 } 
	t¨m_fú_decim©e_ö°™˚_q31
;

3463 
uöt8_t
 
M
;

3464 
uöt16_t
 
numT≠s
;

3465 
Êﬂt32_t
 *
pC€ffs
;

3466 
Êﬂt32_t
 *
pSèã
;

3468 } 
	t¨m_fú_decim©e_ö°™˚_f32
;

3481 
¨m_fú_decim©e_f32
(

3482 c⁄° 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

3483 
Êﬂt32_t
 * 
pSrc
,

3484 
Êﬂt32_t
 * 
pD°
,

3485 
uöt32_t
 
blockSize
);

3500 
¨m_°©us
 
¨m_fú_decim©e_öô_f32
(

3501 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

3502 
uöt16_t
 
numT≠s
,

3503 
uöt8_t
 
M
,

3504 
Êﬂt32_t
 * 
pC€ffs
,

3505 
Êﬂt32_t
 * 
pSèã
,

3506 
uöt32_t
 
blockSize
);

3517 
¨m_fú_decim©e_q15
(

3518 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3519 
q15_t
 * 
pSrc
,

3520 
q15_t
 * 
pD°
,

3521 
uöt32_t
 
blockSize
);

3532 
¨m_fú_decim©e_Á°_q15
(

3533 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3534 
q15_t
 * 
pSrc
,

3535 
q15_t
 * 
pD°
,

3536 
uöt32_t
 
blockSize
);

3552 
¨m_°©us
 
¨m_fú_decim©e_öô_q15
(

3553 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3554 
uöt16_t
 
numT≠s
,

3555 
uöt8_t
 
M
,

3556 
q15_t
 * 
pC€ffs
,

3557 
q15_t
 * 
pSèã
,

3558 
uöt32_t
 
blockSize
);

3569 
¨m_fú_decim©e_q31
(

3570 c⁄° 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3571 
q31_t
 * 
pSrc
,

3572 
q31_t
 * 
pD°
,

3573 
uöt32_t
 
blockSize
);

3584 
¨m_fú_decim©e_Á°_q31
(

3585 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3586 
q31_t
 * 
pSrc
,

3587 
q31_t
 * 
pD°
,

3588 
uöt32_t
 
blockSize
);

3603 
¨m_°©us
 
¨m_fú_decim©e_öô_q31
(

3604 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3605 
uöt16_t
 
numT≠s
,

3606 
uöt8_t
 
M
,

3607 
q31_t
 * 
pC€ffs
,

3608 
q31_t
 * 
pSèã
,

3609 
uöt32_t
 
blockSize
);

3619 
uöt8_t
 
L
;

3620 
uöt16_t
 
pha£Lígth
;

3621 
q15_t
 *
pC€ffs
;

3622 
q15_t
 *
pSèã
;

3623 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_q15
;

3631 
uöt8_t
 
L
;

3632 
uöt16_t
 
pha£Lígth
;

3633 
q31_t
 *
pC€ffs
;

3634 
q31_t
 *
pSèã
;

3635 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_q31
;

3643 
uöt8_t
 
L
;

3644 
uöt16_t
 
pha£Lígth
;

3645 
Êﬂt32_t
 *
pC€ffs
;

3646 
Êﬂt32_t
 *
pSèã
;

3647 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_f32
;

3659 
¨m_fú_öãΩﬁ©e_q15
(

3660 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

3661 
q15_t
 * 
pSrc
,

3662 
q15_t
 * 
pD°
,

3663 
uöt32_t
 
blockSize
);

3678 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_q15
(

3679 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

3680 
uöt8_t
 
L
,

3681 
uöt16_t
 
numT≠s
,

3682 
q15_t
 * 
pC€ffs
,

3683 
q15_t
 * 
pSèã
,

3684 
uöt32_t
 
blockSize
);

3695 
¨m_fú_öãΩﬁ©e_q31
(

3696 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

3697 
q31_t
 * 
pSrc
,

3698 
q31_t
 * 
pD°
,

3699 
uöt32_t
 
blockSize
);

3713 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_q31
(

3714 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

3715 
uöt8_t
 
L
,

3716 
uöt16_t
 
numT≠s
,

3717 
q31_t
 * 
pC€ffs
,

3718 
q31_t
 * 
pSèã
,

3719 
uöt32_t
 
blockSize
);

3731 
¨m_fú_öãΩﬁ©e_f32
(

3732 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

3733 
Êﬂt32_t
 * 
pSrc
,

3734 
Êﬂt32_t
 * 
pD°
,

3735 
uöt32_t
 
blockSize
);

3749 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_f32
(

3750 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

3751 
uöt8_t
 
L
,

3752 
uöt16_t
 
numT≠s
,

3753 
Êﬂt32_t
 * 
pC€ffs
,

3754 
Êﬂt32_t
 * 
pSèã
,

3755 
uöt32_t
 
blockSize
);

3763 
uöt8_t
 
numSèges
;

3764 
q63_t
 *
pSèã
;

3765 
q31_t
 *
pC€ffs
;

3766 
uöt8_t
 
po°Shi·
;

3768 } 
	t¨m_biquad_ˇs_df1_32x64_ös_q31
;

3779 
¨m_biquad_ˇs_df1_32x64_q31
(

3780 c⁄° 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

3781 
q31_t
 * 
pSrc
,

3782 
q31_t
 * 
pD°
,

3783 
uöt32_t
 
blockSize
);

3795 
¨m_biquad_ˇs_df1_32x64_öô_q31
(

3796 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

3797 
uöt8_t
 
numSèges
,

3798 
q31_t
 * 
pC€ffs
,

3799 
q63_t
 * 
pSèã
,

3800 
uöt8_t
 
po°Shi·
);

3810 
uöt8_t
 
numSèges
;

3811 
Êﬂt32_t
 *
pSèã
;

3812 
Êﬂt32_t
 *
pC€ffs
;

3813 } 
	t¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
;

3823 
uöt8_t
 
numSèges
;

3824 
Êﬂt32_t
 *
pSèã
;

3825 
Êﬂt32_t
 *
pC€ffs
;

3826 } 
	t¨m_biquad_ˇsˇde_°îeo_df2T_ö°™˚_f32
;

3836 
uöt8_t
 
numSèges
;

3837 
Êﬂt64_t
 *
pSèã
;

3838 
Êﬂt64_t
 *
pC€ffs
;

3839 } 
	t¨m_biquad_ˇsˇde_df2T_ö°™˚_f64
;

3851 
¨m_biquad_ˇsˇde_df2T_f32
(

3852 c⁄° 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

3853 
Êﬂt32_t
 * 
pSrc
,

3854 
Êﬂt32_t
 * 
pD°
,

3855 
uöt32_t
 
blockSize
);

3867 
¨m_biquad_ˇsˇde_°îeo_df2T_f32
(

3868 c⁄° 
¨m_biquad_ˇsˇde_°îeo_df2T_ö°™˚_f32
 * 
S
,

3869 
Êﬂt32_t
 * 
pSrc
,

3870 
Êﬂt32_t
 * 
pD°
,

3871 
uöt32_t
 
blockSize
);

3882 
¨m_biquad_ˇsˇde_df2T_f64
(

3883 c⁄° 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f64
 * 
S
,

3884 
Êﬂt64_t
 * 
pSrc
,

3885 
Êﬂt64_t
 * 
pD°
,

3886 
uöt32_t
 
blockSize
);

3898 
¨m_biquad_ˇsˇde_df2T_öô_f32
(

3899 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

3900 
uöt8_t
 
numSèges
,

3901 
Êﬂt32_t
 * 
pC€ffs
,

3902 
Êﬂt32_t
 * 
pSèã
);

3914 
¨m_biquad_ˇsˇde_°îeo_df2T_öô_f32
(

3915 
¨m_biquad_ˇsˇde_°îeo_df2T_ö°™˚_f32
 * 
S
,

3916 
uöt8_t
 
numSèges
,

3917 
Êﬂt32_t
 * 
pC€ffs
,

3918 
Êﬂt32_t
 * 
pSèã
);

3930 
¨m_biquad_ˇsˇde_df2T_öô_f64
(

3931 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f64
 * 
S
,

3932 
uöt8_t
 
numSèges
,

3933 
Êﬂt64_t
 * 
pC€ffs
,

3934 
Êﬂt64_t
 * 
pSèã
);

3944 
uöt16_t
 
numSèges
;

3945 
q15_t
 *
pSèã
;

3946 
q15_t
 *
pC€ffs
;

3947 } 
	t¨m_fú_œâi˚_ö°™˚_q15
;

3955 
uöt16_t
 
numSèges
;

3956 
q31_t
 *
pSèã
;

3957 
q31_t
 *
pC€ffs
;

3958 } 
	t¨m_fú_œâi˚_ö°™˚_q31
;

3966 
uöt16_t
 
numSèges
;

3967 
Êﬂt32_t
 *
pSèã
;

3968 
Êﬂt32_t
 *
pC€ffs
;

3969 } 
	t¨m_fú_œâi˚_ö°™˚_f32
;

3980 
¨m_fú_œâi˚_öô_q15
(

3981 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

3982 
uöt16_t
 
numSèges
,

3983 
q15_t
 * 
pC€ffs
,

3984 
q15_t
 * 
pSèã
);

3995 
¨m_fú_œâi˚_q15
(

3996 c⁄° 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

3997 
q15_t
 * 
pSrc
,

3998 
q15_t
 * 
pD°
,

3999 
uöt32_t
 
blockSize
);

4010 
¨m_fú_œâi˚_öô_q31
(

4011 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

4012 
uöt16_t
 
numSèges
,

4013 
q31_t
 * 
pC€ffs
,

4014 
q31_t
 * 
pSèã
);

4026 
¨m_fú_œâi˚_q31
(

4027 c⁄° 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

4028 
q31_t
 * 
pSrc
,

4029 
q31_t
 * 
pD°
,

4030 
uöt32_t
 
blockSize
);

4041 
¨m_fú_œâi˚_öô_f32
(

4042 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

4043 
uöt16_t
 
numSèges
,

4044 
Êﬂt32_t
 * 
pC€ffs
,

4045 
Êﬂt32_t
 * 
pSèã
);

4056 
¨m_fú_œâi˚_f32
(

4057 c⁄° 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

4058 
Êﬂt32_t
 * 
pSrc
,

4059 
Êﬂt32_t
 * 
pD°
,

4060 
uöt32_t
 
blockSize
);

4067 
uöt16_t
 
numSèges
;

4068 
q15_t
 *
pSèã
;

4069 
q15_t
 *
pkC€ffs
;

4070 
q15_t
 *
pvC€ffs
;

4071 } 
	t¨m_iú_œâi˚_ö°™˚_q15
;

4078 
uöt16_t
 
numSèges
;

4079 
q31_t
 *
pSèã
;

4080 
q31_t
 *
pkC€ffs
;

4081 
q31_t
 *
pvC€ffs
;

4082 } 
	t¨m_iú_œâi˚_ö°™˚_q31
;

4089 
uöt16_t
 
numSèges
;

4090 
Êﬂt32_t
 *
pSèã
;

4091 
Êﬂt32_t
 *
pkC€ffs
;

4092 
Êﬂt32_t
 *
pvC€ffs
;

4093 } 
	t¨m_iú_œâi˚_ö°™˚_f32
;

4104 
¨m_iú_œâi˚_f32
(

4105 c⁄° 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

4106 
Êﬂt32_t
 * 
pSrc
,

4107 
Êﬂt32_t
 * 
pD°
,

4108 
uöt32_t
 
blockSize
);

4121 
¨m_iú_œâi˚_öô_f32
(

4122 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

4123 
uöt16_t
 
numSèges
,

4124 
Êﬂt32_t
 * 
pkC€ffs
,

4125 
Êﬂt32_t
 * 
pvC€ffs
,

4126 
Êﬂt32_t
 * 
pSèã
,

4127 
uöt32_t
 
blockSize
);

4139 
¨m_iú_œâi˚_q31
(

4140 c⁄° 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

4141 
q31_t
 * 
pSrc
,

4142 
q31_t
 * 
pD°
,

4143 
uöt32_t
 
blockSize
);

4157 
¨m_iú_œâi˚_öô_q31
(

4158 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

4159 
uöt16_t
 
numSèges
,

4160 
q31_t
 * 
pkC€ffs
,

4161 
q31_t
 * 
pvC€ffs
,

4162 
q31_t
 * 
pSèã
,

4163 
uöt32_t
 
blockSize
);

4175 
¨m_iú_œâi˚_q15
(

4176 c⁄° 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

4177 
q15_t
 * 
pSrc
,

4178 
q15_t
 * 
pD°
,

4179 
uöt32_t
 
blockSize
);

4193 
¨m_iú_œâi˚_öô_q15
(

4194 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

4195 
uöt16_t
 
numSèges
,

4196 
q15_t
 * 
pkC€ffs
,

4197 
q15_t
 * 
pvC€ffs
,

4198 
q15_t
 * 
pSèã
,

4199 
uöt32_t
 
blockSize
);

4207 
uöt16_t
 
numT≠s
;

4208 
Êﬂt32_t
 *
pSèã
;

4209 
Êﬂt32_t
 *
pC€ffs
;

4210 
Êﬂt32_t
 
mu
;

4211 } 
	t¨m_lms_ö°™˚_f32
;

4224 
¨m_lms_f32
(

4225 c⁄° 
¨m_lms_ö°™˚_f32
 * 
S
,

4226 
Êﬂt32_t
 * 
pSrc
,

4227 
Êﬂt32_t
 * 
pRef
,

4228 
Êﬂt32_t
 * 
pOut
,

4229 
Êﬂt32_t
 * 
pEº
,

4230 
uöt32_t
 
blockSize
);

4243 
¨m_lms_öô_f32
(

4244 
¨m_lms_ö°™˚_f32
 * 
S
,

4245 
uöt16_t
 
numT≠s
,

4246 
Êﬂt32_t
 * 
pC€ffs
,

4247 
Êﬂt32_t
 * 
pSèã
,

4248 
Êﬂt32_t
 
mu
,

4249 
uöt32_t
 
blockSize
);

4257 
uöt16_t
 
numT≠s
;

4258 
q15_t
 *
pSèã
;

4259 
q15_t
 *
pC€ffs
;

4260 
q15_t
 
mu
;

4261 
uöt32_t
 
po°Shi·
;

4262 } 
	t¨m_lms_ö°™˚_q15
;

4277 
¨m_lms_öô_q15
(

4278 
¨m_lms_ö°™˚_q15
 * 
S
,

4279 
uöt16_t
 
numT≠s
,

4280 
q15_t
 * 
pC€ffs
,

4281 
q15_t
 * 
pSèã
,

4282 
q15_t
 
mu
,

4283 
uöt32_t
 
blockSize
,

4284 
uöt32_t
 
po°Shi·
);

4297 
¨m_lms_q15
(

4298 c⁄° 
¨m_lms_ö°™˚_q15
 * 
S
,

4299 
q15_t
 * 
pSrc
,

4300 
q15_t
 * 
pRef
,

4301 
q15_t
 * 
pOut
,

4302 
q15_t
 * 
pEº
,

4303 
uöt32_t
 
blockSize
);

4312 
uöt16_t
 
numT≠s
;

4313 
q31_t
 *
pSèã
;

4314 
q31_t
 *
pC€ffs
;

4315 
q31_t
 
mu
;

4316 
uöt32_t
 
po°Shi·
;

4318 } 
	t¨m_lms_ö°™˚_q31
;

4331 
¨m_lms_q31
(

4332 c⁄° 
¨m_lms_ö°™˚_q31
 * 
S
,

4333 
q31_t
 * 
pSrc
,

4334 
q31_t
 * 
pRef
,

4335 
q31_t
 * 
pOut
,

4336 
q31_t
 * 
pEº
,

4337 
uöt32_t
 
blockSize
);

4351 
¨m_lms_öô_q31
(

4352 
¨m_lms_ö°™˚_q31
 * 
S
,

4353 
uöt16_t
 
numT≠s
,

4354 
q31_t
 * 
pC€ffs
,

4355 
q31_t
 * 
pSèã
,

4356 
q31_t
 
mu
,

4357 
uöt32_t
 
blockSize
,

4358 
uöt32_t
 
po°Shi·
);

4366 
uöt16_t
 
numT≠s
;

4367 
Êﬂt32_t
 *
pSèã
;

4368 
Êﬂt32_t
 *
pC€ffs
;

4369 
Êﬂt32_t
 
mu
;

4370 
Êﬂt32_t
 
íîgy
;

4371 
Êﬂt32_t
 
x0
;

4372 } 
	t¨m_lms_n‹m_ö°™˚_f32
;

4385 
¨m_lms_n‹m_f32
(

4386 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

4387 
Êﬂt32_t
 * 
pSrc
,

4388 
Êﬂt32_t
 * 
pRef
,

4389 
Êﬂt32_t
 * 
pOut
,

4390 
Êﬂt32_t
 * 
pEº
,

4391 
uöt32_t
 
blockSize
);

4404 
¨m_lms_n‹m_öô_f32
(

4405 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

4406 
uöt16_t
 
numT≠s
,

4407 
Êﬂt32_t
 * 
pC€ffs
,

4408 
Êﬂt32_t
 * 
pSèã
,

4409 
Êﬂt32_t
 
mu
,

4410 
uöt32_t
 
blockSize
);

4418 
uöt16_t
 
numT≠s
;

4419 
q31_t
 *
pSèã
;

4420 
q31_t
 *
pC€ffs
;

4421 
q31_t
 
mu
;

4422 
uöt8_t
 
po°Shi·
;

4423 
q31_t
 *
ªcùTabÀ
;

4424 
q31_t
 
íîgy
;

4425 
q31_t
 
x0
;

4426 } 
	t¨m_lms_n‹m_ö°™˚_q31
;

4439 
¨m_lms_n‹m_q31
(

4440 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

4441 
q31_t
 * 
pSrc
,

4442 
q31_t
 * 
pRef
,

4443 
q31_t
 * 
pOut
,

4444 
q31_t
 * 
pEº
,

4445 
uöt32_t
 
blockSize
);

4459 
¨m_lms_n‹m_öô_q31
(

4460 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

4461 
uöt16_t
 
numT≠s
,

4462 
q31_t
 * 
pC€ffs
,

4463 
q31_t
 * 
pSèã
,

4464 
q31_t
 
mu
,

4465 
uöt32_t
 
blockSize
,

4466 
uöt8_t
 
po°Shi·
);

4474 
uöt16_t
 
numT≠s
;

4475 
q15_t
 *
pSèã
;

4476 
q15_t
 *
pC€ffs
;

4477 
q15_t
 
mu
;

4478 
uöt8_t
 
po°Shi·
;

4479 
q15_t
 *
ªcùTabÀ
;

4480 
q15_t
 
íîgy
;

4481 
q15_t
 
x0
;

4482 } 
	t¨m_lms_n‹m_ö°™˚_q15
;

4495 
¨m_lms_n‹m_q15
(

4496 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

4497 
q15_t
 * 
pSrc
,

4498 
q15_t
 * 
pRef
,

4499 
q15_t
 * 
pOut
,

4500 
q15_t
 * 
pEº
,

4501 
uöt32_t
 
blockSize
);

4516 
¨m_lms_n‹m_öô_q15
(

4517 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

4518 
uöt16_t
 
numT≠s
,

4519 
q15_t
 * 
pC€ffs
,

4520 
q15_t
 * 
pSèã
,

4521 
q15_t
 
mu
,

4522 
uöt32_t
 
blockSize
,

4523 
uöt8_t
 
po°Shi·
);

4535 
¨m_c‹ªœã_f32
(

4536 
Êﬂt32_t
 * 
pSrcA
,

4537 
uöt32_t
 
§cALí
,

4538 
Êﬂt32_t
 * 
pSrcB
,

4539 
uöt32_t
 
§cBLí
,

4540 
Êﬂt32_t
 * 
pD°
);

4553 
¨m_c‹ªœã_›t_q15
(

4554 
q15_t
 * 
pSrcA
,

4555 
uöt32_t
 
§cALí
,

4556 
q15_t
 * 
pSrcB
,

4557 
uöt32_t
 
§cBLí
,

4558 
q15_t
 * 
pD°
,

4559 
q15_t
 * 
pS¸©ch
);

4572 
¨m_c‹ªœã_q15
(

4573 
q15_t
 * 
pSrcA
,

4574 
uöt32_t
 
§cALí
,

4575 
q15_t
 * 
pSrcB
,

4576 
uöt32_t
 
§cBLí
,

4577 
q15_t
 * 
pD°
);

4589 
¨m_c‹ªœã_Á°_q15
(

4590 
q15_t
 * 
pSrcA
,

4591 
uöt32_t
 
§cALí
,

4592 
q15_t
 * 
pSrcB
,

4593 
uöt32_t
 
§cBLí
,

4594 
q15_t
 * 
pD°
);

4609 
¨m_c‹ªœã_Á°_›t_q15
(

4610 
q15_t
 * 
pSrcA
,

4611 
uöt32_t
 
§cALí
,

4612 
q15_t
 * 
pSrcB
,

4613 
uöt32_t
 
§cBLí
,

4614 
q15_t
 * 
pD°
,

4615 
q15_t
 * 
pS¸©ch
);

4627 
¨m_c‹ªœã_q31
(

4628 
q31_t
 * 
pSrcA
,

4629 
uöt32_t
 
§cALí
,

4630 
q31_t
 * 
pSrcB
,

4631 
uöt32_t
 
§cBLí
,

4632 
q31_t
 * 
pD°
);

4644 
¨m_c‹ªœã_Á°_q31
(

4645 
q31_t
 * 
pSrcA
,

4646 
uöt32_t
 
§cALí
,

4647 
q31_t
 * 
pSrcB
,

4648 
uöt32_t
 
§cBLí
,

4649 
q31_t
 * 
pD°
);

4665 
¨m_c‹ªœã_›t_q7
(

4666 
q7_t
 * 
pSrcA
,

4667 
uöt32_t
 
§cALí
,

4668 
q7_t
 * 
pSrcB
,

4669 
uöt32_t
 
§cBLí
,

4670 
q7_t
 * 
pD°
,

4671 
q15_t
 * 
pS¸©ch1
,

4672 
q15_t
 * 
pS¸©ch2
);

4685 
¨m_c‹ªœã_q7
(

4686 
q7_t
 * 
pSrcA
,

4687 
uöt32_t
 
§cALí
,

4688 
q7_t
 * 
pSrcB
,

4689 
uöt32_t
 
§cBLí
,

4690 
q7_t
 * 
pD°
);

4698 
uöt16_t
 
numT≠s
;

4699 
uöt16_t
 
°©eIndex
;

4700 
Êﬂt32_t
 *
pSèã
;

4701 
Êﬂt32_t
 *
pC€ffs
;

4702 
uöt16_t
 
maxDñay
;

4703 
öt32_t
 *
pT≠Dñay
;

4704 } 
	t¨m_fú_•¨£_ö°™˚_f32
;

4712 
uöt16_t
 
numT≠s
;

4713 
uöt16_t
 
°©eIndex
;

4714 
q31_t
 *
pSèã
;

4715 
q31_t
 *
pC€ffs
;

4716 
uöt16_t
 
maxDñay
;

4717 
öt32_t
 *
pT≠Dñay
;

4718 } 
	t¨m_fú_•¨£_ö°™˚_q31
;

4726 
uöt16_t
 
numT≠s
;

4727 
uöt16_t
 
°©eIndex
;

4728 
q15_t
 *
pSèã
;

4729 
q15_t
 *
pC€ffs
;

4730 
uöt16_t
 
maxDñay
;

4731 
öt32_t
 *
pT≠Dñay
;

4732 } 
	t¨m_fú_•¨£_ö°™˚_q15
;

4740 
uöt16_t
 
numT≠s
;

4741 
uöt16_t
 
°©eIndex
;

4742 
q7_t
 *
pSèã
;

4743 
q7_t
 *
pC€ffs
;

4744 
uöt16_t
 
maxDñay
;

4745 
öt32_t
 *
pT≠Dñay
;

4746 } 
	t¨m_fú_•¨£_ö°™˚_q7
;

4758 
¨m_fú_•¨£_f32
(

4759 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

4760 
Êﬂt32_t
 * 
pSrc
,

4761 
Êﬂt32_t
 * 
pD°
,

4762 
Êﬂt32_t
 * 
pS¸©chIn
,

4763 
uöt32_t
 
blockSize
);

4777 
¨m_fú_•¨£_öô_f32
(

4778 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

4779 
uöt16_t
 
numT≠s
,

4780 
Êﬂt32_t
 * 
pC€ffs
,

4781 
Êﬂt32_t
 * 
pSèã
,

4782 
öt32_t
 * 
pT≠Dñay
,

4783 
uöt16_t
 
maxDñay
,

4784 
uöt32_t
 
blockSize
);

4796 
¨m_fú_•¨£_q31
(

4797 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

4798 
q31_t
 * 
pSrc
,

4799 
q31_t
 * 
pD°
,

4800 
q31_t
 * 
pS¸©chIn
,

4801 
uöt32_t
 
blockSize
);

4815 
¨m_fú_•¨£_öô_q31
(

4816 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

4817 
uöt16_t
 
numT≠s
,

4818 
q31_t
 * 
pC€ffs
,

4819 
q31_t
 * 
pSèã
,

4820 
öt32_t
 * 
pT≠Dñay
,

4821 
uöt16_t
 
maxDñay
,

4822 
uöt32_t
 
blockSize
);

4835 
¨m_fú_•¨£_q15
(

4836 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

4837 
q15_t
 * 
pSrc
,

4838 
q15_t
 * 
pD°
,

4839 
q15_t
 * 
pS¸©chIn
,

4840 
q31_t
 * 
pS¸©chOut
,

4841 
uöt32_t
 
blockSize
);

4856 
¨m_fú_•¨£_öô_q15
(

4857 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

4858 
uöt16_t
 
numT≠s
,

4859 
q15_t
 * 
pC€ffs
,

4860 
q15_t
 * 
pSèã
,

4861 
öt32_t
 * 
pT≠Dñay
,

4862 
uöt16_t
 
maxDñay
,

4863 
uöt32_t
 
blockSize
);

4876 
¨m_fú_•¨£_q7
(

4877 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

4878 
q7_t
 * 
pSrc
,

4879 
q7_t
 * 
pD°
,

4880 
q7_t
 * 
pS¸©chIn
,

4881 
q31_t
 * 
pS¸©chOut
,

4882 
uöt32_t
 
blockSize
);

4896 
¨m_fú_•¨£_öô_q7
(

4897 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

4898 
uöt16_t
 
numT≠s
,

4899 
q7_t
 * 
pC€ffs
,

4900 
q7_t
 * 
pSèã
,

4901 
öt32_t
 * 
pT≠Dñay
,

4902 
uöt16_t
 
maxDñay
,

4903 
uöt32_t
 
blockSize
);

4914 
¨m_sö_cos_f32
(

4915 
Êﬂt32_t
 
thëa
,

4916 
Êﬂt32_t
 * 
pSöVÆ
,

4917 
Êﬂt32_t
 * 
pCcosVÆ
);

4927 
¨m_sö_cos_q31
(

4928 
q31_t
 
thëa
,

4929 
q31_t
 * 
pSöVÆ
,

4930 
q31_t
 * 
pCosVÆ
);

4941 
¨m_cm∂x_c⁄j_f32
(

4942 
Êﬂt32_t
 * 
pSrc
,

4943 
Êﬂt32_t
 * 
pD°
,

4944 
uöt32_t
 
numSam∂es
);

4954 
¨m_cm∂x_c⁄j_q31
(

4955 
q31_t
 * 
pSrc
,

4956 
q31_t
 * 
pD°
,

4957 
uöt32_t
 
numSam∂es
);

4967 
¨m_cm∂x_c⁄j_q15
(

4968 
q15_t
 * 
pSrc
,

4969 
q15_t
 * 
pD°
,

4970 
uöt32_t
 
numSam∂es
);

4982 
¨m_cm∂x_mag_squ¨ed_f32
(

4983 
Êﬂt32_t
 * 
pSrc
,

4984 
Êﬂt32_t
 * 
pD°
,

4985 
uöt32_t
 
numSam∂es
);

4995 
¨m_cm∂x_mag_squ¨ed_q31
(

4996 
q31_t
 * 
pSrc
,

4997 
q31_t
 * 
pD°
,

4998 
uöt32_t
 
numSam∂es
);

5008 
¨m_cm∂x_mag_squ¨ed_q15
(

5009 
q15_t
 * 
pSrc
,

5010 
q15_t
 * 
pD°
,

5011 
uöt32_t
 
numSam∂es
);

5088 
__INLINE
 
Êﬂt32_t
 
¨m_pid_f32
(

5089 
¨m_pid_ö°™˚_f32
 * 
S
,

5090 
Êﬂt32_t
 
ö
)

5092 
Êﬂt32_t
 
out
;

5095 
out
 = (
S
->
A0
 * 
ö
) +

5096 (
S
->
A1
 * S->
°©e
[0]Ë+ (S->
A2
 * S->state[1]) + (S->state[2]);

5099 
S
->
°©e
[1] = S->state[0];

5100 
S
->
°©e
[0] = 
ö
;

5101 
S
->
°©e
[2] = 
out
;

5104  (
out
);

5123 
__INLINE
 
q31_t
 
¨m_pid_q31
(

5124 
¨m_pid_ö°™˚_q31
 * 
S
,

5125 
q31_t
 
ö
)

5127 
q63_t
 
acc
;

5128 
q31_t
 
out
;

5131 
acc
 = (
q63_t
Ë
S
->
A0
 * 
ö
;

5134 
acc
 +(
q63_t
Ë
S
->
A1
 * S->
°©e
[0];

5137 
acc
 +(
q63_t
Ë
S
->
A2
 * S->
°©e
[1];

5140 
out
 = (
q31_t
Ë(
acc
 >> 31u);

5143 
out
 +
S
->
°©e
[2];

5146 
S
->
°©e
[1] = S->state[0];

5147 
S
->
°©e
[0] = 
ö
;

5148 
S
->
°©e
[2] = 
out
;

5151  (
out
);

5171 
__INLINE
 
q15_t
 
¨m_pid_q15
(

5172 
¨m_pid_ö°™˚_q15
 * 
S
,

5173 
q15_t
 
ö
)

5175 
q63_t
 
acc
;

5176 
q15_t
 
out
;

5178 #i‚de‡
ARM_MATH_CM0_FAMILY


5179 
__SIMD32_TYPE
 *
v°©e
;

5184 
acc
 = (
q31_t
Ë
__SMUAD
(
S
->
A0
, 
ö
);

5187 
v°©e
 = 
__SIMD32_CONST
(
S
->
°©e
);

5188 
acc
 = 
__SMLALD
(
S
->
A1
, (
q31_t
Ë*
v°©e
,ácc);

5192 
acc
 = ((
q31_t
Ë
S
->
A0
Ë* 
ö
;

5195 
acc
 +(
q31_t
Ë
S
->
A1
 * S->
°©e
[0];

5196 
acc
 +(
q31_t
Ë
S
->
A2
 * S->
°©e
[1];

5201 
acc
 +(
q31_t
Ë
S
->
°©e
[2] << 15;

5204 
out
 = (
q15_t
Ë(
__SSAT
((
acc
 >> 15), 16));

5207 
S
->
°©e
[1] = S->state[0];

5208 
S
->
°©e
[0] = 
ö
;

5209 
S
->
°©e
[2] = 
out
;

5212  (
out
);

5229 
¨m_°©us
 
¨m_m©_övî£_f32
(

5230 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
§c
,

5231 
¨m_m©rix_ö°™˚_f32
 * 
d°
);

5242 
¨m_°©us
 
¨m_m©_övî£_f64
(

5243 c⁄° 
¨m_m©rix_ö°™˚_f64
 * 
§c
,

5244 
¨m_m©rix_ö°™˚_f64
 * 
d°
);

5290 
__INLINE
 
¨m_˛¨ke_f32
(

5291 
Êﬂt32_t
 
Ia
,

5292 
Êﬂt32_t
 
Ib
,

5293 
Êﬂt32_t
 * 
pIÆpha
,

5294 
Êﬂt32_t
 * 
pIbëa
)

5297 *
pIÆpha
 = 
Ia
;

5300 *
pIbëa
 =

5301 ((
Êﬂt32_t
Ë0.57735026919 * 
Ia
 + (Êﬂt32_tË1.15470053838 * 
Ib
);

5320 
__INLINE
 
¨m_˛¨ke_q31
(

5321 
q31_t
 
Ia
,

5322 
q31_t
 
Ib
,

5323 
q31_t
 * 
pIÆpha
,

5324 
q31_t
 * 
pIbëa
)

5326 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5329 *
pIÆpha
 = 
Ia
;

5332 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë
Ia
 * 0x24F34E8B) >> 30);

5335 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë
Ib
 * 0x49E69D16) >> 30);

5338 *
pIbëa
 = 
__QADD
(
¥odu˘1
, 
¥odu˘2
);

5352 
¨m_q7_to_q31
(

5353 
q7_t
 * 
pSrc
,

5354 
q31_t
 * 
pD°
,

5355 
uöt32_t
 
blockSize
);

5395 
__INLINE
 
¨m_öv_˛¨ke_f32
(

5396 
Êﬂt32_t
 
IÆpha
,

5397 
Êﬂt32_t
 
Ibëa
,

5398 
Êﬂt32_t
 * 
pIa
,

5399 
Êﬂt32_t
 * 
pIb
)

5402 *
pIa
 = 
IÆpha
;

5405 *
pIb
 = -0.5 * 
IÆpha
 + (
Êﬂt32_t
Ë0.8660254039 *
Ibëa
;

5424 
__INLINE
 
¨m_öv_˛¨ke_q31
(

5425 
q31_t
 
IÆpha
,

5426 
q31_t
 
Ibëa
,

5427 
q31_t
 * 
pIa
,

5428 
q31_t
 * 
pIb
)

5430 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5433 *
pIa
 = 
IÆpha
;

5436 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
) * (0x40000000)) >> 31);

5439 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
) * (0x6ED9EBA1)) >> 31);

5442 *
pIb
 = 
__QSUB
(
¥odu˘2
, 
¥odu˘1
);

5457 
¨m_q7_to_q15
(

5458 
q7_t
 * 
pSrc
,

5459 
q15_t
 * 
pD°
,

5460 
uöt32_t
 
blockSize
);

5511 
__INLINE
 
¨m_∑rk_f32
(

5512 
Êﬂt32_t
 
IÆpha
,

5513 
Êﬂt32_t
 
Ibëa
,

5514 
Êﬂt32_t
 * 
pId
,

5515 
Êﬂt32_t
 * 
pIq
,

5516 
Êﬂt32_t
 
söVÆ
,

5517 
Êﬂt32_t
 
cosVÆ
)

5520 *
pId
 = 
IÆpha
 * 
cosVÆ
 + 
Ibëa
 * 
söVÆ
;

5523 *
pIq
 = -
IÆpha
 * 
söVÆ
 + 
Ibëa
 * 
cosVÆ
;

5545 
__INLINE
 
¨m_∑rk_q31
(

5546 
q31_t
 
IÆpha
,

5547 
q31_t
 
Ibëa
,

5548 
q31_t
 * 
pId
,

5549 
q31_t
 * 
pIq
,

5550 
q31_t
 
söVÆ
,

5551 
q31_t
 
cosVÆ
)

5553 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5554 
q31_t
 
¥odu˘3
, 
¥odu˘4
;

5557 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
Ë* (
cosVÆ
)) >> 31);

5560 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
Ë* (
söVÆ
)) >> 31);

5564 
¥odu˘3
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
Ë* (
söVÆ
)) >> 31);

5567 
¥odu˘4
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
Ë* (
cosVÆ
)) >> 31);

5570 *
pId
 = 
__QADD
(
¥odu˘1
, 
¥odu˘2
);

5573 *
pIq
 = 
__QSUB
(
¥odu˘4
, 
¥odu˘3
);

5587 
¨m_q7_to_Êﬂt
(

5588 
q7_t
 * 
pSrc
,

5589 
Êﬂt32_t
 * 
pD°
,

5590 
uöt32_t
 
blockSize
);

5630 
__INLINE
 
¨m_öv_∑rk_f32
(

5631 
Êﬂt32_t
 
Id
,

5632 
Êﬂt32_t
 
Iq
,

5633 
Êﬂt32_t
 * 
pIÆpha
,

5634 
Êﬂt32_t
 * 
pIbëa
,

5635 
Êﬂt32_t
 
söVÆ
,

5636 
Êﬂt32_t
 
cosVÆ
)

5639 *
pIÆpha
 = 
Id
 * 
cosVÆ
 - 
Iq
 * 
söVÆ
;

5642 *
pIbëa
 = 
Id
 * 
söVÆ
 + 
Iq
 * 
cosVÆ
;

5665 
__INLINE
 
¨m_öv_∑rk_q31
(

5666 
q31_t
 
Id
,

5667 
q31_t
 
Iq
,

5668 
q31_t
 * 
pIÆpha
,

5669 
q31_t
 * 
pIbëa
,

5670 
q31_t
 
söVÆ
,

5671 
q31_t
 
cosVÆ
)

5673 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5674 
q31_t
 
¥odu˘3
, 
¥odu˘4
;

5677 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
Id
Ë* (
cosVÆ
)) >> 31);

5680 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Iq
Ë* (
söVÆ
)) >> 31);

5684 
¥odu˘3
 = (
q31_t
Ë(((
q63_t
Ë(
Id
Ë* (
söVÆ
)) >> 31);

5687 
¥odu˘4
 = (
q31_t
Ë(((
q63_t
Ë(
Iq
Ë* (
cosVÆ
)) >> 31);

5690 *
pIÆpha
 = 
__QSUB
(
¥odu˘1
, 
¥odu˘2
);

5693 *
pIbëa
 = 
__QADD
(
¥odu˘4
, 
¥odu˘3
);

5709 
¨m_q31_to_Êﬂt
(

5710 
q31_t
 * 
pSrc
,

5711 
Êﬂt32_t
 * 
pD°
,

5712 
uöt32_t
 
blockSize
);

5763 
__INLINE
 
Êﬂt32_t
 
¨m_löór_öãΩ_f32
(

5764 
¨m_löór_öãΩ_ö°™˚_f32
 * 
S
,

5765 
Êﬂt32_t
 
x
)

5768 
Êﬂt32_t
 
y
;

5769 
Êﬂt32_t
 
x0
, 
x1
;

5770 
Êﬂt32_t
 
y0
, 
y1
;

5771 
Êﬂt32_t
 
xS∑cög
 = 
S
->xSpacing;

5772 
öt32_t
 
i
;

5773 
Êﬂt32_t
 *
pYD©a
 = 
S
->pYData;

5776 
i
 = (
öt32_t
Ë((
x
 - 
S
->
x1
Ë/ 
xS∑cög
);

5778 if(
i
 < 0)

5781 
y
 = 
pYD©a
[0];

5783 if((
uöt32_t
)
i
 >
S
->
nVÆues
)

5786 
y
 = 
pYD©a
[
S
->
nVÆues
 - 1];

5791 
x0
 = 
S
->
x1
 + 
i
 * 
xS∑cög
;

5792 
x1
 = 
S
->x1 + (
i
 + 1Ë* 
xS∑cög
;

5795 
y0
 = 
pYD©a
[
i
];

5796 
y1
 = 
pYD©a
[
i
 + 1];

5799 
y
 = 
y0
 + (
x
 - 
x0
Ë* ((
y1
 - y0Ë/ (
x1
 - x0));

5804  (
y
);

5822 
__INLINE
 
q31_t
 
¨m_löór_öãΩ_q31
(

5823 
q31_t
 * 
pYD©a
,

5824 
q31_t
 
x
,

5825 
uöt32_t
 
nVÆues
)

5827 
q31_t
 
y
;

5828 
q31_t
 
y0
, 
y1
;

5829 
q31_t
 
‰a˘
;

5830 
öt32_t
 
ödex
;

5835 
ödex
 = ((
x
 & 0xFFF00000) >> 20);

5837 if(
ödex
 >(
öt32_t
)(
nVÆues
 - 1))

5839  (
pYD©a
[
nVÆues
 - 1]);

5841 if(
ödex
 < 0)

5843  (
pYD©a
[0]);

5850 
‰a˘
 = (
x
 & 0x000FFFFF) << 11;

5853 
y0
 = 
pYD©a
[
ödex
];

5854 
y1
 = 
pYD©a
[
ödex
 + 1u];

5857 
y
 = ((
q31_t
Ë((
q63_t
Ë
y0
 * (0x7FFFFFFF - 
‰a˘
) >> 32));

5860 
y
 +((
q31_t
Ë(((
q63_t
Ë
y1
 * 
‰a˘
) >> 32));

5863  (
y
 << 1u);

5884 
__INLINE
 
q15_t
 
¨m_löór_öãΩ_q15
(

5885 
q15_t
 * 
pYD©a
,

5886 
q31_t
 
x
,

5887 
uöt32_t
 
nVÆues
)

5889 
q63_t
 
y
;

5890 
q15_t
 
y0
, 
y1
;

5891 
q31_t
 
‰a˘
;

5892 
öt32_t
 
ödex
;

5897 
ödex
 = ((
x
 & 0xFFF00000) >> 20u);

5899 if(
ödex
 >(
öt32_t
)(
nVÆues
 - 1))

5901  (
pYD©a
[
nVÆues
 - 1]);

5903 if(
ödex
 < 0)

5905  (
pYD©a
[0]);

5911 
‰a˘
 = (
x
 & 0x000FFFFF);

5914 
y0
 = 
pYD©a
[
ödex
];

5915 
y1
 = 
pYD©a
[
ödex
 + 1u];

5918 
y
 = ((
q63_t
Ë
y0
 * (0xFFFFF - 
‰a˘
));

5921 
y
 +((
q63_t
Ë
y1
 * (
‰a˘
));

5924  (
y
 >> 20);

5944 
__INLINE
 
q7_t
 
¨m_löór_öãΩ_q7
(

5945 
q7_t
 * 
pYD©a
,

5946 
q31_t
 
x
,

5947 
uöt32_t
 
nVÆues
)

5949 
q31_t
 
y
;

5950 
q7_t
 
y0
, 
y1
;

5951 
q31_t
 
‰a˘
;

5952 
uöt32_t
 
ödex
;

5957 i‡(
x
 < 0)

5959  (
pYD©a
[0]);

5961 
ödex
 = (
x
 >> 20) & 0xfff;

5964 if(
ödex
 >(
nVÆues
 - 1))

5966  (
pYD©a
[
nVÆues
 - 1]);

5973 
‰a˘
 = (
x
 & 0x000FFFFF);

5976 
y0
 = 
pYD©a
[
ödex
];

5977 
y1
 = 
pYD©a
[
ödex
 + 1u];

5980 
y
 = ((
y0
 * (0xFFFFF - 
‰a˘
)));

5983 
y
 +(
y1
 * 
‰a˘
);

5986  (
y
 >> 20u);

6001 
Êﬂt32_t
 
¨m_sö_f32
(

6002 
Êﬂt32_t
 
x
);

6010 
q31_t
 
¨m_sö_q31
(

6011 
q31_t
 
x
);

6019 
q15_t
 
¨m_sö_q15
(

6020 
q15_t
 
x
);

6028 
Êﬂt32_t
 
¨m_cos_f32
(

6029 
Êﬂt32_t
 
x
);

6037 
q31_t
 
¨m_cos_q31
(

6038 
q31_t
 
x
);

6046 
q15_t
 
¨m_cos_q15
(

6047 
q15_t
 
x
);

6089 
__INLINE
 
¨m_°©us
 
¨m_sqπ_f32
(

6090 
Êﬂt32_t
 
ö
,

6091 
Êﬂt32_t
 * 
pOut
)

6093 if(
ö
 > 0)

6097 #i‡(
__FPU_USED
 =1Ë&& 
deföed
 ( 
__CC_ARM
 )

6098 *
pOut
 = 
__sqπf
(
ö
);

6100 *
pOut
 = 
sqπf
(
ö
);

6103  (
ARM_MATH_SUCCESS
);

6107 *
pOut
 = 0.0f;

6108  (
ARM_MATH_ARGUMENT_ERROR
);

6121 
¨m_°©us
 
¨m_sqπ_q31
(

6122 
q31_t
 
ö
,

6123 
q31_t
 * 
pOut
);

6132 
¨m_°©us
 
¨m_sqπ_q15
(

6133 
q15_t
 
ö
,

6134 
q15_t
 * 
pOut
);

6149 
__INLINE
 
¨m_cúcuœrWrôe_f32
(

6150 
öt32_t
 * 
cúcBuf„r
,

6151 
öt32_t
 
L
,

6152 
uöt16_t
 * 
wrôeOff£t
,

6153 
öt32_t
 
buf„rInc
,

6154 c⁄° 
öt32_t
 * 
§c
,

6155 
öt32_t
 
§cInc
,

6156 
uöt32_t
 
blockSize
)

6158 
uöt32_t
 
i
 = 0u;

6159 
öt32_t
 
wOff£t
;

6163 
wOff£t
 = *
wrôeOff£t
;

6166 
i
 = 
blockSize
;

6168 
i
 > 0u)

6171 
cúcBuf„r
[
wOff£t
] = *
§c
;

6174 
§c
 +
§cInc
;

6177 
wOff£t
 +
buf„rInc
;

6178 if(
wOff£t
 >
L
)

6179 
wOff£t
 -
L
;

6182 
i
--;

6186 *
wrôeOff£t
 = 
wOff£t
;

6194 
__INLINE
 
¨m_cúcuœrRód_f32
(

6195 
öt32_t
 * 
cúcBuf„r
,

6196 
öt32_t
 
L
,

6197 
öt32_t
 * 
ªadOff£t
,

6198 
öt32_t
 
buf„rInc
,

6199 
öt32_t
 * 
d°
,

6200 
öt32_t
 * 
d°_ba£
,

6201 
öt32_t
 
d°_Àngth
,

6202 
öt32_t
 
d°Inc
,

6203 
uöt32_t
 
blockSize
)

6205 
uöt32_t
 
i
 = 0u;

6206 
öt32_t
 
rOff£t
, 
d°_íd
;

6210 
rOff£t
 = *
ªadOff£t
;

6211 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

6214 
i
 = 
blockSize
;

6216 
i
 > 0u)

6219 *
d°
 = 
cúcBuf„r
[
rOff£t
];

6222 
d°
 +
d°Inc
;

6224 if(
d°
 =(
öt32_t
 *Ë
d°_íd
)

6226 
d°
 = 
d°_ba£
;

6230 
rOff£t
 +
buf„rInc
;

6232 if(
rOff£t
 >
L
)

6234 
rOff£t
 -
L
;

6238 
i
--;

6242 *
ªadOff£t
 = 
rOff£t
;

6249 
__INLINE
 
¨m_cúcuœrWrôe_q15
(

6250 
q15_t
 * 
cúcBuf„r
,

6251 
öt32_t
 
L
,

6252 
uöt16_t
 * 
wrôeOff£t
,

6253 
öt32_t
 
buf„rInc
,

6254 c⁄° 
q15_t
 * 
§c
,

6255 
öt32_t
 
§cInc
,

6256 
uöt32_t
 
blockSize
)

6258 
uöt32_t
 
i
 = 0u;

6259 
öt32_t
 
wOff£t
;

6263 
wOff£t
 = *
wrôeOff£t
;

6266 
i
 = 
blockSize
;

6268 
i
 > 0u)

6271 
cúcBuf„r
[
wOff£t
] = *
§c
;

6274 
§c
 +
§cInc
;

6277 
wOff£t
 +
buf„rInc
;

6278 if(
wOff£t
 >
L
)

6279 
wOff£t
 -
L
;

6282 
i
--;

6286 *
wrôeOff£t
 = 
wOff£t
;

6294 
__INLINE
 
¨m_cúcuœrRód_q15
(

6295 
q15_t
 * 
cúcBuf„r
,

6296 
öt32_t
 
L
,

6297 
öt32_t
 * 
ªadOff£t
,

6298 
öt32_t
 
buf„rInc
,

6299 
q15_t
 * 
d°
,

6300 
q15_t
 * 
d°_ba£
,

6301 
öt32_t
 
d°_Àngth
,

6302 
öt32_t
 
d°Inc
,

6303 
uöt32_t
 
blockSize
)

6305 
uöt32_t
 
i
 = 0;

6306 
öt32_t
 
rOff£t
, 
d°_íd
;

6310 
rOff£t
 = *
ªadOff£t
;

6312 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

6315 
i
 = 
blockSize
;

6317 
i
 > 0u)

6320 *
d°
 = 
cúcBuf„r
[
rOff£t
];

6323 
d°
 +
d°Inc
;

6325 if(
d°
 =(
q15_t
 *Ë
d°_íd
)

6327 
d°
 = 
d°_ba£
;

6331 
rOff£t
 +
buf„rInc
;

6333 if(
rOff£t
 >
L
)

6335 
rOff£t
 -
L
;

6339 
i
--;

6343 *
ªadOff£t
 = 
rOff£t
;

6351 
__INLINE
 
¨m_cúcuœrWrôe_q7
(

6352 
q7_t
 * 
cúcBuf„r
,

6353 
öt32_t
 
L
,

6354 
uöt16_t
 * 
wrôeOff£t
,

6355 
öt32_t
 
buf„rInc
,

6356 c⁄° 
q7_t
 * 
§c
,

6357 
öt32_t
 
§cInc
,

6358 
uöt32_t
 
blockSize
)

6360 
uöt32_t
 
i
 = 0u;

6361 
öt32_t
 
wOff£t
;

6365 
wOff£t
 = *
wrôeOff£t
;

6368 
i
 = 
blockSize
;

6370 
i
 > 0u)

6373 
cúcBuf„r
[
wOff£t
] = *
§c
;

6376 
§c
 +
§cInc
;

6379 
wOff£t
 +
buf„rInc
;

6380 if(
wOff£t
 >
L
)

6381 
wOff£t
 -
L
;

6384 
i
--;

6388 *
wrôeOff£t
 = 
wOff£t
;

6396 
__INLINE
 
¨m_cúcuœrRód_q7
(

6397 
q7_t
 * 
cúcBuf„r
,

6398 
öt32_t
 
L
,

6399 
öt32_t
 * 
ªadOff£t
,

6400 
öt32_t
 
buf„rInc
,

6401 
q7_t
 * 
d°
,

6402 
q7_t
 * 
d°_ba£
,

6403 
öt32_t
 
d°_Àngth
,

6404 
öt32_t
 
d°Inc
,

6405 
uöt32_t
 
blockSize
)

6407 
uöt32_t
 
i
 = 0;

6408 
öt32_t
 
rOff£t
, 
d°_íd
;

6412 
rOff£t
 = *
ªadOff£t
;

6414 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

6417 
i
 = 
blockSize
;

6419 
i
 > 0u)

6422 *
d°
 = 
cúcBuf„r
[
rOff£t
];

6425 
d°
 +
d°Inc
;

6427 if(
d°
 =(
q7_t
 *Ë
d°_íd
)

6429 
d°
 = 
d°_ba£
;

6433 
rOff£t
 +
buf„rInc
;

6435 if(
rOff£t
 >
L
)

6437 
rOff£t
 -
L
;

6441 
i
--;

6445 *
ªadOff£t
 = 
rOff£t
;

6457 
¨m_powî_q31
(

6458 
q31_t
 * 
pSrc
,

6459 
uöt32_t
 
blockSize
,

6460 
q63_t
 * 
pResu…
);

6470 
¨m_powî_f32
(

6471 
Êﬂt32_t
 * 
pSrc
,

6472 
uöt32_t
 
blockSize
,

6473 
Êﬂt32_t
 * 
pResu…
);

6483 
¨m_powî_q15
(

6484 
q15_t
 * 
pSrc
,

6485 
uöt32_t
 
blockSize
,

6486 
q63_t
 * 
pResu…
);

6496 
¨m_powî_q7
(

6497 
q7_t
 * 
pSrc
,

6498 
uöt32_t
 
blockSize
,

6499 
q31_t
 * 
pResu…
);

6509 
¨m_món_q7
(

6510 
q7_t
 * 
pSrc
,

6511 
uöt32_t
 
blockSize
,

6512 
q7_t
 * 
pResu…
);

6521 
¨m_món_q15
(

6522 
q15_t
 * 
pSrc
,

6523 
uöt32_t
 
blockSize
,

6524 
q15_t
 * 
pResu…
);

6533 
¨m_món_q31
(

6534 
q31_t
 * 
pSrc
,

6535 
uöt32_t
 
blockSize
,

6536 
q31_t
 * 
pResu…
);

6545 
¨m_món_f32
(

6546 
Êﬂt32_t
 * 
pSrc
,

6547 
uöt32_t
 
blockSize
,

6548 
Êﬂt32_t
 * 
pResu…
);

6558 
¨m_v¨_f32
(

6559 
Êﬂt32_t
 * 
pSrc
,

6560 
uöt32_t
 
blockSize
,

6561 
Êﬂt32_t
 * 
pResu…
);

6571 
¨m_v¨_q31
(

6572 
q31_t
 * 
pSrc
,

6573 
uöt32_t
 
blockSize
,

6574 
q31_t
 * 
pResu…
);

6584 
¨m_v¨_q15
(

6585 
q15_t
 * 
pSrc
,

6586 
uöt32_t
 
blockSize
,

6587 
q15_t
 * 
pResu…
);

6597 
¨m_rms_f32
(

6598 
Êﬂt32_t
 * 
pSrc
,

6599 
uöt32_t
 
blockSize
,

6600 
Êﬂt32_t
 * 
pResu…
);

6610 
¨m_rms_q31
(

6611 
q31_t
 * 
pSrc
,

6612 
uöt32_t
 
blockSize
,

6613 
q31_t
 * 
pResu…
);

6623 
¨m_rms_q15
(

6624 
q15_t
 * 
pSrc
,

6625 
uöt32_t
 
blockSize
,

6626 
q15_t
 * 
pResu…
);

6636 
¨m_°d_f32
(

6637 
Êﬂt32_t
 * 
pSrc
,

6638 
uöt32_t
 
blockSize
,

6639 
Êﬂt32_t
 * 
pResu…
);

6649 
¨m_°d_q31
(

6650 
q31_t
 * 
pSrc
,

6651 
uöt32_t
 
blockSize
,

6652 
q31_t
 * 
pResu…
);

6662 
¨m_°d_q15
(

6663 
q15_t
 * 
pSrc
,

6664 
uöt32_t
 
blockSize
,

6665 
q15_t
 * 
pResu…
);

6675 
¨m_cm∂x_mag_f32
(

6676 
Êﬂt32_t
 * 
pSrc
,

6677 
Êﬂt32_t
 * 
pD°
,

6678 
uöt32_t
 
numSam∂es
);

6688 
¨m_cm∂x_mag_q31
(

6689 
q31_t
 * 
pSrc
,

6690 
q31_t
 * 
pD°
,

6691 
uöt32_t
 
numSam∂es
);

6701 
¨m_cm∂x_mag_q15
(

6702 
q15_t
 * 
pSrc
,

6703 
q15_t
 * 
pD°
,

6704 
uöt32_t
 
numSam∂es
);

6716 
¨m_cm∂x_dŸ_¥od_q15
(

6717 
q15_t
 * 
pSrcA
,

6718 
q15_t
 * 
pSrcB
,

6719 
uöt32_t
 
numSam∂es
,

6720 
q31_t
 * 
ªÆResu…
,

6721 
q31_t
 * 
imagResu…
);

6733 
¨m_cm∂x_dŸ_¥od_q31
(

6734 
q31_t
 * 
pSrcA
,

6735 
q31_t
 * 
pSrcB
,

6736 
uöt32_t
 
numSam∂es
,

6737 
q63_t
 * 
ªÆResu…
,

6738 
q63_t
 * 
imagResu…
);

6750 
¨m_cm∂x_dŸ_¥od_f32
(

6751 
Êﬂt32_t
 * 
pSrcA
,

6752 
Êﬂt32_t
 * 
pSrcB
,

6753 
uöt32_t
 
numSam∂es
,

6754 
Êﬂt32_t
 * 
ªÆResu…
,

6755 
Êﬂt32_t
 * 
imagResu…
);

6766 
¨m_cm∂x_mu…_ªÆ_q15
(

6767 
q15_t
 * 
pSrcCm∂x
,

6768 
q15_t
 * 
pSrcRól
,

6769 
q15_t
 * 
pCm∂xD°
,

6770 
uöt32_t
 
numSam∂es
);

6781 
¨m_cm∂x_mu…_ªÆ_q31
(

6782 
q31_t
 * 
pSrcCm∂x
,

6783 
q31_t
 * 
pSrcRól
,

6784 
q31_t
 * 
pCm∂xD°
,

6785 
uöt32_t
 
numSam∂es
);

6796 
¨m_cm∂x_mu…_ªÆ_f32
(

6797 
Êﬂt32_t
 * 
pSrcCm∂x
,

6798 
Êﬂt32_t
 * 
pSrcRól
,

6799 
Êﬂt32_t
 * 
pCm∂xD°
,

6800 
uöt32_t
 
numSam∂es
);

6811 
¨m_mö_q7
(

6812 
q7_t
 * 
pSrc
,

6813 
uöt32_t
 
blockSize
,

6814 
q7_t
 * 
ªsu…
,

6815 
uöt32_t
 * 
ödex
);

6826 
¨m_mö_q15
(

6827 
q15_t
 * 
pSrc
,

6828 
uöt32_t
 
blockSize
,

6829 
q15_t
 * 
pResu…
,

6830 
uöt32_t
 * 
pIndex
);

6840 
¨m_mö_q31
(

6841 
q31_t
 * 
pSrc
,

6842 
uöt32_t
 
blockSize
,

6843 
q31_t
 * 
pResu…
,

6844 
uöt32_t
 * 
pIndex
);

6855 
¨m_mö_f32
(

6856 
Êﬂt32_t
 * 
pSrc
,

6857 
uöt32_t
 
blockSize
,

6858 
Êﬂt32_t
 * 
pResu…
,

6859 
uöt32_t
 * 
pIndex
);

6870 
¨m_max_q7
(

6871 
q7_t
 * 
pSrc
,

6872 
uöt32_t
 
blockSize
,

6873 
q7_t
 * 
pResu…
,

6874 
uöt32_t
 * 
pIndex
);

6885 
¨m_max_q15
(

6886 
q15_t
 * 
pSrc
,

6887 
uöt32_t
 
blockSize
,

6888 
q15_t
 * 
pResu…
,

6889 
uöt32_t
 * 
pIndex
);

6900 
¨m_max_q31
(

6901 
q31_t
 * 
pSrc
,

6902 
uöt32_t
 
blockSize
,

6903 
q31_t
 * 
pResu…
,

6904 
uöt32_t
 * 
pIndex
);

6915 
¨m_max_f32
(

6916 
Êﬂt32_t
 * 
pSrc
,

6917 
uöt32_t
 
blockSize
,

6918 
Êﬂt32_t
 * 
pResu…
,

6919 
uöt32_t
 * 
pIndex
);

6930 
¨m_cm∂x_mu…_cm∂x_q15
(

6931 
q15_t
 * 
pSrcA
,

6932 
q15_t
 * 
pSrcB
,

6933 
q15_t
 * 
pD°
,

6934 
uöt32_t
 
numSam∂es
);

6945 
¨m_cm∂x_mu…_cm∂x_q31
(

6946 
q31_t
 * 
pSrcA
,

6947 
q31_t
 * 
pSrcB
,

6948 
q31_t
 * 
pD°
,

6949 
uöt32_t
 
numSam∂es
);

6960 
¨m_cm∂x_mu…_cm∂x_f32
(

6961 
Êﬂt32_t
 * 
pSrcA
,

6962 
Êﬂt32_t
 * 
pSrcB
,

6963 
Êﬂt32_t
 * 
pD°
,

6964 
uöt32_t
 
numSam∂es
);

6973 
¨m_Êﬂt_to_q31
(

6974 
Êﬂt32_t
 * 
pSrc
,

6975 
q31_t
 * 
pD°
,

6976 
uöt32_t
 
blockSize
);

6985 
¨m_Êﬂt_to_q15
(

6986 
Êﬂt32_t
 * 
pSrc
,

6987 
q15_t
 * 
pD°
,

6988 
uöt32_t
 
blockSize
);

6997 
¨m_Êﬂt_to_q7
(

6998 
Êﬂt32_t
 * 
pSrc
,

6999 
q7_t
 * 
pD°
,

7000 
uöt32_t
 
blockSize
);

7010 
¨m_q31_to_q15
(

7011 
q31_t
 * 
pSrc
,

7012 
q15_t
 * 
pD°
,

7013 
uöt32_t
 
blockSize
);

7022 
¨m_q31_to_q7
(

7023 
q31_t
 * 
pSrc
,

7024 
q7_t
 * 
pD°
,

7025 
uöt32_t
 
blockSize
);

7034 
¨m_q15_to_Êﬂt
(

7035 
q15_t
 * 
pSrc
,

7036 
Êﬂt32_t
 * 
pD°
,

7037 
uöt32_t
 
blockSize
);

7047 
¨m_q15_to_q31
(

7048 
q15_t
 * 
pSrc
,

7049 
q31_t
 * 
pD°
,

7050 
uöt32_t
 
blockSize
);

7060 
¨m_q15_to_q7
(

7061 
q15_t
 * 
pSrc
,

7062 
q7_t
 * 
pD°
,

7063 
uöt32_t
 
blockSize
);

7137 
__INLINE
 
Êﬂt32_t
 
¨m_bûöór_öãΩ_f32
(

7138 c⁄° 
¨m_bûöór_öãΩ_ö°™˚_f32
 * 
S
,

7139 
Êﬂt32_t
 
X
,

7140 
Êﬂt32_t
 
Y
)

7142 
Êﬂt32_t
 
out
;

7143 
Êﬂt32_t
 
f00
, 
f01
, 
f10
, 
f11
;

7144 
Êﬂt32_t
 *
pD©a
 = 
S
->pData;

7145 
öt32_t
 
xIndex
, 
yIndex
, 
ödex
;

7146 
Êﬂt32_t
 
xdiff
, 
ydiff
;

7147 
Êﬂt32_t
 
b1
, 
b2
, 
b3
, 
b4
;

7149 
xIndex
 = (
öt32_t
Ë
X
;

7150 
yIndex
 = (
öt32_t
Ë
Y
;

7154 if(
xIndex
 < 0 || xIndex > (
S
->
numRows
 - 1Ë|| 
yIndex
 < 0

7155 || 
yIndex
 > (
S
->
numCﬁs
 - 1))

7161 
ödex
 = (
xIndex
 - 1Ë+ (
yIndex
 - 1Ë* 
S
->
numCﬁs
;

7165 
f00
 = 
pD©a
[
ödex
];

7166 
f01
 = 
pD©a
[
ödex
 + 1];

7169 
ödex
 = (
xIndex
 - 1Ë+ (
yIndex
Ë* 
S
->
numCﬁs
;

7173 
f10
 = 
pD©a
[
ödex
];

7174 
f11
 = 
pD©a
[
ödex
 + 1];

7177 
b1
 = 
f00
;

7178 
b2
 = 
f01
 - 
f00
;

7179 
b3
 = 
f10
 - 
f00
;

7180 
b4
 = 
f00
 - 
f01
 - 
f10
 + 
f11
;

7183 
xdiff
 = 
X
 - 
xIndex
;

7186 
ydiff
 = 
Y
 - 
yIndex
;

7189 
out
 = 
b1
 + 
b2
 * 
xdiff
 + 
b3
 * 
ydiff
 + 
b4
 * xdiff * ydiff;

7192  (
out
);

7205 
__INLINE
 
q31_t
 
¨m_bûöór_öãΩ_q31
(

7206 
¨m_bûöór_öãΩ_ö°™˚_q31
 * 
S
,

7207 
q31_t
 
X
,

7208 
q31_t
 
Y
)

7210 
q31_t
 
out
;

7211 
q31_t
 
acc
 = 0;

7212 
q31_t
 
x‰a˘
, 
y‰a˘
;

7213 
q31_t
 
x1
, 
x2
, 
y1
, 
y2
;

7214 
öt32_t
 
rI
, 
cI
;

7215 
q31_t
 *
pYD©a
 = 
S
->
pD©a
;

7216 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

7222 
rI
 = ((
X
 & 0xFFF00000) >> 20u);

7227 
cI
 = ((
Y
 & 0xFFF00000) >> 20u);

7231 if(
rI
 < 0 ||ÑI > (
S
->
numRows
 - 1Ë|| 
cI
 < 0 || cI > (S->
numCﬁs
 - 1))

7238 
x‰a˘
 = (
X
 & 0x000FFFFF) << 11u;

7241 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

7242 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

7246 
y‰a˘
 = (
Y
 & 0x000FFFFF) << 11u;

7249 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

7250 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

7253 
out
 = ((
q31_t
Ë(((
q63_t
Ë
x1
 * (0x7FFFFFFF - 
x‰a˘
)) >> 32));

7254 
acc
 = ((
q31_t
Ë(((
q63_t
Ë
out
 * (0x7FFFFFFF - 
y‰a˘
)) >> 32));

7257 
out
 = ((
q31_t
Ë((
q63_t
Ë
x2
 * (0x7FFFFFFF - 
y‰a˘
) >> 32));

7258 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
x‰a˘
) >> 32));

7261 
out
 = ((
q31_t
Ë((
q63_t
Ë
y1
 * (0x7FFFFFFF - 
x‰a˘
) >> 32));

7262 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
y‰a˘
) >> 32));

7265 
out
 = ((
q31_t
Ë((
q63_t
Ë
y2
 * (
x‰a˘
) >> 32));

7266 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
y‰a˘
) >> 32));

7269  (
acc
 << 2u);

7281 
__INLINE
 
q15_t
 
¨m_bûöór_öãΩ_q15
(

7282 
¨m_bûöór_öãΩ_ö°™˚_q15
 * 
S
,

7283 
q31_t
 
X
,

7284 
q31_t
 
Y
)

7286 
q63_t
 
acc
 = 0;

7287 
q31_t
 
out
;

7288 
q15_t
 
x1
, 
x2
, 
y1
, 
y2
;

7289 
q31_t
 
x‰a˘
, 
y‰a˘
;

7290 
öt32_t
 
rI
, 
cI
;

7291 
q15_t
 *
pYD©a
 = 
S
->
pD©a
;

7292 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

7297 
rI
 = ((
X
 & 0xFFF00000) >> 20);

7302 
cI
 = ((
Y
 & 0xFFF00000) >> 20);

7306 if(
rI
 < 0 ||ÑI > (
S
->
numRows
 - 1Ë|| 
cI
 < 0 || cI > (S->
numCﬁs
 - 1))

7313 
x‰a˘
 = (
X
 & 0x000FFFFF);

7316 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

7317 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

7322 
y‰a˘
 = (
Y
 & 0x000FFFFF);

7325 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

7326 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

7332 
out
 = (
q31_t
Ë(((
q63_t
Ë
x1
 * (0xFFFFF - 
x‰a˘
)) >> 4u);

7333 
acc
 = ((
q63_t
Ë
out
 * (0xFFFFF - 
y‰a˘
));

7336 
out
 = (
q31_t
Ë(((
q63_t
Ë
x2
 * (0xFFFFF - 
y‰a˘
)) >> 4u);

7337 
acc
 +((
q63_t
Ë
out
 * (
x‰a˘
));

7340 
out
 = (
q31_t
Ë(((
q63_t
Ë
y1
 * (0xFFFFF - 
x‰a˘
)) >> 4u);

7341 
acc
 +((
q63_t
Ë
out
 * (
y‰a˘
));

7344 
out
 = (
q31_t
Ë(((
q63_t
Ë
y2
 * (
x‰a˘
)) >> 4u);

7345 
acc
 +((
q63_t
Ë
out
 * (
y‰a˘
));

7349  (
acc
 >> 36);

7361 
__INLINE
 
q7_t
 
¨m_bûöór_öãΩ_q7
(

7362 
¨m_bûöór_öãΩ_ö°™˚_q7
 * 
S
,

7363 
q31_t
 
X
,

7364 
q31_t
 
Y
)

7366 
q63_t
 
acc
 = 0;

7367 
q31_t
 
out
;

7368 
q31_t
 
x‰a˘
, 
y‰a˘
;

7369 
q7_t
 
x1
, 
x2
, 
y1
, 
y2
;

7370 
öt32_t
 
rI
, 
cI
;

7371 
q7_t
 *
pYD©a
 = 
S
->
pD©a
;

7372 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

7377 
rI
 = ((
X
 & 0xFFF00000) >> 20);

7382 
cI
 = ((
Y
 & 0xFFF00000) >> 20);

7386 if(
rI
 < 0 ||ÑI > (
S
->
numRows
 - 1Ë|| 
cI
 < 0 || cI > (S->
numCﬁs
 - 1))

7393 
x‰a˘
 = (
X
 & 0x000FFFFF);

7396 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

7397 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

7402 
y‰a˘
 = (
Y
 & 0x000FFFFF);

7405 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

7406 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

7409 
out
 = ((
x1
 * (0xFFFFF - 
x‰a˘
)));

7410 
acc
 = (((
q63_t
Ë
out
 * (0xFFFFF - 
y‰a˘
)));

7413 
out
 = ((
x2
 * (0xFFFFF - 
y‰a˘
)));

7414 
acc
 +(((
q63_t
Ë
out
 * (
x‰a˘
)));

7417 
out
 = ((
y1
 * (0xFFFFF - 
x‰a˘
)));

7418 
acc
 +(((
q63_t
Ë
out
 * (
y‰a˘
)));

7421 
out
 = ((
y2
 * (
y‰a˘
)));

7422 
acc
 +(((
q63_t
Ë
out
 * (
x‰a˘
)));

7425  (
acc
 >> 40);

7435 
	#mu…Acc_32x32_kìp32_R
(
a
, 
x
, 
y
Ë\

	)

7436 
a
 = (
q31_t
Ë(((((
q63_t
ËaË<< 32Ë+ ((q63_tË
x
 * 
y
) + 0x80000000LL ) >> 32)

7439 
	#mu…Sub_32x32_kìp32_R
(
a
, 
x
, 
y
Ë\

	)

7440 
a
 = (
q31_t
Ë(((((
q63_t
ËaË<< 32Ë- ((q63_tË
x
 * 
y
) + 0x80000000LL ) >> 32)

7443 
	#mu…_32x32_kìp32_R
(
a
, 
x
, 
y
Ë\

	)

7444 
a
 = (
q31_t
Ë(((
q63_t
Ë
x
 * 
y
 + 0x80000000LL ) >> 32)

7447 
	#mu…Acc_32x32_kìp32
(
a
, 
x
, 
y
Ë\

	)

7448 
a
 +(
q31_t
Ë(((
q63_t
Ë
x
 * 
y
) >> 32)

7451 
	#mu…Sub_32x32_kìp32
(
a
, 
x
, 
y
Ë\

	)

7452 
a
 -(
q31_t
Ë(((
q63_t
Ë
x
 * 
y
) >> 32)

7455 
	#mu…_32x32_kìp32
(
a
, 
x
, 
y
Ë\

	)

7456 
a
 = (
q31_t
Ë(((
q63_t
Ë
x
 * 
y
 ) >> 32)

7459 #i‡
deföed
 ( 
__CC_ARM
 )

7462 #ifde‡
ARM_MATH_CM4


7463 
	#LOW_OPTIMIZATION_ENTER
 \

	)

7464 
_Pøgma
 ("push") \

7465 
_Pøgma
 ("O1")

7467 
	#LOW_OPTIMIZATION_ENTER


	)

7471 #ifde‡
ARM_MATH_CM4


7472 
	#LOW_OPTIMIZATION_EXIT
 \

	)

7473 
_Pøgma
 ("pop")

7475 
	#LOW_OPTIMIZATION_EXIT


	)

7479 
	#IAR_ONLY_LOW_OPTIMIZATION_ENTER


	)

7482 
	#IAR_ONLY_LOW_OPTIMIZATION_EXIT


	)

7484 #ñi‡
deföed
(
__ICCARM__
)

7487 #ifde‡
ARM_MATH_CM4


7488 
	#LOW_OPTIMIZATION_ENTER
 \

	)

7489 
_Pøgma
 ("optimize=low")

7491 
	#LOW_OPTIMIZATION_ENTER


	)

7495 
	#LOW_OPTIMIZATION_EXIT


	)

7498 #ifde‡
ARM_MATH_CM4


7499 
	#IAR_ONLY_LOW_OPTIMIZATION_ENTER
 \

	)

7500 
_Pøgma
 ("optimize=low")

7502 
	#IAR_ONLY_LOW_OPTIMIZATION_ENTER


	)

7506 
	#IAR_ONLY_LOW_OPTIMIZATION_EXIT


	)

7508 #ñi‡
deföed
(
__GNUC__
)

7510 
	#LOW_OPTIMIZATION_ENTER
 
	`__©åibuã__
(–
	`›timize
("-O1"Ë))

	)

7512 
	#LOW_OPTIMIZATION_EXIT


	)

7514 
	#IAR_ONLY_LOW_OPTIMIZATION_ENTER


	)

7516 
	#IAR_ONLY_LOW_OPTIMIZATION_EXIT


	)

7518 #ñi‡
deföed
(
__CSMC__
)

7520 
	#LOW_OPTIMIZATION_ENTER


	)

7521 
	#LOW_OPTIMIZATION_EXIT


	)

7522 
	#IAR_ONLY_LOW_OPTIMIZATION_ENTER


	)

7523 
	#IAR_ONLY_LOW_OPTIMIZATION_EXIT


	)

7528 #ifdef 
__˝lu•lus


	@CMSIS/Include/core_cm0.h

38 #i‡
deföed
 ( 
__ICCARM__
 )

39 #¥agm®
sy°em_ö˛ude


42 #i‚de‡
__CORE_CM0_H_GENERIC


43 
	#__CORE_CM0_H_GENERIC


	)

45 #ifde‡
__˝lu•lus


71 
	#__CM0_CMSIS_VERSION_MAIN
 (0x04Ë

	)

72 
	#__CM0_CMSIS_VERSION_SUB
 (0x00Ë

	)

73 
	#__CM0_CMSIS_VERSION
 ((
__CM0_CMSIS_VERSION_MAIN
 << 16Ë| \

	)

74 
__CM0_CMSIS_VERSION_SUB
 )

76 
	#__CORTEX_M
 (0x00Ë

	)

79 #i‡ 
deföed
 ( 
__CC_ARM
 )

80 
	#__ASM
 
__asm


	)

81 
	#__INLINE
 
__ölöe


	)

82 
	#__STATIC_INLINE
 
__ölöe


	)

84 #ñi‡
deföed
 ( 
__GNUC__
 )

85 
	#__ASM
 
__asm


	)

86 
	#__INLINE
 
ölöe


	)

87 
	#__STATIC_INLINE
 
ölöe


	)

89 #ñi‡
deföed
 ( 
__ICCARM__
 )

90 
	#__ASM
 
__asm


	)

91 
	#__INLINE
 
ölöe


	)

92 
	#__STATIC_INLINE
 
ölöe


	)

94 #ñi‡
deföed
 ( 
__TMS470__
 )

95 
	#__ASM
 
__asm


	)

96 
	#__STATIC_INLINE
 
ölöe


	)

98 #ñi‡
deföed
 ( 
__TASKING__
 )

99 
	#__ASM
 
__asm


	)

100 
	#__INLINE
 
ölöe


	)

101 
	#__STATIC_INLINE
 
ölöe


	)

103 #ñi‡
deföed
 ( 
__CSMC__
 )

104 
	#__∑cked


	)

105 
	#__ASM
 
_asm


	)

106 
	#__INLINE
 
ölöe


	)

107 
	#__STATIC_INLINE
 
ölöe


	)

114 
	#__FPU_USED
 0

	)

116 #i‡
deföed
 ( 
__CC_ARM
 )

117 #i‡
deföed
 
__TARGET_FPU_VFP


121 #ñi‡
deföed
 ( 
__GNUC__
 )

122 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

126 #ñi‡
deföed
 ( 
__ICCARM__
 )

127 #i‡
deföed
 
__ARMVFP__


131 #ñi‡
deföed
 ( 
__TMS470__
 )

132 #i‡
deföed
 
__TI__VFP_SUPPORT____


136 #ñi‡
deföed
 ( 
__TASKING__
 )

137 #i‡
deföed
 
__FPU_VFP__


141 #ñi‡
deföed
 ( 
__CSMC__
 )

142 #i‡–
__CSMC__
 & 0x400)

147 
	~<°döt.h
>

148 
	~<c‹e_cmIn°r.h
>

149 
	~<c‹e_cmFunc.h
>

151 #ifde‡
__˝lu•lus


157 #i‚de‡
__CMSIS_GENERIC


159 #i‚de‡
__CORE_CM0_H_DEPENDANT


160 
	#__CORE_CM0_H_DEPENDANT


	)

162 #ifde‡
__˝lu•lus


167 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


168 #i‚de‡
__CM0_REV


169 
	#__CM0_REV
 0x0000

	)

173 #i‚de‡
__NVIC_PRIO_BITS


174 
	#__NVIC_PRIO_BITS
 2

	)

178 #i‚de‡
__Víd‹_SysTickC⁄fig


179 
	#__Víd‹_SysTickC⁄fig
 0

	)

192 #ifde‡
__˝lu•lus


193 
	#__I
 vﬁ©ûê

	)

195 
	#__I
 vﬁ©ûêc⁄°

	)

197 
	#__O
 vﬁ©ûê

	)

198 
	#__IO
 vﬁ©ûê

	)

228 #i‡(
__CORTEX_M
 != 0x04)

229 
uöt32_t
 
_ª£rved0
:27;

231 
uöt32_t
 
_ª£rved0
:16;

232 
uöt32_t
 
GE
:4;

233 
uöt32_t
 
_ª£rved1
:7;

235 
uöt32_t
 
Q
:1;

236 
uöt32_t
 
V
:1;

237 
uöt32_t
 
C
:1;

238 
uöt32_t
 
Z
:1;

239 
uöt32_t
 
N
:1;

240 } 
b
;

241 
uöt32_t
 
w
;

242 } 
	tAPSR_Ty≥
;

251 
uöt32_t
 
ISR
:9;

252 
uöt32_t
 
_ª£rved0
:23;

253 } 
b
;

254 
uöt32_t
 
w
;

255 } 
	tIPSR_Ty≥
;

264 
uöt32_t
 
ISR
:9;

265 #i‡(
__CORTEX_M
 != 0x04)

266 
uöt32_t
 
_ª£rved0
:15;

268 
uöt32_t
 
_ª£rved0
:7;

269 
uöt32_t
 
GE
:4;

270 
uöt32_t
 
_ª£rved1
:4;

272 
uöt32_t
 
T
:1;

273 
uöt32_t
 
IT
:2;

274 
uöt32_t
 
Q
:1;

275 
uöt32_t
 
V
:1;

276 
uöt32_t
 
C
:1;

277 
uöt32_t
 
Z
:1;

278 
uöt32_t
 
N
:1;

279 } 
b
;

280 
uöt32_t
 
w
;

281 } 
	txPSR_Ty≥
;

290 
uöt32_t
 
nPRIV
:1;

291 
uöt32_t
 
SPSEL
:1;

292 
uöt32_t
 
FPCA
:1;

293 
uöt32_t
 
_ª£rved0
:29;

294 } 
b
;

295 
uöt32_t
 
w
;

296 } 
	tCONTROL_Ty≥
;

311 
__IO
 
uöt32_t
 
ISER
[1];

312 
uöt32_t
 
RESERVED0
[31];

313 
__IO
 
uöt32_t
 
ICER
[1];

314 
uöt32_t
 
RSERVED1
[31];

315 
__IO
 
uöt32_t
 
ISPR
[1];

316 
uöt32_t
 
RESERVED2
[31];

317 
__IO
 
uöt32_t
 
ICPR
[1];

318 
uöt32_t
 
RESERVED3
[31];

319 
uöt32_t
 
RESERVED4
[64];

320 
__IO
 
uöt32_t
 
IP
[8];

321 } 
	tNVIC_Ty≥
;

336 
__I
 
uöt32_t
 
CPUID
;

337 
__IO
 
uöt32_t
 
ICSR
;

338 
uöt32_t
 
RESERVED0
;

339 
__IO
 
uöt32_t
 
AIRCR
;

340 
__IO
 
uöt32_t
 
SCR
;

341 
__IO
 
uöt32_t
 
CCR
;

342 
uöt32_t
 
RESERVED1
;

343 
__IO
 
uöt32_t
 
SHP
[2];

344 
__IO
 
uöt32_t
 
SHCSR
;

345 } 
	tSCB_Ty≥
;

348 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

349 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

351 
	#SCB_CPUID_VARIANT_Pos
 20

	)

352 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

354 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

355 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

357 
	#SCB_CPUID_PARTNO_Pos
 4

	)

358 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

360 
	#SCB_CPUID_REVISION_Pos
 0

	)

361 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

364 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

365 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

367 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

368 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

370 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

371 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

373 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

374 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

376 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

377 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

379 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

380 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

382 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

383 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

385 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

386 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

388 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

389 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

392 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

393 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

395 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

396 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

398 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

399 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

401 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

402 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

404 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

405 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

408 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

409 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

411 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

412 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

414 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

415 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

418 
	#SCB_CCR_STKALIGN_Pos
 9

	)

419 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

421 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

422 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

425 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

426 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

441 
__IO
 
uöt32_t
 
CTRL
;

442 
__IO
 
uöt32_t
 
LOAD
;

443 
__IO
 
uöt32_t
 
VAL
;

444 
__I
 
uöt32_t
 
CALIB
;

445 } 
	tSysTick_Ty≥
;

448 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

449 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

451 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

452 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

454 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

455 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

457 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

458 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

461 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

462 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

465 
	#SysTick_VAL_CURRENT_Pos
 0

	)

466 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

469 
	#SysTick_CALIB_NOREF_Pos
 31

	)

470 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

472 
	#SysTick_CALIB_SKEW_Pos
 30

	)

473 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

475 
	#SysTick_CALIB_TENMS_Pos
 0

	)

476 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_CALIB_TENMS_Pos
Ë

	)

498 
	#SCS_BASE
 (0xE000E000ULË

	)

499 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

500 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

501 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

503 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

504 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

505 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

533 
	#_BIT_SHIFT
(
IRQn
Ë–(((
uöt32_t
)(IRQnËË& 0x03Ë* 8 )

	)

534 
	#_SHP_IDX
(
IRQn
Ë–((((
uöt32_t
)(IRQnË& 0x0F)-8Ë>> 2Ë)

	)

535 
	#_IP_IDX
(
IRQn
Ë–((
uöt32_t
)(IRQnË>> 2Ë)

	)

544 
__STATIC_INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

546 
NVIC
->
ISER
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

556 
__STATIC_INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

558 
NVIC
->
ICER
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

572 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

574 ((
uöt32_t
Ë((
NVIC
->
ISPR
[0] & (1 << ((uöt32_t)(
IRQn
) & 0x1F)))?1:0));

584 
__STATIC_INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

586 
NVIC
->
ISPR
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

596 
__STATIC_INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

598 
NVIC
->
ICPR
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

611 
__STATIC_INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

613 if(
IRQn
 < 0) {

614 
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << 
_BIT_SHIFT
(IRQn))) |

615 (((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)Ë& 0xFFË<< 
_BIT_SHIFT
(
IRQn
)); }

617 
NVIC
->
IP
[
_IP_IDX
(
IRQn
)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << 
_BIT_SHIFT
(IRQn))) |

618 (((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)Ë& 0xFFË<< 
_BIT_SHIFT
(
IRQn
)); }

633 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

636 if(
IRQn
 < 0) {

637 ((
uöt32_t
)(((
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& 0xFFË>> (8 - 
__NVIC_PRIO_BITS
))); }

639 ((
uöt32_t
)(((
NVIC
->
IP
[ 
_IP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& 0xFFË>> (8 - 
__NVIC_PRIO_BITS
))); }

647 
__STATIC_INLINE
 
NVIC_Sy°emRe£t
()

649 
__DSB
();

651 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

652 
SCB_AIRCR_SYSRESETREQ_Msk
);

653 
__DSB
();

668 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

685 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

687 i‡((
ticks
 - 1Ë> 
SysTick_LOAD_RELOAD_Msk
)  (1);

689 
SysTick
->
LOAD
 = 
ticks
 - 1;

690 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

691 
SysTick
->
VAL
 = 0;

692 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

693 
SysTick_CTRL_TICKINT_Msk
 |

694 
SysTick_CTRL_ENABLE_Msk
;

705 #ifde‡
__˝lu•lus


	@CMSIS/Include/core_cm0plus.h

38 #i‡
deföed
 ( 
__ICCARM__
 )

39 #¥agm®
sy°em_ö˛ude


42 #i‚de‡
__CORE_CM0PLUS_H_GENERIC


43 
	#__CORE_CM0PLUS_H_GENERIC


	)

45 #ifde‡
__˝lu•lus


71 
	#__CM0PLUS_CMSIS_VERSION_MAIN
 (0x04Ë

	)

72 
	#__CM0PLUS_CMSIS_VERSION_SUB
 (0x00Ë

	)

73 
	#__CM0PLUS_CMSIS_VERSION
 ((
__CM0PLUS_CMSIS_VERSION_MAIN
 << 16Ë| \

	)

74 
__CM0PLUS_CMSIS_VERSION_SUB
)

76 
	#__CORTEX_M
 (0x00Ë

	)

79 #i‡ 
deföed
 ( 
__CC_ARM
 )

80 
	#__ASM
 
__asm


	)

81 
	#__INLINE
 
__ölöe


	)

82 
	#__STATIC_INLINE
 
__ölöe


	)

84 #ñi‡
deföed
 ( 
__GNUC__
 )

85 
	#__ASM
 
__asm


	)

86 
	#__INLINE
 
ölöe


	)

87 
	#__STATIC_INLINE
 
ölöe


	)

89 #ñi‡
deföed
 ( 
__ICCARM__
 )

90 
	#__ASM
 
__asm


	)

91 
	#__INLINE
 
ölöe


	)

92 
	#__STATIC_INLINE
 
ölöe


	)

94 #ñi‡
deföed
 ( 
__TMS470__
 )

95 
	#__ASM
 
__asm


	)

96 
	#__STATIC_INLINE
 
ölöe


	)

98 #ñi‡
deföed
 ( 
__TASKING__
 )

99 
	#__ASM
 
__asm


	)

100 
	#__INLINE
 
ölöe


	)

101 
	#__STATIC_INLINE
 
ölöe


	)

103 #ñi‡
deföed
 ( 
__CSMC__
 )

104 
	#__∑cked


	)

105 
	#__ASM
 
_asm


	)

106 
	#__INLINE
 
ölöe


	)

107 
	#__STATIC_INLINE
 
ölöe


	)

114 
	#__FPU_USED
 0

	)

116 #i‡
deföed
 ( 
__CC_ARM
 )

117 #i‡
deföed
 
__TARGET_FPU_VFP


121 #ñi‡
deföed
 ( 
__GNUC__
 )

122 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

126 #ñi‡
deföed
 ( 
__ICCARM__
 )

127 #i‡
deföed
 
__ARMVFP__


131 #ñi‡
deföed
 ( 
__TMS470__
 )

132 #i‡
deföed
 
__TI__VFP_SUPPORT____


136 #ñi‡
deföed
 ( 
__TASKING__
 )

137 #i‡
deföed
 
__FPU_VFP__


141 #ñi‡
deföed
 ( 
__CSMC__
 )

142 #i‡–
__CSMC__
 & 0x400)

147 
	~<°döt.h
>

148 
	~<c‹e_cmIn°r.h
>

149 
	~<c‹e_cmFunc.h
>

151 #ifde‡
__˝lu•lus


157 #i‚de‡
__CMSIS_GENERIC


159 #i‚de‡
__CORE_CM0PLUS_H_DEPENDANT


160 
	#__CORE_CM0PLUS_H_DEPENDANT


	)

162 #ifde‡
__˝lu•lus


167 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


168 #i‚de‡
__CM0PLUS_REV


169 
	#__CM0PLUS_REV
 0x0000

	)

173 #i‚de‡
__MPU_PRESENT


174 
	#__MPU_PRESENT
 0

	)

178 #i‚de‡
__VTOR_PRESENT


179 
	#__VTOR_PRESENT
 0

	)

183 #i‚de‡
__NVIC_PRIO_BITS


184 
	#__NVIC_PRIO_BITS
 2

	)

188 #i‚de‡
__Víd‹_SysTickC⁄fig


189 
	#__Víd‹_SysTickC⁄fig
 0

	)

202 #ifde‡
__˝lu•lus


203 
	#__I
 vﬁ©ûê

	)

205 
	#__I
 vﬁ©ûêc⁄°

	)

207 
	#__O
 vﬁ©ûê

	)

208 
	#__IO
 vﬁ©ûê

	)

239 #i‡(
__CORTEX_M
 != 0x04)

240 
uöt32_t
 
_ª£rved0
:27;

242 
uöt32_t
 
_ª£rved0
:16;

243 
uöt32_t
 
GE
:4;

244 
uöt32_t
 
_ª£rved1
:7;

246 
uöt32_t
 
Q
:1;

247 
uöt32_t
 
V
:1;

248 
uöt32_t
 
C
:1;

249 
uöt32_t
 
Z
:1;

250 
uöt32_t
 
N
:1;

251 } 
b
;

252 
uöt32_t
 
w
;

253 } 
	tAPSR_Ty≥
;

262 
uöt32_t
 
ISR
:9;

263 
uöt32_t
 
_ª£rved0
:23;

264 } 
b
;

265 
uöt32_t
 
w
;

266 } 
	tIPSR_Ty≥
;

275 
uöt32_t
 
ISR
:9;

276 #i‡(
__CORTEX_M
 != 0x04)

277 
uöt32_t
 
_ª£rved0
:15;

279 
uöt32_t
 
_ª£rved0
:7;

280 
uöt32_t
 
GE
:4;

281 
uöt32_t
 
_ª£rved1
:4;

283 
uöt32_t
 
T
:1;

284 
uöt32_t
 
IT
:2;

285 
uöt32_t
 
Q
:1;

286 
uöt32_t
 
V
:1;

287 
uöt32_t
 
C
:1;

288 
uöt32_t
 
Z
:1;

289 
uöt32_t
 
N
:1;

290 } 
b
;

291 
uöt32_t
 
w
;

292 } 
	txPSR_Ty≥
;

301 
uöt32_t
 
nPRIV
:1;

302 
uöt32_t
 
SPSEL
:1;

303 
uöt32_t
 
FPCA
:1;

304 
uöt32_t
 
_ª£rved0
:29;

305 } 
b
;

306 
uöt32_t
 
w
;

307 } 
	tCONTROL_Ty≥
;

322 
__IO
 
uöt32_t
 
ISER
[1];

323 
uöt32_t
 
RESERVED0
[31];

324 
__IO
 
uöt32_t
 
ICER
[1];

325 
uöt32_t
 
RSERVED1
[31];

326 
__IO
 
uöt32_t
 
ISPR
[1];

327 
uöt32_t
 
RESERVED2
[31];

328 
__IO
 
uöt32_t
 
ICPR
[1];

329 
uöt32_t
 
RESERVED3
[31];

330 
uöt32_t
 
RESERVED4
[64];

331 
__IO
 
uöt32_t
 
IP
[8];

332 } 
	tNVIC_Ty≥
;

347 
__I
 
uöt32_t
 
CPUID
;

348 
__IO
 
uöt32_t
 
ICSR
;

349 #i‡(
__VTOR_PRESENT
 == 1)

350 
__IO
 
uöt32_t
 
VTOR
;

352 
uöt32_t
 
RESERVED0
;

354 
__IO
 
uöt32_t
 
AIRCR
;

355 
__IO
 
uöt32_t
 
SCR
;

356 
__IO
 
uöt32_t
 
CCR
;

357 
uöt32_t
 
RESERVED1
;

358 
__IO
 
uöt32_t
 
SHP
[2];

359 
__IO
 
uöt32_t
 
SHCSR
;

360 } 
	tSCB_Ty≥
;

363 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

364 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

366 
	#SCB_CPUID_VARIANT_Pos
 20

	)

367 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

369 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

370 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

372 
	#SCB_CPUID_PARTNO_Pos
 4

	)

373 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

375 
	#SCB_CPUID_REVISION_Pos
 0

	)

376 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

379 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

380 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

382 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

383 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

385 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

386 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

388 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

389 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

391 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

392 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

394 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

395 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

397 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

398 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

400 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

401 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

403 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

404 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

406 #i‡(
__VTOR_PRESENT
 == 1)

408 
	#SCB_VTOR_TBLOFF_Pos
 8

	)

409 
	#SCB_VTOR_TBLOFF_Msk
 (0xFFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

413 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

414 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

416 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

417 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

419 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

420 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

422 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

423 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

425 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

426 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

429 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

430 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

432 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

433 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

435 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

436 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

439 
	#SCB_CCR_STKALIGN_Pos
 9

	)

440 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

442 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

443 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

446 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

447 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

462 
__IO
 
uöt32_t
 
CTRL
;

463 
__IO
 
uöt32_t
 
LOAD
;

464 
__IO
 
uöt32_t
 
VAL
;

465 
__I
 
uöt32_t
 
CALIB
;

466 } 
	tSysTick_Ty≥
;

469 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

470 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

472 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

473 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

475 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

476 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

478 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

479 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

482 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

483 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

486 
	#SysTick_VAL_CURRENT_Pos
 0

	)

487 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

490 
	#SysTick_CALIB_NOREF_Pos
 31

	)

491 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

493 
	#SysTick_CALIB_SKEW_Pos
 30

	)

494 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

496 
	#SysTick_CALIB_TENMS_Pos
 0

	)

497 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_CALIB_TENMS_Pos
Ë

	)

501 #i‡(
__MPU_PRESENT
 == 1)

512 
__I
 
uöt32_t
 
TYPE
;

513 
__IO
 
uöt32_t
 
CTRL
;

514 
__IO
 
uöt32_t
 
RNR
;

515 
__IO
 
uöt32_t
 
RBAR
;

516 
__IO
 
uöt32_t
 
RASR
;

517 } 
	tMPU_Ty≥
;

520 
	#MPU_TYPE_IREGION_Pos
 16

	)

521 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

523 
	#MPU_TYPE_DREGION_Pos
 8

	)

524 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

526 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

527 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

530 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

531 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

533 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

534 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

536 
	#MPU_CTRL_ENABLE_Pos
 0

	)

537 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

540 
	#MPU_RNR_REGION_Pos
 0

	)

541 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

544 
	#MPU_RBAR_ADDR_Pos
 8

	)

545 
	#MPU_RBAR_ADDR_Msk
 (0xFFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

547 
	#MPU_RBAR_VALID_Pos
 4

	)

548 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

550 
	#MPU_RBAR_REGION_Pos
 0

	)

551 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

554 
	#MPU_RASR_ATTRS_Pos
 16

	)

555 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

557 
	#MPU_RASR_XN_Pos
 28

	)

558 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

560 
	#MPU_RASR_AP_Pos
 24

	)

561 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

563 
	#MPU_RASR_TEX_Pos
 19

	)

564 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

566 
	#MPU_RASR_S_Pos
 18

	)

567 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

569 
	#MPU_RASR_C_Pos
 17

	)

570 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

572 
	#MPU_RASR_B_Pos
 16

	)

573 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

575 
	#MPU_RASR_SRD_Pos
 8

	)

576 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

578 
	#MPU_RASR_SIZE_Pos
 1

	)

579 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

581 
	#MPU_RASR_ENABLE_Pos
 0

	)

582 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

605 
	#SCS_BASE
 (0xE000E000ULË

	)

606 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

607 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

608 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

610 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

611 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

612 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

614 #i‡(
__MPU_PRESENT
 == 1)

615 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

616 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

644 
	#_BIT_SHIFT
(
IRQn
Ë–(((
uöt32_t
)(IRQnËË& 0x03Ë* 8 )

	)

645 
	#_SHP_IDX
(
IRQn
Ë–((((
uöt32_t
)(IRQnË& 0x0F)-8Ë>> 2Ë)

	)

646 
	#_IP_IDX
(
IRQn
Ë–((
uöt32_t
)(IRQnË>> 2Ë)

	)

655 
__STATIC_INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

657 
NVIC
->
ISER
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

667 
__STATIC_INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

669 
NVIC
->
ICER
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

683 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

685 ((
uöt32_t
Ë((
NVIC
->
ISPR
[0] & (1 << ((uöt32_t)(
IRQn
) & 0x1F)))?1:0));

695 
__STATIC_INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

697 
NVIC
->
ISPR
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

707 
__STATIC_INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

709 
NVIC
->
ICPR
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

722 
__STATIC_INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

724 if(
IRQn
 < 0) {

725 
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << 
_BIT_SHIFT
(IRQn))) |

726 (((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)Ë& 0xFFË<< 
_BIT_SHIFT
(
IRQn
)); }

728 
NVIC
->
IP
[
_IP_IDX
(
IRQn
)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << 
_BIT_SHIFT
(IRQn))) |

729 (((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)Ë& 0xFFË<< 
_BIT_SHIFT
(
IRQn
)); }

744 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

747 if(
IRQn
 < 0) {

748 ((
uöt32_t
)(((
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& 0xFFË>> (8 - 
__NVIC_PRIO_BITS
))); }

750 ((
uöt32_t
)(((
NVIC
->
IP
[ 
_IP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& 0xFFË>> (8 - 
__NVIC_PRIO_BITS
))); }

758 
__STATIC_INLINE
 
NVIC_Sy°emRe£t
()

760 
__DSB
();

762 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

763 
SCB_AIRCR_SYSRESETREQ_Msk
);

764 
__DSB
();

779 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

796 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

798 i‡((
ticks
 - 1Ë> 
SysTick_LOAD_RELOAD_Msk
)  (1);

800 
SysTick
->
LOAD
 = 
ticks
 - 1;

801 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

802 
SysTick
->
VAL
 = 0;

803 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

804 
SysTick_CTRL_TICKINT_Msk
 |

805 
SysTick_CTRL_ENABLE_Msk
;

816 #ifde‡
__˝lu•lus


	@CMSIS/Include/core_cm3.h

38 #i‡
deföed
 ( 
__ICCARM__
 )

39 #¥agm®
sy°em_ö˛ude


42 #i‚de‡
__CORE_CM3_H_GENERIC


43 
	#__CORE_CM3_H_GENERIC


	)

45 #ifde‡
__˝lu•lus


71 
	#__CM3_CMSIS_VERSION_MAIN
 (0x04Ë

	)

72 
	#__CM3_CMSIS_VERSION_SUB
 (0x00Ë

	)

73 
	#__CM3_CMSIS_VERSION
 ((
__CM3_CMSIS_VERSION_MAIN
 << 16Ë| \

	)

74 
__CM3_CMSIS_VERSION_SUB
 )

76 
	#__CORTEX_M
 (0x03Ë

	)

79 #i‡ 
deföed
 ( 
__CC_ARM
 )

80 
	#__ASM
 
__asm


	)

81 
	#__INLINE
 
__ölöe


	)

82 
	#__STATIC_INLINE
 
__ölöe


	)

84 #ñi‡
deföed
 ( 
__GNUC__
 )

85 
	#__ASM
 
__asm


	)

86 
	#__INLINE
 
ölöe


	)

87 
	#__STATIC_INLINE
 
ölöe


	)

89 #ñi‡
deföed
 ( 
__ICCARM__
 )

90 
	#__ASM
 
__asm


	)

91 
	#__INLINE
 
ölöe


	)

92 
	#__STATIC_INLINE
 
ölöe


	)

94 #ñi‡
deföed
 ( 
__TMS470__
 )

95 
	#__ASM
 
__asm


	)

96 
	#__STATIC_INLINE
 
ölöe


	)

98 #ñi‡
deföed
 ( 
__TASKING__
 )

99 
	#__ASM
 
__asm


	)

100 
	#__INLINE
 
ölöe


	)

101 
	#__STATIC_INLINE
 
ölöe


	)

103 #ñi‡
deföed
 ( 
__CSMC__
 )

104 
	#__∑cked


	)

105 
	#__ASM
 
_asm


	)

106 
	#__INLINE
 
ölöe


	)

107 
	#__STATIC_INLINE
 
ölöe


	)

114 
	#__FPU_USED
 0

	)

116 #i‡
deföed
 ( 
__CC_ARM
 )

117 #i‡
deföed
 
__TARGET_FPU_VFP


121 #ñi‡
deföed
 ( 
__GNUC__
 )

122 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

126 #ñi‡
deföed
 ( 
__ICCARM__
 )

127 #i‡
deföed
 
__ARMVFP__


131 #ñi‡
deföed
 ( 
__TMS470__
 )

132 #i‡
deföed
 
__TI__VFP_SUPPORT____


136 #ñi‡
deföed
 ( 
__TASKING__
 )

137 #i‡
deföed
 
__FPU_VFP__


141 #ñi‡
deföed
 ( 
__CSMC__
 )

142 #i‡–
__CSMC__
 & 0x400)

147 
	~<°döt.h
>

148 
	~<c‹e_cmIn°r.h
>

149 
	~<c‹e_cmFunc.h
>

151 #ifde‡
__˝lu•lus


157 #i‚de‡
__CMSIS_GENERIC


159 #i‚de‡
__CORE_CM3_H_DEPENDANT


160 
	#__CORE_CM3_H_DEPENDANT


	)

162 #ifde‡
__˝lu•lus


167 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


168 #i‚de‡
__CM3_REV


169 
	#__CM3_REV
 0x0200

	)

173 #i‚de‡
__MPU_PRESENT


174 
	#__MPU_PRESENT
 0

	)

178 #i‚de‡
__NVIC_PRIO_BITS


179 
	#__NVIC_PRIO_BITS
 4

	)

183 #i‚de‡
__Víd‹_SysTickC⁄fig


184 
	#__Víd‹_SysTickC⁄fig
 0

	)

197 #ifde‡
__˝lu•lus


198 
	#__I
 vﬁ©ûê

	)

200 
	#__I
 vﬁ©ûêc⁄°

	)

202 
	#__O
 vﬁ©ûê

	)

203 
	#__IO
 vﬁ©ûê

	)

235 #i‡(
__CORTEX_M
 != 0x04)

236 
uöt32_t
 
_ª£rved0
:27;

238 
uöt32_t
 
_ª£rved0
:16;

239 
uöt32_t
 
GE
:4;

240 
uöt32_t
 
_ª£rved1
:7;

242 
uöt32_t
 
Q
:1;

243 
uöt32_t
 
V
:1;

244 
uöt32_t
 
C
:1;

245 
uöt32_t
 
Z
:1;

246 
uöt32_t
 
N
:1;

247 } 
b
;

248 
uöt32_t
 
w
;

249 } 
	tAPSR_Ty≥
;

258 
uöt32_t
 
ISR
:9;

259 
uöt32_t
 
_ª£rved0
:23;

260 } 
b
;

261 
uöt32_t
 
w
;

262 } 
	tIPSR_Ty≥
;

271 
uöt32_t
 
ISR
:9;

272 #i‡(
__CORTEX_M
 != 0x04)

273 
uöt32_t
 
_ª£rved0
:15;

275 
uöt32_t
 
_ª£rved0
:7;

276 
uöt32_t
 
GE
:4;

277 
uöt32_t
 
_ª£rved1
:4;

279 
uöt32_t
 
T
:1;

280 
uöt32_t
 
IT
:2;

281 
uöt32_t
 
Q
:1;

282 
uöt32_t
 
V
:1;

283 
uöt32_t
 
C
:1;

284 
uöt32_t
 
Z
:1;

285 
uöt32_t
 
N
:1;

286 } 
b
;

287 
uöt32_t
 
w
;

288 } 
	txPSR_Ty≥
;

297 
uöt32_t
 
nPRIV
:1;

298 
uöt32_t
 
SPSEL
:1;

299 
uöt32_t
 
FPCA
:1;

300 
uöt32_t
 
_ª£rved0
:29;

301 } 
b
;

302 
uöt32_t
 
w
;

303 } 
	tCONTROL_Ty≥
;

318 
__IO
 
uöt32_t
 
ISER
[8];

319 
uöt32_t
 
RESERVED0
[24];

320 
__IO
 
uöt32_t
 
ICER
[8];

321 
uöt32_t
 
RSERVED1
[24];

322 
__IO
 
uöt32_t
 
ISPR
[8];

323 
uöt32_t
 
RESERVED2
[24];

324 
__IO
 
uöt32_t
 
ICPR
[8];

325 
uöt32_t
 
RESERVED3
[24];

326 
__IO
 
uöt32_t
 
IABR
[8];

327 
uöt32_t
 
RESERVED4
[56];

328 
__IO
 
uöt8_t
 
IP
[240];

329 
uöt32_t
 
RESERVED5
[644];

330 
__O
 
uöt32_t
 
STIR
;

331 } 
	tNVIC_Ty≥
;

334 
	#NVIC_STIR_INTID_Pos
 0

	)

335 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL << 
NVIC_STIR_INTID_Pos
Ë

	)

350 
__I
 
uöt32_t
 
CPUID
;

351 
__IO
 
uöt32_t
 
ICSR
;

352 
__IO
 
uöt32_t
 
VTOR
;

353 
__IO
 
uöt32_t
 
AIRCR
;

354 
__IO
 
uöt32_t
 
SCR
;

355 
__IO
 
uöt32_t
 
CCR
;

356 
__IO
 
uöt8_t
 
SHP
[12];

357 
__IO
 
uöt32_t
 
SHCSR
;

358 
__IO
 
uöt32_t
 
CFSR
;

359 
__IO
 
uöt32_t
 
HFSR
;

360 
__IO
 
uöt32_t
 
DFSR
;

361 
__IO
 
uöt32_t
 
MMFAR
;

362 
__IO
 
uöt32_t
 
BFAR
;

363 
__IO
 
uöt32_t
 
AFSR
;

364 
__I
 
uöt32_t
 
PFR
[2];

365 
__I
 
uöt32_t
 
DFR
;

366 
__I
 
uöt32_t
 
ADR
;

367 
__I
 
uöt32_t
 
MMFR
[4];

368 
__I
 
uöt32_t
 
ISAR
[5];

369 
uöt32_t
 
RESERVED0
[5];

370 
__IO
 
uöt32_t
 
CPACR
;

371 } 
	tSCB_Ty≥
;

374 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

375 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

377 
	#SCB_CPUID_VARIANT_Pos
 20

	)

378 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

380 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

381 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

383 
	#SCB_CPUID_PARTNO_Pos
 4

	)

384 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

386 
	#SCB_CPUID_REVISION_Pos
 0

	)

387 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

390 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

391 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

393 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

394 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

396 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

397 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

399 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

400 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

402 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

403 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

405 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

406 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

408 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

409 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

411 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

412 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

414 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

415 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

417 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

418 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

421 #i‡(
__CM3_REV
 < 0x0201)

422 
	#SCB_VTOR_TBLBASE_Pos
 29

	)

423 
	#SCB_VTOR_TBLBASE_Msk
 (1UL << 
SCB_VTOR_TBLBASE_Pos
Ë

	)

425 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

426 
	#SCB_VTOR_TBLOFF_Msk
 (0x3FFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

428 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

429 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

433 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

434 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

436 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

437 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

439 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

440 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

442 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

443 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

445 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

446 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

448 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

449 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

451 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

452 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL << 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

455 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

456 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

458 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

459 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

461 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

462 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

465 
	#SCB_CCR_STKALIGN_Pos
 9

	)

466 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

468 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

469 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

471 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

472 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

474 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

475 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

477 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

478 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

480 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

481 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL << 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

484 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

485 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

487 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

488 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

490 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

491 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

493 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

494 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

496 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

497 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

499 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

500 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

502 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

503 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

505 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

506 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

508 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

509 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

511 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

512 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

514 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

515 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

517 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

518 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

520 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

521 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

523 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

524 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

527 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

528 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

530 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

531 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

533 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

534 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

537 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

538 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

540 
	#SCB_HFSR_FORCED_Pos
 30

	)

541 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

543 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

544 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

547 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

548 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

550 
	#SCB_DFSR_VCATCH_Pos
 3

	)

551 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

553 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

554 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

556 
	#SCB_DFSR_BKPT_Pos
 1

	)

557 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

559 
	#SCB_DFSR_HALTED_Pos
 0

	)

560 
	#SCB_DFSR_HALTED_Msk
 (1UL << 
SCB_DFSR_HALTED_Pos
Ë

	)

575 
uöt32_t
 
RESERVED0
[1];

576 
__I
 
uöt32_t
 
ICTR
;

577 #i‡((
deföed
 
__CM3_REV
) && (__CM3_REV >= 0x200))

578 
__IO
 
uöt32_t
 
ACTLR
;

580 
uöt32_t
 
RESERVED1
[1];

582 } 
	tSCnSCB_Ty≥
;

585 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0

	)

586 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL << 
SCnSCB_ICTR_INTLINESNUM_Pos
Ë

	)

590 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2

	)

591 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

593 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1

	)

594 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
Ë

	)

596 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0

	)

597 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL << 
SCnSCB_ACTLR_DISMCYCINT_Pos
Ë

	)

612 
__IO
 
uöt32_t
 
CTRL
;

613 
__IO
 
uöt32_t
 
LOAD
;

614 
__IO
 
uöt32_t
 
VAL
;

615 
__I
 
uöt32_t
 
CALIB
;

616 } 
	tSysTick_Ty≥
;

619 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

620 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

622 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

623 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

625 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

626 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

628 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

629 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

632 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

633 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

636 
	#SysTick_VAL_CURRENT_Pos
 0

	)

637 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

640 
	#SysTick_CALIB_NOREF_Pos
 31

	)

641 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

643 
	#SysTick_CALIB_SKEW_Pos
 30

	)

644 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

646 
	#SysTick_CALIB_TENMS_Pos
 0

	)

647 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_CALIB_TENMS_Pos
Ë

	)

662 
__O
 union

664 
__O
 
uöt8_t
 
u8
;

665 
__O
 
uöt16_t
 
u16
;

666 
__O
 
uöt32_t
 
u32
;

667 } 
PORT
 [32];

668 
uöt32_t
 
RESERVED0
[864];

669 
__IO
 
uöt32_t
 
TER
;

670 
uöt32_t
 
RESERVED1
[15];

671 
__IO
 
uöt32_t
 
TPR
;

672 
uöt32_t
 
RESERVED2
[15];

673 
__IO
 
uöt32_t
 
TCR
;

674 
uöt32_t
 
RESERVED3
[29];

675 
__O
 
uöt32_t
 
IWR
;

676 
__I
 
uöt32_t
 
IRR
;

677 
__IO
 
uöt32_t
 
IMCR
;

678 
uöt32_t
 
RESERVED4
[43];

679 
__O
 
uöt32_t
 
LAR
;

680 
__I
 
uöt32_t
 
LSR
;

681 
uöt32_t
 
RESERVED5
[6];

682 
__I
 
uöt32_t
 
PID4
;

683 
__I
 
uöt32_t
 
PID5
;

684 
__I
 
uöt32_t
 
PID6
;

685 
__I
 
uöt32_t
 
PID7
;

686 
__I
 
uöt32_t
 
PID0
;

687 
__I
 
uöt32_t
 
PID1
;

688 
__I
 
uöt32_t
 
PID2
;

689 
__I
 
uöt32_t
 
PID3
;

690 
__I
 
uöt32_t
 
CID0
;

691 
__I
 
uöt32_t
 
CID1
;

692 
__I
 
uöt32_t
 
CID2
;

693 
__I
 
uöt32_t
 
CID3
;

694 } 
	tITM_Ty≥
;

697 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

698 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL << 
ITM_TPR_PRIVMASK_Pos
Ë

	)

701 
	#ITM_TCR_BUSY_Pos
 23

	)

702 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

704 
	#ITM_TCR_Tø˚BusID_Pos
 16

	)

705 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

707 
	#ITM_TCR_GTSFREQ_Pos
 10

	)

708 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

710 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

711 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

713 
	#ITM_TCR_SWOENA_Pos
 4

	)

714 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

716 
	#ITM_TCR_DWTENA_Pos
 3

	)

717 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

719 
	#ITM_TCR_SYNCENA_Pos
 2

	)

720 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

722 
	#ITM_TCR_TSENA_Pos
 1

	)

723 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

725 
	#ITM_TCR_ITMENA_Pos
 0

	)

726 
	#ITM_TCR_ITMENA_Msk
 (1UL << 
ITM_TCR_ITMENA_Pos
Ë

	)

729 
	#ITM_IWR_ATVALIDM_Pos
 0

	)

730 
	#ITM_IWR_ATVALIDM_Msk
 (1UL << 
ITM_IWR_ATVALIDM_Pos
Ë

	)

733 
	#ITM_IRR_ATREADYM_Pos
 0

	)

734 
	#ITM_IRR_ATREADYM_Msk
 (1UL << 
ITM_IRR_ATREADYM_Pos
Ë

	)

737 
	#ITM_IMCR_INTEGRATION_Pos
 0

	)

738 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL << 
ITM_IMCR_INTEGRATION_Pos
Ë

	)

741 
	#ITM_LSR_ByãAcc_Pos
 2

	)

742 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

744 
	#ITM_LSR_Ac˚ss_Pos
 1

	)

745 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

747 
	#ITM_LSR_Pª£¡_Pos
 0

	)

748 
	#ITM_LSR_Pª£¡_Msk
 (1UL << 
ITM_LSR_Pª£¡_Pos
Ë

	)

763 
__IO
 
uöt32_t
 
CTRL
;

764 
__IO
 
uöt32_t
 
CYCCNT
;

765 
__IO
 
uöt32_t
 
CPICNT
;

766 
__IO
 
uöt32_t
 
EXCCNT
;

767 
__IO
 
uöt32_t
 
SLEEPCNT
;

768 
__IO
 
uöt32_t
 
LSUCNT
;

769 
__IO
 
uöt32_t
 
FOLDCNT
;

770 
__I
 
uöt32_t
 
PCSR
;

771 
__IO
 
uöt32_t
 
COMP0
;

772 
__IO
 
uöt32_t
 
MASK0
;

773 
__IO
 
uöt32_t
 
FUNCTION0
;

774 
uöt32_t
 
RESERVED0
[1];

775 
__IO
 
uöt32_t
 
COMP1
;

776 
__IO
 
uöt32_t
 
MASK1
;

777 
__IO
 
uöt32_t
 
FUNCTION1
;

778 
uöt32_t
 
RESERVED1
[1];

779 
__IO
 
uöt32_t
 
COMP2
;

780 
__IO
 
uöt32_t
 
MASK2
;

781 
__IO
 
uöt32_t
 
FUNCTION2
;

782 
uöt32_t
 
RESERVED2
[1];

783 
__IO
 
uöt32_t
 
COMP3
;

784 
__IO
 
uöt32_t
 
MASK3
;

785 
__IO
 
uöt32_t
 
FUNCTION3
;

786 } 
	tDWT_Ty≥
;

789 
	#DWT_CTRL_NUMCOMP_Pos
 28

	)

790 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

792 
	#DWT_CTRL_NOTRCPKT_Pos
 27

	)

793 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

795 
	#DWT_CTRL_NOEXTTRIG_Pos
 26

	)

796 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

798 
	#DWT_CTRL_NOCYCCNT_Pos
 25

	)

799 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

801 
	#DWT_CTRL_NOPRFCNT_Pos
 24

	)

802 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

804 
	#DWT_CTRL_CYCEVTENA_Pos
 22

	)

805 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

807 
	#DWT_CTRL_FOLDEVTENA_Pos
 21

	)

808 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

810 
	#DWT_CTRL_LSUEVTENA_Pos
 20

	)

811 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

813 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19

	)

814 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

816 
	#DWT_CTRL_EXCEVTENA_Pos
 18

	)

817 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

819 
	#DWT_CTRL_CPIEVTENA_Pos
 17

	)

820 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

822 
	#DWT_CTRL_EXCTRCENA_Pos
 16

	)

823 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

825 
	#DWT_CTRL_PCSAMPLENA_Pos
 12

	)

826 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

828 
	#DWT_CTRL_SYNCTAP_Pos
 10

	)

829 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

831 
	#DWT_CTRL_CYCTAP_Pos
 9

	)

832 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

834 
	#DWT_CTRL_POSTINIT_Pos
 5

	)

835 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

837 
	#DWT_CTRL_POSTPRESET_Pos
 1

	)

838 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

840 
	#DWT_CTRL_CYCCNTENA_Pos
 0

	)

841 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCCNTENA_Pos
Ë

	)

844 
	#DWT_CPICNT_CPICNT_Pos
 0

	)

845 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL << 
DWT_CPICNT_CPICNT_Pos
Ë

	)

848 
	#DWT_EXCCNT_EXCCNT_Pos
 0

	)

849 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL << 
DWT_EXCCNT_EXCCNT_Pos
Ë

	)

852 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0

	)

853 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL << 
DWT_SLEEPCNT_SLEEPCNT_Pos
Ë

	)

856 
	#DWT_LSUCNT_LSUCNT_Pos
 0

	)

857 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL << 
DWT_LSUCNT_LSUCNT_Pos
Ë

	)

860 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0

	)

861 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL << 
DWT_FOLDCNT_FOLDCNT_Pos
Ë

	)

864 
	#DWT_MASK_MASK_Pos
 0

	)

865 
	#DWT_MASK_MASK_Msk
 (0x1FUL << 
DWT_MASK_MASK_Pos
Ë

	)

868 
	#DWT_FUNCTION_MATCHED_Pos
 24

	)

869 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

871 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16

	)

872 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

874 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12

	)

875 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

877 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10

	)

878 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

880 
	#DWT_FUNCTION_LNK1ENA_Pos
 9

	)

881 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

883 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8

	)

884 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

886 
	#DWT_FUNCTION_CYCMATCH_Pos
 7

	)

887 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

889 
	#DWT_FUNCTION_EMITRANGE_Pos
 5

	)

890 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

892 
	#DWT_FUNCTION_FUNCTION_Pos
 0

	)

893 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL << 
DWT_FUNCTION_FUNCTION_Pos
Ë

	)

908 
__IO
 
uöt32_t
 
SSPSR
;

909 
__IO
 
uöt32_t
 
CSPSR
;

910 
uöt32_t
 
RESERVED0
[2];

911 
__IO
 
uöt32_t
 
ACPR
;

912 
uöt32_t
 
RESERVED1
[55];

913 
__IO
 
uöt32_t
 
SPPR
;

914 
uöt32_t
 
RESERVED2
[131];

915 
__I
 
uöt32_t
 
FFSR
;

916 
__IO
 
uöt32_t
 
FFCR
;

917 
__I
 
uöt32_t
 
FSCR
;

918 
uöt32_t
 
RESERVED3
[759];

919 
__I
 
uöt32_t
 
TRIGGER
;

920 
__I
 
uöt32_t
 
FIFO0
;

921 
__I
 
uöt32_t
 
ITATBCTR2
;

922 
uöt32_t
 
RESERVED4
[1];

923 
__I
 
uöt32_t
 
ITATBCTR0
;

924 
__I
 
uöt32_t
 
FIFO1
;

925 
__IO
 
uöt32_t
 
ITCTRL
;

926 
uöt32_t
 
RESERVED5
[39];

927 
__IO
 
uöt32_t
 
CLAIMSET
;

928 
__IO
 
uöt32_t
 
CLAIMCLR
;

929 
uöt32_t
 
RESERVED7
[8];

930 
__I
 
uöt32_t
 
DEVID
;

931 
__I
 
uöt32_t
 
DEVTYPE
;

932 } 
	tTPI_Ty≥
;

935 
	#TPI_ACPR_PRESCALER_Pos
 0

	)

936 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL << 
TPI_ACPR_PRESCALER_Pos
Ë

	)

939 
	#TPI_SPPR_TXMODE_Pos
 0

	)

940 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL << 
TPI_SPPR_TXMODE_Pos
Ë

	)

943 
	#TPI_FFSR_FtN⁄St›_Pos
 3

	)

944 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

946 
	#TPI_FFSR_TCPª£¡_Pos
 2

	)

947 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

949 
	#TPI_FFSR_FtSt›≥d_Pos
 1

	)

950 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

952 
	#TPI_FFSR_FlInProg_Pos
 0

	)

953 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL << 
TPI_FFSR_FlInProg_Pos
Ë

	)

956 
	#TPI_FFCR_TrigIn_Pos
 8

	)

957 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

959 
	#TPI_FFCR_EnFC⁄t_Pos
 1

	)

960 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

963 
	#TPI_TRIGGER_TRIGGER_Pos
 0

	)

964 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL << 
TPI_TRIGGER_TRIGGER_Pos
Ë

	)

967 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29

	)

968 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

970 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27

	)

971 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

973 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26

	)

974 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

976 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24

	)

977 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

979 
	#TPI_FIFO0_ETM2_Pos
 16

	)

980 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

982 
	#TPI_FIFO0_ETM1_Pos
 8

	)

983 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

985 
	#TPI_FIFO0_ETM0_Pos
 0

	)

986 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL << 
TPI_FIFO0_ETM0_Pos
Ë

	)

989 
	#TPI_ITATBCTR2_ATREADY_Pos
 0

	)

990 
	#TPI_ITATBCTR2_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR2_ATREADY_Pos
Ë

	)

993 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29

	)

994 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

996 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27

	)

997 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

999 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26

	)

1000 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

1002 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24

	)

1003 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

1005 
	#TPI_FIFO1_ITM2_Pos
 16

	)

1006 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

1008 
	#TPI_FIFO1_ITM1_Pos
 8

	)

1009 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

1011 
	#TPI_FIFO1_ITM0_Pos
 0

	)

1012 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL << 
TPI_FIFO1_ITM0_Pos
Ë

	)

1015 
	#TPI_ITATBCTR0_ATREADY_Pos
 0

	)

1016 
	#TPI_ITATBCTR0_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR0_ATREADY_Pos
Ë

	)

1019 
	#TPI_ITCTRL_Mode_Pos
 0

	)

1020 
	#TPI_ITCTRL_Mode_Msk
 (0x1UL << 
TPI_ITCTRL_Mode_Pos
Ë

	)

1023 
	#TPI_DEVID_NRZVALID_Pos
 11

	)

1024 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1026 
	#TPI_DEVID_MANCVALID_Pos
 10

	)

1027 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1029 
	#TPI_DEVID_PTINVALID_Pos
 9

	)

1030 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1032 
	#TPI_DEVID_MöBufSz_Pos
 6

	)

1033 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

1035 
	#TPI_DEVID_AsynClkIn_Pos
 5

	)

1036 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

1038 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0

	)

1039 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL << 
TPI_DEVID_NrTø˚I≈ut_Pos
Ë

	)

1042 
	#TPI_DEVTYPE_SubTy≥_Pos
 0

	)

1043 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL << 
TPI_DEVTYPE_SubTy≥_Pos
Ë

	)

1045 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 4

	)

1046 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1051 #i‡(
__MPU_PRESENT
 == 1)

1062 
__I
 
uöt32_t
 
TYPE
;

1063 
__IO
 
uöt32_t
 
CTRL
;

1064 
__IO
 
uöt32_t
 
RNR
;

1065 
__IO
 
uöt32_t
 
RBAR
;

1066 
__IO
 
uöt32_t
 
RASR
;

1067 
__IO
 
uöt32_t
 
RBAR_A1
;

1068 
__IO
 
uöt32_t
 
RASR_A1
;

1069 
__IO
 
uöt32_t
 
RBAR_A2
;

1070 
__IO
 
uöt32_t
 
RASR_A2
;

1071 
__IO
 
uöt32_t
 
RBAR_A3
;

1072 
__IO
 
uöt32_t
 
RASR_A3
;

1073 } 
	tMPU_Ty≥
;

1076 
	#MPU_TYPE_IREGION_Pos
 16

	)

1077 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1079 
	#MPU_TYPE_DREGION_Pos
 8

	)

1080 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1082 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

1083 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

1086 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

1087 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1089 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

1090 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1092 
	#MPU_CTRL_ENABLE_Pos
 0

	)

1093 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

1096 
	#MPU_RNR_REGION_Pos
 0

	)

1097 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

1100 
	#MPU_RBAR_ADDR_Pos
 5

	)

1101 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1103 
	#MPU_RBAR_VALID_Pos
 4

	)

1104 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1106 
	#MPU_RBAR_REGION_Pos
 0

	)

1107 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

1110 
	#MPU_RASR_ATTRS_Pos
 16

	)

1111 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1113 
	#MPU_RASR_XN_Pos
 28

	)

1114 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

1116 
	#MPU_RASR_AP_Pos
 24

	)

1117 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

1119 
	#MPU_RASR_TEX_Pos
 19

	)

1120 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

1122 
	#MPU_RASR_S_Pos
 18

	)

1123 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

1125 
	#MPU_RASR_C_Pos
 17

	)

1126 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

1128 
	#MPU_RASR_B_Pos
 16

	)

1129 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

1131 
	#MPU_RASR_SRD_Pos
 8

	)

1132 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1134 
	#MPU_RASR_SIZE_Pos
 1

	)

1135 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1137 
	#MPU_RASR_ENABLE_Pos
 0

	)

1138 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

1154 
__IO
 
uöt32_t
 
DHCSR
;

1155 
__O
 
uöt32_t
 
DCRSR
;

1156 
__IO
 
uöt32_t
 
DCRDR
;

1157 
__IO
 
uöt32_t
 
DEMCR
;

1158 } 
	tC‹eDebug_Ty≥
;

1161 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

1162 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1164 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

1165 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1167 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

1168 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1170 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

1171 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1173 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

1174 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1176 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

1177 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1179 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

1180 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1182 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

1183 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1185 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

1186 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1188 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

1189 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1191 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

1192 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1194 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

1195 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL << 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

1198 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

1199 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1201 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

1202 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL << 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

1205 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

1206 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1208 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

1209 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1211 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

1212 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1214 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

1215 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1217 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

1218 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1220 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

1221 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1223 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

1224 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1226 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

1227 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1229 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

1230 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1232 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

1233 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1235 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

1236 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1238 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

1239 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1241 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

1242 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

1254 
	#SCS_BASE
 (0xE000E000ULË

	)

1255 
	#ITM_BASE
 (0xE0000000ULË

	)

1256 
	#DWT_BASE
 (0xE0001000ULË

	)

1257 
	#TPI_BASE
 (0xE0040000ULË

	)

1258 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1259 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1260 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1261 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1263 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1264 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1265 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1266 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1267 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1268 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1269 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1270 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1272 #i‡(
__MPU_PRESENT
 == 1)

1273 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1274 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1311 
__STATIC_INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1313 
uöt32_t
 
ªg_vÆue
;

1314 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07);

1316 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1317 
ªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1318 
ªg_vÆue
 = (reg_value |

1319 ((
uöt32_t
)0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1320 (
Pri‹ôyGroupTmp
 << 8));

1321 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1331 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1333  ((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
);

1343 
__STATIC_INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1345 
NVIC
->
ISER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1355 
__STATIC_INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1357 
NVIC
->
ICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1371 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1373 ((
uöt32_t
Ë((
NVIC
->
ISPR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1383 
__STATIC_INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1385 
NVIC
->
ISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1395 
__STATIC_INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1397 
NVIC
->
ICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1410 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1412 ((
uöt32_t
)((
NVIC
->
IABR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1425 
__STATIC_INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1427 if(
IRQn
 < 0) {

1428 
SCB
->
SHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1430 
NVIC
->
IP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1445 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1448 if(
IRQn
 < 0) {

1449 ((
uöt32_t
)(
SCB
->
SHP
[((uöt32_t)(
IRQn
Ë& 0xF)-4] >> (8 - 
__NVIC_PRIO_BITS
))); }

1451 ((
uöt32_t
)(
NVIC
->
IP
[(uöt32_t)(
IRQn
)] >> (8 - 
__NVIC_PRIO_BITS
))); }

1467 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1469 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1470 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1471 
uöt32_t
 
SubPri‹ôyBôs
;

1473 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1474 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1477 ((
Pªem±Pri‹ôy
 & ((1 << (
Pªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
SubPri‹ôyBôs
) |

1478 ((
SubPri‹ôy
 & ((1 << (
SubPri‹ôyBôs
 )) - 1)))

1495 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1497 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1498 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1499 
uöt32_t
 
SubPri‹ôyBôs
;

1501 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1502 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1504 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1505 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1513 
__STATIC_INLINE
 
NVIC_Sy°emRe£t
()

1515 
__DSB
();

1517 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1518 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1519 
SCB_AIRCR_SYSRESETREQ_Msk
);

1520 
__DSB
();

1535 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

1552 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1554 i‡((
ticks
 - 1Ë> 
SysTick_LOAD_RELOAD_Msk
)  (1);

1556 
SysTick
->
LOAD
 = 
ticks
 - 1;

1557 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1558 
SysTick
->
VAL
 = 0;

1559 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1560 
SysTick_CTRL_TICKINT_Msk
 |

1561 
SysTick_CTRL_ENABLE_Msk
;

1578 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1579 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1592 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1594 i‡((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) &&

1595 (
	gITM
->
	gTER
 & (1UL << 0) ) )

1597 
	gITM
->
	gPORT
[0].
	gu32
 == 0);

1598 
	gITM
->
	gPORT
[0].
	gu8
 = (
uöt8_t
Ë
ch
;

1600  (
	gch
);

1611 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 () {

1612 
öt32_t
 
	gch
 = -1;

1614 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1615 
ch
 = 
ITM_RxBuf„r
;

1616 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1619  (
	gch
);

1630 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 () {

1632 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1644 #ifde‡
__˝lu•lus


	@CMSIS/Include/core_cm4.h

38 #i‡
deföed
 ( 
__ICCARM__
 )

39 #¥agm®
sy°em_ö˛ude


42 #i‚de‡
__CORE_CM4_H_GENERIC


43 
	#__CORE_CM4_H_GENERIC


	)

45 #ifde‡
__˝lu•lus


71 
	#__CM4_CMSIS_VERSION_MAIN
 (0x04Ë

	)

72 
	#__CM4_CMSIS_VERSION_SUB
 (0x00Ë

	)

73 
	#__CM4_CMSIS_VERSION
 ((
__CM4_CMSIS_VERSION_MAIN
 << 16Ë| \

	)

74 
__CM4_CMSIS_VERSION_SUB
 )

76 
	#__CORTEX_M
 (0x04Ë

	)

79 #i‡ 
deföed
 ( 
__CC_ARM
 )

80 
	#__ASM
 
__asm


	)

81 
	#__INLINE
 
__ölöe


	)

82 
	#__STATIC_INLINE
 
__ölöe


	)

84 #ñi‡
deföed
 ( 
__GNUC__
 )

85 
	#__ASM
 
__asm


	)

86 
	#__INLINE
 
ölöe


	)

87 
	#__STATIC_INLINE
 
ölöe


	)

89 #ñi‡
deföed
 ( 
__ICCARM__
 )

90 
	#__ASM
 
__asm


	)

91 
	#__INLINE
 
ölöe


	)

92 
	#__STATIC_INLINE
 
ölöe


	)

94 #ñi‡
deföed
 ( 
__TMS470__
 )

95 
	#__ASM
 
__asm


	)

96 
	#__STATIC_INLINE
 
ölöe


	)

98 #ñi‡
deföed
 ( 
__TASKING__
 )

99 
	#__ASM
 
__asm


	)

100 
	#__INLINE
 
ölöe


	)

101 
	#__STATIC_INLINE
 
ölöe


	)

103 #ñi‡
deföed
 ( 
__CSMC__
 )

104 
	#__∑cked


	)

105 
	#__ASM
 
_asm


	)

106 
	#__INLINE
 
ölöe


	)

107 
	#__STATIC_INLINE
 
ölöe


	)

114 #i‡
deföed
 ( 
__CC_ARM
 )

115 #i‡
deföed
 
__TARGET_FPU_VFP


116 #i‡(
__FPU_PRESENT
 == 1)

117 
	#__FPU_USED
 1

	)

120 
	#__FPU_USED
 0

	)

123 
	#__FPU_USED
 0

	)

126 #ñi‡
deföed
 ( 
__GNUC__
 )

127 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

128 #i‡(
__FPU_PRESENT
 == 1)

129 
	#__FPU_USED
 1

	)

132 
	#__FPU_USED
 0

	)

135 
	#__FPU_USED
 0

	)

138 #ñi‡
deföed
 ( 
__ICCARM__
 )

139 #i‡
deföed
 
__ARMVFP__


140 #i‡(
__FPU_PRESENT
 == 1)

141 
	#__FPU_USED
 1

	)

144 
	#__FPU_USED
 0

	)

147 
	#__FPU_USED
 0

	)

150 #ñi‡
deföed
 ( 
__TMS470__
 )

151 #i‡
deföed
 
__TI_VFP_SUPPORT__


152 #i‡(
__FPU_PRESENT
 == 1)

153 
	#__FPU_USED
 1

	)

156 
	#__FPU_USED
 0

	)

159 
	#__FPU_USED
 0

	)

162 #ñi‡
deföed
 ( 
__TASKING__
 )

163 #i‡
deföed
 
__FPU_VFP__


164 #i‡(
__FPU_PRESENT
 == 1)

165 
	#__FPU_USED
 1

	)

168 
	#__FPU_USED
 0

	)

171 
	#__FPU_USED
 0

	)

174 #ñi‡
deföed
 ( 
__CSMC__
 )

175 #i‡–
__CSMC__
 & 0x400)

176 #i‡(
__FPU_PRESENT
 == 1)

177 
	#__FPU_USED
 1

	)

180 
	#__FPU_USED
 0

	)

183 
	#__FPU_USED
 0

	)

187 
	~<°döt.h
>

188 
	~<c‹e_cmIn°r.h
>

189 
	~<c‹e_cmFunc.h
>

190 
	~<c‹e_cmSimd.h
>

192 #ifde‡
__˝lu•lus


198 #i‚de‡
__CMSIS_GENERIC


200 #i‚de‡
__CORE_CM4_H_DEPENDANT


201 
	#__CORE_CM4_H_DEPENDANT


	)

203 #ifde‡
__˝lu•lus


208 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


209 #i‚de‡
__CM4_REV


210 
	#__CM4_REV
 0x0000

	)

214 #i‚de‡
__FPU_PRESENT


215 
	#__FPU_PRESENT
 0

	)

219 #i‚de‡
__MPU_PRESENT


220 
	#__MPU_PRESENT
 0

	)

224 #i‚de‡
__NVIC_PRIO_BITS


225 
	#__NVIC_PRIO_BITS
 4

	)

229 #i‚de‡
__Víd‹_SysTickC⁄fig


230 
	#__Víd‹_SysTickC⁄fig
 0

	)

243 #ifde‡
__˝lu•lus


244 
	#__I
 vﬁ©ûê

	)

246 
	#__I
 vﬁ©ûêc⁄°

	)

248 
	#__O
 vﬁ©ûê

	)

249 
	#__IO
 vﬁ©ûê

	)

282 #i‡(
__CORTEX_M
 != 0x04)

283 
uöt32_t
 
_ª£rved0
:27;

285 
uöt32_t
 
_ª£rved0
:16;

286 
uöt32_t
 
GE
:4;

287 
uöt32_t
 
_ª£rved1
:7;

289 
uöt32_t
 
Q
:1;

290 
uöt32_t
 
V
:1;

291 
uöt32_t
 
C
:1;

292 
uöt32_t
 
Z
:1;

293 
uöt32_t
 
N
:1;

294 } 
b
;

295 
uöt32_t
 
w
;

296 } 
	tAPSR_Ty≥
;

305 
uöt32_t
 
ISR
:9;

306 
uöt32_t
 
_ª£rved0
:23;

307 } 
b
;

308 
uöt32_t
 
w
;

309 } 
	tIPSR_Ty≥
;

318 
uöt32_t
 
ISR
:9;

319 #i‡(
__CORTEX_M
 != 0x04)

320 
uöt32_t
 
_ª£rved0
:15;

322 
uöt32_t
 
_ª£rved0
:7;

323 
uöt32_t
 
GE
:4;

324 
uöt32_t
 
_ª£rved1
:4;

326 
uöt32_t
 
T
:1;

327 
uöt32_t
 
IT
:2;

328 
uöt32_t
 
Q
:1;

329 
uöt32_t
 
V
:1;

330 
uöt32_t
 
C
:1;

331 
uöt32_t
 
Z
:1;

332 
uöt32_t
 
N
:1;

333 } 
b
;

334 
uöt32_t
 
w
;

335 } 
	txPSR_Ty≥
;

344 
uöt32_t
 
nPRIV
:1;

345 
uöt32_t
 
SPSEL
:1;

346 
uöt32_t
 
FPCA
:1;

347 
uöt32_t
 
_ª£rved0
:29;

348 } 
b
;

349 
uöt32_t
 
w
;

350 } 
	tCONTROL_Ty≥
;

365 
__IO
 
uöt32_t
 
ISER
[8];

366 
uöt32_t
 
RESERVED0
[24];

367 
__IO
 
uöt32_t
 
ICER
[8];

368 
uöt32_t
 
RSERVED1
[24];

369 
__IO
 
uöt32_t
 
ISPR
[8];

370 
uöt32_t
 
RESERVED2
[24];

371 
__IO
 
uöt32_t
 
ICPR
[8];

372 
uöt32_t
 
RESERVED3
[24];

373 
__IO
 
uöt32_t
 
IABR
[8];

374 
uöt32_t
 
RESERVED4
[56];

375 
__IO
 
uöt8_t
 
IP
[240];

376 
uöt32_t
 
RESERVED5
[644];

377 
__O
 
uöt32_t
 
STIR
;

378 } 
	tNVIC_Ty≥
;

381 
	#NVIC_STIR_INTID_Pos
 0

	)

382 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL << 
NVIC_STIR_INTID_Pos
Ë

	)

397 
__I
 
uöt32_t
 
CPUID
;

398 
__IO
 
uöt32_t
 
ICSR
;

399 
__IO
 
uöt32_t
 
VTOR
;

400 
__IO
 
uöt32_t
 
AIRCR
;

401 
__IO
 
uöt32_t
 
SCR
;

402 
__IO
 
uöt32_t
 
CCR
;

403 
__IO
 
uöt8_t
 
SHP
[12];

404 
__IO
 
uöt32_t
 
SHCSR
;

405 
__IO
 
uöt32_t
 
CFSR
;

406 
__IO
 
uöt32_t
 
HFSR
;

407 
__IO
 
uöt32_t
 
DFSR
;

408 
__IO
 
uöt32_t
 
MMFAR
;

409 
__IO
 
uöt32_t
 
BFAR
;

410 
__IO
 
uöt32_t
 
AFSR
;

411 
__I
 
uöt32_t
 
PFR
[2];

412 
__I
 
uöt32_t
 
DFR
;

413 
__I
 
uöt32_t
 
ADR
;

414 
__I
 
uöt32_t
 
MMFR
[4];

415 
__I
 
uöt32_t
 
ISAR
[5];

416 
uöt32_t
 
RESERVED0
[5];

417 
__IO
 
uöt32_t
 
CPACR
;

418 } 
	tSCB_Ty≥
;

421 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

422 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

424 
	#SCB_CPUID_VARIANT_Pos
 20

	)

425 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

427 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

428 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

430 
	#SCB_CPUID_PARTNO_Pos
 4

	)

431 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

433 
	#SCB_CPUID_REVISION_Pos
 0

	)

434 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

437 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

438 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

440 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

441 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

443 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

444 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

446 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

447 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

449 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

450 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

452 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

453 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

455 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

456 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

458 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

459 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

461 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

462 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

464 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

465 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

468 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

469 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

472 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

473 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

475 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

476 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

478 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

479 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

481 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

482 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

484 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

485 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

487 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

488 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

490 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

491 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL << 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

494 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

495 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

497 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

498 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

500 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

501 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

504 
	#SCB_CCR_STKALIGN_Pos
 9

	)

505 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

507 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

508 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

510 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

511 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

513 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

514 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

516 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

517 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

519 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

520 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL << 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

523 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

524 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

526 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

527 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

529 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

530 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

532 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

533 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

535 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

536 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

538 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

539 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

541 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

542 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

544 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

545 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

547 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

548 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

550 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

551 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

553 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

554 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

556 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

557 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

559 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

560 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

562 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

563 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

566 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

567 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

569 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

570 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

572 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

573 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

576 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

577 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

579 
	#SCB_HFSR_FORCED_Pos
 30

	)

580 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

582 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

583 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

586 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

587 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

589 
	#SCB_DFSR_VCATCH_Pos
 3

	)

590 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

592 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

593 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

595 
	#SCB_DFSR_BKPT_Pos
 1

	)

596 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

598 
	#SCB_DFSR_HALTED_Pos
 0

	)

599 
	#SCB_DFSR_HALTED_Msk
 (1UL << 
SCB_DFSR_HALTED_Pos
Ë

	)

614 
uöt32_t
 
RESERVED0
[1];

615 
__I
 
uöt32_t
 
ICTR
;

616 
__IO
 
uöt32_t
 
ACTLR
;

617 } 
	tSCnSCB_Ty≥
;

620 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0

	)

621 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL << 
SCnSCB_ICTR_INTLINESNUM_Pos
Ë

	)

624 
	#SCnSCB_ACTLR_DISOOFP_Pos
 9

	)

625 
	#SCnSCB_ACTLR_DISOOFP_Msk
 (1UL << 
SCnSCB_ACTLR_DISOOFP_Pos
Ë

	)

627 
	#SCnSCB_ACTLR_DISFPCA_Pos
 8

	)

628 
	#SCnSCB_ACTLR_DISFPCA_Msk
 (1UL << 
SCnSCB_ACTLR_DISFPCA_Pos
Ë

	)

630 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2

	)

631 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

633 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1

	)

634 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
Ë

	)

636 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0

	)

637 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL << 
SCnSCB_ACTLR_DISMCYCINT_Pos
Ë

	)

652 
__IO
 
uöt32_t
 
CTRL
;

653 
__IO
 
uöt32_t
 
LOAD
;

654 
__IO
 
uöt32_t
 
VAL
;

655 
__I
 
uöt32_t
 
CALIB
;

656 } 
	tSysTick_Ty≥
;

659 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

660 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

662 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

663 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

665 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

666 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

668 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

669 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

672 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

673 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

676 
	#SysTick_VAL_CURRENT_Pos
 0

	)

677 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

680 
	#SysTick_CALIB_NOREF_Pos
 31

	)

681 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

683 
	#SysTick_CALIB_SKEW_Pos
 30

	)

684 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

686 
	#SysTick_CALIB_TENMS_Pos
 0

	)

687 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_CALIB_TENMS_Pos
Ë

	)

702 
__O
 union

704 
__O
 
uöt8_t
 
u8
;

705 
__O
 
uöt16_t
 
u16
;

706 
__O
 
uöt32_t
 
u32
;

707 } 
PORT
 [32];

708 
uöt32_t
 
RESERVED0
[864];

709 
__IO
 
uöt32_t
 
TER
;

710 
uöt32_t
 
RESERVED1
[15];

711 
__IO
 
uöt32_t
 
TPR
;

712 
uöt32_t
 
RESERVED2
[15];

713 
__IO
 
uöt32_t
 
TCR
;

714 
uöt32_t
 
RESERVED3
[29];

715 
__O
 
uöt32_t
 
IWR
;

716 
__I
 
uöt32_t
 
IRR
;

717 
__IO
 
uöt32_t
 
IMCR
;

718 
uöt32_t
 
RESERVED4
[43];

719 
__O
 
uöt32_t
 
LAR
;

720 
__I
 
uöt32_t
 
LSR
;

721 
uöt32_t
 
RESERVED5
[6];

722 
__I
 
uöt32_t
 
PID4
;

723 
__I
 
uöt32_t
 
PID5
;

724 
__I
 
uöt32_t
 
PID6
;

725 
__I
 
uöt32_t
 
PID7
;

726 
__I
 
uöt32_t
 
PID0
;

727 
__I
 
uöt32_t
 
PID1
;

728 
__I
 
uöt32_t
 
PID2
;

729 
__I
 
uöt32_t
 
PID3
;

730 
__I
 
uöt32_t
 
CID0
;

731 
__I
 
uöt32_t
 
CID1
;

732 
__I
 
uöt32_t
 
CID2
;

733 
__I
 
uöt32_t
 
CID3
;

734 } 
	tITM_Ty≥
;

737 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

738 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL << 
ITM_TPR_PRIVMASK_Pos
Ë

	)

741 
	#ITM_TCR_BUSY_Pos
 23

	)

742 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

744 
	#ITM_TCR_Tø˚BusID_Pos
 16

	)

745 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

747 
	#ITM_TCR_GTSFREQ_Pos
 10

	)

748 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

750 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

751 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

753 
	#ITM_TCR_SWOENA_Pos
 4

	)

754 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

756 
	#ITM_TCR_DWTENA_Pos
 3

	)

757 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

759 
	#ITM_TCR_SYNCENA_Pos
 2

	)

760 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

762 
	#ITM_TCR_TSENA_Pos
 1

	)

763 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

765 
	#ITM_TCR_ITMENA_Pos
 0

	)

766 
	#ITM_TCR_ITMENA_Msk
 (1UL << 
ITM_TCR_ITMENA_Pos
Ë

	)

769 
	#ITM_IWR_ATVALIDM_Pos
 0

	)

770 
	#ITM_IWR_ATVALIDM_Msk
 (1UL << 
ITM_IWR_ATVALIDM_Pos
Ë

	)

773 
	#ITM_IRR_ATREADYM_Pos
 0

	)

774 
	#ITM_IRR_ATREADYM_Msk
 (1UL << 
ITM_IRR_ATREADYM_Pos
Ë

	)

777 
	#ITM_IMCR_INTEGRATION_Pos
 0

	)

778 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL << 
ITM_IMCR_INTEGRATION_Pos
Ë

	)

781 
	#ITM_LSR_ByãAcc_Pos
 2

	)

782 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

784 
	#ITM_LSR_Ac˚ss_Pos
 1

	)

785 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

787 
	#ITM_LSR_Pª£¡_Pos
 0

	)

788 
	#ITM_LSR_Pª£¡_Msk
 (1UL << 
ITM_LSR_Pª£¡_Pos
Ë

	)

803 
__IO
 
uöt32_t
 
CTRL
;

804 
__IO
 
uöt32_t
 
CYCCNT
;

805 
__IO
 
uöt32_t
 
CPICNT
;

806 
__IO
 
uöt32_t
 
EXCCNT
;

807 
__IO
 
uöt32_t
 
SLEEPCNT
;

808 
__IO
 
uöt32_t
 
LSUCNT
;

809 
__IO
 
uöt32_t
 
FOLDCNT
;

810 
__I
 
uöt32_t
 
PCSR
;

811 
__IO
 
uöt32_t
 
COMP0
;

812 
__IO
 
uöt32_t
 
MASK0
;

813 
__IO
 
uöt32_t
 
FUNCTION0
;

814 
uöt32_t
 
RESERVED0
[1];

815 
__IO
 
uöt32_t
 
COMP1
;

816 
__IO
 
uöt32_t
 
MASK1
;

817 
__IO
 
uöt32_t
 
FUNCTION1
;

818 
uöt32_t
 
RESERVED1
[1];

819 
__IO
 
uöt32_t
 
COMP2
;

820 
__IO
 
uöt32_t
 
MASK2
;

821 
__IO
 
uöt32_t
 
FUNCTION2
;

822 
uöt32_t
 
RESERVED2
[1];

823 
__IO
 
uöt32_t
 
COMP3
;

824 
__IO
 
uöt32_t
 
MASK3
;

825 
__IO
 
uöt32_t
 
FUNCTION3
;

826 } 
	tDWT_Ty≥
;

829 
	#DWT_CTRL_NUMCOMP_Pos
 28

	)

830 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

832 
	#DWT_CTRL_NOTRCPKT_Pos
 27

	)

833 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

835 
	#DWT_CTRL_NOEXTTRIG_Pos
 26

	)

836 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

838 
	#DWT_CTRL_NOCYCCNT_Pos
 25

	)

839 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

841 
	#DWT_CTRL_NOPRFCNT_Pos
 24

	)

842 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

844 
	#DWT_CTRL_CYCEVTENA_Pos
 22

	)

845 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

847 
	#DWT_CTRL_FOLDEVTENA_Pos
 21

	)

848 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

850 
	#DWT_CTRL_LSUEVTENA_Pos
 20

	)

851 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

853 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19

	)

854 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

856 
	#DWT_CTRL_EXCEVTENA_Pos
 18

	)

857 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

859 
	#DWT_CTRL_CPIEVTENA_Pos
 17

	)

860 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

862 
	#DWT_CTRL_EXCTRCENA_Pos
 16

	)

863 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

865 
	#DWT_CTRL_PCSAMPLENA_Pos
 12

	)

866 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

868 
	#DWT_CTRL_SYNCTAP_Pos
 10

	)

869 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

871 
	#DWT_CTRL_CYCTAP_Pos
 9

	)

872 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

874 
	#DWT_CTRL_POSTINIT_Pos
 5

	)

875 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

877 
	#DWT_CTRL_POSTPRESET_Pos
 1

	)

878 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

880 
	#DWT_CTRL_CYCCNTENA_Pos
 0

	)

881 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCCNTENA_Pos
Ë

	)

884 
	#DWT_CPICNT_CPICNT_Pos
 0

	)

885 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL << 
DWT_CPICNT_CPICNT_Pos
Ë

	)

888 
	#DWT_EXCCNT_EXCCNT_Pos
 0

	)

889 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL << 
DWT_EXCCNT_EXCCNT_Pos
Ë

	)

892 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0

	)

893 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL << 
DWT_SLEEPCNT_SLEEPCNT_Pos
Ë

	)

896 
	#DWT_LSUCNT_LSUCNT_Pos
 0

	)

897 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL << 
DWT_LSUCNT_LSUCNT_Pos
Ë

	)

900 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0

	)

901 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL << 
DWT_FOLDCNT_FOLDCNT_Pos
Ë

	)

904 
	#DWT_MASK_MASK_Pos
 0

	)

905 
	#DWT_MASK_MASK_Msk
 (0x1FUL << 
DWT_MASK_MASK_Pos
Ë

	)

908 
	#DWT_FUNCTION_MATCHED_Pos
 24

	)

909 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

911 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16

	)

912 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

914 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12

	)

915 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

917 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10

	)

918 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

920 
	#DWT_FUNCTION_LNK1ENA_Pos
 9

	)

921 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

923 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8

	)

924 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

926 
	#DWT_FUNCTION_CYCMATCH_Pos
 7

	)

927 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

929 
	#DWT_FUNCTION_EMITRANGE_Pos
 5

	)

930 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

932 
	#DWT_FUNCTION_FUNCTION_Pos
 0

	)

933 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL << 
DWT_FUNCTION_FUNCTION_Pos
Ë

	)

948 
__IO
 
uöt32_t
 
SSPSR
;

949 
__IO
 
uöt32_t
 
CSPSR
;

950 
uöt32_t
 
RESERVED0
[2];

951 
__IO
 
uöt32_t
 
ACPR
;

952 
uöt32_t
 
RESERVED1
[55];

953 
__IO
 
uöt32_t
 
SPPR
;

954 
uöt32_t
 
RESERVED2
[131];

955 
__I
 
uöt32_t
 
FFSR
;

956 
__IO
 
uöt32_t
 
FFCR
;

957 
__I
 
uöt32_t
 
FSCR
;

958 
uöt32_t
 
RESERVED3
[759];

959 
__I
 
uöt32_t
 
TRIGGER
;

960 
__I
 
uöt32_t
 
FIFO0
;

961 
__I
 
uöt32_t
 
ITATBCTR2
;

962 
uöt32_t
 
RESERVED4
[1];

963 
__I
 
uöt32_t
 
ITATBCTR0
;

964 
__I
 
uöt32_t
 
FIFO1
;

965 
__IO
 
uöt32_t
 
ITCTRL
;

966 
uöt32_t
 
RESERVED5
[39];

967 
__IO
 
uöt32_t
 
CLAIMSET
;

968 
__IO
 
uöt32_t
 
CLAIMCLR
;

969 
uöt32_t
 
RESERVED7
[8];

970 
__I
 
uöt32_t
 
DEVID
;

971 
__I
 
uöt32_t
 
DEVTYPE
;

972 } 
	tTPI_Ty≥
;

975 
	#TPI_ACPR_PRESCALER_Pos
 0

	)

976 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL << 
TPI_ACPR_PRESCALER_Pos
Ë

	)

979 
	#TPI_SPPR_TXMODE_Pos
 0

	)

980 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL << 
TPI_SPPR_TXMODE_Pos
Ë

	)

983 
	#TPI_FFSR_FtN⁄St›_Pos
 3

	)

984 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

986 
	#TPI_FFSR_TCPª£¡_Pos
 2

	)

987 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

989 
	#TPI_FFSR_FtSt›≥d_Pos
 1

	)

990 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

992 
	#TPI_FFSR_FlInProg_Pos
 0

	)

993 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL << 
TPI_FFSR_FlInProg_Pos
Ë

	)

996 
	#TPI_FFCR_TrigIn_Pos
 8

	)

997 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

999 
	#TPI_FFCR_EnFC⁄t_Pos
 1

	)

1000 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

1003 
	#TPI_TRIGGER_TRIGGER_Pos
 0

	)

1004 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL << 
TPI_TRIGGER_TRIGGER_Pos
Ë

	)

1007 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29

	)

1008 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

1010 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27

	)

1011 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

1013 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26

	)

1014 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

1016 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24

	)

1017 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

1019 
	#TPI_FIFO0_ETM2_Pos
 16

	)

1020 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

1022 
	#TPI_FIFO0_ETM1_Pos
 8

	)

1023 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

1025 
	#TPI_FIFO0_ETM0_Pos
 0

	)

1026 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL << 
TPI_FIFO0_ETM0_Pos
Ë

	)

1029 
	#TPI_ITATBCTR2_ATREADY_Pos
 0

	)

1030 
	#TPI_ITATBCTR2_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR2_ATREADY_Pos
Ë

	)

1033 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29

	)

1034 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

1036 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27

	)

1037 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

1039 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26

	)

1040 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

1042 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24

	)

1043 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

1045 
	#TPI_FIFO1_ITM2_Pos
 16

	)

1046 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

1048 
	#TPI_FIFO1_ITM1_Pos
 8

	)

1049 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

1051 
	#TPI_FIFO1_ITM0_Pos
 0

	)

1052 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL << 
TPI_FIFO1_ITM0_Pos
Ë

	)

1055 
	#TPI_ITATBCTR0_ATREADY_Pos
 0

	)

1056 
	#TPI_ITATBCTR0_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR0_ATREADY_Pos
Ë

	)

1059 
	#TPI_ITCTRL_Mode_Pos
 0

	)

1060 
	#TPI_ITCTRL_Mode_Msk
 (0x1UL << 
TPI_ITCTRL_Mode_Pos
Ë

	)

1063 
	#TPI_DEVID_NRZVALID_Pos
 11

	)

1064 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1066 
	#TPI_DEVID_MANCVALID_Pos
 10

	)

1067 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1069 
	#TPI_DEVID_PTINVALID_Pos
 9

	)

1070 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1072 
	#TPI_DEVID_MöBufSz_Pos
 6

	)

1073 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

1075 
	#TPI_DEVID_AsynClkIn_Pos
 5

	)

1076 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

1078 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0

	)

1079 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL << 
TPI_DEVID_NrTø˚I≈ut_Pos
Ë

	)

1082 
	#TPI_DEVTYPE_SubTy≥_Pos
 0

	)

1083 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL << 
TPI_DEVTYPE_SubTy≥_Pos
Ë

	)

1085 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 4

	)

1086 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1091 #i‡(
__MPU_PRESENT
 == 1)

1102 
__I
 
uöt32_t
 
TYPE
;

1103 
__IO
 
uöt32_t
 
CTRL
;

1104 
__IO
 
uöt32_t
 
RNR
;

1105 
__IO
 
uöt32_t
 
RBAR
;

1106 
__IO
 
uöt32_t
 
RASR
;

1107 
__IO
 
uöt32_t
 
RBAR_A1
;

1108 
__IO
 
uöt32_t
 
RASR_A1
;

1109 
__IO
 
uöt32_t
 
RBAR_A2
;

1110 
__IO
 
uöt32_t
 
RASR_A2
;

1111 
__IO
 
uöt32_t
 
RBAR_A3
;

1112 
__IO
 
uöt32_t
 
RASR_A3
;

1113 } 
	tMPU_Ty≥
;

1116 
	#MPU_TYPE_IREGION_Pos
 16

	)

1117 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1119 
	#MPU_TYPE_DREGION_Pos
 8

	)

1120 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1122 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

1123 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

1126 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

1127 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1129 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

1130 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1132 
	#MPU_CTRL_ENABLE_Pos
 0

	)

1133 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

1136 
	#MPU_RNR_REGION_Pos
 0

	)

1137 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

1140 
	#MPU_RBAR_ADDR_Pos
 5

	)

1141 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1143 
	#MPU_RBAR_VALID_Pos
 4

	)

1144 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1146 
	#MPU_RBAR_REGION_Pos
 0

	)

1147 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

1150 
	#MPU_RASR_ATTRS_Pos
 16

	)

1151 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1153 
	#MPU_RASR_XN_Pos
 28

	)

1154 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

1156 
	#MPU_RASR_AP_Pos
 24

	)

1157 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

1159 
	#MPU_RASR_TEX_Pos
 19

	)

1160 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

1162 
	#MPU_RASR_S_Pos
 18

	)

1163 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

1165 
	#MPU_RASR_C_Pos
 17

	)

1166 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

1168 
	#MPU_RASR_B_Pos
 16

	)

1169 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

1171 
	#MPU_RASR_SRD_Pos
 8

	)

1172 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1174 
	#MPU_RASR_SIZE_Pos
 1

	)

1175 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1177 
	#MPU_RASR_ENABLE_Pos
 0

	)

1178 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

1184 #i‡(
__FPU_PRESENT
 == 1)

1195 
uöt32_t
 
RESERVED0
[1];

1196 
__IO
 
uöt32_t
 
FPCCR
;

1197 
__IO
 
uöt32_t
 
FPCAR
;

1198 
__IO
 
uöt32_t
 
FPDSCR
;

1199 
__I
 
uöt32_t
 
MVFR0
;

1200 
__I
 
uöt32_t
 
MVFR1
;

1201 } 
	tFPU_Ty≥
;

1204 
	#FPU_FPCCR_ASPEN_Pos
 31

	)

1205 
	#FPU_FPCCR_ASPEN_Msk
 (1UL << 
FPU_FPCCR_ASPEN_Pos
Ë

	)

1207 
	#FPU_FPCCR_LSPEN_Pos
 30

	)

1208 
	#FPU_FPCCR_LSPEN_Msk
 (1UL << 
FPU_FPCCR_LSPEN_Pos
Ë

	)

1210 
	#FPU_FPCCR_MONRDY_Pos
 8

	)

1211 
	#FPU_FPCCR_MONRDY_Msk
 (1UL << 
FPU_FPCCR_MONRDY_Pos
Ë

	)

1213 
	#FPU_FPCCR_BFRDY_Pos
 6

	)

1214 
	#FPU_FPCCR_BFRDY_Msk
 (1UL << 
FPU_FPCCR_BFRDY_Pos
Ë

	)

1216 
	#FPU_FPCCR_MMRDY_Pos
 5

	)

1217 
	#FPU_FPCCR_MMRDY_Msk
 (1UL << 
FPU_FPCCR_MMRDY_Pos
Ë

	)

1219 
	#FPU_FPCCR_HFRDY_Pos
 4

	)

1220 
	#FPU_FPCCR_HFRDY_Msk
 (1UL << 
FPU_FPCCR_HFRDY_Pos
Ë

	)

1222 
	#FPU_FPCCR_THREAD_Pos
 3

	)

1223 
	#FPU_FPCCR_THREAD_Msk
 (1UL << 
FPU_FPCCR_THREAD_Pos
Ë

	)

1225 
	#FPU_FPCCR_USER_Pos
 1

	)

1226 
	#FPU_FPCCR_USER_Msk
 (1UL << 
FPU_FPCCR_USER_Pos
Ë

	)

1228 
	#FPU_FPCCR_LSPACT_Pos
 0

	)

1229 
	#FPU_FPCCR_LSPACT_Msk
 (1UL << 
FPU_FPCCR_LSPACT_Pos
Ë

	)

1232 
	#FPU_FPCAR_ADDRESS_Pos
 3

	)

1233 
	#FPU_FPCAR_ADDRESS_Msk
 (0x1FFFFFFFUL << 
FPU_FPCAR_ADDRESS_Pos
Ë

	)

1236 
	#FPU_FPDSCR_AHP_Pos
 26

	)

1237 
	#FPU_FPDSCR_AHP_Msk
 (1UL << 
FPU_FPDSCR_AHP_Pos
Ë

	)

1239 
	#FPU_FPDSCR_DN_Pos
 25

	)

1240 
	#FPU_FPDSCR_DN_Msk
 (1UL << 
FPU_FPDSCR_DN_Pos
Ë

	)

1242 
	#FPU_FPDSCR_FZ_Pos
 24

	)

1243 
	#FPU_FPDSCR_FZ_Msk
 (1UL << 
FPU_FPDSCR_FZ_Pos
Ë

	)

1245 
	#FPU_FPDSCR_RMode_Pos
 22

	)

1246 
	#FPU_FPDSCR_RMode_Msk
 (3UL << 
FPU_FPDSCR_RMode_Pos
Ë

	)

1249 
	#FPU_MVFR0_FP_roundög_modes_Pos
 28

	)

1250 
	#FPU_MVFR0_FP_roundög_modes_Msk
 (0xFUL << 
FPU_MVFR0_FP_roundög_modes_Pos
Ë

	)

1252 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Pos
 24

	)

1253 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Msk
 (0xFUL << 
FPU_MVFR0_Sh‹t_ve˘‹s_Pos
Ë

	)

1255 
	#FPU_MVFR0_Squ¨e_roŸ_Pos
 20

	)

1256 
	#FPU_MVFR0_Squ¨e_roŸ_Msk
 (0xFUL << 
FPU_MVFR0_Squ¨e_roŸ_Pos
Ë

	)

1258 
	#FPU_MVFR0_Divide_Pos
 16

	)

1259 
	#FPU_MVFR0_Divide_Msk
 (0xFUL << 
FPU_MVFR0_Divide_Pos
Ë

	)

1261 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Pos
 12

	)

1262 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Msk
 (0xFUL << 
FPU_MVFR0_FP_ex˚p_å≠pög_Pos
Ë

	)

1264 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
 8

	)

1265 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
Ë

	)

1267 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
 4

	)

1268 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
Ë

	)

1270 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Pos
 0

	)

1271 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Msk
 (0xFUL << 
FPU_MVFR0_A_SIMD_ªgi°îs_Pos
Ë

	)

1274 
	#FPU_MVFR1_FP_fu£d_MAC_Pos
 28

	)

1275 
	#FPU_MVFR1_FP_fu£d_MAC_Msk
 (0xFUL << 
FPU_MVFR1_FP_fu£d_MAC_Pos
Ë

	)

1277 
	#FPU_MVFR1_FP_HPFP_Pos
 24

	)

1278 
	#FPU_MVFR1_FP_HPFP_Msk
 (0xFUL << 
FPU_MVFR1_FP_HPFP_Pos
Ë

	)

1280 
	#FPU_MVFR1_D_NaN_mode_Pos
 4

	)

1281 
	#FPU_MVFR1_D_NaN_mode_Msk
 (0xFUL << 
FPU_MVFR1_D_NaN_mode_Pos
Ë

	)

1283 
	#FPU_MVFR1_FtZ_mode_Pos
 0

	)

1284 
	#FPU_MVFR1_FtZ_mode_Msk
 (0xFUL << 
FPU_MVFR1_FtZ_mode_Pos
Ë

	)

1300 
__IO
 
uöt32_t
 
DHCSR
;

1301 
__O
 
uöt32_t
 
DCRSR
;

1302 
__IO
 
uöt32_t
 
DCRDR
;

1303 
__IO
 
uöt32_t
 
DEMCR
;

1304 } 
	tC‹eDebug_Ty≥
;

1307 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

1308 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1310 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

1311 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1313 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

1314 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1316 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

1317 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1319 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

1320 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1322 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

1323 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1325 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

1326 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1328 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

1329 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1331 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

1332 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1334 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

1335 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1337 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

1338 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1340 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

1341 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL << 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

1344 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

1345 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1347 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

1348 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL << 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

1351 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

1352 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1354 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

1355 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1357 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

1358 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1360 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

1361 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1363 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

1364 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1366 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

1367 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1369 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

1370 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1372 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

1373 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1375 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

1376 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1378 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

1379 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1381 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

1382 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1384 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

1385 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1387 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

1388 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

1400 
	#SCS_BASE
 (0xE000E000ULË

	)

1401 
	#ITM_BASE
 (0xE0000000ULË

	)

1402 
	#DWT_BASE
 (0xE0001000ULË

	)

1403 
	#TPI_BASE
 (0xE0040000ULË

	)

1404 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1405 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1406 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1407 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1409 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1410 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1411 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1412 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1413 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1414 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1415 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1416 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1418 #i‡(
__MPU_PRESENT
 == 1)

1419 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1420 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1423 #i‡(
__FPU_PRESENT
 == 1)

1424 
	#FPU_BASE
 (
SCS_BASE
 + 0x0F30ULË

	)

1425 
	#FPU
 ((
FPU_Ty≥
 *Ë
FPU_BASE
 )

	)

1462 
__STATIC_INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1464 
uöt32_t
 
ªg_vÆue
;

1465 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07);

1467 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1468 
ªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1469 
ªg_vÆue
 = (reg_value |

1470 ((
uöt32_t
)0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1471 (
Pri‹ôyGroupTmp
 << 8));

1472 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1482 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1484  ((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
);

1494 
__STATIC_INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1497 
NVIC
->
ISER
[(
uöt32_t
)((
öt32_t
)
IRQn
) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F));

1507 
__STATIC_INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1509 
NVIC
->
ICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1523 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1525 ((
uöt32_t
Ë((
NVIC
->
ISPR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1535 
__STATIC_INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1537 
NVIC
->
ISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1547 
__STATIC_INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1549 
NVIC
->
ICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1562 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1564 ((
uöt32_t
)((
NVIC
->
IABR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1577 
__STATIC_INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1579 if(
IRQn
 < 0) {

1580 
SCB
->
SHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1582 
NVIC
->
IP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1597 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1600 if(
IRQn
 < 0) {

1601 ((
uöt32_t
)(
SCB
->
SHP
[((uöt32_t)(
IRQn
Ë& 0xF)-4] >> (8 - 
__NVIC_PRIO_BITS
))); }

1603 ((
uöt32_t
)(
NVIC
->
IP
[(uöt32_t)(
IRQn
)] >> (8 - 
__NVIC_PRIO_BITS
))); }

1619 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1621 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1622 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1623 
uöt32_t
 
SubPri‹ôyBôs
;

1625 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1626 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1629 ((
Pªem±Pri‹ôy
 & ((1 << (
Pªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
SubPri‹ôyBôs
) |

1630 ((
SubPri‹ôy
 & ((1 << (
SubPri‹ôyBôs
 )) - 1)))

1647 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1649 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1650 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1651 
uöt32_t
 
SubPri‹ôyBôs
;

1653 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1654 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1656 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1657 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1665 
__STATIC_INLINE
 
NVIC_Sy°emRe£t
()

1667 
__DSB
();

1669 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1670 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1671 
SCB_AIRCR_SYSRESETREQ_Msk
);

1672 
__DSB
();

1687 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

1704 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1706 i‡((
ticks
 - 1Ë> 
SysTick_LOAD_RELOAD_Msk
)  (1);

1708 
SysTick
->
LOAD
 = 
ticks
 - 1;

1709 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1710 
SysTick
->
VAL
 = 0;

1711 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1712 
SysTick_CTRL_TICKINT_Msk
 |

1713 
SysTick_CTRL_ENABLE_Msk
;

1730 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1731 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1744 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1746 i‡((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) &&

1747 (
	gITM
->
	gTER
 & (1UL << 0) ) )

1749 
	gITM
->
	gPORT
[0].
	gu32
 == 0);

1750 
	gITM
->
	gPORT
[0].
	gu8
 = (
uöt8_t
Ë
ch
;

1752  (
	gch
);

1763 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 () {

1764 
öt32_t
 
	gch
 = -1;

1766 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1767 
ch
 = 
ITM_RxBuf„r
;

1768 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1771  (
	gch
);

1782 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 () {

1784 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1796 #ifde‡
__˝lu•lus


	@CMSIS/Include/core_cm7.h

38 #i‡
deföed
 ( 
__ICCARM__
 )

39 #¥agm®
sy°em_ö˛ude


42 #i‚de‡
__CORE_CM7_H_GENERIC


43 
	#__CORE_CM7_H_GENERIC


	)

45 #ifde‡
__˝lu•lus


71 
	#__CM7_CMSIS_VERSION_MAIN
 (0x04Ë

	)

72 
	#__CM7_CMSIS_VERSION_SUB
 (0x00Ë

	)

73 
	#__CM7_CMSIS_VERSION
 ((
__CM7_CMSIS_VERSION_MAIN
 << 16Ë| \

	)

74 
__CM7_CMSIS_VERSION_SUB
 )

76 
	#__CORTEX_M
 (0x07Ë

	)

79 #i‡ 
deföed
 ( 
__CC_ARM
 )

80 
	#__ASM
 
__asm


	)

81 
	#__INLINE
 
__ölöe


	)

82 
	#__STATIC_INLINE
 
__ölöe


	)

84 #ñi‡
deföed
 ( 
__GNUC__
 )

85 
	#__ASM
 
__asm


	)

86 
	#__INLINE
 
ölöe


	)

87 
	#__STATIC_INLINE
 
ölöe


	)

89 #ñi‡
deföed
 ( 
__ICCARM__
 )

90 
	#__ASM
 
__asm


	)

91 
	#__INLINE
 
ölöe


	)

92 
	#__STATIC_INLINE
 
ölöe


	)

94 #ñi‡
deföed
 ( 
__TMS470__
 )

95 
	#__ASM
 
__asm


	)

96 
	#__STATIC_INLINE
 
ölöe


	)

98 #ñi‡
deföed
 ( 
__TASKING__
 )

99 
	#__ASM
 
__asm


	)

100 
	#__INLINE
 
ölöe


	)

101 
	#__STATIC_INLINE
 
ölöe


	)

103 #ñi‡
deföed
 ( 
__CSMC__
 )

104 
	#__∑cked


	)

105 
	#__ASM
 
_asm


	)

106 
	#__INLINE
 
ölöe


	)

107 
	#__STATIC_INLINE
 
ölöe


	)

114 #i‡
deföed
 ( 
__CC_ARM
 )

115 #i‡
deföed
 
__TARGET_FPU_VFP


116 #i‡(
__FPU_PRESENT
 == 1)

117 
	#__FPU_USED
 1

	)

120 
	#__FPU_USED
 0

	)

123 
	#__FPU_USED
 0

	)

126 #ñi‡
deföed
 ( 
__GNUC__
 )

127 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

128 #i‡(
__FPU_PRESENT
 == 1)

129 
	#__FPU_USED
 1

	)

132 
	#__FPU_USED
 0

	)

135 
	#__FPU_USED
 0

	)

138 #ñi‡
deföed
 ( 
__ICCARM__
 )

139 #i‡
deföed
 
__ARMVFP__


140 #i‡(
__FPU_PRESENT
 == 1)

141 
	#__FPU_USED
 1

	)

144 
	#__FPU_USED
 0

	)

147 
	#__FPU_USED
 0

	)

150 #ñi‡
deföed
 ( 
__TMS470__
 )

151 #i‡
deföed
 
__TI_VFP_SUPPORT__


152 #i‡(
__FPU_PRESENT
 == 1)

153 
	#__FPU_USED
 1

	)

156 
	#__FPU_USED
 0

	)

159 
	#__FPU_USED
 0

	)

162 #ñi‡
deföed
 ( 
__TASKING__
 )

163 #i‡
deföed
 
__FPU_VFP__


164 #i‡(
__FPU_PRESENT
 == 1)

165 
	#__FPU_USED
 1

	)

168 
	#__FPU_USED
 0

	)

171 
	#__FPU_USED
 0

	)

174 #ñi‡
deföed
 ( 
__CSMC__
 )

175 #i‡–
__CSMC__
 & 0x400)

176 #i‡(
__FPU_PRESENT
 == 1)

177 
	#__FPU_USED
 1

	)

180 
	#__FPU_USED
 0

	)

183 
	#__FPU_USED
 0

	)

187 
	~<°döt.h
>

188 
	~<c‹e_cmIn°r.h
>

189 
	~<c‹e_cmFunc.h
>

190 
	~<c‹e_cmSimd.h
>

192 #ifde‡
__˝lu•lus


198 #i‚de‡
__CMSIS_GENERIC


200 #i‚de‡
__CORE_CM7_H_DEPENDANT


201 
	#__CORE_CM7_H_DEPENDANT


	)

203 #ifde‡
__˝lu•lus


208 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


209 #i‚de‡
__CM7_REV


210 
	#__CM7_REV
 0x0000

	)

214 #i‚de‡
__FPU_PRESENT


215 
	#__FPU_PRESENT
 0

	)

219 #i‚de‡
__MPU_PRESENT


220 
	#__MPU_PRESENT
 0

	)

224 #i‚de‡
__ICACHE_PRESENT


225 
	#__ICACHE_PRESENT
 0

	)

229 #i‚de‡
__DCACHE_PRESENT


230 
	#__DCACHE_PRESENT
 0

	)

234 #i‚de‡
__DTCM_PRESENT


235 
	#__DTCM_PRESENT
 0

	)

239 #i‚de‡
__NVIC_PRIO_BITS


240 
	#__NVIC_PRIO_BITS
 3

	)

244 #i‚de‡
__Víd‹_SysTickC⁄fig


245 
	#__Víd‹_SysTickC⁄fig
 0

	)

258 #ifde‡
__˝lu•lus


259 
	#__I
 vﬁ©ûê

	)

261 
	#__I
 vﬁ©ûêc⁄°

	)

263 
	#__O
 vﬁ©ûê

	)

264 
	#__IO
 vﬁ©ûê

	)

297 #i‡(
__CORTEX_M
 != 0x07)

298 
uöt32_t
 
_ª£rved0
:27;

300 
uöt32_t
 
_ª£rved0
:16;

301 
uöt32_t
 
GE
:4;

302 
uöt32_t
 
_ª£rved1
:7;

304 
uöt32_t
 
Q
:1;

305 
uöt32_t
 
V
:1;

306 
uöt32_t
 
C
:1;

307 
uöt32_t
 
Z
:1;

308 
uöt32_t
 
N
:1;

309 } 
b
;

310 
uöt32_t
 
w
;

311 } 
	tAPSR_Ty≥
;

320 
uöt32_t
 
ISR
:9;

321 
uöt32_t
 
_ª£rved0
:23;

322 } 
b
;

323 
uöt32_t
 
w
;

324 } 
	tIPSR_Ty≥
;

333 
uöt32_t
 
ISR
:9;

334 #i‡(
__CORTEX_M
 != 0x07)

335 
uöt32_t
 
_ª£rved0
:15;

337 
uöt32_t
 
_ª£rved0
:7;

338 
uöt32_t
 
GE
:4;

339 
uöt32_t
 
_ª£rved1
:4;

341 
uöt32_t
 
T
:1;

342 
uöt32_t
 
IT
:2;

343 
uöt32_t
 
Q
:1;

344 
uöt32_t
 
V
:1;

345 
uöt32_t
 
C
:1;

346 
uöt32_t
 
Z
:1;

347 
uöt32_t
 
N
:1;

348 } 
b
;

349 
uöt32_t
 
w
;

350 } 
	txPSR_Ty≥
;

359 
uöt32_t
 
nPRIV
:1;

360 
uöt32_t
 
SPSEL
:1;

361 
uöt32_t
 
FPCA
:1;

362 
uöt32_t
 
_ª£rved0
:29;

363 } 
b
;

364 
uöt32_t
 
w
;

365 } 
	tCONTROL_Ty≥
;

380 
__IO
 
uöt32_t
 
ISER
[8];

381 
uöt32_t
 
RESERVED0
[24];

382 
__IO
 
uöt32_t
 
ICER
[8];

383 
uöt32_t
 
RSERVED1
[24];

384 
__IO
 
uöt32_t
 
ISPR
[8];

385 
uöt32_t
 
RESERVED2
[24];

386 
__IO
 
uöt32_t
 
ICPR
[8];

387 
uöt32_t
 
RESERVED3
[24];

388 
__IO
 
uöt32_t
 
IABR
[8];

389 
uöt32_t
 
RESERVED4
[56];

390 
__IO
 
uöt8_t
 
IP
[240];

391 
uöt32_t
 
RESERVED5
[644];

392 
__O
 
uöt32_t
 
STIR
;

393 } 
	tNVIC_Ty≥
;

396 
	#NVIC_STIR_INTID_Pos
 0

	)

397 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL << 
NVIC_STIR_INTID_Pos
Ë

	)

412 
__I
 
uöt32_t
 
CPUID
;

413 
__IO
 
uöt32_t
 
ICSR
;

414 
__IO
 
uöt32_t
 
VTOR
;

415 
__IO
 
uöt32_t
 
AIRCR
;

416 
__IO
 
uöt32_t
 
SCR
;

417 
__IO
 
uöt32_t
 
CCR
;

418 
__IO
 
uöt8_t
 
SHPR
[12];

419 
__IO
 
uöt32_t
 
SHCSR
;

420 
__IO
 
uöt32_t
 
CFSR
;

421 
__IO
 
uöt32_t
 
HFSR
;

422 
__IO
 
uöt32_t
 
DFSR
;

423 
__IO
 
uöt32_t
 
MMFAR
;

424 
__IO
 
uöt32_t
 
BFAR
;

425 
__IO
 
uöt32_t
 
AFSR
;

426 
__I
 
uöt32_t
 
ID_PFR
[2];

427 
__I
 
uöt32_t
 
ID_DFR
;

428 
__I
 
uöt32_t
 
ID_AFR
;

429 
__I
 
uöt32_t
 
ID_MFR
[4];

430 
__I
 
uöt32_t
 
ID_ISAR
[5];

431 
uöt32_t
 
RESERVED0
[1];

432 
__I
 
uöt32_t
 
CLIDR
;

433 
__I
 
uöt32_t
 
CTR
;

434 
__I
 
uöt32_t
 
CCSIDR
;

435 
__IO
 
uöt32_t
 
CSSELR
;

436 
__IO
 
uöt32_t
 
CPACR
;

437 
uöt32_t
 
RESERVED3
[93];

438 
__O
 
uöt32_t
 
STIR
;

439 
uöt32_t
 
RESERVED4
[15];

440 
__I
 
uöt32_t
 
MVFR0
;

441 
__I
 
uöt32_t
 
MVFR1
;

442 
__I
 
uöt32_t
 
MVFR2
;

443 
uöt32_t
 
RESERVED5
[1];

444 
__O
 
uöt32_t
 
ICIALLU
;

445 
uöt32_t
 
RESERVED6
[1];

446 
__O
 
uöt32_t
 
ICIMVAU
;

447 
__O
 
uöt32_t
 
DCIMVAU
;

448 
__O
 
uöt32_t
 
DCISW
;

449 
__O
 
uöt32_t
 
DCCMVAU
;

450 
__O
 
uöt32_t
 
DCCMVAC
;

451 
__O
 
uöt32_t
 
DCCSW
;

452 
__O
 
uöt32_t
 
DCCIMVAC
;

453 
__O
 
uöt32_t
 
DCCISW
;

454 
uöt32_t
 
RESERVED7
[6];

455 
__IO
 
uöt32_t
 
ITCMCR
;

456 
__IO
 
uöt32_t
 
DTCMCR
;

457 
__IO
 
uöt32_t
 
AHBPCR
;

458 
__IO
 
uöt32_t
 
CACR
;

459 
__IO
 
uöt32_t
 
AHBSCR
;

460 
uöt32_t
 
RESERVED8
[1];

461 
__IO
 
uöt32_t
 
ABFSR
;

462 } 
	tSCB_Ty≥
;

465 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

466 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

468 
	#SCB_CPUID_VARIANT_Pos
 20

	)

469 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

471 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

472 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

474 
	#SCB_CPUID_PARTNO_Pos
 4

	)

475 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

477 
	#SCB_CPUID_REVISION_Pos
 0

	)

478 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

481 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

482 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

484 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

485 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

487 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

488 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

490 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

491 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

493 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

494 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

496 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

497 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

499 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

500 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

502 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

503 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

505 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

506 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

508 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

509 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

512 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

513 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

516 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

517 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

519 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

520 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

522 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

523 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

525 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

526 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

528 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

529 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

531 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

532 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

534 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

535 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL << 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

538 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

539 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

541 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

542 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

544 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

545 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

548 
	#SCB_CCR_BP_Pos
 18

	)

549 
	#SCB_CCR_BP_Msk
 (1UL << 
SCB_CCR_BP_Pos
Ë

	)

551 
	#SCB_CCR_IC_Pos
 17

	)

552 
	#SCB_CCR_IC_Msk
 (1UL << 
SCB_CCR_IC_Pos
Ë

	)

554 
	#SCB_CCR_DC_Pos
 16

	)

555 
	#SCB_CCR_DC_Msk
 (1UL << 
SCB_CCR_DC_Pos
Ë

	)

557 
	#SCB_CCR_STKALIGN_Pos
 9

	)

558 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

560 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

561 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

563 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

564 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

566 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

567 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

569 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

570 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

572 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

573 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL << 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

576 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

577 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

579 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

580 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

582 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

583 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

585 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

586 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

588 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

589 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

591 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

592 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

594 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

595 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

597 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

598 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

600 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

601 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

603 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

604 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

606 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

607 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

609 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

610 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

612 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

613 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

615 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

616 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

619 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

620 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

622 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

623 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

625 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

626 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

629 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

630 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

632 
	#SCB_HFSR_FORCED_Pos
 30

	)

633 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

635 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

636 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

639 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

640 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

642 
	#SCB_DFSR_VCATCH_Pos
 3

	)

643 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

645 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

646 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

648 
	#SCB_DFSR_BKPT_Pos
 1

	)

649 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

651 
	#SCB_DFSR_HALTED_Pos
 0

	)

652 
	#SCB_DFSR_HALTED_Msk
 (1UL << 
SCB_DFSR_HALTED_Pos
Ë

	)

655 
	#SCB_CLIDR_LOUU_Pos
 27

	)

656 
	#SCB_CLIDR_LOUU_Msk
 (7UL << 
SCB_CLIDR_LOUU_Pos
Ë

	)

658 
	#SCB_CLIDR_LOC_Pos
 24

	)

659 
	#SCB_CLIDR_LOC_Msk
 (7UL << 
SCB_CLIDR_FORMAT_Pos
Ë

	)

662 
	#SCB_CTR_FORMAT_Pos
 29

	)

663 
	#SCB_CTR_FORMAT_Msk
 (7UL << 
SCB_CTR_FORMAT_Pos
Ë

	)

665 
	#SCB_CTR_CWG_Pos
 24

	)

666 
	#SCB_CTR_CWG_Msk
 (0xFUL << 
SCB_CTR_CWG_Pos
Ë

	)

668 
	#SCB_CTR_ERG_Pos
 20

	)

669 
	#SCB_CTR_ERG_Msk
 (0xFUL << 
SCB_CTR_ERG_Pos
Ë

	)

671 
	#SCB_CTR_DMINLINE_Pos
 16

	)

672 
	#SCB_CTR_DMINLINE_Msk
 (0xFUL << 
SCB_CTR_DMINLINE_Pos
Ë

	)

674 
	#SCB_CTR_IMINLINE_Pos
 0

	)

675 
	#SCB_CTR_IMINLINE_Msk
 (0xFUL << 
SCB_CTR_IMINLINE_Pos
Ë

	)

678 
	#SCB_CCSIDR_WT_Pos
 31

	)

679 
	#SCB_CCSIDR_WT_Msk
 (7UL << 
SCB_CCSIDR_WT_Pos
Ë

	)

681 
	#SCB_CCSIDR_WB_Pos
 30

	)

682 
	#SCB_CCSIDR_WB_Msk
 (7UL << 
SCB_CCSIDR_WB_Pos
Ë

	)

684 
	#SCB_CCSIDR_RA_Pos
 29

	)

685 
	#SCB_CCSIDR_RA_Msk
 (7UL << 
SCB_CCSIDR_RA_Pos
Ë

	)

687 
	#SCB_CCSIDR_WA_Pos
 28

	)

688 
	#SCB_CCSIDR_WA_Msk
 (7UL << 
SCB_CCSIDR_WA_Pos
Ë

	)

690 
	#SCB_CCSIDR_NUMSETS_Pos
 13

	)

691 
	#SCB_CCSIDR_NUMSETS_Msk
 (0x7FFFUL << 
SCB_CCSIDR_NUMSETS_Pos
Ë

	)

693 
	#SCB_CCSIDR_ASSOCIATIVITY_Pos
 3

	)

694 
	#SCB_CCSIDR_ASSOCIATIVITY_Msk
 (0x3FFUL << 
SCB_CCSIDR_ASSOCIATIVITY_Pos
Ë

	)

696 
	#SCB_CCSIDR_LINESIZE_Pos
 0

	)

697 
	#SCB_CCSIDR_LINESIZE_Msk
 (7UL << 
SCB_CCSIDR_LINESIZE_Pos
Ë

	)

700 
	#SCB_CSSELR_LEVEL_Pos
 0

	)

701 
	#SCB_CSSELR_LEVEL_Msk
 (1UL << 
SCB_CSSELR_LEVEL_Pos
Ë

	)

703 
	#SCB_CSSELR_IND_Pos
 0

	)

704 
	#SCB_CSSELR_IND_Msk
 (1UL << 
SCB_CSSELR_IND_Pos
Ë

	)

707 
	#SCB_STIR_INTID_Pos
 0

	)

708 
	#SCB_STIR_INTID_Msk
 (0x1FFUL << 
SCB_STIR_INTID_Pos
Ë

	)

711 
	#SCB_ITCMCR_SZ_Pos
 3

	)

712 
	#SCB_ITCMCR_SZ_Msk
 (0xFUL << 
SCB_ITCMCR_SZ_Pos
Ë

	)

714 
	#SCB_ITCMCR_RETEN_Pos
 2

	)

715 
	#SCB_ITCMCR_RETEN_Msk
 (1FFUL << 
SCB_ITCMCR_RETEN_Pos
Ë

	)

717 
	#SCB_ITCMCR_RMW_Pos
 1

	)

718 
	#SCB_ITCMCR_RMW_Msk
 (1FFUL << 
SCB_ITCMCR_RMW_Pos
Ë

	)

720 
	#SCB_ITCMCR_EN_Pos
 0

	)

721 
	#SCB_ITCMCR_EN_Msk
 (1FFUL << 
SCB_ITCMCR_EN_Pos
Ë

	)

724 
	#SCB_DTCMCR_SZ_Pos
 3

	)

725 
	#SCB_DTCMCR_SZ_Msk
 (0xFUL << 
SCB_DTCMCR_SZ_Pos
Ë

	)

727 
	#SCB_DTCMCR_RETEN_Pos
 2

	)

728 
	#SCB_DTCMCR_RETEN_Msk
 (1UL << 
SCB_DTCMCR_RETEN_Pos
Ë

	)

730 
	#SCB_DTCMCR_RMW_Pos
 1

	)

731 
	#SCB_DTCMCR_RMW_Msk
 (1UL << 
SCB_DTCMCR_RMW_Pos
Ë

	)

733 
	#SCB_DTCMCR_EN_Pos
 0

	)

734 
	#SCB_DTCMCR_EN_Msk
 (1UL << 
SCB_DTCMCR_EN_Pos
Ë

	)

737 
	#SCB_AHBPCR_SZ_Pos
 1

	)

738 
	#SCB_AHBPCR_SZ_Msk
 (7UL << 
SCB_AHBPCR_SZ_Pos
Ë

	)

740 
	#SCB_AHBPCR_EN_Pos
 0

	)

741 
	#SCB_AHBPCR_EN_Msk
 (1UL << 
SCB_AHBPCR_EN_Pos
Ë

	)

744 
	#SCB_CACR_FORCEWT_Pos
 2

	)

745 
	#SCB_CACR_FORCEWT_Msk
 (1UL << 
SCB_CACR_FORCEWT_Pos
Ë

	)

747 
	#SCB_CACR_ECCEN_Pos
 1

	)

748 
	#SCB_CACR_ECCEN_Msk
 (1UL << 
SCB_CACR_ECCEN_Pos
Ë

	)

750 
	#SCB_CACR_SIWT_Pos
 0

	)

751 
	#SCB_CACR_SIWT_Msk
 (1UL << 
SCB_CACR_SIWT_Pos
Ë

	)

754 
	#SCB_AHBSCR_INITCOUNT_Pos
 11

	)

755 
	#SCB_AHBSCR_INITCOUNT_Msk
 (0x1FUL << 
SCB_AHBPCR_INITCOUNT_Pos
Ë

	)

757 
	#SCB_AHBSCR_TPRI_Pos
 2

	)

758 
	#SCB_AHBSCR_TPRI_Msk
 (0x1FFUL << 
SCB_AHBPCR_TPRI_Pos
Ë

	)

760 
	#SCB_AHBSCR_CTL_Pos
 0

	)

761 
	#SCB_AHBSCR_CTL_Msk
 (3UL << 
SCB_AHBPCR_CTL_Pos
Ë

	)

764 
	#SCB_ABFSR_AXIMTYPE_Pos
 8

	)

765 
	#SCB_ABFSR_AXIMTYPE_Msk
 (3UL << 
SCB_ABFSR_AXIMTYPE_Pos
Ë

	)

767 
	#SCB_ABFSR_EPPB_Pos
 4

	)

768 
	#SCB_ABFSR_EPPB_Msk
 (1UL << 
SCB_ABFSR_EPPB_Pos
Ë

	)

770 
	#SCB_ABFSR_AXIM_Pos
 3

	)

771 
	#SCB_ABFSR_AXIM_Msk
 (1UL << 
SCB_ABFSR_AXIM_Pos
Ë

	)

773 
	#SCB_ABFSR_AHBP_Pos
 2

	)

774 
	#SCB_ABFSR_AHBP_Msk
 (1UL << 
SCB_ABFSR_AHBP_Pos
Ë

	)

776 
	#SCB_ABFSR_DTCM_Pos
 1

	)

777 
	#SCB_ABFSR_DTCM_Msk
 (1UL << 
SCB_ABFSR_DTCM_Pos
Ë

	)

779 
	#SCB_ABFSR_ITCM_Pos
 0

	)

780 
	#SCB_ABFSR_ITCM_Msk
 (1UL << 
SCB_ABFSR_ITCM_Pos
Ë

	)

795 
uöt32_t
 
RESERVED0
[1];

796 
__I
 
uöt32_t
 
ICTR
;

797 
__IO
 
uöt32_t
 
ACTLR
;

798 } 
	tSCnSCB_Ty≥
;

801 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0

	)

802 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL << 
SCnSCB_ICTR_INTLINESNUM_Pos
Ë

	)

805 
	#SCnSCB_ACTLR_DISITMATBFLUSH_Pos
 12

	)

806 
	#SCnSCB_ACTLR_DISITMATBFLUSH_Msk
 (1UL << 
SCnSCB_ACTLR_DISITMATBFLUSH_Pos
Ë

	)

808 
	#SCnSCB_ACTLR_DISRAMODE_Pos
 11

	)

809 
	#SCnSCB_ACTLR_DISRAMODE_Msk
 (1UL << 
SCnSCB_ACTLR_DISRAMODE_Pos
Ë

	)

811 
	#SCnSCB_ACTLR_FPEXCODIS_Pos
 10

	)

812 
	#SCnSCB_ACTLR_FPEXCODIS_Msk
 (1UL << 
SCnSCB_ACTLR_FPEXCODIS_Pos
Ë

	)

814 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2

	)

815 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

817 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0

	)

818 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL << 
SCnSCB_ACTLR_DISMCYCINT_Pos
Ë

	)

833 
__IO
 
uöt32_t
 
CTRL
;

834 
__IO
 
uöt32_t
 
LOAD
;

835 
__IO
 
uöt32_t
 
VAL
;

836 
__I
 
uöt32_t
 
CALIB
;

837 } 
	tSysTick_Ty≥
;

840 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

841 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

843 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

844 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

846 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

847 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

849 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

850 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

853 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

854 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

857 
	#SysTick_VAL_CURRENT_Pos
 0

	)

858 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

861 
	#SysTick_CALIB_NOREF_Pos
 31

	)

862 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

864 
	#SysTick_CALIB_SKEW_Pos
 30

	)

865 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

867 
	#SysTick_CALIB_TENMS_Pos
 0

	)

868 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_CALIB_TENMS_Pos
Ë

	)

883 
__O
 union

885 
__O
 
uöt8_t
 
u8
;

886 
__O
 
uöt16_t
 
u16
;

887 
__O
 
uöt32_t
 
u32
;

888 } 
PORT
 [32];

889 
uöt32_t
 
RESERVED0
[864];

890 
__IO
 
uöt32_t
 
TER
;

891 
uöt32_t
 
RESERVED1
[15];

892 
__IO
 
uöt32_t
 
TPR
;

893 
uöt32_t
 
RESERVED2
[15];

894 
__IO
 
uöt32_t
 
TCR
;

895 
uöt32_t
 
RESERVED3
[29];

896 
__O
 
uöt32_t
 
IWR
;

897 
__I
 
uöt32_t
 
IRR
;

898 
__IO
 
uöt32_t
 
IMCR
;

899 
uöt32_t
 
RESERVED4
[43];

900 
__O
 
uöt32_t
 
LAR
;

901 
__I
 
uöt32_t
 
LSR
;

902 
uöt32_t
 
RESERVED5
[6];

903 
__I
 
uöt32_t
 
PID4
;

904 
__I
 
uöt32_t
 
PID5
;

905 
__I
 
uöt32_t
 
PID6
;

906 
__I
 
uöt32_t
 
PID7
;

907 
__I
 
uöt32_t
 
PID0
;

908 
__I
 
uöt32_t
 
PID1
;

909 
__I
 
uöt32_t
 
PID2
;

910 
__I
 
uöt32_t
 
PID3
;

911 
__I
 
uöt32_t
 
CID0
;

912 
__I
 
uöt32_t
 
CID1
;

913 
__I
 
uöt32_t
 
CID2
;

914 
__I
 
uöt32_t
 
CID3
;

915 } 
	tITM_Ty≥
;

918 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

919 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL << 
ITM_TPR_PRIVMASK_Pos
Ë

	)

922 
	#ITM_TCR_BUSY_Pos
 23

	)

923 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

925 
	#ITM_TCR_Tø˚BusID_Pos
 16

	)

926 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

928 
	#ITM_TCR_GTSFREQ_Pos
 10

	)

929 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

931 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

932 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

934 
	#ITM_TCR_SWOENA_Pos
 4

	)

935 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

937 
	#ITM_TCR_DWTENA_Pos
 3

	)

938 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

940 
	#ITM_TCR_SYNCENA_Pos
 2

	)

941 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

943 
	#ITM_TCR_TSENA_Pos
 1

	)

944 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

946 
	#ITM_TCR_ITMENA_Pos
 0

	)

947 
	#ITM_TCR_ITMENA_Msk
 (1UL << 
ITM_TCR_ITMENA_Pos
Ë

	)

950 
	#ITM_IWR_ATVALIDM_Pos
 0

	)

951 
	#ITM_IWR_ATVALIDM_Msk
 (1UL << 
ITM_IWR_ATVALIDM_Pos
Ë

	)

954 
	#ITM_IRR_ATREADYM_Pos
 0

	)

955 
	#ITM_IRR_ATREADYM_Msk
 (1UL << 
ITM_IRR_ATREADYM_Pos
Ë

	)

958 
	#ITM_IMCR_INTEGRATION_Pos
 0

	)

959 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL << 
ITM_IMCR_INTEGRATION_Pos
Ë

	)

962 
	#ITM_LSR_ByãAcc_Pos
 2

	)

963 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

965 
	#ITM_LSR_Ac˚ss_Pos
 1

	)

966 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

968 
	#ITM_LSR_Pª£¡_Pos
 0

	)

969 
	#ITM_LSR_Pª£¡_Msk
 (1UL << 
ITM_LSR_Pª£¡_Pos
Ë

	)

984 
__IO
 
uöt32_t
 
CTRL
;

985 
__IO
 
uöt32_t
 
CYCCNT
;

986 
__IO
 
uöt32_t
 
CPICNT
;

987 
__IO
 
uöt32_t
 
EXCCNT
;

988 
__IO
 
uöt32_t
 
SLEEPCNT
;

989 
__IO
 
uöt32_t
 
LSUCNT
;

990 
__IO
 
uöt32_t
 
FOLDCNT
;

991 
__I
 
uöt32_t
 
PCSR
;

992 
__IO
 
uöt32_t
 
COMP0
;

993 
__IO
 
uöt32_t
 
MASK0
;

994 
__IO
 
uöt32_t
 
FUNCTION0
;

995 
uöt32_t
 
RESERVED0
[1];

996 
__IO
 
uöt32_t
 
COMP1
;

997 
__IO
 
uöt32_t
 
MASK1
;

998 
__IO
 
uöt32_t
 
FUNCTION1
;

999 
uöt32_t
 
RESERVED1
[1];

1000 
__IO
 
uöt32_t
 
COMP2
;

1001 
__IO
 
uöt32_t
 
MASK2
;

1002 
__IO
 
uöt32_t
 
FUNCTION2
;

1003 
uöt32_t
 
RESERVED2
[1];

1004 
__IO
 
uöt32_t
 
COMP3
;

1005 
__IO
 
uöt32_t
 
MASK3
;

1006 
__IO
 
uöt32_t
 
FUNCTION3
;

1007 
uöt32_t
 
RESERVED3
[981];

1008 
__O
 
uöt32_t
 
LAR
;

1009 
__I
 
uöt32_t
 
LSR
;

1010 } 
	tDWT_Ty≥
;

1013 
	#DWT_CTRL_NUMCOMP_Pos
 28

	)

1014 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

1016 
	#DWT_CTRL_NOTRCPKT_Pos
 27

	)

1017 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

1019 
	#DWT_CTRL_NOEXTTRIG_Pos
 26

	)

1020 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

1022 
	#DWT_CTRL_NOCYCCNT_Pos
 25

	)

1023 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

1025 
	#DWT_CTRL_NOPRFCNT_Pos
 24

	)

1026 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

1028 
	#DWT_CTRL_CYCEVTENA_Pos
 22

	)

1029 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

1031 
	#DWT_CTRL_FOLDEVTENA_Pos
 21

	)

1032 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

1034 
	#DWT_CTRL_LSUEVTENA_Pos
 20

	)

1035 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

1037 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19

	)

1038 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

1040 
	#DWT_CTRL_EXCEVTENA_Pos
 18

	)

1041 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

1043 
	#DWT_CTRL_CPIEVTENA_Pos
 17

	)

1044 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

1046 
	#DWT_CTRL_EXCTRCENA_Pos
 16

	)

1047 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

1049 
	#DWT_CTRL_PCSAMPLENA_Pos
 12

	)

1050 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

1052 
	#DWT_CTRL_SYNCTAP_Pos
 10

	)

1053 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

1055 
	#DWT_CTRL_CYCTAP_Pos
 9

	)

1056 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

1058 
	#DWT_CTRL_POSTINIT_Pos
 5

	)

1059 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

1061 
	#DWT_CTRL_POSTPRESET_Pos
 1

	)

1062 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

1064 
	#DWT_CTRL_CYCCNTENA_Pos
 0

	)

1065 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCCNTENA_Pos
Ë

	)

1068 
	#DWT_CPICNT_CPICNT_Pos
 0

	)

1069 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL << 
DWT_CPICNT_CPICNT_Pos
Ë

	)

1072 
	#DWT_EXCCNT_EXCCNT_Pos
 0

	)

1073 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL << 
DWT_EXCCNT_EXCCNT_Pos
Ë

	)

1076 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0

	)

1077 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL << 
DWT_SLEEPCNT_SLEEPCNT_Pos
Ë

	)

1080 
	#DWT_LSUCNT_LSUCNT_Pos
 0

	)

1081 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL << 
DWT_LSUCNT_LSUCNT_Pos
Ë

	)

1084 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0

	)

1085 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL << 
DWT_FOLDCNT_FOLDCNT_Pos
Ë

	)

1088 
	#DWT_MASK_MASK_Pos
 0

	)

1089 
	#DWT_MASK_MASK_Msk
 (0x1FUL << 
DWT_MASK_MASK_Pos
Ë

	)

1092 
	#DWT_FUNCTION_MATCHED_Pos
 24

	)

1093 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

1095 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16

	)

1096 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

1098 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12

	)

1099 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

1101 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10

	)

1102 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

1104 
	#DWT_FUNCTION_LNK1ENA_Pos
 9

	)

1105 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

1107 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8

	)

1108 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

1110 
	#DWT_FUNCTION_CYCMATCH_Pos
 7

	)

1111 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

1113 
	#DWT_FUNCTION_EMITRANGE_Pos
 5

	)

1114 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

1116 
	#DWT_FUNCTION_FUNCTION_Pos
 0

	)

1117 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL << 
DWT_FUNCTION_FUNCTION_Pos
Ë

	)

1132 
__IO
 
uöt32_t
 
SSPSR
;

1133 
__IO
 
uöt32_t
 
CSPSR
;

1134 
uöt32_t
 
RESERVED0
[2];

1135 
__IO
 
uöt32_t
 
ACPR
;

1136 
uöt32_t
 
RESERVED1
[55];

1137 
__IO
 
uöt32_t
 
SPPR
;

1138 
uöt32_t
 
RESERVED2
[131];

1139 
__I
 
uöt32_t
 
FFSR
;

1140 
__IO
 
uöt32_t
 
FFCR
;

1141 
__I
 
uöt32_t
 
FSCR
;

1142 
uöt32_t
 
RESERVED3
[759];

1143 
__I
 
uöt32_t
 
TRIGGER
;

1144 
__I
 
uöt32_t
 
FIFO0
;

1145 
__I
 
uöt32_t
 
ITATBCTR2
;

1146 
uöt32_t
 
RESERVED4
[1];

1147 
__I
 
uöt32_t
 
ITATBCTR0
;

1148 
__I
 
uöt32_t
 
FIFO1
;

1149 
__IO
 
uöt32_t
 
ITCTRL
;

1150 
uöt32_t
 
RESERVED5
[39];

1151 
__IO
 
uöt32_t
 
CLAIMSET
;

1152 
__IO
 
uöt32_t
 
CLAIMCLR
;

1153 
uöt32_t
 
RESERVED7
[8];

1154 
__I
 
uöt32_t
 
DEVID
;

1155 
__I
 
uöt32_t
 
DEVTYPE
;

1156 } 
	tTPI_Ty≥
;

1159 
	#TPI_ACPR_PRESCALER_Pos
 0

	)

1160 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL << 
TPI_ACPR_PRESCALER_Pos
Ë

	)

1163 
	#TPI_SPPR_TXMODE_Pos
 0

	)

1164 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL << 
TPI_SPPR_TXMODE_Pos
Ë

	)

1167 
	#TPI_FFSR_FtN⁄St›_Pos
 3

	)

1168 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

1170 
	#TPI_FFSR_TCPª£¡_Pos
 2

	)

1171 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

1173 
	#TPI_FFSR_FtSt›≥d_Pos
 1

	)

1174 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

1176 
	#TPI_FFSR_FlInProg_Pos
 0

	)

1177 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL << 
TPI_FFSR_FlInProg_Pos
Ë

	)

1180 
	#TPI_FFCR_TrigIn_Pos
 8

	)

1181 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

1183 
	#TPI_FFCR_EnFC⁄t_Pos
 1

	)

1184 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

1187 
	#TPI_TRIGGER_TRIGGER_Pos
 0

	)

1188 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL << 
TPI_TRIGGER_TRIGGER_Pos
Ë

	)

1191 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29

	)

1192 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

1194 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27

	)

1195 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

1197 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26

	)

1198 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

1200 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24

	)

1201 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

1203 
	#TPI_FIFO0_ETM2_Pos
 16

	)

1204 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

1206 
	#TPI_FIFO0_ETM1_Pos
 8

	)

1207 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

1209 
	#TPI_FIFO0_ETM0_Pos
 0

	)

1210 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL << 
TPI_FIFO0_ETM0_Pos
Ë

	)

1213 
	#TPI_ITATBCTR2_ATREADY_Pos
 0

	)

1214 
	#TPI_ITATBCTR2_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR2_ATREADY_Pos
Ë

	)

1217 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29

	)

1218 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

1220 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27

	)

1221 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

1223 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26

	)

1224 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

1226 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24

	)

1227 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

1229 
	#TPI_FIFO1_ITM2_Pos
 16

	)

1230 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

1232 
	#TPI_FIFO1_ITM1_Pos
 8

	)

1233 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

1235 
	#TPI_FIFO1_ITM0_Pos
 0

	)

1236 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL << 
TPI_FIFO1_ITM0_Pos
Ë

	)

1239 
	#TPI_ITATBCTR0_ATREADY_Pos
 0

	)

1240 
	#TPI_ITATBCTR0_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR0_ATREADY_Pos
Ë

	)

1243 
	#TPI_ITCTRL_Mode_Pos
 0

	)

1244 
	#TPI_ITCTRL_Mode_Msk
 (0x1UL << 
TPI_ITCTRL_Mode_Pos
Ë

	)

1247 
	#TPI_DEVID_NRZVALID_Pos
 11

	)

1248 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1250 
	#TPI_DEVID_MANCVALID_Pos
 10

	)

1251 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1253 
	#TPI_DEVID_PTINVALID_Pos
 9

	)

1254 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1256 
	#TPI_DEVID_MöBufSz_Pos
 6

	)

1257 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

1259 
	#TPI_DEVID_AsynClkIn_Pos
 5

	)

1260 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

1262 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0

	)

1263 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL << 
TPI_DEVID_NrTø˚I≈ut_Pos
Ë

	)

1266 
	#TPI_DEVTYPE_SubTy≥_Pos
 0

	)

1267 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL << 
TPI_DEVTYPE_SubTy≥_Pos
Ë

	)

1269 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 4

	)

1270 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1275 #i‡(
__MPU_PRESENT
 == 1)

1286 
__I
 
uöt32_t
 
TYPE
;

1287 
__IO
 
uöt32_t
 
CTRL
;

1288 
__IO
 
uöt32_t
 
RNR
;

1289 
__IO
 
uöt32_t
 
RBAR
;

1290 
__IO
 
uöt32_t
 
RASR
;

1291 
__IO
 
uöt32_t
 
RBAR_A1
;

1292 
__IO
 
uöt32_t
 
RASR_A1
;

1293 
__IO
 
uöt32_t
 
RBAR_A2
;

1294 
__IO
 
uöt32_t
 
RASR_A2
;

1295 
__IO
 
uöt32_t
 
RBAR_A3
;

1296 
__IO
 
uöt32_t
 
RASR_A3
;

1297 } 
	tMPU_Ty≥
;

1300 
	#MPU_TYPE_IREGION_Pos
 16

	)

1301 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1303 
	#MPU_TYPE_DREGION_Pos
 8

	)

1304 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1306 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

1307 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

1310 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

1311 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1313 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

1314 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1316 
	#MPU_CTRL_ENABLE_Pos
 0

	)

1317 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

1320 
	#MPU_RNR_REGION_Pos
 0

	)

1321 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

1324 
	#MPU_RBAR_ADDR_Pos
 5

	)

1325 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1327 
	#MPU_RBAR_VALID_Pos
 4

	)

1328 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1330 
	#MPU_RBAR_REGION_Pos
 0

	)

1331 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

1334 
	#MPU_RASR_ATTRS_Pos
 16

	)

1335 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1337 
	#MPU_RASR_XN_Pos
 28

	)

1338 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

1340 
	#MPU_RASR_AP_Pos
 24

	)

1341 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

1343 
	#MPU_RASR_TEX_Pos
 19

	)

1344 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

1346 
	#MPU_RASR_S_Pos
 18

	)

1347 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

1349 
	#MPU_RASR_C_Pos
 17

	)

1350 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

1352 
	#MPU_RASR_B_Pos
 16

	)

1353 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

1355 
	#MPU_RASR_SRD_Pos
 8

	)

1356 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1358 
	#MPU_RASR_SIZE_Pos
 1

	)

1359 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1361 
	#MPU_RASR_ENABLE_Pos
 0

	)

1362 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

1368 #i‡(
__FPU_PRESENT
 == 1)

1379 
uöt32_t
 
RESERVED0
[1];

1380 
__IO
 
uöt32_t
 
FPCCR
;

1381 
__IO
 
uöt32_t
 
FPCAR
;

1382 
__IO
 
uöt32_t
 
FPDSCR
;

1383 
__I
 
uöt32_t
 
MVFR0
;

1384 
__I
 
uöt32_t
 
MVFR1
;

1385 
__I
 
uöt32_t
 
MVFR2
;

1386 } 
	tFPU_Ty≥
;

1389 
	#FPU_FPCCR_ASPEN_Pos
 31

	)

1390 
	#FPU_FPCCR_ASPEN_Msk
 (1UL << 
FPU_FPCCR_ASPEN_Pos
Ë

	)

1392 
	#FPU_FPCCR_LSPEN_Pos
 30

	)

1393 
	#FPU_FPCCR_LSPEN_Msk
 (1UL << 
FPU_FPCCR_LSPEN_Pos
Ë

	)

1395 
	#FPU_FPCCR_MONRDY_Pos
 8

	)

1396 
	#FPU_FPCCR_MONRDY_Msk
 (1UL << 
FPU_FPCCR_MONRDY_Pos
Ë

	)

1398 
	#FPU_FPCCR_BFRDY_Pos
 6

	)

1399 
	#FPU_FPCCR_BFRDY_Msk
 (1UL << 
FPU_FPCCR_BFRDY_Pos
Ë

	)

1401 
	#FPU_FPCCR_MMRDY_Pos
 5

	)

1402 
	#FPU_FPCCR_MMRDY_Msk
 (1UL << 
FPU_FPCCR_MMRDY_Pos
Ë

	)

1404 
	#FPU_FPCCR_HFRDY_Pos
 4

	)

1405 
	#FPU_FPCCR_HFRDY_Msk
 (1UL << 
FPU_FPCCR_HFRDY_Pos
Ë

	)

1407 
	#FPU_FPCCR_THREAD_Pos
 3

	)

1408 
	#FPU_FPCCR_THREAD_Msk
 (1UL << 
FPU_FPCCR_THREAD_Pos
Ë

	)

1410 
	#FPU_FPCCR_USER_Pos
 1

	)

1411 
	#FPU_FPCCR_USER_Msk
 (1UL << 
FPU_FPCCR_USER_Pos
Ë

	)

1413 
	#FPU_FPCCR_LSPACT_Pos
 0

	)

1414 
	#FPU_FPCCR_LSPACT_Msk
 (1UL << 
FPU_FPCCR_LSPACT_Pos
Ë

	)

1417 
	#FPU_FPCAR_ADDRESS_Pos
 3

	)

1418 
	#FPU_FPCAR_ADDRESS_Msk
 (0x1FFFFFFFUL << 
FPU_FPCAR_ADDRESS_Pos
Ë

	)

1421 
	#FPU_FPDSCR_AHP_Pos
 26

	)

1422 
	#FPU_FPDSCR_AHP_Msk
 (1UL << 
FPU_FPDSCR_AHP_Pos
Ë

	)

1424 
	#FPU_FPDSCR_DN_Pos
 25

	)

1425 
	#FPU_FPDSCR_DN_Msk
 (1UL << 
FPU_FPDSCR_DN_Pos
Ë

	)

1427 
	#FPU_FPDSCR_FZ_Pos
 24

	)

1428 
	#FPU_FPDSCR_FZ_Msk
 (1UL << 
FPU_FPDSCR_FZ_Pos
Ë

	)

1430 
	#FPU_FPDSCR_RMode_Pos
 22

	)

1431 
	#FPU_FPDSCR_RMode_Msk
 (3UL << 
FPU_FPDSCR_RMode_Pos
Ë

	)

1434 
	#FPU_MVFR0_FP_roundög_modes_Pos
 28

	)

1435 
	#FPU_MVFR0_FP_roundög_modes_Msk
 (0xFUL << 
FPU_MVFR0_FP_roundög_modes_Pos
Ë

	)

1437 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Pos
 24

	)

1438 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Msk
 (0xFUL << 
FPU_MVFR0_Sh‹t_ve˘‹s_Pos
Ë

	)

1440 
	#FPU_MVFR0_Squ¨e_roŸ_Pos
 20

	)

1441 
	#FPU_MVFR0_Squ¨e_roŸ_Msk
 (0xFUL << 
FPU_MVFR0_Squ¨e_roŸ_Pos
Ë

	)

1443 
	#FPU_MVFR0_Divide_Pos
 16

	)

1444 
	#FPU_MVFR0_Divide_Msk
 (0xFUL << 
FPU_MVFR0_Divide_Pos
Ë

	)

1446 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Pos
 12

	)

1447 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Msk
 (0xFUL << 
FPU_MVFR0_FP_ex˚p_å≠pög_Pos
Ë

	)

1449 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
 8

	)

1450 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
Ë

	)

1452 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
 4

	)

1453 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
Ë

	)

1455 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Pos
 0

	)

1456 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Msk
 (0xFUL << 
FPU_MVFR0_A_SIMD_ªgi°îs_Pos
Ë

	)

1459 
	#FPU_MVFR1_FP_fu£d_MAC_Pos
 28

	)

1460 
	#FPU_MVFR1_FP_fu£d_MAC_Msk
 (0xFUL << 
FPU_MVFR1_FP_fu£d_MAC_Pos
Ë

	)

1462 
	#FPU_MVFR1_FP_HPFP_Pos
 24

	)

1463 
	#FPU_MVFR1_FP_HPFP_Msk
 (0xFUL << 
FPU_MVFR1_FP_HPFP_Pos
Ë

	)

1465 
	#FPU_MVFR1_D_NaN_mode_Pos
 4

	)

1466 
	#FPU_MVFR1_D_NaN_mode_Msk
 (0xFUL << 
FPU_MVFR1_D_NaN_mode_Pos
Ë

	)

1468 
	#FPU_MVFR1_FtZ_mode_Pos
 0

	)

1469 
	#FPU_MVFR1_FtZ_mode_Msk
 (0xFUL << 
FPU_MVFR1_FtZ_mode_Pos
Ë

	)

1487 
__IO
 
uöt32_t
 
DHCSR
;

1488 
__O
 
uöt32_t
 
DCRSR
;

1489 
__IO
 
uöt32_t
 
DCRDR
;

1490 
__IO
 
uöt32_t
 
DEMCR
;

1491 } 
	tC‹eDebug_Ty≥
;

1494 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

1495 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1497 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

1498 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1500 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

1501 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1503 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

1504 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1506 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

1507 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1509 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

1510 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1512 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

1513 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1515 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

1516 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1518 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

1519 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1521 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

1522 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1524 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

1525 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1527 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

1528 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL << 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

1531 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

1532 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1534 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

1535 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL << 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

1538 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

1539 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1541 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

1542 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1544 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

1545 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1547 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

1548 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1550 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

1551 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1553 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

1554 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1556 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

1557 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1559 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

1560 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1562 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

1563 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1565 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

1566 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1568 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

1569 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1571 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

1572 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1574 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

1575 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

1587 
	#SCS_BASE
 (0xE000E000ULË

	)

1588 
	#ITM_BASE
 (0xE0000000ULË

	)

1589 
	#DWT_BASE
 (0xE0001000ULË

	)

1590 
	#TPI_BASE
 (0xE0040000ULË

	)

1591 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1592 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1593 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1594 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1596 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1597 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1598 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1599 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1600 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1601 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1602 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1603 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1605 #i‡(
__MPU_PRESENT
 == 1)

1606 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1607 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1610 #i‡(
__FPU_PRESENT
 == 1)

1611 
	#FPU_BASE
 (
SCS_BASE
 + 0x0F30ULË

	)

1612 
	#FPU
 ((
FPU_Ty≥
 *Ë
FPU_BASE
 )

	)

1649 
__STATIC_INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1651 
uöt32_t
 
ªg_vÆue
;

1652 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07);

1654 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1655 
ªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1656 
ªg_vÆue
 = (reg_value |

1657 ((
uöt32_t
)0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1658 (
Pri‹ôyGroupTmp
 << 8));

1659 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1669 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1671  ((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
);

1681 
__STATIC_INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1684 
NVIC
->
ISER
[(
uöt32_t
)((
öt32_t
)
IRQn
) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F));

1694 
__STATIC_INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1696 
NVIC
->
ICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1710 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1712 ((
uöt32_t
Ë((
NVIC
->
ISPR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1722 
__STATIC_INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1724 
NVIC
->
ISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1734 
__STATIC_INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1736 
NVIC
->
ICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1749 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1751 ((
uöt32_t
)((
NVIC
->
IABR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1764 
__STATIC_INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1766 if(
IRQn
 < 0) {

1767 
SCB
->
SHPR
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1769 
NVIC
->
IP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1784 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1787 if(
IRQn
 < 0) {

1788 ((
uöt32_t
)(
SCB
->
SHPR
[((uöt32_t)(
IRQn
Ë& 0xF)-4] >> (8 - 
__NVIC_PRIO_BITS
))); }

1790 ((
uöt32_t
)(
NVIC
->
IP
[(uöt32_t)(
IRQn
)] >> (8 - 
__NVIC_PRIO_BITS
))); }

1806 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1808 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1809 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1810 
uöt32_t
 
SubPri‹ôyBôs
;

1812 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1813 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1816 ((
Pªem±Pri‹ôy
 & ((1 << (
Pªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
SubPri‹ôyBôs
) |

1817 ((
SubPri‹ôy
 & ((1 << (
SubPri‹ôyBôs
 )) - 1)))

1834 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1836 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1837 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1838 
uöt32_t
 
SubPri‹ôyBôs
;

1840 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1841 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1843 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1844 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1852 
__STATIC_INLINE
 
NVIC_Sy°emRe£t
()

1854 
__DSB
();

1856 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1857 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1858 
SCB_AIRCR_SYSRESETREQ_Msk
);

1859 
__DSB
();

1874 
	#CCSIDR_WAYS
(
x
Ë(((xË& 
SCB_CCSIDR_ASSOCIATIVITY_Msk
Ë>> 
SCB_CCSIDR_ASSOCIATIVITY_Pos
)

	)

1875 
	#CCSIDR_SETS
(
x
Ë(((xË& 
SCB_CCSIDR_NUMSETS_Msk
 ) >> 
SCB_CCSIDR_NUMSETS_Pos
 )

	)

1876 
	#CCSIDR_LSSHIFT
(
x
Ë(((xË& 
SCB_CCSIDR_LINESIZE_Msk
 ) >> 
SCB_CCSIDR_LINESIZE_Pos
 )

	)

1883 
__STATIC_INLINE
 
SCB_E«bÀICache
()

1885 #i‡(
__ICACHE_PRESENT
 == 1)

1886 
__DSB
();

1887 
__ISB
();

1888 
SCB
->
ICIALLU
 = 0;

1889 
SCB
->
CCR
 |
SCB_CCR_IC_Msk
;

1890 
__DSB
();

1891 
__ISB
();

1900 
__STATIC_INLINE
 
SCB_DißbÀICache
()

1902 #i‡(
__ICACHE_PRESENT
 == 1)

1903 
__DSB
();

1904 
__ISB
();

1905 
SCB
->
CCR
 &~
SCB_CCR_IC_Msk
;

1906 
SCB
->
ICIALLU
 = 0;

1907 
__DSB
();

1908 
__ISB
();

1917 
__STATIC_INLINE
 
SCB_InvÆid©eICache
()

1919 #i‡(
__ICACHE_PRESENT
 == 1)

1920 
__DSB
();

1921 
__ISB
();

1922 
SCB
->
ICIALLU
 = 0;

1923 
__DSB
();

1924 
__ISB
();

1933 
__STATIC_INLINE
 
SCB_E«bÀDCache
()

1935 #i‡(
__DCACHE_PRESENT
 == 1)

1936 
uöt32_t
 
ccsidr
, 
sshi·
, 
wshi·
, 
sw
;

1937 
uöt32_t
 
£ts
, 
ways
;

1939 
ccsidr
 = 
SCB
->
CCSIDR
;

1940 
£ts
 = 
CCSIDR_SETS
(
ccsidr
);

1941 
sshi·
 = 
CCSIDR_LSSHIFT
(
ccsidr
) + 4;

1942 
ways
 = 
CCSIDR_WAYS
(
ccsidr
);

1943 
wshi·
 = 
__CLZ
(
ways
) & 0x1f;

1945 
__DSB
();

1948 
öt32_t
 
tmpways
 = 
ways
;

1950 
sw
 = ((
tmpways
 << 
wshi·
Ë| (
£ts
 << 
sshi·
));

1951 
SCB
->
DCISW
 = 
sw
;

1952 } 
tmpways
--);

1953 } 
£ts
--);

1954 
__DSB
();

1956 
SCB
->
CCR
 |
SCB_CCR_DC_Msk
;

1958 
__DSB
();

1959 
__ISB
();

1968 
__STATIC_INLINE
 
SCB_DißbÀDCache
()

1970 #i‡(
__DCACHE_PRESENT
 == 1)

1971 
uöt32_t
 
ccsidr
, 
sshi·
, 
wshi·
, 
sw
;

1972 
uöt32_t
 
£ts
, 
ways
;

1974 
ccsidr
 = 
SCB
->
CCSIDR
;

1975 
£ts
 = 
CCSIDR_SETS
(
ccsidr
);

1976 
sshi·
 = 
CCSIDR_LSSHIFT
(
ccsidr
) + 4;

1977 
ways
 = 
CCSIDR_WAYS
(
ccsidr
);

1978 
wshi·
 = 
__CLZ
(
ways
) & 0x1f;

1980 
__DSB
();

1982 
SCB
->
CCR
 &~
SCB_CCR_DC_Msk
;

1985 
öt32_t
 
tmpways
 = 
ways
;

1987 
sw
 = ((
tmpways
 << 
wshi·
Ë| (
£ts
 << 
sshi·
));

1988 
SCB
->
DCCISW
 = 
sw
;

1989 } 
tmpways
--);

1990 } 
£ts
--);

1993 
__DSB
();

1994 
__ISB
();

2003 
__STATIC_INLINE
 
SCB_InvÆid©eDCache
()

2005 #i‡(
__DCACHE_PRESENT
 == 1)

2006 
uöt32_t
 
ccsidr
, 
sshi·
, 
wshi·
, 
sw
;

2007 
uöt32_t
 
£ts
, 
ways
;

2009 
ccsidr
 = 
SCB
->
CCSIDR
;

2010 
£ts
 = 
CCSIDR_SETS
(
ccsidr
);

2011 
sshi·
 = 
CCSIDR_LSSHIFT
(
ccsidr
) + 4;

2012 
ways
 = 
CCSIDR_WAYS
(
ccsidr
);

2013 
wshi·
 = 
__CLZ
(
ways
) & 0x1f;

2015 
__DSB
();

2018 
öt32_t
 
tmpways
 = 
ways
;

2020 
sw
 = ((
tmpways
 << 
wshi·
Ë| (
£ts
 << 
sshi·
));

2021 
SCB
->
DCISW
 = 
sw
;

2022 } 
tmpways
--);

2023 } 
£ts
--);

2025 
__DSB
();

2026 
__ISB
();

2035 
__STATIC_INLINE
 
SCB_CÀ™DCache
()

2037 #i‡(
__DCACHE_PRESENT
 == 1)

2038 
uöt32_t
 
ccsidr
, 
sshi·
, 
wshi·
, 
sw
;

2039 
uöt32_t
 
£ts
, 
ways
;

2041 
ccsidr
 = 
SCB
->
CCSIDR
;

2042 
£ts
 = 
CCSIDR_SETS
(
ccsidr
);

2043 
sshi·
 = 
CCSIDR_LSSHIFT
(
ccsidr
) + 4;

2044 
ways
 = 
CCSIDR_WAYS
(
ccsidr
);

2045 
wshi·
 = 
__CLZ
(
ways
) & 0x1f;

2047 
__DSB
();

2050 
öt32_t
 
tmpways
 = 
ways
;

2052 
sw
 = ((
tmpways
 << 
wshi·
Ë| (
£ts
 << 
sshi·
));

2053 
SCB
->
DCCSW
 = 
sw
;

2054 } 
tmpways
--);

2055 } 
£ts
--);

2057 
__DSB
();

2058 
__ISB
();

2067 
__STATIC_INLINE
 
SCB_CÀ™InvÆid©eDCache
()

2069 #i‡(
__DCACHE_PRESENT
 == 1)

2070 
uöt32_t
 
ccsidr
, 
sshi·
, 
wshi·
, 
sw
;

2071 
uöt32_t
 
£ts
, 
ways
;

2073 
ccsidr
 = 
SCB
->
CCSIDR
;

2074 
£ts
 = 
CCSIDR_SETS
(
ccsidr
);

2075 
sshi·
 = 
CCSIDR_LSSHIFT
(
ccsidr
) + 4;

2076 
ways
 = 
CCSIDR_WAYS
(
ccsidr
);

2077 
wshi·
 = 
__CLZ
(
ways
) & 0x1f;

2079 
__DSB
();

2082 
öt32_t
 
tmpways
 = 
ways
;

2084 
sw
 = ((
tmpways
 << 
wshi·
Ë| (
£ts
 << 
sshi·
));

2085 
SCB
->
DCCISW
 = 
sw
;

2086 } 
tmpways
--);

2087 } 
£ts
--);

2089 
__DSB
();

2090 
__ISB
();

2106 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

2123 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

2125 i‡((
ticks
 - 1Ë> 
SysTick_LOAD_RELOAD_Msk
)  (1);

2127 
SysTick
->
LOAD
 = 
ticks
 - 1;

2128 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

2129 
SysTick
->
VAL
 = 0;

2130 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

2131 
SysTick_CTRL_TICKINT_Msk
 |

2132 
SysTick_CTRL_ENABLE_Msk
;

2149 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

2150 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

2163 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

2165 i‡((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) &&

2166 (
	gITM
->
	gTER
 & (1UL << 0) ) )

2168 
	gITM
->
	gPORT
[0].
	gu32
 == 0);

2169 
	gITM
->
	gPORT
[0].
	gu8
 = (
uöt8_t
Ë
ch
;

2171  (
	gch
);

2182 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 () {

2183 
öt32_t
 
	gch
 = -1;

2185 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

2186 
ch
 = 
ITM_RxBuf„r
;

2187 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

2190  (
	gch
);

2201 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 () {

2203 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

2215 #ifde‡
__˝lu•lus


	@CMSIS/Include/core_cmFunc.h

38 #i‚de‡
__CORE_CMFUNC_H


39 
	#__CORE_CMFUNC_H


	)

48 #i‡ 
deföed
 ( 
__CC_ARM
 )

51 #i‡(
__ARMCC_VERSION
 < 400677)

64 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

66 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

67 (
__ªgC⁄åﬁ
);

68 
	}
}

77 
__STATIC_INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

79 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

80 
__ªgC⁄åﬁ
 = 
c⁄åﬁ
;

81 
	}
}

90 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_IPSR
()

92 
uöt32_t
 
__ªgIPSR
 
	`__ASM
("ipsr");

93 (
__ªgIPSR
);

94 
	}
}

103 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_APSR
()

105 
uöt32_t
 
__ªgAPSR
 
	`__ASM
("apsr");

106 (
__ªgAPSR
);

107 
	}
}

116 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_xPSR
()

118 
uöt32_t
 
__ªgXPSR
 
	`__ASM
("xpsr");

119 (
__ªgXPSR
);

120 
	}
}

129 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PSP
()

131 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

132 (
__ªgPro˚ssSèckPoöãr
);

133 
	}
}

142 
__STATIC_INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

144 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

145 
__ªgPro˚ssSèckPoöãr
 = 
t›OfProcSèck
;

146 
	}
}

155 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_MSP
()

157 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

158 (
__ªgMaöSèckPoöãr
);

159 
	}
}

168 
__STATIC_INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

170 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

171 
__ªgMaöSèckPoöãr
 = 
t›OfMaöSèck
;

172 
	}
}

181 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

183 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

184 (
__ªgPriMask
);

185 
	}
}

194 
__STATIC_INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

196 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

197 
__ªgPriMask
 = (
¥iMask
);

198 
	}
}

201 #i‡ (
__CORTEX_M
 >0x03Ë|| (
__CORTEX_SC
 >= 300)

208 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

216 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

225 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

227 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

228 (
__ªgBa£Pri
);

229 
	}
}

238 
__STATIC_INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

240 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

241 
__ªgBa£Pri
 = (
ba£Pri
 & 0xff);

242 
	}
}

251 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

253 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

254 (
__ªgFau…Mask
);

255 
	}
}

264 
__STATIC_INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

266 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

267 
__ªgFau…Mask
 = (
Áu…Mask
 & (
uöt32_t
)1);

268 
	}
}

273 #i‡ (
__CORTEX_M
 == 0x04) || (__CORTEX_M == 0x07)

281 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

283 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

284 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

285 (
__ªgÂs¸
);

289 
	}
}

298 
__STATIC_INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

300 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

301 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

302 
__ªgÂs¸
 = (
Âs¸
);

304 
	}
}

309 #ñi‡
deföed
 ( 
__GNUC__
 )

317 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__íabÀ_úq
()

319 
__ASM
 volatile ("cpsie i" : : : "memory");

320 
	}
}

328 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__dißbÀ_úq
()

330 
__ASM
 volatile ("cpsid i" : : : "memory");

331 
	}
}

340 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

342 
uöt32_t
 
ªsu…
;

344 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

345 (
ªsu…
);

346 
	}
}

355 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

357 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) : "memory");

358 
	}
}

367 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_IPSR
()

369 
uöt32_t
 
ªsu…
;

371 
__ASM
 vﬁ©ûê("MRS %0, ip§" : "Ù" (
ªsu…
) );

372 (
ªsu…
);

373 
	}
}

382 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_APSR
()

384 
uöt32_t
 
ªsu…
;

386 
__ASM
 vﬁ©ûê("MRS %0,áp§" : "Ù" (
ªsu…
) );

387 (
ªsu…
);

388 
	}
}

397 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_xPSR
()

399 
uöt32_t
 
ªsu…
;

401 
__ASM
 vﬁ©ûê("MRS %0, xp§" : "Ù" (
ªsu…
) );

402 (
ªsu…
);

403 
	}
}

412 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PSP
()

414 
uöt32_t
 
ªsu…
;

416 
__ASM
 vﬁ©ûê("MRS %0,Ö•\n" : "Ù" (
ªsu…
) );

417 (
ªsu…
);

418 
	}
}

427 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

429 
__ASM
 vﬁ©ûê("MSRÖ•, %0\n" : : "r" (
t›OfProcSèck
) : "sp");

430 
	}
}

439 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_MSP
()

441 
uöt32_t
 
ªsu…
;

443 
__ASM
 vﬁ©ûê("MRS %0, m•\n" : "Ù" (
ªsu…
) );

444 (
ªsu…
);

445 
	}
}

454 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

456 
__ASM
 vﬁ©ûê("MSR m•, %0\n" : : "r" (
t›OfMaöSèck
) : "sp");

457 
	}
}

466 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

468 
uöt32_t
 
ªsu…
;

470 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) );

471 (
ªsu…
);

472 
	}
}

481 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

483 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) : "memory");

484 
	}
}

487 #i‡ (
__CORTEX_M
 >= 0x03)

494 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__íabÀ_Áu…_úq
()

496 
__ASM
 volatile ("cpsie f" : : : "memory");

497 
	}
}

505 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__dißbÀ_Áu…_úq
()

507 
__ASM
 volatile ("cpsid f" : : : "memory");

508 
	}
}

517 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

519 
uöt32_t
 
ªsu…
;

521 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_max" : "Ù" (
ªsu…
) );

522 (
ªsu…
);

523 
	}
}

532 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
vÆue
)

534 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
vÆue
) : "memory");

535 
	}
}

544 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

546 
uöt32_t
 
ªsu…
;

548 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

549 (
ªsu…
);

550 
	}
}

559 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

561 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) : "memory");

562 
	}
}

567 #i‡ (
__CORTEX_M
 == 0x04) || (__CORTEX_M == 0x07)

575 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

577 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

578 
uöt32_t
 
ªsu…
;

581 
__ASM
 volatile ("");

582 
__ASM
 vﬁ©ûê("VMRS %0, fps¸" : "Ù" (
ªsu…
) );

583 
__ASM
 volatile ("");

584 (
ªsu…
);

588 
	}
}

597 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

599 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

601 
__ASM
 volatile ("");

602 
__ASM
 vﬁ©ûê("VMSR fps¸, %0" : : "r" (
Âs¸
) : "vfpcc");

603 
__ASM
 volatile ("");

605 
	}
}

610 #ñi‡
deföed
 ( 
__ICCARM__
 )

612 
	~<cmsis_ür.h
>

615 #ñi‡
deföed
 ( 
__TMS470__
 )

617 
	~<cmsis_ccs.h
>

620 #ñi‡
deföed
 ( 
__TASKING__
 )

629 #ñi‡
deföed
 ( 
__CSMC__
 )

631 
	~<cmsis_csm.h
>

	@CMSIS/Include/core_cmInstr.h

38 #i‚de‡
__CORE_CMINSTR_H


39 
	#__CORE_CMINSTR_H


	)

48 #i‡ 
deföed
 ( 
__CC_ARM
 )

51 #i‡(
__ARMCC_VERSION
 < 400677)

60 
	#__NOP
 
__n›


	)

68 
	#__WFI
 
__wfi


	)

76 
	#__WFE
 
__w„


	)

83 
	#__SEV
 
__£v


	)

92 
	#__ISB
(Ë
	`__isb
(0xF)

	)

100 
	#__DSB
(Ë
	`__dsb
(0xF)

	)

108 
	#__DMB
(Ë
	`__dmb
(0xF)

	)

118 
	#__REV
 
__ªv


	)

128 #i‚de‡
__NO_EMBEDDED_ASM


129 
__©åibuã__
((
£˘i⁄
(".ªv16_ãxt"))Ë
__STATIC_INLINE
 
__ASM
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

131 
ªv16
 
r0
,Ñ0

132 
bx
 
Ã


133 
	}
}

143 #i‚de‡
__NO_EMBEDDED_ASM


144 
__©åibuã__
((
£˘i⁄
(".ªvsh_ãxt"))Ë
__STATIC_INLINE
 
__ASM
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

146 
ªvsh
 
r0
,Ñ0

147 
bx
 
Ã


148 
	}
}

160 
	#__ROR
 
__r‹


	)

171 
	#__BKPT
(
vÆue
Ë
	`__bªakpoöt
(vÆue)

	)

174 #i‡ (
__CORTEX_M
 >0x03Ë|| (
__CORTEX_SC
 >= 300)

183 
	#__RBIT
 
__rbô


	)

193 
	#__LDREXB
(
±r
Ë((
uöt8_t
 ) 
	`__ldªx
’å))

	)

203 
	#__LDREXH
(
±r
Ë((
uöt16_t
Ë
	`__ldªx
’å))

	)

213 
	#__LDREXW
(
±r
Ë((
uöt32_t
 ) 
	`__ldªx
’å))

	)

225 
	#__STREXB
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

237 
	#__STREXH
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

249 
	#__STREXW
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

257 
	#__CLREX
 
__˛ªx


	)

268 
	#__SSAT
 
__sßt


	)

279 
	#__USAT
 
__ußt


	)

289 
	#__CLZ
 
__˛z


	)

299 #i‚de‡
__NO_EMBEDDED_ASM


300 
__©åibuã__
((
£˘i⁄
(".ºx_ãxt"))Ë
__STATIC_INLINE
 
__ASM
 
uöt32_t
 
	$__RRX
(
uöt32_t
 
vÆue
)

302 
ºx
 
r0
,Ñ0

303 
bx
 
Ã


304 
	}
}

315 
	#__LDRBT
(
±r
Ë((
uöt8_t
 ) 
	`__ldπ
’å))

	)

325 
	#__LDRHT
(
±r
Ë((
uöt16_t
Ë
	`__ldπ
’å))

	)

335 
	#__LDRT
(
±r
Ë((
uöt32_t
 ) 
	`__ldπ
’å))

	)

345 
	#__STRBT
(
vÆue
, 
±r
Ë
	`__°π
(vÆue,Öå)

	)

355 
	#__STRHT
(
vÆue
, 
±r
Ë
	`__°π
(vÆue,Öå)

	)

365 
	#__STRT
(
vÆue
, 
±r
Ë
	`__°π
(vÆue,Öå)

	)

370 #ñi‡
deföed
 ( 
__GNUC__
 )

376 #i‡
deföed
 (
__thumb__
Ë&& !deföed (
__thumb2__
)

377 
	#__CMSIS_GCC_OUT_REG
(
r
Ë"ˆ" (r)

	)

378 
	#__CMSIS_GCC_USE_REG
(
r
Ë"l" (r)

	)

380 
	#__CMSIS_GCC_OUT_REG
(
r
Ë"Ù" (r)

	)

381 
	#__CMSIS_GCC_USE_REG
(
r
Ë"r" (r)

	)

388 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__NOP
()

390 
__ASM
 volatile ("nop");

391 
	}
}

399 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__WFI
()

401 
__ASM
 volatile ("wfi");

402 
	}
}

410 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__WFE
()

412 
__ASM
 volatile ("wfe");

413 
	}
}

420 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__SEV
()

422 
__ASM
 volatile ("sev");

423 
	}
}

432 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__ISB
()

434 
__ASM
 volatile ("isb");

435 
	}
}

443 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__DSB
()

445 
__ASM
 volatile ("dsb");

446 
	}
}

454 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__DMB
()

456 
__ASM
 volatile ("dmb");

457 
	}
}

467 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__REV
(
uöt32_t
 
vÆue
)

469 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 5)

470  
	`__buûtö_bsw≠32
(
vÆue
);

472 
uöt32_t
 
ªsu…
;

474 
__ASM
 vﬁ©ûê("ªv %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

475 (
ªsu…
);

477 
	}
}

487 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

489 
uöt32_t
 
ªsu…
;

491 
__ASM
 vﬁ©ûê("ªv16 %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

492 (
ªsu…
);

493 
	}
}

503 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

505 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

506  ()
	`__buûtö_bsw≠16
(
vÆue
);

508 
uöt32_t
 
ªsu…
;

510 
__ASM
 vﬁ©ûê("ªvsh %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

511 (
ªsu…
);

513 
	}
}

524 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__ROR
(
uöt32_t
 
›1
, uöt32_à
›2
)

526  (
›1
 >> 
›2
) | (op1 << (32 - op2));

527 
	}
}

538 
	#__BKPT
(
vÆue
Ë
__ASM
 vﬁ©ûê("bk± "#vÆue)

	)

541 #i‡ (
__CORTEX_M
 >0x03Ë|| (
__CORTEX_SC
 >= 300)

550 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

552 
uöt32_t
 
ªsu…
;

554 
__ASM
 vﬁ©ûê("rbô %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

555 (
ªsu…
);

556 
	}
}

566 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt8_t
 
	$__LDREXB
(vﬁ©ûê
uöt8_t
 *
addr
)

568 
uöt32_t
 
ªsu…
;

570 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

571 
__ASM
 vﬁ©ûê("ldªxb %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

576 
__ASM
 vﬁ©ûê("ldªxb %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) : "memory" );

578  ((
uöt8_t
Ë
ªsu…
);

579 
	}
}

589 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt16_t
 
	$__LDREXH
(vﬁ©ûê
uöt16_t
 *
addr
)

591 
uöt32_t
 
ªsu…
;

593 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

594 
__ASM
 vﬁ©ûê("ldªxh %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

599 
__ASM
 vﬁ©ûê("ldªxh %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) : "memory" );

601  ((
uöt16_t
Ë
ªsu…
);

602 
	}
}

612 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__LDREXW
(vﬁ©ûê
uöt32_t
 *
addr
)

614 
uöt32_t
 
ªsu…
;

616 
__ASM
 vﬁ©ûê("ldªx %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

617 (
ªsu…
);

618 
	}
}

630 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
addr
)

632 
uöt32_t
 
ªsu…
;

634 
__ASM
 vﬁ©ûê("°ªxb %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
addr
Ë: "r" ((
uöt32_t
)
vÆue
) );

635 (
ªsu…
);

636 
	}
}

648 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
addr
)

650 
uöt32_t
 
ªsu…
;

652 
__ASM
 vﬁ©ûê("°ªxh %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
addr
Ë: "r" ((
uöt32_t
)
vÆue
) );

653 (
ªsu…
);

654 
	}
}

666 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
addr
)

668 
uöt32_t
 
ªsu…
;

670 
__ASM
 vﬁ©ûê("°ªx %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
addr
Ë: "r" (
vÆue
) );

671 (
ªsu…
);

672 
	}
}

680 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__CLREX
()

682 
__ASM
 volatile ("clrex" ::: "memory");

683 
	}
}

694 
	#__SSAT
(
ARG1
,
ARG2
Ë\

	)

696 
uöt32_t
 
	g__RES
, 
	g__ARG1
 = (
ARG1
); \

697 
__ASM
 ("sßà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

698 
	g__RES
; \

710 
	#__USAT
(
ARG1
,
ARG2
Ë\

	)

712 
uöt32_t
 
	g__RES
, 
	g__ARG1
 = (
ARG1
); \

713 
__ASM
 ("ußà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

714 
	g__RES
; \

725 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt8_t
 
	$__CLZ
(
uöt32_t
 
vÆue
)

727 
uöt32_t
 
ªsu…
;

729 
__ASM
 vﬁ©ûê("˛z %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

730  ((
uöt8_t
Ë
ªsu…
);

731 
	}
}

741 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__RRX
(
uöt32_t
 
vÆue
)

743 
uöt32_t
 
ªsu…
;

745 
__ASM
 vﬁ©ûê("ºx %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

746 (
ªsu…
);

747 
	}
}

757 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt8_t
 
	$__LDRBT
(vﬁ©ûê
uöt8_t
 *
addr
)

759 
uöt32_t
 
ªsu…
;

761 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

762 
__ASM
 vﬁ©ûê("ldrbà%0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

767 
__ASM
 vﬁ©ûê("ldrbà%0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) : "memory" );

769  ((
uöt8_t
Ë
ªsu…
);

770 
	}
}

780 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt16_t
 
	$__LDRHT
(vﬁ©ûê
uöt16_t
 *
addr
)

782 
uöt32_t
 
ªsu…
;

784 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

785 
__ASM
 vﬁ©ûê("ldrhà%0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

790 
__ASM
 vﬁ©ûê("ldrhà%0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) : "memory" );

792  ((
uöt16_t
Ë
ªsu…
);

793 
	}
}

803 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__LDRT
(vﬁ©ûê
uöt32_t
 *
addr
)

805 
uöt32_t
 
ªsu…
;

807 
__ASM
 vﬁ©ûê("ldπ %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

808 (
ªsu…
);

809 
	}
}

819 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__STRBT
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
addr
)

821 
__ASM
 vﬁ©ûê("°rbà%1, %0" : "=Q" (*
addr
Ë: "r" ((
uöt32_t
)
vÆue
) );

822 
	}
}

832 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__STRHT
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
addr
)

834 
__ASM
 vﬁ©ûê("°rhà%1, %0" : "=Q" (*
addr
Ë: "r" ((
uöt32_t
)
vÆue
) );

835 
	}
}

845 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__STRT
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
addr
)

847 
__ASM
 vﬁ©ûê("°π %1, %0" : "=Q" (*
addr
Ë: "r" (
vÆue
) );

848 
	}
}

853 #ñi‡
deföed
 ( 
__ICCARM__
 )

855 
	~<cmsis_ür.h
>

858 #ñi‡
deföed
 ( 
__TMS470__
 )

860 
	~<cmsis_ccs.h
>

863 #ñi‡
deföed
 ( 
__TASKING__
 )

872 #ñi‡
deföed
 ( 
__CSMC__
 )

874 
	~<cmsis_csm.h
>

	@CMSIS/Include/core_cmSimd.h

38 #i‡
deföed
 ( 
__ICCARM__
 )

39 #¥agm®
sy°em_ö˛ude


42 #i‚de‡
__CORE_CMSIMD_H


43 
	#__CORE_CMSIMD_H


	)

45 #ifde‡
__˝lu•lus


61 #i‡ 
deföed
 ( 
__CC_ARM
 )

63 
	#__SADD8
 
__ßdd8


	)

64 
	#__QADD8
 
__qadd8


	)

65 
	#__SHADD8
 
__shadd8


	)

66 
	#__UADD8
 
__uadd8


	)

67 
	#__UQADD8
 
__uqadd8


	)

68 
	#__UHADD8
 
__uhadd8


	)

69 
	#__SSUB8
 
__ssub8


	)

70 
	#__QSUB8
 
__qsub8


	)

71 
	#__SHSUB8
 
__shsub8


	)

72 
	#__USUB8
 
__usub8


	)

73 
	#__UQSUB8
 
__uqsub8


	)

74 
	#__UHSUB8
 
__uhsub8


	)

75 
	#__SADD16
 
__ßdd16


	)

76 
	#__QADD16
 
__qadd16


	)

77 
	#__SHADD16
 
__shadd16


	)

78 
	#__UADD16
 
__uadd16


	)

79 
	#__UQADD16
 
__uqadd16


	)

80 
	#__UHADD16
 
__uhadd16


	)

81 
	#__SSUB16
 
__ssub16


	)

82 
	#__QSUB16
 
__qsub16


	)

83 
	#__SHSUB16
 
__shsub16


	)

84 
	#__USUB16
 
__usub16


	)

85 
	#__UQSUB16
 
__uqsub16


	)

86 
	#__UHSUB16
 
__uhsub16


	)

87 
	#__SASX
 
__ßsx


	)

88 
	#__QASX
 
__qasx


	)

89 
	#__SHASX
 
__shasx


	)

90 
	#__UASX
 
__uasx


	)

91 
	#__UQASX
 
__uqasx


	)

92 
	#__UHASX
 
__uhasx


	)

93 
	#__SSAX
 
__sßx


	)

94 
	#__QSAX
 
__qßx


	)

95 
	#__SHSAX
 
__shßx


	)

96 
	#__USAX
 
__ußx


	)

97 
	#__UQSAX
 
__uqßx


	)

98 
	#__UHSAX
 
__uhßx


	)

99 
	#__USAD8
 
__ußd8


	)

100 
	#__USADA8
 
__ußda8


	)

101 
	#__SSAT16
 
__sßt16


	)

102 
	#__USAT16
 
__ußt16


	)

103 
	#__UXTB16
 
__uxtb16


	)

104 
	#__UXTAB16
 
__uxèb16


	)

105 
	#__SXTB16
 
__sxtb16


	)

106 
	#__SXTAB16
 
__sxèb16


	)

107 
	#__SMUAD
 
__smuad


	)

108 
	#__SMUADX
 
__smuadx


	)

109 
	#__SMLAD
 
__smœd


	)

110 
	#__SMLADX
 
__smœdx


	)

111 
	#__SMLALD
 
__smœld


	)

112 
	#__SMLALDX
 
__smœldx


	)

113 
	#__SMUSD
 
__smusd


	)

114 
	#__SMUSDX
 
__smusdx


	)

115 
	#__SMLSD
 
__smlsd


	)

116 
	#__SMLSDX
 
__smlsdx


	)

117 
	#__SMLSLD
 
__sml¶d


	)

118 
	#__SMLSLDX
 
__sml¶dx


	)

119 
	#__SEL
 
__£l


	)

120 
	#__QADD
 
__qadd


	)

121 
	#__QSUB
 
__qsub


	)

123 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)ËË& 0x0000FFFFULË| \

	)

124 ((((
uöt32_t
)(
ARG2
)Ë<< (
ARG3
)) & 0xFFFF0000UL) )

126 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)ËË& 0xFFFF0000ULË| \

	)

127 ((((
uöt32_t
)(
ARG2
)Ë>> (
ARG3
)) & 0x0000FFFFUL) )

129 
	#__SMMLA
(
ARG1
,
ARG2
,
ARG3
Ë–(
öt32_t
)((((
öt64_t
)(ARG1Ë* (ARG2)Ë+ \

	)

130 ((
öt64_t
)(
ARG3
) << 32) ) >> 32))

133 #ñi‡
deföed
 ( 
__GNUC__
 )

135 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

137 
uöt32_t
 
ªsu…
;

139 
__ASM
 vﬁ©ûê("ßdd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

140 (
ªsu…
);

141 
	}
}

143 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

145 
uöt32_t
 
ªsu…
;

147 
__ASM
 vﬁ©ûê("qadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

148 (
ªsu…
);

149 
	}
}

151 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

153 
uöt32_t
 
ªsu…
;

155 
__ASM
 vﬁ©ûê("shadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

156 (
ªsu…
);

157 
	}
}

159 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

161 
uöt32_t
 
ªsu…
;

163 
__ASM
 vﬁ©ûê("uadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

164 (
ªsu…
);

165 
	}
}

167 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

169 
uöt32_t
 
ªsu…
;

171 
__ASM
 vﬁ©ûê("uqadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

172 (
ªsu…
);

173 
	}
}

175 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

177 
uöt32_t
 
ªsu…
;

179 
__ASM
 vﬁ©ûê("uhadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

180 (
ªsu…
);

181 
	}
}

184 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

186 
uöt32_t
 
ªsu…
;

188 
__ASM
 vﬁ©ûê("ssub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

189 (
ªsu…
);

190 
	}
}

192 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

194 
uöt32_t
 
ªsu…
;

196 
__ASM
 vﬁ©ûê("qsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

197 (
ªsu…
);

198 
	}
}

200 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

202 
uöt32_t
 
ªsu…
;

204 
__ASM
 vﬁ©ûê("shsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

205 (
ªsu…
);

206 
	}
}

208 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

210 
uöt32_t
 
ªsu…
;

212 
__ASM
 vﬁ©ûê("usub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

213 (
ªsu…
);

214 
	}
}

216 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

218 
uöt32_t
 
ªsu…
;

220 
__ASM
 vﬁ©ûê("uqsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

221 (
ªsu…
);

222 
	}
}

224 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

226 
uöt32_t
 
ªsu…
;

228 
__ASM
 vﬁ©ûê("uhsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

229 (
ªsu…
);

230 
	}
}

233 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

235 
uöt32_t
 
ªsu…
;

237 
__ASM
 vﬁ©ûê("ßdd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

238 (
ªsu…
);

239 
	}
}

241 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

243 
uöt32_t
 
ªsu…
;

245 
__ASM
 vﬁ©ûê("qadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

246 (
ªsu…
);

247 
	}
}

249 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

251 
uöt32_t
 
ªsu…
;

253 
__ASM
 vﬁ©ûê("shadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

254 (
ªsu…
);

255 
	}
}

257 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

259 
uöt32_t
 
ªsu…
;

261 
__ASM
 vﬁ©ûê("uadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

262 (
ªsu…
);

263 
	}
}

265 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

267 
uöt32_t
 
ªsu…
;

269 
__ASM
 vﬁ©ûê("uqadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

270 (
ªsu…
);

271 
	}
}

273 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

275 
uöt32_t
 
ªsu…
;

277 
__ASM
 vﬁ©ûê("uhadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

278 (
ªsu…
);

279 
	}
}

281 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

283 
uöt32_t
 
ªsu…
;

285 
__ASM
 vﬁ©ûê("ssub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

286 (
ªsu…
);

287 
	}
}

289 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

291 
uöt32_t
 
ªsu…
;

293 
__ASM
 vﬁ©ûê("qsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

294 (
ªsu…
);

295 
	}
}

297 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

299 
uöt32_t
 
ªsu…
;

301 
__ASM
 vﬁ©ûê("shsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

302 (
ªsu…
);

303 
	}
}

305 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

307 
uöt32_t
 
ªsu…
;

309 
__ASM
 vﬁ©ûê("usub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

310 (
ªsu…
);

311 
	}
}

313 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

315 
uöt32_t
 
ªsu…
;

317 
__ASM
 vﬁ©ûê("uqsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

318 (
ªsu…
);

319 
	}
}

321 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

323 
uöt32_t
 
ªsu…
;

325 
__ASM
 vﬁ©ûê("uhsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

326 (
ªsu…
);

327 
	}
}

329 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

331 
uöt32_t
 
ªsu…
;

333 
__ASM
 vﬁ©ûê("ßsx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

334 (
ªsu…
);

335 
	}
}

337 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

339 
uöt32_t
 
ªsu…
;

341 
__ASM
 vﬁ©ûê("qasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

342 (
ªsu…
);

343 
	}
}

345 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

347 
uöt32_t
 
ªsu…
;

349 
__ASM
 vﬁ©ûê("shasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

350 (
ªsu…
);

351 
	}
}

353 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

355 
uöt32_t
 
ªsu…
;

357 
__ASM
 vﬁ©ûê("uasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

358 (
ªsu…
);

359 
	}
}

361 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

363 
uöt32_t
 
ªsu…
;

365 
__ASM
 vﬁ©ûê("uqasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

366 (
ªsu…
);

367 
	}
}

369 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

371 
uöt32_t
 
ªsu…
;

373 
__ASM
 vﬁ©ûê("uhasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

374 (
ªsu…
);

375 
	}
}

377 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

379 
uöt32_t
 
ªsu…
;

381 
__ASM
 vﬁ©ûê("sßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

382 (
ªsu…
);

383 
	}
}

385 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

387 
uöt32_t
 
ªsu…
;

389 
__ASM
 vﬁ©ûê("qßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

390 (
ªsu…
);

391 
	}
}

393 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

395 
uöt32_t
 
ªsu…
;

397 
__ASM
 vﬁ©ûê("shßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

398 (
ªsu…
);

399 
	}
}

401 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

403 
uöt32_t
 
ªsu…
;

405 
__ASM
 vﬁ©ûê("ußx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

406 (
ªsu…
);

407 
	}
}

409 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

411 
uöt32_t
 
ªsu…
;

413 
__ASM
 vﬁ©ûê("uqßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

414 (
ªsu…
);

415 
	}
}

417 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

419 
uöt32_t
 
ªsu…
;

421 
__ASM
 vﬁ©ûê("uhßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

422 (
ªsu…
);

423 
	}
}

425 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USAD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

427 
uöt32_t
 
ªsu…
;

429 
__ASM
 vﬁ©ûê("ußd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

430 (
ªsu…
);

431 
	}
}

433 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USADA8
(
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

435 
uöt32_t
 
ªsu…
;

437 
__ASM
 vﬁ©ûê("ußda8 %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

438 (
ªsu…
);

439 
	}
}

441 
	#__SSAT16
(
ARG1
,
ARG2
Ë\

	)

443 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

444 
__ASM
 ("sßt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

445 
__RES
; \

448 
	#__USAT16
(
ARG1
,
ARG2
Ë\

	)

450 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

451 
__ASM
 ("ußt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

452 
__RES
; \

455 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UXTB16
(
uöt32_t
 
›1
)

457 
uöt32_t
 
ªsu…
;

459 
__ASM
 vﬁ©ûê("uxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

460 (
ªsu…
);

461 
	}
}

463 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

465 
uöt32_t
 
ªsu…
;

467 
__ASM
 vﬁ©ûê("uxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

468 (
ªsu…
);

469 
	}
}

471 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SXTB16
(
uöt32_t
 
›1
)

473 
uöt32_t
 
ªsu…
;

475 
__ASM
 vﬁ©ûê("sxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

476 (
ªsu…
);

477 
	}
}

479 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

481 
uöt32_t
 
ªsu…
;

483 
__ASM
 vﬁ©ûê("sxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

484 (
ªsu…
);

485 
	}
}

487 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMUAD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

489 
uöt32_t
 
ªsu…
;

491 
__ASM
 vﬁ©ûê("smuad %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

492 (
ªsu…
);

493 
	}
}

495 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMUADX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

497 
uöt32_t
 
ªsu…
;

499 
__ASM
 vﬁ©ûê("smuadx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

500 (
ªsu…
);

501 
	}
}

503 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMLAD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

505 
uöt32_t
 
ªsu…
;

507 
__ASM
 vﬁ©ûê("smœd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

508 (
ªsu…
);

509 
	}
}

511 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMLADX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

513 
uöt32_t
 
ªsu…
;

515 
__ASM
 vﬁ©ûê("smœdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

516 (
ªsu…
);

517 
	}
}

519 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt64_t
 
	$__SMLALD
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

521 
	uŒªg_u
{

522 
uöt32_t
 
w32
[2];

523 
uöt64_t
 
w64
;

524 } 
Œr
;

525 
Œr
.
w64
 = 
acc
;

527 #i‚de‡
__ARMEB__


528 
__ASM
 vﬁ©ûê("smœld %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

530 
__ASM
 vﬁ©ûê("smœld %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

533 (
Œr
.
w64
);

534 
	}
}

536 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt64_t
 
	$__SMLALDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

538 
	uŒªg_u
{

539 
uöt32_t
 
w32
[2];

540 
uöt64_t
 
w64
;

541 } 
Œr
;

542 
Œr
.
w64
 = 
acc
;

544 #i‚de‡
__ARMEB__


545 
__ASM
 vﬁ©ûê("smœldx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

547 
__ASM
 vﬁ©ûê("smœldx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

550 (
Œr
.
w64
);

551 
	}
}

553 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMUSD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

555 
uöt32_t
 
ªsu…
;

557 
__ASM
 vﬁ©ûê("smusd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

558 (
ªsu…
);

559 
	}
}

561 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMUSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

563 
uöt32_t
 
ªsu…
;

565 
__ASM
 vﬁ©ûê("smusdx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

566 (
ªsu…
);

567 
	}
}

569 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMLSD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

571 
uöt32_t
 
ªsu…
;

573 
__ASM
 vﬁ©ûê("smlsd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

574 (
ªsu…
);

575 
	}
}

577 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMLSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

579 
uöt32_t
 
ªsu…
;

581 
__ASM
 vﬁ©ûê("smlsdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

582 (
ªsu…
);

583 
	}
}

585 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt64_t
 
	$__SMLSLD
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

587 
	uŒªg_u
{

588 
uöt32_t
 
w32
[2];

589 
uöt64_t
 
w64
;

590 } 
Œr
;

591 
Œr
.
w64
 = 
acc
;

593 #i‚de‡
__ARMEB__


594 
__ASM
 vﬁ©ûê("sml¶d %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

596 
__ASM
 vﬁ©ûê("sml¶d %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

599 (
Œr
.
w64
);

600 
	}
}

602 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt64_t
 
	$__SMLSLDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

604 
	uŒªg_u
{

605 
uöt32_t
 
w32
[2];

606 
uöt64_t
 
w64
;

607 } 
Œr
;

608 
Œr
.
w64
 = 
acc
;

610 #i‚de‡
__ARMEB__


611 
__ASM
 vﬁ©ûê("sml¶dx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

613 
__ASM
 vﬁ©ûê("sml¶dx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

616 (
Œr
.
w64
);

617 
	}
}

619 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SEL
 (
uöt32_t
 
›1
, uöt32_à
›2
)

621 
uöt32_t
 
ªsu…
;

623 
__ASM
 vﬁ©ûê("£»%0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

624 (
ªsu…
);

625 
	}
}

627 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QADD
(
uöt32_t
 
›1
, uöt32_à
›2
)

629 
uöt32_t
 
ªsu…
;

631 
__ASM
 vﬁ©ûê("qadd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

632 (
ªsu…
);

633 
	}
}

635 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QSUB
(
uöt32_t
 
›1
, uöt32_à
›2
)

637 
uöt32_t
 
ªsu…
;

639 
__ASM
 vﬁ©ûê("qsub %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

640 (
ªsu…
);

641 
	}
}

643 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
Ë\

	)

645 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

646 
__ASM
 ("pkhbà%0, %1, %2,Ü¶ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

647 
__RES
; \

650 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
Ë\

	)

652 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

653 i‡(
ARG3
 == 0) \

654 
__ASM
 ("pkhtb %0, %1, %2" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
) ); \

656 
__ASM
 ("pkhtb %0, %1, %2,á§ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

657 
__RES
; \

660 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMMLA
 (
öt32_t
 
›1
, i¡32_à
›2
, i¡32_à
›3
)

662 
öt32_t
 
ªsu…
;

664 
__ASM
 vﬁ©ûê("smmœ %0, %1, %2, %3" : "Ù" (
ªsu…
): "r" (
›1
), "r" (
›2
), "r" (
›3
) );

665 (
ªsu…
);

666 
	}
}

669 #ñi‡
deföed
 ( 
__ICCARM__
 )

671 
	~<cmsis_ür.h
>

674 #ñi‡
deföed
 ( 
__TMS470__
 )

676 
	~<cmsis_ccs.h
>

679 #ñi‡
deföed
 ( 
__TASKING__
 )

684 #ñi‡
deföed
 ( 
__CSMC__
 )

686 
	~<cmsis_csm.h
>

693 #ifde‡
__˝lu•lus


	@CMSIS/Include/core_sc000.h

38 #i‡
deföed
 ( 
__ICCARM__
 )

39 #¥agm®
sy°em_ö˛ude


42 #i‚de‡
__CORE_SC000_H_GENERIC


43 
	#__CORE_SC000_H_GENERIC


	)

45 #ifde‡
__˝lu•lus


71 
	#__SC000_CMSIS_VERSION_MAIN
 (0x04Ë

	)

72 
	#__SC000_CMSIS_VERSION_SUB
 (0x00Ë

	)

73 
	#__SC000_CMSIS_VERSION
 ((
__SC000_CMSIS_VERSION_MAIN
 << 16Ë| \

	)

74 
__SC000_CMSIS_VERSION_SUB
 )

76 
	#__CORTEX_SC
 (000Ë

	)

79 #i‡ 
deföed
 ( 
__CC_ARM
 )

80 
	#__ASM
 
__asm


	)

81 
	#__INLINE
 
__ölöe


	)

82 
	#__STATIC_INLINE
 
__ölöe


	)

84 #ñi‡
deföed
 ( 
__GNUC__
 )

85 
	#__ASM
 
__asm


	)

86 
	#__INLINE
 
ölöe


	)

87 
	#__STATIC_INLINE
 
ölöe


	)

89 #ñi‡
deföed
 ( 
__ICCARM__
 )

90 
	#__ASM
 
__asm


	)

91 
	#__INLINE
 
ölöe


	)

92 
	#__STATIC_INLINE
 
ölöe


	)

94 #ñi‡
deföed
 ( 
__TMS470__
 )

95 
	#__ASM
 
__asm


	)

96 
	#__STATIC_INLINE
 
ölöe


	)

98 #ñi‡
deföed
 ( 
__TASKING__
 )

99 
	#__ASM
 
__asm


	)

100 
	#__INLINE
 
ölöe


	)

101 
	#__STATIC_INLINE
 
ölöe


	)

103 #ñi‡
deföed
 ( 
__CSMC__
 )

104 
	#__∑cked


	)

105 
	#__ASM
 
_asm


	)

106 
	#__INLINE
 
ölöe


	)

107 
	#__STATIC_INLINE
 
ölöe


	)

114 
	#__FPU_USED
 0

	)

116 #i‡
deföed
 ( 
__CC_ARM
 )

117 #i‡
deföed
 
__TARGET_FPU_VFP


121 #ñi‡
deföed
 ( 
__GNUC__
 )

122 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

126 #ñi‡
deföed
 ( 
__ICCARM__
 )

127 #i‡
deföed
 
__ARMVFP__


131 #ñi‡
deföed
 ( 
__TMS470__
 )

132 #i‡
deföed
 
__TI__VFP_SUPPORT____


136 #ñi‡
deföed
 ( 
__TASKING__
 )

137 #i‡
deföed
 
__FPU_VFP__


141 #ñi‡
deföed
 ( 
__CSMC__
 )

142 #i‡–
__CSMC__
 & 0x400)

147 
	~<°döt.h
>

148 
	~<c‹e_cmIn°r.h
>

149 
	~<c‹e_cmFunc.h
>

151 #ifde‡
__˝lu•lus


157 #i‚de‡
__CMSIS_GENERIC


159 #i‚de‡
__CORE_SC000_H_DEPENDANT


160 
	#__CORE_SC000_H_DEPENDANT


	)

162 #ifde‡
__˝lu•lus


167 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


168 #i‚de‡
__SC000_REV


169 
	#__SC000_REV
 0x0000

	)

173 #i‚de‡
__MPU_PRESENT


174 
	#__MPU_PRESENT
 0

	)

178 #i‚de‡
__NVIC_PRIO_BITS


179 
	#__NVIC_PRIO_BITS
 2

	)

183 #i‚de‡
__Víd‹_SysTickC⁄fig


184 
	#__Víd‹_SysTickC⁄fig
 0

	)

197 #ifde‡
__˝lu•lus


198 
	#__I
 vﬁ©ûê

	)

200 
	#__I
 vﬁ©ûêc⁄°

	)

202 
	#__O
 vﬁ©ûê

	)

203 
	#__IO
 vﬁ©ûê

	)

234 #i‡(
__CORTEX_M
 != 0x04)

235 
uöt32_t
 
_ª£rved0
:27;

237 
uöt32_t
 
_ª£rved0
:16;

238 
uöt32_t
 
GE
:4;

239 
uöt32_t
 
_ª£rved1
:7;

241 
uöt32_t
 
Q
:1;

242 
uöt32_t
 
V
:1;

243 
uöt32_t
 
C
:1;

244 
uöt32_t
 
Z
:1;

245 
uöt32_t
 
N
:1;

246 } 
b
;

247 
uöt32_t
 
w
;

248 } 
	tAPSR_Ty≥
;

257 
uöt32_t
 
ISR
:9;

258 
uöt32_t
 
_ª£rved0
:23;

259 } 
b
;

260 
uöt32_t
 
w
;

261 } 
	tIPSR_Ty≥
;

270 
uöt32_t
 
ISR
:9;

271 #i‡(
__CORTEX_M
 != 0x04)

272 
uöt32_t
 
_ª£rved0
:15;

274 
uöt32_t
 
_ª£rved0
:7;

275 
uöt32_t
 
GE
:4;

276 
uöt32_t
 
_ª£rved1
:4;

278 
uöt32_t
 
T
:1;

279 
uöt32_t
 
IT
:2;

280 
uöt32_t
 
Q
:1;

281 
uöt32_t
 
V
:1;

282 
uöt32_t
 
C
:1;

283 
uöt32_t
 
Z
:1;

284 
uöt32_t
 
N
:1;

285 } 
b
;

286 
uöt32_t
 
w
;

287 } 
	txPSR_Ty≥
;

296 
uöt32_t
 
nPRIV
:1;

297 
uöt32_t
 
SPSEL
:1;

298 
uöt32_t
 
FPCA
:1;

299 
uöt32_t
 
_ª£rved0
:29;

300 } 
b
;

301 
uöt32_t
 
w
;

302 } 
	tCONTROL_Ty≥
;

317 
__IO
 
uöt32_t
 
ISER
[1];

318 
uöt32_t
 
RESERVED0
[31];

319 
__IO
 
uöt32_t
 
ICER
[1];

320 
uöt32_t
 
RSERVED1
[31];

321 
__IO
 
uöt32_t
 
ISPR
[1];

322 
uöt32_t
 
RESERVED2
[31];

323 
__IO
 
uöt32_t
 
ICPR
[1];

324 
uöt32_t
 
RESERVED3
[31];

325 
uöt32_t
 
RESERVED4
[64];

326 
__IO
 
uöt32_t
 
IP
[8];

327 } 
	tNVIC_Ty≥
;

342 
__I
 
uöt32_t
 
CPUID
;

343 
__IO
 
uöt32_t
 
ICSR
;

344 
__IO
 
uöt32_t
 
VTOR
;

345 
__IO
 
uöt32_t
 
AIRCR
;

346 
__IO
 
uöt32_t
 
SCR
;

347 
__IO
 
uöt32_t
 
CCR
;

348 
uöt32_t
 
RESERVED0
[1];

349 
__IO
 
uöt32_t
 
SHP
[2];

350 
__IO
 
uöt32_t
 
SHCSR
;

351 
uöt32_t
 
RESERVED1
[154];

352 
__IO
 
uöt32_t
 
SFCR
;

353 } 
	tSCB_Ty≥
;

356 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

357 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

359 
	#SCB_CPUID_VARIANT_Pos
 20

	)

360 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

362 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

363 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

365 
	#SCB_CPUID_PARTNO_Pos
 4

	)

366 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

368 
	#SCB_CPUID_REVISION_Pos
 0

	)

369 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

372 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

373 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

375 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

376 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

378 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

379 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

381 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

382 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

384 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

385 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

387 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

388 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

390 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

391 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

393 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

394 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

396 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

397 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

400 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

401 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

404 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

405 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

407 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

408 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

410 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

411 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

413 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

414 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

416 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

417 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

420 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

421 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

423 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

424 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

426 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

427 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

430 
	#SCB_CCR_STKALIGN_Pos
 9

	)

431 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

433 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

434 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

437 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

438 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

441 
	#SCB_SFCR_UNIBRTIMING_Pos
 0

	)

442 
	#SCB_SFCR_UNIBRTIMING_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

444 
	#SCB_SFCR_SECKEY_Pos
 16

	)

445 
	#SCB_SFCR_SECKEY_Msk
 (0xFFFFUL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

460 
uöt32_t
 
RESERVED0
[2];

461 
__IO
 
uöt32_t
 
ACTLR
;

462 } 
	tSCnSCB_Ty≥
;

465 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0

	)

466 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL << 
SCnSCB_ACTLR_DISMCYCINT_Pos
Ë

	)

481 
__IO
 
uöt32_t
 
CTRL
;

482 
__IO
 
uöt32_t
 
LOAD
;

483 
__IO
 
uöt32_t
 
VAL
;

484 
__I
 
uöt32_t
 
CALIB
;

485 } 
	tSysTick_Ty≥
;

488 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

489 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

491 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

492 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

494 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

495 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

497 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

498 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

501 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

502 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

505 
	#SysTick_VAL_CURRENT_Pos
 0

	)

506 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

509 
	#SysTick_CALIB_NOREF_Pos
 31

	)

510 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

512 
	#SysTick_CALIB_SKEW_Pos
 30

	)

513 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

515 
	#SysTick_CALIB_TENMS_Pos
 0

	)

516 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_CALIB_TENMS_Pos
Ë

	)

520 #i‡(
__MPU_PRESENT
 == 1)

531 
__I
 
uöt32_t
 
TYPE
;

532 
__IO
 
uöt32_t
 
CTRL
;

533 
__IO
 
uöt32_t
 
RNR
;

534 
__IO
 
uöt32_t
 
RBAR
;

535 
__IO
 
uöt32_t
 
RASR
;

536 } 
	tMPU_Ty≥
;

539 
	#MPU_TYPE_IREGION_Pos
 16

	)

540 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

542 
	#MPU_TYPE_DREGION_Pos
 8

	)

543 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

545 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

546 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

549 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

550 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

552 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

553 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

555 
	#MPU_CTRL_ENABLE_Pos
 0

	)

556 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

559 
	#MPU_RNR_REGION_Pos
 0

	)

560 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

563 
	#MPU_RBAR_ADDR_Pos
 8

	)

564 
	#MPU_RBAR_ADDR_Msk
 (0xFFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

566 
	#MPU_RBAR_VALID_Pos
 4

	)

567 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

569 
	#MPU_RBAR_REGION_Pos
 0

	)

570 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

573 
	#MPU_RASR_ATTRS_Pos
 16

	)

574 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

576 
	#MPU_RASR_XN_Pos
 28

	)

577 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

579 
	#MPU_RASR_AP_Pos
 24

	)

580 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

582 
	#MPU_RASR_TEX_Pos
 19

	)

583 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

585 
	#MPU_RASR_S_Pos
 18

	)

586 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

588 
	#MPU_RASR_C_Pos
 17

	)

589 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

591 
	#MPU_RASR_B_Pos
 16

	)

592 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

594 
	#MPU_RASR_SRD_Pos
 8

	)

595 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

597 
	#MPU_RASR_SIZE_Pos
 1

	)

598 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

600 
	#MPU_RASR_ENABLE_Pos
 0

	)

601 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

624 
	#SCS_BASE
 (0xE000E000ULË

	)

625 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

626 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

627 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

629 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

630 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

631 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

632 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

634 #i‡(
__MPU_PRESENT
 == 1)

635 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

636 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

664 
	#_BIT_SHIFT
(
IRQn
Ë–(((
uöt32_t
)(IRQnËË& 0x03Ë* 8 )

	)

665 
	#_SHP_IDX
(
IRQn
Ë–((((
uöt32_t
)(IRQnË& 0x0F)-8Ë>> 2Ë)

	)

666 
	#_IP_IDX
(
IRQn
Ë–((
uöt32_t
)(IRQnË>> 2Ë)

	)

675 
__STATIC_INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

677 
NVIC
->
ISER
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

687 
__STATIC_INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

689 
NVIC
->
ICER
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

703 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

705 ((
uöt32_t
Ë((
NVIC
->
ISPR
[0] & (1 << ((uöt32_t)(
IRQn
) & 0x1F)))?1:0));

715 
__STATIC_INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

717 
NVIC
->
ISPR
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

727 
__STATIC_INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

729 
NVIC
->
ICPR
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

742 
__STATIC_INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

744 if(
IRQn
 < 0) {

745 
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << 
_BIT_SHIFT
(IRQn))) |

746 (((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)Ë& 0xFFË<< 
_BIT_SHIFT
(
IRQn
)); }

748 
NVIC
->
IP
[
_IP_IDX
(
IRQn
)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << 
_BIT_SHIFT
(IRQn))) |

749 (((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)Ë& 0xFFË<< 
_BIT_SHIFT
(
IRQn
)); }

764 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

767 if(
IRQn
 < 0) {

768 ((
uöt32_t
)(((
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& 0xFFË>> (8 - 
__NVIC_PRIO_BITS
))); }

770 ((
uöt32_t
)(((
NVIC
->
IP
[ 
_IP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& 0xFFË>> (8 - 
__NVIC_PRIO_BITS
))); }

778 
__STATIC_INLINE
 
NVIC_Sy°emRe£t
()

780 
__DSB
();

782 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

783 
SCB_AIRCR_SYSRESETREQ_Msk
);

784 
__DSB
();

799 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

816 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

818 i‡((
ticks
 - 1Ë> 
SysTick_LOAD_RELOAD_Msk
)  (1);

820 
SysTick
->
LOAD
 = 
ticks
 - 1;

821 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

822 
SysTick
->
VAL
 = 0;

823 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

824 
SysTick_CTRL_TICKINT_Msk
 |

825 
SysTick_CTRL_ENABLE_Msk
;

836 #ifde‡
__˝lu•lus


	@CMSIS/Include/core_sc300.h

38 #i‡
deföed
 ( 
__ICCARM__
 )

39 #¥agm®
sy°em_ö˛ude


42 #i‚de‡
__CORE_SC300_H_GENERIC


43 
	#__CORE_SC300_H_GENERIC


	)

45 #ifde‡
__˝lu•lus


71 
	#__SC300_CMSIS_VERSION_MAIN
 (0x04Ë

	)

72 
	#__SC300_CMSIS_VERSION_SUB
 (0x00Ë

	)

73 
	#__SC300_CMSIS_VERSION
 ((
__SC300_CMSIS_VERSION_MAIN
 << 16Ë| \

	)

74 
__SC300_CMSIS_VERSION_SUB
 )

76 
	#__CORTEX_SC
 (300Ë

	)

79 #i‡ 
deföed
 ( 
__CC_ARM
 )

80 
	#__ASM
 
__asm


	)

81 
	#__INLINE
 
__ölöe


	)

82 
	#__STATIC_INLINE
 
__ölöe


	)

84 #ñi‡
deföed
 ( 
__GNUC__
 )

85 
	#__ASM
 
__asm


	)

86 
	#__INLINE
 
ölöe


	)

87 
	#__STATIC_INLINE
 
ölöe


	)

89 #ñi‡
deföed
 ( 
__ICCARM__
 )

90 
	#__ASM
 
__asm


	)

91 
	#__INLINE
 
ölöe


	)

92 
	#__STATIC_INLINE
 
ölöe


	)

94 #ñi‡
deföed
 ( 
__TMS470__
 )

95 
	#__ASM
 
__asm


	)

96 
	#__STATIC_INLINE
 
ölöe


	)

98 #ñi‡
deföed
 ( 
__TASKING__
 )

99 
	#__ASM
 
__asm


	)

100 
	#__INLINE
 
ölöe


	)

101 
	#__STATIC_INLINE
 
ölöe


	)

103 #ñi‡
deföed
 ( 
__CSMC__
 )

104 
	#__∑cked


	)

105 
	#__ASM
 
_asm


	)

106 
	#__INLINE
 
ölöe


	)

107 
	#__STATIC_INLINE
 
ölöe


	)

114 
	#__FPU_USED
 0

	)

116 #i‡
deföed
 ( 
__CC_ARM
 )

117 #i‡
deföed
 
__TARGET_FPU_VFP


121 #ñi‡
deföed
 ( 
__GNUC__
 )

122 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

126 #ñi‡
deföed
 ( 
__ICCARM__
 )

127 #i‡
deföed
 
__ARMVFP__


131 #ñi‡
deföed
 ( 
__TMS470__
 )

132 #i‡
deföed
 
__TI__VFP_SUPPORT____


136 #ñi‡
deföed
 ( 
__TASKING__
 )

137 #i‡
deföed
 
__FPU_VFP__


141 #ñi‡
deföed
 ( 
__CSMC__
 )

142 #i‡–
__CSMC__
 & 0x400)

147 
	~<°döt.h
>

148 
	~<c‹e_cmIn°r.h
>

149 
	~<c‹e_cmFunc.h
>

151 #ifde‡
__˝lu•lus


157 #i‚de‡
__CMSIS_GENERIC


159 #i‚de‡
__CORE_SC300_H_DEPENDANT


160 
	#__CORE_SC300_H_DEPENDANT


	)

162 #ifde‡
__˝lu•lus


167 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


168 #i‚de‡
__SC300_REV


169 
	#__SC300_REV
 0x0000

	)

173 #i‚de‡
__MPU_PRESENT


174 
	#__MPU_PRESENT
 0

	)

178 #i‚de‡
__NVIC_PRIO_BITS


179 
	#__NVIC_PRIO_BITS
 4

	)

183 #i‚de‡
__Víd‹_SysTickC⁄fig


184 
	#__Víd‹_SysTickC⁄fig
 0

	)

197 #ifde‡
__˝lu•lus


198 
	#__I
 vﬁ©ûê

	)

200 
	#__I
 vﬁ©ûêc⁄°

	)

202 
	#__O
 vﬁ©ûê

	)

203 
	#__IO
 vﬁ©ûê

	)

235 #i‡(
__CORTEX_M
 != 0x04)

236 
uöt32_t
 
_ª£rved0
:27;

238 
uöt32_t
 
_ª£rved0
:16;

239 
uöt32_t
 
GE
:4;

240 
uöt32_t
 
_ª£rved1
:7;

242 
uöt32_t
 
Q
:1;

243 
uöt32_t
 
V
:1;

244 
uöt32_t
 
C
:1;

245 
uöt32_t
 
Z
:1;

246 
uöt32_t
 
N
:1;

247 } 
b
;

248 
uöt32_t
 
w
;

249 } 
	tAPSR_Ty≥
;

258 
uöt32_t
 
ISR
:9;

259 
uöt32_t
 
_ª£rved0
:23;

260 } 
b
;

261 
uöt32_t
 
w
;

262 } 
	tIPSR_Ty≥
;

271 
uöt32_t
 
ISR
:9;

272 #i‡(
__CORTEX_M
 != 0x04)

273 
uöt32_t
 
_ª£rved0
:15;

275 
uöt32_t
 
_ª£rved0
:7;

276 
uöt32_t
 
GE
:4;

277 
uöt32_t
 
_ª£rved1
:4;

279 
uöt32_t
 
T
:1;

280 
uöt32_t
 
IT
:2;

281 
uöt32_t
 
Q
:1;

282 
uöt32_t
 
V
:1;

283 
uöt32_t
 
C
:1;

284 
uöt32_t
 
Z
:1;

285 
uöt32_t
 
N
:1;

286 } 
b
;

287 
uöt32_t
 
w
;

288 } 
	txPSR_Ty≥
;

297 
uöt32_t
 
nPRIV
:1;

298 
uöt32_t
 
SPSEL
:1;

299 
uöt32_t
 
FPCA
:1;

300 
uöt32_t
 
_ª£rved0
:29;

301 } 
b
;

302 
uöt32_t
 
w
;

303 } 
	tCONTROL_Ty≥
;

318 
__IO
 
uöt32_t
 
ISER
[8];

319 
uöt32_t
 
RESERVED0
[24];

320 
__IO
 
uöt32_t
 
ICER
[8];

321 
uöt32_t
 
RSERVED1
[24];

322 
__IO
 
uöt32_t
 
ISPR
[8];

323 
uöt32_t
 
RESERVED2
[24];

324 
__IO
 
uöt32_t
 
ICPR
[8];

325 
uöt32_t
 
RESERVED3
[24];

326 
__IO
 
uöt32_t
 
IABR
[8];

327 
uöt32_t
 
RESERVED4
[56];

328 
__IO
 
uöt8_t
 
IP
[240];

329 
uöt32_t
 
RESERVED5
[644];

330 
__O
 
uöt32_t
 
STIR
;

331 } 
	tNVIC_Ty≥
;

334 
	#NVIC_STIR_INTID_Pos
 0

	)

335 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL << 
NVIC_STIR_INTID_Pos
Ë

	)

350 
__I
 
uöt32_t
 
CPUID
;

351 
__IO
 
uöt32_t
 
ICSR
;

352 
__IO
 
uöt32_t
 
VTOR
;

353 
__IO
 
uöt32_t
 
AIRCR
;

354 
__IO
 
uöt32_t
 
SCR
;

355 
__IO
 
uöt32_t
 
CCR
;

356 
__IO
 
uöt8_t
 
SHP
[12];

357 
__IO
 
uöt32_t
 
SHCSR
;

358 
__IO
 
uöt32_t
 
CFSR
;

359 
__IO
 
uöt32_t
 
HFSR
;

360 
__IO
 
uöt32_t
 
DFSR
;

361 
__IO
 
uöt32_t
 
MMFAR
;

362 
__IO
 
uöt32_t
 
BFAR
;

363 
__IO
 
uöt32_t
 
AFSR
;

364 
__I
 
uöt32_t
 
PFR
[2];

365 
__I
 
uöt32_t
 
DFR
;

366 
__I
 
uöt32_t
 
ADR
;

367 
__I
 
uöt32_t
 
MMFR
[4];

368 
__I
 
uöt32_t
 
ISAR
[5];

369 
uöt32_t
 
RESERVED0
[5];

370 
__IO
 
uöt32_t
 
CPACR
;

371 } 
	tSCB_Ty≥
;

374 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

375 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

377 
	#SCB_CPUID_VARIANT_Pos
 20

	)

378 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

380 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

381 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

383 
	#SCB_CPUID_PARTNO_Pos
 4

	)

384 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

386 
	#SCB_CPUID_REVISION_Pos
 0

	)

387 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

390 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

391 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

393 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

394 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

396 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

397 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

399 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

400 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

402 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

403 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

405 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

406 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

408 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

409 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

411 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

412 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

414 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

415 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

417 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

418 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

421 
	#SCB_VTOR_TBLBASE_Pos
 29

	)

422 
	#SCB_VTOR_TBLBASE_Msk
 (1UL << 
SCB_VTOR_TBLBASE_Pos
Ë

	)

424 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

425 
	#SCB_VTOR_TBLOFF_Msk
 (0x3FFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

428 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

429 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

431 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

432 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

434 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

435 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

437 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

438 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

440 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

441 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

443 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

444 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

446 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

447 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL << 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

450 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

451 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

453 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

454 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

456 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

457 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

460 
	#SCB_CCR_STKALIGN_Pos
 9

	)

461 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

463 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

464 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

466 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

467 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

469 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

470 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

472 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

473 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

475 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

476 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL << 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

479 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

480 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

482 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

483 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

485 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

486 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

488 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

489 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

491 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

492 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

494 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

495 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

497 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

498 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

500 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

501 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

503 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

504 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

506 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

507 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

509 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

510 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

512 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

513 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

515 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

516 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

518 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

519 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

522 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

523 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

525 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

526 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

528 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

529 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

532 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

533 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

535 
	#SCB_HFSR_FORCED_Pos
 30

	)

536 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

538 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

539 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

542 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

543 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

545 
	#SCB_DFSR_VCATCH_Pos
 3

	)

546 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

548 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

549 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

551 
	#SCB_DFSR_BKPT_Pos
 1

	)

552 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

554 
	#SCB_DFSR_HALTED_Pos
 0

	)

555 
	#SCB_DFSR_HALTED_Msk
 (1UL << 
SCB_DFSR_HALTED_Pos
Ë

	)

570 
uöt32_t
 
RESERVED0
[1];

571 
__I
 
uöt32_t
 
ICTR
;

572 
uöt32_t
 
RESERVED1
[1];

573 } 
	tSCnSCB_Ty≥
;

576 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0

	)

577 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL << 
SCnSCB_ICTR_INTLINESNUM_Pos
Ë

	)

592 
__IO
 
uöt32_t
 
CTRL
;

593 
__IO
 
uöt32_t
 
LOAD
;

594 
__IO
 
uöt32_t
 
VAL
;

595 
__I
 
uöt32_t
 
CALIB
;

596 } 
	tSysTick_Ty≥
;

599 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

600 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

602 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

603 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

605 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

606 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

608 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

609 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

612 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

613 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

616 
	#SysTick_VAL_CURRENT_Pos
 0

	)

617 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

620 
	#SysTick_CALIB_NOREF_Pos
 31

	)

621 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

623 
	#SysTick_CALIB_SKEW_Pos
 30

	)

624 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

626 
	#SysTick_CALIB_TENMS_Pos
 0

	)

627 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_CALIB_TENMS_Pos
Ë

	)

642 
__O
 union

644 
__O
 
uöt8_t
 
u8
;

645 
__O
 
uöt16_t
 
u16
;

646 
__O
 
uöt32_t
 
u32
;

647 } 
PORT
 [32];

648 
uöt32_t
 
RESERVED0
[864];

649 
__IO
 
uöt32_t
 
TER
;

650 
uöt32_t
 
RESERVED1
[15];

651 
__IO
 
uöt32_t
 
TPR
;

652 
uöt32_t
 
RESERVED2
[15];

653 
__IO
 
uöt32_t
 
TCR
;

654 
uöt32_t
 
RESERVED3
[29];

655 
__O
 
uöt32_t
 
IWR
;

656 
__I
 
uöt32_t
 
IRR
;

657 
__IO
 
uöt32_t
 
IMCR
;

658 
uöt32_t
 
RESERVED4
[43];

659 
__O
 
uöt32_t
 
LAR
;

660 
__I
 
uöt32_t
 
LSR
;

661 
uöt32_t
 
RESERVED5
[6];

662 
__I
 
uöt32_t
 
PID4
;

663 
__I
 
uöt32_t
 
PID5
;

664 
__I
 
uöt32_t
 
PID6
;

665 
__I
 
uöt32_t
 
PID7
;

666 
__I
 
uöt32_t
 
PID0
;

667 
__I
 
uöt32_t
 
PID1
;

668 
__I
 
uöt32_t
 
PID2
;

669 
__I
 
uöt32_t
 
PID3
;

670 
__I
 
uöt32_t
 
CID0
;

671 
__I
 
uöt32_t
 
CID1
;

672 
__I
 
uöt32_t
 
CID2
;

673 
__I
 
uöt32_t
 
CID3
;

674 } 
	tITM_Ty≥
;

677 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

678 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL << 
ITM_TPR_PRIVMASK_Pos
Ë

	)

681 
	#ITM_TCR_BUSY_Pos
 23

	)

682 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

684 
	#ITM_TCR_Tø˚BusID_Pos
 16

	)

685 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

687 
	#ITM_TCR_GTSFREQ_Pos
 10

	)

688 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

690 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

691 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

693 
	#ITM_TCR_SWOENA_Pos
 4

	)

694 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

696 
	#ITM_TCR_DWTENA_Pos
 3

	)

697 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

699 
	#ITM_TCR_SYNCENA_Pos
 2

	)

700 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

702 
	#ITM_TCR_TSENA_Pos
 1

	)

703 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

705 
	#ITM_TCR_ITMENA_Pos
 0

	)

706 
	#ITM_TCR_ITMENA_Msk
 (1UL << 
ITM_TCR_ITMENA_Pos
Ë

	)

709 
	#ITM_IWR_ATVALIDM_Pos
 0

	)

710 
	#ITM_IWR_ATVALIDM_Msk
 (1UL << 
ITM_IWR_ATVALIDM_Pos
Ë

	)

713 
	#ITM_IRR_ATREADYM_Pos
 0

	)

714 
	#ITM_IRR_ATREADYM_Msk
 (1UL << 
ITM_IRR_ATREADYM_Pos
Ë

	)

717 
	#ITM_IMCR_INTEGRATION_Pos
 0

	)

718 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL << 
ITM_IMCR_INTEGRATION_Pos
Ë

	)

721 
	#ITM_LSR_ByãAcc_Pos
 2

	)

722 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

724 
	#ITM_LSR_Ac˚ss_Pos
 1

	)

725 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

727 
	#ITM_LSR_Pª£¡_Pos
 0

	)

728 
	#ITM_LSR_Pª£¡_Msk
 (1UL << 
ITM_LSR_Pª£¡_Pos
Ë

	)

743 
__IO
 
uöt32_t
 
CTRL
;

744 
__IO
 
uöt32_t
 
CYCCNT
;

745 
__IO
 
uöt32_t
 
CPICNT
;

746 
__IO
 
uöt32_t
 
EXCCNT
;

747 
__IO
 
uöt32_t
 
SLEEPCNT
;

748 
__IO
 
uöt32_t
 
LSUCNT
;

749 
__IO
 
uöt32_t
 
FOLDCNT
;

750 
__I
 
uöt32_t
 
PCSR
;

751 
__IO
 
uöt32_t
 
COMP0
;

752 
__IO
 
uöt32_t
 
MASK0
;

753 
__IO
 
uöt32_t
 
FUNCTION0
;

754 
uöt32_t
 
RESERVED0
[1];

755 
__IO
 
uöt32_t
 
COMP1
;

756 
__IO
 
uöt32_t
 
MASK1
;

757 
__IO
 
uöt32_t
 
FUNCTION1
;

758 
uöt32_t
 
RESERVED1
[1];

759 
__IO
 
uöt32_t
 
COMP2
;

760 
__IO
 
uöt32_t
 
MASK2
;

761 
__IO
 
uöt32_t
 
FUNCTION2
;

762 
uöt32_t
 
RESERVED2
[1];

763 
__IO
 
uöt32_t
 
COMP3
;

764 
__IO
 
uöt32_t
 
MASK3
;

765 
__IO
 
uöt32_t
 
FUNCTION3
;

766 } 
	tDWT_Ty≥
;

769 
	#DWT_CTRL_NUMCOMP_Pos
 28

	)

770 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

772 
	#DWT_CTRL_NOTRCPKT_Pos
 27

	)

773 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

775 
	#DWT_CTRL_NOEXTTRIG_Pos
 26

	)

776 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

778 
	#DWT_CTRL_NOCYCCNT_Pos
 25

	)

779 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

781 
	#DWT_CTRL_NOPRFCNT_Pos
 24

	)

782 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

784 
	#DWT_CTRL_CYCEVTENA_Pos
 22

	)

785 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

787 
	#DWT_CTRL_FOLDEVTENA_Pos
 21

	)

788 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

790 
	#DWT_CTRL_LSUEVTENA_Pos
 20

	)

791 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

793 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19

	)

794 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

796 
	#DWT_CTRL_EXCEVTENA_Pos
 18

	)

797 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

799 
	#DWT_CTRL_CPIEVTENA_Pos
 17

	)

800 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

802 
	#DWT_CTRL_EXCTRCENA_Pos
 16

	)

803 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

805 
	#DWT_CTRL_PCSAMPLENA_Pos
 12

	)

806 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

808 
	#DWT_CTRL_SYNCTAP_Pos
 10

	)

809 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

811 
	#DWT_CTRL_CYCTAP_Pos
 9

	)

812 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

814 
	#DWT_CTRL_POSTINIT_Pos
 5

	)

815 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

817 
	#DWT_CTRL_POSTPRESET_Pos
 1

	)

818 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

820 
	#DWT_CTRL_CYCCNTENA_Pos
 0

	)

821 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCCNTENA_Pos
Ë

	)

824 
	#DWT_CPICNT_CPICNT_Pos
 0

	)

825 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL << 
DWT_CPICNT_CPICNT_Pos
Ë

	)

828 
	#DWT_EXCCNT_EXCCNT_Pos
 0

	)

829 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL << 
DWT_EXCCNT_EXCCNT_Pos
Ë

	)

832 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0

	)

833 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL << 
DWT_SLEEPCNT_SLEEPCNT_Pos
Ë

	)

836 
	#DWT_LSUCNT_LSUCNT_Pos
 0

	)

837 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL << 
DWT_LSUCNT_LSUCNT_Pos
Ë

	)

840 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0

	)

841 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL << 
DWT_FOLDCNT_FOLDCNT_Pos
Ë

	)

844 
	#DWT_MASK_MASK_Pos
 0

	)

845 
	#DWT_MASK_MASK_Msk
 (0x1FUL << 
DWT_MASK_MASK_Pos
Ë

	)

848 
	#DWT_FUNCTION_MATCHED_Pos
 24

	)

849 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

851 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16

	)

852 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

854 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12

	)

855 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

857 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10

	)

858 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

860 
	#DWT_FUNCTION_LNK1ENA_Pos
 9

	)

861 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

863 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8

	)

864 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

866 
	#DWT_FUNCTION_CYCMATCH_Pos
 7

	)

867 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

869 
	#DWT_FUNCTION_EMITRANGE_Pos
 5

	)

870 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

872 
	#DWT_FUNCTION_FUNCTION_Pos
 0

	)

873 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL << 
DWT_FUNCTION_FUNCTION_Pos
Ë

	)

888 
__IO
 
uöt32_t
 
SSPSR
;

889 
__IO
 
uöt32_t
 
CSPSR
;

890 
uöt32_t
 
RESERVED0
[2];

891 
__IO
 
uöt32_t
 
ACPR
;

892 
uöt32_t
 
RESERVED1
[55];

893 
__IO
 
uöt32_t
 
SPPR
;

894 
uöt32_t
 
RESERVED2
[131];

895 
__I
 
uöt32_t
 
FFSR
;

896 
__IO
 
uöt32_t
 
FFCR
;

897 
__I
 
uöt32_t
 
FSCR
;

898 
uöt32_t
 
RESERVED3
[759];

899 
__I
 
uöt32_t
 
TRIGGER
;

900 
__I
 
uöt32_t
 
FIFO0
;

901 
__I
 
uöt32_t
 
ITATBCTR2
;

902 
uöt32_t
 
RESERVED4
[1];

903 
__I
 
uöt32_t
 
ITATBCTR0
;

904 
__I
 
uöt32_t
 
FIFO1
;

905 
__IO
 
uöt32_t
 
ITCTRL
;

906 
uöt32_t
 
RESERVED5
[39];

907 
__IO
 
uöt32_t
 
CLAIMSET
;

908 
__IO
 
uöt32_t
 
CLAIMCLR
;

909 
uöt32_t
 
RESERVED7
[8];

910 
__I
 
uöt32_t
 
DEVID
;

911 
__I
 
uöt32_t
 
DEVTYPE
;

912 } 
	tTPI_Ty≥
;

915 
	#TPI_ACPR_PRESCALER_Pos
 0

	)

916 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL << 
TPI_ACPR_PRESCALER_Pos
Ë

	)

919 
	#TPI_SPPR_TXMODE_Pos
 0

	)

920 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL << 
TPI_SPPR_TXMODE_Pos
Ë

	)

923 
	#TPI_FFSR_FtN⁄St›_Pos
 3

	)

924 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

926 
	#TPI_FFSR_TCPª£¡_Pos
 2

	)

927 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

929 
	#TPI_FFSR_FtSt›≥d_Pos
 1

	)

930 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

932 
	#TPI_FFSR_FlInProg_Pos
 0

	)

933 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL << 
TPI_FFSR_FlInProg_Pos
Ë

	)

936 
	#TPI_FFCR_TrigIn_Pos
 8

	)

937 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

939 
	#TPI_FFCR_EnFC⁄t_Pos
 1

	)

940 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

943 
	#TPI_TRIGGER_TRIGGER_Pos
 0

	)

944 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL << 
TPI_TRIGGER_TRIGGER_Pos
Ë

	)

947 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29

	)

948 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

950 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27

	)

951 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

953 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26

	)

954 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

956 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24

	)

957 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

959 
	#TPI_FIFO0_ETM2_Pos
 16

	)

960 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

962 
	#TPI_FIFO0_ETM1_Pos
 8

	)

963 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

965 
	#TPI_FIFO0_ETM0_Pos
 0

	)

966 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL << 
TPI_FIFO0_ETM0_Pos
Ë

	)

969 
	#TPI_ITATBCTR2_ATREADY_Pos
 0

	)

970 
	#TPI_ITATBCTR2_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR2_ATREADY_Pos
Ë

	)

973 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29

	)

974 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

976 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27

	)

977 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

979 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26

	)

980 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

982 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24

	)

983 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

985 
	#TPI_FIFO1_ITM2_Pos
 16

	)

986 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

988 
	#TPI_FIFO1_ITM1_Pos
 8

	)

989 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

991 
	#TPI_FIFO1_ITM0_Pos
 0

	)

992 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL << 
TPI_FIFO1_ITM0_Pos
Ë

	)

995 
	#TPI_ITATBCTR0_ATREADY_Pos
 0

	)

996 
	#TPI_ITATBCTR0_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR0_ATREADY_Pos
Ë

	)

999 
	#TPI_ITCTRL_Mode_Pos
 0

	)

1000 
	#TPI_ITCTRL_Mode_Msk
 (0x1UL << 
TPI_ITCTRL_Mode_Pos
Ë

	)

1003 
	#TPI_DEVID_NRZVALID_Pos
 11

	)

1004 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1006 
	#TPI_DEVID_MANCVALID_Pos
 10

	)

1007 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1009 
	#TPI_DEVID_PTINVALID_Pos
 9

	)

1010 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1012 
	#TPI_DEVID_MöBufSz_Pos
 6

	)

1013 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

1015 
	#TPI_DEVID_AsynClkIn_Pos
 5

	)

1016 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

1018 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0

	)

1019 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL << 
TPI_DEVID_NrTø˚I≈ut_Pos
Ë

	)

1022 
	#TPI_DEVTYPE_SubTy≥_Pos
 0

	)

1023 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL << 
TPI_DEVTYPE_SubTy≥_Pos
Ë

	)

1025 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 4

	)

1026 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1031 #i‡(
__MPU_PRESENT
 == 1)

1042 
__I
 
uöt32_t
 
TYPE
;

1043 
__IO
 
uöt32_t
 
CTRL
;

1044 
__IO
 
uöt32_t
 
RNR
;

1045 
__IO
 
uöt32_t
 
RBAR
;

1046 
__IO
 
uöt32_t
 
RASR
;

1047 
__IO
 
uöt32_t
 
RBAR_A1
;

1048 
__IO
 
uöt32_t
 
RASR_A1
;

1049 
__IO
 
uöt32_t
 
RBAR_A2
;

1050 
__IO
 
uöt32_t
 
RASR_A2
;

1051 
__IO
 
uöt32_t
 
RBAR_A3
;

1052 
__IO
 
uöt32_t
 
RASR_A3
;

1053 } 
	tMPU_Ty≥
;

1056 
	#MPU_TYPE_IREGION_Pos
 16

	)

1057 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1059 
	#MPU_TYPE_DREGION_Pos
 8

	)

1060 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1062 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

1063 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

1066 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

1067 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1069 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

1070 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1072 
	#MPU_CTRL_ENABLE_Pos
 0

	)

1073 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

1076 
	#MPU_RNR_REGION_Pos
 0

	)

1077 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

1080 
	#MPU_RBAR_ADDR_Pos
 5

	)

1081 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1083 
	#MPU_RBAR_VALID_Pos
 4

	)

1084 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1086 
	#MPU_RBAR_REGION_Pos
 0

	)

1087 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

1090 
	#MPU_RASR_ATTRS_Pos
 16

	)

1091 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1093 
	#MPU_RASR_XN_Pos
 28

	)

1094 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

1096 
	#MPU_RASR_AP_Pos
 24

	)

1097 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

1099 
	#MPU_RASR_TEX_Pos
 19

	)

1100 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

1102 
	#MPU_RASR_S_Pos
 18

	)

1103 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

1105 
	#MPU_RASR_C_Pos
 17

	)

1106 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

1108 
	#MPU_RASR_B_Pos
 16

	)

1109 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

1111 
	#MPU_RASR_SRD_Pos
 8

	)

1112 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1114 
	#MPU_RASR_SIZE_Pos
 1

	)

1115 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1117 
	#MPU_RASR_ENABLE_Pos
 0

	)

1118 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

1134 
__IO
 
uöt32_t
 
DHCSR
;

1135 
__O
 
uöt32_t
 
DCRSR
;

1136 
__IO
 
uöt32_t
 
DCRDR
;

1137 
__IO
 
uöt32_t
 
DEMCR
;

1138 } 
	tC‹eDebug_Ty≥
;

1141 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

1142 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1144 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

1145 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1147 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

1148 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1150 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

1151 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1153 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

1154 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1156 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

1157 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1159 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

1160 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1162 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

1163 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1165 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

1166 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1168 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

1169 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1171 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

1172 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1174 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

1175 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL << 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

1178 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

1179 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1181 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

1182 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL << 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

1185 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

1186 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1188 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

1189 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1191 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

1192 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1194 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

1195 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1197 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

1198 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1200 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

1201 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1203 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

1204 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1206 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

1207 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1209 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

1210 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1212 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

1213 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1215 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

1216 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1218 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

1219 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1221 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

1222 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

1234 
	#SCS_BASE
 (0xE000E000ULË

	)

1235 
	#ITM_BASE
 (0xE0000000ULË

	)

1236 
	#DWT_BASE
 (0xE0001000ULË

	)

1237 
	#TPI_BASE
 (0xE0040000ULË

	)

1238 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1239 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1240 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1241 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1243 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1244 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1245 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1246 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1247 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1248 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1249 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1250 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1252 #i‡(
__MPU_PRESENT
 == 1)

1253 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1254 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1291 
__STATIC_INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1293 
uöt32_t
 
ªg_vÆue
;

1294 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07);

1296 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1297 
ªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1298 
ªg_vÆue
 = (reg_value |

1299 ((
uöt32_t
)0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1300 (
Pri‹ôyGroupTmp
 << 8));

1301 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1311 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1313  ((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
);

1323 
__STATIC_INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1325 
NVIC
->
ISER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1335 
__STATIC_INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1337 
NVIC
->
ICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1351 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1353 ((
uöt32_t
Ë((
NVIC
->
ISPR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1363 
__STATIC_INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1365 
NVIC
->
ISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1375 
__STATIC_INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1377 
NVIC
->
ICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1390 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1392 ((
uöt32_t
)((
NVIC
->
IABR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1405 
__STATIC_INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1407 if(
IRQn
 < 0) {

1408 
SCB
->
SHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1410 
NVIC
->
IP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1425 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1428 if(
IRQn
 < 0) {

1429 ((
uöt32_t
)(
SCB
->
SHP
[((uöt32_t)(
IRQn
Ë& 0xF)-4] >> (8 - 
__NVIC_PRIO_BITS
))); }

1431 ((
uöt32_t
)(
NVIC
->
IP
[(uöt32_t)(
IRQn
)] >> (8 - 
__NVIC_PRIO_BITS
))); }

1447 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1449 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1450 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1451 
uöt32_t
 
SubPri‹ôyBôs
;

1453 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1454 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1457 ((
Pªem±Pri‹ôy
 & ((1 << (
Pªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
SubPri‹ôyBôs
) |

1458 ((
SubPri‹ôy
 & ((1 << (
SubPri‹ôyBôs
 )) - 1)))

1475 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1477 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1478 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1479 
uöt32_t
 
SubPri‹ôyBôs
;

1481 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1482 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1484 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1485 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1493 
__STATIC_INLINE
 
NVIC_Sy°emRe£t
()

1495 
__DSB
();

1497 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1498 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1499 
SCB_AIRCR_SYSRESETREQ_Msk
);

1500 
__DSB
();

1515 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

1532 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1534 i‡((
ticks
 - 1Ë> 
SysTick_LOAD_RELOAD_Msk
)  (1);

1536 
SysTick
->
LOAD
 = 
ticks
 - 1;

1537 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1538 
SysTick
->
VAL
 = 0;

1539 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1540 
SysTick_CTRL_TICKINT_Msk
 |

1541 
SysTick_CTRL_ENABLE_Msk
;

1558 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1559 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1572 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1574 i‡((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) &&

1575 (
	gITM
->
	gTER
 & (1UL << 0) ) )

1577 
	gITM
->
	gPORT
[0].
	gu32
 == 0);

1578 
	gITM
->
	gPORT
[0].
	gu8
 = (
uöt8_t
Ë
ch
;

1580  (
	gch
);

1591 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 () {

1592 
öt32_t
 
	gch
 = -1;

1594 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1595 
ch
 = 
ITM_RxBuf„r
;

1596 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1599  (
	gch
);

1610 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 () {

1612 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1624 #ifde‡
__˝lu•lus


	@CMSIS/Include/stm32f4xx_conf.h

29 #i‚de‡
__STM32F4xx_CONF_H


30 
	#__STM32F4xx_CONF_H


	)

34 
	~"°m32f4xx_adc.h
"

35 
	~"°m32f4xx_¸c.h
"

36 
	~"°m32f4xx_dbgmcu.h
"

37 
	~"°m32f4xx_dma.h
"

38 
	~"°m32f4xx_exti.h
"

39 
	~"°m32f4xx_Êash.h
"

40 
	~"°m32f4xx_gpio.h
"

41 
	~"°m32f4xx_i2c.h
"

42 
	~"°m32f4xx_iwdg.h
"

43 
	~"°m32f4xx_pwr.h
"

44 
	~"°m32f4xx_rcc.h
"

45 
	~"°m32f4xx_πc.h
"

46 
	~"°m32f4xx_sdio.h
"

47 
	~"°m32f4xx_•i.h
"

48 
	~"°m32f4xx_syscfg.h
"

49 
	~"°m32f4xx_tim.h
"

50 
	~"°m32f4xx_ußπ.h
"

51 
	~"°m32f4xx_wwdg.h
"

52 
	~"misc.h
"

54 #i‡
deföed
 (
STM32F429_439xx
)

55 
	~"°m32f4xx_¸yp.h
"

56 
	~"°m32f4xx_hash.h
"

57 
	~"°m32f4xx_∫g.h
"

58 
	~"°m32f4xx_ˇn.h
"

59 
	~"°m32f4xx_dac.h
"

60 
	~"°m32f4xx_dcmi.h
"

61 
	~"°m32f4xx_dma2d.h
"

62 
	~"°m32f4xx_fmc.h
"

63 
	~"°m32f4xx_…dc.h
"

64 
	~"°m32f4xx_ßi.h
"

67 #i‡
deföed
 (
STM32F427_437xx
)

68 
	~"°m32f4xx_¸yp.h
"

69 
	~"°m32f4xx_hash.h
"

70 
	~"°m32f4xx_∫g.h
"

71 
	~"°m32f4xx_ˇn.h
"

72 
	~"°m32f4xx_dac.h
"

73 
	~"°m32f4xx_dcmi.h
"

74 
	~"°m32f4xx_dma2d.h
"

75 
	~"°m32f4xx_fmc.h
"

76 
	~"°m32f4xx_ßi.h
"

79 #i‡
deföed
 (
STM32F40_41xxx
)

80 
	~"°m32f4xx_¸yp.h
"

81 
	~"°m32f4xx_hash.h
"

82 
	~"°m32f4xx_∫g.h
"

83 
	~"°m32f4xx_ˇn.h
"

84 
	~"°m32f4xx_dac.h
"

85 
	~"°m32f4xx_dcmi.h
"

86 
	~"°m32f4xx_fsmc.h
"

103 #ifde‡ 
USE_FULL_ASSERT


113 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0 : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

115 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

117 
	#as£π_∑øm
(
ex¥
Ë(()0)

	)

	@CMSIS/RTOS/Template/cmsis_os.h

130 #i‚de‡
_CMSIS_OS_H


131 
	#_CMSIS_OS_H


	)

134 
	#osCMSIS
 0x10002

135 

	)

137 
	#osCMSIS_KERNEL
 0x10000

138 

	)

140 
	#osKî√lSy°emId
 "KERNEL V1.00"

141 

	)

143 
	#osFótuª_MaöThªad
 1

144 
	#osFótuª_Poﬁ
 1

145 
	#osFótuª_MaûQ
 1

146 
	#osFótuª_MesßgeQ
 1

147 
	#osFótuª_Sig«ls
 8

148 
	#osFótuª_Sem≠h‹e
 30

149 
	#osFótuª_Waô
 1

150 
	#osFótuª_SysTick
 1

151 

	)

152 
	~<°döt.h
>

153 
	~<°ddef.h
>

155 #ifde‡ 
__˝lu•lus


166 
osPri‹ôyIdÀ
 = -3,

167 
osPri‹ôyLow
 = -2,

168 
osPri‹ôyBñowN‹mÆ
 = -1,

169 
osPri‹ôyN‹mÆ
 = 0,

170 
osPri‹ôyAboveN‹mÆ
 = +1,

171 
osPri‹ôyHigh
 = +2,

172 
osPri‹ôyRó…ime
 = +3,

173 
osPri‹ôyEº‹
 = 0x84

174 } 
	tosPri‹ôy
;

178 
	#osWaôF‹evî
 0xFFFFFFFF

179 

	)

183 
osOK
 = 0,

184 
osEvítSig«l
 = 0x08,

185 
osEvítMesßge
 = 0x10,

186 
osEvítMaû
 = 0x20,

187 
osEvítTimeout
 = 0x40,

188 
osEº‹P¨amëî
 = 0x80,

189 
osEº‹Resour˚
 = 0x81,

190 
osEº‹TimeoutResour˚
 = 0xC1,

191 
osEº‹ISR
 = 0x82,

192 
osEº‹ISRRecursive
 = 0x83,

193 
osEº‹Pri‹ôy
 = 0x84,

194 
osEº‹NoMem‹y
 = 0x85,

195 
osEº‹VÆue
 = 0x86,

196 
osEº‹OS
 = 0xFF,

197 
os_°©us_ª£rved
 = 0x7FFFFFFF

198 } 
	tosSètus
;

204 
osTimîOn˚
 = 0,

205 
osTimîPîiodic
 = 1

206 } 
	tos_timî_ty≥
;

210 (*
os_±hªad
Ë(c⁄° *
	t¨gumít
);

214 (*
os_±imî
Ë(c⁄° *
	t¨gumít
);

220 
os_thªad_cb
 *
	tosThªadId
;

224 
os_timî_cb
 *
	tosTimîId
;

228 
os_muãx_cb
 *
	tosMuãxId
;

232 
os_£m≠h‹e_cb
 *
	tosSem≠h‹eId
;

236 
os_poﬁ_cb
 *
	tosPoﬁId
;

240 
os_mesßgeQ_cb
 *
	tosMesßgeQId
;

244 
os_maûQ_cb
 *
	tosMaûQId
;

249 
	sos_thªad_def
 {

250 
os_±hªad
 
±hªad
;

251 
osPri‹ôy
 
çri‹ôy
;

252 
uöt32_t
 
ö°™˚s
;

253 
uöt32_t
 
°acksize
;

254 } 
	tosThªadDef_t
;

258 
	sos_timî_def
 {

259 
os_±imî
 
±imî
;

260 } 
	tosTimîDef_t
;

264 
	sos_muãx_def
 {

265 
uöt32_t
 
dummy
;

266 } 
	tosMuãxDef_t
;

270 
	sos_£m≠h‹e_def
 {

271 
uöt32_t
 
dummy
;

272 } 
	tosSem≠h‹eDef_t
;

276 
	sos_poﬁ_def
 {

277 
uöt32_t
 
poﬁ_sz
;

278 
uöt32_t
 
ôem_sz
;

279 *
poﬁ
;

280 } 
	tosPoﬁDef_t
;

284 
	sos_mesßgeQ_def
 {

285 
uöt32_t
 
queue_sz
;

286 
uöt32_t
 
ôem_sz
;

287 *
poﬁ
;

288 } 
	tosMesßgeQDef_t
;

292 
	sos_maûQ_def
 {

293 
uöt32_t
 
queue_sz
;

294 
uöt32_t
 
ôem_sz
;

295 *
poﬁ
;

296 } 
	tosMaûQDef_t
;

302 
osSètus
 
°©us
;

304 
uöt32_t
 
v
;

305 *
p
;

306 
öt32_t
 
sig«ls
;

307 } 
vÆue
;

309 
osMaûQId
 
maû_id
;

310 
osMesßgeQId
 
mesßge_id
;

311 } 
def
;

312 } 
	tosEvít
;

320 
osSètus
 
osKî√lInôülize
 ();

325 
osSètus
 
osKî√lSèπ
 ();

330 
öt32_t
 
osKî√lRu¬ög
();

332 #i‡(
deföed
 (
osFótuª_SysTick
) && (osFeature_SysTick != 0))

337 
uöt32_t
 
osKî√lSysTick
 ();

341 
	#osKî√lSysTickFªquícy
 100000000

	)

346 
	#osKî√lSysTickMi¸oSec
(
mi¸o£c
Ë(((
uöt64_t
)mi¸o£¯* (
osKî√lSysTickFªquícy
)Ë/ 1000000)

	)

359 #i‡
deföed
 (
osObje˘sExã∫Æ
)

360 
	#osThªadDef
(
«me
, 
¥i‹ôy
, 
ö°™˚s
, 
°acksz
Ë\

	)

361 c⁄° 
osThªadDef_t
 
os_thªad_def_
##
«me


363 
	#osThªadDef
(
«me
, 
¥i‹ôy
, 
ö°™˚s
, 
°acksz
Ë\

	)

364 c⁄° 
osThªadDef_t
 
os_thªad_def_
##
«me
 = \

365 { (
«me
), (
¥i‹ôy
), (
ö°™˚s
), (
°acksz
) }

372 
	#osThªad
(
«me
Ë\

	)

373 &
os_thªad_def_
##
«me


380 
osThªadId
 
osThªadCª©e
 (c⁄° 
osThªadDef_t
 *
thªad_def
, *
¨gumít
);

385 
osThªadId
 
osThªadGëId
 ();

391 
osSètus
 
osThªadTîmö©e
 (
osThªadId
 
thªad_id
);

396 
osSètus
 
osThªadYõld
 ();

403 
osSètus
 
osThªadSëPri‹ôy
 (
osThªadId
 
thªad_id
, 
osPri‹ôy
 
¥i‹ôy
);

409 
osPri‹ôy
 
osThªadGëPri‹ôy
 (
osThªadId
 
thªad_id
);

417 
osSètus
 
osDñay
 (
uöt32_t
 
mûli£c
);

419 #i‡(
deföed
 (
osFótuª_Waô
) && (osFeature_Wait != 0))

425 
osEvít
 
osWaô
 (
uöt32_t
 
mûli£c
);

436 #i‡
deföed
 (
osObje˘sExã∫Æ
)

437 
	#osTimîDef
(
«me
, 
fun˘i⁄
Ë\

	)

438 c⁄° 
osTimîDef_t
 
os_timî_def_
##
«me


440 
	#osTimîDef
(
«me
, 
fun˘i⁄
Ë\

	)

441 c⁄° 
osTimîDef_t
 
os_timî_def_
##
«me
 = \

442 { (
fun˘i⁄
) }

449 
	#osTimî
(
«me
Ë\

	)

450 &
os_timî_def_
##
«me


458 
osTimîId
 
osTimîCª©e
 (c⁄° 
osTimîDef_t
 *
timî_def
, 
os_timî_ty≥
 
ty≥
, *
¨gumít
);

465 
osSètus
 
osTimîSèπ
 (
osTimîId
 
timî_id
, 
uöt32_t
 
mûli£c
);

471 
osSètus
 
osTimîSt›
 (
osTimîId
 
timî_id
);

477 
osSètus
 
osTimîDñëe
 (
osTimîId
 
timî_id
);

487 
öt32_t
 
osSig«lSë
 (
osThªadId
 
thªad_id
, i¡32_à
sig«ls
);

494 
öt32_t
 
osSig«lCÀ¨
 (
osThªadId
 
thªad_id
, i¡32_à
sig«ls
);

501 
osEvít
 
osSig«lWaô
 (
öt32_t
 
sig«ls
, 
uöt32_t
 
mûli£c
);

510 #i‡
deföed
 (
osObje˘sExã∫Æ
)

511 
	#osMuãxDef
(
«me
Ë\

	)

512 c⁄° 
osMuãxDef_t
 
os_muãx_def_
##
«me


514 
	#osMuãxDef
(
«me
Ë\

	)

515 c⁄° 
osMuãxDef_t
 
os_muãx_def_
##
«me
 = { 0 }

522 
	#osMuãx
(
«me
Ë\

	)

523 &
os_muãx_def_
##
«me


529 
osMuãxId
 
osMuãxCª©e
 (c⁄° 
osMuãxDef_t
 *
muãx_def
);

536 
osSètus
 
osMuãxWaô
 (
osMuãxId
 
muãx_id
, 
uöt32_t
 
mûli£c
);

542 
osSètus
 
osMuãxRñó£
 (
osMuãxId
 
muãx_id
);

548 
osSètus
 
osMuãxDñëe
 (
osMuãxId
 
muãx_id
);

553 #i‡(
deföed
 (
osFótuª_Sem≠h‹e
) && (osFeature_Semaphore != 0))

559 #i‡
deföed
 (
osObje˘sExã∫Æ
)

560 
	#osSem≠h‹eDef
(
«me
Ë\

	)

561 c⁄° 
osSem≠h‹eDef_t
 
os_£m≠h‹e_def_
##
«me


563 
	#osSem≠h‹eDef
(
«me
Ë\

	)

564 c⁄° 
osSem≠h‹eDef_t
 
os_£m≠h‹e_def_
##
«me
 = { 0 }

571 
	#osSem≠h‹e
(
«me
Ë\

	)

572 &
os_£m≠h‹e_def_
##
«me


579 
osSem≠h‹eId
 
osSem≠h‹eCª©e
 (c⁄° 
osSem≠h‹eDef_t
 *
£m≠h‹e_def
, 
öt32_t
 
cou¡
);

586 
öt32_t
 
osSem≠h‹eWaô
 (
osSem≠h‹eId
 
£m≠h‹e_id
, 
uöt32_t
 
mûli£c
);

592 
osSètus
 
osSem≠h‹eRñó£
 (
osSem≠h‹eId
 
£m≠h‹e_id
);

598 
osSètus
 
osSem≠h‹eDñëe
 (
osSem≠h‹eId
 
£m≠h‹e_id
);

605 #i‡(
deföed
 (
osFótuª_Poﬁ
) && (osFeature_Pool != 0))

613 #i‡
deföed
 (
osObje˘sExã∫Æ
)

614 
	#osPoﬁDef
(
«me
, 
no
, 
ty≥
Ë\

	)

615 c⁄° 
osPoﬁDef_t
 
os_poﬁ_def_
##
«me


617 
	#osPoﬁDef
(
«me
, 
no
, 
ty≥
Ë\

	)

618 c⁄° 
osPoﬁDef_t
 
os_poﬁ_def_
##
«me
 = \

619 { (
no
), (
ty≥
), 
NULL
 }

626 
	#osPoﬁ
(
«me
Ë\

	)

627 &
os_poﬁ_def_
##
«me


633 
osPoﬁId
 
osPoﬁCª©e
 (c⁄° 
osPoﬁDef_t
 *
poﬁ_def
);

639 *
osPoﬁAŒoc
 (
osPoﬁId
 
poﬁ_id
);

645 *
osPoﬁCAŒoc
 (
osPoﬁId
 
poﬁ_id
);

652 
osSètus
 
osPoﬁFªe
 (
osPoﬁId
 
poﬁ_id
, *
block
);

659 #i‡(
deföed
 (
osFótuª_MesßgeQ
) && (osFeature_MessageQ != 0))

667 #i‡
deföed
 (
osObje˘sExã∫Æ
)

668 
	#osMesßgeQDef
(
«me
, 
queue_sz
, 
ty≥
Ë\

	)

669 c⁄° 
osMesßgeQDef_t
 
os_mesßgeQ_def_
##
«me


671 
	#osMesßgeQDef
(
«me
, 
queue_sz
, 
ty≥
Ë\

	)

672 c⁄° 
osMesßgeQDef_t
 
os_mesßgeQ_def_
##
«me
 = \

673 { (
queue_sz
),  (
ty≥
) }

680 
	#osMesßgeQ
(
«me
Ë\

	)

681 &
os_mesßgeQ_def_
##
«me


688 
osMesßgeQId
 
osMesßgeCª©e
 (c⁄° 
osMesßgeQDef_t
 *
queue_def
, 
osThªadId
 
thªad_id
);

696 
osSètus
 
osMesßgePut
 (
osMesßgeQId
 
queue_id
, 
uöt32_t
 
öfo
, uöt32_à
mûli£c
);

703 
osEvít
 
osMesßgeGë
 (
osMesßgeQId
 
queue_id
, 
uöt32_t
 
mûli£c
);

710 #i‡(
deföed
 (
osFótuª_MaûQ
) && (osFeature_MailQ != 0))

718 #i‡
deföed
 (
osObje˘sExã∫Æ
)

719 
	#osMaûQDef
(
«me
, 
queue_sz
, 
ty≥
Ë\

	)

720 c⁄° 
osMaûQDef_t
 
os_maûQ_def_
##
«me


722 
	#osMaûQDef
(
«me
, 
queue_sz
, 
ty≥
Ë\

	)

723 c⁄° 
osMaûQDef_t
 
os_maûQ_def_
##
«me
 = \

724 { (
queue_sz
),  (
ty≥
) }

731 
	#osMaûQ
(
«me
Ë\

	)

732 &
os_maûQ_def_
##
«me


739 
osMaûQId
 
osMaûCª©e
 (c⁄° 
osMaûQDef_t
 *
queue_def
, 
osThªadId
 
thªad_id
);

746 *
osMaûAŒoc
 (
osMaûQId
 
queue_id
, 
uöt32_t
 
mûli£c
);

753 *
osMaûCAŒoc
 (
osMaûQId
 
queue_id
, 
uöt32_t
 
mûli£c
);

760 
osSètus
 
osMaûPut
 (
osMaûQId
 
queue_id
, *
maû
);

767 
osEvít
 
osMaûGë
 (
osMaûQId
 
queue_id
, 
uöt32_t
 
mûli£c
);

774 
osSètus
 
osMaûFªe
 (
osMaûQId
 
queue_id
, *
maû
);

779 #ifde‡ 
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/misc.h

30 #i‚de‡
__MISC_H


31 
	#__MISC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt8_t
 
NVIC_IRQCh™√l
;

61 
uöt8_t
 
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
;

66 
uöt8_t
 
NVIC_IRQCh™√lSubPri‹ôy
;

71 
Fun˘i⁄ÆSèã
 
NVIC_IRQCh™√lCmd
;

74 } 
	tNVIC_InôTy≥Def
;

86 
	#NVIC_Ve˘Tab_RAM
 ((
uöt32_t
)0x20000000)

	)

87 
	#NVIC_Ve˘Tab_FLASH
 ((
uöt32_t
)0x08000000)

	)

88 
	#IS_NVIC_VECTTAB
(
VECTTAB
Ë(((VECTTABË=
NVIC_Ve˘Tab_RAM
Ë|| \

	)

89 ((
VECTTAB
Ë=
NVIC_Ve˘Tab_FLASH
))

98 
	#NVIC_LP_SEVONPEND
 ((
uöt8_t
)0x10)

	)

99 
	#NVIC_LP_SLEEPDEEP
 ((
uöt8_t
)0x04)

	)

100 
	#NVIC_LP_SLEEPONEXIT
 ((
uöt8_t
)0x02)

	)

101 
	#IS_NVIC_LP
(
LP
Ë(((LPË=
NVIC_LP_SEVONPEND
Ë|| \

	)

102 ((
LP
Ë=
NVIC_LP_SLEEPDEEP
) || \

103 ((
LP
Ë=
NVIC_LP_SLEEPONEXIT
))

112 
	#NVIC_Pri‹ôyGroup_0
 ((
uöt32_t
)0x700Ë

	)

114 
	#NVIC_Pri‹ôyGroup_1
 ((
uöt32_t
)0x600Ë

	)

116 
	#NVIC_Pri‹ôyGroup_2
 ((
uöt32_t
)0x500Ë

	)

118 
	#NVIC_Pri‹ôyGroup_3
 ((
uöt32_t
)0x400Ë

	)

120 
	#NVIC_Pri‹ôyGroup_4
 ((
uöt32_t
)0x300Ë

	)

123 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
Ë(((GROUPË=
NVIC_Pri‹ôyGroup_0
Ë|| \

	)

124 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_1
) || \

125 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_2
) || \

126 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_3
) || \

127 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_4
))

129 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

131 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

133 
	#IS_NVIC_OFFSET
(
OFFSET
Ë((OFFSETË< 0x000FFFFF)

	)

143 
	#SysTick_CLKSour˚_HCLK_Div8
 ((
uöt32_t
)0xFFFFFFFB)

	)

144 
	#SysTick_CLKSour˚_HCLK
 ((
uöt32_t
)0x00000004)

	)

145 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SysTick_CLKSour˚_HCLK
Ë|| \

	)

146 ((
SOURCE
Ë=
SysTick_CLKSour˚_HCLK_Div8
))

158 
NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
);

159 
NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
);

160 
NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
);

161 
NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

162 
SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
);

164 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_adc.h

30 #i‚de‡
__STM32F4xx_ADC_H


31 
	#__STM32F4xx_ADC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

55 
uöt32_t
 
ADC_Resﬁuti⁄
;

57 
Fun˘i⁄ÆSèã
 
ADC_SˇnC⁄vMode
;

61 
Fun˘i⁄ÆSèã
 
ADC_C⁄töuousC⁄vMode
;

64 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄vEdge
;

68 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄v
;

72 
uöt32_t
 
ADC_D©aAlign
;

75 
uöt8_t
 
ADC_NbrOfC⁄vîsi⁄
;

79 }
	tADC_InôTy≥Def
;

86 
uöt32_t
 
ADC_Mode
;

89 
uöt32_t
 
ADC_PªsˇÀr
;

92 
uöt32_t
 
ADC_DMAAc˚ssMode
;

96 
uöt32_t
 
ADC_TwoSam∂ögDñay
;

100 }
	tADC_Comm⁄InôTy≥Def
;

108 
	#IS_ADC_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
Ë|| \

	)

109 ((
PERIPH
Ë=
ADC2
) || \

110 ((
PERIPH
Ë=
ADC3
))

115 
	#ADC_Mode_Indïídít
 ((
uöt32_t
)0x00000000)

	)

116 
	#ADC_DuÆMode_RegSimu…_InjecSimu…
 ((
uöt32_t
)0x00000001)

	)

117 
	#ADC_DuÆMode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00000002)

	)

118 
	#ADC_DuÆMode_InjecSimu…
 ((
uöt32_t
)0x00000005)

	)

119 
	#ADC_DuÆMode_RegSimu…
 ((
uöt32_t
)0x00000006)

	)

120 
	#ADC_DuÆMode_I¡îl
 ((
uöt32_t
)0x00000007)

	)

121 
	#ADC_DuÆMode_A…îTrig
 ((
uöt32_t
)0x00000009)

	)

122 
	#ADC_TrùÀMode_RegSimu…_InjecSimu…
 ((
uöt32_t
)0x00000011)

	)

123 
	#ADC_TrùÀMode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00000012)

	)

124 
	#ADC_TrùÀMode_InjecSimu…
 ((
uöt32_t
)0x00000015)

	)

125 
	#ADC_TrùÀMode_RegSimu…
 ((
uöt32_t
)0x00000016)

	)

126 
	#ADC_TrùÀMode_I¡îl
 ((
uöt32_t
)0x00000017)

	)

127 
	#ADC_TrùÀMode_A…îTrig
 ((
uöt32_t
)0x00000019)

	)

128 
	#IS_ADC_MODE
(
MODE
Ë(((MODEË=
ADC_Mode_Indïídít
Ë|| \

	)

129 ((
MODE
Ë=
ADC_DuÆMode_RegSimu…_InjecSimu…
) || \

130 ((
MODE
Ë=
ADC_DuÆMode_RegSimu…_A…îTrig
) || \

131 ((
MODE
Ë=
ADC_DuÆMode_InjecSimu…
) || \

132 ((
MODE
Ë=
ADC_DuÆMode_RegSimu…
) || \

133 ((
MODE
Ë=
ADC_DuÆMode_I¡îl
) || \

134 ((
MODE
Ë=
ADC_DuÆMode_A…îTrig
) || \

135 ((
MODE
Ë=
ADC_TrùÀMode_RegSimu…_InjecSimu…
) || \

136 ((
MODE
Ë=
ADC_TrùÀMode_RegSimu…_A…îTrig
) || \

137 ((
MODE
Ë=
ADC_TrùÀMode_InjecSimu…
) || \

138 ((
MODE
Ë=
ADC_TrùÀMode_RegSimu…
) || \

139 ((
MODE
Ë=
ADC_TrùÀMode_I¡îl
) || \

140 ((
MODE
Ë=
ADC_TrùÀMode_A…îTrig
))

149 
	#ADC_PªsˇÀr_Div2
 ((
uöt32_t
)0x00000000)

	)

150 
	#ADC_PªsˇÀr_Div4
 ((
uöt32_t
)0x00010000)

	)

151 
	#ADC_PªsˇÀr_Div6
 ((
uöt32_t
)0x00020000)

	)

152 
	#ADC_PªsˇÀr_Div8
 ((
uöt32_t
)0x00030000)

	)

153 
	#IS_ADC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
ADC_PªsˇÀr_Div2
Ë|| \

	)

154 ((
PRESCALER
Ë=
ADC_PªsˇÀr_Div4
) || \

155 ((
PRESCALER
Ë=
ADC_PªsˇÀr_Div6
) || \

156 ((
PRESCALER
Ë=
ADC_PªsˇÀr_Div8
))

165 
	#ADC_DMAAc˚ssMode_DißbÀd
 ((
uöt32_t
)0x00000000Ë

	)

166 
	#ADC_DMAAc˚ssMode_1
 ((
uöt32_t
)0x00004000Ë

	)

167 
	#ADC_DMAAc˚ssMode_2
 ((
uöt32_t
)0x00008000Ë

	)

168 
	#ADC_DMAAc˚ssMode_3
 ((
uöt32_t
)0x0000C000Ë

	)

169 
	#IS_ADC_DMA_ACCESS_MODE
(
MODE
Ë(((MODEË=
ADC_DMAAc˚ssMode_DißbÀd
Ë|| \

	)

170 ((
MODE
Ë=
ADC_DMAAc˚ssMode_1
) || \

171 ((
MODE
Ë=
ADC_DMAAc˚ssMode_2
) || \

172 ((
MODE
Ë=
ADC_DMAAc˚ssMode_3
))

182 
	#ADC_TwoSam∂ögDñay_5Cy˛es
 ((
uöt32_t
)0x00000000)

	)

183 
	#ADC_TwoSam∂ögDñay_6Cy˛es
 ((
uöt32_t
)0x00000100)

	)

184 
	#ADC_TwoSam∂ögDñay_7Cy˛es
 ((
uöt32_t
)0x00000200)

	)

185 
	#ADC_TwoSam∂ögDñay_8Cy˛es
 ((
uöt32_t
)0x00000300)

	)

186 
	#ADC_TwoSam∂ögDñay_9Cy˛es
 ((
uöt32_t
)0x00000400)

	)

187 
	#ADC_TwoSam∂ögDñay_10Cy˛es
 ((
uöt32_t
)0x00000500)

	)

188 
	#ADC_TwoSam∂ögDñay_11Cy˛es
 ((
uöt32_t
)0x00000600)

	)

189 
	#ADC_TwoSam∂ögDñay_12Cy˛es
 ((
uöt32_t
)0x00000700)

	)

190 
	#ADC_TwoSam∂ögDñay_13Cy˛es
 ((
uöt32_t
)0x00000800)

	)

191 
	#ADC_TwoSam∂ögDñay_14Cy˛es
 ((
uöt32_t
)0x00000900)

	)

192 
	#ADC_TwoSam∂ögDñay_15Cy˛es
 ((
uöt32_t
)0x00000A00)

	)

193 
	#ADC_TwoSam∂ögDñay_16Cy˛es
 ((
uöt32_t
)0x00000B00)

	)

194 
	#ADC_TwoSam∂ögDñay_17Cy˛es
 ((
uöt32_t
)0x00000C00)

	)

195 
	#ADC_TwoSam∂ögDñay_18Cy˛es
 ((
uöt32_t
)0x00000D00)

	)

196 
	#ADC_TwoSam∂ögDñay_19Cy˛es
 ((
uöt32_t
)0x00000E00)

	)

197 
	#ADC_TwoSam∂ögDñay_20Cy˛es
 ((
uöt32_t
)0x00000F00)

	)

198 
	#IS_ADC_SAMPLING_DELAY
(
DELAY
Ë(((DELAYË=
ADC_TwoSam∂ögDñay_5Cy˛es
Ë|| \

	)

199 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_6Cy˛es
) || \

200 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_7Cy˛es
) || \

201 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_8Cy˛es
) || \

202 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_9Cy˛es
) || \

203 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_10Cy˛es
) || \

204 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_11Cy˛es
) || \

205 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_12Cy˛es
) || \

206 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_13Cy˛es
) || \

207 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_14Cy˛es
) || \

208 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_15Cy˛es
) || \

209 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_16Cy˛es
) || \

210 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_17Cy˛es
) || \

211 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_18Cy˛es
) || \

212 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_19Cy˛es
) || \

213 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_20Cy˛es
))

223 
	#ADC_Resﬁuti⁄_12b
 ((
uöt32_t
)0x00000000)

	)

224 
	#ADC_Resﬁuti⁄_10b
 ((
uöt32_t
)0x01000000)

	)

225 
	#ADC_Resﬁuti⁄_8b
 ((
uöt32_t
)0x02000000)

	)

226 
	#ADC_Resﬁuti⁄_6b
 ((
uöt32_t
)0x03000000)

	)

227 
	#IS_ADC_RESOLUTION
(
RESOLUTION
Ë(((RESOLUTIONË=
ADC_Resﬁuti⁄_12b
Ë|| \

	)

228 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_10b
) || \

229 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_8b
) || \

230 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_6b
))

240 
	#ADC_Exã∫ÆTrigC⁄vEdge_N⁄e
 ((
uöt32_t
)0x00000000)

	)

241 
	#ADC_Exã∫ÆTrigC⁄vEdge_Risög
 ((
uöt32_t
)0x10000000)

	)

242 
	#ADC_Exã∫ÆTrigC⁄vEdge_FÆlög
 ((
uöt32_t
)0x20000000)

	)

243 
	#ADC_Exã∫ÆTrigC⁄vEdge_RisögFÆlög
 ((
uöt32_t
)0x30000000)

	)

244 
	#IS_ADC_EXT_TRIG_EDGE
(
EDGE
Ë(((EDGEË=
ADC_Exã∫ÆTrigC⁄vEdge_N⁄e
Ë|| \

	)

245 ((
EDGE
Ë=
ADC_Exã∫ÆTrigC⁄vEdge_Risög
) || \

246 ((
EDGE
Ë=
ADC_Exã∫ÆTrigC⁄vEdge_FÆlög
) || \

247 ((
EDGE
Ë=
ADC_Exã∫ÆTrigC⁄vEdge_RisögFÆlög
))

256 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC1
 ((
uöt32_t
)0x00000000)

	)

257 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC2
 ((
uöt32_t
)0x01000000)

	)

258 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC3
 ((
uöt32_t
)0x02000000)

	)

259 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC2
 ((
uöt32_t
)0x03000000)

	)

260 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC3
 ((
uöt32_t
)0x04000000)

	)

261 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC4
 ((
uöt32_t
)0x05000000)

	)

262 
	#ADC_Exã∫ÆTrigC⁄v_T2_TRGO
 ((
uöt32_t
)0x06000000)

	)

263 
	#ADC_Exã∫ÆTrigC⁄v_T3_CC1
 ((
uöt32_t
)0x07000000)

	)

264 
	#ADC_Exã∫ÆTrigC⁄v_T3_TRGO
 ((
uöt32_t
)0x08000000)

	)

265 
	#ADC_Exã∫ÆTrigC⁄v_T4_CC4
 ((
uöt32_t
)0x09000000)

	)

266 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC1
 ((
uöt32_t
)0x0A000000)

	)

267 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC2
 ((
uöt32_t
)0x0B000000)

	)

268 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC3
 ((
uöt32_t
)0x0C000000)

	)

269 
	#ADC_Exã∫ÆTrigC⁄v_T8_CC1
 ((
uöt32_t
)0x0D000000)

	)

270 
	#ADC_Exã∫ÆTrigC⁄v_T8_TRGO
 ((
uöt32_t
)0x0E000000)

	)

271 
	#ADC_Exã∫ÆTrigC⁄v_Ext_IT11
 ((
uöt32_t
)0x0F000000)

	)

272 
	#IS_ADC_EXT_TRIG
(
REGTRIG
Ë(((REGTRIGË=
ADC_Exã∫ÆTrigC⁄v_T1_CC1
Ë|| \

	)

273 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC2
) || \

274 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC3
) || \

275 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC2
) || \

276 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC3
) || \

277 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC4
) || \

278 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_TRGO
) || \

279 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_CC1
) || \

280 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_TRGO
) || \

281 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T4_CC4
) || \

282 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC1
) || \

283 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC2
) || \

284 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC3
) || \

285 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_CC1
) || \

286 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_TRGO
) || \

287 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_Ext_IT11
))

296 
	#ADC_D©aAlign_Right
 ((
uöt32_t
)0x00000000)

	)

297 
	#ADC_D©aAlign_Le·
 ((
uöt32_t
)0x00000800)

	)

298 
	#IS_ADC_DATA_ALIGN
(
ALIGN
Ë(((ALIGNË=
ADC_D©aAlign_Right
Ë|| \

	)

299 ((
ALIGN
Ë=
ADC_D©aAlign_Le·
))

308 
	#ADC_Ch™√l_0
 ((
uöt8_t
)0x00)

	)

309 
	#ADC_Ch™√l_1
 ((
uöt8_t
)0x01)

	)

310 
	#ADC_Ch™√l_2
 ((
uöt8_t
)0x02)

	)

311 
	#ADC_Ch™√l_3
 ((
uöt8_t
)0x03)

	)

312 
	#ADC_Ch™√l_4
 ((
uöt8_t
)0x04)

	)

313 
	#ADC_Ch™√l_5
 ((
uöt8_t
)0x05)

	)

314 
	#ADC_Ch™√l_6
 ((
uöt8_t
)0x06)

	)

315 
	#ADC_Ch™√l_7
 ((
uöt8_t
)0x07)

	)

316 
	#ADC_Ch™√l_8
 ((
uöt8_t
)0x08)

	)

317 
	#ADC_Ch™√l_9
 ((
uöt8_t
)0x09)

	)

318 
	#ADC_Ch™√l_10
 ((
uöt8_t
)0x0A)

	)

319 
	#ADC_Ch™√l_11
 ((
uöt8_t
)0x0B)

	)

320 
	#ADC_Ch™√l_12
 ((
uöt8_t
)0x0C)

	)

321 
	#ADC_Ch™√l_13
 ((
uöt8_t
)0x0D)

	)

322 
	#ADC_Ch™√l_14
 ((
uöt8_t
)0x0E)

	)

323 
	#ADC_Ch™√l_15
 ((
uöt8_t
)0x0F)

	)

324 
	#ADC_Ch™√l_16
 ((
uöt8_t
)0x10)

	)

325 
	#ADC_Ch™√l_17
 ((
uöt8_t
)0x11)

	)

326 
	#ADC_Ch™√l_18
 ((
uöt8_t
)0x12)

	)

328 #i‡
deföed
 (
STM32F40_41xxx
)

329 
	#ADC_Ch™√l_TempSís‹
 ((
uöt8_t
)
ADC_Ch™√l_16
)

	)

332 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
Ë|| deföed (
STM32F401xx
Ë|| deföed (
STM32F411xE
)

333 
	#ADC_Ch™√l_TempSís‹
 ((
uöt8_t
)
ADC_Ch™√l_18
)

	)

336 
	#ADC_Ch™√l_Vªföt
 ((
uöt8_t
)
ADC_Ch™√l_17
)

	)

337 
	#ADC_Ch™√l_Vb©
 ((
uöt8_t
)
ADC_Ch™√l_18
)

	)

339 
	#IS_ADC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Ch™√l_0
Ë|| \

	)

340 ((
CHANNEL
Ë=
ADC_Ch™√l_1
) || \

341 ((
CHANNEL
Ë=
ADC_Ch™√l_2
) || \

342 ((
CHANNEL
Ë=
ADC_Ch™√l_3
) || \

343 ((
CHANNEL
Ë=
ADC_Ch™√l_4
) || \

344 ((
CHANNEL
Ë=
ADC_Ch™√l_5
) || \

345 ((
CHANNEL
Ë=
ADC_Ch™√l_6
) || \

346 ((
CHANNEL
Ë=
ADC_Ch™√l_7
) || \

347 ((
CHANNEL
Ë=
ADC_Ch™√l_8
) || \

348 ((
CHANNEL
Ë=
ADC_Ch™√l_9
) || \

349 ((
CHANNEL
Ë=
ADC_Ch™√l_10
) || \

350 ((
CHANNEL
Ë=
ADC_Ch™√l_11
) || \

351 ((
CHANNEL
Ë=
ADC_Ch™√l_12
) || \

352 ((
CHANNEL
Ë=
ADC_Ch™√l_13
) || \

353 ((
CHANNEL
Ë=
ADC_Ch™√l_14
) || \

354 ((
CHANNEL
Ë=
ADC_Ch™√l_15
) || \

355 ((
CHANNEL
Ë=
ADC_Ch™√l_16
) || \

356 ((
CHANNEL
Ë=
ADC_Ch™√l_17
) || \

357 ((
CHANNEL
Ë=
ADC_Ch™√l_18
))

366 
	#ADC_Sam∂eTime_3Cy˛es
 ((
uöt8_t
)0x00)

	)

367 
	#ADC_Sam∂eTime_15Cy˛es
 ((
uöt8_t
)0x01)

	)

368 
	#ADC_Sam∂eTime_28Cy˛es
 ((
uöt8_t
)0x02)

	)

369 
	#ADC_Sam∂eTime_56Cy˛es
 ((
uöt8_t
)0x03)

	)

370 
	#ADC_Sam∂eTime_84Cy˛es
 ((
uöt8_t
)0x04)

	)

371 
	#ADC_Sam∂eTime_112Cy˛es
 ((
uöt8_t
)0x05)

	)

372 
	#ADC_Sam∂eTime_144Cy˛es
 ((
uöt8_t
)0x06)

	)

373 
	#ADC_Sam∂eTime_480Cy˛es
 ((
uöt8_t
)0x07)

	)

374 
	#IS_ADC_SAMPLE_TIME
(
TIME
Ë(((TIMEË=
ADC_Sam∂eTime_3Cy˛es
Ë|| \

	)

375 ((
TIME
Ë=
ADC_Sam∂eTime_15Cy˛es
) || \

376 ((
TIME
Ë=
ADC_Sam∂eTime_28Cy˛es
) || \

377 ((
TIME
Ë=
ADC_Sam∂eTime_56Cy˛es
) || \

378 ((
TIME
Ë=
ADC_Sam∂eTime_84Cy˛es
) || \

379 ((
TIME
Ë=
ADC_Sam∂eTime_112Cy˛es
) || \

380 ((
TIME
Ë=
ADC_Sam∂eTime_144Cy˛es
) || \

381 ((
TIME
Ë=
ADC_Sam∂eTime_480Cy˛es
))

390 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_N⁄e
 ((
uöt32_t
)0x00000000)

	)

391 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_Risög
 ((
uöt32_t
)0x00100000)

	)

392 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_FÆlög
 ((
uöt32_t
)0x00200000)

	)

393 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_RisögFÆlög
 ((
uöt32_t
)0x00300000)

	)

394 
	#IS_ADC_EXT_INJEC_TRIG_EDGE
(
EDGE
Ë(((EDGEË=
ADC_Exã∫ÆTrigInjecC⁄vEdge_N⁄e
Ë|| \

	)

395 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEdge_Risög
) || \

396 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEdge_FÆlög
) || \

397 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEdge_RisögFÆlög
))

407 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
 ((
uöt32_t
)0x00000000)

	)

408 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
 ((
uöt32_t
)0x00010000)

	)

409 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
 ((
uöt32_t
)0x00020000)

	)

410 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
 ((
uöt32_t
)0x00030000)

	)

411 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC2
 ((
uöt32_t
)0x00040000)

	)

412 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
 ((
uöt32_t
)0x00050000)

	)

413 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC1
 ((
uöt32_t
)0x00060000)

	)

414 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC2
 ((
uöt32_t
)0x00070000)

	)

415 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
 ((
uöt32_t
)0x00080000)

	)

416 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
 ((
uöt32_t
)0x00090000)

	)

417 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
 ((
uöt32_t
)0x000A0000)

	)

418 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
 ((
uöt32_t
)0x000B0000)

	)

419 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
 ((
uöt32_t
)0x000C0000)

	)

420 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC3
 ((
uöt32_t
)0x000D0000)

	)

421 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
 ((
uöt32_t
)0x000E0000)

	)

422 
	#ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15
 ((
uöt32_t
)0x000F0000)

	)

423 
	#IS_ADC_EXT_INJEC_TRIG
(
INJTRIG
Ë(((INJTRIGË=
ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
Ë|| \

	)

424 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
) || \

425 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
) || \

426 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
) || \

427 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC2
) || \

428 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
) || \

429 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC1
) || \

430 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC2
) || \

431 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
) || \

432 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
) || \

433 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
) || \

434 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
) || \

435 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
) || \

436 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC3
) || \

437 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
) || \

438 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15
))

447 
	#ADC_Inje˘edCh™√l_1
 ((
uöt8_t
)0x14)

	)

448 
	#ADC_Inje˘edCh™√l_2
 ((
uöt8_t
)0x18)

	)

449 
	#ADC_Inje˘edCh™√l_3
 ((
uöt8_t
)0x1C)

	)

450 
	#ADC_Inje˘edCh™√l_4
 ((
uöt8_t
)0x20)

	)

451 
	#IS_ADC_INJECTED_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Inje˘edCh™√l_1
Ë|| \

	)

452 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_2
) || \

453 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_3
) || \

454 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_4
))

463 
	#ADC_A«logW©chdog_SögÀRegE«bÀ
 ((
uöt32_t
)0x00800200)

	)

464 
	#ADC_A«logW©chdog_SögÀInjecE«bÀ
 ((
uöt32_t
)0x00400200)

	)

465 
	#ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
 ((
uöt32_t
)0x00C00200)

	)

466 
	#ADC_A«logW©chdog_AŒRegE«bÀ
 ((
uöt32_t
)0x00800000)

	)

467 
	#ADC_A«logW©chdog_AŒInjecE«bÀ
 ((
uöt32_t
)0x00400000)

	)

468 
	#ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
 ((
uöt32_t
)0x00C00000)

	)

469 
	#ADC_A«logW©chdog_N⁄e
 ((
uöt32_t
)0x00000000)

	)

470 
	#IS_ADC_ANALOG_WATCHDOG
(
WATCHDOG
Ë(((WATCHDOGË=
ADC_A«logW©chdog_SögÀRegE«bÀ
Ë|| \

	)

471 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀInjecE«bÀ
) || \

472 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
) || \

473 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegE«bÀ
) || \

474 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒInjecE«bÀ
) || \

475 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
) || \

476 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_N⁄e
))

485 
	#ADC_IT_EOC
 ((
uöt16_t
)0x0205)

	)

486 
	#ADC_IT_AWD
 ((
uöt16_t
)0x0106)

	)

487 
	#ADC_IT_JEOC
 ((
uöt16_t
)0x0407)

	)

488 
	#ADC_IT_OVR
 ((
uöt16_t
)0x201A)

	)

489 
	#IS_ADC_IT
(
IT
Ë(((ITË=
ADC_IT_EOC
Ë|| ((ITË=
ADC_IT_AWD
Ë|| \

	)

490 ((
IT
Ë=
ADC_IT_JEOC
)|| ((ITË=
ADC_IT_OVR
))

499 
	#ADC_FLAG_AWD
 ((
uöt8_t
)0x01)

	)

500 
	#ADC_FLAG_EOC
 ((
uöt8_t
)0x02)

	)

501 
	#ADC_FLAG_JEOC
 ((
uöt8_t
)0x04)

	)

502 
	#ADC_FLAG_JSTRT
 ((
uöt8_t
)0x08)

	)

503 
	#ADC_FLAG_STRT
 ((
uöt8_t
)0x10)

	)

504 
	#ADC_FLAG_OVR
 ((
uöt8_t
)0x20)

	)

506 
	#IS_ADC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt8_t
)0xC0Ë=0x00Ë&& ((FLAGË!0x00))

	)

507 
	#IS_ADC_GET_FLAG
(
FLAG
Ë(((FLAGË=
ADC_FLAG_AWD
Ë|| \

	)

508 ((
FLAG
Ë=
ADC_FLAG_EOC
) || \

509 ((
FLAG
Ë=
ADC_FLAG_JEOC
) || \

510 ((
FLAG
)=
ADC_FLAG_JSTRT
) || \

511 ((
FLAG
Ë=
ADC_FLAG_STRT
) || \

512 ((
FLAG
)=
ADC_FLAG_OVR
))

521 
	#IS_ADC_THRESHOLD
(
THRESHOLD
Ë((THRESHOLDË<0xFFF)

	)

530 
	#IS_ADC_OFFSET
(
OFFSET
Ë((OFFSETË<0xFFF)

	)

539 
	#IS_ADC_INJECTED_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x4))

	)

548 
	#IS_ADC_INJECTED_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x4))

	)

557 
	#IS_ADC_REGULAR_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x10))

	)

566 
	#IS_ADC_REGULAR_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x10))

	)

575 
	#IS_ADC_REGULAR_DISC_NUMBER
(
NUMBER
Ë(((NUMBERË>0x1Ë&& ((NUMBERË<0x8))

	)

589 
ADC_DeInô
();

592 
ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

593 
ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

594 
ADC_Comm⁄Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
);

595 
ADC_Comm⁄Såu˘Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
);

596 
ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

599 
ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
);

600 
ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
,uöt16_à
LowThªshﬁd
);

601 
ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
);

604 
ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

605 
ADC_VBATCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

608 
ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

609 
ADC_So·w¨eSèπC⁄v
(
ADC_Ty≥Def
* 
ADCx
);

610 
FœgSètus
 
ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
);

611 
ADC_EOCOnEachReguœrCh™√lCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

612 
ADC_C⁄töuousModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

613 
ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
);

614 
ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

615 
uöt16_t
 
ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
);

616 
uöt32_t
 
ADC_GëMu…iModeC⁄vîsi⁄VÆue
();

619 
ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

620 
ADC_DMAReque°A·îLa°Tøns„rCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

621 
ADC_Mu…iModeDMAReque°A·îLa°Tøns„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

624 
ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

625 
ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
);

626 
ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
);

627 
ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
);

628 
ADC_Exã∫ÆTrigInje˘edC⁄vEdgeC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄vEdge
);

629 
ADC_So·w¨eSèπInje˘edC⁄v
(
ADC_Ty≥Def
* 
ADCx
);

630 
FœgSètus
 
ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
);

631 
ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

632 
ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

633 
uöt16_t
 
ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
);

636 
ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

637 
FœgSètus
 
ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

638 
ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

639 
ITSètus
 
ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

640 
ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

642 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_can.h

30 #i‚de‡
__STM32F4xx_CAN_H


31 
	#__STM32F4xx_CAN_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

50 
	#IS_CAN_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
CAN1
Ë|| \

	)

51 ((
PERIPH
Ë=
CAN2
))

58 
uöt16_t
 
CAN_PªsˇÀr
;

61 
uöt8_t
 
CAN_Mode
;

64 
uöt8_t
 
CAN_SJW
;

69 
uöt8_t
 
CAN_BS1
;

73 
uöt8_t
 
CAN_BS2
;

76 
Fun˘i⁄ÆSèã
 
CAN_TTCM
;

79 
Fun˘i⁄ÆSèã
 
CAN_ABOM
;

82 
Fun˘i⁄ÆSèã
 
CAN_AWUM
;

85 
Fun˘i⁄ÆSèã
 
CAN_NART
;

88 
Fun˘i⁄ÆSèã
 
CAN_RFLM
;

91 
Fun˘i⁄ÆSèã
 
CAN_TXFP
;

93 } 
	tCAN_InôTy≥Def
;

100 
uöt16_t
 
CAN_FûãrIdHigh
;

104 
uöt16_t
 
CAN_FûãrIdLow
;

108 
uöt16_t
 
CAN_FûãrMaskIdHigh
;

113 
uöt16_t
 
CAN_FûãrMaskIdLow
;

118 
uöt16_t
 
CAN_FûãrFIFOAssignmít
;

121 
uöt8_t
 
CAN_FûãrNumbî
;

123 
uöt8_t
 
CAN_FûãrMode
;

126 
uöt8_t
 
CAN_FûãrSˇÀ
;

129 
Fun˘i⁄ÆSèã
 
CAN_FûãrA˘iv©i⁄
;

131 } 
	tCAN_FûãrInôTy≥Def
;

138 
uöt32_t
 
StdId
;

141 
uöt32_t
 
ExtId
;

144 
uöt8_t
 
IDE
;

148 
uöt8_t
 
RTR
;

152 
uöt8_t
 
DLC
;

156 
uöt8_t
 
D©a
[8];

158 } 
	tC™TxMsg
;

165 
uöt32_t
 
StdId
;

168 
uöt32_t
 
ExtId
;

171 
uöt8_t
 
IDE
;

175 
uöt8_t
 
RTR
;

179 
uöt8_t
 
DLC
;

182 
uöt8_t
 
D©a
[8];

185 
uöt8_t
 
FMI
;

188 } 
	tC™RxMsg
;

200 
	#CAN_InôSètus_Faûed
 ((
uöt8_t
)0x00Ë

	)

201 
	#CAN_InôSètus_Suc˚ss
 ((
uöt8_t
)0x01Ë

	)

205 
	#CANINITFAILED
 
CAN_InôSètus_Faûed


	)

206 
	#CANINITOK
 
CAN_InôSètus_Suc˚ss


	)

215 
	#CAN_Mode_N‹mÆ
 ((
uöt8_t
)0x00Ë

	)

216 
	#CAN_Mode_Lo›Back
 ((
uöt8_t
)0x01Ë

	)

217 
	#CAN_Mode_Sûít
 ((
uöt8_t
)0x02Ë

	)

218 
	#CAN_Mode_Sûít_Lo›Back
 ((
uöt8_t
)0x03Ë

	)

220 
	#IS_CAN_MODE
(
MODE
Ë(((MODEË=
CAN_Mode_N‹mÆ
Ë|| \

	)

221 ((
MODE
Ë=
CAN_Mode_Lo›Back
)|| \

222 ((
MODE
Ë=
CAN_Mode_Sûít
) || \

223 ((
MODE
Ë=
CAN_Mode_Sûít_Lo›Back
))

233 
	#CAN_O≥øtögMode_Inôüliz©i⁄
 ((
uöt8_t
)0x00Ë

	)

234 
	#CAN_O≥øtögMode_N‹mÆ
 ((
uöt8_t
)0x01Ë

	)

235 
	#CAN_O≥øtögMode_SÀï
 ((
uöt8_t
)0x02Ë

	)

238 
	#IS_CAN_OPERATING_MODE
(
MODE
Ë(((MODEË=
CAN_O≥øtögMode_Inôüliz©i⁄
Ë||\

	)

239 ((
MODE
Ë=
CAN_O≥øtögMode_N‹mÆ
)|| \

240 ((
MODE
Ë=
CAN_O≥øtögMode_SÀï
))

250 
	#CAN_ModeSètus_Faûed
 ((
uöt8_t
)0x00Ë

	)

251 
	#CAN_ModeSètus_Suc˚ss
 ((
uöt8_t
)!
CAN_ModeSètus_Faûed
Ë

	)

259 
	#CAN_SJW_1tq
 ((
uöt8_t
)0x00Ë

	)

260 
	#CAN_SJW_2tq
 ((
uöt8_t
)0x01Ë

	)

261 
	#CAN_SJW_3tq
 ((
uöt8_t
)0x02Ë

	)

262 
	#CAN_SJW_4tq
 ((
uöt8_t
)0x03Ë

	)

264 
	#IS_CAN_SJW
(
SJW
Ë(((SJWË=
CAN_SJW_1tq
Ë|| ((SJWË=
CAN_SJW_2tq
)|| \

	)

265 ((
SJW
Ë=
CAN_SJW_3tq
Ë|| ((SJWË=
CAN_SJW_4tq
))

273 
	#CAN_BS1_1tq
 ((
uöt8_t
)0x00Ë

	)

274 
	#CAN_BS1_2tq
 ((
uöt8_t
)0x01Ë

	)

275 
	#CAN_BS1_3tq
 ((
uöt8_t
)0x02Ë

	)

276 
	#CAN_BS1_4tq
 ((
uöt8_t
)0x03Ë

	)

277 
	#CAN_BS1_5tq
 ((
uöt8_t
)0x04Ë

	)

278 
	#CAN_BS1_6tq
 ((
uöt8_t
)0x05Ë

	)

279 
	#CAN_BS1_7tq
 ((
uöt8_t
)0x06Ë

	)

280 
	#CAN_BS1_8tq
 ((
uöt8_t
)0x07Ë

	)

281 
	#CAN_BS1_9tq
 ((
uöt8_t
)0x08Ë

	)

282 
	#CAN_BS1_10tq
 ((
uöt8_t
)0x09Ë

	)

283 
	#CAN_BS1_11tq
 ((
uöt8_t
)0x0AË

	)

284 
	#CAN_BS1_12tq
 ((
uöt8_t
)0x0BË

	)

285 
	#CAN_BS1_13tq
 ((
uöt8_t
)0x0CË

	)

286 
	#CAN_BS1_14tq
 ((
uöt8_t
)0x0DË

	)

287 
	#CAN_BS1_15tq
 ((
uöt8_t
)0x0EË

	)

288 
	#CAN_BS1_16tq
 ((
uöt8_t
)0x0FË

	)

290 
	#IS_CAN_BS1
(
BS1
Ë((BS1Ë<
CAN_BS1_16tq
)

	)

298 
	#CAN_BS2_1tq
 ((
uöt8_t
)0x00Ë

	)

299 
	#CAN_BS2_2tq
 ((
uöt8_t
)0x01Ë

	)

300 
	#CAN_BS2_3tq
 ((
uöt8_t
)0x02Ë

	)

301 
	#CAN_BS2_4tq
 ((
uöt8_t
)0x03Ë

	)

302 
	#CAN_BS2_5tq
 ((
uöt8_t
)0x04Ë

	)

303 
	#CAN_BS2_6tq
 ((
uöt8_t
)0x05Ë

	)

304 
	#CAN_BS2_7tq
 ((
uöt8_t
)0x06Ë

	)

305 
	#CAN_BS2_8tq
 ((
uöt8_t
)0x07Ë

	)

307 
	#IS_CAN_BS2
(
BS2
Ë((BS2Ë<
CAN_BS2_8tq
)

	)

315 
	#IS_CAN_PRESCALER
(
PRESCALER
Ë(((PRESCALERË>1Ë&& ((PRESCALERË<1024))

	)

323 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<27)

	)

331 
	#CAN_FûãrMode_IdMask
 ((
uöt8_t
)0x00Ë

	)

332 
	#CAN_FûãrMode_IdLi°
 ((
uöt8_t
)0x01Ë

	)

334 
	#IS_CAN_FILTER_MODE
(
MODE
Ë(((MODEË=
CAN_FûãrMode_IdMask
Ë|| \

	)

335 ((
MODE
Ë=
CAN_FûãrMode_IdLi°
))

343 
	#CAN_FûãrSˇÀ_16bô
 ((
uöt8_t
)0x00Ë

	)

344 
	#CAN_FûãrSˇÀ_32bô
 ((
uöt8_t
)0x01Ë

	)

346 
	#IS_CAN_FILTER_SCALE
(
SCALE
Ë(((SCALEË=
CAN_FûãrSˇÀ_16bô
Ë|| \

	)

347 ((
SCALE
Ë=
CAN_FûãrSˇÀ_32bô
))

355 
	#CAN_Fûãr_FIFO0
 ((
uöt8_t
)0x00Ë

	)

356 
	#CAN_Fûãr_FIFO1
 ((
uöt8_t
)0x01Ë

	)

357 
	#IS_CAN_FILTER_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FûãrFIFO0
Ë|| \

	)

358 ((
FIFO
Ë=
CAN_FûãrFIFO1
))

361 
	#CAN_FûãrFIFO0
 
CAN_Fûãr_FIFO0


	)

362 
	#CAN_FûãrFIFO1
 
CAN_Fûãr_FIFO1


	)

370 
	#IS_CAN_BANKNUMBER
(
BANKNUMBER
Ë(((BANKNUMBERË>1Ë&& ((BANKNUMBERË<27))

	)

378 
	#IS_CAN_TRANSMITMAILBOX
(
TRANSMITMAILBOX
Ë((TRANSMITMAILBOXË<((
uöt8_t
)0x02))

	)

379 
	#IS_CAN_STDID
(
STDID
Ë((STDIDË<((
uöt32_t
)0x7FF))

	)

380 
	#IS_CAN_EXTID
(
EXTID
Ë((EXTIDË<((
uöt32_t
)0x1FFFFFFF))

	)

381 
	#IS_CAN_DLC
(
DLC
Ë((DLCË<((
uöt8_t
)0x08))

	)

389 
	#CAN_Id_Sènd¨d
 ((
uöt32_t
)0x00000000Ë

	)

390 
	#CAN_Id_Exãnded
 ((
uöt32_t
)0x00000004Ë

	)

391 
	#IS_CAN_IDTYPE
(
IDTYPE
Ë(((IDTYPEË=
CAN_Id_Sènd¨d
Ë|| \

	)

392 ((
IDTYPE
Ë=
CAN_Id_Exãnded
))

395 
	#CAN_ID_STD
 
CAN_Id_Sènd¨d


	)

396 
	#CAN_ID_EXT
 
CAN_Id_Exãnded


	)

404 
	#CAN_RTR_D©a
 ((
uöt32_t
)0x00000000Ë

	)

405 
	#CAN_RTR_RemŸe
 ((
uöt32_t
)0x00000002Ë

	)

406 
	#IS_CAN_RTR
(
RTR
Ë(((RTRË=
CAN_RTR_D©a
Ë|| ((RTRË=
CAN_RTR_RemŸe
))

	)

409 
	#CAN_RTR_DATA
 
CAN_RTR_D©a


	)

410 
	#CAN_RTR_REMOTE
 
CAN_RTR_RemŸe


	)

418 
	#CAN_TxSètus_Faûed
 ((
uöt8_t
)0x00)

	)

419 
	#CAN_TxSètus_Ok
 ((
uöt8_t
)0x01Ë

	)

420 
	#CAN_TxSètus_Pídög
 ((
uöt8_t
)0x02Ë

	)

421 
	#CAN_TxSètus_NoMaûBox
 ((
uöt8_t
)0x04Ë

	)

424 
	#CANTXFAILED
 
CAN_TxSètus_Faûed


	)

425 
	#CANTXOK
 
CAN_TxSètus_Ok


	)

426 
	#CANTXPENDING
 
CAN_TxSètus_Pídög


	)

427 
	#CAN_NO_MB
 
CAN_TxSètus_NoMaûBox


	)

435 
	#CAN_FIFO0
 ((
uöt8_t
)0x00Ë

	)

436 
	#CAN_FIFO1
 ((
uöt8_t
)0x01Ë

	)

438 
	#IS_CAN_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FIFO0
Ë|| ((FIFOË=
CAN_FIFO1
))

	)

446 
	#CAN_SÀï_Faûed
 ((
uöt8_t
)0x00Ë

	)

447 
	#CAN_SÀï_Ok
 ((
uöt8_t
)0x01Ë

	)

450 
	#CANSLEEPFAILED
 
CAN_SÀï_Faûed


	)

451 
	#CANSLEEPOK
 
CAN_SÀï_Ok


	)

459 
	#CAN_WakeUp_Faûed
 ((
uöt8_t
)0x00Ë

	)

460 
	#CAN_WakeUp_Ok
 ((
uöt8_t
)0x01Ë

	)

463 
	#CANWAKEUPFAILED
 
CAN_WakeUp_Faûed


	)

464 
	#CANWAKEUPOK
 
CAN_WakeUp_Ok


	)

473 
	#CAN_Eº‹Code_NoEº
 ((
uöt8_t
)0x00Ë

	)

474 
	#CAN_Eº‹Code_StuffEº
 ((
uöt8_t
)0x10Ë

	)

475 
	#CAN_Eº‹Code_F‹mEº
 ((
uöt8_t
)0x20Ë

	)

476 
	#CAN_Eº‹Code_ACKEº
 ((
uöt8_t
)0x30Ë

	)

477 
	#CAN_Eº‹Code_BôRe˚ssiveEº
 ((
uöt8_t
)0x40Ë

	)

478 
	#CAN_Eº‹Code_BôDomö™tEº
 ((
uöt8_t
)0x50Ë

	)

479 
	#CAN_Eº‹Code_CRCEº
 ((
uöt8_t
)0x60Ë

	)

480 
	#CAN_Eº‹Code_So·w¨eSëEº
 ((
uöt8_t
)0x70Ë

	)

494 
	#CAN_FLAG_RQCP0
 ((
uöt32_t
)0x38000001Ë

	)

495 
	#CAN_FLAG_RQCP1
 ((
uöt32_t
)0x38000100Ë

	)

496 
	#CAN_FLAG_RQCP2
 ((
uöt32_t
)0x38010000Ë

	)

499 
	#CAN_FLAG_FMP0
 ((
uöt32_t
)0x12000003Ë

	)

500 
	#CAN_FLAG_FF0
 ((
uöt32_t
)0x32000008Ë

	)

501 
	#CAN_FLAG_FOV0
 ((
uöt32_t
)0x32000010Ë

	)

502 
	#CAN_FLAG_FMP1
 ((
uöt32_t
)0x14000003Ë

	)

503 
	#CAN_FLAG_FF1
 ((
uöt32_t
)0x34000008Ë

	)

504 
	#CAN_FLAG_FOV1
 ((
uöt32_t
)0x34000010Ë

	)

507 
	#CAN_FLAG_WKU
 ((
uöt32_t
)0x31000008Ë

	)

508 
	#CAN_FLAG_SLAK
 ((
uöt32_t
)0x31000012Ë

	)

513 
	#CAN_FLAG_EWG
 ((
uöt32_t
)0x10F00001Ë

	)

514 
	#CAN_FLAG_EPV
 ((
uöt32_t
)0x10F00002Ë

	)

515 
	#CAN_FLAG_BOF
 ((
uöt32_t
)0x10F00004Ë

	)

516 
	#CAN_FLAG_LEC
 ((
uöt32_t
)0x30F00070Ë

	)

518 
	#IS_CAN_GET_FLAG
(
FLAG
Ë(((FLAGË=
CAN_FLAG_LEC
Ë|| ((FLAGË=
CAN_FLAG_BOF
Ë|| \

	)

519 ((
FLAG
Ë=
CAN_FLAG_EPV
Ë|| ((FLAGË=
CAN_FLAG_EWG
) || \

520 ((
FLAG
Ë=
CAN_FLAG_WKU
Ë|| ((FLAGË=
CAN_FLAG_FOV0
) || \

521 ((
FLAG
Ë=
CAN_FLAG_FF0
Ë|| ((FLAGË=
CAN_FLAG_FMP0
) || \

522 ((
FLAG
Ë=
CAN_FLAG_FOV1
Ë|| ((FLAGË=
CAN_FLAG_FF1
) || \

523 ((
FLAG
Ë=
CAN_FLAG_FMP1
Ë|| ((FLAGË=
CAN_FLAG_RQCP2
) || \

524 ((
FLAG
Ë=
CAN_FLAG_RQCP1
)|| ((FLAGË=
CAN_FLAG_RQCP0
) || \

525 ((
FLAG
Ë=
CAN_FLAG_SLAK
 ))

527 
	#IS_CAN_CLEAR_FLAG
(
FLAG
)(((FLAGË=
CAN_FLAG_LEC
Ë|| ((FLAGË=
CAN_FLAG_RQCP2
Ë|| \

	)

528 ((
FLAG
Ë=
CAN_FLAG_RQCP1
Ë|| ((FLAGË=
CAN_FLAG_RQCP0
) || \

529 ((
FLAG
Ë=
CAN_FLAG_FF0
Ë|| ((FLAGË=
CAN_FLAG_FOV0
) ||\

530 ((
FLAG
Ë=
CAN_FLAG_FF1
Ë|| ((FLAGË=
CAN_FLAG_FOV1
) || \

531 ((
FLAG
Ë=
CAN_FLAG_WKU
Ë|| ((FLAGË=
CAN_FLAG_SLAK
))

540 
	#CAN_IT_TME
 ((
uöt32_t
)0x00000001Ë

	)

543 
	#CAN_IT_FMP0
 ((
uöt32_t
)0x00000002Ë

	)

544 
	#CAN_IT_FF0
 ((
uöt32_t
)0x00000004Ë

	)

545 
	#CAN_IT_FOV0
 ((
uöt32_t
)0x00000008Ë

	)

546 
	#CAN_IT_FMP1
 ((
uöt32_t
)0x00000010Ë

	)

547 
	#CAN_IT_FF1
 ((
uöt32_t
)0x00000020Ë

	)

548 
	#CAN_IT_FOV1
 ((
uöt32_t
)0x00000040Ë

	)

551 
	#CAN_IT_WKU
 ((
uöt32_t
)0x00010000Ë

	)

552 
	#CAN_IT_SLK
 ((
uöt32_t
)0x00020000Ë

	)

555 
	#CAN_IT_EWG
 ((
uöt32_t
)0x00000100Ë

	)

556 
	#CAN_IT_EPV
 ((
uöt32_t
)0x00000200Ë

	)

557 
	#CAN_IT_BOF
 ((
uöt32_t
)0x00000400Ë

	)

558 
	#CAN_IT_LEC
 ((
uöt32_t
)0x00000800Ë

	)

559 
	#CAN_IT_ERR
 ((
uöt32_t
)0x00008000Ë

	)

562 
	#CAN_IT_RQCP0
 
CAN_IT_TME


	)

563 
	#CAN_IT_RQCP1
 
CAN_IT_TME


	)

564 
	#CAN_IT_RQCP2
 
CAN_IT_TME


	)

567 
	#IS_CAN_IT
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FMP0
Ë||\

	)

568 ((
IT
Ë=
CAN_IT_FF0
Ë|| ((ITË=
CAN_IT_FOV0
) ||\

569 ((
IT
Ë=
CAN_IT_FMP1
Ë|| ((ITË=
CAN_IT_FF1
) ||\

570 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

571 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

572 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

573 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

575 
	#IS_CAN_CLEAR_IT
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FF0
Ë||\

	)

576 ((
IT
Ë=
CAN_IT_FOV0
)|| ((ITË=
CAN_IT_FF1
) ||\

577 ((
IT
Ë=
CAN_IT_FOV1
)|| ((ITË=
CAN_IT_EWG
) ||\

578 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

579 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

580 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

593 
CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
);

596 
uöt8_t
 
CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

597 
CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
);

598 
CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

599 
CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
);

600 
CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

601 
CAN_TTComModeCmd
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

604 
uöt8_t
 
CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
);

605 
uöt8_t
 
CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
TønsmôMaûbox
);

606 
CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
);

609 
CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
);

610 
CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
);

611 
uöt8_t
 
CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
FIFONumbî
);

614 
uöt8_t
 
CAN_O≥øtögModeReque°
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
CAN_O≥øtögMode
);

615 
uöt8_t
 
CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
);

616 
uöt8_t
 
CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
);

619 
uöt8_t
 
CAN_GëLa°Eº‹Code
(
CAN_Ty≥Def
* 
CANx
);

620 
uöt8_t
 
CAN_GëRe˚iveEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
);

621 
uöt8_t
 
CAN_GëLSBTønsmôEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
);

624 
CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

625 
FœgSètus
 
CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

626 
CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

627 
ITSètus
 
CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

628 
CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

630 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_cec.h

30 #i‚de‡
__STM32F4XX_CEC_H


31 
	#__STM32F4XX_CEC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

54 
uöt32_t
 
CEC_Sig«lFªeTime
;

56 
uöt32_t
 
CEC_RxTﬁî™˚
;

58 
uöt32_t
 
CEC_St›Re˚±i⁄
;

60 
uöt32_t
 
CEC_BôRisögEº‹
;

62 
uöt32_t
 
CEC_L⁄gBôPîiodEº‹
;

64 
uöt32_t
 
CEC_BRDNoGí
;

66 
uöt32_t
 
CEC_SFTO±i⁄
;

69 }
	tCEC_InôTy≥Def
;

80 
	#CEC_Sig«lFªeTime_Sènd¨d
 ((
uöt32_t
)0x00000000Ë

	)

81 
	#CEC_Sig«lFªeTime_1T
 ((
uöt32_t
)0x00000001Ë

	)

82 
	#CEC_Sig«lFªeTime_2T
 ((
uöt32_t
)0x00000002Ë

	)

83 
	#CEC_Sig«lFªeTime_3T
 ((
uöt32_t
)0x00000003Ë

	)

84 
	#CEC_Sig«lFªeTime_4T
 ((
uöt32_t
)0x00000004Ë

	)

85 
	#CEC_Sig«lFªeTime_5T
 ((
uöt32_t
)0x00000005Ë

	)

86 
	#CEC_Sig«lFªeTime_6T
 ((
uöt32_t
)0x00000006Ë

	)

87 
	#CEC_Sig«lFªeTime_7T
 ((
uöt32_t
)0x00000007Ë

	)

89 
	#IS_CEC_SIGNAL_FREE_TIME
(
TIME
Ë(((TIMEË=
CEC_Sig«lFªeTime_Sènd¨d
Ë|| \

	)

90 ((
TIME
Ë=
CEC_Sig«lFªeTime_1T
)|| \

91 ((
TIME
Ë=
CEC_Sig«lFªeTime_2T
)|| \

92 ((
TIME
Ë=
CEC_Sig«lFªeTime_3T
)|| \

93 ((
TIME
Ë=
CEC_Sig«lFªeTime_4T
)|| \

94 ((
TIME
Ë=
CEC_Sig«lFªeTime_5T
)|| \

95 ((
TIME
Ë=
CEC_Sig«lFªeTime_6T
)|| \

96 ((
TIME
Ë=
CEC_Sig«lFªeTime_7T
))

104 
	#CEC_RxTﬁî™˚_Sènd¨d
 ((
uöt32_t
)0x00000000Ë

	)

105 
	#CEC_RxTﬁî™˚_Exãnded
 
CEC_CFGR_RXTOL


	)

107 
	#IS_CEC_RX_TOLERANCE
(
TOLERANCE
Ë(((TOLERANCEË=
CEC_RxTﬁî™˚_Sènd¨d
Ë|| \

	)

108 ((
TOLERANCE
Ë=
CEC_RxTﬁî™˚_Exãnded
))

116 
	#CEC_St›Re˚±i⁄_Off
 ((
uöt32_t
)0x00000000Ë

	)

117 
	#CEC_St›Re˚±i⁄_On
 
CEC_CFGR_BRESTP


	)

119 
	#IS_CEC_STOP_RECEPTION
(
RECEPTION
Ë(((RECEPTIONË=
CEC_St›Re˚±i⁄_On
Ë|| \

	)

120 ((
RECEPTION
Ë=
CEC_St›Re˚±i⁄_Off
))

128 
	#CEC_BôRisögEº‹_Off
 ((
uöt32_t
)0x00000000Ë

	)

129 
	#CEC_BôRisögEº‹_On
 
CEC_CFGR_BREGEN


	)

131 
	#IS_CEC_BIT_RISING_ERROR
(
ERROR
Ë(((ERRORË=
CEC_BôRisögEº‹_Off
Ë|| \

	)

132 ((
ERROR
Ë=
CEC_BôRisögEº‹_On
))

140 
	#CEC_L⁄gBôPîiodEº‹_Off
 ((
uöt32_t
)0x00000000Ë

	)

141 
	#CEC_L⁄gBôPîiodEº‹_On
 
CEC_CFGR_LREGEN


	)

143 
	#IS_CEC_LONG_BIT_PERIOD_ERROR
(
ERROR
Ë(((ERRORË=
CEC_L⁄gBôPîiodEº‹_Off
Ë|| \

	)

144 ((
ERROR
Ë=
CEC_L⁄gBôPîiodEº‹_On
))

153 
	#CEC_BRDNoGí_Off
 ((
uöt32_t
)0x00000000Ë

	)

154 
	#CEC_BRDNoGí_On
 
CEC_CFGR_BRDNOGEN


	)

156 
	#IS_CEC_BDR_NO_GEN_ERROR
(
ERROR
Ë(((ERRORË=
CEC_BRDNoGí_Off
Ë|| \

	)

157 ((
ERROR
Ë=
CEC_BRDNoGí_On
))

165 
	#CEC_SFTO±i⁄_Off
 ((
uöt32_t
)0x00000000Ë

	)

166 
	#CEC_SFTO±i⁄_On
 
CEC_CFGR_SFTOPT


	)

168 
	#IS_CEC_SFT_OPTION
(
OPTION
Ë(((OPTIONË=
CEC_SFTO±i⁄_Off
Ë|| \

	)

169 ((
OPTION
Ë=
CEC_SFTO±i⁄_On
))

177 
	#IS_CEC_ADDRESS
(
ADDRESS
Ë((ADDRESSË< 0x10)

	)

186 
	#CEC_IT_TXACKE
 
CEC_IER_TXACKEIE


	)

187 
	#CEC_IT_TXERR
 
CEC_IER_TXERRIE


	)

188 
	#CEC_IT_TXUDR
 
CEC_IER_TXUDRIE


	)

189 
	#CEC_IT_TXEND
 
CEC_IER_TXENDIE


	)

190 
	#CEC_IT_TXBR
 
CEC_IER_TXBRIE


	)

191 
	#CEC_IT_ARBLST
 
CEC_IER_ARBLSTIE


	)

192 
	#CEC_IT_RXACKE
 
CEC_IER_RXACKEIE


	)

193 
	#CEC_IT_LBPE
 
CEC_IER_LBPEIE


	)

194 
	#CEC_IT_SBPE
 
CEC_IER_SBPEIE


	)

195 
	#CEC_IT_BRE
 
CEC_IER_BREIEIE


	)

196 
	#CEC_IT_RXOVR
 
CEC_IER_RXOVRIE


	)

197 
	#CEC_IT_RXEND
 
CEC_IER_RXENDIE


	)

198 
	#CEC_IT_RXBR
 
CEC_IER_RXBRIE


	)

200 
	#IS_CEC_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFE000Ë=0x00Ë&& ((ITË!0x00))

	)

202 
	#IS_CEC_GET_IT
(
IT
Ë(((ITË=
CEC_IT_TXACKE
Ë|| \

	)

203 ((
IT
Ë=
CEC_IT_TXERR
)|| \

204 ((
IT
Ë=
CEC_IT_TXUDR
)|| \

205 ((
IT
Ë=
CEC_IT_TXEND
)|| \

206 ((
IT
Ë=
CEC_IT_TXBR
)|| \

207 ((
IT
Ë=
CEC_IT_ARBLST
)|| \

208 ((
IT
Ë=
CEC_IT_RXACKE
)|| \

209 ((
IT
Ë=
CEC_IT_LBPE
)|| \

210 ((
IT
Ë=
CEC_IT_SBPE
)|| \

211 ((
IT
Ë=
CEC_IT_BRE
)|| \

212 ((
IT
Ë=
CEC_IT_RXOVR
)|| \

213 ((
IT
Ë=
CEC_IT_RXEND
)|| \

214 ((
IT
Ë=
CEC_IT_RXBR
))

222 
	#CEC_FLAG_TXACKE
 
CEC_ISR_TXACKE


	)

223 
	#CEC_FLAG_TXERR
 
CEC_ISR_TXERR


	)

224 
	#CEC_FLAG_TXUDR
 
CEC_ISR_TXUDR


	)

225 
	#CEC_FLAG_TXEND
 
CEC_ISR_TXEND


	)

226 
	#CEC_FLAG_TXBR
 
CEC_ISR_TXBR


	)

227 
	#CEC_FLAG_ARBLST
 
CEC_ISR_ARBLST


	)

228 
	#CEC_FLAG_RXACKE
 
CEC_ISR_RXACKE


	)

229 
	#CEC_FLAG_LBPE
 
CEC_ISR_LBPE


	)

230 
	#CEC_FLAG_SBPE
 
CEC_ISR_SBPE


	)

231 
	#CEC_FLAG_BRE
 
CEC_ISR_BRE


	)

232 
	#CEC_FLAG_RXOVR
 
CEC_ISR_RXOVR


	)

233 
	#CEC_FLAG_RXEND
 
CEC_ISR_RXEND


	)

234 
	#CEC_FLAG_RXBR
 
CEC_ISR_RXBR


	)

236 
	#IS_CEC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFE000Ë=0x00Ë&& ((FLAGË!0x00))

	)

238 
	#IS_CEC_GET_FLAG
(
FLAG
Ë(((FLAGË=
CEC_FLAG_TXACKE
Ë|| \

	)

239 ((
FLAG
Ë=
CEC_FLAG_TXERR
)|| \

240 ((
FLAG
Ë=
CEC_FLAG_TXUDR
)|| \

241 ((
FLAG
Ë=
CEC_FLAG_TXEND
)|| \

242 ((
FLAG
Ë=
CEC_FLAG_TXBR
)|| \

243 ((
FLAG
Ë=
CEC_FLAG_ARBLST
)|| \

244 ((
FLAG
Ë=
CEC_FLAG_RXACKE
)|| \

245 ((
FLAG
Ë=
CEC_FLAG_LBPE
)|| \

246 ((
FLAG
Ë=
CEC_FLAG_SBPE
)|| \

247 ((
FLAG
Ë=
CEC_FLAG_BRE
)|| \

248 ((
FLAG
Ë=
CEC_FLAG_RXOVR
)|| \

249 ((
FLAG
Ë=
CEC_FLAG_RXEND
)|| \

250 ((
FLAG
Ë=
CEC_FLAG_RXBR
))

263 
CEC_DeInô
();

266 
CEC_Inô
(
CEC_InôTy≥Def
* 
CEC_InôSåu˘
);

267 
CEC_Såu˘Inô
(
CEC_InôTy≥Def
* 
CEC_InôSåu˘
);

268 
CEC_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

269 
CEC_Li°íModeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

270 
CEC_OwnAddªssC⁄fig
(
uöt8_t
 
CEC_OwnAddªss
);

271 
CEC_OwnAddªssCÀ¨
();

274 
CEC_SídD©a
(
uöt8_t
 
D©a
);

275 
uöt8_t
 
CEC_Re˚iveD©a
();

276 
CEC_SèπOfMesßge
();

277 
CEC_EndOfMesßge
();

280 
CEC_ITC⁄fig
(
uöt16_t
 
CEC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

281 
FœgSètus
 
CEC_GëFœgSètus
(
uöt16_t
 
CEC_FLAG
);

282 
CEC_CÀ¨Fœg
(
uöt32_t
 
CEC_FLAG
);

283 
ITSètus
 
CEC_GëITSètus
(
uöt16_t
 
CEC_IT
);

284 
CEC_CÀ¨ITPídögBô
(
uöt16_t
 
CEC_IT
);

286 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_crc.h

30 #i‚de‡
__STM32F4xx_CRC_H


31 
	#__STM32F4xx_CRC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

62 
CRC_Re£tDR
();

63 
uöt32_t
 
CRC_CÆcCRC
(uöt32_à
D©a
);

64 
uöt32_t
 
CRC_CÆcBlockCRC
(uöt32_à
pBuf„r
[], uöt32_à
Buf„rLígth
);

65 
uöt32_t
 
CRC_GëCRC
();

66 
CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
);

67 
uöt8_t
 
CRC_GëIDRegi°î
();

69 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_cryp.h

30 #i‚de‡
__STM32F4xx_CRYP_H


31 
	#__STM32F4xx_CRYP_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

55 
uöt32_t
 
CRYP_AlgoDú
;

57 
uöt32_t
 
CRYP_AlgoMode
;

60 
uöt32_t
 
CRYP_D©aTy≥
;

62 
uöt32_t
 
CRYP_KeySize
;

65 }
	tCRYP_InôTy≥Def
;

72 
uöt32_t
 
CRYP_Key0Le·
;

73 
uöt32_t
 
CRYP_Key0Right
;

74 
uöt32_t
 
CRYP_Key1Le·
;

75 
uöt32_t
 
CRYP_Key1Right
;

76 
uöt32_t
 
CRYP_Key2Le·
;

77 
uöt32_t
 
CRYP_Key2Right
;

78 
uöt32_t
 
CRYP_Key3Le·
;

79 
uöt32_t
 
CRYP_Key3Right
;

80 }
	tCRYP_KeyInôTy≥Def
;

86 
uöt32_t
 
CRYP_IV0Le·
;

87 
uöt32_t
 
CRYP_IV0Right
;

88 
uöt32_t
 
CRYP_IV1Le·
;

89 
uöt32_t
 
CRYP_IV1Right
;

90 }
	tCRYP_IVInôTy≥Def
;

98 
uöt32_t
 
CR_CuºítC⁄fig
;

100 
uöt32_t
 
CRYP_IV0LR
;

101 
uöt32_t
 
CRYP_IV0RR
;

102 
uöt32_t
 
CRYP_IV1LR
;

103 
uöt32_t
 
CRYP_IV1RR
;

105 
uöt32_t
 
CRYP_K0LR
;

106 
uöt32_t
 
CRYP_K0RR
;

107 
uöt32_t
 
CRYP_K1LR
;

108 
uöt32_t
 
CRYP_K1RR
;

109 
uöt32_t
 
CRYP_K2LR
;

110 
uöt32_t
 
CRYP_K2RR
;

111 
uöt32_t
 
CRYP_K3LR
;

112 
uöt32_t
 
CRYP_K3RR
;

113 
uöt32_t
 
CRYP_CSGCMCCMR
[8];

114 
uöt32_t
 
CRYP_CSGCMR
[8];

115 }
	tCRYP_C⁄ãxt
;

127 
	#CRYP_AlgoDú_En¸y±
 ((
uöt16_t
)0x0000)

	)

128 
	#CRYP_AlgoDú_De¸y±
 ((
uöt16_t
)0x0004)

	)

129 
	#IS_CRYP_ALGODIR
(
ALGODIR
Ë(((ALGODIRË=
CRYP_AlgoDú_En¸y±
Ë|| \

	)

130 ((
ALGODIR
Ë=
CRYP_AlgoDú_De¸y±
))

141 
	#CRYP_AlgoMode_TDES_ECB
 ((
uöt32_t
)0x00000000)

	)

142 
	#CRYP_AlgoMode_TDES_CBC
 ((
uöt32_t
)0x00000008)

	)

145 
	#CRYP_AlgoMode_DES_ECB
 ((
uöt32_t
)0x00000010)

	)

146 
	#CRYP_AlgoMode_DES_CBC
 ((
uöt32_t
)0x00000018)

	)

149 
	#CRYP_AlgoMode_AES_ECB
 ((
uöt32_t
)0x00000020)

	)

150 
	#CRYP_AlgoMode_AES_CBC
 ((
uöt32_t
)0x00000028)

	)

151 
	#CRYP_AlgoMode_AES_CTR
 ((
uöt32_t
)0x00000030)

	)

152 
	#CRYP_AlgoMode_AES_Key
 ((
uöt32_t
)0x00000038)

	)

153 
	#CRYP_AlgoMode_AES_GCM
 ((
uöt32_t
)0x00080000)

	)

154 
	#CRYP_AlgoMode_AES_CCM
 ((
uöt32_t
)0x00080008)

	)

156 
	#IS_CRYP_ALGOMODE
(
ALGOMODE
Ë(((ALGOMODEË=
CRYP_AlgoMode_TDES_ECB
Ë|| \

	)

157 ((
ALGOMODE
Ë=
CRYP_AlgoMode_TDES_CBC
)|| \

158 ((
ALGOMODE
Ë=
CRYP_AlgoMode_DES_ECB
) || \

159 ((
ALGOMODE
Ë=
CRYP_AlgoMode_DES_CBC
) || \

160 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_ECB
) || \

161 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_CBC
) || \

162 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_CTR
) || \

163 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_Key
) || \

164 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_GCM
) || \

165 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_CCM
))

175 
	#CRYP_Pha£_Inô
 ((
uöt32_t
)0x00000000)

	)

176 
	#CRYP_Pha£_Hódî
 
CRYP_CR_GCM_CCMPH_0


	)

177 
	#CRYP_Pha£_Paylﬂd
 
CRYP_CR_GCM_CCMPH_1


	)

178 
	#CRYP_Pha£_FöÆ
 
CRYP_CR_GCM_CCMPH


	)

180 
	#IS_CRYP_PHASE
(
PHASE
Ë(((PHASEË=
CRYP_Pha£_Inô
Ë|| \

	)

181 ((
PHASE
Ë=
CRYP_Pha£_Hódî
) || \

182 ((
PHASE
Ë=
CRYP_Pha£_Paylﬂd
) || \

183 ((
PHASE
Ë=
CRYP_Pha£_FöÆ
))

192 
	#CRYP_D©aTy≥_32b
 ((
uöt16_t
)0x0000)

	)

193 
	#CRYP_D©aTy≥_16b
 ((
uöt16_t
)0x0040)

	)

194 
	#CRYP_D©aTy≥_8b
 ((
uöt16_t
)0x0080)

	)

195 
	#CRYP_D©aTy≥_1b
 ((
uöt16_t
)0x00C0)

	)

196 
	#IS_CRYP_DATATYPE
(
DATATYPE
Ë(((DATATYPEË=
CRYP_D©aTy≥_32b
Ë|| \

	)

197 ((
DATATYPE
Ë=
CRYP_D©aTy≥_16b
)|| \

198 ((
DATATYPE
Ë=
CRYP_D©aTy≥_8b
)|| \

199 ((
DATATYPE
Ë=
CRYP_D©aTy≥_1b
))

207 
	#CRYP_KeySize_128b
 ((
uöt16_t
)0x0000)

	)

208 
	#CRYP_KeySize_192b
 ((
uöt16_t
)0x0100)

	)

209 
	#CRYP_KeySize_256b
 ((
uöt16_t
)0x0200)

	)

210 
	#IS_CRYP_KEYSIZE
(
KEYSIZE
Ë(((KEYSIZEË=
CRYP_KeySize_128b
)|| \

	)

211 ((
KEYSIZE
Ë=
CRYP_KeySize_192b
)|| \

212 ((
KEYSIZE
Ë=
CRYP_KeySize_256b
))

220 
	#CRYP_FLAG_BUSY
 ((
uöt8_t
)0x10Ë

	)

224 
	#CRYP_FLAG_IFEM
 ((
uöt8_t
)0x01Ë

	)

225 
	#CRYP_FLAG_IFNF
 ((
uöt8_t
)0x02Ë

	)

226 
	#CRYP_FLAG_INRIS
 ((
uöt8_t
)0x22Ë

	)

227 
	#CRYP_FLAG_OFNE
 ((
uöt8_t
)0x04Ë

	)

229 
	#CRYP_FLAG_OFFU
 ((
uöt8_t
)0x08Ë

	)

230 
	#CRYP_FLAG_OUTRIS
 ((
uöt8_t
)0x21Ë

	)

233 
	#IS_CRYP_GET_FLAG
(
FLAG
Ë(((FLAGË=
CRYP_FLAG_IFEM
Ë|| \

	)

234 ((
FLAG
Ë=
CRYP_FLAG_IFNF
) || \

235 ((
FLAG
Ë=
CRYP_FLAG_OFNE
) || \

236 ((
FLAG
Ë=
CRYP_FLAG_OFFU
) || \

237 ((
FLAG
Ë=
CRYP_FLAG_BUSY
) || \

238 ((
FLAG
Ë=
CRYP_FLAG_OUTRIS
)|| \

239 ((
FLAG
Ë=
CRYP_FLAG_INRIS
))

247 
	#CRYP_IT_INI
 ((
uöt8_t
)0x01Ë

	)

248 
	#CRYP_IT_OUTI
 ((
uöt8_t
)0x02Ë

	)

249 
	#IS_CRYP_CONFIG_IT
(
IT
Ë((((ITË& (
uöt8_t
)0xFCË=0x00Ë&& ((ITË!0x00))

	)

250 
	#IS_CRYP_GET_IT
(
IT
Ë(((ITË=
CRYP_IT_INI
Ë|| ((ITË=
CRYP_IT_OUTI
))

	)

259 
	#MODE_ENCRYPT
 ((
uöt8_t
)0x01)

	)

260 
	#MODE_DECRYPT
 ((
uöt8_t
)0x00)

	)

269 
	#CRYP_DMAReq_D©aIN
 ((
uöt8_t
)0x01)

	)

270 
	#CRYP_DMAReq_D©aOUT
 ((
uöt8_t
)0x02)

	)

271 
	#IS_CRYP_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt8_t
)0xFCË=0x00Ë&& ((DMAREQË!0x00))

	)

284 
CRYP_DeInô
();

287 
CRYP_Inô
(
CRYP_InôTy≥Def
* 
CRYP_InôSåu˘
);

288 
CRYP_Såu˘Inô
(
CRYP_InôTy≥Def
* 
CRYP_InôSåu˘
);

289 
CRYP_KeyInô
(
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
);

290 
CRYP_KeySåu˘Inô
(
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
);

291 
CRYP_IVInô
(
CRYP_IVInôTy≥Def
* 
CRYP_IVInôSåu˘
);

292 
CRYP_IVSåu˘Inô
(
CRYP_IVInôTy≥Def
* 
CRYP_IVInôSåu˘
);

293 
CRYP_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

294 
CRYP_Pha£C⁄fig
(
uöt32_t
 
CRYP_Pha£
);

295 
CRYP_FIFOFlush
();

297 
CRYP_D©aIn
(
uöt32_t
 
D©a
);

298 
uöt32_t
 
CRYP_D©aOut
();

301 
Eº‹Sètus
 
CRYP_SaveC⁄ãxt
(
CRYP_C⁄ãxt
* 
CRYP_C⁄ãxtSave
,

302 
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
);

303 
CRYP_Re°‹eC⁄ãxt
(
CRYP_C⁄ãxt
* 
CRYP_C⁄ãxtRe°‹e
);

306 
CRYP_DMACmd
(
uöt8_t
 
CRYP_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

309 
CRYP_ITC⁄fig
(
uöt8_t
 
CRYP_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

310 
ITSètus
 
CRYP_GëITSètus
(
uöt8_t
 
CRYP_IT
);

311 
Fun˘i⁄ÆSèã
 
CRYP_GëCmdSètus
();

312 
FœgSètus
 
CRYP_GëFœgSètus
(
uöt8_t
 
CRYP_FLAG
);

315 
Eº‹Sètus
 
CRYP_AES_ECB
(
uöt8_t
 
Mode
,

316 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

317 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

318 
uöt8_t
 *
Ouçut
);

320 
Eº‹Sètus
 
CRYP_AES_CBC
(
uöt8_t
 
Mode
,

321 
uöt8_t
 
InôVe˘‹s
[16],

322 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

323 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

324 
uöt8_t
 *
Ouçut
);

326 
Eº‹Sètus
 
CRYP_AES_CTR
(
uöt8_t
 
Mode
,

327 
uöt8_t
 
InôVe˘‹s
[16],

328 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

329 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

330 
uöt8_t
 *
Ouçut
);

332 
Eº‹Sètus
 
CRYP_AES_GCM
(
uöt8_t
 
Mode
, uöt8_à
InôVe˘‹s
[16],

333 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

334 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
ILígth
,

335 
uöt8_t
 *
Hódî
, 
uöt32_t
 
HLígth
,

336 
uöt8_t
 *
Ouçut
, uöt8_à*
AuthTAG
);

338 
Eº‹Sètus
 
CRYP_AES_CCM
(
uöt8_t
 
Mode
,

339 
uöt8_t
* 
N⁄˚
, 
uöt32_t
 
N⁄˚Size
,

340 
uöt8_t
* 
Key
, 
uöt16_t
 
Keysize
,

341 
uöt8_t
* 
I≈ut
, 
uöt32_t
 
ILígth
,

342 
uöt8_t
* 
Hódî
, 
uöt32_t
 
HLígth
, uöt8_à*
HBuf„r
,

343 
uöt8_t
* 
Ouçut
,

344 
uöt8_t
* 
AuthTAG
, 
uöt32_t
 
TAGSize
);

347 
Eº‹Sètus
 
CRYP_TDES_ECB
(
uöt8_t
 
Mode
,

348 
uöt8_t
 
Key
[24],

349 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

350 
uöt8_t
 *
Ouçut
);

352 
Eº‹Sètus
 
CRYP_TDES_CBC
(
uöt8_t
 
Mode
,

353 
uöt8_t
 
Key
[24],

354 
uöt8_t
 
InôVe˘‹s
[8],

355 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

356 
uöt8_t
 *
Ouçut
);

359 
Eº‹Sètus
 
CRYP_DES_ECB
(
uöt8_t
 
Mode
,

360 
uöt8_t
 
Key
[8],

361 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

362 
uöt8_t
 *
Ouçut
);

364 
Eº‹Sètus
 
CRYP_DES_CBC
(
uöt8_t
 
Mode
,

365 
uöt8_t
 
Key
[8],

366 
uöt8_t
 
InôVe˘‹s
[8],

367 
uöt8_t
 *
I≈ut
,
uöt32_t
 
IÀngth
,

368 
uöt8_t
 *
Ouçut
);

370 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dac.h

30 #i‚de‡
__STM32F4xx_DAC_H


31 
	#__STM32F4xx_DAC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
DAC_Triggî
;

59 
uöt32_t
 
DAC_WaveGíî©i⁄
;

63 
uöt32_t
 
DAC_LFSRUnmask_TrüngÀAm∂ôude
;

67 
uöt32_t
 
DAC_OuçutBuf„r
;

69 }
	tDAC_InôTy≥Def
;

81 
	#DAC_Triggî_N⁄e
 ((
uöt32_t
)0x00000000Ë

	)

83 
	#DAC_Triggî_T2_TRGO
 ((
uöt32_t
)0x00000024Ë

	)

84 
	#DAC_Triggî_T4_TRGO
 ((
uöt32_t
)0x0000002CË

	)

85 
	#DAC_Triggî_T5_TRGO
 ((
uöt32_t
)0x0000001CË

	)

86 
	#DAC_Triggî_T6_TRGO
 ((
uöt32_t
)0x00000004Ë

	)

87 
	#DAC_Triggî_T7_TRGO
 ((
uöt32_t
)0x00000014Ë

	)

88 
	#DAC_Triggî_T8_TRGO
 ((
uöt32_t
)0x0000000CË

	)

90 
	#DAC_Triggî_Ext_IT9
 ((
uöt32_t
)0x00000034Ë

	)

91 
	#DAC_Triggî_So·w¨e
 ((
uöt32_t
)0x0000003CË

	)

93 
	#IS_DAC_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
DAC_Triggî_N⁄e
Ë|| \

	)

94 ((
TRIGGER
Ë=
DAC_Triggî_T6_TRGO
) || \

95 ((
TRIGGER
Ë=
DAC_Triggî_T8_TRGO
) || \

96 ((
TRIGGER
Ë=
DAC_Triggî_T7_TRGO
) || \

97 ((
TRIGGER
Ë=
DAC_Triggî_T5_TRGO
) || \

98 ((
TRIGGER
Ë=
DAC_Triggî_T2_TRGO
) || \

99 ((
TRIGGER
Ë=
DAC_Triggî_T4_TRGO
) || \

100 ((
TRIGGER
Ë=
DAC_Triggî_Ext_IT9
) || \

101 ((
TRIGGER
Ë=
DAC_Triggî_So·w¨e
))

111 
	#DAC_WaveGíî©i⁄_N⁄e
 ((
uöt32_t
)0x00000000)

	)

112 
	#DAC_WaveGíî©i⁄_Noi£
 ((
uöt32_t
)0x00000040)

	)

113 
	#DAC_WaveGíî©i⁄_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

114 
	#IS_DAC_GENERATE_WAVE
(
WAVE
Ë(((WAVEË=
DAC_WaveGíî©i⁄_N⁄e
Ë|| \

	)

115 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_Noi£
) || \

116 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_TrüngÀ
))

125 
	#DAC_LFSRUnmask_Bô0
 ((
uöt32_t
)0x00000000Ë

	)

126 
	#DAC_LFSRUnmask_Bôs1_0
 ((
uöt32_t
)0x00000100Ë

	)

127 
	#DAC_LFSRUnmask_Bôs2_0
 ((
uöt32_t
)0x00000200Ë

	)

128 
	#DAC_LFSRUnmask_Bôs3_0
 ((
uöt32_t
)0x00000300Ë

	)

129 
	#DAC_LFSRUnmask_Bôs4_0
 ((
uöt32_t
)0x00000400Ë

	)

130 
	#DAC_LFSRUnmask_Bôs5_0
 ((
uöt32_t
)0x00000500Ë

	)

131 
	#DAC_LFSRUnmask_Bôs6_0
 ((
uöt32_t
)0x00000600Ë

	)

132 
	#DAC_LFSRUnmask_Bôs7_0
 ((
uöt32_t
)0x00000700Ë

	)

133 
	#DAC_LFSRUnmask_Bôs8_0
 ((
uöt32_t
)0x00000800Ë

	)

134 
	#DAC_LFSRUnmask_Bôs9_0
 ((
uöt32_t
)0x00000900Ë

	)

135 
	#DAC_LFSRUnmask_Bôs10_0
 ((
uöt32_t
)0x00000A00Ë

	)

136 
	#DAC_LFSRUnmask_Bôs11_0
 ((
uöt32_t
)0x00000B00Ë

	)

137 
	#DAC_TrüngÀAm∂ôude_1
 ((
uöt32_t
)0x00000000Ë

	)

138 
	#DAC_TrüngÀAm∂ôude_3
 ((
uöt32_t
)0x00000100Ë

	)

139 
	#DAC_TrüngÀAm∂ôude_7
 ((
uöt32_t
)0x00000200Ë

	)

140 
	#DAC_TrüngÀAm∂ôude_15
 ((
uöt32_t
)0x00000300Ë

	)

141 
	#DAC_TrüngÀAm∂ôude_31
 ((
uöt32_t
)0x00000400Ë

	)

142 
	#DAC_TrüngÀAm∂ôude_63
 ((
uöt32_t
)0x00000500Ë

	)

143 
	#DAC_TrüngÀAm∂ôude_127
 ((
uöt32_t
)0x00000600Ë

	)

144 
	#DAC_TrüngÀAm∂ôude_255
 ((
uöt32_t
)0x00000700Ë

	)

145 
	#DAC_TrüngÀAm∂ôude_511
 ((
uöt32_t
)0x00000800Ë

	)

146 
	#DAC_TrüngÀAm∂ôude_1023
 ((
uöt32_t
)0x00000900Ë

	)

147 
	#DAC_TrüngÀAm∂ôude_2047
 ((
uöt32_t
)0x00000A00Ë

	)

148 
	#DAC_TrüngÀAm∂ôude_4095
 ((
uöt32_t
)0x00000B00Ë

	)

150 
	#IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
VALUE
Ë(((VALUEË=
DAC_LFSRUnmask_Bô0
Ë|| \

	)

151 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs1_0
) || \

152 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs2_0
) || \

153 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs3_0
) || \

154 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs4_0
) || \

155 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs5_0
) || \

156 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs6_0
) || \

157 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs7_0
) || \

158 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs8_0
) || \

159 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs9_0
) || \

160 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs10_0
) || \

161 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs11_0
) || \

162 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1
) || \

163 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_3
) || \

164 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_7
) || \

165 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_15
) || \

166 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_31
) || \

167 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_63
) || \

168 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_127
) || \

169 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_255
) || \

170 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_511
) || \

171 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1023
) || \

172 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_2047
) || \

173 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_4095
))

182 
	#DAC_OuçutBuf„r_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

183 
	#DAC_OuçutBuf„r_DißbÀ
 ((
uöt32_t
)0x00000002)

	)

184 
	#IS_DAC_OUTPUT_BUFFER_STATE
(
STATE
Ë(((STATEË=
DAC_OuçutBuf„r_E«bÀ
Ë|| \

	)

185 ((
STATE
Ë=
DAC_OuçutBuf„r_DißbÀ
))

194 
	#DAC_Ch™√l_1
 ((
uöt32_t
)0x00000000)

	)

195 
	#DAC_Ch™√l_2
 ((
uöt32_t
)0x00000010)

	)

196 
	#IS_DAC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DAC_Ch™√l_1
Ë|| \

	)

197 ((
CHANNEL
Ë=
DAC_Ch™√l_2
))

206 
	#DAC_Align_12b_R
 ((
uöt32_t
)0x00000000)

	)

207 
	#DAC_Align_12b_L
 ((
uöt32_t
)0x00000004)

	)

208 
	#DAC_Align_8b_R
 ((
uöt32_t
)0x00000008)

	)

209 
	#IS_DAC_ALIGN
(
ALIGN
Ë(((ALIGNË=
DAC_Align_12b_R
Ë|| \

	)

210 ((
ALIGN
Ë=
DAC_Align_12b_L
) || \

211 ((
ALIGN
Ë=
DAC_Align_8b_R
))

220 
	#DAC_Wave_Noi£
 ((
uöt32_t
)0x00000040)

	)

221 
	#DAC_Wave_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

222 
	#IS_DAC_WAVE
(
WAVE
Ë(((WAVEË=
DAC_Wave_Noi£
Ë|| \

	)

223 ((
WAVE
Ë=
DAC_Wave_TrüngÀ
))

232 
	#IS_DAC_DATA
(
DATA
Ë((DATAË<0xFFF0)

	)

240 
	#DAC_IT_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

241 
	#IS_DAC_IT
(
IT
Ë(((ITË=
DAC_IT_DMAUDR
))

	)

251 
	#DAC_FLAG_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

252 
	#IS_DAC_FLAG
(
FLAG
Ë(((FLAGË=
DAC_FLAG_DMAUDR
))

	)

266 
DAC_DeInô
();

269 
DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

270 
DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

271 
DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

272 
DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

273 
DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

274 
DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

275 
DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

276 
DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

277 
DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
);

278 
uöt16_t
 
DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
);

281 
DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

284 
DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

285 
FœgSètus
 
DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

286 
DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

287 
ITSètus
 
DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

288 
DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

290 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dbgmcu.h

29 #i‚de‡
__STM32F4xx_DBGMCU_H


30 
	#__STM32F4xx_DBGMCU_H


	)

32 #ifde‡
__˝lu•lus


37 
	~"°m32f4xx.h
"

53 
	#DBGMCU_SLEEP
 ((
uöt32_t
)0x00000001)

	)

54 
	#DBGMCU_STOP
 ((
uöt32_t
)0x00000002)

	)

55 
	#DBGMCU_STANDBY
 ((
uöt32_t
)0x00000004)

	)

56 
	#IS_DBGMCU_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFFF8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

58 
	#DBGMCU_TIM2_STOP
 ((
uöt32_t
)0x00000001)

	)

59 
	#DBGMCU_TIM3_STOP
 ((
uöt32_t
)0x00000002)

	)

60 
	#DBGMCU_TIM4_STOP
 ((
uöt32_t
)0x00000004)

	)

61 
	#DBGMCU_TIM5_STOP
 ((
uöt32_t
)0x00000008)

	)

62 
	#DBGMCU_TIM6_STOP
 ((
uöt32_t
)0x00000010)

	)

63 
	#DBGMCU_TIM7_STOP
 ((
uöt32_t
)0x00000020)

	)

64 
	#DBGMCU_TIM12_STOP
 ((
uöt32_t
)0x00000040)

	)

65 
	#DBGMCU_TIM13_STOP
 ((
uöt32_t
)0x00000080)

	)

66 
	#DBGMCU_TIM14_STOP
 ((
uöt32_t
)0x00000100)

	)

67 
	#DBGMCU_RTC_STOP
 ((
uöt32_t
)0x00000400)

	)

68 
	#DBGMCU_WWDG_STOP
 ((
uöt32_t
)0x00000800)

	)

69 
	#DBGMCU_IWDG_STOP
 ((
uöt32_t
)0x00001000)

	)

70 
	#DBGMCU_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00200000)

	)

71 
	#DBGMCU_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00400000)

	)

72 
	#DBGMCU_I2C3_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00800000)

	)

73 
	#DBGMCU_CAN1_STOP
 ((
uöt32_t
)0x02000000)

	)

74 
	#DBGMCU_CAN2_STOP
 ((
uöt32_t
)0x04000000)

	)

75 
	#IS_DBGMCU_APB1PERIPH
(
PERIPH
Ë((((PERIPHË& 0xF91FE200Ë=0x00Ë&& ((PERIPHË!0x00))

	)

77 
	#DBGMCU_TIM1_STOP
 ((
uöt32_t
)0x00000001)

	)

78 
	#DBGMCU_TIM8_STOP
 ((
uöt32_t
)0x00000002)

	)

79 
	#DBGMCU_TIM9_STOP
 ((
uöt32_t
)0x00010000)

	)

80 
	#DBGMCU_TIM10_STOP
 ((
uöt32_t
)0x00020000)

	)

81 
	#DBGMCU_TIM11_STOP
 ((
uöt32_t
)0x00040000)

	)

82 
	#IS_DBGMCU_APB2PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFF8FFFCË=0x00Ë&& ((PERIPHË!0x00))

	)

89 
uöt32_t
 
DBGMCU_GëREVID
();

90 
uöt32_t
 
DBGMCU_GëDEVID
();

91 
DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

92 
DBGMCU_APB1PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

93 
DBGMCU_APB2PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

95 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dcmi.h

29 #i‚de‡
__STM32F4xx_DCMI_H


30 
	#__STM32F4xx_DCMI_H


	)

32 #ifde‡
__˝lu•lus


37 
	~"°m32f4xx.h
"

53 
uöt16_t
 
DCMI_C≠tuªMode
;

56 
uöt16_t
 
DCMI_SynchroMode
;

59 
uöt16_t
 
DCMI_PCKPﬁ¨ôy
;

62 
uöt16_t
 
DCMI_VSPﬁ¨ôy
;

65 
uöt16_t
 
DCMI_HSPﬁ¨ôy
;

68 
uöt16_t
 
DCMI_C≠tuªR©e
;

71 
uöt16_t
 
DCMI_ExãndedD©aMode
;

73 } 
	tDCMI_InôTy≥Def
;

80 
uöt16_t
 
DCMI_VîtiˇlSèπLöe
;

83 
uöt16_t
 
DCMI_H‹iz⁄èlOff£tCou¡
;

86 
uöt16_t
 
DCMI_VîtiˇlLöeCou¡
;

89 
uöt16_t
 
DCMI_C≠tuªCou¡
;

92 } 
	tDCMI_CROPInôTy≥Def
;

99 
uöt8_t
 
DCMI_FømeSèπCode
;

100 
uöt8_t
 
DCMI_LöeSèπCode
;

101 
uöt8_t
 
DCMI_LöeEndCode
;

102 
uöt8_t
 
DCMI_FømeEndCode
;

103 } 
	tDCMI_CodesInôTy≥Def
;

114 
	#DCMI_C≠tuªMode_C⁄töuous
 ((
uöt16_t
)0x0000Ë

	)

116 
	#DCMI_C≠tuªMode_S«pShŸ
 ((
uöt16_t
)0x0002Ë

	)

118 
	#IS_DCMI_CAPTURE_MODE
(
MODE
)(((MODEË=
DCMI_C≠tuªMode_C⁄töuous
Ë|| \

	)

119 ((
MODE
Ë=
DCMI_C≠tuªMode_S«pShŸ
))

128 
	#DCMI_SynchroMode_H¨dw¨e
 ((
uöt16_t
)0x0000Ë

	)

130 
	#DCMI_SynchroMode_Embedded
 ((
uöt16_t
)0x0010Ë

	)

132 
	#IS_DCMI_SYNCHRO
(
MODE
)(((MODEË=
DCMI_SynchroMode_H¨dw¨e
Ë|| \

	)

133 ((
MODE
Ë=
DCMI_SynchroMode_Embedded
))

142 
	#DCMI_PCKPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0000Ë

	)

143 
	#DCMI_PCKPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0020Ë

	)

144 
	#IS_DCMI_PCKPOLARITY
(
POLARITY
)(((POLARITYË=
DCMI_PCKPﬁ¨ôy_FÆlög
Ë|| \

	)

145 ((
POLARITY
Ë=
DCMI_PCKPﬁ¨ôy_Risög
))

154 
	#DCMI_VSPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000Ë

	)

155 
	#DCMI_VSPﬁ¨ôy_High
 ((
uöt16_t
)0x0080Ë

	)

156 
	#IS_DCMI_VSPOLARITY
(
POLARITY
)(((POLARITYË=
DCMI_VSPﬁ¨ôy_Low
Ë|| \

	)

157 ((
POLARITY
Ë=
DCMI_VSPﬁ¨ôy_High
))

166 
	#DCMI_HSPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000Ë

	)

167 
	#DCMI_HSPﬁ¨ôy_High
 ((
uöt16_t
)0x0040Ë

	)

168 
	#IS_DCMI_HSPOLARITY
(
POLARITY
)(((POLARITYË=
DCMI_HSPﬁ¨ôy_Low
Ë|| \

	)

169 ((
POLARITY
Ë=
DCMI_HSPﬁ¨ôy_High
))

178 
	#DCMI_C≠tuªR©e_AŒ_Føme
 ((
uöt16_t
)0x0000Ë

	)

179 
	#DCMI_C≠tuªR©e_1of2_Føme
 ((
uöt16_t
)0x0100Ë

	)

180 
	#DCMI_C≠tuªR©e_1of4_Føme
 ((
uöt16_t
)0x0200Ë

	)

181 
	#IS_DCMI_CAPTURE_RATE
(
RATE
Ë(((RATEË=
DCMI_C≠tuªR©e_AŒ_Føme
Ë|| \

	)

182 ((
RATE
Ë=
DCMI_C≠tuªR©e_1of2_Føme
) ||\

183 ((
RATE
Ë=
DCMI_C≠tuªR©e_1of4_Føme
))

192 
	#DCMI_ExãndedD©aMode_8b
 ((
uöt16_t
)0x0000Ë

	)

193 
	#DCMI_ExãndedD©aMode_10b
 ((
uöt16_t
)0x0400Ë

	)

194 
	#DCMI_ExãndedD©aMode_12b
 ((
uöt16_t
)0x0800Ë

	)

195 
	#DCMI_ExãndedD©aMode_14b
 ((
uöt16_t
)0x0C00Ë

	)

196 
	#IS_DCMI_EXTENDED_DATA
(
DATA
)(((DATAË=
DCMI_ExãndedD©aMode_8b
Ë|| \

	)

197 ((
DATA
Ë=
DCMI_ExãndedD©aMode_10b
) ||\

198 ((
DATA
Ë=
DCMI_ExãndedD©aMode_12b
) ||\

199 ((
DATA
Ë=
DCMI_ExãndedD©aMode_14b
))

208 
	#DCMI_IT_FRAME
 ((
uöt16_t
)0x0001)

	)

209 
	#DCMI_IT_OVF
 ((
uöt16_t
)0x0002)

	)

210 
	#DCMI_IT_ERR
 ((
uöt16_t
)0x0004)

	)

211 
	#DCMI_IT_VSYNC
 ((
uöt16_t
)0x0008)

	)

212 
	#DCMI_IT_LINE
 ((
uöt16_t
)0x0010)

	)

213 
	#IS_DCMI_CONFIG_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFFE0Ë=0x0000Ë&& ((ITË!0x0000))

	)

214 
	#IS_DCMI_GET_IT
(
IT
Ë(((ITË=
DCMI_IT_FRAME
Ë|| \

	)

215 ((
IT
Ë=
DCMI_IT_OVF
) || \

216 ((
IT
Ë=
DCMI_IT_ERR
) || \

217 ((
IT
Ë=
DCMI_IT_VSYNC
) || \

218 ((
IT
Ë=
DCMI_IT_LINE
))

230 
	#DCMI_FLAG_HSYNC
 ((
uöt16_t
)0x2001)

	)

231 
	#DCMI_FLAG_VSYNC
 ((
uöt16_t
)0x2002)

	)

232 
	#DCMI_FLAG_FNE
 ((
uöt16_t
)0x2004)

	)

236 
	#DCMI_FLAG_FRAMERI
 ((
uöt16_t
)0x0001)

	)

237 
	#DCMI_FLAG_OVFRI
 ((
uöt16_t
)0x0002)

	)

238 
	#DCMI_FLAG_ERRRI
 ((
uöt16_t
)0x0004)

	)

239 
	#DCMI_FLAG_VSYNCRI
 ((
uöt16_t
)0x0008)

	)

240 
	#DCMI_FLAG_LINERI
 ((
uöt16_t
)0x0010)

	)

244 
	#DCMI_FLAG_FRAMEMI
 ((
uöt16_t
)0x1001)

	)

245 
	#DCMI_FLAG_OVFMI
 ((
uöt16_t
)0x1002)

	)

246 
	#DCMI_FLAG_ERRMI
 ((
uöt16_t
)0x1004)

	)

247 
	#DCMI_FLAG_VSYNCMI
 ((
uöt16_t
)0x1008)

	)

248 
	#DCMI_FLAG_LINEMI
 ((
uöt16_t
)0x1010)

	)

249 
	#IS_DCMI_GET_FLAG
(
FLAG
Ë(((FLAGË=
DCMI_FLAG_HSYNC
Ë|| \

	)

250 ((
FLAG
Ë=
DCMI_FLAG_VSYNC
) || \

251 ((
FLAG
Ë=
DCMI_FLAG_FNE
) || \

252 ((
FLAG
Ë=
DCMI_FLAG_FRAMERI
) || \

253 ((
FLAG
Ë=
DCMI_FLAG_OVFRI
) || \

254 ((
FLAG
Ë=
DCMI_FLAG_ERRRI
) || \

255 ((
FLAG
Ë=
DCMI_FLAG_VSYNCRI
) || \

256 ((
FLAG
Ë=
DCMI_FLAG_LINERI
) || \

257 ((
FLAG
Ë=
DCMI_FLAG_FRAMEMI
) || \

258 ((
FLAG
Ë=
DCMI_FLAG_OVFMI
) || \

259 ((
FLAG
Ë=
DCMI_FLAG_ERRMI
) || \

260 ((
FLAG
Ë=
DCMI_FLAG_VSYNCMI
) || \

261 ((
FLAG
Ë=
DCMI_FLAG_LINEMI
))

263 
	#IS_DCMI_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFFE0Ë=0x0000Ë&& ((FLAGË!0x0000))

	)

276 
DCMI_DeInô
();

279 
DCMI_Inô
(
DCMI_InôTy≥Def
* 
DCMI_InôSåu˘
);

280 
DCMI_Såu˘Inô
(
DCMI_InôTy≥Def
* 
DCMI_InôSåu˘
);

281 
DCMI_CROPC⁄fig
(
DCMI_CROPInôTy≥Def
* 
DCMI_CROPInôSåu˘
);

282 
DCMI_CROPCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

283 
DCMI_SëEmbeddedSynchroCodes
(
DCMI_CodesInôTy≥Def
* 
DCMI_CodesInôSåu˘
);

284 
DCMI_JPEGCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

287 
DCMI_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

288 
DCMI_C≠tuªCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

289 
uöt32_t
 
DCMI_RódD©a
();

292 
DCMI_ITC⁄fig
(
uöt16_t
 
DCMI_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

293 
FœgSètus
 
DCMI_GëFœgSètus
(
uöt16_t
 
DCMI_FLAG
);

294 
DCMI_CÀ¨Fœg
(
uöt16_t
 
DCMI_FLAG
);

295 
ITSètus
 
DCMI_GëITSètus
(
uöt16_t
 
DCMI_IT
);

296 
DCMI_CÀ¨ITPídögBô
(
uöt16_t
 
DCMI_IT
);

298 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dma.h

30 #i‚de‡
__STM32F4xx_DMA_H


31 
	#__STM32F4xx_DMA_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
DMA_Ch™√l
;

59 
uöt32_t
 
DMA_PîùhîÆBa£Addr
;

61 
uöt32_t
 
DMA_Mem‹y0Ba£Addr
;

65 
uöt32_t
 
DMA_DIR
;

69 
uöt32_t
 
DMA_Buf„rSize
;

73 
uöt32_t
 
DMA_PîùhîÆInc
;

76 
uöt32_t
 
DMA_Mem‹yInc
;

79 
uöt32_t
 
DMA_PîùhîÆD©aSize
;

82 
uöt32_t
 
DMA_Mem‹yD©aSize
;

85 
uöt32_t
 
DMA_Mode
;

90 
uöt32_t
 
DMA_Pri‹ôy
;

93 
uöt32_t
 
DMA_FIFOMode
;

98 
uöt32_t
 
DMA_FIFOThªshﬁd
;

101 
uöt32_t
 
DMA_Mem‹yBur°
;

106 
uöt32_t
 
DMA_PîùhîÆBur°
;

110 }
	tDMA_InôTy≥Def
;

118 
	#IS_DMA_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
DMA1_Såóm0
Ë|| \

	)

119 ((
PERIPH
Ë=
DMA1_Såóm1
) || \

120 ((
PERIPH
Ë=
DMA1_Såóm2
) || \

121 ((
PERIPH
Ë=
DMA1_Såóm3
) || \

122 ((
PERIPH
Ë=
DMA1_Såóm4
) || \

123 ((
PERIPH
Ë=
DMA1_Såóm5
) || \

124 ((
PERIPH
Ë=
DMA1_Såóm6
) || \

125 ((
PERIPH
Ë=
DMA1_Såóm7
) || \

126 ((
PERIPH
Ë=
DMA2_Såóm0
) || \

127 ((
PERIPH
Ë=
DMA2_Såóm1
) || \

128 ((
PERIPH
Ë=
DMA2_Såóm2
) || \

129 ((
PERIPH
Ë=
DMA2_Såóm3
) || \

130 ((
PERIPH
Ë=
DMA2_Såóm4
) || \

131 ((
PERIPH
Ë=
DMA2_Såóm5
) || \

132 ((
PERIPH
Ë=
DMA2_Såóm6
) || \

133 ((
PERIPH
Ë=
DMA2_Såóm7
))

135 
	#IS_DMA_ALL_CONTROLLER
(
CONTROLLER
Ë(((CONTROLLERË=
DMA1
Ë|| \

	)

136 ((
CONTROLLER
Ë=
DMA2
))

141 
	#DMA_Ch™√l_0
 ((
uöt32_t
)0x00000000)

	)

142 
	#DMA_Ch™√l_1
 ((
uöt32_t
)0x02000000)

	)

143 
	#DMA_Ch™√l_2
 ((
uöt32_t
)0x04000000)

	)

144 
	#DMA_Ch™√l_3
 ((
uöt32_t
)0x06000000)

	)

145 
	#DMA_Ch™√l_4
 ((
uöt32_t
)0x08000000)

	)

146 
	#DMA_Ch™√l_5
 ((
uöt32_t
)0x0A000000)

	)

147 
	#DMA_Ch™√l_6
 ((
uöt32_t
)0x0C000000)

	)

148 
	#DMA_Ch™√l_7
 ((
uöt32_t
)0x0E000000)

	)

150 
	#IS_DMA_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DMA_Ch™√l_0
Ë|| \

	)

151 ((
CHANNEL
Ë=
DMA_Ch™√l_1
) || \

152 ((
CHANNEL
Ë=
DMA_Ch™√l_2
) || \

153 ((
CHANNEL
Ë=
DMA_Ch™√l_3
) || \

154 ((
CHANNEL
Ë=
DMA_Ch™√l_4
) || \

155 ((
CHANNEL
Ë=
DMA_Ch™√l_5
) || \

156 ((
CHANNEL
Ë=
DMA_Ch™√l_6
) || \

157 ((
CHANNEL
Ë=
DMA_Ch™√l_7
))

166 
	#DMA_DIR_PîùhîÆToMem‹y
 ((
uöt32_t
)0x00000000)

	)

167 
	#DMA_DIR_Mem‹yToPîùhîÆ
 ((
uöt32_t
)0x00000040)

	)

168 
	#DMA_DIR_Mem‹yToMem‹y
 ((
uöt32_t
)0x00000080)

	)

170 
	#IS_DMA_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
DMA_DIR_PîùhîÆToMem‹y
 ) || \

	)

171 ((
DIRECTION
Ë=
DMA_DIR_Mem‹yToPîùhîÆ
) || \

172 ((
DIRECTION
Ë=
DMA_DIR_Mem‹yToMem‹y
))

181 
	#IS_DMA_BUFFER_SIZE
(
SIZE
Ë(((SIZEË>0x1Ë&& ((SIZEË< 0x10000))

	)

190 
	#DMA_PîùhîÆInc_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

191 
	#DMA_PîùhîÆInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

193 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
Ë(((STATEË=
DMA_PîùhîÆInc_E«bÀ
Ë|| \

	)

194 ((
STATE
Ë=
DMA_PîùhîÆInc_DißbÀ
))

203 
	#DMA_Mem‹yInc_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

204 
	#DMA_Mem‹yInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

206 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
Ë(((STATEË=
DMA_Mem‹yInc_E«bÀ
Ë|| \

	)

207 ((
STATE
Ë=
DMA_Mem‹yInc_DißbÀ
))

216 
	#DMA_PîùhîÆD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

217 
	#DMA_PîùhîÆD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000800)

	)

218 
	#DMA_PîùhîÆD©aSize_W‹d
 ((
uöt32_t
)0x00001000)

	)

220 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PîùhîÆD©aSize_Byã
Ë|| \

	)

221 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_HÆfW‹d
) || \

222 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_W‹d
))

231 
	#DMA_Mem‹yD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

232 
	#DMA_Mem‹yD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00002000)

	)

233 
	#DMA_Mem‹yD©aSize_W‹d
 ((
uöt32_t
)0x00004000)

	)

235 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_Mem‹yD©aSize_Byã
Ë|| \

	)

236 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_HÆfW‹d
) || \

237 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_W‹d
 ))

246 
	#DMA_Mode_N‹mÆ
 ((
uöt32_t
)0x00000000)

	)

247 
	#DMA_Mode_Cúcuœr
 ((
uöt32_t
)0x00000100)

	)

249 
	#IS_DMA_MODE
(
MODE
Ë(((MODEË=
DMA_Mode_N‹mÆ
 ) || \

	)

250 ((
MODE
Ë=
DMA_Mode_Cúcuœr
))

259 
	#DMA_Pri‹ôy_Low
 ((
uöt32_t
)0x00000000)

	)

260 
	#DMA_Pri‹ôy_Medium
 ((
uöt32_t
)0x00010000)

	)

261 
	#DMA_Pri‹ôy_High
 ((
uöt32_t
)0x00020000)

	)

262 
	#DMA_Pri‹ôy_VîyHigh
 ((
uöt32_t
)0x00030000)

	)

264 
	#IS_DMA_PRIORITY
(
PRIORITY
Ë(((PRIORITYË=
DMA_Pri‹ôy_Low
 ) || \

	)

265 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Medium
) || \

266 ((
PRIORITY
Ë=
DMA_Pri‹ôy_High
) || \

267 ((
PRIORITY
Ë=
DMA_Pri‹ôy_VîyHigh
))

276 
	#DMA_FIFOMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

277 
	#DMA_FIFOMode_E«bÀ
 ((
uöt32_t
)0x00000004)

	)

279 
	#IS_DMA_FIFO_MODE_STATE
(
STATE
Ë(((STATEË=
DMA_FIFOMode_DißbÀ
 ) || \

	)

280 ((
STATE
Ë=
DMA_FIFOMode_E«bÀ
))

289 
	#DMA_FIFOThªshﬁd_1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00000000)

	)

290 
	#DMA_FIFOThªshﬁd_HÆfFuŒ
 ((
uöt32_t
)0x00000001)

	)

291 
	#DMA_FIFOThªshﬁd_3Qu¨ãrsFuŒ
 ((
uöt32_t
)0x00000002)

	)

292 
	#DMA_FIFOThªshﬁd_FuŒ
 ((
uöt32_t
)0x00000003)

	)

294 
	#IS_DMA_FIFO_THRESHOLD
(
THRESHOLD
Ë(((THRESHOLDË=
DMA_FIFOThªshﬁd_1Qu¨ãrFuŒ
 ) || \

	)

295 ((
THRESHOLD
Ë=
DMA_FIFOThªshﬁd_HÆfFuŒ
) || \

296 ((
THRESHOLD
Ë=
DMA_FIFOThªshﬁd_3Qu¨ãrsFuŒ
) || \

297 ((
THRESHOLD
Ë=
DMA_FIFOThªshﬁd_FuŒ
))

306 
	#DMA_Mem‹yBur°_SögÀ
 ((
uöt32_t
)0x00000000)

	)

307 
	#DMA_Mem‹yBur°_INC4
 ((
uöt32_t
)0x00800000)

	)

308 
	#DMA_Mem‹yBur°_INC8
 ((
uöt32_t
)0x01000000)

	)

309 
	#DMA_Mem‹yBur°_INC16
 ((
uöt32_t
)0x01800000)

	)

311 
	#IS_DMA_MEMORY_BURST
(
BURST
Ë(((BURSTË=
DMA_Mem‹yBur°_SögÀ
Ë|| \

	)

312 ((
BURST
Ë=
DMA_Mem‹yBur°_INC4
) || \

313 ((
BURST
Ë=
DMA_Mem‹yBur°_INC8
) || \

314 ((
BURST
Ë=
DMA_Mem‹yBur°_INC16
))

323 
	#DMA_PîùhîÆBur°_SögÀ
 ((
uöt32_t
)0x00000000)

	)

324 
	#DMA_PîùhîÆBur°_INC4
 ((
uöt32_t
)0x00200000)

	)

325 
	#DMA_PîùhîÆBur°_INC8
 ((
uöt32_t
)0x00400000)

	)

326 
	#DMA_PîùhîÆBur°_INC16
 ((
uöt32_t
)0x00600000)

	)

328 
	#IS_DMA_PERIPHERAL_BURST
(
BURST
Ë(((BURSTË=
DMA_PîùhîÆBur°_SögÀ
Ë|| \

	)

329 ((
BURST
Ë=
DMA_PîùhîÆBur°_INC4
) || \

330 ((
BURST
Ë=
DMA_PîùhîÆBur°_INC8
) || \

331 ((
BURST
Ë=
DMA_PîùhîÆBur°_INC16
))

340 
	#DMA_FIFOSètus_Less1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00000000 << 3)

	)

341 
	#DMA_FIFOSètus_1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00000001 << 3)

	)

342 
	#DMA_FIFOSètus_HÆfFuŒ
 ((
uöt32_t
)0x00000002 << 3)

	)

343 
	#DMA_FIFOSètus_3Qu¨ãrsFuŒ
 ((
uöt32_t
)0x00000003 << 3)

	)

344 
	#DMA_FIFOSètus_Em±y
 ((
uöt32_t
)0x00000004 << 3)

	)

345 
	#DMA_FIFOSètus_FuŒ
 ((
uöt32_t
)0x00000005 << 3)

	)

347 
	#IS_DMA_FIFO_STATUS
(
STATUS
Ë(((STATUSË=
DMA_FIFOSètus_Less1Qu¨ãrFuŒ
 ) || \

	)

348 ((
STATUS
Ë=
DMA_FIFOSètus_HÆfFuŒ
) || \

349 ((
STATUS
Ë=
DMA_FIFOSètus_1Qu¨ãrFuŒ
) || \

350 ((
STATUS
Ë=
DMA_FIFOSètus_3Qu¨ãrsFuŒ
) || \

351 ((
STATUS
Ë=
DMA_FIFOSètus_FuŒ
) || \

352 ((
STATUS
Ë=
DMA_FIFOSètus_Em±y
))

360 
	#DMA_FLAG_FEIF0
 ((
uöt32_t
)0x10800001)

	)

361 
	#DMA_FLAG_DMEIF0
 ((
uöt32_t
)0x10800004)

	)

362 
	#DMA_FLAG_TEIF0
 ((
uöt32_t
)0x10000008)

	)

363 
	#DMA_FLAG_HTIF0
 ((
uöt32_t
)0x10000010)

	)

364 
	#DMA_FLAG_TCIF0
 ((
uöt32_t
)0x10000020)

	)

365 
	#DMA_FLAG_FEIF1
 ((
uöt32_t
)0x10000040)

	)

366 
	#DMA_FLAG_DMEIF1
 ((
uöt32_t
)0x10000100)

	)

367 
	#DMA_FLAG_TEIF1
 ((
uöt32_t
)0x10000200)

	)

368 
	#DMA_FLAG_HTIF1
 ((
uöt32_t
)0x10000400)

	)

369 
	#DMA_FLAG_TCIF1
 ((
uöt32_t
)0x10000800)

	)

370 
	#DMA_FLAG_FEIF2
 ((
uöt32_t
)0x10010000)

	)

371 
	#DMA_FLAG_DMEIF2
 ((
uöt32_t
)0x10040000)

	)

372 
	#DMA_FLAG_TEIF2
 ((
uöt32_t
)0x10080000)

	)

373 
	#DMA_FLAG_HTIF2
 ((
uöt32_t
)0x10100000)

	)

374 
	#DMA_FLAG_TCIF2
 ((
uöt32_t
)0x10200000)

	)

375 
	#DMA_FLAG_FEIF3
 ((
uöt32_t
)0x10400000)

	)

376 
	#DMA_FLAG_DMEIF3
 ((
uöt32_t
)0x11000000)

	)

377 
	#DMA_FLAG_TEIF3
 ((
uöt32_t
)0x12000000)

	)

378 
	#DMA_FLAG_HTIF3
 ((
uöt32_t
)0x14000000)

	)

379 
	#DMA_FLAG_TCIF3
 ((
uöt32_t
)0x18000000)

	)

380 
	#DMA_FLAG_FEIF4
 ((
uöt32_t
)0x20000001)

	)

381 
	#DMA_FLAG_DMEIF4
 ((
uöt32_t
)0x20000004)

	)

382 
	#DMA_FLAG_TEIF4
 ((
uöt32_t
)0x20000008)

	)

383 
	#DMA_FLAG_HTIF4
 ((
uöt32_t
)0x20000010)

	)

384 
	#DMA_FLAG_TCIF4
 ((
uöt32_t
)0x20000020)

	)

385 
	#DMA_FLAG_FEIF5
 ((
uöt32_t
)0x20000040)

	)

386 
	#DMA_FLAG_DMEIF5
 ((
uöt32_t
)0x20000100)

	)

387 
	#DMA_FLAG_TEIF5
 ((
uöt32_t
)0x20000200)

	)

388 
	#DMA_FLAG_HTIF5
 ((
uöt32_t
)0x20000400)

	)

389 
	#DMA_FLAG_TCIF5
 ((
uöt32_t
)0x20000800)

	)

390 
	#DMA_FLAG_FEIF6
 ((
uöt32_t
)0x20010000)

	)

391 
	#DMA_FLAG_DMEIF6
 ((
uöt32_t
)0x20040000)

	)

392 
	#DMA_FLAG_TEIF6
 ((
uöt32_t
)0x20080000)

	)

393 
	#DMA_FLAG_HTIF6
 ((
uöt32_t
)0x20100000)

	)

394 
	#DMA_FLAG_TCIF6
 ((
uöt32_t
)0x20200000)

	)

395 
	#DMA_FLAG_FEIF7
 ((
uöt32_t
)0x20400000)

	)

396 
	#DMA_FLAG_DMEIF7
 ((
uöt32_t
)0x21000000)

	)

397 
	#DMA_FLAG_TEIF7
 ((
uöt32_t
)0x22000000)

	)

398 
	#DMA_FLAG_HTIF7
 ((
uöt32_t
)0x24000000)

	)

399 
	#DMA_FLAG_TCIF7
 ((
uöt32_t
)0x28000000)

	)

401 
	#IS_DMA_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& 0x30000000Ë!0x30000000Ë&& (((FLAGË& 0x30000000Ë!0Ë&& \

	)

402 (((
FLAG
) & 0xC002F082) == 0x00) && ((FLAG) != 0x00))

404 
	#IS_DMA_GET_FLAG
(
FLAG
Ë(((FLAGË=
DMA_FLAG_TCIF0
Ë|| ((FLAGË=
DMA_FLAG_HTIF0
Ë|| \

	)

405 ((
FLAG
Ë=
DMA_FLAG_TEIF0
Ë|| ((FLAGË=
DMA_FLAG_DMEIF0
) || \

406 ((
FLAG
Ë=
DMA_FLAG_FEIF0
Ë|| ((FLAGË=
DMA_FLAG_TCIF1
) || \

407 ((
FLAG
Ë=
DMA_FLAG_HTIF1
Ë|| ((FLAGË=
DMA_FLAG_TEIF1
) || \

408 ((
FLAG
Ë=
DMA_FLAG_DMEIF1
Ë|| ((FLAGË=
DMA_FLAG_FEIF1
) || \

409 ((
FLAG
Ë=
DMA_FLAG_TCIF2
Ë|| ((FLAGË=
DMA_FLAG_HTIF2
) || \

410 ((
FLAG
Ë=
DMA_FLAG_TEIF2
Ë|| ((FLAGË=
DMA_FLAG_DMEIF2
) || \

411 ((
FLAG
Ë=
DMA_FLAG_FEIF2
Ë|| ((FLAGË=
DMA_FLAG_TCIF3
) || \

412 ((
FLAG
Ë=
DMA_FLAG_HTIF3
Ë|| ((FLAGË=
DMA_FLAG_TEIF3
) || \

413 ((
FLAG
Ë=
DMA_FLAG_DMEIF3
Ë|| ((FLAGË=
DMA_FLAG_FEIF3
) || \

414 ((
FLAG
Ë=
DMA_FLAG_TCIF4
Ë|| ((FLAGË=
DMA_FLAG_HTIF4
) || \

415 ((
FLAG
Ë=
DMA_FLAG_TEIF4
Ë|| ((FLAGË=
DMA_FLAG_DMEIF4
) || \

416 ((
FLAG
Ë=
DMA_FLAG_FEIF4
Ë|| ((FLAGË=
DMA_FLAG_TCIF5
) || \

417 ((
FLAG
Ë=
DMA_FLAG_HTIF5
Ë|| ((FLAGË=
DMA_FLAG_TEIF5
) || \

418 ((
FLAG
Ë=
DMA_FLAG_DMEIF5
Ë|| ((FLAGË=
DMA_FLAG_FEIF5
) || \

419 ((
FLAG
Ë=
DMA_FLAG_TCIF6
Ë|| ((FLAGË=
DMA_FLAG_HTIF6
) || \

420 ((
FLAG
Ë=
DMA_FLAG_TEIF6
Ë|| ((FLAGË=
DMA_FLAG_DMEIF6
) || \

421 ((
FLAG
Ë=
DMA_FLAG_FEIF6
Ë|| ((FLAGË=
DMA_FLAG_TCIF7
) || \

422 ((
FLAG
Ë=
DMA_FLAG_HTIF7
Ë|| ((FLAGË=
DMA_FLAG_TEIF7
) || \

423 ((
FLAG
Ë=
DMA_FLAG_DMEIF7
Ë|| ((FLAGË=
DMA_FLAG_FEIF7
))

432 
	#DMA_IT_TC
 ((
uöt32_t
)0x00000010)

	)

433 
	#DMA_IT_HT
 ((
uöt32_t
)0x00000008)

	)

434 
	#DMA_IT_TE
 ((
uöt32_t
)0x00000004)

	)

435 
	#DMA_IT_DME
 ((
uöt32_t
)0x00000002)

	)

436 
	#DMA_IT_FE
 ((
uöt32_t
)0x00000080)

	)

438 
	#IS_DMA_CONFIG_IT
(
IT
Ë((((ITË& 0xFFFFFF61Ë=0x00Ë&& ((ITË!0x00))

	)

447 
	#DMA_IT_FEIF0
 ((
uöt32_t
)0x90000001)

	)

448 
	#DMA_IT_DMEIF0
 ((
uöt32_t
)0x10001004)

	)

449 
	#DMA_IT_TEIF0
 ((
uöt32_t
)0x10002008)

	)

450 
	#DMA_IT_HTIF0
 ((
uöt32_t
)0x10004010)

	)

451 
	#DMA_IT_TCIF0
 ((
uöt32_t
)0x10008020)

	)

452 
	#DMA_IT_FEIF1
 ((
uöt32_t
)0x90000040)

	)

453 
	#DMA_IT_DMEIF1
 ((
uöt32_t
)0x10001100)

	)

454 
	#DMA_IT_TEIF1
 ((
uöt32_t
)0x10002200)

	)

455 
	#DMA_IT_HTIF1
 ((
uöt32_t
)0x10004400)

	)

456 
	#DMA_IT_TCIF1
 ((
uöt32_t
)0x10008800)

	)

457 
	#DMA_IT_FEIF2
 ((
uöt32_t
)0x90010000)

	)

458 
	#DMA_IT_DMEIF2
 ((
uöt32_t
)0x10041000)

	)

459 
	#DMA_IT_TEIF2
 ((
uöt32_t
)0x10082000)

	)

460 
	#DMA_IT_HTIF2
 ((
uöt32_t
)0x10104000)

	)

461 
	#DMA_IT_TCIF2
 ((
uöt32_t
)0x10208000)

	)

462 
	#DMA_IT_FEIF3
 ((
uöt32_t
)0x90400000)

	)

463 
	#DMA_IT_DMEIF3
 ((
uöt32_t
)0x11001000)

	)

464 
	#DMA_IT_TEIF3
 ((
uöt32_t
)0x12002000)

	)

465 
	#DMA_IT_HTIF3
 ((
uöt32_t
)0x14004000)

	)

466 
	#DMA_IT_TCIF3
 ((
uöt32_t
)0x18008000)

	)

467 
	#DMA_IT_FEIF4
 ((
uöt32_t
)0xA0000001)

	)

468 
	#DMA_IT_DMEIF4
 ((
uöt32_t
)0x20001004)

	)

469 
	#DMA_IT_TEIF4
 ((
uöt32_t
)0x20002008)

	)

470 
	#DMA_IT_HTIF4
 ((
uöt32_t
)0x20004010)

	)

471 
	#DMA_IT_TCIF4
 ((
uöt32_t
)0x20008020)

	)

472 
	#DMA_IT_FEIF5
 ((
uöt32_t
)0xA0000040)

	)

473 
	#DMA_IT_DMEIF5
 ((
uöt32_t
)0x20001100)

	)

474 
	#DMA_IT_TEIF5
 ((
uöt32_t
)0x20002200)

	)

475 
	#DMA_IT_HTIF5
 ((
uöt32_t
)0x20004400)

	)

476 
	#DMA_IT_TCIF5
 ((
uöt32_t
)0x20008800)

	)

477 
	#DMA_IT_FEIF6
 ((
uöt32_t
)0xA0010000)

	)

478 
	#DMA_IT_DMEIF6
 ((
uöt32_t
)0x20041000)

	)

479 
	#DMA_IT_TEIF6
 ((
uöt32_t
)0x20082000)

	)

480 
	#DMA_IT_HTIF6
 ((
uöt32_t
)0x20104000)

	)

481 
	#DMA_IT_TCIF6
 ((
uöt32_t
)0x20208000)

	)

482 
	#DMA_IT_FEIF7
 ((
uöt32_t
)0xA0400000)

	)

483 
	#DMA_IT_DMEIF7
 ((
uöt32_t
)0x21001000)

	)

484 
	#DMA_IT_TEIF7
 ((
uöt32_t
)0x22002000)

	)

485 
	#DMA_IT_HTIF7
 ((
uöt32_t
)0x24004000)

	)

486 
	#DMA_IT_TCIF7
 ((
uöt32_t
)0x28008000)

	)

488 
	#IS_DMA_CLEAR_IT
(
IT
Ë((((ITË& 0x30000000Ë!0x30000000Ë&& \

	)

489 (((
IT
) & 0x30000000) != 0) && ((IT) != 0x00) && \

490 (((
IT
) & 0x40820082) == 0x00))

492 
	#IS_DMA_GET_IT
(
IT
Ë(((ITË=
DMA_IT_TCIF0
Ë|| ((ITË=
DMA_IT_HTIF0
Ë|| \

	)

493 ((
IT
Ë=
DMA_IT_TEIF0
Ë|| ((ITË=
DMA_IT_DMEIF0
) || \

494 ((
IT
Ë=
DMA_IT_FEIF0
Ë|| ((ITË=
DMA_IT_TCIF1
) || \

495 ((
IT
Ë=
DMA_IT_HTIF1
Ë|| ((ITË=
DMA_IT_TEIF1
) || \

496 ((
IT
Ë=
DMA_IT_DMEIF1
)|| ((ITË=
DMA_IT_FEIF1
) || \

497 ((
IT
Ë=
DMA_IT_TCIF2
Ë|| ((ITË=
DMA_IT_HTIF2
) || \

498 ((
IT
Ë=
DMA_IT_TEIF2
Ë|| ((ITË=
DMA_IT_DMEIF2
) || \

499 ((
IT
Ë=
DMA_IT_FEIF2
Ë|| ((ITË=
DMA_IT_TCIF3
) || \

500 ((
IT
Ë=
DMA_IT_HTIF3
Ë|| ((ITË=
DMA_IT_TEIF3
) || \

501 ((
IT
Ë=
DMA_IT_DMEIF3
)|| ((ITË=
DMA_IT_FEIF3
) || \

502 ((
IT
Ë=
DMA_IT_TCIF4
Ë|| ((ITË=
DMA_IT_HTIF4
) || \

503 ((
IT
Ë=
DMA_IT_TEIF4
Ë|| ((ITË=
DMA_IT_DMEIF4
) || \

504 ((
IT
Ë=
DMA_IT_FEIF4
Ë|| ((ITË=
DMA_IT_TCIF5
) || \

505 ((
IT
Ë=
DMA_IT_HTIF5
Ë|| ((ITË=
DMA_IT_TEIF5
) || \

506 ((
IT
Ë=
DMA_IT_DMEIF5
)|| ((ITË=
DMA_IT_FEIF5
) || \

507 ((
IT
Ë=
DMA_IT_TCIF6
Ë|| ((ITË=
DMA_IT_HTIF6
) || \

508 ((
IT
Ë=
DMA_IT_TEIF6
Ë|| ((ITË=
DMA_IT_DMEIF6
) || \

509 ((
IT
Ë=
DMA_IT_FEIF6
Ë|| ((ITË=
DMA_IT_TCIF7
) || \

510 ((
IT
Ë=
DMA_IT_HTIF7
Ë|| ((ITË=
DMA_IT_TEIF7
) || \

511 ((
IT
Ë=
DMA_IT_DMEIF7
)|| ((ITË=
DMA_IT_FEIF7
))

520 
	#DMA_PINCOS_Psize
 ((
uöt32_t
)0x00000000)

	)

521 
	#DMA_PINCOS_W‹dAlig√d
 ((
uöt32_t
)0x00008000)

	)

523 
	#IS_DMA_PINCOS_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PINCOS_Psize
Ë|| \

	)

524 ((
SIZE
Ë=
DMA_PINCOS_W‹dAlig√d
))

533 
	#DMA_FlowCål_Mem‹y
 ((
uöt32_t
)0x00000000)

	)

534 
	#DMA_FlowCål_PîùhîÆ
 ((
uöt32_t
)0x00000020)

	)

536 
	#IS_DMA_FLOW_CTRL
(
CTRL
Ë(((CTRLË=
DMA_FlowCål_Mem‹y
Ë|| \

	)

537 ((
CTRL
Ë=
DMA_FlowCål_PîùhîÆ
))

546 
	#DMA_Mem‹y_0
 ((
uöt32_t
)0x00000000)

	)

547 
	#DMA_Mem‹y_1
 ((
uöt32_t
)0x00080000)

	)

549 
	#IS_DMA_CURRENT_MEM
(
MEM
Ë(((MEMË=
DMA_Mem‹y_0
Ë|| ((MEMË=
DMA_Mem‹y_1
))

	)

562 
DMA_DeInô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

565 
DMA_Inô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

566 
DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

567 
DMA_Cmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

570 
DMA_PîùhIncOff£tSizeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_Pöcos
);

571 
DMA_FlowC⁄åﬁÀrC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FlowCål
);

574 
DMA_SëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt16_t
 
Cou¡î
);

575 
uöt16_t
 
DMA_GëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

578 
DMA_DoubÀBuf„rModeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹y1Ba£Addr
,

579 
uöt32_t
 
DMA_CuºítMem‹y
);

580 
DMA_DoubÀBuf„rModeCmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

581 
DMA_Mem‹yT¨gëC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹yBa£Addr
,

582 
uöt32_t
 
DMA_Mem‹yT¨gë
);

583 
uöt32_t
 
DMA_GëCuºítMem‹yT¨gë
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

586 
Fun˘i⁄ÆSèã
 
DMA_GëCmdSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

587 
uöt32_t
 
DMA_GëFIFOSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

588 
FœgSètus
 
DMA_GëFœgSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
);

589 
DMA_CÀ¨Fœg
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
);

590 
DMA_ITC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

591 
ITSètus
 
DMA_GëITSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
);

592 
DMA_CÀ¨ITPídögBô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
);

594 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dma2d.h

30 #i‚de‡
__STM32F4xx_DMA2D_H


31 
	#__STM32F4xx_DMA2D_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
DMA2D_Mode
;

59 
uöt32_t
 
DMA2D_CMode
;

62 
uöt32_t
 
DMA2D_OuçutBlue
;

70 
uöt32_t
 
DMA2D_OuçutGªí
;

78 
uöt32_t
 
DMA2D_OuçutRed
;

86 
uöt32_t
 
DMA2D_OuçutAÕha
;

92 
uöt32_t
 
DMA2D_OuçutMem‹yAdd
;

95 
uöt32_t
 
DMA2D_OuçutOff£t
;

98 
uöt32_t
 
DMA2D_NumbîOfLöe
;

101 
uöt32_t
 
DMA2D_PixñPîLöe
;

103 } 
	tDMA2D_InôTy≥Def
;

109 
uöt32_t
 
DMA2D_FGMA
;

112 
uöt32_t
 
DMA2D_FGO
;

115 
uöt32_t
 
DMA2D_FGCM
;

118 
uöt32_t
 
DMA2D_FG_CLUT_CM
;

121 
uöt32_t
 
DMA2D_FG_CLUT_SIZE
;

124 
uöt32_t
 
DMA2D_FGPFC_ALPHA_MODE
;

127 
uöt32_t
 
DMA2D_FGPFC_ALPHA_VALUE
;

130 
uöt32_t
 
DMA2D_FGC_BLUE
;

133 
uöt32_t
 
DMA2D_FGC_GREEN
;

136 
uöt32_t
 
DMA2D_FGC_RED
;

139 
uöt32_t
 
DMA2D_FGCMAR
;

141 } 
	tDMA2D_FG_InôTy≥Def
;

146 
uöt32_t
 
DMA2D_BGMA
;

149 
uöt32_t
 
DMA2D_BGO
;

152 
uöt32_t
 
DMA2D_BGCM
;

155 
uöt32_t
 
DMA2D_BG_CLUT_CM
;

158 
uöt32_t
 
DMA2D_BG_CLUT_SIZE
;

161 
uöt32_t
 
DMA2D_BGPFC_ALPHA_MODE
;

164 
uöt32_t
 
DMA2D_BGPFC_ALPHA_VALUE
;

167 
uöt32_t
 
DMA2D_BGC_BLUE
;

170 
uöt32_t
 
DMA2D_BGC_GREEN
;

173 
uöt32_t
 
DMA2D_BGC_RED
;

176 
uöt32_t
 
DMA2D_BGCMAR
;

178 } 
	tDMA2D_BG_InôTy≥Def
;

193 
	#DMA2D_M2M
 ((
uöt32_t
)0x00000000)

	)

194 
	#DMA2D_M2M_PFC
 ((
uöt32_t
)0x00010000)

	)

195 
	#DMA2D_M2M_BLEND
 ((
uöt32_t
)0x00020000)

	)

196 
	#DMA2D_R2M
 ((
uöt32_t
)0x00030000)

	)

198 
	#IS_DMA2D_MODE
(
MODE
Ë(((MODEË=
DMA2D_M2M
Ë|| ((MODEË=
DMA2D_M2M_PFC
Ë|| \

	)

199 ((
MODE
Ë=
DMA2D_M2M_BLEND
Ë|| ((MODEË=
DMA2D_R2M
))

209 
	#DMA2D_ARGB8888
 ((
uöt32_t
)0x00000000)

	)

210 
	#DMA2D_RGB888
 ((
uöt32_t
)0x00000001)

	)

211 
	#DMA2D_RGB565
 ((
uöt32_t
)0x00000002)

	)

212 
	#DMA2D_ARGB1555
 ((
uöt32_t
)0x00000003)

	)

213 
	#DMA2D_ARGB4444
 ((
uöt32_t
)0x00000004)

	)

215 
	#IS_DMA2D_CMODE
(
MODE_ARGB
Ë(((MODE_ARGBË=
DMA2D_ARGB8888
Ë|| ((MODE_ARGBË=
DMA2D_RGB888
Ë|| \

	)

216 ((
MODE_ARGB
Ë=
DMA2D_RGB565
Ë|| ((MODE_ARGBË=
DMA2D_ARGB1555
) || \

217 ((
MODE_ARGB
Ë=
DMA2D_ARGB4444
))

227 
	#DMA2D_Ouçut_Cﬁ‹
 ((
uöt32_t
)0x000000FF)

	)

229 
	#IS_DMA2D_OGREEN
(
OGREEN
Ë((OGREENË<
DMA2D_Ouçut_Cﬁ‹
)

	)

230 
	#IS_DMA2D_ORED
(
ORED
Ë((OREDË<
DMA2D_Ouçut_Cﬁ‹
)

	)

231 
	#IS_DMA2D_OBLUE
(
OBLUE
Ë((OBLUEË<
DMA2D_Ouçut_Cﬁ‹
)

	)

232 
	#IS_DMA2D_OALPHA
(
OALPHA
Ë((OALPHAË<
DMA2D_Ouçut_Cﬁ‹
)

	)

241 
	#DMA2D_OUTPUT_OFFSET
 ((
uöt32_t
)0x00003FFF)

	)

243 
	#IS_DMA2D_OUTPUT_OFFSET
(
OOFFSET
Ë((OOFFSETË<
DMA2D_OUTPUT_OFFSET
)

	)

254 
	#DMA2D_pixñ
 ((
uöt32_t
)0x00003FFF)

	)

255 
	#DMA2D_Löe
 ((
uöt32_t
)0x0000FFFF)

	)

257 
	#IS_DMA2D_LINE
(
LINE
Ë((LINEË<
DMA2D_Löe
)

	)

258 
	#IS_DMA2D_PIXEL
(
PIXEL
Ë((PIXELË<
DMA2D_pixñ
)

	)

268 
	#OFFSET
 ((
uöt32_t
)0x00003FFF)

	)

270 
	#IS_DMA2D_FGO
(
FGO
Ë((FGOË<
OFFSET
)

	)

272 
	#IS_DMA2D_BGO
(
BGO
Ë((BGOË<
OFFSET
)

	)

283 
	#CM_ARGB8888
 ((
uöt32_t
)0x00000000)

	)

284 
	#CM_RGB888
 ((
uöt32_t
)0x00000001)

	)

285 
	#CM_RGB565
 ((
uöt32_t
)0x00000002)

	)

286 
	#CM_ARGB1555
 ((
uöt32_t
)0x00000003)

	)

287 
	#CM_ARGB4444
 ((
uöt32_t
)0x00000004)

	)

288 
	#CM_L8
 ((
uöt32_t
)0x00000005)

	)

289 
	#CM_AL44
 ((
uöt32_t
)0x00000006)

	)

290 
	#CM_AL88
 ((
uöt32_t
)0x00000007)

	)

291 
	#CM_L4
 ((
uöt32_t
)0x00000008)

	)

292 
	#CM_A8
 ((
uöt32_t
)0x00000009)

	)

293 
	#CM_A4
 ((
uöt32_t
)0x0000000A)

	)

295 
	#IS_DMA2D_FGCM
(
FGCM
Ë(((FGCMË=
CM_ARGB8888
Ë|| ((FGCMË=
CM_RGB888
Ë|| \

	)

296 ((
FGCM
Ë=
CM_RGB565
Ë|| ((FGCMË=
CM_ARGB1555
) || \

297 ((
FGCM
Ë=
CM_ARGB4444
Ë|| ((FGCMË=
CM_L8
) || \

298 ((
FGCM
Ë=
CM_AL44
Ë|| ((FGCMË=
CM_AL88
) || \

299 ((
FGCM
Ë=
CM_L4
Ë|| ((FGCMË=
CM_A8
) || \

300 ((
FGCM
Ë=
CM_A4
))

302 
	#IS_DMA2D_BGCM
(
BGCM
Ë(((BGCMË=
CM_ARGB8888
Ë|| ((BGCMË=
CM_RGB888
Ë|| \

	)

303 ((
BGCM
Ë=
CM_RGB565
Ë|| ((BGCMË=
CM_ARGB1555
) || \

304 ((
BGCM
Ë=
CM_ARGB4444
Ë|| ((BGCMË=
CM_L8
) || \

305 ((
BGCM
Ë=
CM_AL44
Ë|| ((BGCMË=
CM_AL88
) || \

306 ((
BGCM
Ë=
CM_L4
Ë|| ((BGCMË=
CM_A8
) || \

307 ((
BGCM
Ë=
CM_A4
))

317 
	#CLUT_CM_ARGB8888
 ((
uöt32_t
)0x00000000)

	)

318 
	#CLUT_CM_RGB888
 ((
uöt32_t
)0x00000001)

	)

320 
	#IS_DMA2D_FG_CLUT_CM
(
FG_CLUT_CM
Ë(((FG_CLUT_CMË=
CLUT_CM_ARGB8888
Ë|| ((FG_CLUT_CMË=
CLUT_CM_RGB888
))

	)

322 
	#IS_DMA2D_BG_CLUT_CM
(
BG_CLUT_CM
Ë(((BG_CLUT_CMË=
CLUT_CM_ARGB8888
Ë|| ((BG_CLUT_CMË=
CLUT_CM_RGB888
))

	)

332 
	#COLOR_VALUE
 ((
uöt32_t
)0x000000FF)

	)

334 
	#IS_DMA2D_FG_CLUT_SIZE
(
FG_CLUT_SIZE
Ë((FG_CLUT_SIZEË<
COLOR_VALUE
)

	)

336 
	#IS_DMA2D_FG_ALPHA_VALUE
(
FG_ALPHA_VALUE
Ë((FG_ALPHA_VALUEË<
COLOR_VALUE
)

	)

337 
	#IS_DMA2D_FGC_BLUE
(
FGC_BLUE
Ë((FGC_BLUEË<
COLOR_VALUE
)

	)

338 
	#IS_DMA2D_FGC_GREEN
(
FGC_GREEN
Ë((FGC_GREENË<
COLOR_VALUE
)

	)

339 
	#IS_DMA2D_FGC_RED
(
FGC_RED
Ë((FGC_REDË<
COLOR_VALUE
)

	)

341 
	#IS_DMA2D_BG_CLUT_SIZE
(
BG_CLUT_SIZE
Ë((BG_CLUT_SIZEË<
COLOR_VALUE
)

	)

343 
	#IS_DMA2D_BG_ALPHA_VALUE
(
BG_ALPHA_VALUE
Ë((BG_ALPHA_VALUEË<
COLOR_VALUE
)

	)

344 
	#IS_DMA2D_BGC_BLUE
(
BGC_BLUE
Ë((BGC_BLUEË<
COLOR_VALUE
)

	)

345 
	#IS_DMA2D_BGC_GREEN
(
BGC_GREEN
Ë((BGC_GREENË<
COLOR_VALUE
)

	)

346 
	#IS_DMA2D_BGC_RED
(
BGC_RED
Ë((BGC_REDË<
COLOR_VALUE
)

	)

356 
	#NO_MODIF_ALPHA_VALUE
 ((
uöt32_t
)0x00000000)

	)

357 
	#REPLACE_ALPHA_VALUE
 ((
uöt32_t
)0x00000001)

	)

358 
	#COMBINE_ALPHA_VALUE
 ((
uöt32_t
)0x00000002)

	)

360 
	#IS_DMA2D_FG_ALPHA_MODE
(
FG_ALPHA_MODE
Ë(((FG_ALPHA_MODEË=
NO_MODIF_ALPHA_VALUE
Ë|| \

	)

361 ((
FG_ALPHA_MODE
Ë=
REPLACE_ALPHA_VALUE
) || \

362 ((
FG_ALPHA_MODE
Ë=
COMBINE_ALPHA_VALUE
))

364 
	#IS_DMA2D_BG_ALPHA_MODE
(
BG_ALPHA_MODE
Ë(((BG_ALPHA_MODEË=
NO_MODIF_ALPHA_VALUE
Ë|| \

	)

365 ((
BG_ALPHA_MODE
Ë=
REPLACE_ALPHA_VALUE
) || \

366 ((
BG_ALPHA_MODE
Ë=
COMBINE_ALPHA_VALUE
))

376 
	#DMA2D_IT_CE
 
DMA2D_CR_CEIE


	)

377 
	#DMA2D_IT_CTC
 
DMA2D_CR_CTCIE


	)

378 
	#DMA2D_IT_CAE
 
DMA2D_CR_CAEIE


	)

379 
	#DMA2D_IT_TW
 
DMA2D_CR_TWIE


	)

380 
	#DMA2D_IT_TC
 
DMA2D_CR_TCIE


	)

381 
	#DMA2D_IT_TE
 
DMA2D_CR_TEIE


	)

383 
	#IS_DMA2D_IT
(
IT
Ë(((ITË=
DMA2D_IT_CTC
Ë|| ((ITË=
DMA2D_IT_CAE
Ë|| \

	)

384 ((
IT
Ë=
DMA2D_IT_TW
Ë|| ((ITË=
DMA2D_IT_TC
) || \

385 ((
IT
Ë=
DMA2D_IT_TE
Ë|| ((ITË=
DMA2D_IT_CE
))

395 
	#DMA2D_FLAG_CE
 
DMA2D_ISR_CEIF


	)

396 
	#DMA2D_FLAG_CTC
 
DMA2D_ISR_CTCIF


	)

397 
	#DMA2D_FLAG_CAE
 
DMA2D_ISR_CAEIF


	)

398 
	#DMA2D_FLAG_TW
 
DMA2D_ISR_TWIF


	)

399 
	#DMA2D_FLAG_TC
 
DMA2D_ISR_TCIF


	)

400 
	#DMA2D_FLAG_TE
 
DMA2D_ISR_TEIF


	)

403 
	#IS_DMA2D_GET_FLAG
(
FLAG
Ë(((FLAGË=
DMA2D_FLAG_CTC
Ë|| ((FLAGË=
DMA2D_FLAG_CAE
Ë|| \

	)

404 ((
FLAG
Ë=
DMA2D_FLAG_TW
Ë|| ((FLAGË=
DMA2D_FLAG_TC
) || \

405 ((
FLAG
Ë=
DMA2D_FLAG_TE
Ë|| ((FLAGË=
DMA2D_FLAG_CE
))

416 
	#DEADTIME
 ((
uöt32_t
)0x000000FF)

	)

418 
	#IS_DMA2D_DEAD_TIME
(
DEAD_TIME
Ë((DEAD_TIMEË<
DEADTIME
)

	)

421 
	#LINE_WATERMARK
 
DMA2D_LWR_LW


	)

423 
	#IS_DMA2D_LöeW©îm¨k
(
LöeW©îm¨k
Ë((LöeW©îm¨kË<
LINE_WATERMARK
)

	)

437 
DMA2D_DeInô
();

440 
DMA2D_Inô
(
DMA2D_InôTy≥Def
* 
DMA2D_InôSåu˘
);

441 
DMA2D_Såu˘Inô
(
DMA2D_InôTy≥Def
* 
DMA2D_InôSåu˘
);

442 
DMA2D_SèπTøns„r
();

443 
DMA2D_Ab‹tTøns„r
();

444 
DMA2D_Su•íd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

445 
DMA2D_FGC⁄fig
(
DMA2D_FG_InôTy≥Def
* 
DMA2D_FG_InôSåu˘
);

446 
DMA2D_FG_Såu˘Inô
(
DMA2D_FG_InôTy≥Def
* 
DMA2D_FG_InôSåu˘
);

447 
DMA2D_BGC⁄fig
(
DMA2D_BG_InôTy≥Def
* 
DMA2D_BG_InôSåu˘
);

448 
DMA2D_BG_Såu˘Inô
(
DMA2D_BG_InôTy≥Def
* 
DMA2D_BG_InôSåu˘
);

449 
DMA2D_FGSèπ
(
Fun˘i⁄ÆSèã
 
NewSèã
);

450 
DMA2D_BGSèπ
(
Fun˘i⁄ÆSèã
 
NewSèã
);

451 
DMA2D_DódTimeC⁄fig
(
uöt32_t
 
DMA2D_DódTime
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

452 
DMA2D_LöeW©îm¨kC⁄fig
(
uöt32_t
 
DMA2D_LW©îm¨kC⁄fig
);

455 
DMA2D_ITC⁄fig
(
uöt32_t
 
DMA2D_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

456 
FœgSètus
 
DMA2D_GëFœgSètus
(
uöt32_t
 
DMA2D_FLAG
);

457 
DMA2D_CÀ¨Fœg
(
uöt32_t
 
DMA2D_FLAG
);

458 
ITSètus
 
DMA2D_GëITSètus
(
uöt32_t
 
DMA2D_IT
);

459 
DMA2D_CÀ¨ITPídögBô
(
uöt32_t
 
DMA2D_IT
);

461 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_exti.h

30 #i‚de‡
__STM32F4xx_EXTI_H


31 
	#__STM32F4xx_EXTI_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
EXTI_Mode_I¡îru±
 = 0x00,

57 
EXTI_Mode_Evít
 = 0x04

58 }
	tEXTIMode_Ty≥Def
;

60 
	#IS_EXTI_MODE
(
MODE
Ë(((MODEË=
EXTI_Mode_I¡îru±
Ë|| ((MODEË=
EXTI_Mode_Evít
))

	)

68 
EXTI_Triggî_Risög
 = 0x08,

69 
EXTI_Triggî_FÆlög
 = 0x0C,

70 
EXTI_Triggî_Risög_FÆlög
 = 0x10

71 }
	tEXTITriggî_Ty≥Def
;

73 
	#IS_EXTI_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
EXTI_Triggî_Risög
Ë|| \

	)

74 ((
TRIGGER
Ë=
EXTI_Triggî_FÆlög
) || \

75 ((
TRIGGER
Ë=
EXTI_Triggî_Risög_FÆlög
))

82 
uöt32_t
 
EXTI_Löe
;

85 
EXTIMode_Ty≥Def
 
EXTI_Mode
;

88 
EXTITriggî_Ty≥Def
 
EXTI_Triggî
;

91 
Fun˘i⁄ÆSèã
 
EXTI_LöeCmd
;

93 }
	tEXTI_InôTy≥Def
;

105 
	#EXTI_Löe0
 ((
uöt32_t
)0x00001Ë

	)

106 
	#EXTI_Löe1
 ((
uöt32_t
)0x00002Ë

	)

107 
	#EXTI_Löe2
 ((
uöt32_t
)0x00004Ë

	)

108 
	#EXTI_Löe3
 ((
uöt32_t
)0x00008Ë

	)

109 
	#EXTI_Löe4
 ((
uöt32_t
)0x00010Ë

	)

110 
	#EXTI_Löe5
 ((
uöt32_t
)0x00020Ë

	)

111 
	#EXTI_Löe6
 ((
uöt32_t
)0x00040Ë

	)

112 
	#EXTI_Löe7
 ((
uöt32_t
)0x00080Ë

	)

113 
	#EXTI_Löe8
 ((
uöt32_t
)0x00100Ë

	)

114 
	#EXTI_Löe9
 ((
uöt32_t
)0x00200Ë

	)

115 
	#EXTI_Löe10
 ((
uöt32_t
)0x00400Ë

	)

116 
	#EXTI_Löe11
 ((
uöt32_t
)0x00800Ë

	)

117 
	#EXTI_Löe12
 ((
uöt32_t
)0x01000Ë

	)

118 
	#EXTI_Löe13
 ((
uöt32_t
)0x02000Ë

	)

119 
	#EXTI_Löe14
 ((
uöt32_t
)0x04000Ë

	)

120 
	#EXTI_Löe15
 ((
uöt32_t
)0x08000Ë

	)

121 
	#EXTI_Löe16
 ((
uöt32_t
)0x10000Ë

	)

122 
	#EXTI_Löe17
 ((
uöt32_t
)0x20000Ë

	)

123 
	#EXTI_Löe18
 ((
uöt32_t
)0x40000Ë

	)

124 
	#EXTI_Löe19
 ((
uöt32_t
)0x80000Ë

	)

125 
	#EXTI_Löe20
 ((
uöt32_t
)0x00100000Ë

	)

126 
	#EXTI_Löe21
 ((
uöt32_t
)0x00200000Ë

	)

127 
	#EXTI_Löe22
 ((
uöt32_t
)0x00400000Ë

	)

129 
	#IS_EXTI_LINE
(
LINE
Ë((((LINEË& (
uöt32_t
)0xFF800000Ë=0x00Ë&& ((LINEË!(
uöt16_t
)0x00))

	)

131 
	#IS_GET_EXTI_LINE
(
LINE
Ë(((LINEË=
EXTI_Löe0
Ë|| ((LINEË=
EXTI_Löe1
Ë|| \

	)

132 ((
LINE
Ë=
EXTI_Löe2
Ë|| ((LINEË=
EXTI_Löe3
) || \

133 ((
LINE
Ë=
EXTI_Löe4
Ë|| ((LINEË=
EXTI_Löe5
) || \

134 ((
LINE
Ë=
EXTI_Löe6
Ë|| ((LINEË=
EXTI_Löe7
) || \

135 ((
LINE
Ë=
EXTI_Löe8
Ë|| ((LINEË=
EXTI_Löe9
) || \

136 ((
LINE
Ë=
EXTI_Löe10
Ë|| ((LINEË=
EXTI_Löe11
) || \

137 ((
LINE
Ë=
EXTI_Löe12
Ë|| ((LINEË=
EXTI_Löe13
) || \

138 ((
LINE
Ë=
EXTI_Löe14
Ë|| ((LINEË=
EXTI_Löe15
) || \

139 ((
LINE
Ë=
EXTI_Löe16
Ë|| ((LINEË=
EXTI_Löe17
) || \

140 ((
LINE
Ë=
EXTI_Löe18
Ë|| ((LINEË=
EXTI_Löe19
) || \

141 ((
LINE
Ë=
EXTI_Löe20
Ë|| ((LINEË=
EXTI_Löe21
) ||\

142 ((
LINE
Ë=
EXTI_Löe22
))

156 
EXTI_DeInô
();

159 
EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

160 
EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

161 
EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
);

164 
FœgSètus
 
EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
);

165 
EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
);

166 
ITSètus
 
EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
);

167 
EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
);

169 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_flash.h

30 #i‚de‡
__STM32F4xx_FLASH_H


31 
	#__STM32F4xx_FLASH_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

54 
FLASH_BUSY
 = 1,

55 
FLASH_ERROR_RD
,

56 
FLASH_ERROR_PGS
,

57 
FLASH_ERROR_PGP
,

58 
FLASH_ERROR_PGA
,

59 
FLASH_ERROR_WRP
,

60 
FLASH_ERROR_PROGRAM
,

61 
FLASH_ERROR_OPERATION
,

62 
FLASH_COMPLETE


63 }
	tFLASH_Sètus
;

74 
	#FLASH_L©ícy_0
 ((
uöt8_t
)0x0000Ë

	)

75 
	#FLASH_L©ícy_1
 ((
uöt8_t
)0x0001Ë

	)

76 
	#FLASH_L©ícy_2
 ((
uöt8_t
)0x0002Ë

	)

77 
	#FLASH_L©ícy_3
 ((
uöt8_t
)0x0003Ë

	)

78 
	#FLASH_L©ícy_4
 ((
uöt8_t
)0x0004Ë

	)

79 
	#FLASH_L©ícy_5
 ((
uöt8_t
)0x0005Ë

	)

80 
	#FLASH_L©ícy_6
 ((
uöt8_t
)0x0006Ë

	)

81 
	#FLASH_L©ícy_7
 ((
uöt8_t
)0x0007Ë

	)

82 
	#FLASH_L©ícy_8
 ((
uöt8_t
)0x0008Ë

	)

83 
	#FLASH_L©ícy_9
 ((
uöt8_t
)0x0009Ë

	)

84 
	#FLASH_L©ícy_10
 ((
uöt8_t
)0x000AË

	)

85 
	#FLASH_L©ícy_11
 ((
uöt8_t
)0x000BË

	)

86 
	#FLASH_L©ícy_12
 ((
uöt8_t
)0x000CË

	)

87 
	#FLASH_L©ícy_13
 ((
uöt8_t
)0x000DË

	)

88 
	#FLASH_L©ícy_14
 ((
uöt8_t
)0x000EË

	)

89 
	#FLASH_L©ícy_15
 ((
uöt8_t
)0x000FË

	)

92 
	#IS_FLASH_LATENCY
(
LATENCY
Ë(((LATENCYË=
FLASH_L©ícy_0
Ë|| \

	)

93 ((
LATENCY
Ë=
FLASH_L©ícy_1
) || \

94 ((
LATENCY
Ë=
FLASH_L©ícy_2
) || \

95 ((
LATENCY
Ë=
FLASH_L©ícy_3
) || \

96 ((
LATENCY
Ë=
FLASH_L©ícy_4
) || \

97 ((
LATENCY
Ë=
FLASH_L©ícy_5
) || \

98 ((
LATENCY
Ë=
FLASH_L©ícy_6
) || \

99 ((
LATENCY
Ë=
FLASH_L©ícy_7
) || \

100 ((
LATENCY
Ë=
FLASH_L©ícy_8
) || \

101 ((
LATENCY
Ë=
FLASH_L©ícy_9
) || \

102 ((
LATENCY
Ë=
FLASH_L©ícy_10
) || \

103 ((
LATENCY
Ë=
FLASH_L©ícy_11
) || \

104 ((
LATENCY
Ë=
FLASH_L©ícy_12
) || \

105 ((
LATENCY
Ë=
FLASH_L©ícy_13
) || \

106 ((
LATENCY
Ë=
FLASH_L©ícy_14
) || \

107 ((
LATENCY
Ë=
FLASH_L©ícy_15
))

115 
	#VﬁègeR™ge_1
 ((
uöt8_t
)0x00Ë

	)

116 
	#VﬁègeR™ge_2
 ((
uöt8_t
)0x01Ë

	)

117 
	#VﬁègeR™ge_3
 ((
uöt8_t
)0x02Ë

	)

118 
	#VﬁègeR™ge_4
 ((
uöt8_t
)0x03Ë

	)

120 
	#IS_VOLTAGERANGE
(
RANGE
)(((RANGEË=
VﬁègeR™ge_1
Ë|| \

	)

121 ((
RANGE
Ë=
VﬁègeR™ge_2
) || \

122 ((
RANGE
Ë=
VﬁègeR™ge_3
) || \

123 ((
RANGE
Ë=
VﬁègeR™ge_4
))

131 
	#FLASH_Se˘‹_0
 ((
uöt16_t
)0x0000Ë

	)

132 
	#FLASH_Se˘‹_1
 ((
uöt16_t
)0x0008Ë

	)

133 
	#FLASH_Se˘‹_2
 ((
uöt16_t
)0x0010Ë

	)

134 
	#FLASH_Se˘‹_3
 ((
uöt16_t
)0x0018Ë

	)

135 
	#FLASH_Se˘‹_4
 ((
uöt16_t
)0x0020Ë

	)

136 
	#FLASH_Se˘‹_5
 ((
uöt16_t
)0x0028Ë

	)

137 
	#FLASH_Se˘‹_6
 ((
uöt16_t
)0x0030Ë

	)

138 
	#FLASH_Se˘‹_7
 ((
uöt16_t
)0x0038Ë

	)

139 
	#FLASH_Se˘‹_8
 ((
uöt16_t
)0x0040Ë

	)

140 
	#FLASH_Se˘‹_9
 ((
uöt16_t
)0x0048Ë

	)

141 
	#FLASH_Se˘‹_10
 ((
uöt16_t
)0x0050Ë

	)

142 
	#FLASH_Se˘‹_11
 ((
uöt16_t
)0x0058Ë

	)

143 
	#FLASH_Se˘‹_12
 ((
uöt16_t
)0x0080Ë

	)

144 
	#FLASH_Se˘‹_13
 ((
uöt16_t
)0x0088Ë

	)

145 
	#FLASH_Se˘‹_14
 ((
uöt16_t
)0x0090Ë

	)

146 
	#FLASH_Se˘‹_15
 ((
uöt16_t
)0x0098Ë

	)

147 
	#FLASH_Se˘‹_16
 ((
uöt16_t
)0x00A0Ë

	)

148 
	#FLASH_Se˘‹_17
 ((
uöt16_t
)0x00A8Ë

	)

149 
	#FLASH_Se˘‹_18
 ((
uöt16_t
)0x00B0Ë

	)

150 
	#FLASH_Se˘‹_19
 ((
uöt16_t
)0x00B8Ë

	)

151 
	#FLASH_Se˘‹_20
 ((
uöt16_t
)0x00C0Ë

	)

152 
	#FLASH_Se˘‹_21
 ((
uöt16_t
)0x00C8Ë

	)

153 
	#FLASH_Se˘‹_22
 ((
uöt16_t
)0x00D0Ë

	)

154 
	#FLASH_Se˘‹_23
 ((
uöt16_t
)0x00D8Ë

	)

156 
	#IS_FLASH_SECTOR
(
SECTOR
Ë(((SECTORË=
FLASH_Se˘‹_0
Ë|| ((SECTORË=
FLASH_Se˘‹_1
Ë||\

	)

157 ((
SECTOR
Ë=
FLASH_Se˘‹_2
Ë|| ((SECTORË=
FLASH_Se˘‹_3
) ||\

158 ((
SECTOR
Ë=
FLASH_Se˘‹_4
Ë|| ((SECTORË=
FLASH_Se˘‹_5
) ||\

159 ((
SECTOR
Ë=
FLASH_Se˘‹_6
Ë|| ((SECTORË=
FLASH_Se˘‹_7
) ||\

160 ((
SECTOR
Ë=
FLASH_Se˘‹_8
Ë|| ((SECTORË=
FLASH_Se˘‹_9
) ||\

161 ((
SECTOR
Ë=
FLASH_Se˘‹_10
Ë|| ((SECTORË=
FLASH_Se˘‹_11
) ||\

162 ((
SECTOR
Ë=
FLASH_Se˘‹_12
Ë|| ((SECTORË=
FLASH_Se˘‹_13
) ||\

163 ((
SECTOR
Ë=
FLASH_Se˘‹_14
Ë|| ((SECTORË=
FLASH_Se˘‹_15
) ||\

164 ((
SECTOR
Ë=
FLASH_Se˘‹_16
Ë|| ((SECTORË=
FLASH_Se˘‹_17
) ||\

165 ((
SECTOR
Ë=
FLASH_Se˘‹_18
Ë|| ((SECTORË=
FLASH_Se˘‹_19
) ||\

166 ((
SECTOR
Ë=
FLASH_Se˘‹_20
Ë|| ((SECTORË=
FLASH_Se˘‹_21
) ||\

167 ((
SECTOR
Ë=
FLASH_Se˘‹_22
Ë|| ((SECTORË=
FLASH_Se˘‹_23
))

169 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

170 
	#IS_FLASH_ADDRESS
(
ADDRESS
Ë((((ADDRESSË>0x08000000Ë&& ((ADDRESSË<0x081FFFFF)Ë||\

	)

171 (((
ADDRESS
) >= 0x1FFF7800) && ((ADDRESS) <= 0x1FFF7A0F)))

174 #i‡
deföed
 (
STM32F40_41xxx
)

175 
	#IS_FLASH_ADDRESS
(
ADDRESS
Ë((((ADDRESSË>0x08000000Ë&& ((ADDRESSË<0x080FFFFF)Ë||\

	)

176 (((
ADDRESS
) >= 0x1FFF7800) && ((ADDRESS) <= 0x1FFF7A0F)))

179 #i‡
deföed
 (
STM32F401xx
)

180 
	#IS_FLASH_ADDRESS
(
ADDRESS
Ë((((ADDRESSË>0x08000000Ë&& ((ADDRESSË<0x0803FFFF)Ë||\

	)

181 (((
ADDRESS
) >= 0x1FFF7800) && ((ADDRESS) <= 0x1FFF7A0F)))

184 #i‡
deföed
 (
STM32F411xE
Ë|| deföed (
STM32F446xx
)

185 
	#IS_FLASH_ADDRESS
(
ADDRESS
Ë((((ADDRESSË>0x08000000Ë&& ((ADDRESSË<0x0807FFFF)Ë||\

	)

186 (((
ADDRESS
) >= 0x1FFF7800) && ((ADDRESS) <= 0x1FFF7A0F)))

196 
	#OB_WRP_Se˘‹_0
 ((
uöt32_t
)0x00000001Ë

	)

197 
	#OB_WRP_Se˘‹_1
 ((
uöt32_t
)0x00000002Ë

	)

198 
	#OB_WRP_Se˘‹_2
 ((
uöt32_t
)0x00000004Ë

	)

199 
	#OB_WRP_Se˘‹_3
 ((
uöt32_t
)0x00000008Ë

	)

200 
	#OB_WRP_Se˘‹_4
 ((
uöt32_t
)0x00000010Ë

	)

201 
	#OB_WRP_Se˘‹_5
 ((
uöt32_t
)0x00000020Ë

	)

202 
	#OB_WRP_Se˘‹_6
 ((
uöt32_t
)0x00000040Ë

	)

203 
	#OB_WRP_Se˘‹_7
 ((
uöt32_t
)0x00000080Ë

	)

204 
	#OB_WRP_Se˘‹_8
 ((
uöt32_t
)0x00000100Ë

	)

205 
	#OB_WRP_Se˘‹_9
 ((
uöt32_t
)0x00000200Ë

	)

206 
	#OB_WRP_Se˘‹_10
 ((
uöt32_t
)0x00000400Ë

	)

207 
	#OB_WRP_Se˘‹_11
 ((
uöt32_t
)0x00000800Ë

	)

208 
	#OB_WRP_Se˘‹_12
 ((
uöt32_t
)0x00000001Ë

	)

209 
	#OB_WRP_Se˘‹_13
 ((
uöt32_t
)0x00000002Ë

	)

210 
	#OB_WRP_Se˘‹_14
 ((
uöt32_t
)0x00000004Ë

	)

211 
	#OB_WRP_Se˘‹_15
 ((
uöt32_t
)0x00000008Ë

	)

212 
	#OB_WRP_Se˘‹_16
 ((
uöt32_t
)0x00000010Ë

	)

213 
	#OB_WRP_Se˘‹_17
 ((
uöt32_t
)0x00000020Ë

	)

214 
	#OB_WRP_Se˘‹_18
 ((
uöt32_t
)0x00000040Ë

	)

215 
	#OB_WRP_Se˘‹_19
 ((
uöt32_t
)0x00000080Ë

	)

216 
	#OB_WRP_Se˘‹_20
 ((
uöt32_t
)0x00000100Ë

	)

217 
	#OB_WRP_Se˘‹_21
 ((
uöt32_t
)0x00000200Ë

	)

218 
	#OB_WRP_Se˘‹_22
 ((
uöt32_t
)0x00000400Ë

	)

219 
	#OB_WRP_Se˘‹_23
 ((
uöt32_t
)0x00000800Ë

	)

220 
	#OB_WRP_Se˘‹_AŒ
 ((
uöt32_t
)0x00000FFFË

	)

222 
	#IS_OB_WRP
(
SECTOR
)((((SECTORË& (
uöt32_t
)0xFFFFF000Ë=0x00000000Ë&& ((SECTORË!0x00000000))

	)

230 
	#OB_PcROP_DißbÀ
 ((
uöt8_t
)0x00Ë

	)

231 
	#OB_PcROP_E«bÀ
 ((
uöt8_t
)0x80Ë

	)

232 
	#IS_OB_PCROP_SELECT
(
PCROP
Ë(((PCROPË=
OB_PcROP_DißbÀ
Ë|| ((PCROPË=
OB_PcROP_E«bÀ
))

	)

240 
	#OB_PCROP_Se˘‹_0
 ((
uöt32_t
)0x00000001Ë

	)

241 
	#OB_PCROP_Se˘‹_1
 ((
uöt32_t
)0x00000002Ë

	)

242 
	#OB_PCROP_Se˘‹_2
 ((
uöt32_t
)0x00000004Ë

	)

243 
	#OB_PCROP_Se˘‹_3
 ((
uöt32_t
)0x00000008Ë

	)

244 
	#OB_PCROP_Se˘‹_4
 ((
uöt32_t
)0x00000010Ë

	)

245 
	#OB_PCROP_Se˘‹_5
 ((
uöt32_t
)0x00000020Ë

	)

246 
	#OB_PCROP_Se˘‹_6
 ((
uöt32_t
)0x00000040Ë

	)

247 
	#OB_PCROP_Se˘‹_7
 ((
uöt32_t
)0x00000080Ë

	)

248 
	#OB_PCROP_Se˘‹_8
 ((
uöt32_t
)0x00000100Ë

	)

249 
	#OB_PCROP_Se˘‹_9
 ((
uöt32_t
)0x00000200Ë

	)

250 
	#OB_PCROP_Se˘‹_10
 ((
uöt32_t
)0x00000400Ë

	)

251 
	#OB_PCROP_Se˘‹_11
 ((
uöt32_t
)0x00000800Ë

	)

252 
	#OB_PCROP_Se˘‹_12
 ((
uöt32_t
)0x00000001Ë

	)

253 
	#OB_PCROP_Se˘‹_13
 ((
uöt32_t
)0x00000002Ë

	)

254 
	#OB_PCROP_Se˘‹_14
 ((
uöt32_t
)0x00000004Ë

	)

255 
	#OB_PCROP_Se˘‹_15
 ((
uöt32_t
)0x00000008Ë

	)

256 
	#OB_PCROP_Se˘‹_16
 ((
uöt32_t
)0x00000010Ë

	)

257 
	#OB_PCROP_Se˘‹_17
 ((
uöt32_t
)0x00000020Ë

	)

258 
	#OB_PCROP_Se˘‹_18
 ((
uöt32_t
)0x00000040Ë

	)

259 
	#OB_PCROP_Se˘‹_19
 ((
uöt32_t
)0x00000080Ë

	)

260 
	#OB_PCROP_Se˘‹_20
 ((
uöt32_t
)0x00000100Ë

	)

261 
	#OB_PCROP_Se˘‹_21
 ((
uöt32_t
)0x00000200Ë

	)

262 
	#OB_PCROP_Se˘‹_22
 ((
uöt32_t
)0x00000400Ë

	)

263 
	#OB_PCROP_Se˘‹_23
 ((
uöt32_t
)0x00000800Ë

	)

264 
	#OB_PCROP_Se˘‹_AŒ
 ((
uöt32_t
)0x00000FFFË

	)

266 
	#IS_OB_PCROP
(
SECTOR
)((((SECTORË& (
uöt32_t
)0xFFFFF000Ë=0x00000000Ë&& ((SECTORË!0x00000000))

	)

274 
	#OB_RDP_Levñ_0
 ((
uöt8_t
)0xAA)

	)

275 
	#OB_RDP_Levñ_1
 ((
uöt8_t
)0x55)

	)

278 
	#IS_OB_RDP
(
LEVEL
Ë(((LEVELË=
OB_RDP_Levñ_0
)||\

	)

279 ((
LEVEL
Ë=
OB_RDP_Levñ_1
))

288 
	#OB_IWDG_SW
 ((
uöt8_t
)0x20Ë

	)

289 
	#OB_IWDG_HW
 ((
uöt8_t
)0x00Ë

	)

290 
	#IS_OB_IWDG_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_IWDG_SW
Ë|| ((SOURCEË=
OB_IWDG_HW
))

	)

298 
	#OB_STOP_NoRST
 ((
uöt8_t
)0x40Ë

	)

299 
	#OB_STOP_RST
 ((
uöt8_t
)0x00Ë

	)

300 
	#IS_OB_STOP_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STOP_NoRST
Ë|| ((SOURCEË=
OB_STOP_RST
))

	)

309 
	#OB_STDBY_NoRST
 ((
uöt8_t
)0x80Ë

	)

310 
	#OB_STDBY_RST
 ((
uöt8_t
)0x00Ë

	)

311 
	#IS_OB_STDBY_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STDBY_NoRST
Ë|| ((SOURCEË=
OB_STDBY_RST
))

	)

319 
	#OB_BOR_LEVEL3
 ((
uöt8_t
)0x00Ë

	)

320 
	#OB_BOR_LEVEL2
 ((
uöt8_t
)0x04Ë

	)

321 
	#OB_BOR_LEVEL1
 ((
uöt8_t
)0x08Ë

	)

322 
	#OB_BOR_OFF
 ((
uöt8_t
)0x0CË

	)

323 
	#IS_OB_BOR
(
LEVEL
Ë(((LEVELË=
OB_BOR_LEVEL1
Ë|| ((LEVELË=
OB_BOR_LEVEL2
Ë||\

	)

324 ((
LEVEL
Ë=
OB_BOR_LEVEL3
Ë|| ((LEVELË=
OB_BOR_OFF
))

332 
	#OB_DuÆ_BoŸE«bÀd
 ((
uöt8_t
)0x10Ë

	)

333 
	#OB_DuÆ_BoŸDißbÀd
 ((
uöt8_t
)0x00Ë

	)

334 
	#IS_OB_BOOT
(
BOOT
Ë(((BOOTË=
OB_DuÆ_BoŸE«bÀd
Ë|| ((BOOTË=
OB_DuÆ_BoŸDißbÀd
))

	)

342 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x01000000Ë

	)

343 
	#FLASH_IT_ERR
 ((
uöt32_t
)0x02000000Ë

	)

344 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFCFFFFFFË=0x00000000Ë&& ((ITË!0x00000000))

	)

352 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000001Ë

	)

353 
	#FLASH_FLAG_OPERR
 ((
uöt32_t
)0x00000002Ë

	)

354 
	#FLASH_FLAG_WRPERR
 ((
uöt32_t
)0x00000010Ë

	)

355 
	#FLASH_FLAG_PGAERR
 ((
uöt32_t
)0x00000020Ë

	)

356 
	#FLASH_FLAG_PGPERR
 ((
uöt32_t
)0x00000040Ë

	)

357 
	#FLASH_FLAG_PGSERR
 ((
uöt32_t
)0x00000080Ë

	)

358 
	#FLASH_FLAG_RDERR
 ((
uöt32_t
)0x00000100Ë

	)

359 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00010000Ë

	)

360 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFE0CË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

361 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_EOP
Ë|| ((FLAGË=
FLASH_FLAG_OPERR
Ë|| \

	)

362 ((
FLAG
Ë=
FLASH_FLAG_WRPERR
Ë|| ((FLAGË=
FLASH_FLAG_PGAERR
) || \

363 ((
FLAG
Ë=
FLASH_FLAG_PGPERR
Ë|| ((FLAGË=
FLASH_FLAG_PGSERR
) || \

364 ((
FLAG
Ë=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_RDERR
))

372 
	#FLASH_PSIZE_BYTE
 ((
uöt32_t
)0x00000000)

	)

373 
	#FLASH_PSIZE_HALF_WORD
 ((
uöt32_t
)0x00000100)

	)

374 
	#FLASH_PSIZE_WORD
 ((
uöt32_t
)0x00000200)

	)

375 
	#FLASH_PSIZE_DOUBLE_WORD
 ((
uöt32_t
)0x00000300)

	)

376 
	#CR_PSIZE_MASK
 ((
uöt32_t
)0xFFFFFCFF)

	)

384 
	#RDP_KEY
 ((
uöt16_t
)0x00A5)

	)

385 
	#FLASH_KEY1
 ((
uöt32_t
)0x45670123)

	)

386 
	#FLASH_KEY2
 ((
uöt32_t
)0xCDEF89AB)

	)

387 
	#FLASH_OPT_KEY1
 ((
uöt32_t
)0x08192A3B)

	)

388 
	#FLASH_OPT_KEY2
 ((
uöt32_t
)0x4C5D6E7F)

	)

396 
	#ACR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C00)

	)

400 
	#OPTCR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C14)

	)

404 
	#OPTCR_BYTE1_ADDRESS
 ((
uöt32_t
)0x40023C15)

	)

408 
	#OPTCR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023C16)

	)

412 
	#OPTCR_BYTE3_ADDRESS
 ((
uöt32_t
)0x40023C17)

	)

417 
	#OPTCR1_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023C1A)

	)

427 
FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
);

428 
FLASH_Pª„tchBuf„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

429 
FLASH_In°ru˘i⁄CacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

430 
FLASH_D©aCacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

431 
FLASH_In°ru˘i⁄CacheRe£t
();

432 
FLASH_D©aCacheRe£t
();

435 
FLASH_U∆ock
();

436 
FLASH_Lock
();

437 
FLASH_Sètus
 
FLASH_Eø£Se˘‹
(
uöt32_t
 
FLASH_Se˘‹
, 
uöt8_t
 
VﬁègeR™ge
);

438 
FLASH_Sètus
 
FLASH_Eø£AŒSe˘‹s
(
uöt8_t
 
VﬁègeR™ge
);

439 
FLASH_Sètus
 
FLASH_Eø£AŒB™k1Se˘‹s
(
uöt8_t
 
VﬁègeR™ge
);

440 
FLASH_Sètus
 
FLASH_Eø£AŒB™k2Se˘‹s
(
uöt8_t
 
VﬁègeR™ge
);

441 
FLASH_Sètus
 
FLASH_ProgømDoubÀW‹d
(
uöt32_t
 
Addªss
, 
uöt64_t
 
D©a
);

442 
FLASH_Sètus
 
FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
);

443 
FLASH_Sètus
 
FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

444 
FLASH_Sètus
 
FLASH_ProgømByã
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

447 
FLASH_OB_U∆ock
();

448 
FLASH_OB_Lock
();

449 
FLASH_OB_WRPC⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

450 
FLASH_OB_WRP1C⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

451 
FLASH_OB_PCROPSñe˘i⁄C⁄fig
(
uöt8_t
 
OB_PcROP
);

452 
FLASH_OB_PCROPC⁄fig
(
uöt32_t
 
OB_PCROP
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

453 
FLASH_OB_PCROP1C⁄fig
(
uöt32_t
 
OB_PCROP
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

454 
FLASH_OB_RDPC⁄fig
(
uöt8_t
 
OB_RDP
);

455 
FLASH_OB_U£rC⁄fig
(
uöt8_t
 
OB_IWDG
, uöt8_à
OB_STOP
, uöt8_à
OB_STDBY
);

456 
FLASH_OB_BORC⁄fig
(
uöt8_t
 
OB_BOR
);

457 
FLASH_OB_BoŸC⁄fig
(
uöt8_t
 
OB_BOOT
);

458 
FLASH_Sètus
 
FLASH_OB_Launch
();

459 
uöt8_t
 
FLASH_OB_GëU£r
();

460 
uöt16_t
 
FLASH_OB_GëWRP
();

461 
uöt16_t
 
FLASH_OB_GëWRP1
();

462 
uöt16_t
 
FLASH_OB_GëPCROP
();

463 
uöt16_t
 
FLASH_OB_GëPCROP1
();

464 
FœgSètus
 
FLASH_OB_GëRDP
();

465 
uöt8_t
 
FLASH_OB_GëBOR
();

468 
FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

469 
FœgSètus
 
FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
);

470 
FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
);

471 
FLASH_Sètus
 
FLASH_GëSètus
();

472 
FLASH_Sètus
 
FLASH_WaôF‹La°O≥øti⁄
();

474 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_flash_ramfunc.h

30 #i‚de‡
__STM32F4xx_FLASH_RAMFUNC_H


31 
	#__STM32F4xx_FLASH_RAMFUNC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

53 #i‡
deföed
 ( 
__CC_ARM
 )

63 
	#__RAM_FUNC
 

	)

65 #ñi‡
deföed
 ( 
__ICCARM__
 )

70 
	#__RAM_FUNC
 
__ømfunc
 

	)

72 #ñi‡
deföed
 ( 
__GNUC__
 )

78 
	#__RAM_FUNC
 
	`__©åibuã__
((
	`£˘i⁄
(".RamFunc")))

	)

84 
__RAM_FUNC
 
FLASH_FœshI¡îÁ˚Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

85 
__RAM_FUNC
 
FLASH_FœshSÀïModeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

88 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_fmc.h

30 #i‚de‡
__STM32F4xx_FMC_H


31 
	#__STM32F4xx_FMC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

55 
uöt32_t
 
FMC_AddªssSëupTime
;

60 
uöt32_t
 
FMC_AddªssHﬁdTime
;

65 
uöt32_t
 
FMC_D©aSëupTime
;

70 
uöt32_t
 
FMC_BusTu∫AroundDuøti⁄
;

75 
uöt32_t
 
FMC_CLKDivisi⁄
;

79 
uöt32_t
 
FMC_D©aL©ícy
;

87 
uöt32_t
 
FMC_Ac˚ssMode
;

89 }
	tFMC_NORSRAMTimögInôTy≥Def
;

96 
uöt32_t
 
FMC_B™k
;

99 
uöt32_t
 
FMC_D©aAddªssMux
;

103 
uöt32_t
 
FMC_Mem‹yTy≥
;

107 
uöt32_t
 
FMC_Mem‹yD©aWidth
;

110 
uöt32_t
 
FMC_Bur°Ac˚ssMode
;

114 
uöt32_t
 
FMC_WaôSig«lPﬁ¨ôy
;

118 
uöt32_t
 
FMC_WøpMode
;

122 
uöt32_t
 
FMC_WaôSig«lA˘ive
;

127 
uöt32_t
 
FMC_WrôeO≥øti⁄
;

130 
uöt32_t
 
FMC_WaôSig«l
;

134 
uöt32_t
 
FMC_ExãndedMode
;

137 
uöt32_t
 
FMC_Asynchr⁄ousWaô
;

141 
uöt32_t
 
FMC_WrôeBur°
;

144 
uöt32_t
 
FMC_C⁄töousClock
;

150 
FMC_NORSRAMTimögInôTy≥Def
* 
FMC_RódWrôeTimögSåu˘
;

152 
FMC_NORSRAMTimögInôTy≥Def
* 
FMC_WrôeTimögSåu˘
;

153 }
	tFMC_NORSRAMInôTy≥Def
;

160 
uöt32_t
 
FMC_SëupTime
;

166 
uöt32_t
 
FMC_WaôSëupTime
;

172 
uöt32_t
 
FMC_HﬁdSëupTime
;

179 
uöt32_t
 
FMC_HiZSëupTime
;

184 }
	tFMC_NAND_PCCARDTimögInôTy≥Def
;

191 
uöt32_t
 
FMC_B™k
;

194 
uöt32_t
 
FMC_Waô„©uª
;

197 
uöt32_t
 
FMC_Mem‹yD©aWidth
;

200 
uöt32_t
 
FMC_ECC
;

203 
uöt32_t
 
FMC_ECCPageSize
;

206 
uöt32_t
 
FMC_TCLRSëupTime
;

210 
uöt32_t
 
FMC_TARSëupTime
;

214 
FMC_NAND_PCCARDTimögInôTy≥Def
* 
FMC_Comm⁄S∑˚TimögSåu˘
;

216 
FMC_NAND_PCCARDTimögInôTy≥Def
* 
FMC_AâribuãS∑˚TimögSåu˘
;

217 }
	tFMC_NANDInôTy≥Def
;

225 
uöt32_t
 
FMC_Waô„©uª
;

228 
uöt32_t
 
FMC_TCLRSëupTime
;

232 
uöt32_t
 
FMC_TARSëupTime
;

237 
FMC_NAND_PCCARDTimögInôTy≥Def
* 
FMC_Comm⁄S∑˚TimögSåu˘
;

239 
FMC_NAND_PCCARDTimögInôTy≥Def
* 
FMC_AâribuãS∑˚TimögSåu˘
;

241 
FMC_NAND_PCCARDTimögInôTy≥Def
* 
FMC_IOS∑˚TimögSåu˘
;

242 }
	tFMC_PCCARDInôTy≥Def
;

250 
uöt32_t
 
FMC_LﬂdToA˘iveDñay
;

254 
uöt32_t
 
FMC_ExôSñfRe‰eshDñay
;

258 
uöt32_t
 
FMC_SñfRe‰eshTime
;

262 
uöt32_t
 
FMC_RowCy˛eDñay
;

267 
uöt32_t
 
FMC_WrôeRecovîyTime
;

270 
uöt32_t
 
FMC_RPDñay
;

274 
uöt32_t
 
FMC_RCDDñay
;

278 }
	tFMC_SDRAMTimögInôTy≥Def
;

287 
uöt32_t
 
FMC_Comm™dMode
;

290 
uöt32_t
 
FMC_Comm™dT¨gë
;

293 
uöt32_t
 
FMC_AutoRe‰eshNumbî
;

297 
uöt32_t
 
FMC_ModeRegi°îDeföôi⁄
;

299 }
	tFMC_SDRAMComm™dTy≥Def
;

307 
uöt32_t
 
FMC_B™k
;

310 
uöt32_t
 
FMC_CﬁumnBôsNumbî
;

313 
uöt32_t
 
FMC_RowBôsNumbî
;

316 
uöt32_t
 
FMC_SDMem‹yD©aWidth
;

319 
uöt32_t
 
FMC_I¡î«lB™kNumbî
;

322 
uöt32_t
 
FMC_CASL©ícy
;

325 
uöt32_t
 
FMC_WrôePrŸe˘i⁄
;

328 
uöt32_t
 
FMC_SDClockPîiod
;

332 
uöt32_t
 
FMC_RódBur°
;

336 
uöt32_t
 
FMC_RódPùeDñay
;

339 
FMC_SDRAMTimögInôTy≥Def
* 
FMC_SDRAMTimögSåu˘
;

341 }
	tFMC_SDRAMInôTy≥Def
;

353 
	#FMC_B™k1_NORSRAM1
 ((
uöt32_t
)0x00000000)

	)

354 
	#FMC_B™k1_NORSRAM2
 ((
uöt32_t
)0x00000002)

	)

355 
	#FMC_B™k1_NORSRAM3
 ((
uöt32_t
)0x00000004)

	)

356 
	#FMC_B™k1_NORSRAM4
 ((
uöt32_t
)0x00000006)

	)

358 
	#IS_FMC_NORSRAM_BANK
(
BANK
Ë(((BANKË=
FMC_B™k1_NORSRAM1
Ë|| \

	)

359 ((
BANK
Ë=
FMC_B™k1_NORSRAM2
) || \

360 ((
BANK
Ë=
FMC_B™k1_NORSRAM3
) || \

361 ((
BANK
Ë=
FMC_B™k1_NORSRAM4
))

369 
	#FMC_B™k2_NAND
 ((
uöt32_t
)0x00000010)

	)

370 
	#FMC_B™k3_NAND
 ((
uöt32_t
)0x00000100)

	)

372 
	#IS_FMC_NAND_BANK
(
BANK
Ë(((BANKË=
FMC_B™k2_NAND
Ë|| \

	)

373 ((
BANK
Ë=
FMC_B™k3_NAND
))

381 
	#FMC_B™k4_PCCARD
 ((
uöt32_t
)0x00001000)

	)

389 
	#FMC_B™k1_SDRAM
 ((
uöt32_t
)0x00000000)

	)

390 
	#FMC_B™k2_SDRAM
 ((
uöt32_t
)0x00000001)

	)

392 
	#IS_FMC_SDRAM_BANK
(
BANK
Ë(((BANKË=
FMC_B™k1_SDRAM
Ë|| \

	)

393 ((
BANK
Ë=
FMC_B™k2_SDRAM
))

408 
	#FMC_D©aAddªssMux_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

409 
	#FMC_D©aAddªssMux_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

411 
	#IS_FMC_MUX
(
MUX
Ë(((MUXË=
FMC_D©aAddªssMux_DißbÀ
Ë|| \

	)

412 ((
MUX
Ë=
FMC_D©aAddªssMux_E«bÀ
))

421 
	#FMC_Mem‹yTy≥_SRAM
 ((
uöt32_t
)0x00000000)

	)

422 
	#FMC_Mem‹yTy≥_PSRAM
 ((
uöt32_t
)0x00000004)

	)

423 
	#FMC_Mem‹yTy≥_NOR
 ((
uöt32_t
)0x00000008)

	)

425 
	#IS_FMC_MEMORY
(
MEMORY
Ë(((MEMORYË=
FMC_Mem‹yTy≥_SRAM
Ë|| \

	)

426 ((
MEMORY
Ë=
FMC_Mem‹yTy≥_PSRAM
)|| \

427 ((
MEMORY
Ë=
FMC_Mem‹yTy≥_NOR
))

436 
	#FMC_NORSRAM_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

437 
	#FMC_NORSRAM_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

438 
	#FMC_NORSRAM_Mem‹yD©aWidth_32b
 ((
uöt32_t
)0x00000020)

	)

440 
	#IS_FMC_NORSRAM_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FMC_NORSRAM_Mem‹yD©aWidth_8b
Ë|| \

	)

441 ((
WIDTH
Ë=
FMC_NORSRAM_Mem‹yD©aWidth_16b
) || \

442 ((
WIDTH
Ë=
FMC_NORSRAM_Mem‹yD©aWidth_32b
))

451 
	#FMC_Bur°Ac˚ssMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

452 
	#FMC_Bur°Ac˚ssMode_E«bÀ
 ((
uöt32_t
)0x00000100)

	)

454 
	#IS_FMC_BURSTMODE
(
STATE
Ë(((STATEË=
FMC_Bur°Ac˚ssMode_DißbÀ
Ë|| \

	)

455 ((
STATE
Ë=
FMC_Bur°Ac˚ssMode_E«bÀ
))

463 
	#FMC_Asynchr⁄ousWaô_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

464 
	#FMC_Asynchr⁄ousWaô_E«bÀ
 ((
uöt32_t
)0x00008000)

	)

466 
	#IS_FMC_ASYNWAIT
(
STATE
Ë(((STATEË=
FMC_Asynchr⁄ousWaô_DißbÀ
Ë|| \

	)

467 ((
STATE
Ë=
FMC_Asynchr⁄ousWaô_E«bÀ
))

475 
	#FMC_WaôSig«lPﬁ¨ôy_Low
 ((
uöt32_t
)0x00000000)

	)

476 
	#FMC_WaôSig«lPﬁ¨ôy_High
 ((
uöt32_t
)0x00000200)

	)

478 
	#IS_FMC_WAIT_POLARITY
(
POLARITY
Ë(((POLARITYË=
FMC_WaôSig«lPﬁ¨ôy_Low
Ë|| \

	)

479 ((
POLARITY
Ë=
FMC_WaôSig«lPﬁ¨ôy_High
))

487 
	#FMC_WøpMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

488 
	#FMC_WøpMode_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

490 
	#IS_FMC_WRAP_MODE
(
MODE
Ë(((MODEË=
FMC_WøpMode_DißbÀ
Ë|| \

	)

491 ((
MODE
Ë=
FMC_WøpMode_E«bÀ
))

499 
	#FMC_WaôSig«lA˘ive_Bef‹eWaôSèã
 ((
uöt32_t
)0x00000000)

	)

500 
	#FMC_WaôSig«lA˘ive_DurögWaôSèã
 ((
uöt32_t
)0x00000800)

	)

502 
	#IS_FMC_WAIT_SIGNAL_ACTIVE
(
ACTIVE
Ë(((ACTIVEË=
FMC_WaôSig«lA˘ive_Bef‹eWaôSèã
Ë|| \

	)

503 ((
ACTIVE
Ë=
FMC_WaôSig«lA˘ive_DurögWaôSèã
))

511 
	#FMC_WrôeO≥øti⁄_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

512 
	#FMC_WrôeO≥øti⁄_E«bÀ
 ((
uöt32_t
)0x00001000)

	)

514 
	#IS_FMC_WRITE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
FMC_WrôeO≥øti⁄_DißbÀ
Ë|| \

	)

515 ((
OPERATION
Ë=
FMC_WrôeO≥øti⁄_E«bÀ
))

523 
	#FMC_WaôSig«l_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

524 
	#FMC_WaôSig«l_E«bÀ
 ((
uöt32_t
)0x00002000)

	)

526 
	#IS_FMC_WAITE_SIGNAL
(
SIGNAL
Ë(((SIGNALË=
FMC_WaôSig«l_DißbÀ
Ë|| \

	)

527 ((
SIGNAL
Ë=
FMC_WaôSig«l_E«bÀ
))

535 
	#FMC_ExãndedMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

536 
	#FMC_ExãndedMode_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

538 
	#IS_FMC_EXTENDED_MODE
(
MODE
Ë(((MODEË=
FMC_ExãndedMode_DißbÀ
Ë|| \

	)

539 ((
MODE
Ë=
FMC_ExãndedMode_E«bÀ
))

548 
	#FMC_WrôeBur°_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

549 
	#FMC_WrôeBur°_E«bÀ
 ((
uöt32_t
)0x00080000)

	)

551 
	#IS_FMC_WRITE_BURST
(
BURST
Ë(((BURSTË=
FMC_WrôeBur°_DißbÀ
Ë|| \

	)

552 ((
BURST
Ë=
FMC_WrôeBur°_E«bÀ
))

561 
	#FMC_CClock_SyncO∆y
 ((
uöt32_t
)0x00000000)

	)

562 
	#FMC_CClock_SyncAsync
 ((
uöt32_t
)0x00100000)

	)

564 
	#IS_FMC_CONTINOUS_CLOCK
(
CCLOCK
Ë(((CCLOCKË=
FMC_CClock_SyncO∆y
Ë|| \

	)

565 ((
CCLOCK
Ë=
FMC_CClock_SyncAsync
))

573 
	#IS_FMC_ADDRESS_SETUP_TIME
(
TIME
Ë((TIMEË<15)

	)

581 
	#IS_FMC_ADDRESS_HOLD_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<15))

	)

589 
	#IS_FMC_DATASETUP_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<255))

	)

597 
	#IS_FMC_TURNAROUND_TIME
(
TIME
Ë((TIMEË<15)

	)

605 
	#IS_FMC_CLK_DIV
(
DIV
Ë(((DIVË> 0Ë&& ((DIVË<15))

	)

613 
	#IS_FMC_DATA_LATENCY
(
LATENCY
Ë((LATENCYË<15)

	)

621 
	#FMC_Ac˚ssMode_A
 ((
uöt32_t
)0x00000000)

	)

622 
	#FMC_Ac˚ssMode_B
 ((
uöt32_t
)0x10000000)

	)

623 
	#FMC_Ac˚ssMode_C
 ((
uöt32_t
)0x20000000)

	)

624 
	#FMC_Ac˚ssMode_D
 ((
uöt32_t
)0x30000000)

	)

626 
	#IS_FMC_ACCESS_MODE
(
MODE
Ë(((MODEË=
FMC_Ac˚ssMode_A
Ë|| \

	)

627 ((
MODE
Ë=
FMC_Ac˚ssMode_B
) || \

628 ((
MODE
Ë=
FMC_Ac˚ssMode_C
) || \

629 ((
MODE
Ë=
FMC_Ac˚ssMode_D
))

645 
	#FMC_Waô„©uª_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

646 
	#FMC_Waô„©uª_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

648 
	#IS_FMC_WAIT_FEATURE
(
FEATURE
Ë(((FEATUREË=
FMC_Waô„©uª_DißbÀ
Ë|| \

	)

649 ((
FEATURE
Ë=
FMC_Waô„©uª_E«bÀ
))

657 
	#FMC_NAND_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

658 
	#FMC_NAND_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

660 
	#IS_FMC_NAND_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FMC_NAND_Mem‹yD©aWidth_8b
Ë|| \

	)

661 ((
WIDTH
Ë=
FMC_NAND_Mem‹yD©aWidth_16b
))

669 
	#FMC_ECC_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

670 
	#FMC_ECC_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

672 
	#IS_FMC_ECC_STATE
(
STATE
Ë(((STATEË=
FMC_ECC_DißbÀ
Ë|| \

	)

673 ((
STATE
Ë=
FMC_ECC_E«bÀ
))

681 
	#FMC_ECCPageSize_256Byãs
 ((
uöt32_t
)0x00000000)

	)

682 
	#FMC_ECCPageSize_512Byãs
 ((
uöt32_t
)0x00020000)

	)

683 
	#FMC_ECCPageSize_1024Byãs
 ((
uöt32_t
)0x00040000)

	)

684 
	#FMC_ECCPageSize_2048Byãs
 ((
uöt32_t
)0x00060000)

	)

685 
	#FMC_ECCPageSize_4096Byãs
 ((
uöt32_t
)0x00080000)

	)

686 
	#FMC_ECCPageSize_8192Byãs
 ((
uöt32_t
)0x000A0000)

	)

688 
	#IS_FMC_ECCPAGE_SIZE
(
SIZE
Ë(((SIZEË=
FMC_ECCPageSize_256Byãs
Ë|| \

	)

689 ((
SIZE
Ë=
FMC_ECCPageSize_512Byãs
) || \

690 ((
SIZE
Ë=
FMC_ECCPageSize_1024Byãs
) || \

691 ((
SIZE
Ë=
FMC_ECCPageSize_2048Byãs
) || \

692 ((
SIZE
Ë=
FMC_ECCPageSize_4096Byãs
) || \

693 ((
SIZE
Ë=
FMC_ECCPageSize_8192Byãs
))

701 
	#IS_FMC_TCLR_TIME
(
TIME
Ë((TIMEË<255)

	)

709 
	#IS_FMC_TAR_TIME
(
TIME
Ë((TIMEË<255)

	)

717 
	#IS_FMC_SETUP_TIME
(
TIME
Ë((TIMEË<255)

	)

725 
	#IS_FMC_WAIT_TIME
(
TIME
Ë((TIMEË<255)

	)

733 
	#IS_FMC_HOLD_TIME
(
TIME
Ë((TIMEË<255)

	)

741 
	#IS_FMC_HIZ_TIME
(
TIME
Ë((TIMEË<255)

	)

758 
	#FMC_CﬁumnBôs_Numbî_8b
 ((
uöt32_t
)0x00000000)

	)

759 
	#FMC_CﬁumnBôs_Numbî_9b
 ((
uöt32_t
)0x00000001)

	)

760 
	#FMC_CﬁumnBôs_Numbî_10b
 ((
uöt32_t
)0x00000002)

	)

761 
	#FMC_CﬁumnBôs_Numbî_11b
 ((
uöt32_t
)0x00000003)

	)

763 
	#IS_FMC_COLUMNBITS_NUMBER
(
COLUMN
Ë(((COLUMNË=
FMC_CﬁumnBôs_Numbî_8b
Ë|| \

	)

764 ((
COLUMN
Ë=
FMC_CﬁumnBôs_Numbî_9b
) || \

765 ((
COLUMN
Ë=
FMC_CﬁumnBôs_Numbî_10b
) || \

766 ((
COLUMN
Ë=
FMC_CﬁumnBôs_Numbî_11b
))

775 
	#FMC_RowBôs_Numbî_11b
 ((
uöt32_t
)0x00000000)

	)

776 
	#FMC_RowBôs_Numbî_12b
 ((
uöt32_t
)0x00000004)

	)

777 
	#FMC_RowBôs_Numbî_13b
 ((
uöt32_t
)0x00000008)

	)

779 
	#IS_FMC_ROWBITS_NUMBER
(
ROW
Ë(((ROWË=
FMC_RowBôs_Numbî_11b
Ë|| \

	)

780 ((
ROW
Ë=
FMC_RowBôs_Numbî_12b
) || \

781 ((
ROW
Ë=
FMC_RowBôs_Numbî_13b
))

790 
	#FMC_SDMem‹y_Width_8b
 ((
uöt32_t
)0x00000000)

	)

791 
	#FMC_SDMem‹y_Width_16b
 ((
uöt32_t
)0x00000010)

	)

792 
	#FMC_SDMem‹y_Width_32b
 ((
uöt32_t
)0x00000020)

	)

794 
	#IS_FMC_SDMEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FMC_SDMem‹y_Width_8b
Ë|| \

	)

795 ((
WIDTH
Ë=
FMC_SDMem‹y_Width_16b
) || \

796 ((
WIDTH
Ë=
FMC_SDMem‹y_Width_32b
))

805 
	#FMC_I¡î«lB™k_Numbî_2
 ((
uöt32_t
)0x00000000)

	)

806 
	#FMC_I¡î«lB™k_Numbî_4
 ((
uöt32_t
)0x00000040)

	)

808 
	#IS_FMC_INTERNALBANK_NUMBER
(
NUMBER
Ë(((NUMBERË=
FMC_I¡î«lB™k_Numbî_2
Ë|| \

	)

809 ((
NUMBER
Ë=
FMC_I¡î«lB™k_Numbî_4
))

819 
	#FMC_CAS_L©ícy_1
 ((
uöt32_t
)0x00000080)

	)

820 
	#FMC_CAS_L©ícy_2
 ((
uöt32_t
)0x00000100)

	)

821 
	#FMC_CAS_L©ícy_3
 ((
uöt32_t
)0x00000180)

	)

823 
	#IS_FMC_CAS_LATENCY
(
LATENCY
Ë(((LATENCYË=
FMC_CAS_L©ícy_1
Ë|| \

	)

824 ((
LATENCY
Ë=
FMC_CAS_L©ícy_2
) || \

825 ((
LATENCY
Ë=
FMC_CAS_L©ícy_3
))

834 
	#FMC_Wrôe_PrŸe˘i⁄_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

835 
	#FMC_Wrôe_PrŸe˘i⁄_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

837 
	#IS_FMC_WRITE_PROTECTION
(
WRITE
Ë(((WRITEË=
FMC_Wrôe_PrŸe˘i⁄_DißbÀ
Ë|| \

	)

838 ((
WRITE
Ë=
FMC_Wrôe_PrŸe˘i⁄_E«bÀ
))

848 
	#FMC_SDClock_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

849 
	#FMC_SDClock_Pîiod_2
 ((
uöt32_t
)0x00000800)

	)

850 
	#FMC_SDClock_Pîiod_3
 ((
uöt32_t
)0x00000C00)

	)

852 
	#IS_FMC_SDCLOCK_PERIOD
(
PERIOD
Ë(((PERIODË=
FMC_SDClock_DißbÀ
Ë|| \

	)

853 ((
PERIOD
Ë=
FMC_SDClock_Pîiod_2
) || \

854 ((
PERIOD
Ë=
FMC_SDClock_Pîiod_3
))

863 
	#FMC_Ród_Bur°_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

864 
	#FMC_Ród_Bur°_E«bÀ
 ((
uöt32_t
)0x00001000)

	)

866 
	#IS_FMC_READ_BURST
(
RBURST
Ë(((RBURSTË=
FMC_Ród_Bur°_DißbÀ
Ë|| \

	)

867 ((
RBURST
Ë=
FMC_Ród_Bur°_E«bÀ
))

876 
	#FMC_RódPùe_Dñay_0
 ((
uöt32_t
)0x00000000)

	)

877 
	#FMC_RódPùe_Dñay_1
 ((
uöt32_t
)0x00002000)

	)

878 
	#FMC_RódPùe_Dñay_2
 ((
uöt32_t
)0x00004000)

	)

880 
	#IS_FMC_READPIPE_DELAY
(
DELAY
Ë(((DELAYË=
FMC_RódPùe_Dñay_0
Ë|| \

	)

881 ((
DELAY
Ë=
FMC_RódPùe_Dñay_1
) || \

882 ((
DELAY
Ë=
FMC_RódPùe_Dñay_2
))

891 
	#IS_FMC_LOADTOACTIVE_DELAY
(
DELAY
Ë(((DELAYË> 0Ë&& ((DELAYË<16))

	)

899 
	#IS_FMC_EXITSELFREFRESH_DELAY
(
DELAY
Ë(((DELAYË> 0Ë&& ((DELAYË<16))

	)

907 
	#IS_FMC_SELFREFRESH_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<16))

	)

915 
	#IS_FMC_ROWCYCLE_DELAY
(
DELAY
Ë(((DELAYË> 0Ë&& ((DELAYË<16))

	)

923 
	#IS_FMC_WRITE_RECOVERY_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<16))

	)

931 
	#IS_FMC_RP_DELAY
(
DELAY
Ë(((DELAYË> 0Ë&& ((DELAYË<16))

	)

939 
	#IS_FMC_RCD_DELAY
(
DELAY
Ë(((DELAYË> 0Ë&& ((DELAYË<16))

	)

948 
	#FMC_Comm™d_Mode_n‹mÆ
 ((
uöt32_t
)0x00000000)

	)

949 
	#FMC_Comm™d_Mode_CLK_E«bÀd
 ((
uöt32_t
)0x00000001)

	)

950 
	#FMC_Comm™d_Mode_PALL
 ((
uöt32_t
)0x00000002)

	)

951 
	#FMC_Comm™d_Mode_AutoRe‰esh
 ((
uöt32_t
)0x00000003)

	)

952 
	#FMC_Comm™d_Mode_LﬂdMode
 ((
uöt32_t
)0x00000004)

	)

953 
	#FMC_Comm™d_Mode_Sñ‰e‰esh
 ((
uöt32_t
)0x00000005)

	)

954 
	#FMC_Comm™d_Mode_PowîDown
 ((
uöt32_t
)0x00000006)

	)

956 
	#IS_FMC_COMMAND_MODE
(
COMMAND
Ë(((COMMANDË=
FMC_Comm™d_Mode_n‹mÆ
Ë|| \

	)

957 ((
COMMAND
Ë=
FMC_Comm™d_Mode_CLK_E«bÀd
) || \

958 ((
COMMAND
Ë=
FMC_Comm™d_Mode_PALL
) || \

959 ((
COMMAND
Ë=
FMC_Comm™d_Mode_AutoRe‰esh
) || \

960 ((
COMMAND
Ë=
FMC_Comm™d_Mode_LﬂdMode
) || \

961 ((
COMMAND
Ë=
FMC_Comm™d_Mode_Sñ‰e‰esh
) || \

962 ((
COMMAND
Ë=
FMC_Comm™d_Mode_PowîDown
))

971 
	#FMC_Comm™d_T¨gë_b™k2
 ((
uöt32_t
)0x00000008)

	)

972 
	#FMC_Comm™d_T¨gë_b™k1
 ((
uöt32_t
)0x00000010)

	)

973 
	#FMC_Comm™d_T¨gë_b™k1_2
 ((
uöt32_t
)0x00000018)

	)

975 
	#IS_FMC_COMMAND_TARGET
(
TARGET
Ë(((TARGETË=
FMC_Comm™d_T¨gë_b™k1
Ë|| \

	)

976 ((
TARGET
Ë=
FMC_Comm™d_T¨gë_b™k2
) || \

977 ((
TARGET
Ë=
FMC_Comm™d_T¨gë_b™k1_2
))

986 
	#IS_FMC_AUTOREFRESH_NUMBER
(
NUMBER
Ë(((NUMBERË> 0Ë&& ((NUMBERË<16))

	)

995 
	#IS_FMC_MODE_REGISTER
(
CONTENT
Ë((CONTENTË<8191)

	)

1005 
	#FMC_N‹mÆMode_Sètus
 ((
uöt32_t
)0x00000000)

	)

1006 
	#FMC_SñfRe‰eshMode_Sètus
 
FMC_SDSR_MODES1_0


	)

1007 
	#FMC_PowîDownMode_Sètus
 
FMC_SDSR_MODES1_1


	)

1009 
	#IS_FMC_MODE_STATUS
(
STATUS
Ë(((STATUSË=
FMC_N‹mÆMode_Sètus
Ë|| \

	)

1010 ((
STATUS
Ë=
FMC_SñfRe‰eshMode_Sètus
) || \

1011 ((
STATUS
Ë=
FMC_PowîDownMode_Sètus
))

1025 
	#FMC_IT_RisögEdge
 ((
uöt32_t
)0x00000008)

	)

1026 
	#FMC_IT_Levñ
 ((
uöt32_t
)0x00000010)

	)

1027 
	#FMC_IT_FÆlögEdge
 ((
uöt32_t
)0x00000020)

	)

1028 
	#FMC_IT_Re‰esh
 ((
uöt32_t
)0x00004000)

	)

1030 
	#IS_FMC_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFBFC7Ë=0x00000000Ë&& ((ITË!0x00000000))

	)

1031 
	#IS_FMC_GET_IT
(
IT
Ë(((ITË=
FMC_IT_RisögEdge
Ë|| \

	)

1032 ((
IT
Ë=
FMC_IT_Levñ
) || \

1033 ((
IT
Ë=
FMC_IT_FÆlögEdge
) || \

1034 ((
IT
Ë=
FMC_IT_Re‰esh
))

1036 
	#IS_FMC_IT_BANK
(
BANK
Ë(((BANKË=
FMC_B™k2_NAND
Ë|| \

	)

1037 ((
BANK
Ë=
FMC_B™k3_NAND
) || \

1038 ((
BANK
Ë=
FMC_B™k4_PCCARD
) || \

1039 ((
BANK
Ë=
FMC_B™k1_SDRAM
) || \

1040 ((
BANK
Ë=
FMC_B™k2_SDRAM
))

1048 
	#FMC_FLAG_RisögEdge
 ((
uöt32_t
)0x00000001)

	)

1049 
	#FMC_FLAG_Levñ
 ((
uöt32_t
)0x00000002)

	)

1050 
	#FMC_FLAG_FÆlögEdge
 ((
uöt32_t
)0x00000004)

	)

1051 
	#FMC_FLAG_FEMPT
 ((
uöt32_t
)0x00000040)

	)

1052 
	#FMC_FLAG_Re‰esh
 
FMC_SDSR_RE


	)

1053 
	#FMC_FLAG_Busy
 
FMC_SDSR_BUSY


	)

1055 
	#IS_FMC_GET_FLAG
(
FLAG
Ë(((FLAGË=
FMC_FLAG_RisögEdge
Ë|| \

	)

1056 ((
FLAG
Ë=
FMC_FLAG_Levñ
) || \

1057 ((
FLAG
Ë=
FMC_FLAG_FÆlögEdge
) || \

1058 ((
FLAG
Ë=
FMC_FLAG_FEMPT
) || \

1059 ((
FLAG
Ë=
FMC_FLAG_Re‰esh
) || \

1060 ((
FLAG
Ë=
FMC_SDSR_BUSY
))

1062 
	#IS_FMC_GETFLAG_BANK
(
BANK
Ë(((BANKË=
FMC_B™k2_NAND
Ë|| \

	)

1063 ((
BANK
Ë=
FMC_B™k3_NAND
) || \

1064 ((
BANK
Ë=
FMC_B™k4_PCCARD
) || \

1065 ((
BANK
Ë=
FMC_B™k1_SDRAM
) || \

1066 ((
BANK
Ë=
FMC_B™k2_SDRAM
) || \

1067 ((
BANK
Ë=(
FMC_B™k1_SDRAM
 | 
FMC_B™k2_SDRAM
)))

1069 
	#IS_FMC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFF8Ë=0x00000000Ë&& ((FLAGË!0x00000000))

	)

1079 
	#IS_FMC_REFRESH_COUNT
(
COUNT
Ë((COUNTË<8191)

	)

1094 
FMC_NORSRAMDeInô
(
uöt32_t
 
FMC_B™k
);

1095 
FMC_NORSRAMInô
(
FMC_NORSRAMInôTy≥Def
* 
FMC_NORSRAMInôSåu˘
);

1096 
FMC_NORSRAMSåu˘Inô
(
FMC_NORSRAMInôTy≥Def
* 
FMC_NORSRAMInôSåu˘
);

1097 
FMC_NORSRAMCmd
(
uöt32_t
 
FMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1100 
FMC_NANDDeInô
(
uöt32_t
 
FMC_B™k
);

1101 
FMC_NANDInô
(
FMC_NANDInôTy≥Def
* 
FMC_NANDInôSåu˘
);

1102 
FMC_NANDSåu˘Inô
(
FMC_NANDInôTy≥Def
* 
FMC_NANDInôSåu˘
);

1103 
FMC_NANDCmd
(
uöt32_t
 
FMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1104 
FMC_NANDECCCmd
(
uöt32_t
 
FMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1105 
uöt32_t
 
FMC_GëECC
(uöt32_à
FMC_B™k
);

1108 
FMC_PCCARDDeInô
();

1109 
FMC_PCCARDInô
(
FMC_PCCARDInôTy≥Def
* 
FMC_PCCARDInôSåu˘
);

1110 
FMC_PCCARDSåu˘Inô
(
FMC_PCCARDInôTy≥Def
* 
FMC_PCCARDInôSåu˘
);

1111 
FMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

1114 
FMC_SDRAMDeInô
(
uöt32_t
 
FMC_B™k
);

1115 
FMC_SDRAMInô
(
FMC_SDRAMInôTy≥Def
* 
FMC_SDRAMInôSåu˘
);

1116 
FMC_SDRAMSåu˘Inô
(
FMC_SDRAMInôTy≥Def
* 
FMC_SDRAMInôSåu˘
);

1117 
FMC_SDRAMCmdC⁄fig
(
FMC_SDRAMComm™dTy≥Def
* 
FMC_SDRAMComm™dSåu˘
);

1118 
uöt32_t
 
FMC_GëModeSètus
(uöt32_à
SDRAM_B™k
);

1119 
FMC_SëRe‰eshCou¡
(
uöt32_t
 
FMC_Cou¡
);

1120 
FMC_SëAutoRe‰esh_Numbî
(
uöt32_t
 
FMC_Numbî
);

1121 
FMC_SDRAMWrôePrŸe˘i⁄C⁄fig
(
uöt32_t
 
SDRAM_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1124 
FMC_ITC⁄fig
(
uöt32_t
 
FMC_B™k
, uöt32_à
FMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1125 
FœgSètus
 
FMC_GëFœgSètus
(
uöt32_t
 
FMC_B™k
, uöt32_à
FMC_FLAG
);

1126 
FMC_CÀ¨Fœg
(
uöt32_t
 
FMC_B™k
, uöt32_à
FMC_FLAG
);

1127 
ITSètus
 
FMC_GëITSètus
(
uöt32_t
 
FMC_B™k
, uöt32_à
FMC_IT
);

1128 
FMC_CÀ¨ITPídögBô
(
uöt32_t
 
FMC_B™k
, uöt32_à
FMC_IT
);

1130 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_fmpi2c.h

30 #i‚de‡
__STM32F4xx_FMPI2C_H


31 
	#__STM32F4xx_FMPI2C_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
FMPI2C_Timög
;

60 
uöt32_t
 
FMPI2C_A«logFûãr
;

63 
uöt32_t
 
FMPI2C_DigôÆFûãr
;

66 
uöt32_t
 
FMPI2C_Mode
;

69 
uöt32_t
 
FMPI2C_OwnAddªss1
;

72 
uöt32_t
 
FMPI2C_Ack
;

75 
uöt32_t
 
FMPI2C_AcknowÀdgedAddªss
;

77 }
	tFMPI2C_InôTy≥Def
;

86 
	#IS_FMPI2C_ALL_PERIPH
(
PERIPH
Ë((PERIPHË=
FMPI2C1
)

	)

92 
	#FMPI2C_A«logFûãr_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

93 
	#FMPI2C_A«logFûãr_DißbÀ
 
FMPI2C_CR1_ANFOFF


	)

95 
	#IS_FMPI2C_ANALOG_FILTER
(
FILTER
Ë(((FILTERË=
FMPI2C_A«logFûãr_E«bÀ
Ë|| \

	)

96 ((
FILTER
Ë=
FMPI2C_A«logFûãr_DißbÀ
))

105 
	#IS_FMPI2C_DIGITAL_FILTER
(
FILTER
Ë((FILTERË<0x0000000F)

	)

114 
	#FMPI2C_Mode_FMPI2C
 ((
uöt32_t
)0x00000000)

	)

115 
	#FMPI2C_Mode_SMBusDevi˚
 
FMPI2C_CR1_SMBDEN


	)

116 
	#FMPI2C_Mode_SMBusHo°
 
FMPI2C_CR1_SMBHEN


	)

118 
	#IS_FMPI2C_MODE
(
MODE
Ë(((MODEË=
FMPI2C_Mode_FMPI2C
Ë|| \

	)

119 ((
MODE
Ë=
FMPI2C_Mode_SMBusDevi˚
) || \

120 ((
MODE
Ë=
FMPI2C_Mode_SMBusHo°
))

129 
	#FMPI2C_Ack_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

130 
	#FMPI2C_Ack_DißbÀ
 
FMPI2C_CR2_NACK


	)

132 
	#IS_FMPI2C_ACK
(
ACK
Ë(((ACKË=
FMPI2C_Ack_E«bÀ
Ë|| \

	)

133 ((
ACK
Ë=
FMPI2C_Ack_DißbÀ
))

142 
	#FMPI2C_AcknowÀdgedAddªss_7bô
 ((
uöt32_t
)0x00000000)

	)

143 
	#FMPI2C_AcknowÀdgedAddªss_10bô
 
FMPI2C_OAR1_OA1MODE


	)

145 
	#IS_FMPI2C_ACKNOWLEDGE_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
FMPI2C_AcknowÀdgedAddªss_7bô
Ë|| \

	)

146 ((
ADDRESS
Ë=
FMPI2C_AcknowÀdgedAddªss_10bô
))

155 
	#IS_FMPI2C_OWN_ADDRESS1
(
ADDRESS1
Ë((ADDRESS1Ë<(
uöt32_t
)0x000003FF)

	)

164 
	#FMPI2C_Dúe˘i⁄_Tønsmôãr
 ((
uöt16_t
)0x0000)

	)

165 
	#FMPI2C_Dúe˘i⁄_Re˚ivî
 ((
uöt16_t
)0x0400)

	)

167 
	#IS_FMPI2C_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
FMPI2C_Dúe˘i⁄_Tønsmôãr
Ë|| \

	)

168 ((
DIRECTION
Ë=
FMPI2C_Dúe˘i⁄_Re˚ivî
))

177 
	#FMPI2C_DMAReq_Tx
 
FMPI2C_CR1_TXDMAEN


	)

178 
	#FMPI2C_DMAReq_Rx
 
FMPI2C_CR1_RXDMAEN


	)

180 
	#IS_FMPI2C_DMA_REQ
(
REQ
Ë((((REQË& (
uöt32_t
)0xFFFF3FFFË=0x00Ë&& ((REQË!0x00))

	)

189 
	#IS_FMPI2C_SLAVE_ADDRESS
(
ADDRESS
Ë((ADDRESSË<(
uöt16_t
)0x03FF)

	)

199 
	#IS_FMPI2C_OWN_ADDRESS2
(
ADDRESS2
Ë((ADDRESS2Ë<(
uöt16_t
)0x00FF)

	)

209 
	#FMPI2C_OA2_NoMask
 ((
uöt8_t
)0x00)

	)

210 
	#FMPI2C_OA2_Mask01
 ((
uöt8_t
)0x01)

	)

211 
	#FMPI2C_OA2_Mask02
 ((
uöt8_t
)0x02)

	)

212 
	#FMPI2C_OA2_Mask03
 ((
uöt8_t
)0x03)

	)

213 
	#FMPI2C_OA2_Mask04
 ((
uöt8_t
)0x04)

	)

214 
	#FMPI2C_OA2_Mask05
 ((
uöt8_t
)0x05)

	)

215 
	#FMPI2C_OA2_Mask06
 ((
uöt8_t
)0x06)

	)

216 
	#FMPI2C_OA2_Mask07
 ((
uöt8_t
)0x07)

	)

218 
	#IS_FMPI2C_OWN_ADDRESS2_MASK
(
MASK
Ë(((MASKË=
FMPI2C_OA2_NoMask
Ë|| \

	)

219 ((
MASK
Ë=
FMPI2C_OA2_Mask01
) || \

220 ((
MASK
Ë=
FMPI2C_OA2_Mask02
) || \

221 ((
MASK
Ë=
FMPI2C_OA2_Mask03
) || \

222 ((
MASK
Ë=
FMPI2C_OA2_Mask04
) || \

223 ((
MASK
Ë=
FMPI2C_OA2_Mask05
) || \

224 ((
MASK
Ë=
FMPI2C_OA2_Mask06
) || \

225 ((
MASK
Ë=
FMPI2C_OA2_Mask07
))

235 
	#IS_FMPI2C_TIMEOUT
(
TIMEOUT
Ë((TIMEOUTË<(
uöt16_t
)0x0FFF)

	)

245 
	#FMPI2C_Regi°î_CR1
 ((
uöt8_t
)0x00)

	)

246 
	#FMPI2C_Regi°î_CR2
 ((
uöt8_t
)0x04)

	)

247 
	#FMPI2C_Regi°î_OAR1
 ((
uöt8_t
)0x08)

	)

248 
	#FMPI2C_Regi°î_OAR2
 ((
uöt8_t
)0x0C)

	)

249 
	#FMPI2C_Regi°î_TIMINGR
 ((
uöt8_t
)0x10)

	)

250 
	#FMPI2C_Regi°î_TIMEOUTR
 ((
uöt8_t
)0x14)

	)

251 
	#FMPI2C_Regi°î_ISR
 ((
uöt8_t
)0x18)

	)

252 
	#FMPI2C_Regi°î_ICR
 ((
uöt8_t
)0x1C)

	)

253 
	#FMPI2C_Regi°î_PECR
 ((
uöt8_t
)0x20)

	)

254 
	#FMPI2C_Regi°î_RXDR
 ((
uöt8_t
)0x24)

	)

255 
	#FMPI2C_Regi°î_TXDR
 ((
uöt8_t
)0x28)

	)

257 
	#IS_FMPI2C_REGISTER
(
REGISTER
Ë(((REGISTERË=
FMPI2C_Regi°î_CR1
Ë|| \

	)

258 ((
REGISTER
Ë=
FMPI2C_Regi°î_CR2
) || \

259 ((
REGISTER
Ë=
FMPI2C_Regi°î_OAR1
) || \

260 ((
REGISTER
Ë=
FMPI2C_Regi°î_OAR2
) || \

261 ((
REGISTER
Ë=
FMPI2C_Regi°î_TIMINGR
) || \

262 ((
REGISTER
Ë=
FMPI2C_Regi°î_TIMEOUTR
) || \

263 ((
REGISTER
Ë=
FMPI2C_Regi°î_ISR
) || \

264 ((
REGISTER
Ë=
FMPI2C_Regi°î_ICR
) || \

265 ((
REGISTER
Ë=
FMPI2C_Regi°î_PECR
) || \

266 ((
REGISTER
Ë=
FMPI2C_Regi°î_RXDR
) || \

267 ((
REGISTER
Ë=
FMPI2C_Regi°î_TXDR
))

276 
	#FMPI2C_IT_ERRI
 
FMPI2C_CR1_ERRIE


	)

277 
	#FMPI2C_IT_TCI
 
FMPI2C_CR1_TCIE


	)

278 
	#FMPI2C_IT_STOPI
 
FMPI2C_CR1_STOPIE


	)

279 
	#FMPI2C_IT_NACKI
 
FMPI2C_CR1_NACKIE


	)

280 
	#FMPI2C_IT_ADDRI
 
FMPI2C_CR1_ADDRIE


	)

281 
	#FMPI2C_IT_RXI
 
FMPI2C_CR1_RXIE


	)

282 
	#FMPI2C_IT_TXI
 
FMPI2C_CR1_TXIE


	)

284 
	#IS_FMPI2C_CONFIG_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFF01Ë=0x00Ë&& ((ITË!0x00))

	)

294 
	#FMPI2C_FLAG_TXE
 
FMPI2C_ISR_TXE


	)

295 
	#FMPI2C_FLAG_TXIS
 
FMPI2C_ISR_TXIS


	)

296 
	#FMPI2C_FLAG_RXNE
 
FMPI2C_ISR_RXNE


	)

297 
	#FMPI2C_FLAG_ADDR
 
FMPI2C_ISR_ADDR


	)

298 
	#FMPI2C_FLAG_NACKF
 
FMPI2C_ISR_NACKF


	)

299 
	#FMPI2C_FLAG_STOPF
 
FMPI2C_ISR_STOPF


	)

300 
	#FMPI2C_FLAG_TC
 
FMPI2C_ISR_TC


	)

301 
	#FMPI2C_FLAG_TCR
 
FMPI2C_ISR_TCR


	)

302 
	#FMPI2C_FLAG_BERR
 
FMPI2C_ISR_BERR


	)

303 
	#FMPI2C_FLAG_ARLO
 
FMPI2C_ISR_ARLO


	)

304 
	#FMPI2C_FLAG_OVR
 
FMPI2C_ISR_OVR


	)

305 
	#FMPI2C_FLAG_PECERR
 
FMPI2C_ISR_PECERR


	)

306 
	#FMPI2C_FLAG_TIMEOUT
 
FMPI2C_ISR_TIMEOUT


	)

307 
	#FMPI2C_FLAG_ALERT
 
FMPI2C_ISR_ALERT


	)

308 
	#FMPI2C_FLAG_BUSY
 
FMPI2C_ISR_BUSY


	)

310 
	#IS_FMPI2C_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFF4000Ë=0x00Ë&& ((FLAGË!0x00))

	)

312 
	#IS_FMPI2C_GET_FLAG
(
FLAG
Ë(((FLAGË=
FMPI2C_FLAG_TXE
Ë|| ((FLAGË=
FMPI2C_FLAG_TXIS
Ë|| \

	)

313 ((
FLAG
Ë=
FMPI2C_FLAG_RXNE
Ë|| ((FLAGË=
FMPI2C_FLAG_ADDR
) || \

314 ((
FLAG
Ë=
FMPI2C_FLAG_NACKF
Ë|| ((FLAGË=
FMPI2C_FLAG_STOPF
) || \

315 ((
FLAG
Ë=
FMPI2C_FLAG_TC
Ë|| ((FLAGË=
FMPI2C_FLAG_TCR
) || \

316 ((
FLAG
Ë=
FMPI2C_FLAG_BERR
Ë|| ((FLAGË=
FMPI2C_FLAG_ARLO
) || \

317 ((
FLAG
Ë=
FMPI2C_FLAG_OVR
Ë|| ((FLAGË=
FMPI2C_FLAG_PECERR
) || \

318 ((
FLAG
Ë=
FMPI2C_FLAG_TIMEOUT
Ë|| ((FLAGË=
FMPI2C_FLAG_ALERT
) || \

319 ((
FLAG
Ë=
FMPI2C_FLAG_BUSY
))

330 
	#FMPI2C_IT_TXIS
 
FMPI2C_ISR_TXIS


	)

331 
	#FMPI2C_IT_RXNE
 
FMPI2C_ISR_RXNE


	)

332 
	#FMPI2C_IT_ADDR
 
FMPI2C_ISR_ADDR


	)

333 
	#FMPI2C_IT_NACKF
 
FMPI2C_ISR_NACKF


	)

334 
	#FMPI2C_IT_STOPF
 
FMPI2C_ISR_STOPF


	)

335 
	#FMPI2C_IT_TC
 
FMPI2C_ISR_TC


	)

336 
	#FMPI2C_IT_TCR
 
FMPI2C_ISR_TCR


	)

337 
	#FMPI2C_IT_BERR
 
FMPI2C_ISR_BERR


	)

338 
	#FMPI2C_IT_ARLO
 
FMPI2C_ISR_ARLO


	)

339 
	#FMPI2C_IT_OVR
 
FMPI2C_ISR_OVR


	)

340 
	#FMPI2C_IT_PECERR
 
FMPI2C_ISR_PECERR


	)

341 
	#FMPI2C_IT_TIMEOUT
 
FMPI2C_ISR_TIMEOUT


	)

342 
	#FMPI2C_IT_ALERT
 
FMPI2C_ISR_ALERT


	)

344 
	#IS_FMPI2C_CLEAR_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFC001Ë=0x00Ë&& ((ITË!0x00))

	)

346 
	#IS_FMPI2C_GET_IT
(
IT
Ë(((ITË=
FMPI2C_IT_TXIS
Ë|| ((ITË=
FMPI2C_IT_RXNE
Ë|| \

	)

347 ((
IT
Ë=
FMPI2C_IT_ADDR
Ë|| ((ITË=
FMPI2C_IT_NACKF
) || \

348 ((
IT
Ë=
FMPI2C_IT_STOPF
Ë|| ((ITË=
FMPI2C_IT_TC
) || \

349 ((
IT
Ë=
FMPI2C_IT_TCR
Ë|| ((ITË=
FMPI2C_IT_BERR
) || \

350 ((
IT
Ë=
FMPI2C_IT_ARLO
Ë|| ((ITË=
FMPI2C_IT_OVR
) || \

351 ((
IT
Ë=
FMPI2C_IT_PECERR
Ë|| ((ITË=
FMPI2C_IT_TIMEOUT
) || \

352 ((
IT
Ë=
FMPI2C_IT_ALERT
))

363 
	#FMPI2C_Rñﬂd_Mode
 
FMPI2C_CR2_RELOAD


	)

364 
	#FMPI2C_AutoEnd_Mode
 
FMPI2C_CR2_AUTOEND


	)

365 
	#FMPI2C_So·End_Mode
 ((
uöt32_t
)0x00000000)

	)

368 
	#IS_RELOAD_END_MODE
(
MODE
Ë(((MODEË=
FMPI2C_Rñﬂd_Mode
Ë|| \

	)

369 ((
MODE
Ë=
FMPI2C_AutoEnd_Mode
) || \

370 ((
MODE
Ë=
FMPI2C_So·End_Mode
))

381 
	#FMPI2C_No_SèπSt›
 ((
uöt32_t
)0x00000000)

	)

382 
	#FMPI2C_Gíî©e_St›
 
FMPI2C_CR2_STOP


	)

383 
	#FMPI2C_Gíî©e_Sèπ_Ród
 (
uöt32_t
)(
FMPI2C_CR2_START
 | 
FMPI2C_CR2_RD_WRN
)

	)

384 
	#FMPI2C_Gíî©e_Sèπ_Wrôe
 
FMPI2C_CR2_START


	)

387 
	#IS_START_STOP_MODE
(
MODE
Ë(((MODEË=
FMPI2C_Gíî©e_St›
Ë|| \

	)

388 ((
MODE
Ë=
FMPI2C_Gíî©e_Sèπ_Ród
) || \

389 ((
MODE
Ë=
FMPI2C_Gíî©e_Sèπ_Wrôe
) || \

390 ((
MODE
Ë=
FMPI2C_No_SèπSt›
))

406 
FMPI2C_DeInô
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
);

407 
FMPI2C_Inô
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
FMPI2C_InôTy≥Def
* 
FMPI2C_InôSåu˘
);

408 
FMPI2C_Såu˘Inô
(
FMPI2C_InôTy≥Def
* 
FMPI2C_InôSåu˘
);

409 
FMPI2C_Cmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

410 
FMPI2C_So·w¨eRe£tCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
);

411 
FMPI2C_ITC⁄fig
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt32_t
 
FMPI2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

412 
FMPI2C_SåëchClockCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

413 
FMPI2C_St›ModeCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

414 
FMPI2C_DuÆAddªssCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

415 
FMPI2C_OwnAddªss2C⁄fig
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt16_t
 
Addªss
, 
uöt8_t
 
Mask
);

416 
FMPI2C_GíîÆCÆlCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

417 
FMPI2C_SœveByãC⁄åﬁCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

418 
FMPI2C_SœveAddªssC⁄fig
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt16_t
 
Addªss
);

419 
FMPI2C_10BôAddªssögModeCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

422 
FMPI2C_AutoEndCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

423 
FMPI2C_RñﬂdCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

424 
FMPI2C_NumbîOfByãsC⁄fig
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt8_t
 
Numbî_Byãs
);

425 
FMPI2C_Ma°îReque°C⁄fig
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt16_t
 
FMPI2C_Dúe˘i⁄
);

426 
FMPI2C_Gíî©eSTART
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

427 
FMPI2C_Gíî©eSTOP
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

428 
FMPI2C_10BôAddªssHódîCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

429 
FMPI2C_AcknowÀdgeC⁄fig
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

430 
uöt8_t
 
FMPI2C_GëAddªssM©ched
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
);

431 
uöt16_t
 
FMPI2C_GëTøns„rDúe˘i⁄
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
);

432 
FMPI2C_Tøns„rH™dlög
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt16_t
 
Addªss
, 
uöt8_t
 
Numbî_Byãs
, 
uöt32_t
 
RñﬂdEndMode
, uöt32_à
SèπSt›Mode
);

435 
FMPI2C_SMBusAÀπCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

436 
FMPI2C_ClockTimeoutCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

437 
FMPI2C_ExãndedClockTimeoutCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

438 
FMPI2C_IdÀClockTimeoutCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

439 
FMPI2C_TimeoutAC⁄fig
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt16_t
 
Timeout
);

440 
FMPI2C_TimeoutBC⁄fig
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt16_t
 
Timeout
);

441 
FMPI2C_CÆcuœãPEC
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

442 
FMPI2C_PECReque°Cmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

443 
uöt8_t
 
FMPI2C_GëPEC
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
);

446 
uöt32_t
 
FMPI2C_RódRegi°î
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt8_t
 
FMPI2C_Regi°î
);

449 
FMPI2C_SídD©a
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt8_t
 
D©a
);

450 
uöt8_t
 
FMPI2C_Re˚iveD©a
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
);

453 
FMPI2C_DMACmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt32_t
 
FMPI2C_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

456 
FœgSètus
 
FMPI2C_GëFœgSètus
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt32_t
 
FMPI2C_FLAG
);

457 
FMPI2C_CÀ¨Fœg
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt32_t
 
FMPI2C_FLAG
);

458 
ITSètus
 
FMPI2C_GëITSètus
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt32_t
 
FMPI2C_IT
);

459 
FMPI2C_CÀ¨ITPídögBô
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt32_t
 
FMPI2C_IT
);

462 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_fsmc.h

30 #i‚de‡
__STM32F4xx_FSMC_H


31 
	#__STM32F4xx_FSMC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

55 
uöt32_t
 
FSMC_AddªssSëupTime
;

60 
uöt32_t
 
FSMC_AddªssHﬁdTime
;

65 
uöt32_t
 
FSMC_D©aSëupTime
;

70 
uöt32_t
 
FSMC_BusTu∫AroundDuøti⁄
;

75 
uöt32_t
 
FSMC_CLKDivisi⁄
;

79 
uöt32_t
 
FSMC_D©aL©ícy
;

87 
uöt32_t
 
FSMC_Ac˚ssMode
;

89 }
	tFSMC_NORSRAMTimögInôTy≥Def
;

96 
uöt32_t
 
FSMC_B™k
;

99 
uöt32_t
 
FSMC_D©aAddªssMux
;

103 
uöt32_t
 
FSMC_Mem‹yTy≥
;

107 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

110 
uöt32_t
 
FSMC_Bur°Ac˚ssMode
;

114 
uöt32_t
 
FSMC_Asynchr⁄ousWaô
;

118 
uöt32_t
 
FSMC_WaôSig«lPﬁ¨ôy
;

122 
uöt32_t
 
FSMC_WøpMode
;

126 
uöt32_t
 
FSMC_WaôSig«lA˘ive
;

131 
uöt32_t
 
FSMC_WrôeO≥øti⁄
;

134 
uöt32_t
 
FSMC_WaôSig«l
;

138 
uöt32_t
 
FSMC_ExãndedMode
;

141 
uöt32_t
 
FSMC_WrôeBur°
;

144 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_RódWrôeTimögSåu˘
;

146 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_WrôeTimögSåu˘
;

147 }
	tFSMC_NORSRAMInôTy≥Def
;

154 
uöt32_t
 
FSMC_SëupTime
;

160 
uöt32_t
 
FSMC_WaôSëupTime
;

166 
uöt32_t
 
FSMC_HﬁdSëupTime
;

173 
uöt32_t
 
FSMC_HiZSëupTime
;

178 }
	tFSMC_NAND_PCCARDTimögInôTy≥Def
;

185 
uöt32_t
 
FSMC_B™k
;

188 
uöt32_t
 
FSMC_Waô„©uª
;

191 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

194 
uöt32_t
 
FSMC_ECC
;

197 
uöt32_t
 
FSMC_ECCPageSize
;

200 
uöt32_t
 
FSMC_TCLRSëupTime
;

204 
uöt32_t
 
FSMC_TARSëupTime
;

208 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

210 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

211 }
	tFSMC_NANDInôTy≥Def
;

219 
uöt32_t
 
FSMC_Waô„©uª
;

222 
uöt32_t
 
FSMC_TCLRSëupTime
;

226 
uöt32_t
 
FSMC_TARSëupTime
;

231 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

233 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

235 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_IOS∑˚TimögSåu˘
;

236 }
	tFSMC_PCCARDInôTy≥Def
;

247 
	#FSMC_B™k1_NORSRAM1
 ((
uöt32_t
)0x00000000)

	)

248 
	#FSMC_B™k1_NORSRAM2
 ((
uöt32_t
)0x00000002)

	)

249 
	#FSMC_B™k1_NORSRAM3
 ((
uöt32_t
)0x00000004)

	)

250 
	#FSMC_B™k1_NORSRAM4
 ((
uöt32_t
)0x00000006)

	)

258 
	#FSMC_B™k2_NAND
 ((
uöt32_t
)0x00000010)

	)

259 
	#FSMC_B™k3_NAND
 ((
uöt32_t
)0x00000100)

	)

267 
	#FSMC_B™k4_PCCARD
 ((
uöt32_t
)0x00001000)

	)

272 
	#IS_FSMC_NORSRAM_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k1_NORSRAM1
Ë|| \

	)

273 ((
BANK
Ë=
FSMC_B™k1_NORSRAM2
) || \

274 ((
BANK
Ë=
FSMC_B™k1_NORSRAM3
) || \

275 ((
BANK
Ë=
FSMC_B™k1_NORSRAM4
))

277 
	#IS_FSMC_NAND_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

278 ((
BANK
Ë=
FSMC_B™k3_NAND
))

280 
	#IS_FSMC_GETFLAG_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

281 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

282 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

284 
	#IS_FSMC_IT_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
Ë|| \

	)

285 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

286 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

296 
	#FSMC_D©aAddªssMux_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

297 
	#FSMC_D©aAddªssMux_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

298 
	#IS_FSMC_MUX
(
MUX
Ë(((MUXË=
FSMC_D©aAddªssMux_DißbÀ
Ë|| \

	)

299 ((
MUX
Ë=
FSMC_D©aAddªssMux_E«bÀ
))

308 
	#FSMC_Mem‹yTy≥_SRAM
 ((
uöt32_t
)0x00000000)

	)

309 
	#FSMC_Mem‹yTy≥_PSRAM
 ((
uöt32_t
)0x00000004)

	)

310 
	#FSMC_Mem‹yTy≥_NOR
 ((
uöt32_t
)0x00000008)

	)

311 
	#IS_FSMC_MEMORY
(
MEMORY
Ë(((MEMORYË=
FSMC_Mem‹yTy≥_SRAM
Ë|| \

	)

312 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_PSRAM
)|| \

313 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_NOR
))

322 
	#FSMC_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

323 
	#FSMC_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

324 
	#IS_FSMC_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FSMC_Mem‹yD©aWidth_8b
Ë|| \

	)

325 ((
WIDTH
Ë=
FSMC_Mem‹yD©aWidth_16b
))

334 
	#FSMC_Bur°Ac˚ssMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

335 
	#FSMC_Bur°Ac˚ssMode_E«bÀ
 ((
uöt32_t
)0x00000100)

	)

336 
	#IS_FSMC_BURSTMODE
(
STATE
Ë(((STATEË=
FSMC_Bur°Ac˚ssMode_DißbÀ
Ë|| \

	)

337 ((
STATE
Ë=
FSMC_Bur°Ac˚ssMode_E«bÀ
))

345 
	#FSMC_Asynchr⁄ousWaô_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

346 
	#FSMC_Asynchr⁄ousWaô_E«bÀ
 ((
uöt32_t
)0x00008000)

	)

347 
	#IS_FSMC_ASYNWAIT
(
STATE
Ë(((STATEË=
FSMC_Asynchr⁄ousWaô_DißbÀ
Ë|| \

	)

348 ((
STATE
Ë=
FSMC_Asynchr⁄ousWaô_E«bÀ
))

356 
	#FSMC_WaôSig«lPﬁ¨ôy_Low
 ((
uöt32_t
)0x00000000)

	)

357 
	#FSMC_WaôSig«lPﬁ¨ôy_High
 ((
uöt32_t
)0x00000200)

	)

358 
	#IS_FSMC_WAIT_POLARITY
(
POLARITY
Ë(((POLARITYË=
FSMC_WaôSig«lPﬁ¨ôy_Low
Ë|| \

	)

359 ((
POLARITY
Ë=
FSMC_WaôSig«lPﬁ¨ôy_High
))

367 
	#FSMC_WøpMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

368 
	#FSMC_WøpMode_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

369 
	#IS_FSMC_WRAP_MODE
(
MODE
Ë(((MODEË=
FSMC_WøpMode_DißbÀ
Ë|| \

	)

370 ((
MODE
Ë=
FSMC_WøpMode_E«bÀ
))

378 
	#FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
 ((
uöt32_t
)0x00000000)

	)

379 
	#FSMC_WaôSig«lA˘ive_DurögWaôSèã
 ((
uöt32_t
)0x00000800)

	)

380 
	#IS_FSMC_WAIT_SIGNAL_ACTIVE
(
ACTIVE
Ë(((ACTIVEË=
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
Ë|| \

	)

381 ((
ACTIVE
Ë=
FSMC_WaôSig«lA˘ive_DurögWaôSèã
))

389 
	#FSMC_WrôeO≥øti⁄_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

390 
	#FSMC_WrôeO≥øti⁄_E«bÀ
 ((
uöt32_t
)0x00001000)

	)

391 
	#IS_FSMC_WRITE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
FSMC_WrôeO≥øti⁄_DißbÀ
Ë|| \

	)

392 ((
OPERATION
Ë=
FSMC_WrôeO≥øti⁄_E«bÀ
))

400 
	#FSMC_WaôSig«l_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

401 
	#FSMC_WaôSig«l_E«bÀ
 ((
uöt32_t
)0x00002000)

	)

402 
	#IS_FSMC_WAITE_SIGNAL
(
SIGNAL
Ë(((SIGNALË=
FSMC_WaôSig«l_DißbÀ
Ë|| \

	)

403 ((
SIGNAL
Ë=
FSMC_WaôSig«l_E«bÀ
))

411 
	#FSMC_ExãndedMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

412 
	#FSMC_ExãndedMode_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

414 
	#IS_FSMC_EXTENDED_MODE
(
MODE
Ë(((MODEË=
FSMC_ExãndedMode_DißbÀ
Ë|| \

	)

415 ((
MODE
Ë=
FSMC_ExãndedMode_E«bÀ
))

424 
	#FSMC_WrôeBur°_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

425 
	#FSMC_WrôeBur°_E«bÀ
 ((
uöt32_t
)0x00080000)

	)

426 
	#IS_FSMC_WRITE_BURST
(
BURST
Ë(((BURSTË=
FSMC_WrôeBur°_DißbÀ
Ë|| \

	)

427 ((
BURST
Ë=
FSMC_WrôeBur°_E«bÀ
))

435 
	#IS_FSMC_ADDRESS_SETUP_TIME
(
TIME
Ë((TIMEË<0xF)

	)

443 
	#IS_FSMC_ADDRESS_HOLD_TIME
(
TIME
Ë((TIMEË<0xF)

	)

451 
	#IS_FSMC_DATASETUP_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<0xFF))

	)

459 
	#IS_FSMC_TURNAROUND_TIME
(
TIME
Ë((TIMEË<0xF)

	)

467 
	#IS_FSMC_CLK_DIV
(
DIV
Ë((DIVË<0xF)

	)

475 
	#IS_FSMC_DATA_LATENCY
(
LATENCY
Ë((LATENCYË<0xF)

	)

483 
	#FSMC_Ac˚ssMode_A
 ((
uöt32_t
)0x00000000)

	)

484 
	#FSMC_Ac˚ssMode_B
 ((
uöt32_t
)0x10000000)

	)

485 
	#FSMC_Ac˚ssMode_C
 ((
uöt32_t
)0x20000000)

	)

486 
	#FSMC_Ac˚ssMode_D
 ((
uöt32_t
)0x30000000)

	)

487 
	#IS_FSMC_ACCESS_MODE
(
MODE
Ë(((MODEË=
FSMC_Ac˚ssMode_A
Ë|| \

	)

488 ((
MODE
Ë=
FSMC_Ac˚ssMode_B
) || \

489 ((
MODE
Ë=
FSMC_Ac˚ssMode_C
) || \

490 ((
MODE
Ë=
FSMC_Ac˚ssMode_D
))

506 
	#FSMC_Waô„©uª_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

507 
	#FSMC_Waô„©uª_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

508 
	#IS_FSMC_WAIT_FEATURE
(
FEATURE
Ë(((FEATUREË=
FSMC_Waô„©uª_DißbÀ
Ë|| \

	)

509 ((
FEATURE
Ë=
FSMC_Waô„©uª_E«bÀ
))

518 
	#FSMC_ECC_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

519 
	#FSMC_ECC_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

520 
	#IS_FSMC_ECC_STATE
(
STATE
Ë(((STATEË=
FSMC_ECC_DißbÀ
Ë|| \

	)

521 ((
STATE
Ë=
FSMC_ECC_E«bÀ
))

529 
	#FSMC_ECCPageSize_256Byãs
 ((
uöt32_t
)0x00000000)

	)

530 
	#FSMC_ECCPageSize_512Byãs
 ((
uöt32_t
)0x00020000)

	)

531 
	#FSMC_ECCPageSize_1024Byãs
 ((
uöt32_t
)0x00040000)

	)

532 
	#FSMC_ECCPageSize_2048Byãs
 ((
uöt32_t
)0x00060000)

	)

533 
	#FSMC_ECCPageSize_4096Byãs
 ((
uöt32_t
)0x00080000)

	)

534 
	#FSMC_ECCPageSize_8192Byãs
 ((
uöt32_t
)0x000A0000)

	)

535 
	#IS_FSMC_ECCPAGE_SIZE
(
SIZE
Ë(((SIZEË=
FSMC_ECCPageSize_256Byãs
Ë|| \

	)

536 ((
SIZE
Ë=
FSMC_ECCPageSize_512Byãs
) || \

537 ((
SIZE
Ë=
FSMC_ECCPageSize_1024Byãs
) || \

538 ((
SIZE
Ë=
FSMC_ECCPageSize_2048Byãs
) || \

539 ((
SIZE
Ë=
FSMC_ECCPageSize_4096Byãs
) || \

540 ((
SIZE
Ë=
FSMC_ECCPageSize_8192Byãs
))

548 
	#IS_FSMC_TCLR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

556 
	#IS_FSMC_TAR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

564 
	#IS_FSMC_SETUP_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

572 
	#IS_FSMC_WAIT_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

580 
	#IS_FSMC_HOLD_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

588 
	#IS_FSMC_HIZ_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

596 
	#FSMC_IT_RisögEdge
 ((
uöt32_t
)0x00000008)

	)

597 
	#FSMC_IT_Levñ
 ((
uöt32_t
)0x00000010)

	)

598 
	#FSMC_IT_FÆlögEdge
 ((
uöt32_t
)0x00000020)

	)

599 
	#IS_FSMC_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFFC7Ë=0x00000000Ë&& ((ITË!0x00000000))

	)

600 
	#IS_FSMC_GET_IT
(
IT
Ë(((ITË=
FSMC_IT_RisögEdge
Ë|| \

	)

601 ((
IT
Ë=
FSMC_IT_Levñ
) || \

602 ((
IT
Ë=
FSMC_IT_FÆlögEdge
))

610 
	#FSMC_FLAG_RisögEdge
 ((
uöt32_t
)0x00000001)

	)

611 
	#FSMC_FLAG_Levñ
 ((
uöt32_t
)0x00000002)

	)

612 
	#FSMC_FLAG_FÆlögEdge
 ((
uöt32_t
)0x00000004)

	)

613 
	#FSMC_FLAG_FEMPT
 ((
uöt32_t
)0x00000040)

	)

614 
	#IS_FSMC_GET_FLAG
(
FLAG
Ë(((FLAGË=
FSMC_FLAG_RisögEdge
Ë|| \

	)

615 ((
FLAG
Ë=
FSMC_FLAG_Levñ
) || \

616 ((
FLAG
Ë=
FSMC_FLAG_FÆlögEdge
) || \

617 ((
FLAG
Ë=
FSMC_FLAG_FEMPT
))

619 
	#IS_FSMC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFF8Ë=0x00000000Ë&& ((FLAGË!0x00000000))

	)

636 
FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
);

637 
FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

638 
FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

639 
FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

642 
FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
);

643 
FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

644 
FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

645 
FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

646 
FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

647 
uöt32_t
 
FSMC_GëECC
(uöt32_à
FSMC_B™k
);

650 
FSMC_PCCARDDeInô
();

651 
FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

652 
FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

653 
FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

656 
FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

657 
FœgSètus
 
FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

658 
FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

659 
ITSètus
 
FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

660 
FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

662 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_gpio.h

30 #i‚de‡
__STM32F4xx_GPIO_H


31 
	#__STM32F4xx_GPIO_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

50 
	#IS_GPIO_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
GPIOA
Ë|| \

	)

51 ((
PERIPH
Ë=
GPIOB
) || \

52 ((
PERIPH
Ë=
GPIOC
) || \

53 ((
PERIPH
Ë=
GPIOD
) || \

54 ((
PERIPH
Ë=
GPIOE
) || \

55 ((
PERIPH
Ë=
GPIOF
) || \

56 ((
PERIPH
Ë=
GPIOG
) || \

57 ((
PERIPH
Ë=
GPIOH
) || \

58 ((
PERIPH
Ë=
GPIOI
) || \

59 ((
PERIPH
Ë=
GPIOJ
) || \

60 ((
PERIPH
Ë=
GPIOK
))

67 
GPIO_Mode_IN
 = 0x00,

68 
GPIO_Mode_OUT
 = 0x01,

69 
GPIO_Mode_AF
 = 0x02,

70 
GPIO_Mode_AN
 = 0x03

71 }
	tGPIOMode_Ty≥Def
;

72 
	#IS_GPIO_MODE
(
MODE
Ë(((MODEË=
GPIO_Mode_IN
Ë|| ((MODEË=
GPIO_Mode_OUT
Ë|| \

	)

73 ((
MODE
Ë=
GPIO_Mode_AF
)|| ((MODEË=
GPIO_Mode_AN
))

80 
GPIO_OTy≥_PP
 = 0x00,

81 
GPIO_OTy≥_OD
 = 0x01

82 }
	tGPIOOTy≥_Ty≥Def
;

83 
	#IS_GPIO_OTYPE
(
OTYPE
Ë(((OTYPEË=
GPIO_OTy≥_PP
Ë|| ((OTYPEË=
GPIO_OTy≥_OD
))

	)

91 
GPIO_Low_S≥ed
 = 0x00,

92 
GPIO_Medium_S≥ed
 = 0x01,

93 
GPIO_Fa°_S≥ed
 = 0x02,

94 
GPIO_High_S≥ed
 = 0x03

95 }
	tGPIOS≥ed_Ty≥Def
;

98 
	#GPIO_S≥ed_2MHz
 
GPIO_Low_S≥ed


	)

99 
	#GPIO_S≥ed_25MHz
 
GPIO_Medium_S≥ed


	)

100 
	#GPIO_S≥ed_50MHz
 
GPIO_Fa°_S≥ed


	)

101 
	#GPIO_S≥ed_100MHz
 
GPIO_High_S≥ed


	)

103 
	#IS_GPIO_SPEED
(
SPEED
Ë(((SPEEDË=
GPIO_Low_S≥ed
Ë|| ((SPEEDË=
GPIO_Medium_S≥ed
Ë|| \

	)

104 ((
SPEED
Ë=
GPIO_Fa°_S≥ed
)|| ((SPEEDË=
GPIO_High_S≥ed
))

111 
GPIO_PuPd_NOPULL
 = 0x00,

112 
GPIO_PuPd_UP
 = 0x01,

113 
GPIO_PuPd_DOWN
 = 0x02

114 }
	tGPIOPuPd_Ty≥Def
;

115 
	#IS_GPIO_PUPD
(
PUPD
Ë(((PUPDË=
GPIO_PuPd_NOPULL
Ë|| ((PUPDË=
GPIO_PuPd_UP
Ë|| \

	)

116 ((
PUPD
Ë=
GPIO_PuPd_DOWN
))

123 
Bô_RESET
 = 0,

124 
Bô_SET


125 }
	tBôA˘i⁄
;

126 
	#IS_GPIO_BIT_ACTION
(
ACTION
Ë(((ACTIONË=
Bô_RESET
Ë|| ((ACTIONË=
Bô_SET
))

	)

134 
uöt32_t
 
GPIO_Pö
;

137 
GPIOMode_Ty≥Def
 
GPIO_Mode
;

140 
GPIOS≥ed_Ty≥Def
 
GPIO_S≥ed
;

143 
GPIOOTy≥_Ty≥Def
 
GPIO_OTy≥
;

146 
GPIOPuPd_Ty≥Def
 
GPIO_PuPd
;

148 }
	tGPIO_InôTy≥Def
;

159 
	#GPIO_Pö_0
 ((
uöt16_t
)0x0001Ë

	)

160 
	#GPIO_Pö_1
 ((
uöt16_t
)0x0002Ë

	)

161 
	#GPIO_Pö_2
 ((
uöt16_t
)0x0004Ë

	)

162 
	#GPIO_Pö_3
 ((
uöt16_t
)0x0008Ë

	)

163 
	#GPIO_Pö_4
 ((
uöt16_t
)0x0010Ë

	)

164 
	#GPIO_Pö_5
 ((
uöt16_t
)0x0020Ë

	)

165 
	#GPIO_Pö_6
 ((
uöt16_t
)0x0040Ë

	)

166 
	#GPIO_Pö_7
 ((
uöt16_t
)0x0080Ë

	)

167 
	#GPIO_Pö_8
 ((
uöt16_t
)0x0100Ë

	)

168 
	#GPIO_Pö_9
 ((
uöt16_t
)0x0200Ë

	)

169 
	#GPIO_Pö_10
 ((
uöt16_t
)0x0400Ë

	)

170 
	#GPIO_Pö_11
 ((
uöt16_t
)0x0800Ë

	)

171 
	#GPIO_Pö_12
 ((
uöt16_t
)0x1000Ë

	)

172 
	#GPIO_Pö_13
 ((
uöt16_t
)0x2000Ë

	)

173 
	#GPIO_Pö_14
 ((
uöt16_t
)0x4000Ë

	)

174 
	#GPIO_Pö_15
 ((
uöt16_t
)0x8000Ë

	)

175 
	#GPIO_Pö_AŒ
 ((
uöt16_t
)0xFFFFË

	)

177 
	#GPIO_PIN_MASK
 ((
uöt32_t
)0x0000FFFFË

	)

178 
	#IS_GPIO_PIN
(
PIN
Ë(((PINË& 
GPIO_PIN_MASK
 ) !(
uöt32_t
)0x00)

	)

179 
	#IS_GET_GPIO_PIN
(
PIN
Ë(((PINË=
GPIO_Pö_0
Ë|| \

	)

180 ((
PIN
Ë=
GPIO_Pö_1
) || \

181 ((
PIN
Ë=
GPIO_Pö_2
) || \

182 ((
PIN
Ë=
GPIO_Pö_3
) || \

183 ((
PIN
Ë=
GPIO_Pö_4
) || \

184 ((
PIN
Ë=
GPIO_Pö_5
) || \

185 ((
PIN
Ë=
GPIO_Pö_6
) || \

186 ((
PIN
Ë=
GPIO_Pö_7
) || \

187 ((
PIN
Ë=
GPIO_Pö_8
) || \

188 ((
PIN
Ë=
GPIO_Pö_9
) || \

189 ((
PIN
Ë=
GPIO_Pö_10
) || \

190 ((
PIN
Ë=
GPIO_Pö_11
) || \

191 ((
PIN
Ë=
GPIO_Pö_12
) || \

192 ((
PIN
Ë=
GPIO_Pö_13
) || \

193 ((
PIN
Ë=
GPIO_Pö_14
) || \

194 ((
PIN
Ë=
GPIO_Pö_15
))

203 
	#GPIO_PöSour˚0
 ((
uöt8_t
)0x00)

	)

204 
	#GPIO_PöSour˚1
 ((
uöt8_t
)0x01)

	)

205 
	#GPIO_PöSour˚2
 ((
uöt8_t
)0x02)

	)

206 
	#GPIO_PöSour˚3
 ((
uöt8_t
)0x03)

	)

207 
	#GPIO_PöSour˚4
 ((
uöt8_t
)0x04)

	)

208 
	#GPIO_PöSour˚5
 ((
uöt8_t
)0x05)

	)

209 
	#GPIO_PöSour˚6
 ((
uöt8_t
)0x06)

	)

210 
	#GPIO_PöSour˚7
 ((
uöt8_t
)0x07)

	)

211 
	#GPIO_PöSour˚8
 ((
uöt8_t
)0x08)

	)

212 
	#GPIO_PöSour˚9
 ((
uöt8_t
)0x09)

	)

213 
	#GPIO_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

214 
	#GPIO_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

215 
	#GPIO_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

216 
	#GPIO_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

217 
	#GPIO_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

218 
	#GPIO_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

220 
	#IS_GPIO_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
GPIO_PöSour˚0
Ë|| \

	)

221 ((
PINSOURCE
Ë=
GPIO_PöSour˚1
) || \

222 ((
PINSOURCE
Ë=
GPIO_PöSour˚2
) || \

223 ((
PINSOURCE
Ë=
GPIO_PöSour˚3
) || \

224 ((
PINSOURCE
Ë=
GPIO_PöSour˚4
) || \

225 ((
PINSOURCE
Ë=
GPIO_PöSour˚5
) || \

226 ((
PINSOURCE
Ë=
GPIO_PöSour˚6
) || \

227 ((
PINSOURCE
Ë=
GPIO_PöSour˚7
) || \

228 ((
PINSOURCE
Ë=
GPIO_PöSour˚8
) || \

229 ((
PINSOURCE
Ë=
GPIO_PöSour˚9
) || \

230 ((
PINSOURCE
Ë=
GPIO_PöSour˚10
) || \

231 ((
PINSOURCE
Ë=
GPIO_PöSour˚11
) || \

232 ((
PINSOURCE
Ë=
GPIO_PöSour˚12
) || \

233 ((
PINSOURCE
Ë=
GPIO_PöSour˚13
) || \

234 ((
PINSOURCE
Ë=
GPIO_PöSour˚14
) || \

235 ((
PINSOURCE
Ë=
GPIO_PöSour˚15
))

246 
	#GPIO_AF_RTC_50Hz
 ((
uöt8_t
)0x00Ë

	)

247 
	#GPIO_AF_MCO
 ((
uöt8_t
)0x00Ë

	)

248 
	#GPIO_AF_TAMPER
 ((
uöt8_t
)0x00Ë

	)

249 
	#GPIO_AF_SWJ
 ((
uöt8_t
)0x00Ë

	)

250 
	#GPIO_AF_TRACE
 ((
uöt8_t
)0x00Ë

	)

251 #i‡
deföed
 (
STM32F446xx
)

252 
	#GPIO_AF0_TIM2
 ((
uöt8_t
)0x00Ë

	)

258 
	#GPIO_AF_TIM1
 ((
uöt8_t
)0x01Ë

	)

259 
	#GPIO_AF_TIM2
 ((
uöt8_t
)0x01Ë

	)

264 
	#GPIO_AF_TIM3
 ((
uöt8_t
)0x02Ë

	)

265 
	#GPIO_AF_TIM4
 ((
uöt8_t
)0x02Ë

	)

266 
	#GPIO_AF_TIM5
 ((
uöt8_t
)0x02Ë

	)

271 
	#GPIO_AF_TIM8
 ((
uöt8_t
)0x03Ë

	)

272 
	#GPIO_AF_TIM9
 ((
uöt8_t
)0x03Ë

	)

273 
	#GPIO_AF_TIM10
 ((
uöt8_t
)0x03Ë

	)

274 
	#GPIO_AF_TIM11
 ((
uöt8_t
)0x03Ë

	)

275 #i‡
deföed
 (
STM32F446xx
)

276 
	#GPIO_AF3_CEC
 ((
uöt8_t
)0x03Ë

	)

281 
	#GPIO_AF_I2C1
 ((
uöt8_t
)0x04Ë

	)

282 
	#GPIO_AF_I2C2
 ((
uöt8_t
)0x04Ë

	)

283 
	#GPIO_AF_I2C3
 ((
uöt8_t
)0x04Ë

	)

284 #i‡
deföed
 (
STM32F446xx
)

285 
	#GPIO_AF4_CEC
 ((
uöt8_t
)0x04Ë

	)

286 
	#GPIO_AF_FMPI2C
 ((
uöt8_t
)0x04Ë

	)

292 
	#GPIO_AF_SPI1
 ((
uöt8_t
)0x05Ë

	)

293 
	#GPIO_AF_SPI2
 ((
uöt8_t
)0x05Ë

	)

294 
	#GPIO_AF5_SPI3
 ((
uöt8_t
)0x05Ë

	)

295 
	#GPIO_AF_SPI4
 ((
uöt8_t
)0x05Ë

	)

296 
	#GPIO_AF_SPI5
 ((
uöt8_t
)0x05Ë

	)

297 
	#GPIO_AF_SPI6
 ((
uöt8_t
)0x05Ë

	)

302 
	#GPIO_AF_SPI3
 ((
uöt8_t
)0x06Ë

	)

303 
	#GPIO_AF6_SPI2
 ((
uöt8_t
)0x06Ë

	)

304 
	#GPIO_AF6_SPI4
 ((
uöt8_t
)0x06Ë

	)

305 
	#GPIO_AF6_SPI5
 ((
uöt8_t
)0x06Ë

	)

306 
	#GPIO_AF_SAI1
 ((
uöt8_t
)0x06Ë

	)

311 
	#GPIO_AF_USART1
 ((
uöt8_t
)0x07Ë

	)

312 
	#GPIO_AF_USART2
 ((
uöt8_t
)0x07Ë

	)

313 
	#GPIO_AF_USART3
 ((
uöt8_t
)0x07Ë

	)

314 
	#GPIO_AF7_SPI3
 ((
uöt8_t
)0x07Ë

	)

319 
	#GPIO_AF_I2S3ext
 
GPIO_AF7_SPI3


	)

324 
	#GPIO_AF_UART4
 ((
uöt8_t
)0x08Ë

	)

325 
	#GPIO_AF_UART5
 ((
uöt8_t
)0x08Ë

	)

326 
	#GPIO_AF_USART6
 ((
uöt8_t
)0x08Ë

	)

327 
	#GPIO_AF_UART7
 ((
uöt8_t
)0x08Ë

	)

328 
	#GPIO_AF_UART8
 ((
uöt8_t
)0x08Ë

	)

329 #i‡
deföed
 (
STM32F446xx
)

330 
	#GPIO_AF8_SAI2
 ((
uöt8_t
)0x08Ë

	)

331 
	#GPIO_AF_SPDIF
 ((
uöt8_t
)0x08Ë

	)

337 
	#GPIO_AF_CAN1
 ((
uöt8_t
)0x09Ë

	)

338 
	#GPIO_AF_CAN2
 ((
uöt8_t
)0x09Ë

	)

339 
	#GPIO_AF_TIM12
 ((
uöt8_t
)0x09Ë

	)

340 
	#GPIO_AF_TIM13
 ((
uöt8_t
)0x09Ë

	)

341 
	#GPIO_AF_TIM14
 ((
uöt8_t
)0x09Ë

	)

343 
	#GPIO_AF9_I2C2
 ((
uöt8_t
)0x09Ë

	)

344 
	#GPIO_AF9_I2C3
 ((
uöt8_t
)0x09Ë

	)

345 #i‡
deföed
 (
STM32F446xx
)

346 
	#GPIO_AF9_SAI2
 ((
uöt8_t
)0x09Ë

	)

348 
	#GPIO_AF9_LTDC
 ((
uöt8_t
)0x09Ë

	)

349 #i‡
deföed
 (
STM32F446xx
)

350 
	#GPIO_AF9_QUADSPI
 ((
uöt8_t
)0x09Ë

	)

355 
	#GPIO_AF_OTG_FS
 ((
uöt8_t
)0xAË

	)

356 
	#GPIO_AF_OTG_HS
 ((
uöt8_t
)0xAË

	)

357 #i‡
deföed
 (
STM32F446xx
)

358 
	#GPIO_AF10_SAI2
 ((
uöt8_t
)0x0AË

	)

360 #i‡
deföed
 (
STM32F446xx
)

361 
	#GPIO_AF10_QUADSPI
 ((
uöt8_t
)0x0AË

	)

366 
	#GPIO_AF_ETH
 ((
uöt8_t
)0x0BË

	)

371 #i‡
deföed
 (
STM32F40_41xxx
)

372 
	#GPIO_AF_FSMC
 ((
uöt8_t
)0xCË

	)

375 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
Ë|| deföed (
STM32F446xx
)

376 
	#GPIO_AF_FMC
 ((
uöt8_t
)0xCË

	)

379 
	#GPIO_AF_OTG_HS_FS
 ((
uöt8_t
)0xCË

	)

380 
	#GPIO_AF_SDIO
 ((
uöt8_t
)0xCË

	)

385 
	#GPIO_AF_DCMI
 ((
uöt8_t
)0x0DË

	)

390 
	#GPIO_AF_LTDC
 ((
uöt8_t
)0x0EË

	)

395 
	#GPIO_AF_EVENTOUT
 ((
uöt8_t
)0x0FË

	)

397 #i‡
deföed
 (
STM32F40_41xxx
)

398 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF_RTC_50Hz
Ë|| ((AFË=
GPIO_AF_TIM14
Ë|| \

	)

399 ((
AF
Ë=
GPIO_AF_MCO
Ë|| ((AFË=
GPIO_AF_TAMPER
) || \

400 ((
AF
Ë=
GPIO_AF_SWJ
Ë|| ((AFË=
GPIO_AF_TRACE
) || \

401 ((
AF
Ë=
GPIO_AF_TIM1
Ë|| ((AFË=
GPIO_AF_TIM2
) || \

402 ((
AF
Ë=
GPIO_AF_TIM3
Ë|| ((AFË=
GPIO_AF_TIM4
) || \

403 ((
AF
Ë=
GPIO_AF_TIM5
Ë|| ((AFË=
GPIO_AF_TIM8
) || \

404 ((
AF
Ë=
GPIO_AF_I2C1
Ë|| ((AFË=
GPIO_AF_I2C2
) || \

405 ((
AF
Ë=
GPIO_AF_I2C3
Ë|| ((AFË=
GPIO_AF_SPI1
) || \

406 ((
AF
Ë=
GPIO_AF_SPI2
Ë|| ((AFË=
GPIO_AF_TIM13
) || \

407 ((
AF
Ë=
GPIO_AF_SPI3
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

408 ((
AF
Ë=
GPIO_AF_USART1
Ë|| ((AFË=
GPIO_AF_USART2
) || \

409 ((
AF
Ë=
GPIO_AF_USART3
Ë|| ((AFË=
GPIO_AF_UART4
) || \

410 ((
AF
Ë=
GPIO_AF_UART5
Ë|| ((AFË=
GPIO_AF_USART6
) || \

411 ((
AF
Ë=
GPIO_AF_CAN1
Ë|| ((AFË=
GPIO_AF_CAN2
) || \

412 ((
AF
Ë=
GPIO_AF_OTG_FS
Ë|| ((AFË=
GPIO_AF_OTG_HS
) || \

413 ((
AF
Ë=
GPIO_AF_ETH
Ë|| ((AFË=
GPIO_AF_OTG_HS_FS
) || \

414 ((
AF
Ë=
GPIO_AF_SDIO
Ë|| ((AFË=
GPIO_AF_DCMI
) || \

415 ((
AF
Ë=
GPIO_AF_EVENTOUT
Ë|| ((AFË=
GPIO_AF_FSMC
))

418 #i‡
deföed
 (
STM32F401xx
)

419 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF_RTC_50Hz
Ë|| ((AFË=
GPIO_AF_TIM14
Ë|| \

	)

420 ((
AF
Ë=
GPIO_AF_MCO
Ë|| ((AFË=
GPIO_AF_TAMPER
) || \

421 ((
AF
Ë=
GPIO_AF_SWJ
Ë|| ((AFË=
GPIO_AF_TRACE
) || \

422 ((
AF
Ë=
GPIO_AF_TIM1
Ë|| ((AFË=
GPIO_AF_TIM2
) || \

423 ((
AF
Ë=
GPIO_AF_TIM3
Ë|| ((AFË=
GPIO_AF_TIM4
) || \

424 ((
AF
Ë=
GPIO_AF_TIM5
Ë|| ((AFË=
GPIO_AF_TIM8
) || \

425 ((
AF
Ë=
GPIO_AF_I2C1
Ë|| ((AFË=
GPIO_AF_I2C2
) || \

426 ((
AF
Ë=
GPIO_AF_I2C3
Ë|| ((AFË=
GPIO_AF_SPI1
) || \

427 ((
AF
Ë=
GPIO_AF_SPI2
Ë|| ((AFË=
GPIO_AF_TIM13
) || \

428 ((
AF
Ë=
GPIO_AF_SPI3
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

429 ((
AF
Ë=
GPIO_AF_USART1
Ë|| ((AFË=
GPIO_AF_USART2
) || \

430 ((
AF
Ë=
GPIO_AF_SDIO
Ë|| ((AFË=
GPIO_AF_USART6
) || \

431 ((
AF
Ë=
GPIO_AF_OTG_FS
Ë|| ((AFË=
GPIO_AF_OTG_HS
) || \

432 ((
AF
Ë=
GPIO_AF_EVENTOUT
Ë|| ((AFË=
GPIO_AF_SPI4
))

435 #i‡
deföed
 (
STM32F411xE
)

436 
	#IS_GPIO_AF
(
AF
Ë(((AFË< 16Ë&& ((AFË!11Ë&& ((AFË!13Ë&& ((AFË!14))

	)

439 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

440 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF_RTC_50Hz
Ë|| ((AFË=
GPIO_AF_TIM14
Ë|| \

	)

441 ((
AF
Ë=
GPIO_AF_MCO
Ë|| ((AFË=
GPIO_AF_TAMPER
) || \

442 ((
AF
Ë=
GPIO_AF_SWJ
Ë|| ((AFË=
GPIO_AF_TRACE
) || \

443 ((
AF
Ë=
GPIO_AF_TIM1
Ë|| ((AFË=
GPIO_AF_TIM2
) || \

444 ((
AF
Ë=
GPIO_AF_TIM3
Ë|| ((AFË=
GPIO_AF_TIM4
) || \

445 ((
AF
Ë=
GPIO_AF_TIM5
Ë|| ((AFË=
GPIO_AF_TIM8
) || \

446 ((
AF
Ë=
GPIO_AF_I2C1
Ë|| ((AFË=
GPIO_AF_I2C2
) || \

447 ((
AF
Ë=
GPIO_AF_I2C3
Ë|| ((AFË=
GPIO_AF_SPI1
) || \

448 ((
AF
Ë=
GPIO_AF_SPI2
Ë|| ((AFË=
GPIO_AF_TIM13
) || \

449 ((
AF
Ë=
GPIO_AF_SPI3
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

450 ((
AF
Ë=
GPIO_AF_USART1
Ë|| ((AFË=
GPIO_AF_USART2
) || \

451 ((
AF
Ë=
GPIO_AF_USART3
Ë|| ((AFË=
GPIO_AF_UART4
) || \

452 ((
AF
Ë=
GPIO_AF_UART5
Ë|| ((AFË=
GPIO_AF_USART6
) || \

453 ((
AF
Ë=
GPIO_AF_CAN1
Ë|| ((AFË=
GPIO_AF_CAN2
) || \

454 ((
AF
Ë=
GPIO_AF_OTG_FS
Ë|| ((AFË=
GPIO_AF_OTG_HS
) || \

455 ((
AF
Ë=
GPIO_AF_ETH
Ë|| ((AFË=
GPIO_AF_OTG_HS_FS
) || \

456 ((
AF
Ë=
GPIO_AF_SDIO
Ë|| ((AFË=
GPIO_AF_DCMI
) || \

457 ((
AF
Ë=
GPIO_AF_EVENTOUT
Ë|| ((AFË=
GPIO_AF_SPI4
) || \

458 ((
AF
Ë=
GPIO_AF_SPI5
Ë|| ((AFË=
GPIO_AF_SPI6
) || \

459 ((
AF
Ë=
GPIO_AF_UART7
Ë|| ((AFË=
GPIO_AF_UART8
) || \

460 ((
AF
Ë=
GPIO_AF_FMC
Ë|| ((AFË=
GPIO_AF_SAI1
) || \

461 ((
AF
Ë=
GPIO_AF_LTDC
))

464 #i‡
deföed
 (
STM32F446xx
)

465 
	#IS_GPIO_AF
(
AF
Ë(((AFË< 16Ë&& ((AFË!11Ë&& ((AFË!14))

	)

476 
	#GPIO_Mode_AIN
 
GPIO_Mode_AN


	)

478 
	#GPIO_AF_OTG1_FS
 
GPIO_AF_OTG_FS


	)

479 
	#GPIO_AF_OTG2_HS
 
GPIO_AF_OTG_HS


	)

480 
	#GPIO_AF_OTG2_FS
 
GPIO_AF_OTG_HS_FS


	)

494 
GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
);

497 
GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

498 
GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

499 
GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

502 
uöt8_t
 
GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

503 
uöt16_t
 
GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

504 
uöt8_t
 
GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

505 
uöt16_t
 
GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

506 
GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

507 
GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

508 
GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
);

509 
GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
);

510 
GPIO_ToggÀBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

513 
GPIO_PöAFC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_PöSour˚
, 
uöt8_t
 
GPIO_AF
);

515 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_hash.h

30 #i‚de‡
__STM32F4xx_HASH_H


31 
	#__STM32F4xx_HASH_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

55 
uöt32_t
 
HASH_AlgoSñe˘i⁄
;

57 
uöt32_t
 
HASH_AlgoMode
;

59 
uöt32_t
 
HASH_D©aTy≥
;

62 
uöt32_t
 
HASH_HMACKeyTy≥
;

64 }
	tHASH_InôTy≥Def
;

71 
uöt32_t
 
D©a
[8];

75 } 
	tHASH_MsgDige°
;

82 
uöt32_t
 
HASH_IMR
;

83 
uöt32_t
 
HASH_STR
;

84 
uöt32_t
 
HASH_CR
;

85 
uöt32_t
 
HASH_CSR
[54];

86 }
	tHASH_C⁄ãxt
;

97 
	#HASH_AlgoSñe˘i⁄_SHA1
 ((
uöt32_t
)0x0000Ë

	)

98 
	#HASH_AlgoSñe˘i⁄_SHA224
 
HASH_CR_ALGO_1


	)

99 
	#HASH_AlgoSñe˘i⁄_SHA256
 
HASH_CR_ALGO


	)

100 
	#HASH_AlgoSñe˘i⁄_MD5
 
HASH_CR_ALGO_0


	)

102 
	#IS_HASH_ALGOSELECTION
(
ALGOSELECTION
Ë(((ALGOSELECTIONË=
HASH_AlgoSñe˘i⁄_SHA1
Ë|| \

	)

103 ((
ALGOSELECTION
Ë=
HASH_AlgoSñe˘i⁄_SHA224
) || \

104 ((
ALGOSELECTION
Ë=
HASH_AlgoSñe˘i⁄_SHA256
) || \

105 ((
ALGOSELECTION
Ë=
HASH_AlgoSñe˘i⁄_MD5
))

113 
	#HASH_AlgoMode_HASH
 ((
uöt32_t
)0x00000000Ë

	)

114 
	#HASH_AlgoMode_HMAC
 
HASH_CR_MODE


	)

116 
	#IS_HASH_ALGOMODE
(
ALGOMODE
Ë(((ALGOMODEË=
HASH_AlgoMode_HASH
Ë|| \

	)

117 ((
ALGOMODE
Ë=
HASH_AlgoMode_HMAC
))

125 
	#HASH_D©aTy≥_32b
 ((
uöt32_t
)0x0000Ë

	)

126 
	#HASH_D©aTy≥_16b
 
HASH_CR_DATATYPE_0


	)

127 
	#HASH_D©aTy≥_8b
 
HASH_CR_DATATYPE_1


	)

128 
	#HASH_D©aTy≥_1b
 
HASH_CR_DATATYPE


	)

130 
	#IS_HASH_DATATYPE
(
DATATYPE
Ë(((DATATYPEË=
HASH_D©aTy≥_32b
)|| \

	)

131 ((
DATATYPE
Ë=
HASH_D©aTy≥_16b
)|| \

132 ((
DATATYPE
Ë=
HASH_D©aTy≥_8b
) || \

133 ((
DATATYPE
Ë=
HASH_D©aTy≥_1b
))

141 
	#HASH_HMACKeyTy≥_Sh‹tKey
 ((
uöt32_t
)0x00000000Ë

	)

142 
	#HASH_HMACKeyTy≥_L⁄gKey
 
HASH_CR_LKEY


	)

144 
	#IS_HASH_HMAC_KEYTYPE
(
KEYTYPE
Ë(((KEYTYPEË=
HASH_HMACKeyTy≥_Sh‹tKey
Ë|| \

	)

145 ((
KEYTYPE
Ë=
HASH_HMACKeyTy≥_L⁄gKey
))

153 
	#IS_HASH_VALIDBITSNUMBER
(
VALIDBITS
Ë((VALIDBITSË<0x1F)

	)

162 
	#HASH_IT_DINI
 
HASH_IMR_DINIM


	)

163 
	#HASH_IT_DCI
 
HASH_IMR_DCIM


	)

165 
	#IS_HASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFFFCË=0x00000000Ë&& ((ITË!0x00000000))

	)

166 
	#IS_HASH_GET_IT
(
IT
Ë(((ITË=
HASH_IT_DINI
Ë|| ((ITË=
HASH_IT_DCI
))

	)

175 
	#HASH_FLAG_DINIS
 
HASH_SR_DINIS


	)

176 
	#HASH_FLAG_DCIS
 
HASH_SR_DCIS


	)

177 
	#HASH_FLAG_DMAS
 
HASH_SR_DMAS


	)

178 
	#HASH_FLAG_BUSY
 
HASH_SR_BUSY


	)

179 
	#HASH_FLAG_DINNE
 
HASH_CR_DINNE


	)

181 
	#IS_HASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
HASH_FLAG_DINIS
Ë|| \

	)

182 ((
FLAG
Ë=
HASH_FLAG_DCIS
) || \

183 ((
FLAG
Ë=
HASH_FLAG_DMAS
) || \

184 ((
FLAG
Ë=
HASH_FLAG_BUSY
) || \

185 ((
FLAG
Ë=
HASH_FLAG_DINNE
))

187 
	#IS_HASH_CLEAR_FLAG
(
FLAG
)(((FLAGË=
HASH_FLAG_DINIS
Ë|| \

	)

188 ((
FLAG
Ë=
HASH_FLAG_DCIS
))

202 
HASH_DeInô
();

205 
HASH_Inô
(
HASH_InôTy≥Def
* 
HASH_InôSåu˘
);

206 
HASH_Såu˘Inô
(
HASH_InôTy≥Def
* 
HASH_InôSåu˘
);

207 
HASH_Re£t
();

210 
HASH_D©aIn
(
uöt32_t
 
D©a
);

211 
uöt8_t
 
HASH_GëInFIFOW‹dsNbr
();

212 
HASH_SëLa°W‹dVÆidBôsNbr
(
uöt16_t
 
VÆidNumbî
);

213 
HASH_SèπDige°
();

214 
HASH_AutoSèπDige°
(
Fun˘i⁄ÆSèã
 
NewSèã
);

215 
HASH_GëDige°
(
HASH_MsgDige°
* 
HASH_MesßgeDige°
);

218 
HASH_SaveC⁄ãxt
(
HASH_C⁄ãxt
* 
HASH_C⁄ãxtSave
);

219 
HASH_Re°‹eC⁄ãxt
(
HASH_C⁄ãxt
* 
HASH_C⁄ãxtRe°‹e
);

222 
HASH_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

225 
HASH_ITC⁄fig
(
uöt32_t
 
HASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

226 
FœgSètus
 
HASH_GëFœgSètus
(
uöt32_t
 
HASH_FLAG
);

227 
HASH_CÀ¨Fœg
(
uöt32_t
 
HASH_FLAG
);

228 
ITSètus
 
HASH_GëITSètus
(
uöt32_t
 
HASH_IT
);

229 
HASH_CÀ¨ITPídögBô
(
uöt32_t
 
HASH_IT
);

232 
Eº‹Sètus
 
HASH_SHA1
(
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
, uöt8_à
Ouçut
[20]);

233 
Eº‹Sètus
 
HMAC_SHA1
(
uöt8_t
 *
Key
, 
uöt32_t
 
KeyÀn
,

234 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
,

235 
uöt8_t
 
Ouçut
[20]);

238 
Eº‹Sètus
 
HASH_MD5
(
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
, uöt8_à
Ouçut
[16]);

239 
Eº‹Sètus
 
HMAC_MD5
(
uöt8_t
 *
Key
, 
uöt32_t
 
KeyÀn
,

240 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
,

241 
uöt8_t
 
Ouçut
[16]);

243 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_i2c.h

30 #i‚de‡
__STM32F4xx_I2C_H


31 
	#__STM32F4xx_I2C_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
I2C_ClockS≥ed
;

59 
uöt16_t
 
I2C_Mode
;

62 
uöt16_t
 
I2C_DutyCy˛e
;

65 
uöt16_t
 
I2C_OwnAddªss1
;

68 
uöt16_t
 
I2C_Ack
;

71 
uöt16_t
 
I2C_AcknowÀdgedAddªss
;

73 }
	tI2C_InôTy≥Def
;

81 
	#IS_I2C_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
I2C1
Ë|| \

	)

82 ((
PERIPH
Ë=
I2C2
) || \

83 ((
PERIPH
Ë=
I2C3
))

89 
	#IS_I2C_DIGITAL_FILTER
(
FILTER
Ë((FILTERË<0x0000000F)

	)

99 
	#I2C_Mode_I2C
 ((
uöt16_t
)0x0000)

	)

100 
	#I2C_Mode_SMBusDevi˚
 ((
uöt16_t
)0x0002)

	)

101 
	#I2C_Mode_SMBusHo°
 ((
uöt16_t
)0x000A)

	)

102 
	#IS_I2C_MODE
(
MODE
Ë(((MODEË=
I2C_Mode_I2C
Ë|| \

	)

103 ((
MODE
Ë=
I2C_Mode_SMBusDevi˚
) || \

104 ((
MODE
Ë=
I2C_Mode_SMBusHo°
))

113 
	#I2C_DutyCy˛e_16_9
 ((
uöt16_t
)0x4000Ë

	)

114 
	#I2C_DutyCy˛e_2
 ((
uöt16_t
)0xBFFFË

	)

115 
	#IS_I2C_DUTY_CYCLE
(
CYCLE
Ë(((CYCLEË=
I2C_DutyCy˛e_16_9
Ë|| \

	)

116 ((
CYCLE
Ë=
I2C_DutyCy˛e_2
))

125 
	#I2C_Ack_E«bÀ
 ((
uöt16_t
)0x0400)

	)

126 
	#I2C_Ack_DißbÀ
 ((
uöt16_t
)0x0000)

	)

127 
	#IS_I2C_ACK_STATE
(
STATE
Ë(((STATEË=
I2C_Ack_E«bÀ
Ë|| \

	)

128 ((
STATE
Ë=
I2C_Ack_DißbÀ
))

137 
	#I2C_Dúe˘i⁄_Tønsmôãr
 ((
uöt8_t
)0x00)

	)

138 
	#I2C_Dúe˘i⁄_Re˚ivî
 ((
uöt8_t
)0x01)

	)

139 
	#IS_I2C_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
I2C_Dúe˘i⁄_Tønsmôãr
Ë|| \

	)

140 ((
DIRECTION
Ë=
I2C_Dúe˘i⁄_Re˚ivî
))

149 
	#I2C_AcknowÀdgedAddªss_7bô
 ((
uöt16_t
)0x4000)

	)

150 
	#I2C_AcknowÀdgedAddªss_10bô
 ((
uöt16_t
)0xC000)

	)

151 
	#IS_I2C_ACKNOWLEDGE_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
I2C_AcknowÀdgedAddªss_7bô
Ë|| \

	)

152 ((
ADDRESS
Ë=
I2C_AcknowÀdgedAddªss_10bô
))

161 
	#I2C_Regi°î_CR1
 ((
uöt8_t
)0x00)

	)

162 
	#I2C_Regi°î_CR2
 ((
uöt8_t
)0x04)

	)

163 
	#I2C_Regi°î_OAR1
 ((
uöt8_t
)0x08)

	)

164 
	#I2C_Regi°î_OAR2
 ((
uöt8_t
)0x0C)

	)

165 
	#I2C_Regi°î_DR
 ((
uöt8_t
)0x10)

	)

166 
	#I2C_Regi°î_SR1
 ((
uöt8_t
)0x14)

	)

167 
	#I2C_Regi°î_SR2
 ((
uöt8_t
)0x18)

	)

168 
	#I2C_Regi°î_CCR
 ((
uöt8_t
)0x1C)

	)

169 
	#I2C_Regi°î_TRISE
 ((
uöt8_t
)0x20)

	)

170 
	#IS_I2C_REGISTER
(
REGISTER
Ë(((REGISTERË=
I2C_Regi°î_CR1
Ë|| \

	)

171 ((
REGISTER
Ë=
I2C_Regi°î_CR2
) || \

172 ((
REGISTER
Ë=
I2C_Regi°î_OAR1
) || \

173 ((
REGISTER
Ë=
I2C_Regi°î_OAR2
) || \

174 ((
REGISTER
Ë=
I2C_Regi°î_DR
) || \

175 ((
REGISTER
Ë=
I2C_Regi°î_SR1
) || \

176 ((
REGISTER
Ë=
I2C_Regi°î_SR2
) || \

177 ((
REGISTER
Ë=
I2C_Regi°î_CCR
) || \

178 ((
REGISTER
Ë=
I2C_Regi°î_TRISE
))

187 
	#I2C_NACKPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

188 
	#I2C_NACKPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

189 
	#IS_I2C_NACK_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_NACKPosôi⁄_Next
Ë|| \

	)

190 ((
POSITION
Ë=
I2C_NACKPosôi⁄_Cuºít
))

199 
	#I2C_SMBusAÀπ_Low
 ((
uöt16_t
)0x2000)

	)

200 
	#I2C_SMBusAÀπ_High
 ((
uöt16_t
)0xDFFF)

	)

201 
	#IS_I2C_SMBUS_ALERT
(
ALERT
Ë(((ALERTË=
I2C_SMBusAÀπ_Low
Ë|| \

	)

202 ((
ALERT
Ë=
I2C_SMBusAÀπ_High
))

211 
	#I2C_PECPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

212 
	#I2C_PECPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

213 
	#IS_I2C_PEC_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_PECPosôi⁄_Next
Ë|| \

	)

214 ((
POSITION
Ë=
I2C_PECPosôi⁄_Cuºít
))

223 
	#I2C_IT_BUF
 ((
uöt16_t
)0x0400)

	)

224 
	#I2C_IT_EVT
 ((
uöt16_t
)0x0200)

	)

225 
	#I2C_IT_ERR
 ((
uöt16_t
)0x0100)

	)

226 
	#IS_I2C_CONFIG_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF8FFË=0x00Ë&& ((ITË!0x00))

	)

235 
	#I2C_IT_SMBALERT
 ((
uöt32_t
)0x01008000)

	)

236 
	#I2C_IT_TIMEOUT
 ((
uöt32_t
)0x01004000)

	)

237 
	#I2C_IT_PECERR
 ((
uöt32_t
)0x01001000)

	)

238 
	#I2C_IT_OVR
 ((
uöt32_t
)0x01000800)

	)

239 
	#I2C_IT_AF
 ((
uöt32_t
)0x01000400)

	)

240 
	#I2C_IT_ARLO
 ((
uöt32_t
)0x01000200)

	)

241 
	#I2C_IT_BERR
 ((
uöt32_t
)0x01000100)

	)

242 
	#I2C_IT_TXE
 ((
uöt32_t
)0x06000080)

	)

243 
	#I2C_IT_RXNE
 ((
uöt32_t
)0x06000040)

	)

244 
	#I2C_IT_STOPF
 ((
uöt32_t
)0x02000010)

	)

245 
	#I2C_IT_ADD10
 ((
uöt32_t
)0x02000008)

	)

246 
	#I2C_IT_BTF
 ((
uöt32_t
)0x02000004)

	)

247 
	#I2C_IT_ADDR
 ((
uöt32_t
)0x02000002)

	)

248 
	#I2C_IT_SB
 ((
uöt32_t
)0x02000001)

	)

250 
	#IS_I2C_CLEAR_IT
(
IT
Ë((((ITË& (
uöt16_t
)0x20FFË=0x00Ë&& ((ITË!(uöt16_t)0x00))

	)

252 
	#IS_I2C_GET_IT
(
IT
Ë(((ITË=
I2C_IT_SMBALERT
Ë|| ((ITË=
I2C_IT_TIMEOUT
Ë|| \

	)

253 ((
IT
Ë=
I2C_IT_PECERR
Ë|| ((ITË=
I2C_IT_OVR
) || \

254 ((
IT
Ë=
I2C_IT_AF
Ë|| ((ITË=
I2C_IT_ARLO
) || \

255 ((
IT
Ë=
I2C_IT_BERR
Ë|| ((ITË=
I2C_IT_TXE
) || \

256 ((
IT
Ë=
I2C_IT_RXNE
Ë|| ((ITË=
I2C_IT_STOPF
) || \

257 ((
IT
Ë=
I2C_IT_ADD10
Ë|| ((ITË=
I2C_IT_BTF
) || \

258 ((
IT
Ë=
I2C_IT_ADDR
Ë|| ((ITË=
I2C_IT_SB
))

271 
	#I2C_FLAG_DUALF
 ((
uöt32_t
)0x00800000)

	)

272 
	#I2C_FLAG_SMBHOST
 ((
uöt32_t
)0x00400000)

	)

273 
	#I2C_FLAG_SMBDEFAULT
 ((
uöt32_t
)0x00200000)

	)

274 
	#I2C_FLAG_GENCALL
 ((
uöt32_t
)0x00100000)

	)

275 
	#I2C_FLAG_TRA
 ((
uöt32_t
)0x00040000)

	)

276 
	#I2C_FLAG_BUSY
 ((
uöt32_t
)0x00020000)

	)

277 
	#I2C_FLAG_MSL
 ((
uöt32_t
)0x00010000)

	)

283 
	#I2C_FLAG_SMBALERT
 ((
uöt32_t
)0x10008000)

	)

284 
	#I2C_FLAG_TIMEOUT
 ((
uöt32_t
)0x10004000)

	)

285 
	#I2C_FLAG_PECERR
 ((
uöt32_t
)0x10001000)

	)

286 
	#I2C_FLAG_OVR
 ((
uöt32_t
)0x10000800)

	)

287 
	#I2C_FLAG_AF
 ((
uöt32_t
)0x10000400)

	)

288 
	#I2C_FLAG_ARLO
 ((
uöt32_t
)0x10000200)

	)

289 
	#I2C_FLAG_BERR
 ((
uöt32_t
)0x10000100)

	)

290 
	#I2C_FLAG_TXE
 ((
uöt32_t
)0x10000080)

	)

291 
	#I2C_FLAG_RXNE
 ((
uöt32_t
)0x10000040)

	)

292 
	#I2C_FLAG_STOPF
 ((
uöt32_t
)0x10000010)

	)

293 
	#I2C_FLAG_ADD10
 ((
uöt32_t
)0x10000008)

	)

294 
	#I2C_FLAG_BTF
 ((
uöt32_t
)0x10000004)

	)

295 
	#I2C_FLAG_ADDR
 ((
uöt32_t
)0x10000002)

	)

296 
	#I2C_FLAG_SB
 ((
uöt32_t
)0x10000001)

	)

298 
	#IS_I2C_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0x20FFË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

300 
	#IS_I2C_GET_FLAG
(
FLAG
Ë(((FLAGË=
I2C_FLAG_DUALF
Ë|| ((FLAGË=
I2C_FLAG_SMBHOST
Ë|| \

	)

301 ((
FLAG
Ë=
I2C_FLAG_SMBDEFAULT
Ë|| ((FLAGË=
I2C_FLAG_GENCALL
) || \

302 ((
FLAG
Ë=
I2C_FLAG_TRA
Ë|| ((FLAGË=
I2C_FLAG_BUSY
) || \

303 ((
FLAG
Ë=
I2C_FLAG_MSL
Ë|| ((FLAGË=
I2C_FLAG_SMBALERT
) || \

304 ((
FLAG
Ë=
I2C_FLAG_TIMEOUT
Ë|| ((FLAGË=
I2C_FLAG_PECERR
) || \

305 ((
FLAG
Ë=
I2C_FLAG_OVR
Ë|| ((FLAGË=
I2C_FLAG_AF
) || \

306 ((
FLAG
Ë=
I2C_FLAG_ARLO
Ë|| ((FLAGË=
I2C_FLAG_BERR
) || \

307 ((
FLAG
Ë=
I2C_FLAG_TXE
Ë|| ((FLAGË=
I2C_FLAG_RXNE
) || \

308 ((
FLAG
Ë=
I2C_FLAG_STOPF
Ë|| ((FLAGË=
I2C_FLAG_ADD10
) || \

309 ((
FLAG
Ë=
I2C_FLAG_BTF
Ë|| ((FLAGË=
I2C_FLAG_ADDR
) || \

310 ((
FLAG
Ë=
I2C_FLAG_SB
))

334 
	#I2C_EVENT_MASTER_MODE_SELECT
 ((
uöt32_t
)0x00030001Ë

	)

362 
	#I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
 ((
uöt32_t
)0x00070082Ë

	)

363 
	#I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
 ((
uöt32_t
)0x00030002Ë

	)

365 
	#I2C_EVENT_MASTER_MODE_ADDRESS10
 ((
uöt32_t
)0x00030008Ë

	)

398 
	#I2C_EVENT_MASTER_BYTE_RECEIVED
 ((
uöt32_t
)0x00030040Ë

	)

402 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00070080Ë

	)

404 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00070084Ë

	)

441 
	#I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00020002Ë

	)

442 
	#I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00060082Ë

	)

445 
	#I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00820000Ë

	)

446 
	#I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00860080Ë

	)

449 
	#I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
 ((
uöt32_t
)0x00120000Ë

	)

480 
	#I2C_EVENT_SLAVE_BYTE_RECEIVED
 ((
uöt32_t
)0x00020040Ë

	)

482 
	#I2C_EVENT_SLAVE_STOP_DETECTED
 ((
uöt32_t
)0x00000010Ë

	)

486 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00060084Ë

	)

487 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00060080Ë

	)

489 
	#I2C_EVENT_SLAVE_ACK_FAILURE
 ((
uöt32_t
)0x00000400Ë

	)

497 
	#IS_I2C_EVENT
(
EVENT
Ë(((EVENTË=
I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
Ë|| \

	)

498 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
) || \

499 ((
EVENT
Ë=
I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
) || \

500 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
) || \

501 ((
EVENT
Ë=
I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
) || \

502 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_RECEIVED
) || \

503 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_DUALF
)) || \

504 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_GENCALL
)) || \

505 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
) || \

506 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_DUALF
)) || \

507 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_GENCALL
)) || \

508 ((
EVENT
Ë=
I2C_EVENT_SLAVE_STOP_DETECTED
) || \

509 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_SELECT
) || \

510 ((
EVENT
Ë=
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
) || \

511 ((
EVENT
Ë=
I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
) || \

512 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_RECEIVED
) || \

513 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTED
) || \

514 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTING
) || \

515 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_ADDRESS10
) || \

516 ((
EVENT
Ë=
I2C_EVENT_SLAVE_ACK_FAILURE
))

525 
	#IS_I2C_OWN_ADDRESS1
(
ADDRESS1
Ë((ADDRESS1Ë<0x3FF)

	)

534 
	#IS_I2C_CLOCK_SPEED
(
SPEED
Ë(((SPEEDË>0x1Ë&& ((SPEEDË<400000))

	)

547 
I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
);

550 
I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

551 
I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

552 
I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

553 
I2C_DigôÆFûãrC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DigôÆFûãr
);

554 
I2C_A«logFûãrCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

555 
I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

556 
I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

557 
I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
);

558 
I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

559 
I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
);

560 
I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

561 
I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

562 
I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

563 
I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

564 
I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
);

565 
I2C_NACKPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_NACKPosôi⁄
);

566 
I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
);

567 
I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

570 
I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
);

571 
uöt8_t
 
I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
);

574 
I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

575 
I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
);

576 
I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

577 
uöt8_t
 
I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
);

580 
I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

581 
I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

584 
uöt16_t
 
I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
);

585 
I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

677 
Eº‹Sètus
 
I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
);

683 
uöt32_t
 
I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
);

689 
FœgSètus
 
I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

692 
I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

693 
ITSètus
 
I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

694 
I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

696 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_iwdg.h

30 #i‚de‡
__STM32F4xx_IWDG_H


31 
	#__STM32F4xx_IWDG_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

58 
	#IWDG_WrôeAc˚ss_E«bÀ
 ((
uöt16_t
)0x5555)

	)

59 
	#IWDG_WrôeAc˚ss_DißbÀ
 ((
uöt16_t
)0x0000)

	)

60 
	#IS_IWDG_WRITE_ACCESS
(
ACCESS
Ë(((ACCESSË=
IWDG_WrôeAc˚ss_E«bÀ
Ë|| \

	)

61 ((
ACCESS
Ë=
IWDG_WrôeAc˚ss_DißbÀ
))

69 
	#IWDG_PªsˇÀr_4
 ((
uöt8_t
)0x00)

	)

70 
	#IWDG_PªsˇÀr_8
 ((
uöt8_t
)0x01)

	)

71 
	#IWDG_PªsˇÀr_16
 ((
uöt8_t
)0x02)

	)

72 
	#IWDG_PªsˇÀr_32
 ((
uöt8_t
)0x03)

	)

73 
	#IWDG_PªsˇÀr_64
 ((
uöt8_t
)0x04)

	)

74 
	#IWDG_PªsˇÀr_128
 ((
uöt8_t
)0x05)

	)

75 
	#IWDG_PªsˇÀr_256
 ((
uöt8_t
)0x06)

	)

76 
	#IS_IWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
IWDG_PªsˇÀr_4
Ë|| \

	)

77 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_8
) || \

78 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_16
) || \

79 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_32
) || \

80 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_64
) || \

81 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_128
)|| \

82 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_256
))

90 
	#IWDG_FLAG_PVU
 ((
uöt16_t
)0x0001)

	)

91 
	#IWDG_FLAG_RVU
 ((
uöt16_t
)0x0002)

	)

92 
	#IS_IWDG_FLAG
(
FLAG
Ë(((FLAGË=
IWDG_FLAG_PVU
Ë|| ((FLAGË=
IWDG_FLAG_RVU
))

	)

93 
	#IS_IWDG_RELOAD
(
RELOAD
Ë((RELOADË<0xFFF)

	)

106 
IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
);

107 
IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
);

108 
IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
);

109 
IWDG_RñﬂdCou¡î
();

112 
IWDG_E«bÀ
();

115 
FœgSètus
 
IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
);

117 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_ltdc.h

30 #i‚de‡
__STM32F4xx_LTDC_H


31 
	#__STM32F4xx_LTDC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
LTDC_HSPﬁ¨ôy
;

59 
uöt32_t
 
LTDC_VSPﬁ¨ôy
;

62 
uöt32_t
 
LTDC_DEPﬁ¨ôy
;

65 
uöt32_t
 
LTDC_PCPﬁ¨ôy
;

68 
uöt32_t
 
LTDC_H‹iz⁄èlSync
;

71 
uöt32_t
 
LTDC_VîtiˇlSync
;

74 
uöt32_t
 
LTDC_AccumuœãdHBP
;

77 
uöt32_t
 
LTDC_AccumuœãdVBP
;

80 
uöt32_t
 
LTDC_AccumuœãdA˘iveW
;

83 
uöt32_t
 
LTDC_AccumuœãdA˘iveH
;

86 
uöt32_t
 
LTDC_TŸÆWidth
;

89 
uöt32_t
 
LTDC_TŸÆHeigh
;

92 
uöt32_t
 
LTDC_BackgroundRedVÆue
;

95 
uöt32_t
 
LTDC_BackgroundGªíVÆue
;

98 
uöt32_t
 
LTDC_BackgroundBlueVÆue
;

100 } 
	tLTDC_InôTy≥Def
;

108 
uöt32_t
 
LTDC_H‹iz⁄èlSèπ
;

111 
uöt32_t
 
LTDC_H‹iz⁄èlSt›
;

114 
uöt32_t
 
LTDC_VîtiˇlSèπ
;

117 
uöt32_t
 
LTDC_VîtiˇlSt›
;

120 
uöt32_t
 
LTDC_PixñF‹m©
;

123 
uöt32_t
 
LTDC_C⁄°™tAÕha
;

126 
uöt32_t
 
LTDC_DeÁu…Cﬁ‹Blue
;

129 
uöt32_t
 
LTDC_DeÁu…Cﬁ‹Gªí
;

132 
uöt32_t
 
LTDC_DeÁu…Cﬁ‹Red
;

135 
uöt32_t
 
LTDC_DeÁu…Cﬁ‹AÕha
;

138 
uöt32_t
 
LTDC_BÀndögFa˘‹_1
;

141 
uöt32_t
 
LTDC_BÀndögFa˘‹_2
;

144 
uöt32_t
 
LTDC_CFBSèπAdªss
;

146 
uöt32_t
 
LTDC_CFBLöeLígth
;

149 
uöt32_t
 
LTDC_CFBPôch
;

152 
uöt32_t
 
LTDC_CFBLöeNumbî
;

154 } 
	tLTDC_Layî_InôTy≥Def
;

162 
uöt32_t
 
LTDC_POSX
;

163 
uöt32_t
 
LTDC_POSY
;

164 } 
	tLTDC_PosTy≥Def
;

168 
uöt32_t
 
LTDC_BlueWidth
;

169 
uöt32_t
 
LTDC_GªíWidth
;

170 
uöt32_t
 
LTDC_RedWidth
;

171 } 
	tLTDC_RGBTy≥Def
;

175 
uöt32_t
 
LTDC_Cﬁ‹KeyBlue
;

178 
uöt32_t
 
LTDC_Cﬁ‹KeyGªí
;

181 
uöt32_t
 
LTDC_Cﬁ‹KeyRed
;

183 } 
	tLTDC_Cﬁ‹Keyög_InôTy≥Def
;

187 
uöt32_t
 
LTDC_CLUTAdªss
;

190 
uöt32_t
 
LTDC_BlueVÆue
;

193 
uöt32_t
 
LTDC_GªíVÆue
;

196 
uöt32_t
 
LTDC_RedVÆue
;

198 } 
	tLTDC_CLUT_InôTy≥Def
;

210 
	#LTDC_H‹iz⁄èlSYNC
 ((
uöt32_t
)0x00000FFF)

	)

211 
	#LTDC_VîtiˇlSYNC
 ((
uöt32_t
)0x000007FF)

	)

213 
	#IS_LTDC_HSYNC
(
HSYNC
Ë((HSYNCË<
LTDC_H‹iz⁄èlSYNC
)

	)

214 
	#IS_LTDC_VSYNC
(
VSYNC
Ë((VSYNCË<
LTDC_VîtiˇlSYNC
)

	)

215 
	#IS_LTDC_AHBP
(
AHBP
Ë((AHBPË<
LTDC_H‹iz⁄èlSYNC
)

	)

216 
	#IS_LTDC_AVBP
(
AVBP
Ë((AVBPË<
LTDC_VîtiˇlSYNC
)

	)

217 
	#IS_LTDC_AAW
(
AAW
Ë((AAWË<
LTDC_H‹iz⁄èlSYNC
)

	)

218 
	#IS_LTDC_AAH
(
AAH
Ë((AAHË<
LTDC_VîtiˇlSYNC
)

	)

219 
	#IS_LTDC_TOTALW
(
TOTALW
Ë((TOTALWË<
LTDC_H‹iz⁄èlSYNC
)

	)

220 
	#IS_LTDC_TOTALH
(
TOTALH
Ë((TOTALHË<
LTDC_VîtiˇlSYNC
)

	)

229 
	#LTDC_HSPﬁ¨ôy_AL
 ((
uöt32_t
)0x00000000Ë

	)

230 
	#LTDC_HSPﬁ¨ôy_AH
 
LTDC_GCR_HSPOL


	)

232 
	#IS_LTDC_HSPOL
(
HSPOL
Ë(((HSPOLË=
LTDC_HSPﬁ¨ôy_AL
Ë|| \

	)

233 ((
HSPOL
Ë=
LTDC_HSPﬁ¨ôy_AH
))

242 
	#LTDC_VSPﬁ¨ôy_AL
 ((
uöt32_t
)0x00000000Ë

	)

243 
	#LTDC_VSPﬁ¨ôy_AH
 
LTDC_GCR_VSPOL


	)

245 
	#IS_LTDC_VSPOL
(
VSPOL
Ë(((VSPOLË=
LTDC_VSPﬁ¨ôy_AL
Ë|| \

	)

246 ((
VSPOL
Ë=
LTDC_VSPﬁ¨ôy_AH
))

255 
	#LTDC_DEPﬁ¨ôy_AL
 ((
uöt32_t
)0x00000000Ë

	)

256 
	#LTDC_DEPﬁ¨ôy_AH
 
LTDC_GCR_DEPOL


	)

258 
	#IS_LTDC_DEPOL
(
DEPOL
Ë(((DEPOLË=
LTDC_VSPﬁ¨ôy_AL
Ë|| \

	)

259 ((
DEPOL
Ë=
LTDC_DEPﬁ¨ôy_AH
))

268 
	#LTDC_PCPﬁ¨ôy_IPC
 ((
uöt32_t
)0x00000000Ë

	)

269 
	#LTDC_PCPﬁ¨ôy_IIPC
 
LTDC_GCR_PCPOL


	)

271 
	#IS_LTDC_PCPOL
(
PCPOL
Ë(((PCPOLË=
LTDC_PCPﬁ¨ôy_IPC
Ë|| \

	)

272 ((
PCPOL
Ë=
LTDC_PCPﬁ¨ôy_IIPC
))

281 
	#LTDC_IMRñﬂd
 
LTDC_SRCR_IMR


	)

282 
	#LTDC_VBRñﬂd
 
LTDC_SRCR_VBR


	)

284 
	#IS_LTDC_RELOAD
(
RELOAD
Ë(((RELOADË=
LTDC_IMRñﬂd
Ë|| \

	)

285 ((
RELOAD
Ë=
LTDC_VBRñﬂd
))

295 
	#LTDC_Back_Cﬁ‹
 ((
uöt32_t
)0x000000FF)

	)

297 
	#IS_LTDC_BackBlueVÆue
(
BBLUE
Ë((BBLUEË<
LTDC_Back_Cﬁ‹
)

	)

298 
	#IS_LTDC_BackGªíVÆue
(
BGREEN
Ë((BGREENË<
LTDC_Back_Cﬁ‹
)

	)

299 
	#IS_LTDC_BackRedVÆue
(
BRED
Ë((BREDË<
LTDC_Back_Cﬁ‹
)

	)

309 
	#LTDC_POS_CY
 
LTDC_CPSR_CYPOS


	)

310 
	#LTDC_POS_CX
 
LTDC_CPSR_CXPOS


	)

312 
	#IS_LTDC_GET_POS
(
POS
Ë(((POSË<
LTDC_POS_CY
))

	)

323 
	#IS_LTDC_LIPOS
(
LIPOS
Ë((LIPOSË<0x7FF)

	)

333 
	#LTDC_CD_VDES
 
LTDC_CDSR_VDES


	)

334 
	#LTDC_CD_HDES
 
LTDC_CDSR_HDES


	)

335 
	#LTDC_CD_VSYNC
 
LTDC_CDSR_VSYNCS


	)

336 
	#LTDC_CD_HSYNC
 
LTDC_CDSR_HSYNCS


	)

339 
	#IS_LTDC_GET_CD
(
CD
Ë(((CDË=
LTDC_CD_VDES
Ë|| ((CDË=
LTDC_CD_HDES
Ë|| \

	)

340 ((
CD
Ë=
LTDC_CD_VSYNC
Ë|| ((CDË=
LTDC_CD_HSYNC
))

351 
	#LTDC_IT_LI
 
LTDC_IER_LIE


	)

352 
	#LTDC_IT_FU
 
LTDC_IER_FUIE


	)

353 
	#LTDC_IT_TERR
 
LTDC_IER_TERRIE


	)

354 
	#LTDC_IT_RR
 
LTDC_IER_RRIE


	)

356 
	#IS_LTDC_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFFF0Ë=0x00Ë&& ((ITË!0x00))

	)

366 
	#LTDC_FLAG_LI
 
LTDC_ISR_LIF


	)

367 
	#LTDC_FLAG_FU
 
LTDC_ISR_FUIF


	)

368 
	#LTDC_FLAG_TERR
 
LTDC_ISR_TERRIF


	)

369 
	#LTDC_FLAG_RR
 
LTDC_ISR_RRIF


	)

372 
	#IS_LTDC_FLAG
(
FLAG
Ë(((FLAGË=
LTDC_FLAG_LI
Ë|| ((FLAGË=
LTDC_FLAG_FU
Ë|| \

	)

373 ((
FLAG
Ë=
LTDC_FLAG_TERR
Ë|| ((FLAGË=
LTDC_FLAG_RR
))

382 
	#LTDC_Pixñf‹m©_ARGB8888
 ((
uöt32_t
)0x00000000)

	)

383 
	#LTDC_Pixñf‹m©_RGB888
 ((
uöt32_t
)0x00000001)

	)

384 
	#LTDC_Pixñf‹m©_RGB565
 ((
uöt32_t
)0x00000002)

	)

385 
	#LTDC_Pixñf‹m©_ARGB1555
 ((
uöt32_t
)0x00000003)

	)

386 
	#LTDC_Pixñf‹m©_ARGB4444
 ((
uöt32_t
)0x00000004)

	)

387 
	#LTDC_Pixñf‹m©_L8
 ((
uöt32_t
)0x00000005)

	)

388 
	#LTDC_Pixñf‹m©_AL44
 ((
uöt32_t
)0x00000006)

	)

389 
	#LTDC_Pixñf‹m©_AL88
 ((
uöt32_t
)0x00000007)

	)

391 
	#IS_LTDC_Pixñf‹m©
(
Pixñf‹m©
Ë(((Pixñf‹m©Ë=
LTDC_Pixñf‹m©_ARGB8888
Ë|| ((Pixñf‹m©Ë=
LTDC_Pixñf‹m©_RGB888
Ë|| \

	)

392 ((
Pixñf‹m©
Ë=
LTDC_Pixñf‹m©_RGB565
Ë|| ((Pixñf‹m©Ë=
LTDC_Pixñf‹m©_ARGB1555
) || \

393 ((
Pixñf‹m©
Ë=
LTDC_Pixñf‹m©_ARGB4444
Ë|| ((Pixñf‹m©Ë=
LTDC_Pixñf‹m©_L8
) || \

394 ((
Pixñf‹m©
Ë=
LTDC_Pixñf‹m©_AL44
Ë|| ((Pixñf‹m©Ë=
LTDC_Pixñf‹m©_AL88
))

404 
	#LTDC_BÀndögFa˘‹1_CA
 ((
uöt32_t
)0x00000400)

	)

405 
	#LTDC_BÀndögFa˘‹1_PAxCA
 ((
uöt32_t
)0x00000600)

	)

407 
	#IS_LTDC_BÀndögFa˘‹1
(
BÀndögFa˘‹1
Ë(((BÀndögFa˘‹1Ë=
LTDC_BÀndögFa˘‹1_CA
Ë|| ((BÀndögFa˘‹1Ë=
LTDC_BÀndögFa˘‹1_PAxCA
))

	)

417 
	#LTDC_BÀndögFa˘‹2_CA
 ((
uöt32_t
)0x00000005)

	)

418 
	#LTDC_BÀndögFa˘‹2_PAxCA
 ((
uöt32_t
)0x00000007)

	)

420 
	#IS_LTDC_BÀndögFa˘‹2
(
BÀndögFa˘‹2
Ë(((BÀndögFa˘‹2Ë=
LTDC_BÀndögFa˘‹2_CA
Ë|| ((BÀndögFa˘‹2Ë=
LTDC_BÀndögFa˘‹2_PAxCA
))

	)

432 
	#LTDC_STOPPosôi⁄
 ((
uöt32_t
)0x0000FFFF)

	)

433 
	#LTDC_STARTPosôi⁄
 ((
uöt32_t
)0x00000FFF)

	)

435 
	#LTDC_DeÁu…Cﬁ‹C⁄fig
 ((
uöt32_t
)0x000000FF)

	)

436 
	#LTDC_Cﬁ‹FømeBuf„r
 ((
uöt32_t
)0x00001FFF)

	)

437 
	#LTDC_LöeNumbî
 ((
uöt32_t
)0x000007FF)

	)

439 
	#IS_LTDC_HCONFIGST
(
HCONFIGST
Ë((HCONFIGSTË<
LTDC_STARTPosôi⁄
)

	)

440 
	#IS_LTDC_HCONFIGSP
(
HCONFIGSP
Ë((HCONFIGSPË<
LTDC_STOPPosôi⁄
)

	)

441 
	#IS_LTDC_VCONFIGST
(
VCONFIGST
Ë((VCONFIGSTË<
LTDC_STARTPosôi⁄
)

	)

442 
	#IS_LTDC_VCONFIGSP
(
VCONFIGSP
Ë((VCONFIGSPË<
LTDC_STOPPosôi⁄
)

	)

444 
	#IS_LTDC_DEFAULTCOLOR
(
DEFAULTCOLOR
Ë((DEFAULTCOLORË<
LTDC_DeÁu…Cﬁ‹C⁄fig
)

	)

446 
	#IS_LTDC_CFBP
(
CFBP
Ë((CFBPË<
LTDC_Cﬁ‹FømeBuf„r
)

	)

447 
	#IS_LTDC_CFBLL
(
CFBLL
Ë((CFBLLË<
LTDC_Cﬁ‹FømeBuf„r
)

	)

449 
	#IS_LTDC_CFBLNBR
(
CFBLNBR
Ë((CFBLNBRË<
LTDC_LöeNumbî
)

	)

461 
	#LTDC_cﬁ‹keyögC⁄fig
 ((
uöt32_t
)0x000000FF)

	)

463 
	#IS_LTDC_CKEYING
(
CKEYING
Ë((CKEYINGË<
LTDC_cﬁ‹keyögC⁄fig
)

	)

474 
	#LTDC_CLUTWR
 ((
uöt32_t
)0x000000FF)

	)

476 
	#IS_LTDC_CLUTWR
(
CLUTWR
Ë((CLUTWRË<
LTDC_CLUTWR
)

	)

482 
LTDC_DeInô
();

485 
LTDC_Inô
(
LTDC_InôTy≥Def
* 
LTDC_InôSåu˘
);

486 
LTDC_Såu˘Inô
(
LTDC_InôTy≥Def
* 
LTDC_InôSåu˘
);

487 
LTDC_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

488 
LTDC_DôhîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

489 
LTDC_RGBTy≥Def
 
LTDC_GëRGBWidth
();

490 
LTDC_RGBSåu˘Inô
(
LTDC_RGBTy≥Def
* 
LTDC_RGB_InôSåu˘
);

491 
LTDC_LIPC⁄fig
(
uöt32_t
 
LTDC_LIPosôi⁄C⁄fig
);

492 
LTDC_RñﬂdC⁄fig
(
uöt32_t
 
LTDC_Rñﬂd
);

493 
LTDC_LayîInô
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
LTDC_Layî_InôTy≥Def
* 
LTDC_Layî_InôSåu˘
);

494 
LTDC_LayîSåu˘Inô
(
LTDC_Layî_InôTy≥Def
 * 
LTDC_Layî_InôSåu˘
);

495 
LTDC_LayîCmd
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

496 
LTDC_PosTy≥Def
 
LTDC_GëPosSètus
();

497 
LTDC_PosSåu˘Inô
(
LTDC_PosTy≥Def
* 
LTDC_Pos_InôSåu˘
);

498 
FœgSètus
 
LTDC_GëCDSètus
(
uöt32_t
 
LTDC_CD
);

499 
LTDC_Cﬁ‹KeyögC⁄fig
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
LTDC_Cﬁ‹Keyög_InôTy≥Def
* 
LTDC_cﬁ‹keyög_InôSåu˘
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

500 
LTDC_Cﬁ‹KeyögSåu˘Inô
(
LTDC_Cﬁ‹Keyög_InôTy≥Def
* 
LTDC_cﬁ‹keyög_InôSåu˘
);

501 
LTDC_CLUTCmd
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

502 
LTDC_CLUTInô
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
LTDC_CLUT_InôTy≥Def
* 
LTDC_CLUT_InôSåu˘
);

503 
LTDC_CLUTSåu˘Inô
(
LTDC_CLUT_InôTy≥Def
* 
LTDC_CLUT_InôSåu˘
);

504 
LTDC_LayîPosôi⁄
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
uöt16_t
 
Off£tX
, uöt16_à
Off£tY
);

505 
LTDC_LayîAÕha
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
uöt8_t
 
C⁄°™tAÕha
);

506 
LTDC_LayîAddªss
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
uöt32_t
 
Addªss
);

507 
LTDC_LayîSize
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
uöt32_t
 
Width
, uöt32_à
Height
);

508 
LTDC_LayîPixñF‹m©
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
uöt32_t
 
PixñF‹m©
);

511 
LTDC_ITC⁄fig
(
uöt32_t
 
LTDC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

512 
FœgSètus
 
LTDC_GëFœgSètus
(
uöt32_t
 
LTDC_FLAG
);

513 
LTDC_CÀ¨Fœg
(
uöt32_t
 
LTDC_FLAG
);

514 
ITSètus
 
LTDC_GëITSètus
(
uöt32_t
 
LTDC_IT
);

515 
LTDC_CÀ¨ITPídögBô
(
uöt32_t
 
LTDC_IT
);

517 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_pwr.h

30 #i‚de‡
__STM32F4xx_PWR_H


31 
	#__STM32F4xx_PWR_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

58 
	#PWR_PVDLevñ_0
 
PWR_CR_PLS_LEV0


	)

59 
	#PWR_PVDLevñ_1
 
PWR_CR_PLS_LEV1


	)

60 
	#PWR_PVDLevñ_2
 
PWR_CR_PLS_LEV2


	)

61 
	#PWR_PVDLevñ_3
 
PWR_CR_PLS_LEV3


	)

62 
	#PWR_PVDLevñ_4
 
PWR_CR_PLS_LEV4


	)

63 
	#PWR_PVDLevñ_5
 
PWR_CR_PLS_LEV5


	)

64 
	#PWR_PVDLevñ_6
 
PWR_CR_PLS_LEV6


	)

65 
	#PWR_PVDLevñ_7
 
PWR_CR_PLS_LEV7


	)

67 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLevñ_0
Ë|| ((LEVELË=
PWR_PVDLevñ_1
)|| \

	)

68 ((
LEVEL
Ë=
PWR_PVDLevñ_2
Ë|| ((LEVELË=
PWR_PVDLevñ_3
)|| \

69 ((
LEVEL
Ë=
PWR_PVDLevñ_4
Ë|| ((LEVELË=
PWR_PVDLevñ_5
)|| \

70 ((
LEVEL
Ë=
PWR_PVDLevñ_6
Ë|| ((LEVELË=
PWR_PVDLevñ_7
))

79 
	#PWR_MaöReguœt‹_ON
 ((
uöt32_t
)0x00000000)

	)

80 
	#PWR_LowPowîReguœt‹_ON
 
PWR_CR_LPDS


	)

83 
	#PWR_Reguœt‹_ON
 
PWR_MaöReguœt‹_ON


	)

84 
	#PWR_Reguœt‹_LowPowî
 
PWR_LowPowîReguœt‹_ON


	)

86 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_MaöReguœt‹_ON
Ë|| \

	)

87 ((
REGULATOR
Ë=
PWR_LowPowîReguœt‹_ON
))

96 
	#PWR_MaöReguœt‹_UndîDrive_ON
 
PWR_CR_MRUDS


	)

97 
	#PWR_LowPowîReguœt‹_UndîDrive_ON
 ((
uöt32_t
)(
PWR_CR_LPDS
 | 
PWR_CR_LPUDS
))

	)

99 
	#IS_PWR_REGULATOR_UNDERDRIVE
(
REGULATOR
Ë(((REGULATORË=
PWR_MaöReguœt‹_UndîDrive_ON
Ë|| \

	)

100 ((
REGULATOR
Ë=
PWR_LowPowîReguœt‹_UndîDrive_ON
))

105 #i‡
deföed
(
STM32F446xx
)

109 
	#PWR_WakeUp_Pö1
 ((
uöt32_t
)0x00)

	)

110 
	#PWR_WakeUp_Pö2
 ((
uöt32_t
)0x01)

	)

112 
	#IS_PWR_WAKEUP_PIN
(
PIN
Ë(((PINË=
PWR_WakeUp_Pö1
Ë|| \

	)

113 ((
PIN
Ë=
PWR_WakeUp_Pö2
))

123 
	#PWR_STOPE¡ry_WFI
 ((
uöt8_t
)0x01)

	)

124 
	#PWR_STOPE¡ry_WFE
 ((
uöt8_t
)0x02)

	)

125 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPE¡ry_WFI
Ë|| ((ENTRYË=
PWR_STOPE¡ry_WFE
))

	)

133 
	#PWR_Reguœt‹_Vﬁège_SˇÀ1
 ((
uöt32_t
)0x0000C000)

	)

134 
	#PWR_Reguœt‹_Vﬁège_SˇÀ2
 ((
uöt32_t
)0x00008000)

	)

135 
	#PWR_Reguœt‹_Vﬁège_SˇÀ3
 ((
uöt32_t
)0x00004000)

	)

136 
	#IS_PWR_REGULATOR_VOLTAGE
(
VOLTAGE
Ë(((VOLTAGEË=
PWR_Reguœt‹_Vﬁège_SˇÀ1
Ë|| \

	)

137 ((
VOLTAGE
Ë=
PWR_Reguœt‹_Vﬁège_SˇÀ2
) || \

138 ((
VOLTAGE
Ë=
PWR_Reguœt‹_Vﬁège_SˇÀ3
))

146 
	#PWR_FLAG_WU
 
PWR_CSR_WUF


	)

147 
	#PWR_FLAG_SB
 
PWR_CSR_SBF


	)

148 
	#PWR_FLAG_PVDO
 
PWR_CSR_PVDO


	)

149 
	#PWR_FLAG_BRR
 
PWR_CSR_BRR


	)

150 
	#PWR_FLAG_VOSRDY
 
PWR_CSR_VOSRDY


	)

151 
	#PWR_FLAG_ODRDY
 
PWR_CSR_ODRDY


	)

152 
	#PWR_FLAG_ODSWRDY
 
PWR_CSR_ODSWRDY


	)

153 
	#PWR_FLAG_UDRDY
 
PWR_CSR_UDSWRDY


	)

156 
	#PWR_FLAG_REGRDY
 
PWR_FLAG_VOSRDY


	)

158 
	#IS_PWR_GET_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
Ë|| \

	)

159 ((
FLAG
Ë=
PWR_FLAG_PVDO
Ë|| ((FLAGË=
PWR_FLAG_BRR
) || \

160 ((
FLAG
Ë=
PWR_FLAG_VOSRDY
Ë|| ((FLAGË=
PWR_FLAG_ODRDY
) || \

161 ((
FLAG
Ë=
PWR_FLAG_ODSWRDY
Ë|| ((FLAGË=
PWR_FLAG_UDRDY
))

164 
	#IS_PWR_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
Ë|| \

	)

165 ((
FLAG
Ë=
PWR_FLAG_UDRDY
))

179 
PWR_DeInô
();

182 
PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

185 
PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
);

186 
PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

189 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F411xE
)

190 
PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

192 #i‡
deföed
(
STM32F446xx
)

193 
PWR_WakeUpPöCmd
(
uöt32_t
 
PWR_WakeUpPöx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

196 
PWR_BackupReguœt‹Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

197 
PWR_MaöReguœt‹ModeC⁄fig
(
uöt32_t
 
PWR_Reguœt‹_Vﬁège
);

198 
PWR_OvîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

199 
PWR_OvîDriveSWCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

200 
PWR_UndîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

202 #i‡
deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
)

203 
PWR_MaöReguœt‹UndîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

204 
PWR_LowReguœt‹UndîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

207 #i‡
deföed
(
STM32F401xx
Ë|| deföed(
STM32F411xE
)

208 
PWR_MaöReguœt‹LowVﬁègeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

209 
PWR_LowReguœt‹LowVﬁègeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

213 
PWR_FœshPowîDownCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

216 
PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

217 
PWR_E¡îUndîDriveSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

218 
PWR_E¡îSTANDBYMode
();

221 
FœgSètus
 
PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
);

222 
PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
);

224 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_qspi.h

30 #i‚de‡
__STM32F4XX_QUADSPI_H


31 
	#__STM32F4XX_QUADSPI_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

57 
uöt32_t
 
QSPI_ComC⁄fig_FMode
;

60 
uöt32_t
 
QSPI_ComC⁄fig_DDRMode
;

63 
uöt32_t
 
QSPI_ComC⁄fig_DHHC
;

66 
uöt32_t
 
QSPI_ComC⁄fig_SIOOMode
;

69 
uöt32_t
 
QSPI_ComC⁄fig_DMode
;

72 
uöt32_t
 
QSPI_ComC⁄fig_DummyCy˛es
;

75 
uöt32_t
 
QSPI_ComC⁄fig_ABSize
;

78 
uöt32_t
 
QSPI_ComC⁄fig_ABMode
;

81 
uöt32_t
 
QSPI_ComC⁄fig_ADSize
;

84 
uöt32_t
 
QSPI_ComC⁄fig_ADMode
;

87 
uöt32_t
 
QSPI_ComC⁄fig_IMode
;

90 
uöt32_t
 
QSPI_ComC⁄fig_Ins
;

93 }
	tQSPI_ComC⁄fig_InôTy≥Def
;

101 
uöt32_t
 
QSPI_SShi·
;

104 
uöt32_t
 
QSPI_PªsˇÀr
;

107 
uöt32_t
 
QSPI_CKMode
;

110 
uöt32_t
 
QSPI_CSHTime
;

113 
uöt32_t
 
QSPI_FSize
;

118 
uöt32_t
 
QSPI_FSñe˘
;

120 
uöt32_t
 
QSPI_DFœsh
;

122 }
	tQSPI_InôTy≥Def
;

133 
	#QSPI_SShi·_NoShi·
 ((
uöt32_t
)0x00000000)

	)

134 
	#QSPI_SShi·_HÆfCy˛eShi·
 ((
uöt32_t
)
QUADSPI_CR_SSHIFT_0
)

	)

135 
	#QSPI_SShi·_O√Cy˛eShi·
 ((
uöt32_t
)
QUADSPI_CR_SSHIFT_1
)

	)

136 
	#QSPI_SShi·_O√AndHÆfCy˛eShi·
 ((
uöt32_t
)
QUADSPI_CR_SSHIFT
)

	)

137 
	#IS_QSPI_SSHIFT
(
SSHIFT
Ë(((SSHIFTË=
QSPI_SShi·_NoShi·
Ë|| ((SSHIFTË=
QSPI_SShi·_HÆfCy˛eShi·
Ë|| \

	)

138 ((
SSHIFT
Ë=
QSPI_SShi·_O√Cy˛eShi·
Ë|| ((SSHIFTË=
QSPI_SShi·_O√AndHÆfCy˛eShi·
))

146 
	#IS_QSPI_PRESCALER
(
PRESCALER
Ë(((PRESCALERË<0xFF))

	)

154 
	#QSPI_CKMode_Mode0
 ((
uöt32_t
)0x00000000)

	)

155 
	#QSPI_CKMode_Mode3
 ((
uöt32_t
)
QUADSPI_DCR_CKMODE
)

	)

156 
	#IS_QSPI_CKMODE
(
CKMode
Ë(((CKModeË=
QSPI_CKMode_Mode0
Ë|| ((CKModeË=
QSPI_CKMode_Mode3
))

	)

164 
	#QSPI_CSHTime_1Cy˛e
 ((
uöt32_t
)0x00000000)

	)

165 
	#QSPI_CSHTime_2Cy˛e
 ((
uöt32_t
)
QUADSPI_DCR_CSHT_0
)

	)

166 
	#QSPI_CSHTime_3Cy˛e
 ((
uöt32_t
)
QUADSPI_DCR_CSHT_1
)

	)

167 
	#QSPI_CSHTime_4Cy˛e
 ((
uöt32_t
)
QUADSPI_DCR_CSHT_0
 | 
QUADSPI_DCR_CSHT_1
)

	)

168 
	#QSPI_CSHTime_5Cy˛e
 ((
uöt32_t
)
QUADSPI_DCR_CSHT_2
)

	)

169 
	#QSPI_CSHTime_6Cy˛e
 ((
uöt32_t
)
QUADSPI_DCR_CSHT_2
 | 
QUADSPI_DCR_CSHT_0
)

	)

170 
	#QSPI_CSHTime_7Cy˛e
 ((
uöt32_t
)
QUADSPI_DCR_CSHT_2
 | 
QUADSPI_DCR_CSHT_1
)

	)

171 
	#QSPI_CSHTime_8Cy˛e
 ((
uöt32_t
)
QUADSPI_DCR_CSHT
)

	)

172 
	#IS_QSPI_CSHTIME
(
CSHTIME
Ë(((CSHTIMEË=
QSPI_CSHTime_1Cy˛e
Ë|| \

	)

173 ((
CSHTIME
Ë=
QSPI_CSHTime_2Cy˛e
) || \

174 ((
CSHTIME
Ë=
QSPI_CSHTime_3Cy˛e
) || \

175 ((
CSHTIME
Ë=
QSPI_CSHTime_4Cy˛e
) || \

176 ((
CSHTIME
Ë=
QSPI_CSHTime_5Cy˛e
) || \

177 ((
CSHTIME
Ë=
QSPI_CSHTime_6Cy˛e
) || \

178 ((
CSHTIME
Ë=
QSPI_CSHTime_7Cy˛e
) || \

179 ((
CSHTIME
Ë=
QSPI_CSHTime_8Cy˛e
))

187 
	#IS_QSPI_FSIZE
(
FSIZE
Ë(((FSIZEË<0x1F))

	)

195 
	#QSPI_FSñe˘_1
 ((
uöt32_t
)0x00000000)

	)

196 
	#QSPI_FSñe˘_2
 ((
uöt32_t
)
QUADSPI_CR_FSEL
)

	)

197 
	#IS_QSPI_FSEL
(
FLA
Ë(((FLAË=
QSPI_FSñe˘_1
Ë|| ((FLAË=
QSPI_FSñe˘_2
))

	)

205 
	#QSPI_DFœsh_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

206 
	#QSPI_DFœsh_E«bÀ
 ((
uöt32_t
)
QUADSPI_CR_DFM
)

	)

207 
	#IS_QSPI_DFM
(
FLA
Ë(((FLAË=
QSPI_DFœsh_E«bÀ
Ë|| ((FLAË=
QSPI_DFœsh_DißbÀ
))

	)

215 
	#QSPI_ComC⁄fig_FMode_Indúe˘_Wrôe
 ((
uöt32_t
)0x00000000)

	)

216 
	#QSPI_ComC⁄fig_FMode_Indúe˘_Ród
 ((
uöt32_t
)
QUADSPI_CCR_FMODE_0
)

	)

217 
	#QSPI_ComC⁄fig_FMode_Auto_Pﬁlög
 ((
uöt32_t
)
QUADSPI_CCR_FMODE_1
)

	)

218 
	#QSPI_ComC⁄fig_FMode_Mem‹y_M≠≥d
 ((
uöt32_t
)
QUADSPI_CCR_FMODE
)

	)

219 
	#IS_QSPI_FMODE
(
FMODE
Ë(((FMODEË=
QSPI_ComC⁄fig_FMode_Indúe˘_Wrôe
Ë|| \

	)

220 ((
FMODE
Ë=
QSPI_ComC⁄fig_FMode_Indúe˘_Ród
) || \

221 ((
FMODE
Ë=
QSPI_ComC⁄fig_FMode_Auto_Pﬁlög
) || \

222 ((
FMODE
Ë=
QSPI_ComC⁄fig_FMode_Mem‹y_M≠≥d
))

230 
	#QSPI_ComC⁄fig_DDRMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

231 
	#QSPI_ComC⁄fig_DDRMode_E«bÀ
 ((
uöt32_t
)
QUADSPI_CCR_DDRM
)

	)

232 
	#IS_QSPI_DDRMODE
(
DDRMODE
Ë(((DDRMODEË=
QSPI_ComC⁄fig_DDRMode_DißbÀ
Ë|| \

	)

233 ((
DDRMODE
Ë=
QSPI_ComC⁄fig_DDRMode_E«bÀ
))

241 
	#QSPI_ComC⁄fig_DHHC_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

242 
	#QSPI_ComC⁄fig_DHHC_E«bÀ
 ((
uöt32_t
)
QUADSPI_CCR_DHHC
)

	)

243 
	#IS_QSPI_DHHC
(
DHHC
Ë(((DHHCË=
QSPI_ComC⁄fig_DHHC_DißbÀ
Ë|| \

	)

244 ((
DHHC
Ë=
QSPI_ComC⁄fig_DHHC_E«bÀ
))

252 
	#QSPI_ComC⁄fig_SIOOMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

253 
	#QSPI_ComC⁄fig_SIOOMode_E«bÀ
 ((
uöt32_t
)
QUADSPI_CCR_SIOO
)

	)

254 
	#IS_QSPI_SIOOMODE
(
SIOOMODE
Ë(((SIOOMODEË=
QSPI_ComC⁄fig_SIOOMode_DißbÀ
Ë|| \

	)

255 ((
SIOOMODE
Ë=
QSPI_ComC⁄fig_SIOOMode_E«bÀ
))

263 
	#QSPI_ComC⁄fig_DMode_NoD©a
 ((
uöt32_t
)0x00000000)

	)

264 
	#QSPI_ComC⁄fig_DMode_1Löe
 ((
uöt32_t
)
QUADSPI_CCR_DMODE_0
)

	)

265 
	#QSPI_ComC⁄fig_DMode_2Löe
 ((
uöt32_t
)
QUADSPI_CCR_DMODE_1
)

	)

266 
	#QSPI_ComC⁄fig_DMode_4Löe
 ((
uöt32_t
)
QUADSPI_CCR_DMODE
)

	)

267 
	#IS_QSPI_DMODE
(
DMODE
Ë(((DMODEË=
QSPI_ComC⁄fig_DMode_NoD©a
Ë|| \

	)

268 ((
DMODE
Ë=
QSPI_ComC⁄fig_DMode_1Löe
) || \

269 ((
DMODE
Ë=
QSPI_ComC⁄fig_DMode_2Löe
) || \

270 ((
DMODE
Ë=
QSPI_ComC⁄fig_DMode_4Löe
))

278 
	#QSPI_ComC⁄fig_ABSize_8bô
 ((
uöt32_t
)0x00000000)

	)

279 
	#QSPI_ComC⁄fig_ABSize_16bô
 ((
uöt32_t
)
QUADSPI_CCR_ABSIZE_0
)

	)

280 
	#QSPI_ComC⁄fig_ABSize_24bô
 ((
uöt32_t
)
QUADSPI_CCR_ABSIZE_1
)

	)

281 
	#QSPI_ComC⁄fig_ABSize_32bô
 ((
uöt32_t
)
QUADSPI_CCR_ABSIZE
)

	)

282 
	#IS_QSPI_ABSIZE
(
ABSIZE
Ë(((ABSIZEË=
QSPI_ComC⁄fig_ABSize_8bô
Ë|| \

	)

283 ((
ABSIZE
Ë=
QSPI_ComC⁄fig_ABSize_16bô
) || \

284 ((
ABSIZE
Ë=
QSPI_ComC⁄fig_ABSize_24bô
) || \

285 ((
ABSIZE
Ë=
QSPI_ComC⁄fig_ABSize_32bô
))

293 
	#QSPI_ComC⁄fig_ABMode_NoA…î«ãByã
 ((
uöt32_t
)0x00000000)

	)

294 
	#QSPI_ComC⁄fig_ABMode_1Löe
 ((
uöt32_t
)
QUADSPI_CCR_ABMODE_0
)

	)

295 
	#QSPI_ComC⁄fig_ABMode_2Löe
 ((
uöt32_t
)
QUADSPI_CCR_ABMODE_1
)

	)

296 
	#QSPI_ComC⁄fig_ABMode_4Löe
 ((
uöt32_t
)
QUADSPI_CCR_ABMODE
)

	)

297 
	#IS_QSPI_ABMODE
(
ABMODE
Ë(((ABMODEË=
QSPI_ComC⁄fig_ABMode_NoA…î«ãByã
Ë|| \

	)

298 ((
ABMODE
Ë=
QSPI_ComC⁄fig_ABMode_1Löe
) || \

299 ((
ABMODE
Ë=
QSPI_ComC⁄fig_ABMode_2Löe
) || \

300 ((
ABMODE
Ë=
QSPI_ComC⁄fig_ABMode_4Löe
))

308 
	#QSPI_ComC⁄fig_ADSize_8bô
 ((
uöt32_t
)0x00000000)

	)

309 
	#QSPI_ComC⁄fig_ADSize_16bô
 ((
uöt32_t
)
QUADSPI_CCR_ADSIZE_0
)

	)

310 
	#QSPI_ComC⁄fig_ADSize_24bô
 ((
uöt32_t
)
QUADSPI_CCR_ADSIZE_1
)

	)

311 
	#QSPI_ComC⁄fig_ADSize_32bô
 ((
uöt32_t
)
QUADSPI_CCR_ADSIZE
)

	)

312 
	#IS_QSPI_ADSIZE
(
ADSIZE
Ë(((ADSIZEË=
QSPI_ComC⁄fig_ADSize_8bô
Ë|| \

	)

313 ((
ADSIZE
Ë=
QSPI_ComC⁄fig_ADSize_16bô
) || \

314 ((
ADSIZE
Ë=
QSPI_ComC⁄fig_ADSize_24bô
) || \

315 ((
ADSIZE
Ë=
QSPI_ComC⁄fig_ADSize_32bô
))

323 
	#QSPI_ComC⁄fig_ADMode_NoAddªss
 ((
uöt32_t
)0x00000000)

	)

324 
	#QSPI_ComC⁄fig_ADMode_1Löe
 ((
uöt32_t
)
QUADSPI_CCR_ADMODE_0
)

	)

325 
	#QSPI_ComC⁄fig_ADMode_2Löe
 ((
uöt32_t
)
QUADSPI_CCR_ADMODE_1
)

	)

326 
	#QSPI_ComC⁄fig_ADMode_4Löe
 ((
uöt32_t
)
QUADSPI_CCR_ADMODE
)

	)

327 
	#IS_QSPI_ADMODE
(
ADMODE
Ë(((ADMODEË=
QSPI_ComC⁄fig_ADMode_NoAddªss
Ë|| \

	)

328 ((
ADMODE
Ë=
QSPI_ComC⁄fig_ADMode_1Löe
) || \

329 ((
ADMODE
Ë=
QSPI_ComC⁄fig_ADMode_2Löe
) || \

330 ((
ADMODE
Ë=
QSPI_ComC⁄fig_ADMode_4Löe
))

338 
	#QSPI_ComC⁄fig_IMode_NoIn°ru˘i⁄
 ((
uöt32_t
)0x00000000)

	)

339 
	#QSPI_ComC⁄fig_IMode_1Löe
 ((
uöt32_t
)
QUADSPI_CCR_IMODE_0
)

	)

340 
	#QSPI_ComC⁄fig_IMode_2Löe
 ((
uöt32_t
)
QUADSPI_CCR_IMODE_1
)

	)

341 
	#QSPI_ComC⁄fig_IMode_4Löe
 ((
uöt32_t
)
QUADSPI_CCR_IMODE
)

	)

342 
	#IS_QSPI_IMODE
(
IMODE
Ë(((IMODEË=
QSPI_ComC⁄fig_IMode_NoIn°ru˘i⁄
Ë|| \

	)

343 ((
IMODE
Ë=
QSPI_ComC⁄fig_IMode_1Löe
) || \

344 ((
IMODE
Ë=
QSPI_ComC⁄fig_IMode_2Löe
) || \

345 ((
IMODE
Ë=
QSPI_ComC⁄fig_IMode_4Löe
))

353 
	#IS_QSPI_INSTRUCTION
(
INSTRUCTION
Ë((INSTRUCTIONË<0xFF)

	)

361 
	#QSPI_IT_TO
 (
uöt32_t
)(
QUADSPI_CR_TOIE
 | 
QUADSPI_SR_TOF
)

	)

362 
	#QSPI_IT_SM
 (
uöt32_t
)(
QUADSPI_CR_SMIE
 | 
QUADSPI_SR_SMF
)

	)

363 
	#QSPI_IT_FT
 (
uöt32_t
)(
QUADSPI_CR_FTIE
 | 
QUADSPI_SR_FTF
)

	)

364 
	#QSPI_IT_TC
 (
uöt32_t
)(
QUADSPI_CR_TCIE
 | 
QUADSPI_SR_TCF
)

	)

365 
	#QSPI_IT_TE
 (
uöt32_t
)(
QUADSPI_CR_TEIE
 | 
QUADSPI_SR_TEF
)

	)

366 
	#IS_QSPI_IT
(
IT
Ë((((ITË& 0xFFE0FFE0Ë=0Ë&& ((ITË!0))

	)

367 
	#IS_QSPI_CLEAR_IT
(
IT
Ë((((ITË& 0xFFE4FFE4Ë=0Ë&& ((ITË!0))

	)

375 
	#QSPI_FLAG_TO
 
QUADSPI_SR_TOF


	)

376 
	#QSPI_FLAG_SM
 
QUADSPI_SR_SMF


	)

377 
	#QSPI_FLAG_FT
 
QUADSPI_SR_FTF


	)

378 
	#QSPI_FLAG_TC
 
QUADSPI_SR_TCF


	)

379 
	#QSPI_FLAG_TE
 
QUADSPI_SR_TEF


	)

380 
	#QSPI_FLAG_BUSY
 
QUADSPI_SR_BUSY


	)

381 
	#IS_QSPI_GET_FLAG
(
FLAG
Ë(((FLAGË=
QSPI_FLAG_TO
Ë|| ((FLAGË=
QSPI_FLAG_SM
Ë|| \

	)

382 ((
FLAG
Ë=
QSPI_FLAG_FT
Ë|| ((FLAGË=
QSPI_FLAG_TC
) || \

383 ((
FLAG
Ë=
QSPI_FLAG_TE
Ë|| ((FLAGË=
QSPI_FLAG_BUSY
))

384 
	#IS_QSPI_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
QSPI_FLAG_TO
Ë|| ((FLAGË=
QSPI_FLAG_SM
Ë|| \

	)

385 ((
FLAG
Ë=
QSPI_FLAG_TC
Ë|| ((FLAGË=
QSPI_FLAG_TE
))

394 
	#QSPI_PMM_AND
 ((
uöt32_t
)0x00000000)

	)

395 
	#QSPI_PMM_OR
 ((
uöt32_t
)
QUADSPI_CR_PMM
)

	)

396 
	#IS_QSPI_PMM
(
PMM
Ë(((PMMË=
QSPI_PMM_AND
Ë|| ((PMMË=
QSPI_PMM_OR
))

	)

404 
	#IS_QSPI_PIR
(
PIR
Ë((PIRË<
QUADSPI_PIR_INTERVAL
)

	)

412 
	#IS_QSPI_TIMEOUT
(
TIMEOUT
Ë((TIMEOUTË<
QUADSPI_LPTR_TIMEOUT
)

	)

420 
	#IS_QSPI_DCY
(
DCY
Ë((DCYË<0x1F)

	)

428 
	#IS_QSPI_FIFOTHRESHOLD
(
FIFOTHRESHOLD
Ë((FIFOTHRESHOLDË<0x0F)

	)

441 
QSPI_DeInô
();

442 
QSPI_Inô
(
QSPI_InôTy≥Def
* 
QSPI_InôSåu˘
);

443 
QSPI_Såu˘Inô
(
QSPI_InôTy≥Def
* 
QSPI_InôSåu˘
);

444 
QSPI_ComC⁄fig_Inô
(
QSPI_ComC⁄fig_InôTy≥Def
* 
QSPI_ComC⁄fig_InôSåu˘
);

445 
QSPI_ComC⁄fig_Såu˘Inô
(
QSPI_ComC⁄fig_InôTy≥Def
* 
QSPI_ComC⁄fig_InôSåu˘
);

446 
QSPI_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

447 
QSPI_AutoPﬁlögMode_C⁄fig
(
uöt32_t
 
QSPI_M©ch
, uöt32_à
QSPI_Mask
 , uöt32_à
QSPI_M©ch_Mode
);

448 
QSPI_AutoPﬁlögMode_SëI¡îvÆ
(
uöt32_t
 
QSPI_I¡îvÆ
);

449 
QSPI_Mem‹yM≠≥dMode_SëTimeout
(
uöt32_t
 
QSPI_Timeout
);

450 
QSPI_SëAddªss
(
uöt32_t
 
QSPI_Addªss
);

451 
QSPI_SëA…î«ãByã
(
uöt32_t
 
QSPI_A…î«ãByã
);

452 
QSPI_SëFIFOThªshﬁd
(
uöt32_t
 
QSPI_FIFOThªshﬁd
);

453 
QSPI_SëD©aLígth
(
uöt32_t
 
QSPI_D©aLígth
);

454 
QSPI_TimeoutCou¡îCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

455 
QSPI_AutoPﬁlögModeSt›Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

456 
QSPI_Ab‹tReque°
();

457 
QSPI_DuÆFœshMode_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

460 
QSPI_SídD©a8
(
uöt8_t
 
D©a
);

461 
QSPI_SídD©a16
(
uöt16_t
 
D©a
);

462 
QSPI_SídD©a32
(
uöt32_t
 
D©a
);

463 
uöt8_t
 
QSPI_Re˚iveD©a8
();

464 
uöt16_t
 
QSPI_Re˚iveD©a16
();

465 
uöt32_t
 
QSPI_Re˚iveD©a32
();

468 
QSPI_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

471 
QSPI_ITC⁄fig
(
uöt32_t
 
QSPI_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

472 
uöt32_t
 
QSPI_GëFIFOLevñ
();

473 
FœgSètus
 
QSPI_GëFœgSètus
(
uöt32_t
 
QSPI_FLAG
);

474 
QSPI_CÀ¨Fœg
(
uöt32_t
 
QSPI_FLAG
);

475 
ITSètus
 
QSPI_GëITSètus
(
uöt32_t
 
QSPI_IT
);

476 
QSPI_CÀ¨ITPídögBô
(
uöt32_t
 
QSPI_IT
);

477 
uöt32_t
 
QSPI_GëFMode
();

479 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h

29 #i‚de‡
__STM32F4xx_RCC_H


30 
	#__STM32F4xx_RCC_H


	)

32 #ifde‡
__˝lu•lus


37 
	~"°m32f4xx.h
"

50 
uöt32_t
 
SYSCLK_Fªquícy
;

51 
uöt32_t
 
HCLK_Fªquícy
;

52 
uöt32_t
 
PCLK1_Fªquícy
;

53 
uöt32_t
 
PCLK2_Fªquícy
;

54 }
	tRCC_ClocksTy≥Def
;

65 
	#RCC_HSE_OFF
 ((
uöt8_t
)0x00)

	)

66 
	#RCC_HSE_ON
 ((
uöt8_t
)0x01)

	)

67 
	#RCC_HSE_By∑ss
 ((
uöt8_t
)0x05)

	)

68 
	#IS_RCC_HSE
(
HSE
Ë(((HSEË=
RCC_HSE_OFF
Ë|| ((HSEË=
RCC_HSE_ON
Ë|| \

	)

69 ((
HSE
Ë=
RCC_HSE_By∑ss
))

77 
	#RCC_LSE_LOWPOWER_MODE
 ((
uöt8_t
)0x00)

	)

78 
	#RCC_LSE_HIGHDRIVE_MODE
 ((
uöt8_t
)0x01)

	)

79 
	#IS_RCC_LSE_MODE
(
MODE
Ë(((MODEË=
RCC_LSE_LOWPOWER_MODE
Ë|| \

	)

80 ((
MODE
Ë=
RCC_LSE_HIGHDRIVE_MODE
))

88 
	#RCC_PLLSAIDivR_Div2
 ((
uöt32_t
)0x00000000)

	)

89 
	#RCC_PLLSAIDivR_Div4
 ((
uöt32_t
)0x00010000)

	)

90 
	#RCC_PLLSAIDivR_Div8
 ((
uöt32_t
)0x00020000)

	)

91 
	#RCC_PLLSAIDivR_Div16
 ((
uöt32_t
)0x00030000)

	)

92 
	#IS_RCC_PLLSAI_DIVR_VALUE
(
VALUE
Ë(((VALUEË=
RCC_PLLSAIDivR_Div2
Ë||\

	)

93 ((
VALUE
Ë=
RCC_PLLSAIDivR_Div4
) ||\

94 ((
VALUE
Ë=
RCC_PLLSAIDivR_Div8
) ||\

95 ((
VALUE
Ë=
RCC_PLLSAIDivR_Div16
))

103 
	#RCC_PLLSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

104 
	#RCC_PLLSour˚_HSE
 ((
uöt32_t
)0x00400000)

	)

105 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI
Ë|| \

	)

106 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE
))

107 
	#IS_RCC_PLLM_VALUE
(
VALUE
Ë((VALUEË<63)

	)

108 
	#IS_RCC_PLLN_VALUE
(
VALUE
Ë((192 <(VALUE)Ë&& ((VALUEË<432))

	)

109 
	#IS_RCC_PLLP_VALUE
(
VALUE
Ë(((VALUEË=2Ë|| ((VALUEË=4Ë|| ((VALUEË=6Ë|| ((VALUEË=8))

	)

110 
	#IS_RCC_PLLQ_VALUE
(
VALUE
Ë((4 <(VALUE)Ë&& ((VALUEË<15))

	)

111 #i‡
deföed
(
STM32F446xx
)

112 
	#IS_RCC_PLLR_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<7))

	)

115 
	#IS_RCC_PLLI2SN_VALUE
(
VALUE
Ë((192 <(VALUE)Ë&& ((VALUEË<432))

	)

116 
	#IS_RCC_PLLI2SR_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<7))

	)

117 
	#IS_RCC_PLLI2SM_VALUE
(
VALUE
Ë((VALUEË<63)

	)

118 
	#IS_RCC_PLLI2SQ_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<15))

	)

119 #i‡
deföed
(
STM32F446xx
)

120 
	#IS_RCC_PLLI2SP_VALUE
(
VALUE
Ë(((VALUEË=2Ë|| ((VALUEË=4Ë|| ((VALUEË=6Ë|| ((VALUEË=8))

	)

121 
	#IS_RCC_PLLSAIM_VALUE
(
VALUE
Ë((VALUEË<63)

	)

123 
	#IS_RCC_PLLSAIN_VALUE
(
VALUE
Ë((49 <(VALUE)Ë&& ((VALUEË<432))

	)

124 #i‡
deföed
(
STM32F446xx
)

125 
	#IS_RCC_PLLSAIP_VALUE
(
VALUE
Ë(((VALUEË=2Ë|| ((VALUEË=4Ë|| ((VALUEË=6Ë|| ((VALUEË=8))

	)

127 
	#IS_RCC_PLLSAIQ_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<15))

	)

128 
	#IS_RCC_PLLSAIR_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<7))

	)

130 
	#IS_RCC_PLLSAI_DIVQ_VALUE
(
VALUE
Ë((1 <(VALUE)Ë&& ((VALUEË<32))

	)

131 
	#IS_RCC_PLLI2S_DIVQ_VALUE
(
VALUE
Ë((1 <(VALUE)Ë&& ((VALUEË<32))

	)

140 #i‡
deföed
(
STM32F446xx
)

141 
	#RCC_SYSCLKSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

142 
	#RCC_SYSCLKSour˚_HSE
 ((
uöt32_t
)0x00000001)

	)

143 
	#RCC_SYSCLKSour˚_PLLPCLK
 ((
uöt32_t
)0x00000002)

	)

144 
	#RCC_SYSCLKSour˚_PLLRCLK
 ((
uöt32_t
)0x00000003)

	)

145 
	#IS_RCC_SYSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SYSCLKSour˚_HSI
Ë|| \

	)

146 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_HSE
) || \

147 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_PLLPCLK
) || \

148 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_PLLRCLK
))

150 
	#RCC_SYSCLKSour˚_PLLCLK
 
RCC_SYSCLKSour˚_PLLPCLK


	)

153 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F411xE
)

154 
	#RCC_SYSCLKSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

155 
	#RCC_SYSCLKSour˚_HSE
 ((
uöt32_t
)0x00000001)

	)

156 
	#RCC_SYSCLKSour˚_PLLCLK
 ((
uöt32_t
)0x00000002)

	)

157 
	#IS_RCC_SYSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SYSCLKSour˚_HSI
Ë|| \

	)

158 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_HSE
) || \

159 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_PLLCLK
))

168 
	#RCC_SYSCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

169 
	#RCC_SYSCLK_Div2
 ((
uöt32_t
)0x00000080)

	)

170 
	#RCC_SYSCLK_Div4
 ((
uöt32_t
)0x00000090)

	)

171 
	#RCC_SYSCLK_Div8
 ((
uöt32_t
)0x000000A0)

	)

172 
	#RCC_SYSCLK_Div16
 ((
uöt32_t
)0x000000B0)

	)

173 
	#RCC_SYSCLK_Div64
 ((
uöt32_t
)0x000000C0)

	)

174 
	#RCC_SYSCLK_Div128
 ((
uöt32_t
)0x000000D0)

	)

175 
	#RCC_SYSCLK_Div256
 ((
uöt32_t
)0x000000E0)

	)

176 
	#RCC_SYSCLK_Div512
 ((
uöt32_t
)0x000000F0)

	)

177 
	#IS_RCC_HCLK
(
HCLK
Ë(((HCLKË=
RCC_SYSCLK_Div1
Ë|| ((HCLKË=
RCC_SYSCLK_Div2
Ë|| \

	)

178 ((
HCLK
Ë=
RCC_SYSCLK_Div4
Ë|| ((HCLKË=
RCC_SYSCLK_Div8
) || \

179 ((
HCLK
Ë=
RCC_SYSCLK_Div16
Ë|| ((HCLKË=
RCC_SYSCLK_Div64
) || \

180 ((
HCLK
Ë=
RCC_SYSCLK_Div128
Ë|| ((HCLKË=
RCC_SYSCLK_Div256
) || \

181 ((
HCLK
Ë=
RCC_SYSCLK_Div512
))

189 
	#RCC_HCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

190 
	#RCC_HCLK_Div2
 ((
uöt32_t
)0x00001000)

	)

191 
	#RCC_HCLK_Div4
 ((
uöt32_t
)0x00001400)

	)

192 
	#RCC_HCLK_Div8
 ((
uöt32_t
)0x00001800)

	)

193 
	#RCC_HCLK_Div16
 ((
uöt32_t
)0x00001C00)

	)

194 
	#IS_RCC_PCLK
(
PCLK
Ë(((PCLKË=
RCC_HCLK_Div1
Ë|| ((PCLKË=
RCC_HCLK_Div2
Ë|| \

	)

195 ((
PCLK
Ë=
RCC_HCLK_Div4
Ë|| ((PCLKË=
RCC_HCLK_Div8
) || \

196 ((
PCLK
Ë=
RCC_HCLK_Div16
))

204 
	#RCC_IT_LSIRDY
 ((
uöt8_t
)0x01)

	)

205 
	#RCC_IT_LSERDY
 ((
uöt8_t
)0x02)

	)

206 
	#RCC_IT_HSIRDY
 ((
uöt8_t
)0x04)

	)

207 
	#RCC_IT_HSERDY
 ((
uöt8_t
)0x08)

	)

208 
	#RCC_IT_PLLRDY
 ((
uöt8_t
)0x10)

	)

209 
	#RCC_IT_PLLI2SRDY
 ((
uöt8_t
)0x20)

	)

210 
	#RCC_IT_PLLSAIRDY
 ((
uöt8_t
)0x40)

	)

211 
	#RCC_IT_CSS
 ((
uöt8_t
)0x80)

	)

213 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x80Ë=0x00Ë&& ((ITË!0x00))

	)

214 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
Ë|| \

	)

215 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

216 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
) || \

217 ((
IT
Ë=
RCC_IT_PLLSAIRDY
Ë|| ((ITË=
RCC_IT_PLLI2SRDY
))

218 
	#IS_RCC_CLEAR_IT
(
IT
)((ITË!0x00)

	)

227 
	#RCC_LSE_OFF
 ((
uöt8_t
)0x00)

	)

228 
	#RCC_LSE_ON
 ((
uöt8_t
)0x01)

	)

229 
	#RCC_LSE_By∑ss
 ((
uöt8_t
)0x04)

	)

230 
	#IS_RCC_LSE
(
LSE
Ë(((LSEË=
RCC_LSE_OFF
Ë|| ((LSEË=
RCC_LSE_ON
Ë|| \

	)

231 ((
LSE
Ë=
RCC_LSE_By∑ss
))

239 
	#RCC_RTCCLKSour˚_LSE
 ((
uöt32_t
)0x00000100)

	)

240 
	#RCC_RTCCLKSour˚_LSI
 ((
uöt32_t
)0x00000200)

	)

241 
	#RCC_RTCCLKSour˚_HSE_Div2
 ((
uöt32_t
)0x00020300)

	)

242 
	#RCC_RTCCLKSour˚_HSE_Div3
 ((
uöt32_t
)0x00030300)

	)

243 
	#RCC_RTCCLKSour˚_HSE_Div4
 ((
uöt32_t
)0x00040300)

	)

244 
	#RCC_RTCCLKSour˚_HSE_Div5
 ((
uöt32_t
)0x00050300)

	)

245 
	#RCC_RTCCLKSour˚_HSE_Div6
 ((
uöt32_t
)0x00060300)

	)

246 
	#RCC_RTCCLKSour˚_HSE_Div7
 ((
uöt32_t
)0x00070300)

	)

247 
	#RCC_RTCCLKSour˚_HSE_Div8
 ((
uöt32_t
)0x00080300)

	)

248 
	#RCC_RTCCLKSour˚_HSE_Div9
 ((
uöt32_t
)0x00090300)

	)

249 
	#RCC_RTCCLKSour˚_HSE_Div10
 ((
uöt32_t
)0x000A0300)

	)

250 
	#RCC_RTCCLKSour˚_HSE_Div11
 ((
uöt32_t
)0x000B0300)

	)

251 
	#RCC_RTCCLKSour˚_HSE_Div12
 ((
uöt32_t
)0x000C0300)

	)

252 
	#RCC_RTCCLKSour˚_HSE_Div13
 ((
uöt32_t
)0x000D0300)

	)

253 
	#RCC_RTCCLKSour˚_HSE_Div14
 ((
uöt32_t
)0x000E0300)

	)

254 
	#RCC_RTCCLKSour˚_HSE_Div15
 ((
uöt32_t
)0x000F0300)

	)

255 
	#RCC_RTCCLKSour˚_HSE_Div16
 ((
uöt32_t
)0x00100300)

	)

256 
	#RCC_RTCCLKSour˚_HSE_Div17
 ((
uöt32_t
)0x00110300)

	)

257 
	#RCC_RTCCLKSour˚_HSE_Div18
 ((
uöt32_t
)0x00120300)

	)

258 
	#RCC_RTCCLKSour˚_HSE_Div19
 ((
uöt32_t
)0x00130300)

	)

259 
	#RCC_RTCCLKSour˚_HSE_Div20
 ((
uöt32_t
)0x00140300)

	)

260 
	#RCC_RTCCLKSour˚_HSE_Div21
 ((
uöt32_t
)0x00150300)

	)

261 
	#RCC_RTCCLKSour˚_HSE_Div22
 ((
uöt32_t
)0x00160300)

	)

262 
	#RCC_RTCCLKSour˚_HSE_Div23
 ((
uöt32_t
)0x00170300)

	)

263 
	#RCC_RTCCLKSour˚_HSE_Div24
 ((
uöt32_t
)0x00180300)

	)

264 
	#RCC_RTCCLKSour˚_HSE_Div25
 ((
uöt32_t
)0x00190300)

	)

265 
	#RCC_RTCCLKSour˚_HSE_Div26
 ((
uöt32_t
)0x001A0300)

	)

266 
	#RCC_RTCCLKSour˚_HSE_Div27
 ((
uöt32_t
)0x001B0300)

	)

267 
	#RCC_RTCCLKSour˚_HSE_Div28
 ((
uöt32_t
)0x001C0300)

	)

268 
	#RCC_RTCCLKSour˚_HSE_Div29
 ((
uöt32_t
)0x001D0300)

	)

269 
	#RCC_RTCCLKSour˚_HSE_Div30
 ((
uöt32_t
)0x001E0300)

	)

270 
	#RCC_RTCCLKSour˚_HSE_Div31
 ((
uöt32_t
)0x001F0300)

	)

271 
	#IS_RCC_RTCCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_RTCCLKSour˚_LSE
Ë|| \

	)

272 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_LSI
) || \

273 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div2
) || \

274 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div3
) || \

275 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div4
) || \

276 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div5
) || \

277 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div6
) || \

278 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div7
) || \

279 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div8
) || \

280 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div9
) || \

281 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div10
) || \

282 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div11
) || \

283 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div12
) || \

284 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div13
) || \

285 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div14
) || \

286 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div15
) || \

287 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div16
) || \

288 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div17
) || \

289 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div18
) || \

290 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div19
) || \

291 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div20
) || \

292 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div21
) || \

293 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div22
) || \

294 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div23
) || \

295 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div24
) || \

296 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div25
) || \

297 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div26
) || \

298 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div27
) || \

299 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div28
) || \

300 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div29
) || \

301 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div30
) || \

302 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div31
))

307 #i‡
deföed
(
STM32F446xx
)

311 
	#RCC_I2SCLKSour˚_PLLI2S
 ((
uöt32_t
)0x00)

	)

312 
	#RCC_I2SCLKSour˚_Ext
 ((
uöt32_t
)
RCC_DCKCFGR_I2S1SRC_0
)

	)

313 
	#RCC_I2SCLKSour˚_PLL
 ((
uöt32_t
)
RCC_DCKCFGR_I2S1SRC_1
)

	)

314 
	#RCC_I2SCLKSour˚_HSI_HSE
 ((
uöt32_t
)
RCC_DCKCFGR_I2S1SRC_0
 | 
RCC_DCKCFGR_I2S1SRC_1
)

	)

316 
	#IS_RCC_I2SCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2SCLKSour˚_PLLI2S
Ë|| ((SOURCEË=
RCC_I2SCLKSour˚_Ext
Ë|| \

	)

317 ((
SOURCE
Ë=
RCC_I2SCLKSour˚_PLL
Ë|| ((SOURCEË=
RCC_I2SCLKSour˚_HSI_HSE
))

325 
	#RCC_I2SBus_APB1
 ((
uöt8_t
)0x00)

	)

326 
	#RCC_I2SBus_APB2
 ((
uöt8_t
)0x01)

	)

327 
	#IS_RCC_I2S_APBx
(
BUS
Ë(((BUSË=
RCC_I2SBus_APB1
Ë|| ((BUSË=
RCC_I2SBus_APB2
))

	)

335 
	#RCC_SAICLKSour˚_PLLSAI
 ((
uöt32_t
)0x00)

	)

336 
	#RCC_SAICLKSour˚_PLLI2S
 ((
uöt32_t
)
RCC_DCKCFGR_SAI1SRC_0
)

	)

337 
	#RCC_SAICLKSour˚_PLL
 ((
uöt32_t
)
RCC_DCKCFGR_SAI1SRC_1
)

	)

338 
	#RCC_SAICLKSour˚_HSI_HSE
 ((
uöt32_t
)
RCC_DCKCFGR_SAI1SRC_0
 | 
RCC_DCKCFGR_SAI1SRC_1
)

	)

340 
	#IS_RCC_SAICLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SAICLKSour˚_PLLSAI
Ë|| ((SOURCEË=
RCC_SAICLKSour˚_PLLI2S
Ë|| \

	)

341 ((
SOURCE
Ë=
RCC_SAICLKSour˚_PLL
Ë|| ((SOURCEË=
RCC_SAICLKSour˚_HSI_HSE
))

349 
	#RCC_SAIIn°™˚_SAI1
 ((
uöt8_t
)0x00)

	)

350 
	#RCC_SAIIn°™˚_SAI2
 ((
uöt8_t
)0x01)

	)

351 
	#IS_RCC_SAI_INSTANCE
(
BUS
Ë(((BUSË=
RCC_SAIIn°™˚_SAI1
Ë|| ((BUSË=
RCC_SAIIn°™˚_SAI2
))

	)

357 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F411xE
)

361 
	#RCC_I2S2CLKSour˚_PLLI2S
 ((
uöt8_t
)0x00)

	)

362 
	#RCC_I2S2CLKSour˚_Ext
 ((
uöt8_t
)0x01)

	)

364 
	#IS_RCC_I2SCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S2CLKSour˚_PLLI2S
Ë|| ((SOURCEË=
RCC_I2S2CLKSour˚_Ext
))

	)

372 
	#RCC_SAIACLKSour˚_PLLSAI
 ((
uöt32_t
)0x00000000)

	)

373 
	#RCC_SAIACLKSour˚_PLLI2S
 ((
uöt32_t
)0x00100000)

	)

374 
	#RCC_SAIACLKSour˚_Ext
 ((
uöt32_t
)0x00200000)

	)

376 
	#IS_RCC_SAIACLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SAIACLKSour˚_PLLI2S
Ë||\

	)

377 ((
SOURCE
Ë=
RCC_SAIACLKSour˚_PLLSAI
) ||\

378 ((
SOURCE
Ë=
RCC_SAIACLKSour˚_Ext
))

386 
	#RCC_SAIBCLKSour˚_PLLSAI
 ((
uöt32_t
)0x00000000)

	)

387 
	#RCC_SAIBCLKSour˚_PLLI2S
 ((
uöt32_t
)0x00400000)

	)

388 
	#RCC_SAIBCLKSour˚_Ext
 ((
uöt32_t
)0x00800000)

	)

390 
	#IS_RCC_SAIBCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SAIBCLKSour˚_PLLI2S
Ë||\

	)

391 ((
SOURCE
Ë=
RCC_SAIBCLKSour˚_PLLSAI
) ||\

392 ((
SOURCE
Ë=
RCC_SAIBCLKSour˚_Ext
))

401 
	#RCC_TIMPªscDeß˘iv©ed
 ((
uöt8_t
)0x00)

	)

402 
	#RCC_TIMPªscA˘iv©ed
 ((
uöt8_t
)0x01)

	)

404 
	#IS_RCC_TIMCLK_PRESCALER
(
VALUE
Ë(((VALUEË=
RCC_TIMPªscDeß˘iv©ed
Ë|| ((VALUEË=
RCC_TIMPªscA˘iv©ed
))

	)

409 #i‡
deföed
(
STM32F446xx
)

413 
	#RCC_SDIOCLKSour˚_48MHZ
 ((
uöt8_t
)0x00)

	)

414 
	#RCC_SDIOCLKSour˚_SYSCLK
 ((
uöt8_t
)0x01)

	)

415 
	#IS_RCC_SDIO_CLOCKSOURCE
(
CLKSOURCE
Ë(((CLKSOURCEË=
RCC_SDIOCLKSour˚_48MHZ
Ë|| \

	)

416 ((
CLKSOURCE
Ë=
RCC_SDIOCLKSour˚_SYSCLK
))

425 
	#RCC_48MHZCLKSour˚_PLL
 ((
uöt8_t
)0x00)

	)

426 
	#RCC_48MHZCLKSour˚_PLLSAI
 ((
uöt8_t
)0x01)

	)

427 
	#IS_RCC_48MHZ_CLOCKSOURCE
(
CLKSOURCE
Ë(((CLKSOURCEË=
RCC_48MHZCLKSour˚_PLL
Ë|| \

	)

428 ((
CLKSOURCE
Ë=
RCC_48MHZCLKSour˚_PLLSAI
))

434 #i‡
deföed
(
STM32F446xx
)

438 
	#RCC_SPDIFRXCLKSour˚_PLLR
 ((
uöt8_t
)0x00)

	)

439 
	#RCC_SPDIFRXCLKSour˚_PLLI2SP
 ((
uöt8_t
)0x01)

	)

440 
	#IS_RCC_SPDIFRX_CLOCKSOURCE
(
CLKSOURCE
Ë(((CLKSOURCEË=
RCC_SPDIFRXCLKSour˚_PLLR
Ë|| \

	)

441 ((
CLKSOURCE
Ë=
RCC_SPDIFRXCLKSour˚_PLLI2SP
))

449 
	#RCC_CECCLKSour˚_HSIDiv488
 ((
uöt8_t
)0x00)

	)

450 
	#RCC_CECCLKSour˚_LSE
 ((
uöt8_t
)0x01)

	)

451 
	#IS_RCC_CEC_CLOCKSOURCE
(
CLKSOURCE
Ë(((CLKSOURCEË=
RCC_CECCLKSour˚_HSIDiv488
Ë|| \

	)

452 ((
CLKSOURCE
Ë=
RCC_CECCLKSour˚_LSE
))

460 
	#RCC_FMPI2C1CLKSour˚_APB1
 ((
uöt32_t
)0x00)

	)

461 
	#RCC_FMPI2C1CLKSour˚_SYSCLK
 ((
uöt32_t
)
RCC_DCKCFGR2_FMPI2C1SEL_0
)

	)

462 
	#RCC_FMPI2C1CLKSour˚_HSI
 ((
uöt32_t
)
RCC_DCKCFGR2_FMPI2C1SEL_1
)

	)

464 
	#IS_RCC_FMPI2C1_CLOCKSOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_FMPI2C1CLKSour˚_APB1
Ë|| ((SOURCEË=
RCC_FMPI2C1CLKSour˚_SYSCLK
Ë|| \

	)

465 ((
SOURCE
Ë=
RCC_FMPI2C1CLKSour˚_HSI
))

473 
	#RCC_AHB1ClockG©ög_APB1Bridge
 ((
uöt32_t
)0x00000001)

	)

474 
	#RCC_AHB1ClockG©ög_APB2Bridge
 ((
uöt32_t
)0x00000002)

	)

475 
	#RCC_AHB1ClockG©ög_CM4DBG
 ((
uöt32_t
)0x00000004)

	)

476 
	#RCC_AHB1ClockG©ög_SPARE
 ((
uöt32_t
)0x00000008)

	)

477 
	#RCC_AHB1ClockG©ög_SRAM
 ((
uöt32_t
)0x00000010)

	)

478 
	#RCC_AHB1ClockG©ög_FLITF
 ((
uöt32_t
)0x00000020)

	)

479 
	#RCC_AHB1ClockG©ög_RCC
 ((
uöt32_t
)0x00000040)

	)

481 
	#IS_RCC_AHB1_CLOCKGATING
(
PERIPH
Ë((((PERIPHË& 0xFFFFFF80Ë=0x00Ë&& ((PERIPHË!0x00))

	)

491 
	#RCC_AHB1Pîùh_GPIOA
 ((
uöt32_t
)0x00000001)

	)

492 
	#RCC_AHB1Pîùh_GPIOB
 ((
uöt32_t
)0x00000002)

	)

493 
	#RCC_AHB1Pîùh_GPIOC
 ((
uöt32_t
)0x00000004)

	)

494 
	#RCC_AHB1Pîùh_GPIOD
 ((
uöt32_t
)0x00000008)

	)

495 
	#RCC_AHB1Pîùh_GPIOE
 ((
uöt32_t
)0x00000010)

	)

496 
	#RCC_AHB1Pîùh_GPIOF
 ((
uöt32_t
)0x00000020)

	)

497 
	#RCC_AHB1Pîùh_GPIOG
 ((
uöt32_t
)0x00000040)

	)

498 
	#RCC_AHB1Pîùh_GPIOH
 ((
uöt32_t
)0x00000080)

	)

499 
	#RCC_AHB1Pîùh_GPIOI
 ((
uöt32_t
)0x00000100)

	)

500 
	#RCC_AHB1Pîùh_GPIOJ
 ((
uöt32_t
)0x00000200)

	)

501 
	#RCC_AHB1Pîùh_GPIOK
 ((
uöt32_t
)0x00000400)

	)

502 
	#RCC_AHB1Pîùh_CRC
 ((
uöt32_t
)0x00001000)

	)

503 
	#RCC_AHB1Pîùh_FLITF
 ((
uöt32_t
)0x00008000)

	)

504 
	#RCC_AHB1Pîùh_SRAM1
 ((
uöt32_t
)0x00010000)

	)

505 
	#RCC_AHB1Pîùh_SRAM2
 ((
uöt32_t
)0x00020000)

	)

506 
	#RCC_AHB1Pîùh_BKPSRAM
 ((
uöt32_t
)0x00040000)

	)

507 
	#RCC_AHB1Pîùh_SRAM3
 ((
uöt32_t
)0x00080000)

	)

508 
	#RCC_AHB1Pîùh_CCMDATARAMEN
 ((
uöt32_t
)0x00100000)

	)

509 
	#RCC_AHB1Pîùh_DMA1
 ((
uöt32_t
)0x00200000)

	)

510 
	#RCC_AHB1Pîùh_DMA2
 ((
uöt32_t
)0x00400000)

	)

511 
	#RCC_AHB1Pîùh_DMA2D
 ((
uöt32_t
)0x00800000)

	)

512 
	#RCC_AHB1Pîùh_ETH_MAC
 ((
uöt32_t
)0x02000000)

	)

513 
	#RCC_AHB1Pîùh_ETH_MAC_Tx
 ((
uöt32_t
)0x04000000)

	)

514 
	#RCC_AHB1Pîùh_ETH_MAC_Rx
 ((
uöt32_t
)0x08000000)

	)

515 
	#RCC_AHB1Pîùh_ETH_MAC_PTP
 ((
uöt32_t
)0x10000000)

	)

516 
	#RCC_AHB1Pîùh_OTG_HS
 ((
uöt32_t
)0x20000000)

	)

517 
	#RCC_AHB1Pîùh_OTG_HS_ULPI
 ((
uöt32_t
)0x40000000)

	)

519 
	#IS_RCC_AHB1_CLOCK_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x810BE800Ë=0x00Ë&& ((PERIPHË!0x00))

	)

520 
	#IS_RCC_AHB1_RESET_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xDD1FE800Ë=0x00Ë&& ((PERIPHË!0x00))

	)

521 
	#IS_RCC_AHB1_LPMODE_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x81106800Ë=0x00Ë&& ((PERIPHË!0x00))

	)

530 
	#RCC_AHB2Pîùh_DCMI
 ((
uöt32_t
)0x00000001)

	)

531 
	#RCC_AHB2Pîùh_CRYP
 ((
uöt32_t
)0x00000010)

	)

532 
	#RCC_AHB2Pîùh_HASH
 ((
uöt32_t
)0x00000020)

	)

533 
	#RCC_AHB2Pîùh_RNG
 ((
uöt32_t
)0x00000040)

	)

534 
	#RCC_AHB2Pîùh_OTG_FS
 ((
uöt32_t
)0x00000080)

	)

535 
	#IS_RCC_AHB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFF0EË=0x00Ë&& ((PERIPHË!0x00))

	)

543 #i‡
deföed
(
STM32F40_41xxx
)

544 
	#RCC_AHB3Pîùh_FSMC
 ((
uöt32_t
)0x00000001)

	)

545 
	#IS_RCC_AHB3_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFFFEË=0x00Ë&& ((PERIPHË!0x00))

	)

548 #i‡
deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
)

549 
	#RCC_AHB3Pîùh_FMC
 ((
uöt32_t
)0x00000001)

	)

550 
	#IS_RCC_AHB3_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFFFEË=0x00Ë&& ((PERIPHË!0x00))

	)

553 #i‡
deföed
(
STM32F446xx
)

554 
	#RCC_AHB3Pîùh_FMC
 ((
uöt32_t
)0x00000001)

	)

555 
	#RCC_AHB3Pîùh_QSPI
 ((
uöt32_t
)0x00000002)

	)

556 
	#IS_RCC_AHB3_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFFFCË=0x00Ë&& ((PERIPHË!0x00))

	)

566 
	#RCC_APB1Pîùh_TIM2
 ((
uöt32_t
)0x00000001)

	)

567 
	#RCC_APB1Pîùh_TIM3
 ((
uöt32_t
)0x00000002)

	)

568 
	#RCC_APB1Pîùh_TIM4
 ((
uöt32_t
)0x00000004)

	)

569 
	#RCC_APB1Pîùh_TIM5
 ((
uöt32_t
)0x00000008)

	)

570 
	#RCC_APB1Pîùh_TIM6
 ((
uöt32_t
)0x00000010)

	)

571 
	#RCC_APB1Pîùh_TIM7
 ((
uöt32_t
)0x00000020)

	)

572 
	#RCC_APB1Pîùh_TIM12
 ((
uöt32_t
)0x00000040)

	)

573 
	#RCC_APB1Pîùh_TIM13
 ((
uöt32_t
)0x00000080)

	)

574 
	#RCC_APB1Pîùh_TIM14
 ((
uöt32_t
)0x00000100)

	)

575 
	#RCC_APB1Pîùh_WWDG
 ((
uöt32_t
)0x00000800)

	)

576 
	#RCC_APB1Pîùh_SPI2
 ((
uöt32_t
)0x00004000)

	)

577 
	#RCC_APB1Pîùh_SPI3
 ((
uöt32_t
)0x00008000)

	)

578 #i‡
deföed
(
STM32F446xx
)

579 
	#RCC_APB1Pîùh_SPDIFRX
 ((
uöt32_t
)0x00010000)

	)

581 
	#RCC_APB1Pîùh_USART2
 ((
uöt32_t
)0x00020000)

	)

582 
	#RCC_APB1Pîùh_USART3
 ((
uöt32_t
)0x00040000)

	)

583 
	#RCC_APB1Pîùh_UART4
 ((
uöt32_t
)0x00080000)

	)

584 
	#RCC_APB1Pîùh_UART5
 ((
uöt32_t
)0x00100000)

	)

585 
	#RCC_APB1Pîùh_I2C1
 ((
uöt32_t
)0x00200000)

	)

586 
	#RCC_APB1Pîùh_I2C2
 ((
uöt32_t
)0x00400000)

	)

587 
	#RCC_APB1Pîùh_I2C3
 ((
uöt32_t
)0x00800000)

	)

588 #i‡
deföed
(
STM32F446xx
)

589 
	#RCC_APB1Pîùh_FMPI2C1
 ((
uöt32_t
)0x01000000)

	)

591 
	#RCC_APB1Pîùh_CAN1
 ((
uöt32_t
)0x02000000)

	)

592 
	#RCC_APB1Pîùh_CAN2
 ((
uöt32_t
)0x04000000)

	)

593 #i‡
deföed
(
STM32F446xx
)

594 
	#RCC_APB1Pîùh_CEC
 ((
uöt32_t
)0x08000000)

	)

596 
	#RCC_APB1Pîùh_PWR
 ((
uöt32_t
)0x10000000)

	)

597 
	#RCC_APB1Pîùh_DAC
 ((
uöt32_t
)0x20000000)

	)

598 
	#RCC_APB1Pîùh_UART7
 ((
uöt32_t
)0x40000000)

	)

599 
	#RCC_APB1Pîùh_UART8
 ((
uöt32_t
)0x80000000)

	)

600 
	#IS_RCC_APB1_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x00003600Ë=0x00Ë&& ((PERIPHË!0x00))

	)

608 
	#RCC_APB2Pîùh_TIM1
 ((
uöt32_t
)0x00000001)

	)

609 
	#RCC_APB2Pîùh_TIM8
 ((
uöt32_t
)0x00000002)

	)

610 
	#RCC_APB2Pîùh_USART1
 ((
uöt32_t
)0x00000010)

	)

611 
	#RCC_APB2Pîùh_USART6
 ((
uöt32_t
)0x00000020)

	)

612 
	#RCC_APB2Pîùh_ADC
 ((
uöt32_t
)0x00000100)

	)

613 
	#RCC_APB2Pîùh_ADC1
 ((
uöt32_t
)0x00000100)

	)

614 
	#RCC_APB2Pîùh_ADC2
 ((
uöt32_t
)0x00000200)

	)

615 
	#RCC_APB2Pîùh_ADC3
 ((
uöt32_t
)0x00000400)

	)

616 
	#RCC_APB2Pîùh_SDIO
 ((
uöt32_t
)0x00000800)

	)

617 
	#RCC_APB2Pîùh_SPI1
 ((
uöt32_t
)0x00001000)

	)

618 
	#RCC_APB2Pîùh_SPI4
 ((
uöt32_t
)0x00002000)

	)

619 
	#RCC_APB2Pîùh_SYSCFG
 ((
uöt32_t
)0x00004000)

	)

620 
	#RCC_APB2Pîùh_TIM9
 ((
uöt32_t
)0x00010000)

	)

621 
	#RCC_APB2Pîùh_TIM10
 ((
uöt32_t
)0x00020000)

	)

622 
	#RCC_APB2Pîùh_TIM11
 ((
uöt32_t
)0x00040000)

	)

623 
	#RCC_APB2Pîùh_SPI5
 ((
uöt32_t
)0x00100000)

	)

624 
	#RCC_APB2Pîùh_SPI6
 ((
uöt32_t
)0x00200000)

	)

625 
	#RCC_APB2Pîùh_SAI1
 ((
uöt32_t
)0x00400000)

	)

626 #i‡
deföed
(
STM32F446xx
)

627 
	#RCC_APB2Pîùh_SAI2
 ((
uöt32_t
)0x00800000)

	)

629 
	#RCC_APB2Pîùh_LTDC
 ((
uöt32_t
)0x04000000)

	)

631 
	#IS_RCC_APB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xF30880CCË=0x00Ë&& ((PERIPHË!0x00))

	)

632 
	#IS_RCC_APB2_RESET_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xF30886CCË=0x00Ë&& ((PERIPHË!0x00))

	)

641 
	#RCC_MCO1Sour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

642 
	#RCC_MCO1Sour˚_LSE
 ((
uöt32_t
)0x00200000)

	)

643 
	#RCC_MCO1Sour˚_HSE
 ((
uöt32_t
)0x00400000)

	)

644 
	#RCC_MCO1Sour˚_PLLCLK
 ((
uöt32_t
)0x00600000)

	)

645 
	#RCC_MCO1Div_1
 ((
uöt32_t
)0x00000000)

	)

646 
	#RCC_MCO1Div_2
 ((
uöt32_t
)0x04000000)

	)

647 
	#RCC_MCO1Div_3
 ((
uöt32_t
)0x05000000)

	)

648 
	#RCC_MCO1Div_4
 ((
uöt32_t
)0x06000000)

	)

649 
	#RCC_MCO1Div_5
 ((
uöt32_t
)0x07000000)

	)

650 
	#IS_RCC_MCO1SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_MCO1Sour˚_HSI
Ë|| ((SOURCEË=
RCC_MCO1Sour˚_LSE
Ë|| \

	)

651 ((
SOURCE
Ë=
RCC_MCO1Sour˚_HSE
Ë|| ((SOURCEË=
RCC_MCO1Sour˚_PLLCLK
))

653 
	#IS_RCC_MCO1DIV
(
DIV
Ë(((DIVË=
RCC_MCO1Div_1
Ë|| ((DIVË=
RCC_MCO1Div_2
Ë|| \

	)

654 ((
DIV
Ë=
RCC_MCO1Div_3
Ë|| ((DIVË=
RCC_MCO1Div_4
) || \

655 ((
DIV
Ë=
RCC_MCO1Div_5
))

663 
	#RCC_MCO2Sour˚_SYSCLK
 ((
uöt32_t
)0x00000000)

	)

664 
	#RCC_MCO2Sour˚_PLLI2SCLK
 ((
uöt32_t
)0x40000000)

	)

665 
	#RCC_MCO2Sour˚_HSE
 ((
uöt32_t
)0x80000000)

	)

666 
	#RCC_MCO2Sour˚_PLLCLK
 ((
uöt32_t
)0xC0000000)

	)

667 
	#RCC_MCO2Div_1
 ((
uöt32_t
)0x00000000)

	)

668 
	#RCC_MCO2Div_2
 ((
uöt32_t
)0x20000000)

	)

669 
	#RCC_MCO2Div_3
 ((
uöt32_t
)0x28000000)

	)

670 
	#RCC_MCO2Div_4
 ((
uöt32_t
)0x30000000)

	)

671 
	#RCC_MCO2Div_5
 ((
uöt32_t
)0x38000000)

	)

672 
	#IS_RCC_MCO2SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_MCO2Sour˚_SYSCLK
Ë|| ((SOURCEË=
RCC_MCO2Sour˚_PLLI2SCLK
)|| \

	)

673 ((
SOURCE
Ë=
RCC_MCO2Sour˚_HSE
Ë|| ((SOURCEË=
RCC_MCO2Sour˚_PLLCLK
))

675 
	#IS_RCC_MCO2DIV
(
DIV
Ë(((DIVË=
RCC_MCO2Div_1
Ë|| ((DIVË=
RCC_MCO2Div_2
Ë|| \

	)

676 ((
DIV
Ë=
RCC_MCO2Div_3
Ë|| ((DIVË=
RCC_MCO2Div_4
) || \

677 ((
DIV
Ë=
RCC_MCO2Div_5
))

685 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)0x21)

	)

686 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)0x31)

	)

687 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)0x39)

	)

688 
	#RCC_FLAG_PLLI2SRDY
 ((
uöt8_t
)0x3B)

	)

689 
	#RCC_FLAG_PLLSAIRDY
 ((
uöt8_t
)0x3D)

	)

690 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)0x41)

	)

691 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)0x61)

	)

692 
	#RCC_FLAG_BORRST
 ((
uöt8_t
)0x79)

	)

693 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)0x7A)

	)

694 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)0x7B)

	)

695 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)0x7C)

	)

696 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)0x7D)

	)

697 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)0x7E)

	)

698 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)0x7F)

	)

700 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
Ë|| \

	)

701 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

702 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_BORRST
) || \

703 ((
FLAG
Ë=
RCC_FLAG_PINRST
Ë|| ((FLAGË=
RCC_FLAG_PORRST
) || \

704 ((
FLAG
Ë=
RCC_FLAG_SFTRST
Ë|| ((FLAGË=
RCC_FLAG_IWDGRST
)|| \

705 ((
FLAG
Ë=
RCC_FLAG_WWDGRST
Ë|| ((FLAGË=
RCC_FLAG_LPWRRST
)|| \

706 ((
FLAG
Ë=
RCC_FLAG_PLLI2SRDY
)|| ((FLAGË=
RCC_FLAG_PLLSAIRDY
))

708 
	#IS_RCC_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x1F)

	)

721 
RCC_DeInô
();

724 
RCC_HSEC⁄fig
(
uöt8_t
 
RCC_HSE
);

725 
Eº‹Sètus
 
RCC_WaôF‹HSESèπUp
();

726 
RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
);

727 
RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

728 
RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
);

729 
RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

731 
RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

732 #i‡
deföed
(
STM32F446xx
)

733 
RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
PLLM
, uöt32_à
PLLN
, uöt32_à
PLLP
, uöt32_à
PLLQ
, uöt32_à
PLLR
);

736 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F411xE
)

737 
RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
PLLM
, uöt32_à
PLLN
, uöt32_à
PLLP
, uöt32_à
PLLQ
);

740 
RCC_PLLI2SCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

741 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F401xx
)

742 
RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SR
);

744 #i‡
deföed
(
STM32F411xE
)

745 
RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SR
, uöt32_à
PLLI2SM
);

747 #i‡
deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
)

748 
RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SQ
, uöt32_à
PLLI2SR
);

750 #i‡
deföed
(
STM32F446xx
)

751 
RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SM
, uöt32_à
PLLI2SN
, uöt32_à
PLLI2SP
, uöt32_à
PLLI2SQ
, uöt32_à
PLLI2SR
);

754 
RCC_PLLSAICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

755 #i‡
deföed
(
STM32F446xx
)

756 
RCC_PLLSAIC⁄fig
(
uöt32_t
 
PLLSAIM
, uöt32_à
PLLSAIN
, uöt32_à
PLLSAIP
, uöt32_à
PLLSAIQ
);

758 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F411xE
)

759 
RCC_PLLSAIC⁄fig
(
uöt32_t
 
PLLSAIN
, uöt32_à
PLLSAIQ
, uöt32_à
PLLSAIR
);

762 
RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

763 
RCC_MCO1C⁄fig
(
uöt32_t
 
RCC_MCO1Sour˚
, uöt32_à
RCC_MCO1Div
);

764 
RCC_MCO2C⁄fig
(
uöt32_t
 
RCC_MCO2Sour˚
, uöt32_à
RCC_MCO2Div
);

767 
RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
);

768 
uöt8_t
 
RCC_GëSYSCLKSour˚
();

769 
RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
);

770 
RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
);

771 
RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
);

772 
RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
);

775 
RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
);

776 
RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

777 
RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

779 #i‡
deföed
(
STM32F446xx
)

780 
RCC_I2SCLKC⁄fig
(
uöt32_t
 
RCC_I2SAPBx
, uöt32_à
RCC_I2SCLKSour˚
);

781 
RCC_SAICLKC⁄fig
(
uöt32_t
 
RCC_SAIIn°™˚
, uöt32_à
RCC_SAICLKSour˚
);

784 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F411xE
)

785 
RCC_I2SCLKC⁄fig
(
uöt32_t
 
RCC_I2SCLKSour˚
);

786 
RCC_SAIBlockACLKC⁄fig
(
uöt32_t
 
RCC_SAIBlockACLKSour˚
);

787 
RCC_SAIBlockBCLKC⁄fig
(
uöt32_t
 
RCC_SAIBlockBCLKSour˚
);

790 
RCC_SAIPLLI2SClkDivC⁄fig
(
uöt32_t
 
RCC_PLLI2SDivQ
);

791 
RCC_SAIPLLSAIClkDivC⁄fig
(
uöt32_t
 
RCC_PLLSAIDivQ
);

793 
RCC_LTDCCLKDivC⁄fig
(
uöt32_t
 
RCC_PLLSAIDivR
);

794 
RCC_TIMCLKPªsC⁄fig
(
uöt32_t
 
RCC_TIMCLKPªsˇÀr
);

796 
RCC_AHB1PîùhClockCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

797 
RCC_AHB2PîùhClockCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

798 
RCC_AHB3PîùhClockCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

799 
RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

800 
RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

802 
RCC_AHB1PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

803 
RCC_AHB2PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

804 
RCC_AHB3PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

805 
RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

806 
RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

808 
RCC_AHB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

809 
RCC_AHB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

810 
RCC_AHB3PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

811 
RCC_APB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

812 
RCC_APB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

815 
RCC_LSEModeC⁄fig
(
uöt8_t
 
RCC_Mode
);

818 #i‡
deföed
(
STM32F446xx
)

819 
RCC_48MHzClockSour˚C⁄fig
(
uöt8_t
 
RCC_ClockSour˚
);

820 
RCC_SDIOClockSour˚C⁄fig
(
uöt8_t
 
RCC_ClockSour˚
);

824 #i‡
deföed
(
STM32F446xx
)

825 
RCC_AHB1ClockG©ögCmd
(
uöt32_t
 
RCC_AHB1ClockG©ög
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

826 
RCC_SPDIFRXClockSour˚C⁄fig
(
uöt8_t
 
RCC_ClockSour˚
);

827 
RCC_CECClockSour˚C⁄fig
(
uöt8_t
 
RCC_ClockSour˚
);

828 
RCC_FMPI2C1ClockSour˚C⁄fig
(
uöt32_t
 
RCC_ClockSour˚
);

832 
RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

833 
FœgSètus
 
RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
);

834 
RCC_CÀ¨Fœg
();

835 
ITSètus
 
RCC_GëITSètus
(
uöt8_t
 
RCC_IT
);

836 
RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
);

838 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rng.h

30 #i‚de‡
__STM32F4xx_RNG_H


31 
	#__STM32F4xx_RNG_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

58 
	#RNG_FLAG_DRDY
 ((
uöt8_t
)0x0001Ë

	)

59 
	#RNG_FLAG_CECS
 ((
uöt8_t
)0x0002Ë

	)

60 
	#RNG_FLAG_SECS
 ((
uöt8_t
)0x0004Ë

	)

62 
	#IS_RNG_GET_FLAG
(
RNG_FLAG
Ë(((RNG_FLAGË=
RNG_FLAG_DRDY
Ë|| \

	)

63 ((
RNG_FLAG
Ë=
RNG_FLAG_CECS
) || \

64 ((
RNG_FLAG
Ë=
RNG_FLAG_SECS
))

65 
	#IS_RNG_CLEAR_FLAG
(
RNG_FLAG
Ë(((RNG_FLAGË=
RNG_FLAG_CECS
Ë|| \

	)

66 ((
RNG_FLAG
Ë=
RNG_FLAG_SECS
))

74 
	#RNG_IT_CEI
 ((
uöt8_t
)0x20Ë

	)

75 
	#RNG_IT_SEI
 ((
uöt8_t
)0x40Ë

	)

77 
	#IS_RNG_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x9FË=0x00Ë&& ((ITË!0x00))

	)

78 
	#IS_RNG_GET_IT
(
RNG_IT
Ë(((RNG_ITË=
RNG_IT_CEI
Ë|| ((RNG_ITË=
RNG_IT_SEI
))

	)

91 
RNG_DeInô
();

94 
RNG_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

97 
uöt32_t
 
RNG_GëR™domNumbî
();

100 
RNG_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

101 
FœgSètus
 
RNG_GëFœgSètus
(
uöt8_t
 
RNG_FLAG
);

102 
RNG_CÀ¨Fœg
(
uöt8_t
 
RNG_FLAG
);

103 
ITSètus
 
RNG_GëITSètus
(
uöt8_t
 
RNG_IT
);

104 
RNG_CÀ¨ITPídögBô
(
uöt8_t
 
RNG_IT
);

106 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rtc.h

30 #i‚de‡
__STM32F4xx_RTC_H


31 
	#__STM32F4xx_RTC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

55 
uöt32_t
 
RTC_HourF‹m©
;

58 
uöt32_t
 
RTC_AsynchPªdiv
;

61 
uöt32_t
 
RTC_SynchPªdiv
;

63 }
	tRTC_InôTy≥Def
;

70 
uöt8_t
 
RTC_Hours
;

75 
uöt8_t
 
RTC_Möuãs
;

78 
uöt8_t
 
RTC_Sec⁄ds
;

81 
uöt8_t
 
RTC_H12
;

83 }
	tRTC_TimeTy≥Def
;

90 
uöt8_t
 
RTC_WìkDay
;

93 
uöt8_t
 
RTC_M⁄th
;

96 
uöt8_t
 
RTC_D©e
;

99 
uöt8_t
 
RTC_Yór
;

101 }
	tRTC_D©eTy≥Def
;

108 
RTC_TimeTy≥Def
 
RTC_AœrmTime
;

110 
uöt32_t
 
RTC_AœrmMask
;

113 
uöt32_t
 
RTC_AœrmD©eWìkDaySñ
;

116 
uöt8_t
 
RTC_AœrmD©eWìkDay
;

121 }
	tRTC_AœrmTy≥Def
;

133 
	#RTC_HourF‹m©_24
 ((
uöt32_t
)0x00000000)

	)

134 
	#RTC_HourF‹m©_12
 ((
uöt32_t
)0x00000040)

	)

135 
	#IS_RTC_HOUR_FORMAT
(
FORMAT
Ë(((FORMATË=
RTC_HourF‹m©_12
Ë|| \

	)

136 ((
FORMAT
Ë=
RTC_HourF‹m©_24
))

144 
	#IS_RTC_ASYNCH_PREDIV
(
PREDIV
Ë((PREDIVË<0x7F)

	)

154 
	#IS_RTC_SYNCH_PREDIV
(
PREDIV
Ë((PREDIVË<0x7FFF)

	)

163 
	#IS_RTC_HOUR12
(
HOUR
Ë(((HOURË> 0Ë&& ((HOURË<12))

	)

164 
	#IS_RTC_HOUR24
(
HOUR
Ë((HOURË<23)

	)

165 
	#IS_RTC_MINUTES
(
MINUTES
Ë((MINUTESË<59)

	)

166 
	#IS_RTC_SECONDS
(
SECONDS
Ë((SECONDSË<59)

	)

175 
	#RTC_H12_AM
 ((
uöt8_t
)0x00)

	)

176 
	#RTC_H12_PM
 ((
uöt8_t
)0x40)

	)

177 
	#IS_RTC_H12
(
PM
Ë(((PMË=
RTC_H12_AM
Ë|| ((PMË=
RTC_H12_PM
))

	)

186 
	#IS_RTC_YEAR
(
YEAR
Ë((YEARË<99)

	)

197 
	#RTC_M⁄th_J™u¨y
 ((
uöt8_t
)0x01)

	)

198 
	#RTC_M⁄th_Febru¨y
 ((
uöt8_t
)0x02)

	)

199 
	#RTC_M⁄th_M¨ch
 ((
uöt8_t
)0x03)

	)

200 
	#RTC_M⁄th_A¥û
 ((
uöt8_t
)0x04)

	)

201 
	#RTC_M⁄th_May
 ((
uöt8_t
)0x05)

	)

202 
	#RTC_M⁄th_Ju√
 ((
uöt8_t
)0x06)

	)

203 
	#RTC_M⁄th_July
 ((
uöt8_t
)0x07)

	)

204 
	#RTC_M⁄th_Augu°
 ((
uöt8_t
)0x08)

	)

205 
	#RTC_M⁄th_Sïãmbî
 ((
uöt8_t
)0x09)

	)

206 
	#RTC_M⁄th_O˘obî
 ((
uöt8_t
)0x10)

	)

207 
	#RTC_M⁄th_Novembî
 ((
uöt8_t
)0x11)

	)

208 
	#RTC_M⁄th_De˚mbî
 ((
uöt8_t
)0x12)

	)

209 
	#IS_RTC_MONTH
(
MONTH
Ë(((MONTHË>1Ë&& ((MONTHË<12))

	)

210 
	#IS_RTC_DATE
(
DATE
Ë(((DATEË>1Ë&& ((DATEË<31))

	)

220 
	#RTC_Wìkday_M⁄day
 ((
uöt8_t
)0x01)

	)

221 
	#RTC_Wìkday_Tuesday
 ((
uöt8_t
)0x02)

	)

222 
	#RTC_Wìkday_Wed√sday
 ((
uöt8_t
)0x03)

	)

223 
	#RTC_Wìkday_Thursday
 ((
uöt8_t
)0x04)

	)

224 
	#RTC_Wìkday_Friday
 ((
uöt8_t
)0x05)

	)

225 
	#RTC_Wìkday_S©urday
 ((
uöt8_t
)0x06)

	)

226 
	#RTC_Wìkday_Sunday
 ((
uöt8_t
)0x07)

	)

227 
	#IS_RTC_WEEKDAY
(
WEEKDAY
Ë(((WEEKDAYË=
RTC_Wìkday_M⁄day
Ë|| \

	)

228 ((
WEEKDAY
Ë=
RTC_Wìkday_Tuesday
) || \

229 ((
WEEKDAY
Ë=
RTC_Wìkday_Wed√sday
) || \

230 ((
WEEKDAY
Ë=
RTC_Wìkday_Thursday
) || \

231 ((
WEEKDAY
Ë=
RTC_Wìkday_Friday
) || \

232 ((
WEEKDAY
Ë=
RTC_Wìkday_S©urday
) || \

233 ((
WEEKDAY
Ë=
RTC_Wìkday_Sunday
))

242 
	#IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
DATE
Ë(((DATEË> 0Ë&& ((DATEË<31))

	)

243 
	#IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
WEEKDAY
Ë(((WEEKDAYË=
RTC_Wìkday_M⁄day
Ë|| \

	)

244 ((
WEEKDAY
Ë=
RTC_Wìkday_Tuesday
) || \

245 ((
WEEKDAY
Ë=
RTC_Wìkday_Wed√sday
) || \

246 ((
WEEKDAY
Ë=
RTC_Wìkday_Thursday
) || \

247 ((
WEEKDAY
Ë=
RTC_Wìkday_Friday
) || \

248 ((
WEEKDAY
Ë=
RTC_Wìkday_S©urday
) || \

249 ((
WEEKDAY
Ë=
RTC_Wìkday_Sunday
))

259 
	#RTC_AœrmD©eWìkDaySñ_D©e
 ((
uöt32_t
)0x00000000)

	)

260 
	#RTC_AœrmD©eWìkDaySñ_WìkDay
 ((
uöt32_t
)0x40000000)

	)

262 
	#IS_RTC_ALARM_DATE_WEEKDAY_SEL
(
SEL
Ë(((SELË=
RTC_AœrmD©eWìkDaySñ_D©e
Ë|| \

	)

263 ((
SEL
Ë=
RTC_AœrmD©eWìkDaySñ_WìkDay
))

273 
	#RTC_AœrmMask_N⁄e
 ((
uöt32_t
)0x00000000)

	)

274 
	#RTC_AœrmMask_D©eWìkDay
 ((
uöt32_t
)0x80000000)

	)

275 
	#RTC_AœrmMask_Hours
 ((
uöt32_t
)0x00800000)

	)

276 
	#RTC_AœrmMask_Möuãs
 ((
uöt32_t
)0x00008000)

	)

277 
	#RTC_AœrmMask_Sec⁄ds
 ((
uöt32_t
)0x00000080)

	)

278 
	#RTC_AœrmMask_AŒ
 ((
uöt32_t
)0x80808080)

	)

279 
	#IS_ALARM_MASK
(
MASK
Ë(((MASKË& 0x7F7F7F7FË=(
uöt32_t
)
RESET
)

	)

288 
	#RTC_Aœrm_A
 ((
uöt32_t
)0x00000100)

	)

289 
	#RTC_Aœrm_B
 ((
uöt32_t
)0x00000200)

	)

290 
	#IS_RTC_ALARM
(
ALARM
Ë(((ALARMË=
RTC_Aœrm_A
Ë|| ((ALARMË=
RTC_Aœrm_B
))

	)

291 
	#IS_RTC_CMD_ALARM
(
ALARM
Ë(((ALARMË& (
RTC_Aœrm_A
 | 
RTC_Aœrm_B
)Ë!(
uöt32_t
)
RESET
)

	)

300 
	#RTC_AœrmSubSec⁄dMask_AŒ
 ((
uöt32_t
)0x00000000Ë

	)

303 
	#RTC_AœrmSubSec⁄dMask_SS14_1
 ((
uöt32_t
)0x01000000Ë

	)

305 
	#RTC_AœrmSubSec⁄dMask_SS14_2
 ((
uöt32_t
)0x02000000Ë

	)

307 
	#RTC_AœrmSubSec⁄dMask_SS14_3
 ((
uöt32_t
)0x03000000Ë

	)

309 
	#RTC_AœrmSubSec⁄dMask_SS14_4
 ((
uöt32_t
)0x04000000Ë

	)

311 
	#RTC_AœrmSubSec⁄dMask_SS14_5
 ((
uöt32_t
)0x05000000Ë

	)

313 
	#RTC_AœrmSubSec⁄dMask_SS14_6
 ((
uöt32_t
)0x06000000Ë

	)

315 
	#RTC_AœrmSubSec⁄dMask_SS14_7
 ((
uöt32_t
)0x07000000Ë

	)

317 
	#RTC_AœrmSubSec⁄dMask_SS14_8
 ((
uöt32_t
)0x08000000Ë

	)

319 
	#RTC_AœrmSubSec⁄dMask_SS14_9
 ((
uöt32_t
)0x09000000Ë

	)

321 
	#RTC_AœrmSubSec⁄dMask_SS14_10
 ((
uöt32_t
)0x0A000000Ë

	)

323 
	#RTC_AœrmSubSec⁄dMask_SS14_11
 ((
uöt32_t
)0x0B000000Ë

	)

325 
	#RTC_AœrmSubSec⁄dMask_SS14_12
 ((
uöt32_t
)0x0C000000Ë

	)

327 
	#RTC_AœrmSubSec⁄dMask_SS14_13
 ((
uöt32_t
)0x0D000000Ë

	)

329 
	#RTC_AœrmSubSec⁄dMask_SS14
 ((
uöt32_t
)0x0E000000Ë

	)

331 
	#RTC_AœrmSubSec⁄dMask_N⁄e
 ((
uöt32_t
)0x0F000000Ë

	)

333 
	#IS_RTC_ALARM_SUB_SECOND_MASK
(
MASK
Ë(((MASKË=
RTC_AœrmSubSec⁄dMask_AŒ
Ë|| \

	)

334 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_1
) || \

335 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_2
) || \

336 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_3
) || \

337 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_4
) || \

338 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_5
) || \

339 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_6
) || \

340 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_7
) || \

341 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_8
) || \

342 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_9
) || \

343 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_10
) || \

344 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_11
) || \

345 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_12
) || \

346 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_13
) || \

347 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14
) || \

348 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_N⁄e
))

357 
	#IS_RTC_ALARM_SUB_SECOND_VALUE
(
VALUE
Ë((VALUEË<0x00007FFF)

	)

366 
	#RTC_WakeUpClock_RTCCLK_Div16
 ((
uöt32_t
)0x00000000)

	)

367 
	#RTC_WakeUpClock_RTCCLK_Div8
 ((
uöt32_t
)0x00000001)

	)

368 
	#RTC_WakeUpClock_RTCCLK_Div4
 ((
uöt32_t
)0x00000002)

	)

369 
	#RTC_WakeUpClock_RTCCLK_Div2
 ((
uöt32_t
)0x00000003)

	)

370 
	#RTC_WakeUpClock_CK_SPRE_16bôs
 ((
uöt32_t
)0x00000004)

	)

371 
	#RTC_WakeUpClock_CK_SPRE_17bôs
 ((
uöt32_t
)0x00000006)

	)

372 
	#IS_RTC_WAKEUP_CLOCK
(
CLOCK
Ë(((CLOCKË=
RTC_WakeUpClock_RTCCLK_Div16
Ë|| \

	)

373 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div8
) || \

374 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div4
) || \

375 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div2
) || \

376 ((
CLOCK
Ë=
RTC_WakeUpClock_CK_SPRE_16bôs
) || \

377 ((
CLOCK
Ë=
RTC_WakeUpClock_CK_SPRE_17bôs
))

378 
	#IS_RTC_WAKEUP_COUNTER
(
COUNTER
Ë((COUNTERË<0xFFFF)

	)

386 
	#RTC_TimeSèmpEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

387 
	#RTC_TimeSèmpEdge_FÆlög
 ((
uöt32_t
)0x00000008)

	)

388 
	#IS_RTC_TIMESTAMP_EDGE
(
EDGE
Ë(((EDGEË=
RTC_TimeSèmpEdge_Risög
Ë|| \

	)

389 ((
EDGE
Ë=
RTC_TimeSèmpEdge_FÆlög
))

397 
	#RTC_Ouçut_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

398 
	#RTC_Ouçut_AœrmA
 ((
uöt32_t
)0x00200000)

	)

399 
	#RTC_Ouçut_AœrmB
 ((
uöt32_t
)0x00400000)

	)

400 
	#RTC_Ouçut_WakeUp
 ((
uöt32_t
)0x00600000)

	)

402 
	#IS_RTC_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
RTC_Ouçut_DißbÀ
Ë|| \

	)

403 ((
OUTPUT
Ë=
RTC_Ouçut_AœrmA
) || \

404 ((
OUTPUT
Ë=
RTC_Ouçut_AœrmB
) || \

405 ((
OUTPUT
Ë=
RTC_Ouçut_WakeUp
))

414 
	#RTC_OuçutPﬁ¨ôy_High
 ((
uöt32_t
)0x00000000)

	)

415 
	#RTC_OuçutPﬁ¨ôy_Low
 ((
uöt32_t
)0x00100000)

	)

416 
	#IS_RTC_OUTPUT_POL
(
POL
Ë(((POLË=
RTC_OuçutPﬁ¨ôy_High
Ë|| \

	)

417 ((
POL
Ë=
RTC_OuçutPﬁ¨ôy_Low
))

426 
	#RTC_CÆibSign_Posôive
 ((
uöt32_t
)0x00000000)

	)

427 
	#RTC_CÆibSign_Neg©ive
 ((
uöt32_t
)0x00000080)

	)

428 
	#IS_RTC_CALIB_SIGN
(
SIGN
Ë(((SIGNË=
RTC_CÆibSign_Posôive
Ë|| \

	)

429 ((
SIGN
Ë=
RTC_CÆibSign_Neg©ive
))

430 
	#IS_RTC_CALIB_VALUE
(
VALUE
Ë((VALUEË< 0x20)

	)

439 
	#RTC_CÆibOuçut_512Hz
 ((
uöt32_t
)0x00000000)

	)

440 
	#RTC_CÆibOuçut_1Hz
 ((
uöt32_t
)0x00080000)

	)

441 
	#IS_RTC_CALIB_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
RTC_CÆibOuçut_512Hz
Ë|| \

	)

442 ((
OUTPUT
Ë=
RTC_CÆibOuçut_1Hz
))

450 
	#RTC_SmoŸhCÆibPîiod_32£c
 ((
uöt32_t
)0x00000000Ë

	)

452 
	#RTC_SmoŸhCÆibPîiod_16£c
 ((
uöt32_t
)0x00002000Ë

	)

454 
	#RTC_SmoŸhCÆibPîiod_8£c
 ((
uöt32_t
)0x00004000Ë

	)

456 
	#IS_RTC_SMOOTH_CALIB_PERIOD
(
PERIOD
Ë(((PERIODË=
RTC_SmoŸhCÆibPîiod_32£c
Ë|| \

	)

457 ((
PERIOD
Ë=
RTC_SmoŸhCÆibPîiod_16£c
) || \

458 ((
PERIOD
Ë=
RTC_SmoŸhCÆibPîiod_8£c
))

467 
	#RTC_SmoŸhCÆibPlusPul£s_Së
 ((
uöt32_t
)0x00008000Ë

	)

470 
	#RTC_SmoŸhCÆibPlusPul£s_Re£t
 ((
uöt32_t
)0x00000000Ë

	)

472 
	#IS_RTC_SMOOTH_CALIB_PLUS
(
PLUS
Ë(((PLUSË=
RTC_SmoŸhCÆibPlusPul£s_Së
Ë|| \

	)

473 ((
PLUS
Ë=
RTC_SmoŸhCÆibPlusPul£s_Re£t
))

482 
	#IS_RTC_SMOOTH_CALIB_MINUS
(
VALUE
Ë((VALUEË<0x000001FF)

	)

491 
	#RTC_DayLightSavög_SUB1H
 ((
uöt32_t
)0x00020000)

	)

492 
	#RTC_DayLightSavög_ADD1H
 ((
uöt32_t
)0x00010000)

	)

493 
	#IS_RTC_DAYLIGHT_SAVING
(
SAVE
Ë(((SAVEË=
RTC_DayLightSavög_SUB1H
Ë|| \

	)

494 ((
SAVE
Ë=
RTC_DayLightSavög_ADD1H
))

496 
	#RTC_St‹eO≥øti⁄_Re£t
 ((
uöt32_t
)0x00000000)

	)

497 
	#RTC_St‹eO≥øti⁄_Së
 ((
uöt32_t
)0x00040000)

	)

498 
	#IS_RTC_STORE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
RTC_St‹eO≥øti⁄_Re£t
Ë|| \

	)

499 ((
OPERATION
Ë=
RTC_St‹eO≥øti⁄_Së
))

507 
	#RTC_Tam≥rTriggî_RisögEdge
 ((
uöt32_t
)0x00000000)

	)

508 
	#RTC_Tam≥rTriggî_FÆlögEdge
 ((
uöt32_t
)0x00000001)

	)

509 
	#RTC_Tam≥rTriggî_LowLevñ
 ((
uöt32_t
)0x00000000)

	)

510 
	#RTC_Tam≥rTriggî_HighLevñ
 ((
uöt32_t
)0x00000001)

	)

511 
	#IS_RTC_TAMPER_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
RTC_Tam≥rTriggî_RisögEdge
Ë|| \

	)

512 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_FÆlögEdge
) || \

513 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_LowLevñ
) || \

514 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_HighLevñ
))

523 
	#RTC_Tam≥rFûãr_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

525 
	#RTC_Tam≥rFûãr_2Sam∂e
 ((
uöt32_t
)0x00000800Ë

	)

527 
	#RTC_Tam≥rFûãr_4Sam∂e
 ((
uöt32_t
)0x00001000Ë

	)

529 
	#RTC_Tam≥rFûãr_8Sam∂e
 ((
uöt32_t
)0x00001800Ë

	)

531 
	#IS_RTC_TAMPER_FILTER
(
FILTER
Ë(((FILTERË=
RTC_Tam≥rFûãr_DißbÀ
Ë|| \

	)

532 ((
FILTER
Ë=
RTC_Tam≥rFûãr_2Sam∂e
) || \

533 ((
FILTER
Ë=
RTC_Tam≥rFûãr_4Sam∂e
) || \

534 ((
FILTER
Ë=
RTC_Tam≥rFûãr_8Sam∂e
))

542 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div32768
 ((
uöt32_t
)0x00000000Ë

	)

544 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div16384
 ((
uöt32_t
)0x000000100Ë

	)

546 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div8192
 ((
uöt32_t
)0x00000200Ë

	)

548 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div4096
 ((
uöt32_t
)0x00000300Ë

	)

550 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div2048
 ((
uöt32_t
)0x00000400Ë

	)

552 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div1024
 ((
uöt32_t
)0x00000500Ë

	)

554 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div512
 ((
uöt32_t
)0x00000600Ë

	)

556 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div256
 ((
uöt32_t
)0x00000700Ë

	)

558 
	#IS_RTC_TAMPER_SAMPLING_FREQ
(
FREQ
Ë(((FREQË==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div32768
Ë|| \

	)

559 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div16384
) || \

560 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div8192
) || \

561 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div4096
) || \

562 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div2048
) || \

563 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div1024
) || \

564 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div512
) || \

565 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div256
))

574 
	#RTC_Tam≥rPªch¨geDuøti⁄_1RTCCLK
 ((
uöt32_t
)0x00000000Ë

	)

576 
	#RTC_Tam≥rPªch¨geDuøti⁄_2RTCCLK
 ((
uöt32_t
)0x00002000Ë

	)

578 
	#RTC_Tam≥rPªch¨geDuøti⁄_4RTCCLK
 ((
uöt32_t
)0x00004000Ë

	)

580 
	#RTC_Tam≥rPªch¨geDuøti⁄_8RTCCLK
 ((
uöt32_t
)0x00006000Ë

	)

583 
	#IS_RTC_TAMPER_PRECHARGE_DURATION
(
DURATION
Ë(((DURATIONË=
RTC_Tam≥rPªch¨geDuøti⁄_1RTCCLK
Ë|| \

	)

584 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_2RTCCLK
) || \

585 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_4RTCCLK
) || \

586 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_8RTCCLK
))

594 
	#RTC_Tam≥r_1
 
RTC_TAFCR_TAMP1E


	)

595 
	#IS_RTC_TAMPER
(
TAMPER
Ë(((TAMPERË=
RTC_Tam≥r_1
))

	)

604 
	#RTC_Tam≥rPö_PC13
 ((
uöt32_t
)0x00000000)

	)

605 
	#RTC_Tam≥rPö_PI8
 ((
uöt32_t
)0x00010000)

	)

606 
	#IS_RTC_TAMPER_PIN
(
PIN
Ë(((PINË=
RTC_Tam≥rPö_PC13
Ë|| \

	)

607 ((
PIN
Ë=
RTC_Tam≥rPö_PI8
))

615 
	#RTC_TimeSèmpPö_PC13
 ((
uöt32_t
)0x00000000)

	)

616 
	#RTC_TimeSèmpPö_PI8
 ((
uöt32_t
)0x00020000)

	)

617 
	#IS_RTC_TIMESTAMP_PIN
(
PIN
Ë(((PINË=
RTC_TimeSèmpPö_PC13
Ë|| \

	)

618 ((
PIN
Ë=
RTC_TimeSèmpPö_PI8
))

626 
	#RTC_OuçutTy≥_O≥nDøö
 ((
uöt32_t
)0x00000000)

	)

627 
	#RTC_OuçutTy≥_PushPuŒ
 ((
uöt32_t
)0x00040000)

	)

628 
	#IS_RTC_OUTPUT_TYPE
(
TYPE
Ë(((TYPEË=
RTC_OuçutTy≥_O≥nDøö
Ë|| \

	)

629 ((
TYPE
Ë=
RTC_OuçutTy≥_PushPuŒ
))

638 
	#RTC_Shi·Add1S_Re£t
 ((
uöt32_t
)0x00000000)

	)

639 
	#RTC_Shi·Add1S_Së
 ((
uöt32_t
)0x80000000)

	)

640 
	#IS_RTC_SHIFT_ADD1S
(
SEL
Ë(((SELË=
RTC_Shi·Add1S_Re£t
Ë|| \

	)

641 ((
SEL
Ë=
RTC_Shi·Add1S_Së
))

649 
	#IS_RTC_SHIFT_SUBFS
(
FS
Ë((FSË<0x00007FFF)

	)

659 
	#RTC_BKP_DR0
 ((
uöt32_t
)0x00000000)

	)

660 
	#RTC_BKP_DR1
 ((
uöt32_t
)0x00000001)

	)

661 
	#RTC_BKP_DR2
 ((
uöt32_t
)0x00000002)

	)

662 
	#RTC_BKP_DR3
 ((
uöt32_t
)0x00000003)

	)

663 
	#RTC_BKP_DR4
 ((
uöt32_t
)0x00000004)

	)

664 
	#RTC_BKP_DR5
 ((
uöt32_t
)0x00000005)

	)

665 
	#RTC_BKP_DR6
 ((
uöt32_t
)0x00000006)

	)

666 
	#RTC_BKP_DR7
 ((
uöt32_t
)0x00000007)

	)

667 
	#RTC_BKP_DR8
 ((
uöt32_t
)0x00000008)

	)

668 
	#RTC_BKP_DR9
 ((
uöt32_t
)0x00000009)

	)

669 
	#RTC_BKP_DR10
 ((
uöt32_t
)0x0000000A)

	)

670 
	#RTC_BKP_DR11
 ((
uöt32_t
)0x0000000B)

	)

671 
	#RTC_BKP_DR12
 ((
uöt32_t
)0x0000000C)

	)

672 
	#RTC_BKP_DR13
 ((
uöt32_t
)0x0000000D)

	)

673 
	#RTC_BKP_DR14
 ((
uöt32_t
)0x0000000E)

	)

674 
	#RTC_BKP_DR15
 ((
uöt32_t
)0x0000000F)

	)

675 
	#RTC_BKP_DR16
 ((
uöt32_t
)0x00000010)

	)

676 
	#RTC_BKP_DR17
 ((
uöt32_t
)0x00000011)

	)

677 
	#RTC_BKP_DR18
 ((
uöt32_t
)0x00000012)

	)

678 
	#RTC_BKP_DR19
 ((
uöt32_t
)0x00000013)

	)

679 
	#IS_RTC_BKP
(
BKP
Ë(((BKPË=
RTC_BKP_DR0
Ë|| \

	)

680 ((
BKP
Ë=
RTC_BKP_DR1
) || \

681 ((
BKP
Ë=
RTC_BKP_DR2
) || \

682 ((
BKP
Ë=
RTC_BKP_DR3
) || \

683 ((
BKP
Ë=
RTC_BKP_DR4
) || \

684 ((
BKP
Ë=
RTC_BKP_DR5
) || \

685 ((
BKP
Ë=
RTC_BKP_DR6
) || \

686 ((
BKP
Ë=
RTC_BKP_DR7
) || \

687 ((
BKP
Ë=
RTC_BKP_DR8
) || \

688 ((
BKP
Ë=
RTC_BKP_DR9
) || \

689 ((
BKP
Ë=
RTC_BKP_DR10
) || \

690 ((
BKP
Ë=
RTC_BKP_DR11
) || \

691 ((
BKP
Ë=
RTC_BKP_DR12
) || \

692 ((
BKP
Ë=
RTC_BKP_DR13
) || \

693 ((
BKP
Ë=
RTC_BKP_DR14
) || \

694 ((
BKP
Ë=
RTC_BKP_DR15
) || \

695 ((
BKP
Ë=
RTC_BKP_DR16
) || \

696 ((
BKP
Ë=
RTC_BKP_DR17
) || \

697 ((
BKP
Ë=
RTC_BKP_DR18
) || \

698 ((
BKP
Ë=
RTC_BKP_DR19
))

706 
	#RTC_F‹m©_BIN
 ((
uöt32_t
)0x000000000)

	)

707 
	#RTC_F‹m©_BCD
 ((
uöt32_t
)0x000000001)

	)

708 
	#IS_RTC_FORMAT
(
FORMAT
Ë(((FORMATË=
RTC_F‹m©_BIN
Ë|| ((FORMATË=
RTC_F‹m©_BCD
))

	)

717 
	#RTC_FLAG_RECALPF
 ((
uöt32_t
)0x00010000)

	)

718 
	#RTC_FLAG_TAMP1F
 ((
uöt32_t
)0x00002000)

	)

719 
	#RTC_FLAG_TSOVF
 ((
uöt32_t
)0x00001000)

	)

720 
	#RTC_FLAG_TSF
 ((
uöt32_t
)0x00000800)

	)

721 
	#RTC_FLAG_WUTF
 ((
uöt32_t
)0x00000400)

	)

722 
	#RTC_FLAG_ALRBF
 ((
uöt32_t
)0x00000200)

	)

723 
	#RTC_FLAG_ALRAF
 ((
uöt32_t
)0x00000100)

	)

724 
	#RTC_FLAG_INITF
 ((
uöt32_t
)0x00000040)

	)

725 
	#RTC_FLAG_RSF
 ((
uöt32_t
)0x00000020)

	)

726 
	#RTC_FLAG_INITS
 ((
uöt32_t
)0x00000010)

	)

727 
	#RTC_FLAG_SHPF
 ((
uöt32_t
)0x00000008)

	)

728 
	#RTC_FLAG_WUTWF
 ((
uöt32_t
)0x00000004)

	)

729 
	#RTC_FLAG_ALRBWF
 ((
uöt32_t
)0x00000002)

	)

730 
	#RTC_FLAG_ALRAWF
 ((
uöt32_t
)0x00000001)

	)

731 
	#IS_RTC_GET_FLAG
(
FLAG
Ë(((FLAGË=
RTC_FLAG_TSOVF
Ë|| ((FLAGË=
RTC_FLAG_TSF
Ë|| \

	)

732 ((
FLAG
Ë=
RTC_FLAG_WUTF
Ë|| ((FLAGË=
RTC_FLAG_ALRBF
) || \

733 ((
FLAG
Ë=
RTC_FLAG_ALRAF
Ë|| ((FLAGË=
RTC_FLAG_INITF
) || \

734 ((
FLAG
Ë=
RTC_FLAG_RSF
Ë|| ((FLAGË=
RTC_FLAG_WUTWF
) || \

735 ((
FLAG
Ë=
RTC_FLAG_ALRBWF
Ë|| ((FLAGË=
RTC_FLAG_ALRAWF
) || \

736 ((
FLAG
Ë=
RTC_FLAG_TAMP1F
Ë|| ((FLAGË=
RTC_FLAG_RECALPF
) || \

737 ((
FLAG
Ë=
RTC_FLAG_SHPF
))

738 
	#IS_RTC_CLEAR_FLAG
(
FLAG
Ë(((FLAGË!(
uöt32_t
)
RESET
Ë&& (((FLAGË& 0xFFFF00DFË=(uöt32_t)RESET))

	)

746 
	#RTC_IT_TS
 ((
uöt32_t
)0x00008000)

	)

747 
	#RTC_IT_WUT
 ((
uöt32_t
)0x00004000)

	)

748 
	#RTC_IT_ALRB
 ((
uöt32_t
)0x00002000)

	)

749 
	#RTC_IT_ALRA
 ((
uöt32_t
)0x00001000)

	)

750 
	#RTC_IT_TAMP
 ((
uöt32_t
)0x00000004Ë

	)

751 
	#RTC_IT_TAMP1
 ((
uöt32_t
)0x00020000)

	)

753 
	#IS_RTC_CONFIG_IT
(
IT
Ë(((ITË!(
uöt32_t
)
RESET
Ë&& (((ITË& 0xFFFF0FFBË=(uöt32_t)RESET))

	)

754 
	#IS_RTC_GET_IT
(
IT
Ë(((ITË=
RTC_IT_TS
Ë|| ((ITË=
RTC_IT_WUT
Ë|| \

	)

755 ((
IT
Ë=
RTC_IT_ALRB
Ë|| ((ITË=
RTC_IT_ALRA
) || \

756 ((
IT
Ë=
RTC_IT_TAMP1
))

757 
	#IS_RTC_CLEAR_IT
(
IT
Ë(((ITË!(
uöt32_t
)
RESET
Ë&& (((ITË& 0xFFFD0FFFË=(uöt32_t)RESET))

	)

766 
	#RTC_DigôÆCÆibC⁄fig
 
RTC_Cﬂr£CÆibC⁄fig


	)

767 
	#RTC_DigôÆCÆibCmd
 
RTC_Cﬂr£CÆibCmd


	)

781 
Eº‹Sètus
 
RTC_DeInô
();

784 
Eº‹Sètus
 
RTC_Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
);

785 
RTC_Såu˘Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
);

786 
RTC_WrôePrŸe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

787 
Eº‹Sètus
 
RTC_E¡îInôMode
();

788 
RTC_ExôInôMode
();

789 
Eº‹Sètus
 
RTC_WaôF‹Synchro
();

790 
Eº‹Sètus
 
RTC_RefClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

791 
RTC_By∑ssShadowCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

794 
Eº‹Sètus
 
RTC_SëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

795 
RTC_TimeSåu˘Inô
(
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

796 
RTC_GëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

797 
uöt32_t
 
RTC_GëSubSec⁄d
();

798 
Eº‹Sètus
 
RTC_SëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

799 
RTC_D©eSåu˘Inô
(
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

800 
RTC_GëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

803 
RTC_SëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

804 
RTC_AœrmSåu˘Inô
(
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

805 
RTC_GëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

806 
Eº‹Sètus
 
RTC_AœrmCmd
(
uöt32_t
 
RTC_Aœrm
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

807 
RTC_AœrmSubSec⁄dC⁄fig
(
uöt32_t
 
RTC_Aœrm
, uöt32_à
RTC_AœrmSubSec⁄dVÆue
, uöt32_à
RTC_AœrmSubSec⁄dMask
);

808 
uöt32_t
 
RTC_GëAœrmSubSec⁄d
(uöt32_à
RTC_Aœrm
);

811 
RTC_WakeUpClockC⁄fig
(
uöt32_t
 
RTC_WakeUpClock
);

812 
RTC_SëWakeUpCou¡î
(
uöt32_t
 
RTC_WakeUpCou¡î
);

813 
uöt32_t
 
RTC_GëWakeUpCou¡î
();

814 
Eº‹Sètus
 
RTC_WakeUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

817 
RTC_DayLightSavögC⁄fig
(
uöt32_t
 
RTC_DayLightSavög
, uöt32_à
RTC_St‹eO≥øti⁄
);

818 
uöt32_t
 
RTC_GëSt‹eO≥øti⁄
();

821 
RTC_OuçutC⁄fig
(
uöt32_t
 
RTC_Ouçut
, uöt32_à
RTC_OuçutPﬁ¨ôy
);

824 
Eº‹Sètus
 
RTC_Cﬂr£CÆibC⁄fig
(
uöt32_t
 
RTC_CÆibSign
, uöt32_à
VÆue
);

825 
Eº‹Sètus
 
RTC_Cﬂr£CÆibCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

826 
RTC_CÆibOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

827 
RTC_CÆibOuçutC⁄fig
(
uöt32_t
 
RTC_CÆibOuçut
);

828 
Eº‹Sètus
 
RTC_SmoŸhCÆibC⁄fig
(
uöt32_t
 
RTC_SmoŸhCÆibPîiod
,

829 
uöt32_t
 
RTC_SmoŸhCÆibPlusPul£s
,

830 
uöt32_t
 
RTC_SmouthCÆibMöusPul£sVÆue
);

833 
RTC_TimeSèmpCmd
(
uöt32_t
 
RTC_TimeSèmpEdge
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

834 
RTC_GëTimeSèmp
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_SèmpTimeSåu˘
,

835 
RTC_D©eTy≥Def
* 
RTC_SèmpD©eSåu˘
);

836 
uöt32_t
 
RTC_GëTimeSèmpSubSec⁄d
();

839 
RTC_Tam≥rTriggîC⁄fig
(
uöt32_t
 
RTC_Tam≥r
, uöt32_à
RTC_Tam≥rTriggî
);

840 
RTC_Tam≥rCmd
(
uöt32_t
 
RTC_Tam≥r
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

841 
RTC_Tam≥rFûãrC⁄fig
(
uöt32_t
 
RTC_Tam≥rFûãr
);

842 
RTC_Tam≥rSam∂ögFªqC⁄fig
(
uöt32_t
 
RTC_Tam≥rSam∂ögFªq
);

843 
RTC_Tam≥rPösPªch¨geDuøti⁄
(
uöt32_t
 
RTC_Tam≥rPªch¨geDuøti⁄
);

844 
RTC_TimeSèmpOnTam≥rDëe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

845 
RTC_Tam≥rPuŒUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

848 
RTC_WrôeBackupRegi°î
(
uöt32_t
 
RTC_BKP_DR
, uöt32_à
D©a
);

849 
uöt32_t
 
RTC_RódBackupRegi°î
(uöt32_à
RTC_BKP_DR
);

853 
RTC_Tam≥rPöSñe˘i⁄
(
uöt32_t
 
RTC_Tam≥rPö
);

854 
RTC_TimeSèmpPöSñe˘i⁄
(
uöt32_t
 
RTC_TimeSèmpPö
);

855 
RTC_OuçutTy≥C⁄fig
(
uöt32_t
 
RTC_OuçutTy≥
);

858 
Eº‹Sètus
 
RTC_SynchroShi·C⁄fig
(
uöt32_t
 
RTC_Shi·Add1S
, uöt32_à
RTC_Shi·SubFS
);

861 
RTC_ITC⁄fig
(
uöt32_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

862 
FœgSètus
 
RTC_GëFœgSètus
(
uöt32_t
 
RTC_FLAG
);

863 
RTC_CÀ¨Fœg
(
uöt32_t
 
RTC_FLAG
);

864 
ITSètus
 
RTC_GëITSètus
(
uöt32_t
 
RTC_IT
);

865 
RTC_CÀ¨ITPídögBô
(
uöt32_t
 
RTC_IT
);

867 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_sai.h

30 #i‚de‡
__STM32F4xx_SAI_H


31 
	#__STM32F4xx_SAI_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
SAI_AudioMode
;

59 
uöt32_t
 
SAI_PrŸocﬁ
;

62 
uöt32_t
 
SAI_D©aSize
;

66 
uöt32_t
 
SAI_Fú°Bô
;

70 
uöt32_t
 
SAI_ClockSåobög
;

73 
uöt32_t
 
SAI_Synchro
;

76 
uöt32_t
 
SAI_OUTDRIV
;

81 
uöt32_t
 
SAI_NoDividî
;

84 
uöt32_t
 
SAI_Ma°îDividî
;

88 
uöt32_t
 
SAI_FIFOThªshﬁd
;

90 }
	tSAI_InôTy≥Def
;

99 
uöt32_t
 
SAI_FømeLígth
;

107 
uöt32_t
 
SAI_A˘iveFømeLígth
;

113 
uöt32_t
 
SAI_FSDeföôi⁄
;

117 
uöt32_t
 
SAI_FSPﬁ¨ôy
;

121 
uöt32_t
 
SAI_FSOff£t
;

125 }
	tSAI_FømeInôTy≥Def
;

133 
uöt32_t
 
SAI_Fú°BôOff£t
;

137 
uöt32_t
 
SAI_SlŸSize
;

141 
uöt32_t
 
SAI_SlŸNumbî
;

145 
uöt32_t
 
SAI_SlŸA˘ive
;

148 }
	tSAI_SlŸInôTy≥Def
;

156 #i‡
deföed
(
STM32F446xx
)

157 
	#IS_SAI_PERIPH
(
PERIPH
Ë(((PERIPHË=
SAI1
Ë|| (PERIPHË=
SAI2
)

	)

159 
	#IS_SAI_BLOCK_PERIPH
(
PERIPH
Ë(((PERIPHË=
SAI1_Block_A
Ë|| \

	)

160 ((
PERIPH
Ë=
SAI1_Block_B
) || \

161 ((
PERIPH
Ë=
SAI2_Block_A
) || \

162 ((
PERIPH
Ë=
SAI2_Block_B
))

165 #i‡
deföed
 (
STM32F40_41xxx
Ë|| deföed (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
Ë|| deföed (
STM32F401xx
Ë|| deföed (
STM32F411xE
)

167 
	#IS_SAI_PERIPH
(
PERIPH
Ë((PERIPHË=
SAI1
)

	)

169 
	#IS_SAI_BLOCK_PERIPH
(
PERIPH
Ë(((PERIPHË=
SAI1_Block_A
Ë|| \

	)

170 ((
PERIPH
Ë=
SAI1_Block_B
))

176 
	#SAI_Mode_Ma°îTx
 ((
uöt32_t
)0x00000000)

	)

177 
	#SAI_Mode_Ma°îRx
 ((
uöt32_t
)0x00000001)

	)

178 
	#SAI_Mode_SœveTx
 ((
uöt32_t
)0x00000002)

	)

179 
	#SAI_Mode_SœveRx
 ((
uöt32_t
)0x00000003)

	)

180 
	#IS_SAI_BLOCK_MODE
(
MODE
Ë(((MODEË=
SAI_Mode_Ma°îTx
Ë|| \

	)

181 ((
MODE
Ë=
SAI_Mode_Ma°îRx
) || \

182 ((
MODE
Ë=
SAI_Mode_SœveTx
) || \

183 ((
MODE
Ë=
SAI_Mode_SœveRx
))

192 
	#SAI_Fªe_PrŸocﬁ
 ((
uöt32_t
)0x00000000)

	)

193 
	#SAI_SPDIF_PrŸocﬁ
 ((
uöt32_t
)
SAI_xCR1_PRTCFG_0
)

	)

194 
	#SAI_AC97_PrŸocﬁ
 ((
uöt32_t
)
SAI_xCR1_PRTCFG_1
)

	)

195 
	#IS_SAI_BLOCK_PROTOCOL
(
PROTOCOL
Ë(((PROTOCOLË=
SAI_Fªe_PrŸocﬁ
Ë|| \

	)

196 ((
PROTOCOL
Ë=
SAI_SPDIF_PrŸocﬁ
) || \

197 ((
PROTOCOL
Ë=
SAI_AC97_PrŸocﬁ
))

206 
	#SAI_D©aSize_8b
 ((
uöt32_t
)0x00000040)

	)

207 
	#SAI_D©aSize_10b
 ((
uöt32_t
)0x00000060)

	)

208 
	#SAI_D©aSize_16b
 ((
uöt32_t
)0x00000080)

	)

209 
	#SAI_D©aSize_20b
 ((
uöt32_t
)0x000000A0)

	)

210 
	#SAI_D©aSize_24b
 ((
uöt32_t
)0x000000C0)

	)

211 
	#SAI_D©aSize_32b
 ((
uöt32_t
)0x000000E0)

	)

212 
	#IS_SAI_BLOCK_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SAI_D©aSize_8b
Ë|| \

	)

213 ((
DATASIZE
Ë=
SAI_D©aSize_10b
) || \

214 ((
DATASIZE
Ë=
SAI_D©aSize_16b
) || \

215 ((
DATASIZE
Ë=
SAI_D©aSize_20b
) || \

216 ((
DATASIZE
Ë=
SAI_D©aSize_24b
) || \

217 ((
DATASIZE
Ë=
SAI_D©aSize_32b
))

226 
	#SAI_Fú°Bô_MSB
 ((
uöt32_t
)0x00000000)

	)

227 
	#SAI_Fú°Bô_LSB
 ((
uöt32_t
)
SAI_xCR1_LSBFIRST
)

	)

228 
	#IS_SAI_BLOCK_FIRST_BIT
(
BIT
Ë(((BITË=
SAI_Fú°Bô_MSB
Ë|| \

	)

229 ((
BIT
Ë=
SAI_Fú°Bô_LSB
))

238 
	#SAI_ClockSåobög_FÆlögEdge
 ((
uöt32_t
)0x00000000)

	)

239 
	#SAI_ClockSåobög_RisögEdge
 ((
uöt32_t
)
SAI_xCR1_CKSTR
)

	)

240 
	#IS_SAI_BLOCK_CLOCK_STROBING
(
CLOCK
Ë(((CLOCKË=
SAI_ClockSåobög_FÆlögEdge
Ë|| \

	)

241 ((
CLOCK
Ë=
SAI_ClockSåobög_RisögEdge
))

250 
	#SAI_Asynchr⁄ous
 ((
uöt32_t
)0x00000000)

	)

251 
	#SAI_Synchr⁄ous
 ((
uöt32_t
)
SAI_xCR1_SYNCEN_0
)

	)

252 
	#IS_SAI_BLOCK_SYNCHRO
(
SYNCHRO
Ë(((SYNCHROË=
SAI_Synchr⁄ous
Ë|| \

	)

253 ((
SYNCHRO
Ë=
SAI_Asynchr⁄ous
))

262 
	#SAI_OuçutDrive_DißbÀd
 ((
uöt32_t
)0x00000000)

	)

263 
	#SAI_OuçutDrive_E«bÀd
 ((
uöt32_t
)
SAI_xCR1_OUTDRIV
)

	)

264 
	#IS_SAI_BLOCK_OUTPUT_DRIVE
(
DRIVE
Ë(((DRIVEË=
SAI_OuçutDrive_DißbÀd
Ë|| \

	)

265 ((
DRIVE
Ë=
SAI_OuçutDrive_E«bÀd
))

276 
	#SAI_Ma°îDividî_E«bÀd
 ((
uöt32_t
)0x00000000)

	)

277 
	#SAI_Ma°îDividî_DißbÀd
 ((
uöt32_t
)
SAI_xCR1_NODIV
)

	)

278 
	#IS_SAI_BLOCK_NODIVIDER
(
NODIVIDER
Ë(((NODIVIDERË=
SAI_Ma°îDividî_E«bÀd
Ë|| \

	)

279 ((
NODIVIDER
Ë=
SAI_Ma°îDividî_DißbÀd
))

288 
	#IS_SAI_BLOCK_MASTER_DIVIDER
(
DIVIDER
Ë((DIVIDERË<15)

	)

297 
	#IS_SAI_BLOCK_FRAME_LENGTH
(
LENGTH
Ë((8 <(LENGTH)Ë&& ((LENGTHË<256))

	)

306 
	#IS_SAI_BLOCK_ACTIVE_FRAME
(
LENGTH
Ë((1 <(LENGTH)Ë&& ((LENGTHË<128))

	)

316 
	#SAI_FS_SèπFøme
 ((
uöt32_t
)0x00000000)

	)

317 
	#I2S_FS_Ch™√lIdítifiˇti⁄
 ((
uöt32_t
)
SAI_xFRCR_FSDEF
)

	)

318 
	#IS_SAI_BLOCK_FS_DEFINITION
(
DEFINITION
Ë(((DEFINITIONË=
SAI_FS_SèπFøme
Ë|| \

	)

319 ((
DEFINITION
Ë=
I2S_FS_Ch™√lIdítifiˇti⁄
))

328 
	#SAI_FS_A˘iveLow
 ((
uöt32_t
)0x00000000)

	)

329 
	#SAI_FS_A˘iveHigh
 ((
uöt32_t
)
SAI_xFRCR_FSPO
)

	)

330 
	#IS_SAI_BLOCK_FS_POLARITY
(
POLARITY
Ë(((POLARITYË=
SAI_FS_A˘iveLow
Ë|| \

	)

331 ((
POLARITY
Ë=
SAI_FS_A˘iveHigh
))

340 
	#SAI_FS_Fú°Bô
 ((
uöt32_t
)0x00000000)

	)

341 
	#SAI_FS_Bef‹eFú°Bô
 ((
uöt32_t
)
SAI_xFRCR_FSOFF
)

	)

342 
	#IS_SAI_BLOCK_FS_OFFSET
(
OFFSET
Ë(((OFFSETË=
SAI_FS_Fú°Bô
Ë|| \

	)

343 ((
OFFSET
Ë=
SAI_FS_Bef‹eFú°Bô
))

351 
	#IS_SAI_BLOCK_FIRSTBIT_OFFSET
(
OFFSET
Ë((OFFSETË<24)

	)

360 
	#SAI_SlŸSize_D©aSize
 ((
uöt32_t
)0x00000000)

	)

361 
	#SAI_SlŸSize_16b
 ((
uöt32_t
)
SAI_xSLOTR_SLOTSZ_0
)

	)

362 
	#SAI_SlŸSize_32b
 ((
uöt32_t
)
SAI_xSLOTR_SLOTSZ_1
)

	)

363 
	#IS_SAI_BLOCK_SLOT_SIZE
(
SIZE
Ë(((SIZEË=
SAI_SlŸSize_D©aSize
Ë|| \

	)

364 ((
SIZE
Ë=
SAI_SlŸSize_16b
) || \

365 ((
SIZE
Ë=
SAI_SlŸSize_32b
))

374 
	#IS_SAI_BLOCK_SLOT_NUMBER
(
NUMBER
Ë((1 <(NUMBER)Ë&& ((NUMBERË<16))

	)

383 
	#SAI_SlŸ_NŸA˘ive
 ((
uöt32_t
)0x00000000)

	)

384 
	#SAI_SlŸA˘ive_0
 ((
uöt32_t
)0x00010000)

	)

385 
	#SAI_SlŸA˘ive_1
 ((
uöt32_t
)0x00020000)

	)

386 
	#SAI_SlŸA˘ive_2
 ((
uöt32_t
)0x00040000)

	)

387 
	#SAI_SlŸA˘ive_3
 ((
uöt32_t
)0x00080000)

	)

388 
	#SAI_SlŸA˘ive_4
 ((
uöt32_t
)0x00100000)

	)

389 
	#SAI_SlŸA˘ive_5
 ((
uöt32_t
)0x00200000)

	)

390 
	#SAI_SlŸA˘ive_6
 ((
uöt32_t
)0x00400000)

	)

391 
	#SAI_SlŸA˘ive_7
 ((
uöt32_t
)0x00800000)

	)

392 
	#SAI_SlŸA˘ive_8
 ((
uöt32_t
)0x01000000)

	)

393 
	#SAI_SlŸA˘ive_9
 ((
uöt32_t
)0x02000000)

	)

394 
	#SAI_SlŸA˘ive_10
 ((
uöt32_t
)0x04000000)

	)

395 
	#SAI_SlŸA˘ive_11
 ((
uöt32_t
)0x08000000)

	)

396 
	#SAI_SlŸA˘ive_12
 ((
uöt32_t
)0x10000000)

	)

397 
	#SAI_SlŸA˘ive_13
 ((
uöt32_t
)0x20000000)

	)

398 
	#SAI_SlŸA˘ive_14
 ((
uöt32_t
)0x40000000)

	)

399 
	#SAI_SlŸA˘ive_15
 ((
uöt32_t
)0x80000000)

	)

400 
	#SAI_SlŸA˘ive_ALL
 ((
uöt32_t
)0xFFFF0000)

	)

402 
	#IS_SAI_SLOT_ACTIVE
(
ACTIVE
Ë((ACTIVEË!0)

	)

412 
	#SAI_M⁄oMode
 ((
uöt32_t
)
SAI_xCR1_MONO
)

	)

413 
	#SAI_SåeoMode
 ((
uöt32_t
)0x00000000)

	)

414 
	#IS_SAI_BLOCK_MONO_STREO_MODE
(
MODE
Ë(((MODEË=
SAI_M⁄oMode
Ë||\

	)

415 ((
MODE
Ë=
SAI_SåeoMode
))

424 
	#SAI_Ouçut_NŸRñó£d
 ((
uöt32_t
)0x00000000)

	)

425 
	#SAI_Ouçut_Rñó£d
 ((
uöt32_t
)
SAI_xCR2_TRIS
)

	)

426 
	#IS_SAI_BLOCK_TRISTATE_MANAGEMENT
(
STATE
Ë(((STATEË=
SAI_Ouçut_NŸRñó£d
Ë||\

	)

427 ((
STATE
Ë=
SAI_Ouçut_Rñó£d
))

436 
	#SAI_Thªshﬁd_FIFOEm±y
 ((
uöt32_t
)0x00000000)

	)

437 
	#SAI_FIFOThªshﬁd_1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00000001)

	)

438 
	#SAI_FIFOThªshﬁd_HÆfFuŒ
 ((
uöt32_t
)0x00000002)

	)

439 
	#SAI_FIFOThªshﬁd_3Qu¨ãrsFuŒ
 ((
uöt32_t
)0x00000003)

	)

440 
	#SAI_FIFOThªshﬁd_FuŒ
 ((
uöt32_t
)0x00000004)

	)

441 
	#IS_SAI_BLOCK_FIFO_THRESHOLD
(
THRESHOLD
Ë(((THRESHOLDË=
SAI_Thªshﬁd_FIFOEm±y
Ë|| \

	)

442 ((
THRESHOLD
Ë=
SAI_FIFOThªshﬁd_1Qu¨ãrFuŒ
) || \

443 ((
THRESHOLD
Ë=
SAI_FIFOThªshﬁd_HÆfFuŒ
) || \

444 ((
THRESHOLD
Ë=
SAI_FIFOThªshﬁd_3Qu¨ãrsFuŒ
) || \

445 ((
THRESHOLD
Ë=
SAI_FIFOThªshﬁd_FuŒ
))

454 
	#SAI_NoCom∑ndög
 ((
uöt32_t
)0x00000000)

	)

455 
	#SAI_ULaw_1CPL_Com∑ndög
 ((
uöt32_t
)0x00008000)

	)

456 
	#SAI_ALaw_1CPL_Com∑ndög
 ((
uöt32_t
)0x0000C000)

	)

457 
	#SAI_ULaw_2CPL_Com∑ndög
 ((
uöt32_t
)0x0000A000)

	)

458 
	#SAI_ALaw_2CPL_Com∑ndög
 ((
uöt32_t
)0x0000E000)

	)

459 
	#IS_SAI_BLOCK_COMPANDING_MODE
(
MODE
Ë(((MODEË=
SAI_NoCom∑ndög
Ë|| \

	)

460 ((
MODE
Ë=
SAI_ULaw_1CPL_Com∑ndög
) || \

461 ((
MODE
Ë=
SAI_ALaw_1CPL_Com∑ndög
) || \

462 ((
MODE
Ë=
SAI_ULaw_2CPL_Com∑ndög
) || \

463 ((
MODE
Ë=
SAI_ALaw_2CPL_Com∑ndög
))

472 
	#SAI_ZîoVÆue
 ((
uöt32_t
)0x00000000)

	)

473 
	#SAI_La°SítVÆue
 ((
uöt32_t
)
SAI_xCR2_MUTEVAL
)

	)

474 
	#IS_SAI_BLOCK_MUTE_VALUE
(
VALUE
Ë(((VALUEË=
SAI_ZîoVÆue
Ë|| \

	)

475 ((
VALUE
Ë=
SAI_La°SítVÆue
))

484 
	#IS_SAI_BLOCK_MUTE_COUNTER
(
COUNTER
Ë((COUNTERË<63)

	)

494 
	#SAI_IT_OVRUDR
 ((
uöt32_t
)
SAI_xIMR_OVRUDRIE
)

	)

495 
	#SAI_IT_MUTEDET
 ((
uöt32_t
)
SAI_xIMR_MUTEDETIE
)

	)

496 
	#SAI_IT_WCKCFG
 ((
uöt32_t
)
SAI_xIMR_WCKCFGIE
)

	)

497 
	#SAI_IT_FREQ
 ((
uöt32_t
)
SAI_xIMR_FREQIE
)

	)

498 
	#SAI_IT_CNRDY
 ((
uöt32_t
)
SAI_xIMR_CNRDYIE
)

	)

499 
	#SAI_IT_AFSDET
 ((
uöt32_t
)
SAI_xIMR_AFSDETIE
)

	)

500 
	#SAI_IT_LFSDET
 ((
uöt32_t
)
SAI_xIMR_LFSDETIE
)

	)

502 
	#IS_SAI_BLOCK_CONFIG_IT
(
IT
Ë(((ITË=
SAI_IT_OVRUDR
Ë|| \

	)

503 ((
IT
Ë=
SAI_IT_MUTEDET
) || \

504 ((
IT
Ë=
SAI_IT_WCKCFG
) || \

505 ((
IT
Ë=
SAI_IT_FREQ
) || \

506 ((
IT
Ë=
SAI_IT_CNRDY
) || \

507 ((
IT
Ë=
SAI_IT_AFSDET
) || \

508 ((
IT
Ë=
SAI_IT_LFSDET
))

517 
	#SAI_FLAG_OVRUDR
 ((
uöt32_t
)
SAI_xSR_OVRUDR
)

	)

518 
	#SAI_FLAG_MUTEDET
 ((
uöt32_t
)
SAI_xSR_MUTEDET
)

	)

519 
	#SAI_FLAG_WCKCFG
 ((
uöt32_t
)
SAI_xSR_WCKCFG
)

	)

520 
	#SAI_FLAG_FREQ
 ((
uöt32_t
)
SAI_xSR_FREQ
)

	)

521 
	#SAI_FLAG_CNRDY
 ((
uöt32_t
)
SAI_xSR_CNRDY
)

	)

522 
	#SAI_FLAG_AFSDET
 ((
uöt32_t
)
SAI_xSR_AFSDET
)

	)

523 
	#SAI_FLAG_LFSDET
 ((
uöt32_t
)
SAI_xSR_LFSDET
)

	)

525 
	#IS_SAI_BLOCK_GET_FLAG
(
FLAG
Ë(((FLAGË=
SAI_FLAG_OVRUDR
Ë|| \

	)

526 ((
FLAG
Ë=
SAI_FLAG_MUTEDET
) || \

527 ((
FLAG
Ë=
SAI_FLAG_WCKCFG
) || \

528 ((
FLAG
Ë=
SAI_FLAG_FREQ
) || \

529 ((
FLAG
Ë=
SAI_FLAG_CNRDY
) || \

530 ((
FLAG
Ë=
SAI_FLAG_AFSDET
) || \

531 ((
FLAG
Ë=
SAI_FLAG_LFSDET
))

533 
	#IS_SAI_BLOCK_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
SAI_FLAG_OVRUDR
Ë|| \

	)

534 ((
FLAG
Ë=
SAI_FLAG_MUTEDET
) || \

535 ((
FLAG
Ë=
SAI_FLAG_WCKCFG
) || \

536 ((
FLAG
Ë=
SAI_FLAG_FREQ
) || \

537 ((
FLAG
Ë=
SAI_FLAG_CNRDY
) || \

538 ((
FLAG
Ë=
SAI_FLAG_AFSDET
) || \

539 ((
FLAG
Ë=
SAI_FLAG_LFSDET
))

547 
	#SAI_FIFOSètus_Em±y
 ((
uöt32_t
)0x00000000)

	)

548 
	#SAI_FIFOSètus_Less1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00010000)

	)

549 
	#SAI_FIFOSètus_1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00020000)

	)

550 
	#SAI_FIFOSètus_HÆfFuŒ
 ((
uöt32_t
)0x00030000)

	)

551 
	#SAI_FIFOSètus_3Qu¨ãrsFuŒ
 ((
uöt32_t
)0x00040000)

	)

552 
	#SAI_FIFOSètus_FuŒ
 ((
uöt32_t
)0x00050000)

	)

554 
	#IS_SAI_BLOCK_FIFO_STATUS
(
STATUS
Ë(((STATUSË=
SAI_FIFOSètus_Less1Qu¨ãrFuŒ
 ) || \

	)

555 ((
STATUS
Ë=
SAI_FIFOSètus_HÆfFuŒ
) || \

556 ((
STATUS
Ë=
SAI_FIFOSètus_1Qu¨ãrFuŒ
) || \

557 ((
STATUS
Ë=
SAI_FIFOSètus_3Qu¨ãrsFuŒ
) || \

558 ((
STATUS
Ë=
SAI_FIFOSètus_FuŒ
) || \

559 ((
STATUS
Ë=
SAI_FIFOSètus_Em±y
))

573 
SAI_DeInô
(
SAI_Ty≥Def
* 
SAIx
);

576 
SAI_Inô
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
SAI_InôTy≥Def
* 
SAI_InôSåu˘
);

577 
SAI_FømeInô
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
SAI_FømeInôTy≥Def
* 
SAI_FømeInôSåu˘
);

578 
SAI_SlŸInô
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
SAI_SlŸInôTy≥Def
* 
SAI_SlŸInôSåu˘
);

579 
SAI_Såu˘Inô
(
SAI_InôTy≥Def
* 
SAI_InôSåu˘
);

580 
SAI_FømeSåu˘Inô
(
SAI_FømeInôTy≥Def
* 
SAI_FømeInôSåu˘
);

581 
SAI_SlŸSåu˘Inô
(
SAI_SlŸInôTy≥Def
* 
SAI_SlŸInôSåu˘
);

583 
SAI_Cmd
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

584 
SAI_M⁄oModeC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_M⁄o_SåeoMode
);

585 
SAI_TRISèãC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_TRISèã
);

586 
SAI_Com∑ndögModeC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_Com∑ndögMode
);

587 
SAI_MuãModeCmd
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

588 
SAI_MuãVÆueC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_MuãVÆue
);

589 
SAI_MuãFømeCou¡îC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_MuãCou¡î
);

590 
SAI_FlushFIFO
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
);

593 
SAI_SídD©a
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
D©a
);

594 
uöt32_t
 
SAI_Re˚iveD©a
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
);

597 
SAI_DMACmd
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

600 
SAI_ITC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

601 
FœgSètus
 
SAI_GëFœgSètus
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_FLAG
);

602 
SAI_CÀ¨Fœg
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_FLAG
);

603 
ITSètus
 
SAI_GëITSètus
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_IT
);

604 
SAI_CÀ¨ITPídögBô
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_IT
);

605 
Fun˘i⁄ÆSèã
 
SAI_GëCmdSètus
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
);

606 
uöt32_t
 
SAI_GëFIFOSètus
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
);

608 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_sdio.h

30 #i‚de‡
__STM32F4xx_SDIO_H


31 
	#__STM32F4xx_SDIO_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

52 
uöt32_t
 
SDIO_ClockEdge
;

55 
uöt32_t
 
SDIO_ClockBy∑ss
;

59 
uöt32_t
 
SDIO_ClockPowîSave
;

63 
uöt32_t
 
SDIO_BusWide
;

66 
uöt32_t
 
SDIO_H¨dw¨eFlowC⁄åﬁ
;

69 
uöt8_t
 
SDIO_ClockDiv
;

72 } 
	tSDIO_InôTy≥Def
;

76 
uöt32_t
 
SDIO_Argumít
;

81 
uöt32_t
 
SDIO_CmdIndex
;

83 
uöt32_t
 
SDIO_Re•⁄£
;

86 
uöt32_t
 
SDIO_Waô
;

89 
uöt32_t
 
SDIO_CPSM
;

92 } 
	tSDIO_CmdInôTy≥Def
;

96 
uöt32_t
 
SDIO_D©aTimeOut
;

98 
uöt32_t
 
SDIO_D©aLígth
;

100 
uöt32_t
 
SDIO_D©aBlockSize
;

103 
uöt32_t
 
SDIO_Tøns„rDú
;

107 
uöt32_t
 
SDIO_Tøns„rMode
;

110 
uöt32_t
 
SDIO_DPSM
;

113 } 
	tSDIO_D©aInôTy≥Def
;

126 
	#SDIO_ClockEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

127 
	#SDIO_ClockEdge_FÆlög
 ((
uöt32_t
)0x00002000)

	)

128 
	#IS_SDIO_CLOCK_EDGE
(
EDGE
Ë(((EDGEË=
SDIO_ClockEdge_Risög
Ë|| \

	)

129 ((
EDGE
Ë=
SDIO_ClockEdge_FÆlög
))

138 
	#SDIO_ClockBy∑ss_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

139 
	#SDIO_ClockBy∑ss_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

140 
	#IS_SDIO_CLOCK_BYPASS
(
BYPASS
Ë(((BYPASSË=
SDIO_ClockBy∑ss_DißbÀ
Ë|| \

	)

141 ((
BYPASS
Ë=
SDIO_ClockBy∑ss_E«bÀ
))

150 
	#SDIO_ClockPowîSave_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

151 
	#SDIO_ClockPowîSave_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

152 
	#IS_SDIO_CLOCK_POWER_SAVE
(
SAVE
Ë(((SAVEË=
SDIO_ClockPowîSave_DißbÀ
Ë|| \

	)

153 ((
SAVE
Ë=
SDIO_ClockPowîSave_E«bÀ
))

162 
	#SDIO_BusWide_1b
 ((
uöt32_t
)0x00000000)

	)

163 
	#SDIO_BusWide_4b
 ((
uöt32_t
)0x00000800)

	)

164 
	#SDIO_BusWide_8b
 ((
uöt32_t
)0x00001000)

	)

165 
	#IS_SDIO_BUS_WIDE
(
WIDE
Ë(((WIDEË=
SDIO_BusWide_1b
Ë|| ((WIDEË=
SDIO_BusWide_4b
Ë|| \

	)

166 ((
WIDE
Ë=
SDIO_BusWide_8b
))

176 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

177 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

178 
	#IS_SDIO_HARDWARE_FLOW_CONTROL
(
CONTROL
Ë(((CONTROLË=
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
Ë|| \

	)

179 ((
CONTROL
Ë=
SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
))

188 
	#SDIO_PowîSèã_OFF
 ((
uöt32_t
)0x00000000)

	)

189 
	#SDIO_PowîSèã_ON
 ((
uöt32_t
)0x00000003)

	)

190 
	#IS_SDIO_POWER_STATE
(
STATE
Ë(((STATEË=
SDIO_PowîSèã_OFF
Ë|| ((STATEË=
SDIO_PowîSèã_ON
))

	)

200 
	#SDIO_IT_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

201 
	#SDIO_IT_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

202 
	#SDIO_IT_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

203 
	#SDIO_IT_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

204 
	#SDIO_IT_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

205 
	#SDIO_IT_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

206 
	#SDIO_IT_CMDREND
 ((
uöt32_t
)0x00000040)

	)

207 
	#SDIO_IT_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

208 
	#SDIO_IT_DATAEND
 ((
uöt32_t
)0x00000100)

	)

209 
	#SDIO_IT_STBITERR
 ((
uöt32_t
)0x00000200)

	)

210 
	#SDIO_IT_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

211 
	#SDIO_IT_CMDACT
 ((
uöt32_t
)0x00000800)

	)

212 
	#SDIO_IT_TXACT
 ((
uöt32_t
)0x00001000)

	)

213 
	#SDIO_IT_RXACT
 ((
uöt32_t
)0x00002000)

	)

214 
	#SDIO_IT_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

215 
	#SDIO_IT_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

216 
	#SDIO_IT_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

217 
	#SDIO_IT_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

218 
	#SDIO_IT_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

219 
	#SDIO_IT_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

220 
	#SDIO_IT_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

221 
	#SDIO_IT_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

222 
	#SDIO_IT_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

223 
	#SDIO_IT_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

224 
	#IS_SDIO_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF000000Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

233 
	#IS_SDIO_CMD_INDEX
(
INDEX
Ë((INDEXË< 0x40)

	)

242 
	#SDIO_Re•⁄£_No
 ((
uöt32_t
)0x00000000)

	)

243 
	#SDIO_Re•⁄£_Sh‹t
 ((
uöt32_t
)0x00000040)

	)

244 
	#SDIO_Re•⁄£_L⁄g
 ((
uöt32_t
)0x000000C0)

	)

245 
	#IS_SDIO_RESPONSE
(
RESPONSE
Ë(((RESPONSEË=
SDIO_Re•⁄£_No
Ë|| \

	)

246 ((
RESPONSE
Ë=
SDIO_Re•⁄£_Sh‹t
) || \

247 ((
RESPONSE
Ë=
SDIO_Re•⁄£_L⁄g
))

256 
	#SDIO_Waô_No
 ((
uöt32_t
)0x00000000Ë

	)

257 
	#SDIO_Waô_IT
 ((
uöt32_t
)0x00000100Ë

	)

258 
	#SDIO_Waô_Píd
 ((
uöt32_t
)0x00000200Ë

	)

259 
	#IS_SDIO_WAIT
(
WAIT
Ë(((WAITË=
SDIO_Waô_No
Ë|| ((WAITË=
SDIO_Waô_IT
Ë|| \

	)

260 ((
WAIT
Ë=
SDIO_Waô_Píd
))

269 
	#SDIO_CPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

270 
	#SDIO_CPSM_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

271 
	#IS_SDIO_CPSM
(
CPSM
Ë(((CPSMË=
SDIO_CPSM_E«bÀ
Ë|| ((CPSMË=
SDIO_CPSM_DißbÀ
))

	)

280 
	#SDIO_RESP1
 ((
uöt32_t
)0x00000000)

	)

281 
	#SDIO_RESP2
 ((
uöt32_t
)0x00000004)

	)

282 
	#SDIO_RESP3
 ((
uöt32_t
)0x00000008)

	)

283 
	#SDIO_RESP4
 ((
uöt32_t
)0x0000000C)

	)

284 
	#IS_SDIO_RESP
(
RESP
Ë(((RESPË=
SDIO_RESP1
Ë|| ((RESPË=
SDIO_RESP2
Ë|| \

	)

285 ((
RESP
Ë=
SDIO_RESP3
Ë|| ((RESPË=
SDIO_RESP4
))

294 
	#IS_SDIO_DATA_LENGTH
(
LENGTH
Ë((LENGTHË<0x01FFFFFF)

	)

303 
	#SDIO_D©aBlockSize_1b
 ((
uöt32_t
)0x00000000)

	)

304 
	#SDIO_D©aBlockSize_2b
 ((
uöt32_t
)0x00000010)

	)

305 
	#SDIO_D©aBlockSize_4b
 ((
uöt32_t
)0x00000020)

	)

306 
	#SDIO_D©aBlockSize_8b
 ((
uöt32_t
)0x00000030)

	)

307 
	#SDIO_D©aBlockSize_16b
 ((
uöt32_t
)0x00000040)

	)

308 
	#SDIO_D©aBlockSize_32b
 ((
uöt32_t
)0x00000050)

	)

309 
	#SDIO_D©aBlockSize_64b
 ((
uöt32_t
)0x00000060)

	)

310 
	#SDIO_D©aBlockSize_128b
 ((
uöt32_t
)0x00000070)

	)

311 
	#SDIO_D©aBlockSize_256b
 ((
uöt32_t
)0x00000080)

	)

312 
	#SDIO_D©aBlockSize_512b
 ((
uöt32_t
)0x00000090)

	)

313 
	#SDIO_D©aBlockSize_1024b
 ((
uöt32_t
)0x000000A0)

	)

314 
	#SDIO_D©aBlockSize_2048b
 ((
uöt32_t
)0x000000B0)

	)

315 
	#SDIO_D©aBlockSize_4096b
 ((
uöt32_t
)0x000000C0)

	)

316 
	#SDIO_D©aBlockSize_8192b
 ((
uöt32_t
)0x000000D0)

	)

317 
	#SDIO_D©aBlockSize_16384b
 ((
uöt32_t
)0x000000E0)

	)

318 
	#IS_SDIO_BLOCK_SIZE
(
SIZE
Ë(((SIZEË=
SDIO_D©aBlockSize_1b
Ë|| \

	)

319 ((
SIZE
Ë=
SDIO_D©aBlockSize_2b
) || \

320 ((
SIZE
Ë=
SDIO_D©aBlockSize_4b
) || \

321 ((
SIZE
Ë=
SDIO_D©aBlockSize_8b
) || \

322 ((
SIZE
Ë=
SDIO_D©aBlockSize_16b
) || \

323 ((
SIZE
Ë=
SDIO_D©aBlockSize_32b
) || \

324 ((
SIZE
Ë=
SDIO_D©aBlockSize_64b
) || \

325 ((
SIZE
Ë=
SDIO_D©aBlockSize_128b
) || \

326 ((
SIZE
Ë=
SDIO_D©aBlockSize_256b
) || \

327 ((
SIZE
Ë=
SDIO_D©aBlockSize_512b
) || \

328 ((
SIZE
Ë=
SDIO_D©aBlockSize_1024b
) || \

329 ((
SIZE
Ë=
SDIO_D©aBlockSize_2048b
) || \

330 ((
SIZE
Ë=
SDIO_D©aBlockSize_4096b
) || \

331 ((
SIZE
Ë=
SDIO_D©aBlockSize_8192b
) || \

332 ((
SIZE
Ë=
SDIO_D©aBlockSize_16384b
))

341 
	#SDIO_Tøns„rDú_ToC¨d
 ((
uöt32_t
)0x00000000)

	)

342 
	#SDIO_Tøns„rDú_ToSDIO
 ((
uöt32_t
)0x00000002)

	)

343 
	#IS_SDIO_TRANSFER_DIR
(
DIR
Ë(((DIRË=
SDIO_Tøns„rDú_ToC¨d
Ë|| \

	)

344 ((
DIR
Ë=
SDIO_Tøns„rDú_ToSDIO
))

353 
	#SDIO_Tøns„rMode_Block
 ((
uöt32_t
)0x00000000)

	)

354 
	#SDIO_Tøns„rMode_Såóm
 ((
uöt32_t
)0x00000004)

	)

355 
	#IS_SDIO_TRANSFER_MODE
(
MODE
Ë(((MODEË=
SDIO_Tøns„rMode_Såóm
Ë|| \

	)

356 ((
MODE
Ë=
SDIO_Tøns„rMode_Block
))

365 
	#SDIO_DPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

366 
	#SDIO_DPSM_E«bÀ
 ((
uöt32_t
)0x00000001)

	)

367 
	#IS_SDIO_DPSM
(
DPSM
Ë(((DPSMË=
SDIO_DPSM_E«bÀ
Ë|| ((DPSMË=
SDIO_DPSM_DißbÀ
))

	)

376 
	#SDIO_FLAG_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

377 
	#SDIO_FLAG_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

378 
	#SDIO_FLAG_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

379 
	#SDIO_FLAG_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

380 
	#SDIO_FLAG_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

381 
	#SDIO_FLAG_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

382 
	#SDIO_FLAG_CMDREND
 ((
uöt32_t
)0x00000040)

	)

383 
	#SDIO_FLAG_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

384 
	#SDIO_FLAG_DATAEND
 ((
uöt32_t
)0x00000100)

	)

385 
	#SDIO_FLAG_STBITERR
 ((
uöt32_t
)0x00000200)

	)

386 
	#SDIO_FLAG_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

387 
	#SDIO_FLAG_CMDACT
 ((
uöt32_t
)0x00000800)

	)

388 
	#SDIO_FLAG_TXACT
 ((
uöt32_t
)0x00001000)

	)

389 
	#SDIO_FLAG_RXACT
 ((
uöt32_t
)0x00002000)

	)

390 
	#SDIO_FLAG_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

391 
	#SDIO_FLAG_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

392 
	#SDIO_FLAG_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

393 
	#SDIO_FLAG_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

394 
	#SDIO_FLAG_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

395 
	#SDIO_FLAG_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

396 
	#SDIO_FLAG_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

397 
	#SDIO_FLAG_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

398 
	#SDIO_FLAG_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

399 
	#SDIO_FLAG_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

400 
	#IS_SDIO_FLAG
(
FLAG
Ë(((FLAGË=
SDIO_FLAG_CCRCFAIL
Ë|| \

	)

401 ((
FLAG
Ë=
SDIO_FLAG_DCRCFAIL
) || \

402 ((
FLAG
Ë=
SDIO_FLAG_CTIMEOUT
) || \

403 ((
FLAG
Ë=
SDIO_FLAG_DTIMEOUT
) || \

404 ((
FLAG
Ë=
SDIO_FLAG_TXUNDERR
) || \

405 ((
FLAG
Ë=
SDIO_FLAG_RXOVERR
) || \

406 ((
FLAG
Ë=
SDIO_FLAG_CMDREND
) || \

407 ((
FLAG
Ë=
SDIO_FLAG_CMDSENT
) || \

408 ((
FLAG
Ë=
SDIO_FLAG_DATAEND
) || \

409 ((
FLAG
Ë=
SDIO_FLAG_STBITERR
) || \

410 ((
FLAG
Ë=
SDIO_FLAG_DBCKEND
) || \

411 ((
FLAG
Ë=
SDIO_FLAG_CMDACT
) || \

412 ((
FLAG
Ë=
SDIO_FLAG_TXACT
) || \

413 ((
FLAG
Ë=
SDIO_FLAG_RXACT
) || \

414 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOHE
) || \

415 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOHF
) || \

416 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOF
) || \

417 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOF
) || \

418 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOE
) || \

419 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOE
) || \

420 ((
FLAG
Ë=
SDIO_FLAG_TXDAVL
) || \

421 ((
FLAG
Ë=
SDIO_FLAG_RXDAVL
) || \

422 ((
FLAG
Ë=
SDIO_FLAG_SDIOIT
) || \

423 ((
FLAG
Ë=
SDIO_FLAG_CEATAEND
))

425 
	#IS_SDIO_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((FLAGË!(uöt32_t)0x00))

	)

427 
	#IS_SDIO_GET_IT
(
IT
Ë(((ITË=
SDIO_IT_CCRCFAIL
Ë|| \

	)

428 ((
IT
Ë=
SDIO_IT_DCRCFAIL
) || \

429 ((
IT
Ë=
SDIO_IT_CTIMEOUT
) || \

430 ((
IT
Ë=
SDIO_IT_DTIMEOUT
) || \

431 ((
IT
Ë=
SDIO_IT_TXUNDERR
) || \

432 ((
IT
Ë=
SDIO_IT_RXOVERR
) || \

433 ((
IT
Ë=
SDIO_IT_CMDREND
) || \

434 ((
IT
Ë=
SDIO_IT_CMDSENT
) || \

435 ((
IT
Ë=
SDIO_IT_DATAEND
) || \

436 ((
IT
Ë=
SDIO_IT_STBITERR
) || \

437 ((
IT
Ë=
SDIO_IT_DBCKEND
) || \

438 ((
IT
Ë=
SDIO_IT_CMDACT
) || \

439 ((
IT
Ë=
SDIO_IT_TXACT
) || \

440 ((
IT
Ë=
SDIO_IT_RXACT
) || \

441 ((
IT
Ë=
SDIO_IT_TXFIFOHE
) || \

442 ((
IT
Ë=
SDIO_IT_RXFIFOHF
) || \

443 ((
IT
Ë=
SDIO_IT_TXFIFOF
) || \

444 ((
IT
Ë=
SDIO_IT_RXFIFOF
) || \

445 ((
IT
Ë=
SDIO_IT_TXFIFOE
) || \

446 ((
IT
Ë=
SDIO_IT_RXFIFOE
) || \

447 ((
IT
Ë=
SDIO_IT_TXDAVL
) || \

448 ((
IT
Ë=
SDIO_IT_RXDAVL
) || \

449 ((
IT
Ë=
SDIO_IT_SDIOIT
) || \

450 ((
IT
Ë=
SDIO_IT_CEATAEND
))

452 
	#IS_SDIO_CLEAR_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

462 
	#SDIO_RódWaôMode_DATA2
 ((
uöt32_t
)0x00000000)

	)

463 
	#SDIO_RódWaôMode_CLK
 ((
uöt32_t
)0x00000001)

	)

464 
	#IS_SDIO_READWAIT_MODE
(
MODE
Ë(((MODEË=
SDIO_RódWaôMode_CLK
Ë|| \

	)

465 ((
MODE
Ë=
SDIO_RódWaôMode_DATA2
))

477 
SDIO_DeInô
();

480 
SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

481 
SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

482 
SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

483 
SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
);

484 
uöt32_t
 
SDIO_GëPowîSèã
();

487 
SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
);

488 
SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
);

489 
uöt8_t
 
SDIO_GëComm™dRe•⁄£
();

490 
uöt32_t
 
SDIO_GëRe•⁄£
(uöt32_à
SDIO_RESP
);

493 
SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

494 
SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

495 
uöt32_t
 
SDIO_GëD©aCou¡î
();

496 
uöt32_t
 
SDIO_RódD©a
();

497 
SDIO_WrôeD©a
(
uöt32_t
 
D©a
);

498 
uöt32_t
 
SDIO_GëFIFOCou¡
();

501 
SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

502 
SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

503 
SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
);

504 
SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

505 
SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

508 
SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

509 
SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

510 
SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

513 
SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

516 
SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

517 
FœgSètus
 
SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
);

518 
SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
);

519 
ITSètus
 
SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
);

520 
SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
);

522 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_spdifrx.h

30 #i‚de‡
__STM32F4xx_SPDIFRX_H


31 
	#__STM32F4xx_SPDIFRX_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

54 
uöt32_t
 
SPDIFRX_I≈utSñe˘i⁄
;

57 
uöt32_t
 
SPDIFRX_Rërõs
;

60 
uöt32_t
 
SPDIFRX_WaôF‹A˘ivôy
;

63 
uöt32_t
 
SPDIFRX_Ch™√lSñe˘i⁄
;

66 
uöt32_t
 
SPDIFRX_D©aF‹m©
;

69 
uöt32_t
 
SPDIFRX_SãªoMode
;

71 }
	tSPDIFRX_InôTy≥Def
;

79 
	#IS_SPDIFRX_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPDIFRX
))

	)

84 
	#SPDIFRX_I≈ut_IN0
 ((
uöt32_t
)0x00000000)

	)

85 
	#SPDIFRX_I≈ut_IN1
 ((
uöt32_t
)0x00010000)

	)

86 
	#SPDIFRX_I≈ut_IN2
 ((
uöt32_t
)0x00020000)

	)

87 
	#SPDIFRX_I≈ut_IN3
 ((
uöt32_t
)0x00030000)

	)

88 
	#IS_SPDIFRX_INPUT_SELECT
(
INPUT
Ë(((INPUTË=
SPDIFRX_I≈ut_IN1
Ë|| \

	)

89 ((
INPUT
Ë=
SPDIFRX_I≈ut_IN2
) || \

90 ((
INPUT
Ë=
SPDIFRX_I≈ut_IN3
) || \

91 ((
INPUT
Ë=
SPDIFRX_I≈ut_IN0
))

99 
	#SPDIFRX_1MAX_RETRIES
 ((
uöt32_t
)0x00000000)

	)

100 
	#SPDIFRX_4MAX_RETRIES
 ((
uöt32_t
)0x00001000)

	)

101 
	#SPDIFRX_16MAX_RETRIES
 ((
uöt32_t
)0x00002000)

	)

102 
	#SPDIFRX_64MAX_RETRIES
 ((
uöt32_t
)0x00003000)

	)

103 
	#IS_SPDIFRX_MAX_RETRIES
(
RET
Ë(((RETË=
SPDIFRX_1MAX_RETRIES
Ë|| \

	)

104 ((
RET
Ë=
SPDIFRX_4MAX_RETRIES
) || \

105 ((
RET
Ë=
SPDIFRX_16MAX_RETRIES
) || \

106 ((
RET
Ë=
SPDIFRX_64MAX_RETRIES
))

114 
	#SPDIFRX_WaôF‹A˘ivôy_Off
 ((
uöt32_t
)0x00000000)

	)

115 
	#SPDIFRX_WaôF‹A˘ivôy_On
 ((
uöt32_t
)
SPDIFRX_CR_WFA
)

	)

116 
	#IS_SPDIFRX_WAIT_FOR_ACTIVITY
(
VAL
Ë(((VALË=
SPDIFRX_WaôF‹A˘ivôy_On
Ë|| \

	)

117 ((
VAL
Ë=
SPDIFRX_WaôF‹A˘ivôy_Off
))

125 
	#SPDIFRX_Sñe˘_Ch™√l_A
 ((
uöt32_t
)0x00000000)

	)

126 
	#SPDIFRX_Sñe˘_Ch™√l_B
 ((
uöt32_t
)
SPDIFRX_CR_CHSEL
)

	)

127 
	#IS_SPDIFRX_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
SPDIFRX_Sñe˘_Ch™√l_A
Ë|| \

	)

128 ((
CHANNEL
Ë=
SPDIFRX_Sñe˘_Ch™√l_B
))

136 
	#SPDIFRX_LSB_D©aF‹m©
 ((
uöt32_t
)0x00000000)

	)

137 
	#SPDIFRX_MSB_D©aF‹m©
 ((
uöt32_t
)0x00000010)

	)

138 
	#SPDIFRX_32BITS_D©aF‹m©
 ((
uöt32_t
)0x00000020)

	)

139 
	#IS_SPDIFRX_DATA_FORMAT
(
FORMAT
Ë(((FORMATË=
SPDIFRX_LSB_D©aF‹m©
Ë|| \

	)

140 ((
FORMAT
Ë=
SPDIFRX_MSB_D©aF‹m©
) || \

141 ((
FORMAT
Ë=
SPDIFRX_32BITS_D©aF‹m©
))

149 
	#SPDIFRX_SãªoMode_DißbÀd
 ((
uöt32_t
)0x00000000)

	)

150 
	#SPDIFRX_SãªoMode_E«bÀd
 ((
uöt32_t
)
SPDIFRX_CR_RXSTEO
)

	)

151 
	#IS_STEREO_MODE
(
MODE
Ë(((MODEË=
SPDIFRX_SãªoMode_DißbÀd
Ë|| \

	)

152 ((
MODE
Ë=
SPDIFRX_SãªoMode_E«bÀd
))

160 
	#SPDIFRX_STATE_IDLE
 ((
uöt32_t
)0x00000000)

	)

161 
	#SPDIFRX_STATE_SYNC
 ((
uöt32_t
)0x00000001)

	)

162 
	#SPDIFRX_STATE_RCV
 ((
uöt32_t
)
SPDIFRX_CR_SPDIFEN
)

	)

163 
	#IS_SPDIFRX_STATE
(
STATE
Ë(((STATEË=
SPDIFRX_STATE_IDLE
Ë|| \

	)

164 ((
STATE
Ë=
SPDIFRX_STATE_SYNC
) || \

165 ((
STATE
Ë=
SPDIFRX_STATE_RCV
))

173 
	#SPDIFRX_IT_RXNE
 ((
uöt32_t
)
SPDIFRX_IMR_RXNEIE
)

	)

174 
	#SPDIFRX_IT_CSRNE
 ((
uöt32_t
)
SPDIFRX_IMR_CSRNEIE
)

	)

175 
	#SPDIFRX_IT_PERRIE
 ((
uöt32_t
)
SPDIFRX_IMR_PERRIE
)

	)

176 
	#SPDIFRX_IT_OVRIE
 ((
uöt32_t
)
SPDIFRX_IMR_OVRIE
)

	)

177 
	#SPDIFRX_IT_SBLKIE
 ((
uöt32_t
)
SPDIFRX_IMR_SBLKIE
)

	)

178 
	#SPDIFRX_IT_SYNCDIE
 ((
uöt32_t
)
SPDIFRX_IMR_SYNCDIE
)

	)

179 
	#SPDIFRX_IT_IFEIE
 ((
uöt32_t
)
SPDIFRX_IMR_IFEIE
 )

	)

180 
	#IS_SPDIFRX_CONFIG_IT
(
IT
Ë(((ITË=
SPDIFRX_IT_RXNE
Ë|| \

	)

181 ((
IT
Ë=
SPDIFRX_IT_CSRNE
) || \

182 ((
IT
Ë=
SPDIFRX_IT_PERRIE
) || \

183 ((
IT
Ë=
SPDIFRX_IT_OVRIE
) || \

184 ((
IT
Ë=
SPDIFRX_IT_SBLKIE
) || \

185 ((
IT
Ë=
SPDIFRX_IT_SYNCDIE
) || \

186 ((
IT
Ë=
SPDIFRX_IT_IFEIE
))

194 
	#SPDIFRX_FLAG_RXNE
 ((
uöt32_t
)
SPDIFRX_SR_RXNE
)

	)

195 
	#SPDIFRX_FLAG_CSRNE
 ((
uöt32_t
)
SPDIFRX_SR_CSRNE
)

	)

196 
	#SPDIFRX_FLAG_PERR
 ((
uöt32_t
)
SPDIFRX_SR_PERR
)

	)

197 
	#SPDIFRX_FLAG_OVR
 ((
uöt32_t
)
SPDIFRX_SR_OVR
)

	)

198 
	#SPDIFRX_FLAG_SBD
 ((
uöt32_t
)
SPDIFRX_SR_SBD
)

	)

199 
	#SPDIFRX_FLAG_SYNCD
 ((
uöt32_t
)
SPDIFRX_SR_SYNCD
)

	)

200 
	#SPDIFRX_FLAG_FERR
 ((
uöt32_t
)
SPDIFRX_SR_FERR
)

	)

201 
	#SPDIFRX_FLAG_SERR
 ((
uöt32_t
)
SPDIFRX_SR_SERR
)

	)

202 
	#SPDIFRX_FLAG_TERR
 ((
uöt32_t
)
SPDIFRX_SR_TERR
)

	)

203 
	#IS_SPDIFRX_FLAG
(
FLAG
Ë(((FLAGË=
SPDIFRX_FLAG_RXNE
Ë|| ((FLAGË=
SPDIFRX_FLAG_CSRNE
Ë|| \

	)

204 ((
FLAG
Ë=
SPDIFRX_FLAG_PERR
Ë|| ((FLAGË=
SPDIFRX_FLAG_OVR
) || \

205 ((
FLAG
Ë=
SPDIFRX_SR_SBD
Ë|| ((FLAGË=
SPDIFRX_SR_SYNCD
) || \

206 ((
FLAG
Ë=
SPDIFRX_SR_FERR
Ë|| ((FLAGË=
SPDIFRX_SR_SERR
) || \

207 ((
FLAG
Ë=
SPDIFRX_SR_TERR
))

208 
	#IS_SPDIFRX_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
SPDIFRX_FLAG_PERR
Ë|| ((FLAGË=
SPDIFRX_FLAG_OVR
Ë|| \

	)

209 ((
FLAG
Ë=
SPDIFRX_SR_SBD
Ë|| ((FLAGË=
SPDIFRX_SR_SYNCD
))

222 
SPDIFRX_DeInô
();

225 
SPDIFRX_Inô
(
SPDIFRX_InôTy≥Def
* 
SPDIFRX_InôSåu˘
);

226 
SPDIFRX_Såu˘Inô
(
SPDIFRX_InôTy≥Def
* 
SPDIFRX_InôSåu˘
);

227 
SPDIFRX_Cmd
(
uöt32_t
 
SPDIFRX_Sèã
);

228 
SPDIFRX_SëPªambÀTy≥Bô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

229 
SPDIFRX_SëU£rD©aCh™√lSètusBôs
(
Fun˘i⁄ÆSèã
 
NewSèã
);

230 
SPDIFRX_SëVÆidôyBô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

231 
SPDIFRX_SëP¨ôyBô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

234 
uöt32_t
 
SPDIFRX_Re˚iveD©a
();

237 
SPDIFRX_RxDMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

238 
SPDIFRX_CbDMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

241 
SPDIFRX_ITC⁄fig
(
uöt32_t
 
SPDIFRX_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

242 
FœgSètus
 
SPDIFRX_GëFœgSètus
(
uöt32_t
 
SPDIFRX_FLAG
);

243 
SPDIFRX_CÀ¨Fœg
(
uöt32_t
 
SPDIFRX_FLAG
);

244 
ITSètus
 
SPDIFRX_GëITSètus
(
uöt32_t
 
SPDIFRX_IT
);

245 
SPDIFRX_CÀ¨ITPídögBô
(
uöt32_t
 
SPDIFRX_IT
);

248 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_spi.h

30 #i‚de‡
__STM32F4xx_SPI_H


31 
	#__STM32F4xx_SPI_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt16_t
 
SPI_Dúe˘i⁄
;

59 
uöt16_t
 
SPI_Mode
;

62 
uöt16_t
 
SPI_D©aSize
;

65 
uöt16_t
 
SPI_CPOL
;

68 
uöt16_t
 
SPI_CPHA
;

71 
uöt16_t
 
SPI_NSS
;

75 
uöt16_t
 
SPI_BaudR©ePªsˇÀr
;

81 
uöt16_t
 
SPI_Fú°Bô
;

84 
uöt16_t
 
SPI_CRCPﬁynomül
;

85 }
	tSPI_InôTy≥Def
;

94 
uöt16_t
 
I2S_Mode
;

97 
uöt16_t
 
I2S_Sènd¨d
;

100 
uöt16_t
 
I2S_D©aF‹m©
;

103 
uöt16_t
 
I2S_MCLKOuçut
;

106 
uöt32_t
 
I2S_AudioFªq
;

109 
uöt16_t
 
I2S_CPOL
;

111 }
	tI2S_InôTy≥Def
;

119 
	#IS_SPI_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI1
Ë|| \

	)

120 ((
PERIPH
Ë=
SPI2
) || \

121 ((
PERIPH
Ë=
SPI3
) || \

122 ((
PERIPH
Ë=
SPI4
) || \

123 ((
PERIPH
Ë=
SPI5
) || \

124 ((
PERIPH
Ë=
SPI6
))

126 
	#IS_SPI_ALL_PERIPH_EXT
(
PERIPH
Ë(((PERIPHË=
SPI1
Ë|| \

	)

127 ((
PERIPH
Ë=
SPI2
) || \

128 ((
PERIPH
Ë=
SPI3
) || \

129 ((
PERIPH
Ë=
SPI4
) || \

130 ((
PERIPH
Ë=
SPI5
) || \

131 ((
PERIPH
Ë=
SPI6
) || \

132 ((
PERIPH
Ë=
I2S2ext
) || \

133 ((
PERIPH
Ë=
I2S3ext
))

135 
	#IS_SPI_23_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI2
Ë|| \

	)

136 ((
PERIPH
Ë=
SPI3
))

138 
	#IS_SPI_23_PERIPH_EXT
(
PERIPH
Ë(((PERIPHË=
SPI2
Ë|| \

	)

139 ((
PERIPH
Ë=
SPI3
) || \

140 ((
PERIPH
Ë=
I2S2ext
) || \

141 ((
PERIPH
Ë=
I2S3ext
))

143 
	#IS_I2S_EXT_PERIPH
(
PERIPH
Ë(((PERIPHË=
I2S2ext
Ë|| \

	)

144 ((
PERIPH
Ë=
I2S3ext
))

151 
	#SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
 ((
uöt16_t
)0x0000)

	)

152 
	#SPI_Dúe˘i⁄_2Löes_RxO∆y
 ((
uöt16_t
)0x0400)

	)

153 
	#SPI_Dúe˘i⁄_1Löe_Rx
 ((
uöt16_t
)0x8000)

	)

154 
	#SPI_Dúe˘i⁄_1Löe_Tx
 ((
uöt16_t
)0xC000)

	)

155 
	#IS_SPI_DIRECTION_MODE
(
MODE
Ë(((MODEË=
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
Ë|| \

	)

156 ((
MODE
Ë=
SPI_Dúe˘i⁄_2Löes_RxO∆y
) || \

157 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Rx
) || \

158 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Tx
))

167 
	#SPI_Mode_Ma°î
 ((
uöt16_t
)0x0104)

	)

168 
	#SPI_Mode_Sœve
 ((
uöt16_t
)0x0000)

	)

169 
	#IS_SPI_MODE
(
MODE
Ë(((MODEË=
SPI_Mode_Ma°î
Ë|| \

	)

170 ((
MODE
Ë=
SPI_Mode_Sœve
))

179 
	#SPI_D©aSize_16b
 ((
uöt16_t
)0x0800)

	)

180 
	#SPI_D©aSize_8b
 ((
uöt16_t
)0x0000)

	)

181 
	#IS_SPI_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SPI_D©aSize_16b
Ë|| \

	)

182 ((
DATASIZE
Ë=
SPI_D©aSize_8b
))

191 
	#SPI_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

192 
	#SPI_CPOL_High
 ((
uöt16_t
)0x0002)

	)

193 
	#IS_SPI_CPOL
(
CPOL
Ë(((CPOLË=
SPI_CPOL_Low
Ë|| \

	)

194 ((
CPOL
Ë=
SPI_CPOL_High
))

203 
	#SPI_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

204 
	#SPI_CPHA_2Edge
 ((
uöt16_t
)0x0001)

	)

205 
	#IS_SPI_CPHA
(
CPHA
Ë(((CPHAË=
SPI_CPHA_1Edge
Ë|| \

	)

206 ((
CPHA
Ë=
SPI_CPHA_2Edge
))

215 
	#SPI_NSS_So·
 ((
uöt16_t
)0x0200)

	)

216 
	#SPI_NSS_H¨d
 ((
uöt16_t
)0x0000)

	)

217 
	#IS_SPI_NSS
(
NSS
Ë(((NSSË=
SPI_NSS_So·
Ë|| \

	)

218 ((
NSS
Ë=
SPI_NSS_H¨d
))

227 
	#SPI_BaudR©ePªsˇÀr_2
 ((
uöt16_t
)0x0000)

	)

228 
	#SPI_BaudR©ePªsˇÀr_4
 ((
uöt16_t
)0x0008)

	)

229 
	#SPI_BaudR©ePªsˇÀr_8
 ((
uöt16_t
)0x0010)

	)

230 
	#SPI_BaudR©ePªsˇÀr_16
 ((
uöt16_t
)0x0018)

	)

231 
	#SPI_BaudR©ePªsˇÀr_32
 ((
uöt16_t
)0x0020)

	)

232 
	#SPI_BaudR©ePªsˇÀr_64
 ((
uöt16_t
)0x0028)

	)

233 
	#SPI_BaudR©ePªsˇÀr_128
 ((
uöt16_t
)0x0030)

	)

234 
	#SPI_BaudR©ePªsˇÀr_256
 ((
uöt16_t
)0x0038)

	)

235 
	#IS_SPI_BAUDRATE_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
SPI_BaudR©ePªsˇÀr_2
Ë|| \

	)

236 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_4
) || \

237 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_8
) || \

238 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_16
) || \

239 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_32
) || \

240 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_64
) || \

241 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_128
) || \

242 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_256
))

251 
	#SPI_Fú°Bô_MSB
 ((
uöt16_t
)0x0000)

	)

252 
	#SPI_Fú°Bô_LSB
 ((
uöt16_t
)0x0080)

	)

253 
	#IS_SPI_FIRST_BIT
(
BIT
Ë(((BITË=
SPI_Fú°Bô_MSB
Ë|| \

	)

254 ((
BIT
Ë=
SPI_Fú°Bô_LSB
))

263 
	#I2S_Mode_SœveTx
 ((
uöt16_t
)0x0000)

	)

264 
	#I2S_Mode_SœveRx
 ((
uöt16_t
)0x0100)

	)

265 
	#I2S_Mode_Ma°îTx
 ((
uöt16_t
)0x0200)

	)

266 
	#I2S_Mode_Ma°îRx
 ((
uöt16_t
)0x0300)

	)

267 
	#IS_I2S_MODE
(
MODE
Ë(((MODEË=
I2S_Mode_SœveTx
Ë|| \

	)

268 ((
MODE
Ë=
I2S_Mode_SœveRx
) || \

269 ((
MODE
Ë=
I2S_Mode_Ma°îTx
)|| \

270 ((
MODE
Ë=
I2S_Mode_Ma°îRx
))

280 
	#I2S_Sènd¨d_Phûlùs
 ((
uöt16_t
)0x0000)

	)

281 
	#I2S_Sènd¨d_MSB
 ((
uöt16_t
)0x0010)

	)

282 
	#I2S_Sènd¨d_LSB
 ((
uöt16_t
)0x0020)

	)

283 
	#I2S_Sènd¨d_PCMSh‹t
 ((
uöt16_t
)0x0030)

	)

284 
	#I2S_Sènd¨d_PCML⁄g
 ((
uöt16_t
)0x00B0)

	)

285 
	#IS_I2S_STANDARD
(
STANDARD
Ë(((STANDARDË=
I2S_Sènd¨d_Phûlùs
Ë|| \

	)

286 ((
STANDARD
Ë=
I2S_Sènd¨d_MSB
) || \

287 ((
STANDARD
Ë=
I2S_Sènd¨d_LSB
) || \

288 ((
STANDARD
Ë=
I2S_Sènd¨d_PCMSh‹t
) || \

289 ((
STANDARD
Ë=
I2S_Sènd¨d_PCML⁄g
))

298 
	#I2S_D©aF‹m©_16b
 ((
uöt16_t
)0x0000)

	)

299 
	#I2S_D©aF‹m©_16bexãnded
 ((
uöt16_t
)0x0001)

	)

300 
	#I2S_D©aF‹m©_24b
 ((
uöt16_t
)0x0003)

	)

301 
	#I2S_D©aF‹m©_32b
 ((
uöt16_t
)0x0005)

	)

302 
	#IS_I2S_DATA_FORMAT
(
FORMAT
Ë(((FORMATË=
I2S_D©aF‹m©_16b
Ë|| \

	)

303 ((
FORMAT
Ë=
I2S_D©aF‹m©_16bexãnded
) || \

304 ((
FORMAT
Ë=
I2S_D©aF‹m©_24b
) || \

305 ((
FORMAT
Ë=
I2S_D©aF‹m©_32b
))

314 
	#I2S_MCLKOuçut_E«bÀ
 ((
uöt16_t
)0x0200)

	)

315 
	#I2S_MCLKOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

316 
	#IS_I2S_MCLK_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
I2S_MCLKOuçut_E«bÀ
Ë|| \

	)

317 ((
OUTPUT
Ë=
I2S_MCLKOuçut_DißbÀ
))

326 
	#I2S_AudioFªq_192k
 ((
uöt32_t
)192000)

	)

327 
	#I2S_AudioFªq_96k
 ((
uöt32_t
)96000)

	)

328 
	#I2S_AudioFªq_48k
 ((
uöt32_t
)48000)

	)

329 
	#I2S_AudioFªq_44k
 ((
uöt32_t
)44100)

	)

330 
	#I2S_AudioFªq_32k
 ((
uöt32_t
)32000)

	)

331 
	#I2S_AudioFªq_22k
 ((
uöt32_t
)22050)

	)

332 
	#I2S_AudioFªq_16k
 ((
uöt32_t
)16000)

	)

333 
	#I2S_AudioFªq_11k
 ((
uöt32_t
)11025)

	)

334 
	#I2S_AudioFªq_8k
 ((
uöt32_t
)8000)

	)

335 
	#I2S_AudioFªq_DeÁu…
 ((
uöt32_t
)2)

	)

337 
	#IS_I2S_AUDIO_FREQ
(
FREQ
Ë((((FREQË>
I2S_AudioFªq_8k
Ë&& \

	)

338 ((
FREQ
Ë<
I2S_AudioFªq_192k
)) || \

339 ((
FREQ
Ë=
I2S_AudioFªq_DeÁu…
))

348 
	#I2S_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

349 
	#I2S_CPOL_High
 ((
uöt16_t
)0x0008)

	)

350 
	#IS_I2S_CPOL
(
CPOL
Ë(((CPOLË=
I2S_CPOL_Low
Ë|| \

	)

351 ((
CPOL
Ë=
I2S_CPOL_High
))

360 
	#SPI_I2S_DMAReq_Tx
 ((
uöt16_t
)0x0002)

	)

361 
	#SPI_I2S_DMAReq_Rx
 ((
uöt16_t
)0x0001)

	)

362 
	#IS_SPI_I2S_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFFFCË=0x00Ë&& ((DMAREQË!0x00))

	)

371 
	#SPI_NSSI¡î«lSo·_Së
 ((
uöt16_t
)0x0100)

	)

372 
	#SPI_NSSI¡î«lSo·_Re£t
 ((
uöt16_t
)0xFEFF)

	)

373 
	#IS_SPI_NSS_INTERNAL
(
INTERNAL
Ë(((INTERNALË=
SPI_NSSI¡î«lSo·_Së
Ë|| \

	)

374 ((
INTERNAL
Ë=
SPI_NSSI¡î«lSo·_Re£t
))

383 
	#SPI_CRC_Tx
 ((
uöt8_t
)0x00)

	)

384 
	#SPI_CRC_Rx
 ((
uöt8_t
)0x01)

	)

385 
	#IS_SPI_CRC
(
CRC
Ë(((CRCË=
SPI_CRC_Tx
Ë|| ((CRCË=
SPI_CRC_Rx
))

	)

394 
	#SPI_Dúe˘i⁄_Rx
 ((
uöt16_t
)0xBFFF)

	)

395 
	#SPI_Dúe˘i⁄_Tx
 ((
uöt16_t
)0x4000)

	)

396 
	#IS_SPI_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
SPI_Dúe˘i⁄_Rx
Ë|| \

	)

397 ((
DIRECTION
Ë=
SPI_Dúe˘i⁄_Tx
))

406 
	#SPI_I2S_IT_TXE
 ((
uöt8_t
)0x71)

	)

407 
	#SPI_I2S_IT_RXNE
 ((
uöt8_t
)0x60)

	)

408 
	#SPI_I2S_IT_ERR
 ((
uöt8_t
)0x50)

	)

409 
	#I2S_IT_UDR
 ((
uöt8_t
)0x53)

	)

410 
	#SPI_I2S_IT_TIFRFE
 ((
uöt8_t
)0x58)

	)

412 
	#IS_SPI_I2S_CONFIG_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_TXE
Ë|| \

	)

413 ((
IT
Ë=
SPI_I2S_IT_RXNE
) || \

414 ((
IT
Ë=
SPI_I2S_IT_ERR
))

416 
	#SPI_I2S_IT_OVR
 ((
uöt8_t
)0x56)

	)

417 
	#SPI_IT_MODF
 ((
uöt8_t
)0x55)

	)

418 
	#SPI_IT_CRCERR
 ((
uöt8_t
)0x54)

	)

420 
	#IS_SPI_I2S_CLEAR_IT
(
IT
Ë(((ITË=
SPI_IT_CRCERR
))

	)

422 
	#IS_SPI_I2S_GET_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_RXNE
)|| ((ITË=
SPI_I2S_IT_TXE
Ë|| \

	)

423 ((
IT
Ë=
SPI_IT_CRCERR
Ë|| ((ITË=
SPI_IT_MODF
) || \

424 ((
IT
Ë=
SPI_I2S_IT_OVR
Ë|| ((ITË=
I2S_IT_UDR
) ||\

425 ((
IT
Ë=
SPI_I2S_IT_TIFRFE
))

434 
	#SPI_I2S_FLAG_RXNE
 ((
uöt16_t
)0x0001)

	)

435 
	#SPI_I2S_FLAG_TXE
 ((
uöt16_t
)0x0002)

	)

436 
	#I2S_FLAG_CHSIDE
 ((
uöt16_t
)0x0004)

	)

437 
	#I2S_FLAG_UDR
 ((
uöt16_t
)0x0008)

	)

438 
	#SPI_FLAG_CRCERR
 ((
uöt16_t
)0x0010)

	)

439 
	#SPI_FLAG_MODF
 ((
uöt16_t
)0x0020)

	)

440 
	#SPI_I2S_FLAG_OVR
 ((
uöt16_t
)0x0040)

	)

441 
	#SPI_I2S_FLAG_BSY
 ((
uöt16_t
)0x0080)

	)

442 
	#SPI_I2S_FLAG_TIFRFE
 ((
uöt16_t
)0x0100)

	)

444 
	#IS_SPI_I2S_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
SPI_FLAG_CRCERR
))

	)

445 
	#IS_SPI_I2S_GET_FLAG
(
FLAG
Ë(((FLAGË=
SPI_I2S_FLAG_BSY
Ë|| ((FLAGË=
SPI_I2S_FLAG_OVR
Ë|| \

	)

446 ((
FLAG
Ë=
SPI_FLAG_MODF
Ë|| ((FLAGË=
SPI_FLAG_CRCERR
) || \

447 ((
FLAG
Ë=
I2S_FLAG_UDR
Ë|| ((FLAGË=
I2S_FLAG_CHSIDE
) || \

448 ((
FLAG
Ë=
SPI_I2S_FLAG_TXE
Ë|| ((FLAGË=
SPI_I2S_FLAG_RXNE
)|| \

449 ((
FLAG
Ë=
SPI_I2S_FLAG_TIFRFE
))

458 
	#IS_SPI_CRC_POLYNOMIAL
(
POLYNOMIAL
Ë((POLYNOMIALË>0x1)

	)

467 
	#SPI_DMAReq_Tx
 
SPI_I2S_DMAReq_Tx


	)

468 
	#SPI_DMAReq_Rx
 
SPI_I2S_DMAReq_Rx


	)

469 
	#SPI_IT_TXE
 
SPI_I2S_IT_TXE


	)

470 
	#SPI_IT_RXNE
 
SPI_I2S_IT_RXNE


	)

471 
	#SPI_IT_ERR
 
SPI_I2S_IT_ERR


	)

472 
	#SPI_IT_OVR
 
SPI_I2S_IT_OVR


	)

473 
	#SPI_FLAG_RXNE
 
SPI_I2S_FLAG_RXNE


	)

474 
	#SPI_FLAG_TXE
 
SPI_I2S_FLAG_TXE


	)

475 
	#SPI_FLAG_OVR
 
SPI_I2S_FLAG_OVR


	)

476 
	#SPI_FLAG_BSY
 
SPI_I2S_FLAG_BSY


	)

477 
	#SPI_DeInô
 
SPI_I2S_DeInô


	)

478 
	#SPI_ITC⁄fig
 
SPI_I2S_ITC⁄fig


	)

479 
	#SPI_DMACmd
 
SPI_I2S_DMACmd


	)

480 
	#SPI_SídD©a
 
SPI_I2S_SídD©a


	)

481 
	#SPI_Re˚iveD©a
 
SPI_I2S_Re˚iveD©a


	)

482 
	#SPI_GëFœgSètus
 
SPI_I2S_GëFœgSètus


	)

483 
	#SPI_CÀ¨Fœg
 
SPI_I2S_CÀ¨Fœg


	)

484 
	#SPI_GëITSètus
 
SPI_I2S_GëITSètus


	)

485 
	#SPI_CÀ¨ITPídögBô
 
SPI_I2S_CÀ¨ITPídögBô


	)

498 
SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
);

501 
SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

502 
I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

503 
SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

504 
I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

505 
SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

506 
I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

507 
SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
);

508 
SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
);

509 
SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
);

510 
SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

511 
SPI_TIModeCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

513 
I2S_FuŒDu∂exC⁄fig
(
SPI_Ty≥Def
* 
I2Sxext
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

516 
SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
);

517 
uöt16_t
 
SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
);

520 
SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

521 
SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
);

522 
uöt16_t
 
SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
);

523 
uöt16_t
 
SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
);

526 
SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

529 
SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

530 
FœgSètus
 
SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

531 
SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

532 
ITSètus
 
SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

533 
SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

535 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_syscfg.h

30 #i‚de‡
__STM32F4xx_SYSCFG_H


31 
	#__STM32F4xx_SYSCFG_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

58 
	#EXTI_P‹tSour˚GPIOA
 ((
uöt8_t
)0x00)

	)

59 
	#EXTI_P‹tSour˚GPIOB
 ((
uöt8_t
)0x01)

	)

60 
	#EXTI_P‹tSour˚GPIOC
 ((
uöt8_t
)0x02)

	)

61 
	#EXTI_P‹tSour˚GPIOD
 ((
uöt8_t
)0x03)

	)

62 
	#EXTI_P‹tSour˚GPIOE
 ((
uöt8_t
)0x04)

	)

63 
	#EXTI_P‹tSour˚GPIOF
 ((
uöt8_t
)0x05)

	)

64 
	#EXTI_P‹tSour˚GPIOG
 ((
uöt8_t
)0x06)

	)

65 
	#EXTI_P‹tSour˚GPIOH
 ((
uöt8_t
)0x07)

	)

66 
	#EXTI_P‹tSour˚GPIOI
 ((
uöt8_t
)0x08)

	)

67 
	#EXTI_P‹tSour˚GPIOJ
 ((
uöt8_t
)0x09)

	)

68 
	#EXTI_P‹tSour˚GPIOK
 ((
uöt8_t
)0x0A)

	)

70 
	#IS_EXTI_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
EXTI_P‹tSour˚GPIOA
Ë|| \

	)

71 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOB
) || \

72 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOC
) || \

73 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOD
) || \

74 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOE
) || \

75 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOF
) || \

76 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOG
) || \

77 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOH
) || \

78 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOI
) || \

79 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOJ
) || \

80 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOK
))

90 
	#EXTI_PöSour˚0
 ((
uöt8_t
)0x00)

	)

91 
	#EXTI_PöSour˚1
 ((
uöt8_t
)0x01)

	)

92 
	#EXTI_PöSour˚2
 ((
uöt8_t
)0x02)

	)

93 
	#EXTI_PöSour˚3
 ((
uöt8_t
)0x03)

	)

94 
	#EXTI_PöSour˚4
 ((
uöt8_t
)0x04)

	)

95 
	#EXTI_PöSour˚5
 ((
uöt8_t
)0x05)

	)

96 
	#EXTI_PöSour˚6
 ((
uöt8_t
)0x06)

	)

97 
	#EXTI_PöSour˚7
 ((
uöt8_t
)0x07)

	)

98 
	#EXTI_PöSour˚8
 ((
uöt8_t
)0x08)

	)

99 
	#EXTI_PöSour˚9
 ((
uöt8_t
)0x09)

	)

100 
	#EXTI_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

101 
	#EXTI_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

102 
	#EXTI_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

103 
	#EXTI_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

104 
	#EXTI_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

105 
	#EXTI_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

106 
	#IS_EXTI_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
EXTI_PöSour˚0
Ë|| \

	)

107 ((
PINSOURCE
Ë=
EXTI_PöSour˚1
) || \

108 ((
PINSOURCE
Ë=
EXTI_PöSour˚2
) || \

109 ((
PINSOURCE
Ë=
EXTI_PöSour˚3
) || \

110 ((
PINSOURCE
Ë=
EXTI_PöSour˚4
) || \

111 ((
PINSOURCE
Ë=
EXTI_PöSour˚5
) || \

112 ((
PINSOURCE
Ë=
EXTI_PöSour˚6
) || \

113 ((
PINSOURCE
Ë=
EXTI_PöSour˚7
) || \

114 ((
PINSOURCE
Ë=
EXTI_PöSour˚8
) || \

115 ((
PINSOURCE
Ë=
EXTI_PöSour˚9
) || \

116 ((
PINSOURCE
Ë=
EXTI_PöSour˚10
) || \

117 ((
PINSOURCE
Ë=
EXTI_PöSour˚11
) || \

118 ((
PINSOURCE
Ë=
EXTI_PöSour˚12
) || \

119 ((
PINSOURCE
Ë=
EXTI_PöSour˚13
) || \

120 ((
PINSOURCE
Ë=
EXTI_PöSour˚14
) || \

121 ((
PINSOURCE
Ë=
EXTI_PöSour˚15
))

130 
	#SYSCFG_Mem‹yRem≠_Fœsh
 ((
uöt8_t
)0x00)

	)

131 
	#SYSCFG_Mem‹yRem≠_Sy°emFœsh
 ((
uöt8_t
)0x01)

	)

132 
	#SYSCFG_Mem‹yRem≠_SRAM
 ((
uöt8_t
)0x03)

	)

133 
	#SYSCFG_Mem‹yRem≠_SDRAM
 ((
uöt8_t
)0x04)

	)

135 #i‡
deföed
 (
STM32F40_41xxx
)

136 
	#SYSCFG_Mem‹yRem≠_FSMC
 ((
uöt8_t
)0x02)

	)

139 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

140 
	#SYSCFG_Mem‹yRem≠_FMC
 ((
uöt8_t
)0x02)

	)

143 #i‡
deföed
 (
STM32F446xx
)

144 
	#SYSCFG_Mem‹yRem≠_ExtMEM
 ((
uöt8_t
)0x02)

	)

147 #i‡
deföed
 (
STM32F40_41xxx
)

148 
	#IS_SYSCFG_MEMORY_REMAP_CONFING
(
REMAP
Ë(((REMAPË=
SYSCFG_Mem‹yRem≠_Fœsh
Ë|| \

	)

149 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_Sy°emFœsh
) || \

150 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SRAM
) || \

151 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_FSMC
))

154 #i‡
deföed
 (
STM32F401xx
Ë|| deföed (
STM32F411xE
)

155 
	#IS_SYSCFG_MEMORY_REMAP_CONFING
(
REMAP
Ë(((REMAPË=
SYSCFG_Mem‹yRem≠_Fœsh
Ë|| \

	)

156 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_Sy°emFœsh
) || \

157 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SRAM
))

160 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

161 
	#IS_SYSCFG_MEMORY_REMAP_CONFING
(
REMAP
Ë(((REMAPË=
SYSCFG_Mem‹yRem≠_Fœsh
Ë|| \

	)

162 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_Sy°emFœsh
) || \

163 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SRAM
) || \

164 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SDRAM
) || \

165 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_FMC
))

168 #i‡
deföed
 (
STM32F446xx
)

169 
	#IS_SYSCFG_MEMORY_REMAP_CONFING
(
REMAP
Ë(((REMAPË=
SYSCFG_Mem‹yRem≠_Fœsh
Ë|| \

	)

170 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_ExtMEM
) || \

171 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_Sy°emFœsh
) || \

172 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SRAM
) || \

173 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SDRAM
))

184 
	#SYSCFG_ETH_MedüI¡îÁ˚_MII
 ((
uöt32_t
)0x00000000)

	)

185 
	#SYSCFG_ETH_MedüI¡îÁ˚_RMII
 ((
uöt32_t
)0x00000001)

	)

187 
	#IS_SYSCFG_ETH_MEDIA_INTERFACE
(
INTERFACE
Ë(((INTERFACEË=
SYSCFG_ETH_MedüI¡îÁ˚_MII
Ë|| \

	)

188 ((
INTERFACE
Ë=
SYSCFG_ETH_MedüI¡îÁ˚_RMII
))

200 
SYSCFG_DeInô
();

201 
SYSCFG_Mem‹yRem≠C⁄fig
(
uöt8_t
 
SYSCFG_Mem‹yRem≠
);

202 
SYSCFG_Mem‹ySw≠pögB™k
(
Fun˘i⁄ÆSèã
 
NewSèã
);

203 
SYSCFG_EXTILöeC⁄fig
(
uöt8_t
 
EXTI_P‹tSour˚GPIOx
, uöt8_à
EXTI_PöSour˚x
);

204 
SYSCFG_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
SYSCFG_ETH_MedüI¡îÁ˚
);

205 
SYSCFG_Com≥nßti⁄CñlCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

206 
FœgSètus
 
SYSCFG_GëCom≥nßti⁄CñlSètus
();

208 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_tim.h

30 #i‚de‡
__STM32F4xx_TIM_H


31 
	#__STM32F4xx_TIM_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

57 
uöt16_t
 
TIM_PªsˇÀr
;

60 
uöt16_t
 
TIM_Cou¡îMode
;

63 
uöt32_t
 
TIM_Pîiod
;

67 
uöt16_t
 
TIM_ClockDivisi⁄
;

70 
uöt8_t
 
TIM_Rïëôi⁄Cou¡î
;

78 } 
	tTIM_TimeBa£InôTy≥Def
;

86 
uöt16_t
 
TIM_OCMode
;

89 
uöt16_t
 
TIM_OuçutSèã
;

92 
uöt16_t
 
TIM_OuçutNSèã
;

96 
uöt32_t
 
TIM_Pul£
;

99 
uöt16_t
 
TIM_OCPﬁ¨ôy
;

102 
uöt16_t
 
TIM_OCNPﬁ¨ôy
;

106 
uöt16_t
 
TIM_OCIdÀSèã
;

110 
uöt16_t
 
TIM_OCNIdÀSèã
;

113 } 
	tTIM_OCInôTy≥Def
;

122 
uöt16_t
 
TIM_Ch™√l
;

125 
uöt16_t
 
TIM_ICPﬁ¨ôy
;

128 
uöt16_t
 
TIM_ICSñe˘i⁄
;

131 
uöt16_t
 
TIM_ICPªsˇÀr
;

134 
uöt16_t
 
TIM_ICFûãr
;

136 } 
	tTIM_ICInôTy≥Def
;

146 
uöt16_t
 
TIM_OSSRSèã
;

149 
uöt16_t
 
TIM_OSSISèã
;

152 
uöt16_t
 
TIM_LOCKLevñ
;

155 
uöt16_t
 
TIM_DódTime
;

159 
uöt16_t
 
TIM_Bªak
;

162 
uöt16_t
 
TIM_BªakPﬁ¨ôy
;

165 
uöt16_t
 
TIM_Autom©icOuçut
;

167 } 
	tTIM_BDTRInôTy≥Def
;

175 
	#IS_TIM_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

176 ((
PERIPH
Ë=
TIM2
) || \

177 ((
PERIPH
Ë=
TIM3
) || \

178 ((
PERIPH
Ë=
TIM4
) || \

179 ((
PERIPH
Ë=
TIM5
) || \

180 ((
PERIPH
Ë=
TIM6
) || \

181 ((
PERIPH
Ë=
TIM7
) || \

182 ((
PERIPH
Ë=
TIM8
) || \

183 ((
PERIPH
Ë=
TIM9
) || \

184 ((
PERIPH
Ë=
TIM10
) || \

185 ((
PERIPH
Ë=
TIM11
) || \

186 ((
PERIPH
Ë=
TIM12
) || \

187 (((
PERIPH
Ë=
TIM13
) || \

188 ((
PERIPH
Ë=
TIM14
)))

190 
	#IS_TIM_LIST1_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

191 ((
PERIPH
Ë=
TIM2
) || \

192 ((
PERIPH
Ë=
TIM3
) || \

193 ((
PERIPH
Ë=
TIM4
) || \

194 ((
PERIPH
Ë=
TIM5
) || \

195 ((
PERIPH
Ë=
TIM8
) || \

196 ((
PERIPH
Ë=
TIM9
) || \

197 ((
PERIPH
Ë=
TIM10
) || \

198 ((
PERIPH
Ë=
TIM11
) || \

199 ((
PERIPH
Ë=
TIM12
) || \

200 ((
PERIPH
Ë=
TIM13
) || \

201 ((
PERIPH
Ë=
TIM14
))

204 
	#IS_TIM_LIST2_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

205 ((
PERIPH
Ë=
TIM2
) || \

206 ((
PERIPH
Ë=
TIM3
) || \

207 ((
PERIPH
Ë=
TIM4
) || \

208 ((
PERIPH
Ë=
TIM5
) || \

209 ((
PERIPH
Ë=
TIM8
) || \

210 ((
PERIPH
Ë=
TIM9
) || \

211 ((
PERIPH
Ë=
TIM12
))

213 
	#IS_TIM_LIST3_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

214 ((
PERIPH
Ë=
TIM2
) || \

215 ((
PERIPH
Ë=
TIM3
) || \

216 ((
PERIPH
Ë=
TIM4
) || \

217 ((
PERIPH
Ë=
TIM5
) || \

218 ((
PERIPH
Ë=
TIM8
))

220 
	#IS_TIM_LIST4_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

221 ((
PERIPH
Ë=
TIM8
))

223 
	#IS_TIM_LIST5_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

224 ((
PERIPH
Ë=
TIM2
) || \

225 ((
PERIPH
Ë=
TIM3
) || \

226 ((
PERIPH
Ë=
TIM4
) || \

227 ((
PERIPH
Ë=
TIM5
) || \

228 ((
PERIPH
Ë=
TIM6
) || \

229 ((
PERIPH
Ë=
TIM7
) || \

230 ((
PERIPH
Ë=
TIM8
))

232 
	#IS_TIM_LIST6_PERIPH
(
TIMx
)(((TIMxË=
TIM2
Ë|| \

	)

233 ((
TIMx
Ë=
TIM5
) || \

234 ((
TIMx
Ë=
TIM11
))

240 
	#TIM_OCMode_Timög
 ((
uöt16_t
)0x0000)

	)

241 
	#TIM_OCMode_A˘ive
 ((
uöt16_t
)0x0010)

	)

242 
	#TIM_OCMode_I«˘ive
 ((
uöt16_t
)0x0020)

	)

243 
	#TIM_OCMode_ToggÀ
 ((
uöt16_t
)0x0030)

	)

244 
	#TIM_OCMode_PWM1
 ((
uöt16_t
)0x0060)

	)

245 
	#TIM_OCMode_PWM2
 ((
uöt16_t
)0x0070)

	)

246 
	#IS_TIM_OC_MODE
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
Ë|| \

	)

247 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

248 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

249 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

250 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

251 ((
MODE
Ë=
TIM_OCMode_PWM2
))

252 
	#IS_TIM_OCM
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
Ë|| \

	)

253 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

254 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

255 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

256 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

257 ((
MODE
Ë=
TIM_OCMode_PWM2
) || \

258 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

259 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

268 
	#TIM_OPMode_SögÀ
 ((
uöt16_t
)0x0008)

	)

269 
	#TIM_OPMode_Rïëôive
 ((
uöt16_t
)0x0000)

	)

270 
	#IS_TIM_OPM_MODE
(
MODE
Ë(((MODEË=
TIM_OPMode_SögÀ
Ë|| \

	)

271 ((
MODE
Ë=
TIM_OPMode_Rïëôive
))

280 
	#TIM_Ch™√l_1
 ((
uöt16_t
)0x0000)

	)

281 
	#TIM_Ch™√l_2
 ((
uöt16_t
)0x0004)

	)

282 
	#TIM_Ch™√l_3
 ((
uöt16_t
)0x0008)

	)

283 
	#TIM_Ch™√l_4
 ((
uöt16_t
)0x000C)

	)

285 
	#IS_TIM_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

286 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

287 ((
CHANNEL
Ë=
TIM_Ch™√l_3
) || \

288 ((
CHANNEL
Ë=
TIM_Ch™√l_4
))

290 
	#IS_TIM_PWMI_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

291 ((
CHANNEL
Ë=
TIM_Ch™√l_2
))

292 
	#IS_TIM_COMPLEMENTARY_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

293 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

294 ((
CHANNEL
Ë=
TIM_Ch™√l_3
))

303 
	#TIM_CKD_DIV1
 ((
uöt16_t
)0x0000)

	)

304 
	#TIM_CKD_DIV2
 ((
uöt16_t
)0x0100)

	)

305 
	#TIM_CKD_DIV4
 ((
uöt16_t
)0x0200)

	)

306 
	#IS_TIM_CKD_DIV
(
DIV
Ë(((DIVË=
TIM_CKD_DIV1
Ë|| \

	)

307 ((
DIV
Ë=
TIM_CKD_DIV2
) || \

308 ((
DIV
Ë=
TIM_CKD_DIV4
))

317 
	#TIM_Cou¡îMode_Up
 ((
uöt16_t
)0x0000)

	)

318 
	#TIM_Cou¡îMode_Down
 ((
uöt16_t
)0x0010)

	)

319 
	#TIM_Cou¡îMode_CíãrAlig√d1
 ((
uöt16_t
)0x0020)

	)

320 
	#TIM_Cou¡îMode_CíãrAlig√d2
 ((
uöt16_t
)0x0040)

	)

321 
	#TIM_Cou¡îMode_CíãrAlig√d3
 ((
uöt16_t
)0x0060)

	)

322 
	#IS_TIM_COUNTER_MODE
(
MODE
Ë(((MODEË=
TIM_Cou¡îMode_Up
Ë|| \

	)

323 ((
MODE
Ë=
TIM_Cou¡îMode_Down
) || \

324 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d1
) || \

325 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d2
) || \

326 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d3
))

335 
	#TIM_OCPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

336 
	#TIM_OCPﬁ¨ôy_Low
 ((
uöt16_t
)0x0002)

	)

337 
	#IS_TIM_OC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCPﬁ¨ôy_High
Ë|| \

	)

338 ((
POLARITY
Ë=
TIM_OCPﬁ¨ôy_Low
))

347 
	#TIM_OCNPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

348 
	#TIM_OCNPﬁ¨ôy_Low
 ((
uöt16_t
)0x0008)

	)

349 
	#IS_TIM_OCN_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCNPﬁ¨ôy_High
Ë|| \

	)

350 ((
POLARITY
Ë=
TIM_OCNPﬁ¨ôy_Low
))

359 
	#TIM_OuçutSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

360 
	#TIM_OuçutSèã_E«bÀ
 ((
uöt16_t
)0x0001)

	)

361 
	#IS_TIM_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutSèã_DißbÀ
Ë|| \

	)

362 ((
STATE
Ë=
TIM_OuçutSèã_E«bÀ
))

371 
	#TIM_OuçutNSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

372 
	#TIM_OuçutNSèã_E«bÀ
 ((
uöt16_t
)0x0004)

	)

373 
	#IS_TIM_OUTPUTN_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutNSèã_DißbÀ
Ë|| \

	)

374 ((
STATE
Ë=
TIM_OuçutNSèã_E«bÀ
))

383 
	#TIM_CCx_E«bÀ
 ((
uöt16_t
)0x0001)

	)

384 
	#TIM_CCx_DißbÀ
 ((
uöt16_t
)0x0000)

	)

385 
	#IS_TIM_CCX
(
CCX
Ë(((CCXË=
TIM_CCx_E«bÀ
Ë|| \

	)

386 ((
CCX
Ë=
TIM_CCx_DißbÀ
))

395 
	#TIM_CCxN_E«bÀ
 ((
uöt16_t
)0x0004)

	)

396 
	#TIM_CCxN_DißbÀ
 ((
uöt16_t
)0x0000)

	)

397 
	#IS_TIM_CCXN
(
CCXN
Ë(((CCXNË=
TIM_CCxN_E«bÀ
Ë|| \

	)

398 ((
CCXN
Ë=
TIM_CCxN_DißbÀ
))

407 
	#TIM_Bªak_E«bÀ
 ((
uöt16_t
)0x1000)

	)

408 
	#TIM_Bªak_DißbÀ
 ((
uöt16_t
)0x0000)

	)

409 
	#IS_TIM_BREAK_STATE
(
STATE
Ë(((STATEË=
TIM_Bªak_E«bÀ
Ë|| \

	)

410 ((
STATE
Ë=
TIM_Bªak_DißbÀ
))

419 
	#TIM_BªakPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000)

	)

420 
	#TIM_BªakPﬁ¨ôy_High
 ((
uöt16_t
)0x2000)

	)

421 
	#IS_TIM_BREAK_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_BªakPﬁ¨ôy_Low
Ë|| \

	)

422 ((
POLARITY
Ë=
TIM_BªakPﬁ¨ôy_High
))

431 
	#TIM_Autom©icOuçut_E«bÀ
 ((
uöt16_t
)0x4000)

	)

432 
	#TIM_Autom©icOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

433 
	#IS_TIM_AUTOMATIC_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_Autom©icOuçut_E«bÀ
Ë|| \

	)

434 ((
STATE
Ë=
TIM_Autom©icOuçut_DißbÀ
))

443 
	#TIM_LOCKLevñ_OFF
 ((
uöt16_t
)0x0000)

	)

444 
	#TIM_LOCKLevñ_1
 ((
uöt16_t
)0x0100)

	)

445 
	#TIM_LOCKLevñ_2
 ((
uöt16_t
)0x0200)

	)

446 
	#TIM_LOCKLevñ_3
 ((
uöt16_t
)0x0300)

	)

447 
	#IS_TIM_LOCK_LEVEL
(
LEVEL
Ë(((LEVELË=
TIM_LOCKLevñ_OFF
Ë|| \

	)

448 ((
LEVEL
Ë=
TIM_LOCKLevñ_1
) || \

449 ((
LEVEL
Ë=
TIM_LOCKLevñ_2
) || \

450 ((
LEVEL
Ë=
TIM_LOCKLevñ_3
))

459 
	#TIM_OSSISèã_E«bÀ
 ((
uöt16_t
)0x0400)

	)

460 
	#TIM_OSSISèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

461 
	#IS_TIM_OSSI_STATE
(
STATE
Ë(((STATEË=
TIM_OSSISèã_E«bÀ
Ë|| \

	)

462 ((
STATE
Ë=
TIM_OSSISèã_DißbÀ
))

471 
	#TIM_OSSRSèã_E«bÀ
 ((
uöt16_t
)0x0800)

	)

472 
	#TIM_OSSRSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

473 
	#IS_TIM_OSSR_STATE
(
STATE
Ë(((STATEË=
TIM_OSSRSèã_E«bÀ
Ë|| \

	)

474 ((
STATE
Ë=
TIM_OSSRSèã_DißbÀ
))

483 
	#TIM_OCIdÀSèã_Së
 ((
uöt16_t
)0x0100)

	)

484 
	#TIM_OCIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

485 
	#IS_TIM_OCIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCIdÀSèã_Së
Ë|| \

	)

486 ((
STATE
Ë=
TIM_OCIdÀSèã_Re£t
))

495 
	#TIM_OCNIdÀSèã_Së
 ((
uöt16_t
)0x0200)

	)

496 
	#TIM_OCNIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

497 
	#IS_TIM_OCNIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCNIdÀSèã_Së
Ë|| \

	)

498 ((
STATE
Ë=
TIM_OCNIdÀSèã_Re£t
))

507 
	#TIM_ICPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0000)

	)

508 
	#TIM_ICPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0002)

	)

509 
	#TIM_ICPﬁ¨ôy_BŸhEdge
 ((
uöt16_t
)0x000A)

	)

510 
	#IS_TIM_IC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
Ë|| \

	)

511 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
)|| \

512 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_BŸhEdge
))

521 
	#TIM_ICSñe˘i⁄_Dúe˘TI
 ((
uöt16_t
)0x0001Ë

	)

523 
	#TIM_ICSñe˘i⁄_Indúe˘TI
 ((
uöt16_t
)0x0002Ë

	)

525 
	#TIM_ICSñe˘i⁄_TRC
 ((
uöt16_t
)0x0003Ë

	)

526 
	#IS_TIM_IC_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_ICSñe˘i⁄_Dúe˘TI
Ë|| \

	)

527 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_Indúe˘TI
) || \

528 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_TRC
))

537 
	#TIM_ICPSC_DIV1
 ((
uöt16_t
)0x0000Ë

	)

538 
	#TIM_ICPSC_DIV2
 ((
uöt16_t
)0x0004Ë

	)

539 
	#TIM_ICPSC_DIV4
 ((
uöt16_t
)0x0008Ë

	)

540 
	#TIM_ICPSC_DIV8
 ((
uöt16_t
)0x000CË

	)

541 
	#IS_TIM_IC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ICPSC_DIV1
Ë|| \

	)

542 ((
PRESCALER
Ë=
TIM_ICPSC_DIV2
) || \

543 ((
PRESCALER
Ë=
TIM_ICPSC_DIV4
) || \

544 ((
PRESCALER
Ë=
TIM_ICPSC_DIV8
))

553 
	#TIM_IT_Upd©e
 ((
uöt16_t
)0x0001)

	)

554 
	#TIM_IT_CC1
 ((
uöt16_t
)0x0002)

	)

555 
	#TIM_IT_CC2
 ((
uöt16_t
)0x0004)

	)

556 
	#TIM_IT_CC3
 ((
uöt16_t
)0x0008)

	)

557 
	#TIM_IT_CC4
 ((
uöt16_t
)0x0010)

	)

558 
	#TIM_IT_COM
 ((
uöt16_t
)0x0020)

	)

559 
	#TIM_IT_Triggî
 ((
uöt16_t
)0x0040)

	)

560 
	#TIM_IT_Bªak
 ((
uöt16_t
)0x0080)

	)

561 
	#IS_TIM_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((ITË!0x0000))

	)

563 
	#IS_TIM_GET_IT
(
IT
Ë(((ITË=
TIM_IT_Upd©e
Ë|| \

	)

564 ((
IT
Ë=
TIM_IT_CC1
) || \

565 ((
IT
Ë=
TIM_IT_CC2
) || \

566 ((
IT
Ë=
TIM_IT_CC3
) || \

567 ((
IT
Ë=
TIM_IT_CC4
) || \

568 ((
IT
Ë=
TIM_IT_COM
) || \

569 ((
IT
Ë=
TIM_IT_Triggî
) || \

570 ((
IT
Ë=
TIM_IT_Bªak
))

579 
	#TIM_DMABa£_CR1
 ((
uöt16_t
)0x0000)

	)

580 
	#TIM_DMABa£_CR2
 ((
uöt16_t
)0x0001)

	)

581 
	#TIM_DMABa£_SMCR
 ((
uöt16_t
)0x0002)

	)

582 
	#TIM_DMABa£_DIER
 ((
uöt16_t
)0x0003)

	)

583 
	#TIM_DMABa£_SR
 ((
uöt16_t
)0x0004)

	)

584 
	#TIM_DMABa£_EGR
 ((
uöt16_t
)0x0005)

	)

585 
	#TIM_DMABa£_CCMR1
 ((
uöt16_t
)0x0006)

	)

586 
	#TIM_DMABa£_CCMR2
 ((
uöt16_t
)0x0007)

	)

587 
	#TIM_DMABa£_CCER
 ((
uöt16_t
)0x0008)

	)

588 
	#TIM_DMABa£_CNT
 ((
uöt16_t
)0x0009)

	)

589 
	#TIM_DMABa£_PSC
 ((
uöt16_t
)0x000A)

	)

590 
	#TIM_DMABa£_ARR
 ((
uöt16_t
)0x000B)

	)

591 
	#TIM_DMABa£_RCR
 ((
uöt16_t
)0x000C)

	)

592 
	#TIM_DMABa£_CCR1
 ((
uöt16_t
)0x000D)

	)

593 
	#TIM_DMABa£_CCR2
 ((
uöt16_t
)0x000E)

	)

594 
	#TIM_DMABa£_CCR3
 ((
uöt16_t
)0x000F)

	)

595 
	#TIM_DMABa£_CCR4
 ((
uöt16_t
)0x0010)

	)

596 
	#TIM_DMABa£_BDTR
 ((
uöt16_t
)0x0011)

	)

597 
	#TIM_DMABa£_DCR
 ((
uöt16_t
)0x0012)

	)

598 
	#TIM_DMABa£_OR
 ((
uöt16_t
)0x0013)

	)

599 
	#IS_TIM_DMA_BASE
(
BASE
Ë(((BASEË=
TIM_DMABa£_CR1
Ë|| \

	)

600 ((
BASE
Ë=
TIM_DMABa£_CR2
) || \

601 ((
BASE
Ë=
TIM_DMABa£_SMCR
) || \

602 ((
BASE
Ë=
TIM_DMABa£_DIER
) || \

603 ((
BASE
Ë=
TIM_DMABa£_SR
) || \

604 ((
BASE
Ë=
TIM_DMABa£_EGR
) || \

605 ((
BASE
Ë=
TIM_DMABa£_CCMR1
) || \

606 ((
BASE
Ë=
TIM_DMABa£_CCMR2
) || \

607 ((
BASE
Ë=
TIM_DMABa£_CCER
) || \

608 ((
BASE
Ë=
TIM_DMABa£_CNT
) || \

609 ((
BASE
Ë=
TIM_DMABa£_PSC
) || \

610 ((
BASE
Ë=
TIM_DMABa£_ARR
) || \

611 ((
BASE
Ë=
TIM_DMABa£_RCR
) || \

612 ((
BASE
Ë=
TIM_DMABa£_CCR1
) || \

613 ((
BASE
Ë=
TIM_DMABa£_CCR2
) || \

614 ((
BASE
Ë=
TIM_DMABa£_CCR3
) || \

615 ((
BASE
Ë=
TIM_DMABa£_CCR4
) || \

616 ((
BASE
Ë=
TIM_DMABa£_BDTR
) || \

617 ((
BASE
Ë=
TIM_DMABa£_DCR
) || \

618 ((
BASE
Ë=
TIM_DMABa£_OR
))

627 
	#TIM_DMABur°Lígth_1Tøns„r
 ((
uöt16_t
)0x0000)

	)

628 
	#TIM_DMABur°Lígth_2Tøns„rs
 ((
uöt16_t
)0x0100)

	)

629 
	#TIM_DMABur°Lígth_3Tøns„rs
 ((
uöt16_t
)0x0200)

	)

630 
	#TIM_DMABur°Lígth_4Tøns„rs
 ((
uöt16_t
)0x0300)

	)

631 
	#TIM_DMABur°Lígth_5Tøns„rs
 ((
uöt16_t
)0x0400)

	)

632 
	#TIM_DMABur°Lígth_6Tøns„rs
 ((
uöt16_t
)0x0500)

	)

633 
	#TIM_DMABur°Lígth_7Tøns„rs
 ((
uöt16_t
)0x0600)

	)

634 
	#TIM_DMABur°Lígth_8Tøns„rs
 ((
uöt16_t
)0x0700)

	)

635 
	#TIM_DMABur°Lígth_9Tøns„rs
 ((
uöt16_t
)0x0800)

	)

636 
	#TIM_DMABur°Lígth_10Tøns„rs
 ((
uöt16_t
)0x0900)

	)

637 
	#TIM_DMABur°Lígth_11Tøns„rs
 ((
uöt16_t
)0x0A00)

	)

638 
	#TIM_DMABur°Lígth_12Tøns„rs
 ((
uöt16_t
)0x0B00)

	)

639 
	#TIM_DMABur°Lígth_13Tøns„rs
 ((
uöt16_t
)0x0C00)

	)

640 
	#TIM_DMABur°Lígth_14Tøns„rs
 ((
uöt16_t
)0x0D00)

	)

641 
	#TIM_DMABur°Lígth_15Tøns„rs
 ((
uöt16_t
)0x0E00)

	)

642 
	#TIM_DMABur°Lígth_16Tøns„rs
 ((
uöt16_t
)0x0F00)

	)

643 
	#TIM_DMABur°Lígth_17Tøns„rs
 ((
uöt16_t
)0x1000)

	)

644 
	#TIM_DMABur°Lígth_18Tøns„rs
 ((
uöt16_t
)0x1100)

	)

645 
	#IS_TIM_DMA_LENGTH
(
LENGTH
Ë(((LENGTHË=
TIM_DMABur°Lígth_1Tøns„r
Ë|| \

	)

646 ((
LENGTH
Ë=
TIM_DMABur°Lígth_2Tøns„rs
) || \

647 ((
LENGTH
Ë=
TIM_DMABur°Lígth_3Tøns„rs
) || \

648 ((
LENGTH
Ë=
TIM_DMABur°Lígth_4Tøns„rs
) || \

649 ((
LENGTH
Ë=
TIM_DMABur°Lígth_5Tøns„rs
) || \

650 ((
LENGTH
Ë=
TIM_DMABur°Lígth_6Tøns„rs
) || \

651 ((
LENGTH
Ë=
TIM_DMABur°Lígth_7Tøns„rs
) || \

652 ((
LENGTH
Ë=
TIM_DMABur°Lígth_8Tøns„rs
) || \

653 ((
LENGTH
Ë=
TIM_DMABur°Lígth_9Tøns„rs
) || \

654 ((
LENGTH
Ë=
TIM_DMABur°Lígth_10Tøns„rs
) || \

655 ((
LENGTH
Ë=
TIM_DMABur°Lígth_11Tøns„rs
) || \

656 ((
LENGTH
Ë=
TIM_DMABur°Lígth_12Tøns„rs
) || \

657 ((
LENGTH
Ë=
TIM_DMABur°Lígth_13Tøns„rs
) || \

658 ((
LENGTH
Ë=
TIM_DMABur°Lígth_14Tøns„rs
) || \

659 ((
LENGTH
Ë=
TIM_DMABur°Lígth_15Tøns„rs
) || \

660 ((
LENGTH
Ë=
TIM_DMABur°Lígth_16Tøns„rs
) || \

661 ((
LENGTH
Ë=
TIM_DMABur°Lígth_17Tøns„rs
) || \

662 ((
LENGTH
Ë=
TIM_DMABur°Lígth_18Tøns„rs
))

671 
	#TIM_DMA_Upd©e
 ((
uöt16_t
)0x0100)

	)

672 
	#TIM_DMA_CC1
 ((
uöt16_t
)0x0200)

	)

673 
	#TIM_DMA_CC2
 ((
uöt16_t
)0x0400)

	)

674 
	#TIM_DMA_CC3
 ((
uöt16_t
)0x0800)

	)

675 
	#TIM_DMA_CC4
 ((
uöt16_t
)0x1000)

	)

676 
	#TIM_DMA_COM
 ((
uöt16_t
)0x2000)

	)

677 
	#TIM_DMA_Triggî
 ((
uöt16_t
)0x4000)

	)

678 
	#IS_TIM_DMA_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0x80FFË=0x0000Ë&& ((SOURCEË!0x0000))

	)

688 
	#TIM_ExtTRGPSC_OFF
 ((
uöt16_t
)0x0000)

	)

689 
	#TIM_ExtTRGPSC_DIV2
 ((
uöt16_t
)0x1000)

	)

690 
	#TIM_ExtTRGPSC_DIV4
 ((
uöt16_t
)0x2000)

	)

691 
	#TIM_ExtTRGPSC_DIV8
 ((
uöt16_t
)0x3000)

	)

692 
	#IS_TIM_EXT_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ExtTRGPSC_OFF
Ë|| \

	)

693 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV2
) || \

694 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV4
) || \

695 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV8
))

704 
	#TIM_TS_ITR0
 ((
uöt16_t
)0x0000)

	)

705 
	#TIM_TS_ITR1
 ((
uöt16_t
)0x0010)

	)

706 
	#TIM_TS_ITR2
 ((
uöt16_t
)0x0020)

	)

707 
	#TIM_TS_ITR3
 ((
uöt16_t
)0x0030)

	)

708 
	#TIM_TS_TI1F_ED
 ((
uöt16_t
)0x0040)

	)

709 
	#TIM_TS_TI1FP1
 ((
uöt16_t
)0x0050)

	)

710 
	#TIM_TS_TI2FP2
 ((
uöt16_t
)0x0060)

	)

711 
	#TIM_TS_ETRF
 ((
uöt16_t
)0x0070)

	)

712 
	#IS_TIM_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
Ë|| \

	)

713 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

714 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

715 ((
SELECTION
Ë=
TIM_TS_ITR3
) || \

716 ((
SELECTION
Ë=
TIM_TS_TI1F_ED
) || \

717 ((
SELECTION
Ë=
TIM_TS_TI1FP1
) || \

718 ((
SELECTION
Ë=
TIM_TS_TI2FP2
) || \

719 ((
SELECTION
Ë=
TIM_TS_ETRF
))

720 
	#IS_TIM_INTERNAL_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
Ë|| \

	)

721 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

722 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

723 ((
SELECTION
Ë=
TIM_TS_ITR3
))

732 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1
 ((
uöt16_t
)0x0050)

	)

733 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI2
 ((
uöt16_t
)0x0060)

	)

734 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
 ((
uöt16_t
)0x0040)

	)

743 
	#TIM_ExtTRGPﬁ¨ôy_Invîãd
 ((
uöt16_t
)0x8000)

	)

744 
	#TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
 ((
uöt16_t
)0x0000)

	)

745 
	#IS_TIM_EXT_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ExtTRGPﬁ¨ôy_Invîãd
Ë|| \

	)

746 ((
POLARITY
Ë=
TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
))

755 
	#TIM_PSCRñﬂdMode_Upd©e
 ((
uöt16_t
)0x0000)

	)

756 
	#TIM_PSCRñﬂdMode_Immedüã
 ((
uöt16_t
)0x0001)

	)

757 
	#IS_TIM_PRESCALER_RELOAD
(
RELOAD
Ë(((RELOADË=
TIM_PSCRñﬂdMode_Upd©e
Ë|| \

	)

758 ((
RELOAD
Ë=
TIM_PSCRñﬂdMode_Immedüã
))

767 
	#TIM_F‹˚dA˘i⁄_A˘ive
 ((
uöt16_t
)0x0050)

	)

768 
	#TIM_F‹˚dA˘i⁄_InA˘ive
 ((
uöt16_t
)0x0040)

	)

769 
	#IS_TIM_FORCED_ACTION
(
ACTION
Ë(((ACTIONË=
TIM_F‹˚dA˘i⁄_A˘ive
Ë|| \

	)

770 ((
ACTION
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

779 
	#TIM_EncodîMode_TI1
 ((
uöt16_t
)0x0001)

	)

780 
	#TIM_EncodîMode_TI2
 ((
uöt16_t
)0x0002)

	)

781 
	#TIM_EncodîMode_TI12
 ((
uöt16_t
)0x0003)

	)

782 
	#IS_TIM_ENCODER_MODE
(
MODE
Ë(((MODEË=
TIM_EncodîMode_TI1
Ë|| \

	)

783 ((
MODE
Ë=
TIM_EncodîMode_TI2
) || \

784 ((
MODE
Ë=
TIM_EncodîMode_TI12
))

794 
	#TIM_EvítSour˚_Upd©e
 ((
uöt16_t
)0x0001)

	)

795 
	#TIM_EvítSour˚_CC1
 ((
uöt16_t
)0x0002)

	)

796 
	#TIM_EvítSour˚_CC2
 ((
uöt16_t
)0x0004)

	)

797 
	#TIM_EvítSour˚_CC3
 ((
uöt16_t
)0x0008)

	)

798 
	#TIM_EvítSour˚_CC4
 ((
uöt16_t
)0x0010)

	)

799 
	#TIM_EvítSour˚_COM
 ((
uöt16_t
)0x0020)

	)

800 
	#TIM_EvítSour˚_Triggî
 ((
uöt16_t
)0x0040)

	)

801 
	#TIM_EvítSour˚_Bªak
 ((
uöt16_t
)0x0080)

	)

802 
	#IS_TIM_EVENT_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((SOURCEË!0x0000))

	)

812 
	#TIM_Upd©eSour˚_GlobÆ
 ((
uöt16_t
)0x0000Ë

	)

815 
	#TIM_Upd©eSour˚_Reguœr
 ((
uöt16_t
)0x0001Ë

	)

816 
	#IS_TIM_UPDATE_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_Upd©eSour˚_GlobÆ
Ë|| \

	)

817 ((
SOURCE
Ë=
TIM_Upd©eSour˚_Reguœr
))

826 
	#TIM_OCPªlﬂd_E«bÀ
 ((
uöt16_t
)0x0008)

	)

827 
	#TIM_OCPªlﬂd_DißbÀ
 ((
uöt16_t
)0x0000)

	)

828 
	#IS_TIM_OCPRELOAD_STATE
(
STATE
Ë(((STATEË=
TIM_OCPªlﬂd_E«bÀ
Ë|| \

	)

829 ((
STATE
Ë=
TIM_OCPªlﬂd_DißbÀ
))

838 
	#TIM_OCFa°_E«bÀ
 ((
uöt16_t
)0x0004)

	)

839 
	#TIM_OCFa°_DißbÀ
 ((
uöt16_t
)0x0000)

	)

840 
	#IS_TIM_OCFAST_STATE
(
STATE
Ë(((STATEË=
TIM_OCFa°_E«bÀ
Ë|| \

	)

841 ((
STATE
Ë=
TIM_OCFa°_DißbÀ
))

851 
	#TIM_OCCÀ¨_E«bÀ
 ((
uöt16_t
)0x0080)

	)

852 
	#TIM_OCCÀ¨_DißbÀ
 ((
uöt16_t
)0x0000)

	)

853 
	#IS_TIM_OCCLEAR_STATE
(
STATE
Ë(((STATEË=
TIM_OCCÀ¨_E«bÀ
Ë|| \

	)

854 ((
STATE
Ë=
TIM_OCCÀ¨_DißbÀ
))

863 
	#TIM_TRGOSour˚_Re£t
 ((
uöt16_t
)0x0000)

	)

864 
	#TIM_TRGOSour˚_E«bÀ
 ((
uöt16_t
)0x0010)

	)

865 
	#TIM_TRGOSour˚_Upd©e
 ((
uöt16_t
)0x0020)

	)

866 
	#TIM_TRGOSour˚_OC1
 ((
uöt16_t
)0x0030)

	)

867 
	#TIM_TRGOSour˚_OC1Ref
 ((
uöt16_t
)0x0040)

	)

868 
	#TIM_TRGOSour˚_OC2Ref
 ((
uöt16_t
)0x0050)

	)

869 
	#TIM_TRGOSour˚_OC3Ref
 ((
uöt16_t
)0x0060)

	)

870 
	#TIM_TRGOSour˚_OC4Ref
 ((
uöt16_t
)0x0070)

	)

871 
	#IS_TIM_TRGO_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TRGOSour˚_Re£t
Ë|| \

	)

872 ((
SOURCE
Ë=
TIM_TRGOSour˚_E«bÀ
) || \

873 ((
SOURCE
Ë=
TIM_TRGOSour˚_Upd©e
) || \

874 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1
) || \

875 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1Ref
) || \

876 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC2Ref
) || \

877 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC3Ref
) || \

878 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC4Ref
))

887 
	#TIM_SœveMode_Re£t
 ((
uöt16_t
)0x0004)

	)

888 
	#TIM_SœveMode_G©ed
 ((
uöt16_t
)0x0005)

	)

889 
	#TIM_SœveMode_Triggî
 ((
uöt16_t
)0x0006)

	)

890 
	#TIM_SœveMode_Exã∫Æ1
 ((
uöt16_t
)0x0007)

	)

891 
	#IS_TIM_SLAVE_MODE
(
MODE
Ë(((MODEË=
TIM_SœveMode_Re£t
Ë|| \

	)

892 ((
MODE
Ë=
TIM_SœveMode_G©ed
) || \

893 ((
MODE
Ë=
TIM_SœveMode_Triggî
) || \

894 ((
MODE
Ë=
TIM_SœveMode_Exã∫Æ1
))

903 
	#TIM_Ma°îSœveMode_E«bÀ
 ((
uöt16_t
)0x0080)

	)

904 
	#TIM_Ma°îSœveMode_DißbÀ
 ((
uöt16_t
)0x0000)

	)

905 
	#IS_TIM_MSM_STATE
(
STATE
Ë(((STATEË=
TIM_Ma°îSœveMode_E«bÀ
Ë|| \

	)

906 ((
STATE
Ë=
TIM_Ma°îSœveMode_DißbÀ
))

914 
	#TIM2_TIM8_TRGO
 ((
uöt16_t
)0x0000)

	)

915 
	#TIM2_ETH_PTP
 ((
uöt16_t
)0x0400)

	)

916 
	#TIM2_USBFS_SOF
 ((
uöt16_t
)0x0800)

	)

917 
	#TIM2_USBHS_SOF
 ((
uöt16_t
)0x0C00)

	)

919 
	#TIM5_GPIO
 ((
uöt16_t
)0x0000)

	)

920 
	#TIM5_LSI
 ((
uöt16_t
)0x0040)

	)

921 
	#TIM5_LSE
 ((
uöt16_t
)0x0080)

	)

922 
	#TIM5_RTC
 ((
uöt16_t
)0x00C0)

	)

924 
	#TIM11_GPIO
 ((
uöt16_t
)0x0000)

	)

925 
	#TIM11_HSE
 ((
uöt16_t
)0x0002)

	)

927 
	#IS_TIM_REMAP
(
TIM_REMAP
Ë(((TIM_REMAPË=
TIM2_TIM8_TRGO
)||\

	)

928 ((
TIM_REMAP
Ë=
TIM2_ETH_PTP
)||\

929 ((
TIM_REMAP
Ë=
TIM2_USBFS_SOF
)||\

930 ((
TIM_REMAP
Ë=
TIM2_USBHS_SOF
)||\

931 ((
TIM_REMAP
Ë=
TIM5_GPIO
)||\

932 ((
TIM_REMAP
Ë=
TIM5_LSI
)||\

933 ((
TIM_REMAP
Ë=
TIM5_LSE
)||\

934 ((
TIM_REMAP
Ë=
TIM5_RTC
)||\

935 ((
TIM_REMAP
Ë=
TIM11_GPIO
)||\

936 ((
TIM_REMAP
Ë=
TIM11_HSE
))

945 
	#TIM_FLAG_Upd©e
 ((
uöt16_t
)0x0001)

	)

946 
	#TIM_FLAG_CC1
 ((
uöt16_t
)0x0002)

	)

947 
	#TIM_FLAG_CC2
 ((
uöt16_t
)0x0004)

	)

948 
	#TIM_FLAG_CC3
 ((
uöt16_t
)0x0008)

	)

949 
	#TIM_FLAG_CC4
 ((
uöt16_t
)0x0010)

	)

950 
	#TIM_FLAG_COM
 ((
uöt16_t
)0x0020)

	)

951 
	#TIM_FLAG_Triggî
 ((
uöt16_t
)0x0040)

	)

952 
	#TIM_FLAG_Bªak
 ((
uöt16_t
)0x0080)

	)

953 
	#TIM_FLAG_CC1OF
 ((
uöt16_t
)0x0200)

	)

954 
	#TIM_FLAG_CC2OF
 ((
uöt16_t
)0x0400)

	)

955 
	#TIM_FLAG_CC3OF
 ((
uöt16_t
)0x0800)

	)

956 
	#TIM_FLAG_CC4OF
 ((
uöt16_t
)0x1000)

	)

957 
	#IS_TIM_GET_FLAG
(
FLAG
Ë(((FLAGË=
TIM_FLAG_Upd©e
Ë|| \

	)

958 ((
FLAG
Ë=
TIM_FLAG_CC1
) || \

959 ((
FLAG
Ë=
TIM_FLAG_CC2
) || \

960 ((
FLAG
Ë=
TIM_FLAG_CC3
) || \

961 ((
FLAG
Ë=
TIM_FLAG_CC4
) || \

962 ((
FLAG
Ë=
TIM_FLAG_COM
) || \

963 ((
FLAG
Ë=
TIM_FLAG_Triggî
) || \

964 ((
FLAG
Ë=
TIM_FLAG_Bªak
) || \

965 ((
FLAG
Ë=
TIM_FLAG_CC1OF
) || \

966 ((
FLAG
Ë=
TIM_FLAG_CC2OF
) || \

967 ((
FLAG
Ë=
TIM_FLAG_CC3OF
) || \

968 ((
FLAG
Ë=
TIM_FLAG_CC4OF
))

978 
	#IS_TIM_IC_FILTER
(
ICFILTER
Ë((ICFILTERË<0xF)

	)

987 
	#IS_TIM_EXT_FILTER
(
EXTFILTER
Ë((EXTFILTERË<0xF)

	)

996 
	#TIM_DMABur°Lígth_1Byã
 
TIM_DMABur°Lígth_1Tøns„r


	)

997 
	#TIM_DMABur°Lígth_2Byãs
 
TIM_DMABur°Lígth_2Tøns„rs


	)

998 
	#TIM_DMABur°Lígth_3Byãs
 
TIM_DMABur°Lígth_3Tøns„rs


	)

999 
	#TIM_DMABur°Lígth_4Byãs
 
TIM_DMABur°Lígth_4Tøns„rs


	)

1000 
	#TIM_DMABur°Lígth_5Byãs
 
TIM_DMABur°Lígth_5Tøns„rs


	)

1001 
	#TIM_DMABur°Lígth_6Byãs
 
TIM_DMABur°Lígth_6Tøns„rs


	)

1002 
	#TIM_DMABur°Lígth_7Byãs
 
TIM_DMABur°Lígth_7Tøns„rs


	)

1003 
	#TIM_DMABur°Lígth_8Byãs
 
TIM_DMABur°Lígth_8Tøns„rs


	)

1004 
	#TIM_DMABur°Lígth_9Byãs
 
TIM_DMABur°Lígth_9Tøns„rs


	)

1005 
	#TIM_DMABur°Lígth_10Byãs
 
TIM_DMABur°Lígth_10Tøns„rs


	)

1006 
	#TIM_DMABur°Lígth_11Byãs
 
TIM_DMABur°Lígth_11Tøns„rs


	)

1007 
	#TIM_DMABur°Lígth_12Byãs
 
TIM_DMABur°Lígth_12Tøns„rs


	)

1008 
	#TIM_DMABur°Lígth_13Byãs
 
TIM_DMABur°Lígth_13Tøns„rs


	)

1009 
	#TIM_DMABur°Lígth_14Byãs
 
TIM_DMABur°Lígth_14Tøns„rs


	)

1010 
	#TIM_DMABur°Lígth_15Byãs
 
TIM_DMABur°Lígth_15Tøns„rs


	)

1011 
	#TIM_DMABur°Lígth_16Byãs
 
TIM_DMABur°Lígth_16Tøns„rs


	)

1012 
	#TIM_DMABur°Lígth_17Byãs
 
TIM_DMABur°Lígth_17Tøns„rs


	)

1013 
	#TIM_DMABur°Lígth_18Byãs
 
TIM_DMABur°Lígth_18Tøns„rs


	)

1026 
TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
);

1027 
TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1028 
TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1029 
TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
);

1030 
TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
);

1031 
TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Cou¡î
);

1032 
TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Aut‹ñﬂd
);

1033 
uöt32_t
 
TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
);

1034 
uöt16_t
 
TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
);

1035 
TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1036 
TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
);

1037 
TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1038 
TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
);

1039 
TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
);

1040 
TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1043 
TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1044 
TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1045 
TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1046 
TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1047 
TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1048 
TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
);

1049 
TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª1
);

1050 
TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª2
);

1051 
TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª3
);

1052 
TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª4
);

1053 
TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1054 
TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1055 
TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1056 
TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1057 
TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1058 
TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1059 
TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1060 
TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1061 
TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1062 
TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1063 
TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1064 
TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1065 
TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1066 
TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1067 
TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1068 
TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1069 
TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1070 
TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1071 
TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1072 
TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1073 
TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1074 
TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1075 
TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1076 
TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
);

1077 
TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
);

1080 
TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1081 
TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1082 
TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1083 
uöt32_t
 
TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
);

1084 
uöt32_t
 
TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
);

1085 
uöt32_t
 
TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
);

1086 
uöt32_t
 
TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
);

1087 
TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1088 
TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1089 
TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1090 
TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1093 
TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
);

1094 
TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
);

1095 
TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1096 
TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1097 
TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1100 
TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1101 
TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
);

1102 
FœgSètus
 
TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1103 
TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1104 
ITSètus
 
TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1105 
TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1106 
TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
);

1107 
TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1108 
TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1111 
TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
);

1112 
TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1113 
TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

1114 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
);

1115 
TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1116 
uöt16_t
 
ExtTRGFûãr
);

1117 
TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

1118 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
);

1121 
TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1122 
TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
);

1123 
TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
);

1124 
TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
);

1125 
TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1126 
uöt16_t
 
ExtTRGFûãr
);

1129 
TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

1130 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
);

1131 
TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1134 
TIM_Rem≠C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Rem≠
);

1136 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_usart.h

30 #i‚de‡
__STM32F4xx_USART_H


31 
	#__STM32F4xx_USART_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
USART_BaudR©e
;

62 
uöt16_t
 
USART_W‹dLígth
;

65 
uöt16_t
 
USART_St›Bôs
;

68 
uöt16_t
 
USART_P¨ôy
;

75 
uöt16_t
 
USART_Mode
;

78 
uöt16_t
 
USART_H¨dw¨eFlowC⁄åﬁ
;

81 } 
	tUSART_InôTy≥Def
;

90 
uöt16_t
 
USART_Clock
;

93 
uöt16_t
 
USART_CPOL
;

96 
uöt16_t
 
USART_CPHA
;

99 
uöt16_t
 
USART_La°Bô
;

102 } 
	tUSART_ClockInôTy≥Def
;

110 
	#IS_USART_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
Ë|| \

	)

111 ((
PERIPH
Ë=
USART2
) || \

112 ((
PERIPH
Ë=
USART3
) || \

113 ((
PERIPH
Ë=
UART4
) || \

114 ((
PERIPH
Ë=
UART5
) || \

115 ((
PERIPH
Ë=
USART6
) || \

116 ((
PERIPH
Ë=
UART7
) || \

117 ((
PERIPH
Ë=
UART8
))

119 
	#IS_USART_1236_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
Ë|| \

	)

120 ((
PERIPH
Ë=
USART2
) || \

121 ((
PERIPH
Ë=
USART3
) || \

122 ((
PERIPH
Ë=
USART6
))

128 
	#USART_W‹dLígth_8b
 ((
uöt16_t
)0x0000)

	)

129 
	#USART_W‹dLígth_9b
 ((
uöt16_t
)0x1000)

	)

131 
	#IS_USART_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
USART_W‹dLígth_8b
Ë|| \

	)

132 ((
LENGTH
Ë=
USART_W‹dLígth_9b
))

141 
	#USART_St›Bôs_1
 ((
uöt16_t
)0x0000)

	)

142 
	#USART_St›Bôs_0_5
 ((
uöt16_t
)0x1000)

	)

143 
	#USART_St›Bôs_2
 ((
uöt16_t
)0x2000)

	)

144 
	#USART_St›Bôs_1_5
 ((
uöt16_t
)0x3000)

	)

145 
	#IS_USART_STOPBITS
(
STOPBITS
Ë(((STOPBITSË=
USART_St›Bôs_1
Ë|| \

	)

146 ((
STOPBITS
Ë=
USART_St›Bôs_0_5
) || \

147 ((
STOPBITS
Ë=
USART_St›Bôs_2
) || \

148 ((
STOPBITS
Ë=
USART_St›Bôs_1_5
))

157 
	#USART_P¨ôy_No
 ((
uöt16_t
)0x0000)

	)

158 
	#USART_P¨ôy_Eví
 ((
uöt16_t
)0x0400)

	)

159 
	#USART_P¨ôy_Odd
 ((
uöt16_t
)0x0600)

	)

160 
	#IS_USART_PARITY
(
PARITY
Ë(((PARITYË=
USART_P¨ôy_No
Ë|| \

	)

161 ((
PARITY
Ë=
USART_P¨ôy_Eví
) || \

162 ((
PARITY
Ë=
USART_P¨ôy_Odd
))

171 
	#USART_Mode_Rx
 ((
uöt16_t
)0x0004)

	)

172 
	#USART_Mode_Tx
 ((
uöt16_t
)0x0008)

	)

173 
	#IS_USART_MODE
(
MODE
Ë((((MODEË& (
uöt16_t
)0xFFF3Ë=0x00Ë&& ((MODEË!(uöt16_t)0x00))

	)

181 
	#USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
 ((
uöt16_t
)0x0000)

	)

182 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS
 ((
uöt16_t
)0x0100)

	)

183 
	#USART_H¨dw¨eFlowC⁄åﬁ_CTS
 ((
uöt16_t
)0x0200)

	)

184 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
 ((
uöt16_t
)0x0300)

	)

185 
	#IS_USART_HARDWARE_FLOW_CONTROL
(
CONTROL
)\

	)

186 (((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
) || \

187 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS
) || \

188 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_CTS
) || \

189 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
))

197 
	#USART_Clock_DißbÀ
 ((
uöt16_t
)0x0000)

	)

198 
	#USART_Clock_E«bÀ
 ((
uöt16_t
)0x0800)

	)

199 
	#IS_USART_CLOCK
(
CLOCK
Ë(((CLOCKË=
USART_Clock_DißbÀ
Ë|| \

	)

200 ((
CLOCK
Ë=
USART_Clock_E«bÀ
))

209 
	#USART_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

210 
	#USART_CPOL_High
 ((
uöt16_t
)0x0400)

	)

211 
	#IS_USART_CPOL
(
CPOL
Ë(((CPOLË=
USART_CPOL_Low
Ë|| ((CPOLË=
USART_CPOL_High
))

	)

221 
	#USART_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

222 
	#USART_CPHA_2Edge
 ((
uöt16_t
)0x0200)

	)

223 
	#IS_USART_CPHA
(
CPHA
Ë(((CPHAË=
USART_CPHA_1Edge
Ë|| ((CPHAË=
USART_CPHA_2Edge
))

	)

233 
	#USART_La°Bô_DißbÀ
 ((
uöt16_t
)0x0000)

	)

234 
	#USART_La°Bô_E«bÀ
 ((
uöt16_t
)0x0100)

	)

235 
	#IS_USART_LASTBIT
(
LASTBIT
Ë(((LASTBITË=
USART_La°Bô_DißbÀ
Ë|| \

	)

236 ((
LASTBIT
Ë=
USART_La°Bô_E«bÀ
))

245 
	#USART_IT_PE
 ((
uöt16_t
)0x0028)

	)

246 
	#USART_IT_TXE
 ((
uöt16_t
)0x0727)

	)

247 
	#USART_IT_TC
 ((
uöt16_t
)0x0626)

	)

248 
	#USART_IT_RXNE
 ((
uöt16_t
)0x0525)

	)

249 
	#USART_IT_ORE_RX
 ((
uöt16_t
)0x0325Ë

	)

250 
	#USART_IT_IDLE
 ((
uöt16_t
)0x0424)

	)

251 
	#USART_IT_LBD
 ((
uöt16_t
)0x0846)

	)

252 
	#USART_IT_CTS
 ((
uöt16_t
)0x096A)

	)

253 
	#USART_IT_ERR
 ((
uöt16_t
)0x0060)

	)

254 
	#USART_IT_ORE_ER
 ((
uöt16_t
)0x0360Ë

	)

255 
	#USART_IT_NE
 ((
uöt16_t
)0x0260)

	)

256 
	#USART_IT_FE
 ((
uöt16_t
)0x0160)

	)

261 
	#USART_IT_ORE
 
USART_IT_ORE_ER


	)

266 
	#IS_USART_CONFIG_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
Ë|| \

	)

267 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

268 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

269 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ERR
))

270 
	#IS_USART_GET_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
Ë|| \

	)

271 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

272 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

273 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ORE
) || \

274 ((
IT
Ë=
USART_IT_ORE_RX
Ë|| ((ITË=
USART_IT_ORE_ER
) || \

275 ((
IT
Ë=
USART_IT_NE
Ë|| ((ITË=
USART_IT_FE
))

276 
	#IS_USART_CLEAR_IT
(
IT
Ë(((ITË=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
Ë|| \

	)

277 ((
IT
Ë=
USART_IT_LBD
Ë|| ((ITË=
USART_IT_CTS
))

286 
	#USART_DMAReq_Tx
 ((
uöt16_t
)0x0080)

	)

287 
	#USART_DMAReq_Rx
 ((
uöt16_t
)0x0040)

	)

288 
	#IS_USART_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFF3FË=0x00Ë&& ((DMAREQË!(uöt16_t)0x00))

	)

298 
	#USART_WakeUp_IdÀLöe
 ((
uöt16_t
)0x0000)

	)

299 
	#USART_WakeUp_AddªssM¨k
 ((
uöt16_t
)0x0800)

	)

300 
	#IS_USART_WAKEUP
(
WAKEUP
Ë(((WAKEUPË=
USART_WakeUp_IdÀLöe
Ë|| \

	)

301 ((
WAKEUP
Ë=
USART_WakeUp_AddªssM¨k
))

310 
	#USART_LINBªakDëe˘Lígth_10b
 ((
uöt16_t
)0x0000)

	)

311 
	#USART_LINBªakDëe˘Lígth_11b
 ((
uöt16_t
)0x0020)

	)

312 
	#IS_USART_LIN_BREAK_DETECT_LENGTH
(
LENGTH
Ë\

	)

313 (((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_10b
) || \

314 ((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_11b
))

323 
	#USART_IrDAMode_LowPowî
 ((
uöt16_t
)0x0004)

	)

324 
	#USART_IrDAMode_N‹mÆ
 ((
uöt16_t
)0x0000)

	)

325 
	#IS_USART_IRDA_MODE
(
MODE
Ë(((MODEË=
USART_IrDAMode_LowPowî
Ë|| \

	)

326 ((
MODE
Ë=
USART_IrDAMode_N‹mÆ
))

335 
	#USART_FLAG_CTS
 ((
uöt16_t
)0x0200)

	)

336 
	#USART_FLAG_LBD
 ((
uöt16_t
)0x0100)

	)

337 
	#USART_FLAG_TXE
 ((
uöt16_t
)0x0080)

	)

338 
	#USART_FLAG_TC
 ((
uöt16_t
)0x0040)

	)

339 
	#USART_FLAG_RXNE
 ((
uöt16_t
)0x0020)

	)

340 
	#USART_FLAG_IDLE
 ((
uöt16_t
)0x0010)

	)

341 
	#USART_FLAG_ORE
 ((
uöt16_t
)0x0008)

	)

342 
	#USART_FLAG_NE
 ((
uöt16_t
)0x0004)

	)

343 
	#USART_FLAG_FE
 ((
uöt16_t
)0x0002)

	)

344 
	#USART_FLAG_PE
 ((
uöt16_t
)0x0001)

	)

345 
	#IS_USART_FLAG
(
FLAG
Ë(((FLAGË=
USART_FLAG_PE
Ë|| ((FLAGË=
USART_FLAG_TXE
Ë|| \

	)

346 ((
FLAG
Ë=
USART_FLAG_TC
Ë|| ((FLAGË=
USART_FLAG_RXNE
) || \

347 ((
FLAG
Ë=
USART_FLAG_IDLE
Ë|| ((FLAGË=
USART_FLAG_LBD
) || \

348 ((
FLAG
Ë=
USART_FLAG_CTS
Ë|| ((FLAGË=
USART_FLAG_ORE
) || \

349 ((
FLAG
Ë=
USART_FLAG_NE
Ë|| ((FLAGË=
USART_FLAG_FE
))

351 
	#IS_USART_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFC9FË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

353 
	#IS_USART_BAUDRATE
(
BAUDRATE
Ë(((BAUDRATEË> 0Ë&& ((BAUDRATEË< 7500001))

	)

354 
	#IS_USART_ADDRESS
(
ADDRESS
Ë((ADDRESSË<0xF)

	)

355 
	#IS_USART_DATA
(
DATA
Ë((DATAË<0x1FF)

	)

369 
USART_DeInô
(
USART_Ty≥Def
* 
USARTx
);

372 
USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
);

373 
USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
);

374 
USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

375 
USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

376 
USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

377 
USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
);

378 
USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

379 
USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

382 
USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
);

383 
uöt16_t
 
USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
);

386 
USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
);

387 
USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
);

388 
USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

391 
USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
);

392 
USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

393 
USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
);

396 
USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

399 
USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

400 
USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

401 
USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
);

404 
USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
);

405 
USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

408 
USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

411 
USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

412 
FœgSètus
 
USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

413 
USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

414 
ITSètus
 
USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

415 
USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

417 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_wwdg.h

30 #i‚de‡
__STM32F4xx_WWDG_H


31 
	#__STM32F4xx_WWDG_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

59 
	#WWDG_PªsˇÀr_1
 ((
uöt32_t
)0x00000000)

	)

60 
	#WWDG_PªsˇÀr_2
 ((
uöt32_t
)0x00000080)

	)

61 
	#WWDG_PªsˇÀr_4
 ((
uöt32_t
)0x00000100)

	)

62 
	#WWDG_PªsˇÀr_8
 ((
uöt32_t
)0x00000180)

	)

63 
	#IS_WWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
WWDG_PªsˇÀr_1
Ë|| \

	)

64 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_2
) || \

65 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_4
) || \

66 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_8
))

67 
	#IS_WWDG_WINDOW_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

68 
	#IS_WWDG_COUNTER
(
COUNTER
Ë(((COUNTERË>0x40Ë&& ((COUNTERË<0x7F))

	)

82 
WWDG_DeInô
();

85 
WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
);

86 
WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
);

87 
WWDG_E«bÀIT
();

88 
WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
);

91 
WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
);

94 
FœgSètus
 
WWDG_GëFœgSètus
();

95 
WWDG_CÀ¨Fœg
();

97 #ifde‡
__˝lu•lus


	@STM32F4xx_StdPeriph_Driver/src/misc.c

76 
	~"misc.h
"

89 
	#AIRCR_VECTKEY_MASK
 ((
uöt32_t
)0x05FA0000)

	)

118 
	$NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
)

121 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
NVIC_Pri‹ôyGroup
));

124 
SCB
->
AIRCR
 = 
AIRCR_VECTKEY_MASK
 | 
NVIC_Pri‹ôyGroup
;

125 
	}
}

136 
	$NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
)

138 
uöt8_t
 
tmµri‹ôy
 = 0x00, 
tmµª
 = 0x00, 
tmpsub
 = 0x0F;

141 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
));

142 
	`as£π_∑øm
(
	`IS_NVIC_PREEMPTION_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
));

143 
	`as£π_∑øm
(
	`IS_NVIC_SUB_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
));

145 i‡(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
 !
DISABLE
)

148 
tmµri‹ôy
 = (0x700 - ((
SCB
->
AIRCR
Ë& (
uöt32_t
)0x700))>> 0x08;

149 
tmµª
 = (0x4 - 
tmµri‹ôy
);

150 
tmpsub
 =Åmpsub >> 
tmµri‹ôy
;

152 
tmµri‹ôy
 = 
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 << 
tmµª
;

153 
tmµri‹ôy
 |(
uöt8_t
)(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
 & 
tmpsub
);

155 
tmµri‹ôy
 =Åmppriority << 0x04;

157 
NVIC
->
IP
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
] = 
tmµri‹ôy
;

160 
NVIC
->
ISER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

161 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

166 
NVIC
->
ICER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

167 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

169 
	}
}

180 
	$NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
)

183 
	`as£π_∑øm
(
	`IS_NVIC_VECTTAB
(
NVIC_Ve˘Tab
));

184 
	`as£π_∑øm
(
	`IS_NVIC_OFFSET
(
Off£t
));

186 
SCB
->
VTOR
 = 
NVIC_Ve˘Tab
 | (
Off£t
 & (
uöt32_t
)0x1FFFFF80);

187 
	}
}

199 
	$NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

202 
	`as£π_∑øm
(
	`IS_NVIC_LP
(
LowPowîMode
));

203 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

205 i‡(
NewSèã
 !
DISABLE
)

207 
SCB
->
SCR
 |
LowPowîMode
;

211 
SCB
->
SCR
 &(
uöt32_t
)(~(uöt32_t)
LowPowîMode
);

213 
	}
}

223 
	$SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
)

226 
	`as£π_∑øm
(
	`IS_SYSTICK_CLK_SOURCE
(
SysTick_CLKSour˚
));

227 i‡(
SysTick_CLKSour˚
 =
SysTick_CLKSour˚_HCLK
)

229 
SysTick
->
CTRL
 |
SysTick_CLKSour˚_HCLK
;

233 
SysTick
->
CTRL
 &
SysTick_CLKSour˚_HCLK_Div8
;

235 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c

106 
	~"°m32f4xx_adc.h
"

107 
	~"°m32f4xx_rcc.h
"

122 
	#CR1_DISCNUM_RESET
 ((
uöt32_t
)0xFFFF1FFF)

	)

125 
	#CR1_AWDCH_RESET
 ((
uöt32_t
)0xFFFFFFE0)

	)

128 
	#CR1_AWDMode_RESET
 ((
uöt32_t
)0xFF3FFDFF)

	)

131 
	#CR1_CLEAR_MASK
 ((
uöt32_t
)0xFCFFFEFF)

	)

134 
	#CR2_EXTEN_RESET
 ((
uöt32_t
)0xCFFFFFFF)

	)

137 
	#CR2_JEXTEN_RESET
 ((
uöt32_t
)0xFFCFFFFF)

	)

140 
	#CR2_JEXTSEL_RESET
 ((
uöt32_t
)0xFFF0FFFF)

	)

143 
	#CR2_CLEAR_MASK
 ((
uöt32_t
)0xC0FFF7FD)

	)

146 
	#SQR3_SQ_SET
 ((
uöt32_t
)0x0000001F)

	)

147 
	#SQR2_SQ_SET
 ((
uöt32_t
)0x0000001F)

	)

148 
	#SQR1_SQ_SET
 ((
uöt32_t
)0x0000001F)

	)

151 
	#SQR1_L_RESET
 ((
uöt32_t
)0xFF0FFFFF)

	)

154 
	#JSQR_JSQ_SET
 ((
uöt32_t
)0x0000001F)

	)

157 
	#JSQR_JL_SET
 ((
uöt32_t
)0x00300000)

	)

158 
	#JSQR_JL_RESET
 ((
uöt32_t
)0xFFCFFFFF)

	)

161 
	#SMPR1_SMP_SET
 ((
uöt32_t
)0x00000007)

	)

162 
	#SMPR2_SMP_SET
 ((
uöt32_t
)0x00000007)

	)

165 
	#JDR_OFFSET
 ((
uöt8_t
)0x28)

	)

168 
	#CDR_ADDRESS
 ((
uöt32_t
)0x40012308)

	)

171 
	#CR_CLEAR_MASK
 ((
uöt32_t
)0xFFFC30E0)

	)

213 
	$ADC_DeInô
()

216 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC
, 
ENABLE
);

219 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC
, 
DISABLE
);

220 
	}
}

235 
	$ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

237 
uöt32_t
 
tm¥eg1
 = 0;

238 
uöt8_t
 
tm¥eg2
 = 0;

240 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

241 
	`as£π_∑øm
(
	`IS_ADC_RESOLUTION
(
ADC_InôSåu˘
->
ADC_Resﬁuti⁄
));

242 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
));

243 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
));

244 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG_EDGE
(
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄vEdge
));

245 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG
(
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
));

246 
	`as£π_∑øm
(
	`IS_ADC_DATA_ALIGN
(
ADC_InôSåu˘
->
ADC_D©aAlign
));

247 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_LENGTH
(
ADC_InôSåu˘
->
ADC_NbrOfC⁄vîsi⁄
));

251 
tm¥eg1
 = 
ADCx
->
CR1
;

254 
tm¥eg1
 &
CR1_CLEAR_MASK
;

259 
tm¥eg1
 |(
uöt32_t
)(((uöt32_t)
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
 << 8) | \

260 
ADC_InôSåu˘
->
ADC_Resﬁuti⁄
);

262 
ADCx
->
CR1
 = 
tm¥eg1
;

265 
tm¥eg1
 = 
ADCx
->
CR2
;

268 
tm¥eg1
 &
CR2_CLEAR_MASK
;

276 
tm¥eg1
 |(
uöt32_t
)(
ADC_InôSåu˘
->
ADC_D©aAlign
 | \

277 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
 |

278 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄vEdge
 | \

279 ((
uöt32_t
)
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 << 1));

282 
ADCx
->
CR2
 = 
tm¥eg1
;

285 
tm¥eg1
 = 
ADCx
->
SQR1
;

288 
tm¥eg1
 &
SQR1_L_RESET
;

292 
tm¥eg2
 |(
uöt8_t
)(
ADC_InôSåu˘
->
ADC_NbrOfC⁄vîsi⁄
 - (uint8_t)1);

293 
tm¥eg1
 |((
uöt32_t
)
tm¥eg2
 << 20);

296 
ADCx
->
SQR1
 = 
tm¥eg1
;

297 
	}
}

310 
	$ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

313 
ADC_InôSåu˘
->
ADC_Resﬁuti⁄
 = 
ADC_Resﬁuti⁄_12b
;

316 
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
 = 
DISABLE
;

319 
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 = 
DISABLE
;

322 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄vEdge
 = 
ADC_Exã∫ÆTrigC⁄vEdge_N⁄e
;

325 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
 = 
ADC_Exã∫ÆTrigC⁄v_T1_CC1
;

328 
ADC_InôSåu˘
->
ADC_D©aAlign
 = 
ADC_D©aAlign_Right
;

331 
ADC_InôSåu˘
->
ADC_NbrOfC⁄vîsi⁄
 = 1;

332 
	}
}

341 
	$ADC_Comm⁄Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
)

343 
uöt32_t
 
tm¥eg1
 = 0;

345 
	`as£π_∑øm
(
	`IS_ADC_MODE
(
ADC_Comm⁄InôSåu˘
->
ADC_Mode
));

346 
	`as£π_∑øm
(
	`IS_ADC_PRESCALER
(
ADC_Comm⁄InôSåu˘
->
ADC_PªsˇÀr
));

347 
	`as£π_∑øm
(
	`IS_ADC_DMA_ACCESS_MODE
(
ADC_Comm⁄InôSåu˘
->
ADC_DMAAc˚ssMode
));

348 
	`as£π_∑øm
(
	`IS_ADC_SAMPLING_DELAY
(
ADC_Comm⁄InôSåu˘
->
ADC_TwoSam∂ögDñay
));

351 
tm¥eg1
 = 
ADC
->
CCR
;

354 
tm¥eg1
 &
CR_CLEAR_MASK
;

362 
tm¥eg1
 |(
uöt32_t
)(
ADC_Comm⁄InôSåu˘
->
ADC_Mode
 |

363 
ADC_Comm⁄InôSåu˘
->
ADC_PªsˇÀr
 |

364 
ADC_Comm⁄InôSåu˘
->
ADC_DMAAc˚ssMode
 |

365 
ADC_Comm⁄InôSåu˘
->
ADC_TwoSam∂ögDñay
);

368 
ADC
->
CCR
 = 
tm¥eg1
;

369 
	}
}

377 
	$ADC_Comm⁄Såu˘Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
)

380 
ADC_Comm⁄InôSåu˘
->
ADC_Mode
 = 
ADC_Mode_Indïídít
;

383 
ADC_Comm⁄InôSåu˘
->
ADC_PªsˇÀr
 = 
ADC_PªsˇÀr_Div2
;

386 
ADC_Comm⁄InôSåu˘
->
ADC_DMAAc˚ssMode
 = 
ADC_DMAAc˚ssMode_DißbÀd
;

389 
ADC_Comm⁄InôSåu˘
->
ADC_TwoSam∂ögDñay
 = 
ADC_TwoSam∂ögDñay_5Cy˛es
;

390 
	}
}

399 
	$ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

402 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

403 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

404 i‡(
NewSèã
 !
DISABLE
)

407 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_ADON
;

412 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_ADON
);

414 
	}
}

455 
	$ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
)

457 
uöt32_t
 
tm¥eg
 = 0;

459 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

460 
	`as£π_∑øm
(
	`IS_ADC_ANALOG_WATCHDOG
(
ADC_A«logW©chdog
));

463 
tm¥eg
 = 
ADCx
->
CR1
;

466 
tm¥eg
 &
CR1_AWDMode_RESET
;

469 
tm¥eg
 |
ADC_A«logW©chdog
;

472 
ADCx
->
CR1
 = 
tm¥eg
;

473 
	}
}

484 
	$ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
,

485 
uöt16_t
 
LowThªshﬁd
)

488 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

489 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
HighThªshﬁd
));

490 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
LowThªshﬁd
));

493 
ADCx
->
HTR
 = 
HighThªshﬁd
;

496 
ADCx
->
LTR
 = 
LowThªshﬁd
;

497 
	}
}

525 
	$ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
)

527 
uöt32_t
 
tm¥eg
 = 0;

529 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

530 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

533 
tm¥eg
 = 
ADCx
->
CR1
;

536 
tm¥eg
 &
CR1_AWDCH_RESET
;

539 
tm¥eg
 |
ADC_Ch™√l
;

542 
ADCx
->
CR1
 = 
tm¥eg
;

543 
	}
}

589 
	$ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

592 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

593 i‡(
NewSèã
 !
DISABLE
)

596 
ADC
->
CCR
 |(
uöt32_t
)
ADC_CCR_TSVREFE
;

601 
ADC
->
CCR
 &(
uöt32_t
)(~
ADC_CCR_TSVREFE
);

603 
	}
}

615 
	$ADC_VBATCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

618 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

619 i‡(
NewSèã
 !
DISABLE
)

622 
ADC
->
CCR
 |(
uöt32_t
)
ADC_CCR_VBATE
;

627 
ADC
->
CCR
 &(
uöt32_t
)(~
ADC_CCR_VBATE
);

629 
	}
}

715 
	$ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

717 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

719 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

720 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

721 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_RANK
(
R™k
));

722 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

725 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

728 
tm¥eg1
 = 
ADCx
->
SMPR1
;

731 
tm¥eg2
 = 
SMPR1_SMP_SET
 << (3 * (
ADC_Ch™√l
 - 10));

734 
tm¥eg1
 &~
tm¥eg2
;

737 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * (
ADC_Ch™√l
 - 10));

740 
tm¥eg1
 |
tm¥eg2
;

743 
ADCx
->
SMPR1
 = 
tm¥eg1
;

748 
tm¥eg1
 = 
ADCx
->
SMPR2
;

751 
tm¥eg2
 = 
SMPR2_SMP_SET
 << (3 * 
ADC_Ch™√l
);

754 
tm¥eg1
 &~
tm¥eg2
;

757 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

760 
tm¥eg1
 |
tm¥eg2
;

763 
ADCx
->
SMPR2
 = 
tm¥eg1
;

766 i‡(
R™k
 < 7)

769 
tm¥eg1
 = 
ADCx
->
SQR3
;

772 
tm¥eg2
 = 
SQR3_SQ_SET
 << (5 * (
R™k
 - 1));

775 
tm¥eg1
 &~
tm¥eg2
;

778 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 1));

781 
tm¥eg1
 |
tm¥eg2
;

784 
ADCx
->
SQR3
 = 
tm¥eg1
;

787 i‡(
R™k
 < 13)

790 
tm¥eg1
 = 
ADCx
->
SQR2
;

793 
tm¥eg2
 = 
SQR2_SQ_SET
 << (5 * (
R™k
 - 7));

796 
tm¥eg1
 &~
tm¥eg2
;

799 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 7));

802 
tm¥eg1
 |
tm¥eg2
;

805 
ADCx
->
SQR2
 = 
tm¥eg1
;

811 
tm¥eg1
 = 
ADCx
->
SQR1
;

814 
tm¥eg2
 = 
SQR1_SQ_SET
 << (5 * (
R™k
 - 13));

817 
tm¥eg1
 &~
tm¥eg2
;

820 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 13));

823 
tm¥eg1
 |
tm¥eg2
;

826 
ADCx
->
SQR1
 = 
tm¥eg1
;

828 
	}
}

835 
	$ADC_So·w¨eSèπC⁄v
(
ADC_Ty≥Def
* 
ADCx
)

838 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

841 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_SWSTART
;

842 
	}
}

849 
FœgSètus
 
	$ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
)

851 
FœgSètus
 
bô°©us
 = 
RESET
;

853 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

856 i‡((
ADCx
->
CR2
 & 
ADC_CR2_SWSTART
Ë!(
uöt32_t
)
RESET
)

859 
bô°©us
 = 
SET
;

864 
bô°©us
 = 
RESET
;

868  
bô°©us
;

869 
	}
}

879 
	$ADC_EOCOnEachReguœrCh™√lCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

882 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

883 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

885 i‡(
NewSèã
 !
DISABLE
)

888 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_EOCS
;

893 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_EOCS
);

895 
	}
}

904 
	$ADC_C⁄töuousModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

907 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

908 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

910 i‡(
NewSèã
 !
DISABLE
)

913 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_CONT
;

918 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_CONT
);

920 
	}
}

930 
	$ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
)

932 
uöt32_t
 
tm¥eg1
 = 0;

933 
uöt32_t
 
tm¥eg2
 = 0;

936 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

937 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_DISC_NUMBER
(
Numbî
));

940 
tm¥eg1
 = 
ADCx
->
CR1
;

943 
tm¥eg1
 &
CR1_DISCNUM_RESET
;

946 
tm¥eg2
 = 
Numbî
 - 1;

947 
tm¥eg1
 |
tm¥eg2
 << 13;

950 
ADCx
->
CR1
 = 
tm¥eg1
;

951 
	}
}

962 
	$ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

965 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

966 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

968 i‡(
NewSèã
 !
DISABLE
)

971 
ADCx
->
CR1
 |(
uöt32_t
)
ADC_CR1_DISCEN
;

976 
ADCx
->
CR1
 &(
uöt32_t
)(~
ADC_CR1_DISCEN
);

978 
	}
}

985 
uöt16_t
 
	$ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
)

988 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

991  (
uöt16_t
Ë
ADCx
->
DR
;

992 
	}
}

1006 
uöt32_t
 
	$ADC_GëMu…iModeC⁄vîsi⁄VÆue
()

1009  (*(
__IO
 
uöt32_t
 *Ë
CDR_ADDRESS
);

1010 
	}
}

1052 
	$ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1055 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1056 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1057 i‡(
NewSèã
 !
DISABLE
)

1060 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_DMA
;

1065 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_DMA
);

1067 
	}
}

1076 
	$ADC_DMAReque°A·îLa°Tøns„rCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1079 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1080 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1081 i‡(
NewSèã
 !
DISABLE
)

1084 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_DDS
;

1089 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_DDS
);

1091 
	}
}

1103 
	$ADC_Mu…iModeDMAReque°A·îLa°Tøns„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1106 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1107 i‡(
NewSèã
 !
DISABLE
)

1110 
ADC
->
CCR
 |(
uöt32_t
)
ADC_CCR_DDS
;

1115 
ADC
->
CCR
 &(
uöt32_t
)(~
ADC_CCR_DDS
);

1117 
	}
}

1190 
	$ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

1192 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0, 
tm¥eg3
 = 0;

1194 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1195 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

1196 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_RANK
(
R™k
));

1197 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

1199 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

1202 
tm¥eg1
 = 
ADCx
->
SMPR1
;

1204 
tm¥eg2
 = 
SMPR1_SMP_SET
 << (3*(
ADC_Ch™√l
 - 10));

1206 
tm¥eg1
 &~
tm¥eg2
;

1208 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3*(
ADC_Ch™√l
 - 10));

1210 
tm¥eg1
 |
tm¥eg2
;

1212 
ADCx
->
SMPR1
 = 
tm¥eg1
;

1217 
tm¥eg1
 = 
ADCx
->
SMPR2
;

1219 
tm¥eg2
 = 
SMPR2_SMP_SET
 << (3 * 
ADC_Ch™√l
);

1221 
tm¥eg1
 &~
tm¥eg2
;

1223 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

1225 
tm¥eg1
 |
tm¥eg2
;

1227 
ADCx
->
SMPR2
 = 
tm¥eg1
;

1231 
tm¥eg1
 = 
ADCx
->
JSQR
;

1233 
tm¥eg3
 = (
tm¥eg1
 & 
JSQR_JL_SET
)>> 20;

1235 
tm¥eg2
 = 
JSQR_JSQ_SET
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

1237 
tm¥eg1
 &~
tm¥eg2
;

1239 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

1241 
tm¥eg1
 |
tm¥eg2
;

1243 
ADCx
->
JSQR
 = 
tm¥eg1
;

1244 
	}
}

1253 
	$ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
)

1255 
uöt32_t
 
tm¥eg1
 = 0;

1256 
uöt32_t
 
tm¥eg2
 = 0;

1258 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1259 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_LENGTH
(
Lígth
));

1262 
tm¥eg1
 = 
ADCx
->
JSQR
;

1265 
tm¥eg1
 &
JSQR_JL_RESET
;

1268 
tm¥eg2
 = 
Lígth
 - 1;

1269 
tm¥eg1
 |
tm¥eg2
 << 20;

1272 
ADCx
->
JSQR
 = 
tm¥eg1
;

1273 
	}
}

1288 
	$ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
)

1290 
__IO
 
uöt32_t
 
tmp
 = 0;

1292 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1293 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1294 
	`as£π_∑øm
(
	`IS_ADC_OFFSET
(
Off£t
));

1296 
tmp
 = (
uöt32_t
)
ADCx
;

1297 
tmp
 +
ADC_Inje˘edCh™√l
;

1300 *(
__IO
 
uöt32_t
 *Ë
tmp
 = (uöt32_t)
Off£t
;

1301 
	}
}

1326 
	$ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
)

1328 
uöt32_t
 
tm¥eg
 = 0;

1330 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1331 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG
(
ADC_Exã∫ÆTrigInjecC⁄v
));

1334 
tm¥eg
 = 
ADCx
->
CR2
;

1337 
tm¥eg
 &
CR2_JEXTSEL_RESET
;

1340 
tm¥eg
 |
ADC_Exã∫ÆTrigInjecC⁄v
;

1343 
ADCx
->
CR2
 = 
tm¥eg
;

1344 
	}
}

1360 
	$ADC_Exã∫ÆTrigInje˘edC⁄vEdgeC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄vEdge
)

1362 
uöt32_t
 
tm¥eg
 = 0;

1364 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1365 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG_EDGE
(
ADC_Exã∫ÆTrigInjecC⁄vEdge
));

1367 
tm¥eg
 = 
ADCx
->
CR2
;

1369 
tm¥eg
 &
CR2_JEXTEN_RESET
;

1371 
tm¥eg
 |
ADC_Exã∫ÆTrigInjecC⁄vEdge
;

1373 
ADCx
->
CR2
 = 
tm¥eg
;

1374 
	}
}

1381 
	$ADC_So·w¨eSèπInje˘edC⁄v
(
ADC_Ty≥Def
* 
ADCx
)

1384 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1386 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_JSWSTART
;

1387 
	}
}

1394 
FœgSètus
 
	$ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
)

1396 
FœgSètus
 
bô°©us
 = 
RESET
;

1398 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1401 i‡((
ADCx
->
CR2
 & 
ADC_CR2_JSWSTART
Ë!(
uöt32_t
)
RESET
)

1404 
bô°©us
 = 
SET
;

1409 
bô°©us
 = 
RESET
;

1412  
bô°©us
;

1413 
	}
}

1423 
	$ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1426 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1427 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1428 i‡(
NewSèã
 !
DISABLE
)

1431 
ADCx
->
CR1
 |(
uöt32_t
)
ADC_CR1_JAUTO
;

1436 
ADCx
->
CR1
 &(
uöt32_t
)(~
ADC_CR1_JAUTO
);

1438 
	}
}

1449 
	$ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1452 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1453 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1454 i‡(
NewSèã
 !
DISABLE
)

1457 
ADCx
->
CR1
 |(
uöt32_t
)
ADC_CR1_JDISCEN
;

1462 
ADCx
->
CR1
 &(
uöt32_t
)(~
ADC_CR1_JDISCEN
);

1464 
	}
}

1477 
uöt16_t
 
	$ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
)

1479 
__IO
 
uöt32_t
 
tmp
 = 0;

1482 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1483 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1485 
tmp
 = (
uöt32_t
)
ADCx
;

1486 
tmp
 +
ADC_Inje˘edCh™√l
 + 
JDR_OFFSET
;

1489  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

1490 
	}
}

1584 
	$ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1586 
uöt32_t
 
ômask
 = 0;

1588 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1589 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1590 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1593 
ômask
 = (
uöt8_t
)
ADC_IT
;

1594 
ômask
 = (
uöt32_t
)0x01 << itmask;

1596 i‡(
NewSèã
 !
DISABLE
)

1599 
ADCx
->
CR1
 |
ômask
;

1604 
ADCx
->
CR1
 &(~(
uöt32_t
)
ômask
);

1606 
	}
}

1621 
FœgSètus
 
	$ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1623 
FœgSètus
 
bô°©us
 = 
RESET
;

1625 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1626 
	`as£π_∑øm
(
	`IS_ADC_GET_FLAG
(
ADC_FLAG
));

1629 i‡((
ADCx
->
SR
 & 
ADC_FLAG
Ë!(
uöt8_t
)
RESET
)

1632 
bô°©us
 = 
SET
;

1637 
bô°©us
 = 
RESET
;

1640  
bô°©us
;

1641 
	}
}

1656 
	$ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1659 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1660 
	`as£π_∑øm
(
	`IS_ADC_CLEAR_FLAG
(
ADC_FLAG
));

1663 
ADCx
->
SR
 = ~(
uöt32_t
)
ADC_FLAG
;

1664 
	}
}

1677 
ITSètus
 
	$ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1679 
ITSètus
 
bô°©us
 = 
RESET
;

1680 
uöt32_t
 
ômask
 = 0, 
íabÀ°©us
 = 0;

1683 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1684 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1687 
ômask
 = 
ADC_IT
 >> 8;

1690 
íabÀ°©us
 = (
ADCx
->
CR1
 & ((
uöt32_t
)0x01 << (
uöt8_t
)
ADC_IT
)) ;

1693 i‡(((
ADCx
->
SR
 & 
ômask
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1696 
bô°©us
 = 
SET
;

1701 
bô°©us
 = 
RESET
;

1704  
bô°©us
;

1705 
	}
}

1718 
	$ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1720 
uöt8_t
 
ômask
 = 0;

1722 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1723 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1725 
ômask
 = (
uöt8_t
)(
ADC_IT
 >> 8);

1727 
ADCx
->
SR
 = ~(
uöt32_t
)
ômask
;

1728 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c

84 
	~"°m32f4xx_ˇn.h
"

85 
	~"°m32f4xx_rcc.h
"

99 
	#MCR_DBF
 ((
uöt32_t
)0x00010000Ë

	)

102 
	#TMIDxR_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

105 
	#FMR_FINIT
 ((
uöt32_t
)0x00000001Ë

	)

108 
	#INAK_TIMEOUT
 ((
uöt32_t
)0x0000FFFF)

	)

110 
	#SLAK_TIMEOUT
 ((
uöt32_t
)0x0000FFFF)

	)

113 
	#CAN_FLAGS_TSR
 ((
uöt32_t
)0x08000000)

	)

115 
	#CAN_FLAGS_RF1R
 ((
uöt32_t
)0x04000000)

	)

117 
	#CAN_FLAGS_RF0R
 ((
uöt32_t
)0x02000000)

	)

119 
	#CAN_FLAGS_MSR
 ((
uöt32_t
)0x01000000)

	)

121 
	#CAN_FLAGS_ESR
 ((
uöt32_t
)0x00F00000)

	)

124 
	#CAN_TXMAILBOX_0
 ((
uöt8_t
)0x00)

	)

125 
	#CAN_TXMAILBOX_1
 ((
uöt8_t
)0x01)

	)

126 
	#CAN_TXMAILBOX_2
 ((
uöt8_t
)0x02)

	)

128 
	#CAN_MODE_MASK
 ((
uöt32_t
Ë0x00000003)

	)

134 
ITSètus
 
CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
);

166 
	$CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
)

169 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

171 i‡(
CANx
 =
CAN1
)

174 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
ENABLE
);

176 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
DISABLE
);

181 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
ENABLE
);

183 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
DISABLE
);

185 
	}
}

196 
uöt8_t
 
	$CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

198 
uöt8_t
 
InôSètus
 = 
CAN_InôSètus_Faûed
;

199 
uöt32_t
 
waô_ack
 = 0x00000000;

201 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

202 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TTCM
));

203 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_ABOM
));

204 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_AWUM
));

205 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_NART
));

206 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_RFLM
));

207 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TXFP
));

208 
	`as£π_∑øm
(
	`IS_CAN_MODE
(
CAN_InôSåu˘
->
CAN_Mode
));

209 
	`as£π_∑øm
(
	`IS_CAN_SJW
(
CAN_InôSåu˘
->
CAN_SJW
));

210 
	`as£π_∑øm
(
	`IS_CAN_BS1
(
CAN_InôSåu˘
->
CAN_BS1
));

211 
	`as£π_∑øm
(
	`IS_CAN_BS2
(
CAN_InôSåu˘
->
CAN_BS2
));

212 
	`as£π_∑øm
(
	`IS_CAN_PRESCALER
(
CAN_InôSåu˘
->
CAN_PªsˇÀr
));

215 
CANx
->
MCR
 &(~(
uöt32_t
)
CAN_MCR_SLEEP
);

218 
CANx
->
MCR
 |
CAN_MCR_INRQ
 ;

221 ((
CANx
->
MSR
 & 
CAN_MSR_INAK
Ë!CAN_MSR_INAKË&& (
waô_ack
 !
INAK_TIMEOUT
))

223 
waô_ack
++;

227 i‡((
CANx
->
MSR
 & 
CAN_MSR_INAK
) != CAN_MSR_INAK)

229 
InôSètus
 = 
CAN_InôSètus_Faûed
;

234 i‡(
CAN_InôSåu˘
->
CAN_TTCM
 =
ENABLE
)

236 
CANx
->
MCR
 |
CAN_MCR_TTCM
;

240 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_TTCM
;

244 i‡(
CAN_InôSåu˘
->
CAN_ABOM
 =
ENABLE
)

246 
CANx
->
MCR
 |
CAN_MCR_ABOM
;

250 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_ABOM
;

254 i‡(
CAN_InôSåu˘
->
CAN_AWUM
 =
ENABLE
)

256 
CANx
->
MCR
 |
CAN_MCR_AWUM
;

260 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_AWUM
;

264 i‡(
CAN_InôSåu˘
->
CAN_NART
 =
ENABLE
)

266 
CANx
->
MCR
 |
CAN_MCR_NART
;

270 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_NART
;

274 i‡(
CAN_InôSåu˘
->
CAN_RFLM
 =
ENABLE
)

276 
CANx
->
MCR
 |
CAN_MCR_RFLM
;

280 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_RFLM
;

284 i‡(
CAN_InôSåu˘
->
CAN_TXFP
 =
ENABLE
)

286 
CANx
->
MCR
 |
CAN_MCR_TXFP
;

290 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_TXFP
;

294 
CANx
->
BTR
 = (
uöt32_t
)((uöt32_t)
CAN_InôSåu˘
->
CAN_Mode
 << 30) | \

295 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_SJW
 << 24) | \

296 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_BS1
 << 16) | \

297 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_BS2
 << 20) | \

298 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_PªsˇÀr
 - 1);

301 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_INRQ
;

304 
waô_ack
 = 0;

306 ((
CANx
->
MSR
 & 
CAN_MSR_INAK
Ë=CAN_MSR_INAKË&& (
waô_ack
 !
INAK_TIMEOUT
))

308 
waô_ack
++;

312 i‡((
CANx
->
MSR
 & 
CAN_MSR_INAK
) == CAN_MSR_INAK)

314 
InôSètus
 = 
CAN_InôSètus_Faûed
;

318 
InôSètus
 = 
CAN_InôSètus_Suc˚ss
 ;

323  
InôSètus
;

324 
	}
}

333 
	$CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
)

335 
uöt32_t
 
fûãr_numbî_bô_pos
 = 0;

337 
	`as£π_∑øm
(
	`IS_CAN_FILTER_NUMBER
(
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
));

338 
	`as£π_∑øm
(
	`IS_CAN_FILTER_MODE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
));

339 
	`as£π_∑øm
(
	`IS_CAN_FILTER_SCALE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
));

340 
	`as£π_∑øm
(
	`IS_CAN_FILTER_FIFO
(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
));

341 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
));

343 
fûãr_numbî_bô_pos
 = ((
uöt32_t
)1Ë<< 
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
;

346 
CAN1
->
FMR
 |
FMR_FINIT
;

349 
CAN1
->
FA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

352 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_16bô
)

355 
CAN1
->
FS1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

359 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

360 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
) << 16) |

361 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

365 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

366 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

367 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
);

370 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_32bô
)

373 
CAN1
->
FS1R
 |
fûãr_numbî_bô_pos
;

375 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

376 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
) << 16) |

377 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

379 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

380 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

381 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
);

385 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
 =
CAN_FûãrMode_IdMask
)

388 
CAN1
->
FM1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

393 
CAN1
->
FM1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

397 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_Fûãr_FIFO0
)

400 
CAN1
->
FFA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

403 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_Fûãr_FIFO1
)

406 
CAN1
->
FFA1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

410 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
 =
ENABLE
)

412 
CAN1
->
FA1R
 |
fûãr_numbî_bô_pos
;

416 
CAN1
->
FMR
 &~
FMR_FINIT
;

417 
	}
}

424 
	$CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

429 
CAN_InôSåu˘
->
CAN_TTCM
 = 
DISABLE
;

432 
CAN_InôSåu˘
->
CAN_ABOM
 = 
DISABLE
;

435 
CAN_InôSåu˘
->
CAN_AWUM
 = 
DISABLE
;

438 
CAN_InôSåu˘
->
CAN_NART
 = 
DISABLE
;

441 
CAN_InôSåu˘
->
CAN_RFLM
 = 
DISABLE
;

444 
CAN_InôSåu˘
->
CAN_TXFP
 = 
DISABLE
;

447 
CAN_InôSåu˘
->
CAN_Mode
 = 
CAN_Mode_N‹mÆ
;

450 
CAN_InôSåu˘
->
CAN_SJW
 = 
CAN_SJW_1tq
;

453 
CAN_InôSåu˘
->
CAN_BS1
 = 
CAN_BS1_4tq
;

456 
CAN_InôSåu˘
->
CAN_BS2
 = 
CAN_BS2_3tq
;

459 
CAN_InôSåu˘
->
CAN_PªsˇÀr
 = 1;

460 
	}
}

467 
	$CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
)

470 
	`as£π_∑øm
(
	`IS_CAN_BANKNUMBER
(
CAN_B™kNumbî
));

473 
CAN1
->
FMR
 |
FMR_FINIT
;

476 
CAN1
->
FMR
 &(
uöt32_t
)0xFFFFC0F1 ;

477 
CAN1
->
FMR
 |(
uöt32_t
)(
CAN_B™kNumbî
)<<8;

480 
CAN1
->
FMR
 &~
FMR_FINIT
;

481 
	}
}

492 
	$CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

495 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

496 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

498 i‡(
NewSèã
 !
DISABLE
)

501 
CANx
->
MCR
 |
MCR_DBF
;

506 
CANx
->
MCR
 &~
MCR_DBF
;

508 
	}
}

522 
	$CAN_TTComModeCmd
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

525 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

526 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

527 i‡(
NewSèã
 !
DISABLE
)

530 
CANx
->
MCR
 |
CAN_MCR_TTCM
;

533 
CANx
->
sTxMaûBox
[0].
TDTR
 |((
uöt32_t
)
CAN_TDT0R_TGT
);

534 
CANx
->
sTxMaûBox
[1].
TDTR
 |((
uöt32_t
)
CAN_TDT1R_TGT
);

535 
CANx
->
sTxMaûBox
[2].
TDTR
 |((
uöt32_t
)
CAN_TDT2R_TGT
);

540 
CANx
->
MCR
 &(
uöt32_t
)(~(uöt32_t)
CAN_MCR_TTCM
);

543 
CANx
->
sTxMaûBox
[0].
TDTR
 &((
uöt32_t
)~
CAN_TDT0R_TGT
);

544 
CANx
->
sTxMaûBox
[1].
TDTR
 &((
uöt32_t
)~
CAN_TDT1R_TGT
);

545 
CANx
->
sTxMaûBox
[2].
TDTR
 &((
uöt32_t
)~
CAN_TDT2R_TGT
);

547 
	}
}

576 
uöt8_t
 
	$CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
)

578 
uöt8_t
 
å™smô_maûbox
 = 0;

580 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

581 
	`as£π_∑øm
(
	`IS_CAN_IDTYPE
(
TxMesßge
->
IDE
));

582 
	`as£π_∑øm
(
	`IS_CAN_RTR
(
TxMesßge
->
RTR
));

583 
	`as£π_∑øm
(
	`IS_CAN_DLC
(
TxMesßge
->
DLC
));

586 i‡((
CANx
->
TSR
&
CAN_TSR_TME0
) == CAN_TSR_TME0)

588 
å™smô_maûbox
 = 0;

590 i‡((
CANx
->
TSR
&
CAN_TSR_TME1
) == CAN_TSR_TME1)

592 
å™smô_maûbox
 = 1;

594 i‡((
CANx
->
TSR
&
CAN_TSR_TME2
) == CAN_TSR_TME2)

596 
å™smô_maûbox
 = 2;

600 
å™smô_maûbox
 = 
CAN_TxSètus_NoMaûBox
;

603 i‡(
å™smô_maûbox
 !
CAN_TxSètus_NoMaûBox
)

606 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 &
TMIDxR_TXRQ
;

607 i‡(
TxMesßge
->
IDE
 =
CAN_Id_Sènd¨d
)

609 
	`as£π_∑øm
(
	`IS_CAN_STDID
(
TxMesßge
->
StdId
));

610 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
StdId
 << 21) | \

611 
TxMesßge
->
RTR
);

615 
	`as£π_∑øm
(
	`IS_CAN_EXTID
(
TxMesßge
->
ExtId
));

616 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
ExtId
 << 3) | \

617 
TxMesßge
->
IDE
 | \

618 
TxMesßge
->
RTR
);

622 
TxMesßge
->
DLC
 &(
uöt8_t
)0x0000000F;

623 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 &(
uöt32_t
)0xFFFFFFF0;

624 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 |
TxMesßge
->
DLC
;

627 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDLR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[3] << 24) |

628 ((
uöt32_t
)
TxMesßge
->
D©a
[2] << 16) |

629 ((
uöt32_t
)
TxMesßge
->
D©a
[1] << 8) |

630 ((
uöt32_t
)
TxMesßge
->
D©a
[0]));

631 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDHR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[7] << 24) |

632 ((
uöt32_t
)
TxMesßge
->
D©a
[6] << 16) |

633 ((
uöt32_t
)
TxMesßge
->
D©a
[5] << 8) |

634 ((
uöt32_t
)
TxMesßge
->
D©a
[4]));

636 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |
TMIDxR_TXRQ
;

638  
å™smô_maûbox
;

639 
	}
}

648 
uöt8_t
 
	$CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
TønsmôMaûbox
)

650 
uöt32_t
 
°©e
 = 0;

653 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

654 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
TønsmôMaûbox
));

656 
TønsmôMaûbox
)

658 (
CAN_TXMAILBOX_0
):

659 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP0
 | 
CAN_TSR_TXOK0
 | 
CAN_TSR_TME0
);

661 (
CAN_TXMAILBOX_1
):

662 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP1
 | 
CAN_TSR_TXOK1
 | 
CAN_TSR_TME1
);

664 (
CAN_TXMAILBOX_2
):

665 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP2
 | 
CAN_TSR_TXOK2
 | 
CAN_TSR_TME2
);

668 
°©e
 = 
CAN_TxSètus_Faûed
;

671 
°©e
)

674 (0x0): 
°©e
 = 
CAN_TxSètus_Pídög
;

677 (
CAN_TSR_RQCP0
 | 
CAN_TSR_TME0
): 
°©e
 = 
CAN_TxSètus_Faûed
;

679 (
CAN_TSR_RQCP1
 | 
CAN_TSR_TME1
): 
°©e
 = 
CAN_TxSètus_Faûed
;

681 (
CAN_TSR_RQCP2
 | 
CAN_TSR_TME2
): 
°©e
 = 
CAN_TxSètus_Faûed
;

684 (
CAN_TSR_RQCP0
 | 
CAN_TSR_TXOK0
 | 
CAN_TSR_TME0
):
°©e
 = 
CAN_TxSètus_Ok
;

686 (
CAN_TSR_RQCP1
 | 
CAN_TSR_TXOK1
 | 
CAN_TSR_TME1
):
°©e
 = 
CAN_TxSètus_Ok
;

688 (
CAN_TSR_RQCP2
 | 
CAN_TSR_TXOK2
 | 
CAN_TSR_TME2
):
°©e
 = 
CAN_TxSètus_Ok
;

690 : 
°©e
 = 
CAN_TxSètus_Faûed
;

693  (
uöt8_t
Ë
°©e
;

694 
	}
}

702 
	$CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
)

705 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

706 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
Maûbox
));

708 
Maûbox
)

710 (
CAN_TXMAILBOX_0
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ0
;

712 (
CAN_TXMAILBOX_1
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ1
;

714 (
CAN_TXMAILBOX_2
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ2
;

719 
	}
}

749 
	$CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
)

752 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

753 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

755 
RxMesßge
->
IDE
 = (
uöt8_t
)0x04 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

756 i‡(
RxMesßge
->
IDE
 =
CAN_Id_Sènd¨d
)

758 
RxMesßge
->
StdId
 = (
uöt32_t
)0x000007FF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 21);

762 
RxMesßge
->
ExtId
 = (
uöt32_t
)0x1FFFFFFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 3);

765 
RxMesßge
->
RTR
 = (
uöt8_t
)0x02 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

767 
RxMesßge
->
DLC
 = (
uöt8_t
)0x0F & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
;

769 
RxMesßge
->
FMI
 = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
 >> 8);

771 
RxMesßge
->
D©a
[0] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
;

772 
RxMesßge
->
D©a
[1] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 8);

773 
RxMesßge
->
D©a
[2] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 16);

774 
RxMesßge
->
D©a
[3] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 24);

775 
RxMesßge
->
D©a
[4] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
;

776 
RxMesßge
->
D©a
[5] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 8);

777 
RxMesßge
->
D©a
[6] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 16);

778 
RxMesßge
->
D©a
[7] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 24);

781 i‡(
FIFONumbî
 =
CAN_FIFO0
)

783 
CANx
->
RF0R
 |
CAN_RF0R_RFOM0
;

788 
CANx
->
RF1R
 |
CAN_RF1R_RFOM1
;

790 
	}
}

798 
	$CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

801 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

802 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

804 i‡(
FIFONumbî
 =
CAN_FIFO0
)

806 
CANx
->
RF0R
 |
CAN_RF0R_RFOM0
;

811 
CANx
->
RF1R
 |
CAN_RF1R_RFOM1
;

813 
	}
}

821 
uöt8_t
 
	$CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

823 
uöt8_t
 
mesßge_≥ndög
=0;

825 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

826 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

827 i‡(
FIFONumbî
 =
CAN_FIFO0
)

829 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF0R
&(
uöt32_t
)0x03);

831 i‡(
FIFONumbî
 =
CAN_FIFO1
)

833 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF1R
&(
uöt32_t
)0x03);

837 
mesßge_≥ndög
 = 0;

839  
mesßge_≥ndög
;

840 
	}
}

871 
uöt8_t
 
	$CAN_O≥øtögModeReque°
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
CAN_O≥øtögMode
)

873 
uöt8_t
 
°©us
 = 
CAN_ModeSètus_Faûed
;

876 
uöt32_t
 
timeout
 = 
INAK_TIMEOUT
;

879 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

880 
	`as£π_∑øm
(
	`IS_CAN_OPERATING_MODE
(
CAN_O≥øtögMode
));

882 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_Inôüliz©i⁄
)

885 
CANx
->
MCR
 = (
uöt32_t
)((CANx->MCR & (uöt32_t)(~(uöt32_t)
CAN_MCR_SLEEP
)Ë| 
CAN_MCR_INRQ
);

888 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_INAK
Ë&& (
timeout
 != 0))

890 
timeout
--;

892 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_INAK
)

894 
°©us
 = 
CAN_ModeSètus_Faûed
;

898 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

901 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_N‹mÆ
)

904 
CANx
->
MCR
 &(
uöt32_t
)(~(
CAN_MCR_SLEEP
|
CAN_MCR_INRQ
));

907 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!0Ë&& (
timeout
!=0))

909 
timeout
--;

911 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
) != 0)

913 
°©us
 = 
CAN_ModeSètus_Faûed
;

917 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

920 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_SÀï
)

923 
CANx
->
MCR
 = (
uöt32_t
)((CANx->MCR & (uöt32_t)(~(uöt32_t)
CAN_MCR_INRQ
)Ë| 
CAN_MCR_SLEEP
);

926 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_SLAK
Ë&& (
timeout
!=0))

928 
timeout
--;

930 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_SLAK
)

932 
°©us
 = 
CAN_ModeSètus_Faûed
;

936 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

941 
°©us
 = 
CAN_ModeSètus_Faûed
;

944  (
uöt8_t
Ë
°©us
;

945 
	}
}

952 
uöt8_t
 
	$CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
)

954 
uöt8_t
 
¶ìp°©us
 = 
CAN_SÀï_Faûed
;

957 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

960 
CANx
->
MCR
 = (((CANx->MCRË& (
uöt32_t
)(~(uöt32_t)
CAN_MCR_INRQ
)Ë| 
CAN_MCR_SLEEP
);

963 i‡((
CANx
->
MSR
 & (
CAN_MSR_SLAK
|
CAN_MSR_INAK
)) == CAN_MSR_SLAK)

966 
¶ìp°©us
 = 
CAN_SÀï_Ok
;

969  (
uöt8_t
)
¶ìp°©us
;

970 
	}
}

977 
uöt8_t
 
	$CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
)

979 
uöt32_t
 
waô_¶ak
 = 
SLAK_TIMEOUT
;

980 
uöt8_t
 
wakeup°©us
 = 
CAN_WakeUp_Faûed
;

983 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

986 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_SLEEP
;

989 ((
CANx
->
MSR
 & 
CAN_MSR_SLAK
Ë=CAN_MSR_SLAK)&&(
waô_¶ak
!=0x00))

991 
waô_¶ak
--;

993 if((
CANx
->
MSR
 & 
CAN_MSR_SLAK
) != CAN_MSR_SLAK)

996 
wakeup°©us
 = 
CAN_WakeUp_Ok
;

999  (
uöt8_t
)
wakeup°©us
;

1000 
	}
}

1039 
uöt8_t
 
	$CAN_GëLa°Eº‹Code
(
CAN_Ty≥Def
* 
CANx
)

1041 
uöt8_t
 
îr‹code
=0;

1044 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1047 
îr‹code
 = (((
uöt8_t
)
CANx
->
ESR
Ë& (uöt8_t)
CAN_ESR_LEC
);

1050  
îr‹code
;

1051 
	}
}

1064 
uöt8_t
 
	$CAN_GëRe˚iveEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
)

1066 
uöt8_t
 
cou¡î
=0;

1069 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1072 
cou¡î
 = (
uöt8_t
)((
CANx
->
ESR
 & 
CAN_ESR_REC
)>> 24);

1075  
cou¡î
;

1076 
	}
}

1084 
uöt8_t
 
	$CAN_GëLSBTønsmôEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
)

1086 
uöt8_t
 
cou¡î
=0;

1089 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1092 
cou¡î
 = (
uöt8_t
)((
CANx
->
ESR
 & 
CAN_ESR_TEC
)>> 16);

1095  
cou¡î
;

1096 
	}
}

1289 
	$CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1292 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1293 
	`as£π_∑øm
(
	`IS_CAN_IT
(
CAN_IT
));

1294 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1296 i‡(
NewSèã
 !
DISABLE
)

1299 
CANx
->
IER
 |
CAN_IT
;

1304 
CANx
->
IER
 &~
CAN_IT
;

1306 
	}
}

1329 
FœgSètus
 
	$CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

1331 
FœgSètus
 
bô°©us
 = 
RESET
;

1334 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1335 
	`as£π_∑øm
(
	`IS_CAN_GET_FLAG
(
CAN_FLAG
));

1338 if((
CAN_FLAG
 & 
CAN_FLAGS_ESR
Ë!(
uöt32_t
)
RESET
)

1341 i‡((
CANx
->
ESR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1344 
bô°©us
 = 
SET
;

1349 
bô°©us
 = 
RESET
;

1352 if((
CAN_FLAG
 & 
CAN_FLAGS_MSR
Ë!(
uöt32_t
)
RESET
)

1355 i‡((
CANx
->
MSR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1358 
bô°©us
 = 
SET
;

1363 
bô°©us
 = 
RESET
;

1366 if((
CAN_FLAG
 & 
CAN_FLAGS_TSR
Ë!(
uöt32_t
)
RESET
)

1369 i‡((
CANx
->
TSR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1372 
bô°©us
 = 
SET
;

1377 
bô°©us
 = 
RESET
;

1380 if((
CAN_FLAG
 & 
CAN_FLAGS_RF0R
Ë!(
uöt32_t
)
RESET
)

1383 i‡((
CANx
->
RF0R
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1386 
bô°©us
 = 
SET
;

1391 
bô°©us
 = 
RESET
;

1397 i‡((
uöt32_t
)(
CANx
->
RF1R
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(uöt32_t)
RESET
)

1400 
bô°©us
 = 
SET
;

1405 
bô°©us
 = 
RESET
;

1409  
bô°©us
;

1410 
	}
}

1429 
	$CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

1431 
uöt32_t
 
Êagtmp
=0;

1433 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1434 
	`as£π_∑øm
(
	`IS_CAN_CLEAR_FLAG
(
CAN_FLAG
));

1436 i‡(
CAN_FLAG
 =
CAN_FLAG_LEC
)

1439 
CANx
->
ESR
 = (
uöt32_t
)
RESET
;

1443 
Êagtmp
 = 
CAN_FLAG
 & 0x000FFFFF;

1445 i‡((
CAN_FLAG
 & 
CAN_FLAGS_RF0R
)!=(
uöt32_t
)
RESET
)

1448 
CANx
->
RF0R
 = (
uöt32_t
)(
Êagtmp
);

1450 i‡((
CAN_FLAG
 & 
CAN_FLAGS_RF1R
)!=(
uöt32_t
)
RESET
)

1453 
CANx
->
RF1R
 = (
uöt32_t
)(
Êagtmp
);

1455 i‡((
CAN_FLAG
 & 
CAN_FLAGS_TSR
)!=(
uöt32_t
)
RESET
)

1458 
CANx
->
TSR
 = (
uöt32_t
)(
Êagtmp
);

1463 
CANx
->
MSR
 = (
uöt32_t
)(
Êagtmp
);

1466 
	}
}

1489 
ITSètus
 
	$CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

1491 
ITSètus
 
ô°©us
 = 
RESET
;

1493 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1494 
	`as£π_∑øm
(
	`IS_CAN_IT
(
CAN_IT
));

1497 if((
CANx
->
IER
 & 
CAN_IT
Ë!
RESET
)

1500 
CAN_IT
)

1502 
CAN_IT_TME
:

1504 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
TSR
, 
CAN_TSR_RQCP0
|
CAN_TSR_RQCP1
|
CAN_TSR_RQCP2
);

1506 
CAN_IT_FMP0
:

1508 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FMP0
);

1510 
CAN_IT_FF0
:

1512 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FULL0
);

1514 
CAN_IT_FOV0
:

1516 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FOVR0
);

1518 
CAN_IT_FMP1
:

1520 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FMP1
);

1522 
CAN_IT_FF1
:

1524 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FULL1
);

1526 
CAN_IT_FOV1
:

1528 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FOVR1
);

1530 
CAN_IT_WKU
:

1532 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_WKUI
);

1534 
CAN_IT_SLK
:

1536 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_SLAKI
);

1538 
CAN_IT_EWG
:

1540 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_EWGF
);

1542 
CAN_IT_EPV
:

1544 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_EPVF
);

1546 
CAN_IT_BOF
:

1548 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_BOFF
);

1550 
CAN_IT_LEC
:

1552 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_LEC
);

1554 
CAN_IT_ERR
:

1556 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_ERRI
);

1560 
ô°©us
 = 
RESET
;

1567 
ô°©us
 = 
RESET
;

1571  
ô°©us
;

1572 
	}
}

1593 
	$CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

1596 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1597 
	`as£π_∑øm
(
	`IS_CAN_CLEAR_IT
(
CAN_IT
));

1599 
CAN_IT
)

1601 
CAN_IT_TME
:

1603 
CANx
->
TSR
 = 
CAN_TSR_RQCP0
|
CAN_TSR_RQCP1
|
CAN_TSR_RQCP2
;

1605 
CAN_IT_FF0
:

1607 
CANx
->
RF0R
 = 
CAN_RF0R_FULL0
;

1609 
CAN_IT_FOV0
:

1611 
CANx
->
RF0R
 = 
CAN_RF0R_FOVR0
;

1613 
CAN_IT_FF1
:

1615 
CANx
->
RF1R
 = 
CAN_RF1R_FULL1
;

1617 
CAN_IT_FOV1
:

1619 
CANx
->
RF1R
 = 
CAN_RF1R_FOVR1
;

1621 
CAN_IT_WKU
:

1623 
CANx
->
MSR
 = 
CAN_MSR_WKUI
;

1625 
CAN_IT_SLK
:

1627 
CANx
->
MSR
 = 
CAN_MSR_SLAKI
;

1629 
CAN_IT_EWG
:

1631 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1634 
CAN_IT_EPV
:

1636 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1639 
CAN_IT_BOF
:

1641 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1644 
CAN_IT_LEC
:

1646 
CANx
->
ESR
 = 
RESET
;

1648 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1650 
CAN_IT_ERR
:

1652 
CANx
->
ESR
 = 
RESET
;

1654 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1660 
	}
}

1671 
ITSètus
 
	$CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
)

1673 
ITSètus
 
≥ndögbô°©us
 = 
RESET
;

1675 i‡((
CAN_Reg
 & 
It_Bô
Ë!(
uöt32_t
)
RESET
)

1678 
≥ndögbô°©us
 = 
SET
;

1683 
≥ndögbô°©us
 = 
RESET
;

1685  
≥ndögbô°©us
;

1686 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cec.c

93 
	~"°m32f4xx_˚c.h
"

94 
	~"°m32f4xx_rcc.h
"

107 
	#BROADCAST_ADDRESS
 ((
uöt32_t
)0x0000F)

	)

108 
	#CFGR_CLEAR_MASK
 ((
uöt32_t
)0x7000FE00Ë

	)

145 
	$CEC_DeInô
()

147 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CEC
, 
ENABLE
);

148 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CEC
, 
DISABLE
);

149 
	}
}

159 
	$CEC_Inô
(
CEC_InôTy≥Def
* 
CEC_InôSåu˘
)

161 
uöt32_t
 
tm¥eg
 = 0;

164 
	`as£π_∑øm
(
	`IS_CEC_SIGNAL_FREE_TIME
(
CEC_InôSåu˘
->
CEC_Sig«lFªeTime
));

165 
	`as£π_∑øm
(
	`IS_CEC_RX_TOLERANCE
(
CEC_InôSåu˘
->
CEC_RxTﬁî™˚
));

166 
	`as£π_∑øm
(
	`IS_CEC_STOP_RECEPTION
(
CEC_InôSåu˘
->
CEC_St›Re˚±i⁄
));

167 
	`as£π_∑øm
(
	`IS_CEC_BIT_RISING_ERROR
(
CEC_InôSåu˘
->
CEC_BôRisögEº‹
));

168 
	`as£π_∑øm
(
	`IS_CEC_LONG_BIT_PERIOD_ERROR
(
CEC_InôSåu˘
->
CEC_L⁄gBôPîiodEº‹
));

169 
	`as£π_∑øm
(
	`IS_CEC_BDR_NO_GEN_ERROR
(
CEC_InôSåu˘
->
CEC_BRDNoGí
));

170 
	`as£π_∑øm
(
	`IS_CEC_SFT_OPTION
(
CEC_InôSåu˘
->
CEC_SFTO±i⁄
));

173 
tm¥eg
 = 
CEC
->
CFGR
;

176 
tm¥eg
 &
CFGR_CLEAR_MASK
;

179 
tm¥eg
 |(
CEC_InôSåu˘
->
CEC_Sig«lFªeTime
 | CEC_InôSåu˘->
CEC_RxTﬁî™˚
 |

180 
CEC_InôSåu˘
->
CEC_St›Re˚±i⁄
 | CEC_InôSåu˘->
CEC_BôRisögEº‹
 |

181 
CEC_InôSåu˘
->
CEC_L⁄gBôPîiodEº‹
| CEC_InôSåu˘->
CEC_BRDNoGí
 |

182 
CEC_InôSåu˘
->
CEC_SFTO±i⁄
);

185 
CEC
->
CFGR
 = 
tm¥eg
;

186 
	}
}

194 
	$CEC_Såu˘Inô
(
CEC_InôTy≥Def
* 
CEC_InôSåu˘
)

196 
CEC_InôSåu˘
->
CEC_Sig«lFªeTime
 = 
CEC_Sig«lFªeTime_Sènd¨d
;

197 
CEC_InôSåu˘
->
CEC_RxTﬁî™˚
 = 
CEC_RxTﬁî™˚_Sènd¨d
;

198 
CEC_InôSåu˘
->
CEC_St›Re˚±i⁄
 = 
CEC_St›Re˚±i⁄_Off
;

199 
CEC_InôSåu˘
->
CEC_BôRisögEº‹
 = 
CEC_BôRisögEº‹_Off
;

200 
CEC_InôSåu˘
->
CEC_L⁄gBôPîiodEº‹
 = 
CEC_L⁄gBôPîiodEº‹_Off
;

201 
CEC_InôSåu˘
->
CEC_BRDNoGí
 = 
CEC_BRDNoGí_Off
;

202 
CEC_InôSåu˘
->
CEC_SFTO±i⁄
 = 
CEC_SFTO±i⁄_Off
;

203 
	}
}

211 
	$CEC_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

213 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

215 i‡(
NewSèã
 !
DISABLE
)

218 
CEC
->
CR
 |
CEC_CR_CECEN
;

223 
CEC
->
CR
 &~
CEC_CR_CECEN
;

225 
	}
}

233 
	$CEC_Li°íModeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

235 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

237 i‡(
NewSèã
 !
DISABLE
)

240 
CEC
->
CFGR
 |
CEC_CFGR_LSTN
;

245 
CEC
->
CFGR
 &~
CEC_CFGR_LSTN
;

247 
	}
}

254 
	$CEC_OwnAddªssC⁄fig
(
uöt8_t
 
CEC_OwnAddªss
)

256 
uöt32_t
 
tmp
 =0x00;

258 
	`as£π_∑øm
(
	`IS_CEC_ADDRESS
(
CEC_OwnAddªss
));

259 
tmp
 = 1 <<(
CEC_OwnAddªss
 + 16);

261 
CEC
->
CFGR
 |
tmp
;

262 
	}
}

269 
	$CEC_OwnAddªssCÀ¨
()

272 
CEC
->
CFGR
 = 0x0;

273 
	}
}

299 
	$CEC_SídD©a
(
uöt8_t
 
D©a
)

302 
CEC
->
TXDR
 = 
D©a
;

303 
	}
}

310 
uöt8_t
 
	$CEC_Re˚iveD©a
()

313  (
uöt8_t
)(
CEC
->
RXDR
);

314 
	}
}

321 
	$CEC_SèπOfMesßge
()

324 
CEC
->
CR
 |
CEC_CR_TXSOM
;

325 
	}
}

332 
	$CEC_EndOfMesßge
()

335 
CEC
->
CR
 |
CEC_CR_TXEOM
;

336 
	}
}

432 
	$CEC_ITC⁄fig
(
uöt16_t
 
CEC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

434 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

435 
	`as£π_∑øm
(
	`IS_CEC_IT
(
CEC_IT
));

437 i‡(
NewSèã
 !
DISABLE
)

440 
CEC
->
IER
 |
CEC_IT
;

444 
CEC_IT
 =~CEC_IT;

446 
CEC
->
IER
 &
CEC_IT
;

448 
	}
}

469 
FœgSètus
 
	$CEC_GëFœgSètus
(
uöt16_t
 
CEC_FLAG
)

471 
FœgSètus
 
bô°©us
 = 
RESET
;

473 
	`as£π_∑øm
(
	`IS_CEC_GET_FLAG
(
CEC_FLAG
));

476 i‡((
CEC
->
ISR
 & 
CEC_FLAG
Ë!(
uöt16_t
)
RESET
)

479 
bô°©us
 = 
SET
;

484 
bô°©us
 = 
RESET
;

488  
bô°©us
;

489 
	}
}

510 
	$CEC_CÀ¨Fœg
(
uöt32_t
 
CEC_FLAG
)

512 
	`as£π_∑øm
(
	`IS_CEC_CLEAR_FLAG
(
CEC_FLAG
));

515 
CEC
->
ISR
 = 
CEC_FLAG
;

516 
	}
}

537 
ITSètus
 
	$CEC_GëITSètus
(
uöt16_t
 
CEC_IT
)

539 
ITSètus
 
bô°©us
 = 
RESET
;

540 
uöt32_t
 
íabÀ°©us
 = 0;

543 
	`as£π_∑øm
(
	`IS_CEC_GET_IT
(
CEC_IT
));

546 
íabÀ°©us
 = (
CEC
->
IER
 & 
CEC_IT
);

549 i‡(((
CEC
->
ISR
 & 
CEC_IT
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

552 
bô°©us
 = 
SET
;

557 
bô°©us
 = 
RESET
;

561  
bô°©us
;

562 
	}
}

583 
	$CEC_CÀ¨ITPídögBô
(
uöt16_t
 
CEC_IT
)

585 
	`as£π_∑øm
(
	`IS_CEC_IT
(
CEC_IT
));

588 
CEC
->
ISR
 = 
CEC_IT
;

589 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_crc.c

29 
	~"°m32f4xx_¸c.h
"

56 
	$CRC_Re£tDR
()

59 
CRC
->
CR
 = 
CRC_CR_RESET
;

60 
	}
}

67 
uöt32_t
 
	$CRC_CÆcCRC
(
uöt32_t
 
D©a
)

69 
CRC
->
DR
 = 
D©a
;

71  (
CRC
->
DR
);

72 
	}
}

80 
uöt32_t
 
	$CRC_CÆcBlockCRC
(
uöt32_t
 
pBuf„r
[], uöt32_à
Buf„rLígth
)

82 
uöt32_t
 
ödex
 = 0;

84 
ödex
 = 0; index < 
Buf„rLígth
; index++)

86 
CRC
->
DR
 = 
pBuf„r
[
ödex
];

88  (
CRC
->
DR
);

89 
	}
}

96 
uöt32_t
 
	$CRC_GëCRC
()

98  (
CRC
->
DR
);

99 
	}
}

106 
	$CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
)

108 
CRC
->
IDR
 = 
IDVÆue
;

109 
	}
}

116 
uöt8_t
 
	$CRC_GëIDRegi°î
()

118  (
CRC
->
IDR
);

119 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c

164 
	~"°m32f4xx_¸yp.h
"

165 
	~"°m32f4xx_rcc.h
"

178 
	#FLAG_MASK
 ((
uöt8_t
)0x20)

	)

179 
	#MAX_TIMEOUT
 ((
uöt16_t
)0xFFFF)

	)

219 
	$CRYP_DeInô
()

222 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_CRYP
, 
ENABLE
);

225 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_CRYP
, 
DISABLE
);

226 
	}
}

235 
	$CRYP_Inô
(
CRYP_InôTy≥Def
* 
CRYP_InôSåu˘
)

238 
	`as£π_∑øm
(
	`IS_CRYP_ALGOMODE
(
CRYP_InôSåu˘
->
CRYP_AlgoMode
));

239 
	`as£π_∑øm
(
	`IS_CRYP_DATATYPE
(
CRYP_InôSåu˘
->
CRYP_D©aTy≥
));

240 
	`as£π_∑øm
(
	`IS_CRYP_ALGODIR
(
CRYP_InôSåu˘
->
CRYP_AlgoDú
));

243 
CRYP
->
CR
 &~
CRYP_CR_ALGOMODE
;

244 
CRYP
->
CR
 |
CRYP_InôSåu˘
->
CRYP_AlgoMode
;

247 
CRYP
->
CR
 &~
CRYP_CR_DATATYPE
;

248 
CRYP
->
CR
 |
CRYP_InôSåu˘
->
CRYP_D©aTy≥
;

251 i‡((
CRYP_InôSåu˘
->
CRYP_AlgoMode
 !
CRYP_AlgoMode_TDES_ECB
) &&

252 (
CRYP_InôSåu˘
->
CRYP_AlgoMode
 !
CRYP_AlgoMode_TDES_CBC
) &&

253 (
CRYP_InôSåu˘
->
CRYP_AlgoMode
 !
CRYP_AlgoMode_DES_ECB
) &&

254 (
CRYP_InôSåu˘
->
CRYP_AlgoMode
 !
CRYP_AlgoMode_DES_CBC
))

256 
	`as£π_∑øm
(
	`IS_CRYP_KEYSIZE
(
CRYP_InôSåu˘
->
CRYP_KeySize
));

257 
CRYP
->
CR
 &~
CRYP_CR_KEYSIZE
;

258 
CRYP
->
CR
 |
CRYP_InôSåu˘
->
CRYP_KeySize
;

264 
CRYP
->
CR
 &~
CRYP_CR_ALGODIR
;

265 
CRYP
->
CR
 |
CRYP_InôSåu˘
->
CRYP_AlgoDú
;

266 
	}
}

274 
	$CRYP_Såu˘Inô
(
CRYP_InôTy≥Def
* 
CRYP_InôSåu˘
)

277 
CRYP_InôSåu˘
->
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

280 
CRYP_InôSåu˘
->
CRYP_AlgoMode
 = 
CRYP_AlgoMode_TDES_ECB
;

283 
CRYP_InôSåu˘
->
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_32b
;

286 
CRYP_InôSåu˘
->
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

287 
	}
}

296 
	$CRYP_KeyInô
(
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
)

299 
CRYP
->
K0LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key0Le·
;

300 
CRYP
->
K0RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key0Right
;

301 
CRYP
->
K1LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key1Le·
;

302 
CRYP
->
K1RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key1Right
;

303 
CRYP
->
K2LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key2Le·
;

304 
CRYP
->
K2RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key2Right
;

305 
CRYP
->
K3LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key3Le·
;

306 
CRYP
->
K3RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key3Right
;

307 
	}
}

315 
	$CRYP_KeySåu˘Inô
(
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
)

317 
CRYP_KeyInôSåu˘
->
CRYP_Key0Le·
 = 0;

318 
CRYP_KeyInôSåu˘
->
CRYP_Key0Right
 = 0;

319 
CRYP_KeyInôSåu˘
->
CRYP_Key1Le·
 = 0;

320 
CRYP_KeyInôSåu˘
->
CRYP_Key1Right
 = 0;

321 
CRYP_KeyInôSåu˘
->
CRYP_Key2Le·
 = 0;

322 
CRYP_KeyInôSåu˘
->
CRYP_Key2Right
 = 0;

323 
CRYP_KeyInôSåu˘
->
CRYP_Key3Le·
 = 0;

324 
CRYP_KeyInôSåu˘
->
CRYP_Key3Right
 = 0;

325 
	}
}

333 
	$CRYP_IVInô
(
CRYP_IVInôTy≥Def
* 
CRYP_IVInôSåu˘
)

335 
CRYP
->
IV0LR
 = 
CRYP_IVInôSåu˘
->
CRYP_IV0Le·
;

336 
CRYP
->
IV0RR
 = 
CRYP_IVInôSåu˘
->
CRYP_IV0Right
;

337 
CRYP
->
IV1LR
 = 
CRYP_IVInôSåu˘
->
CRYP_IV1Le·
;

338 
CRYP
->
IV1RR
 = 
CRYP_IVInôSåu˘
->
CRYP_IV1Right
;

339 
	}
}

347 
	$CRYP_IVSåu˘Inô
(
CRYP_IVInôTy≥Def
* 
CRYP_IVInôSåu˘
)

349 
CRYP_IVInôSåu˘
->
CRYP_IV0Le·
 = 0;

350 
CRYP_IVInôSåu˘
->
CRYP_IV0Right
 = 0;

351 
CRYP_IVInôSåu˘
->
CRYP_IV1Le·
 = 0;

352 
CRYP_IVInôSåu˘
->
CRYP_IV1Right
 = 0;

353 
	}
}

366 
	$CRYP_Pha£C⁄fig
(
uöt32_t
 
CRYP_Pha£
)

367 { 
uöt32_t
 
ãmp¸
 = 0;

370 
	`as£π_∑øm
(
	`IS_CRYP_PHASE
(
CRYP_Pha£
));

373 
ãmp¸
 = 
CRYP
->
CR
;

376 
ãmp¸
 &(
uöt32_t
)(~
CRYP_CR_GCM_CCMPH
);

378 
ãmp¸
 |(
uöt32_t
)
CRYP_Pha£
;

381 
CRYP
->
CR
 = 
ãmp¸
;

382 
	}
}

391 
	$CRYP_FIFOFlush
()

394 
CRYP
->
CR
 |
CRYP_CR_FFLUSH
;

395 
	}
}

403 
	$CRYP_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

406 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

408 i‡(
NewSèã
 !
DISABLE
)

411 
CRYP
->
CR
 |
CRYP_CR_CRYPEN
;

416 
CRYP
->
CR
 &~
CRYP_CR_CRYPEN
;

418 
	}
}

446 
	$CRYP_D©aIn
(
uöt32_t
 
D©a
)

448 
CRYP
->
DR
 = 
D©a
;

449 
	}
}

456 
uöt32_t
 
	$CRYP_D©aOut
()

458  
CRYP
->
DOUT
;

459 
	}
}

497 
Eº‹Sètus
 
	$CRYP_SaveC⁄ãxt
(
CRYP_C⁄ãxt
* 
CRYP_C⁄ãxtSave
,

498 
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
)

500 
__IO
 
uöt32_t
 
timeout
 = 0;

501 
uöt32_t
 
ckeckmask
 = 0, 
bô°©us
;

502 
Eº‹Sètus
 
°©us
 = 
ERROR
;

505 
CRYP
->
DMACR
 &~(
uöt32_t
)
CRYP_DMACR_DIEN
;

511 i‡((
CRYP
->
CR
 & (
uöt32_t
)(
CRYP_CR_ALGOMODE_TDES_ECB
 | 
CRYP_CR_ALGOMODE_TDES_CBC
)) != (uint32_t)0 )

513 
ckeckmask
 = 
CRYP_SR_IFEM
 | 
CRYP_SR_BUSY
 ;

517 
ckeckmask
 = 
CRYP_SR_IFEM
 | 
CRYP_SR_BUSY
 | 
CRYP_SR_OFNE
;

522 
bô°©us
 = 
CRYP
->
SR
 & 
ckeckmask
;

523 
timeout
++;

525 (
timeout
 !
MAX_TIMEOUT
Ë&& (
bô°©us
 !
CRYP_SR_IFEM
));

527 i‡((
CRYP
->
SR
 & 
ckeckmask
Ë!
CRYP_SR_IFEM
)

529 
°©us
 = 
ERROR
;

537 
CRYP
->
DMACR
 &~(
uöt32_t
)
CRYP_DMACR_DOEN
;

538 
CRYP
->
CR
 &~(
uöt32_t
)
CRYP_CR_CRYPEN
;

541 
CRYP_C⁄ãxtSave
->
CR_CuºítC⁄fig
 = 
CRYP
->
CR
 & (
CRYP_CR_GCM_CCMPH
 |

542 
CRYP_CR_KEYSIZE
 |

543 
CRYP_CR_DATATYPE
 |

544 
CRYP_CR_ALGOMODE
 |

545 
CRYP_CR_ALGODIR
);

548 
CRYP_C⁄ãxtSave
->
CRYP_IV0LR
 = 
CRYP
->
IV0LR
;

549 
CRYP_C⁄ãxtSave
->
CRYP_IV0RR
 = 
CRYP
->
IV0RR
;

550 
CRYP_C⁄ãxtSave
->
CRYP_IV1LR
 = 
CRYP
->
IV1LR
;

551 
CRYP_C⁄ãxtSave
->
CRYP_IV1RR
 = 
CRYP
->
IV1RR
;

554 
CRYP_C⁄ãxtSave
->
CRYP_K0LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key0Le·
;

555 
CRYP_C⁄ãxtSave
->
CRYP_K0RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key0Right
;

556 
CRYP_C⁄ãxtSave
->
CRYP_K1LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key1Le·
;

557 
CRYP_C⁄ãxtSave
->
CRYP_K1RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key1Right
;

558 
CRYP_C⁄ãxtSave
->
CRYP_K2LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key2Le·
;

559 
CRYP_C⁄ãxtSave
->
CRYP_K2RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key2Right
;

560 
CRYP_C⁄ãxtSave
->
CRYP_K3LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key3Le·
;

561 
CRYP_C⁄ãxtSave
->
CRYP_K3RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key3Right
;

564 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMCCMR
[0] = 
CRYP
->
CSGCMCCM0R
;

565 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMCCMR
[1] = 
CRYP
->
CSGCMCCM1R
;

566 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMCCMR
[2] = 
CRYP
->
CSGCMCCM2R
;

567 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMCCMR
[3] = 
CRYP
->
CSGCMCCM3R
;

568 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMCCMR
[4] = 
CRYP
->
CSGCMCCM4R
;

569 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMCCMR
[5] = 
CRYP
->
CSGCMCCM5R
;

570 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMCCMR
[6] = 
CRYP
->
CSGCMCCM6R
;

571 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMCCMR
[7] = 
CRYP
->
CSGCMCCM7R
;

573 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMR
[0] = 
CRYP
->
CSGCM0R
;

574 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMR
[1] = 
CRYP
->
CSGCM1R
;

575 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMR
[2] = 
CRYP
->
CSGCM2R
;

576 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMR
[3] = 
CRYP
->
CSGCM3R
;

577 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMR
[4] = 
CRYP
->
CSGCM4R
;

578 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMR
[5] = 
CRYP
->
CSGCM5R
;

579 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMR
[6] = 
CRYP
->
CSGCM6R
;

580 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMR
[7] = 
CRYP
->
CSGCM7R
;

585 
°©us
 = 
SUCCESS
;

588  
°©us
;

589 
	}
}

602 
	$CRYP_Re°‹eC⁄ãxt
(
CRYP_C⁄ãxt
* 
CRYP_C⁄ãxtRe°‹e
)

606 
CRYP
->
CR
 = 
CRYP_C⁄ãxtRe°‹e
->
CR_CuºítC⁄fig
;

609 
CRYP
->
K0LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K0LR
;

610 
CRYP
->
K0RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K0RR
;

611 
CRYP
->
K1LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K1LR
;

612 
CRYP
->
K1RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K1RR
;

613 
CRYP
->
K2LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K2LR
;

614 
CRYP
->
K2RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K2RR
;

615 
CRYP
->
K3LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K3LR
;

616 
CRYP
->
K3RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K3RR
;

619 
CRYP
->
IV0LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_IV0LR
;

620 
CRYP
->
IV0RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_IV0RR
;

621 
CRYP
->
IV1LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_IV1LR
;

622 
CRYP
->
IV1RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_IV1RR
;

625 
CRYP
->
CSGCMCCM0R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMCCMR
[0];

626 
CRYP
->
CSGCMCCM1R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMCCMR
[1];

627 
CRYP
->
CSGCMCCM2R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMCCMR
[2];

628 
CRYP
->
CSGCMCCM3R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMCCMR
[3];

629 
CRYP
->
CSGCMCCM4R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMCCMR
[4];

630 
CRYP
->
CSGCMCCM5R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMCCMR
[5];

631 
CRYP
->
CSGCMCCM6R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMCCMR
[6];

632 
CRYP
->
CSGCMCCM7R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMCCMR
[7];

634 
CRYP
->
CSGCM0R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMR
[0];

635 
CRYP
->
CSGCM1R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMR
[1];

636 
CRYP
->
CSGCM2R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMR
[2];

637 
CRYP
->
CSGCM3R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMR
[3];

638 
CRYP
->
CSGCM4R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMR
[4];

639 
CRYP
->
CSGCM5R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMR
[5];

640 
CRYP
->
CSGCM6R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMR
[6];

641 
CRYP
->
CSGCM7R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMR
[7];

644 
CRYP
->
CR
 |
CRYP_CR_CRYPEN
;

645 
	}
}

681 
	$CRYP_DMACmd
(
uöt8_t
 
CRYP_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

684 
	`as£π_∑øm
(
	`IS_CRYP_DMAREQ
(
CRYP_DMAReq
));

685 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

687 i‡(
NewSèã
 !
DISABLE
)

690 
CRYP
->
DMACR
 |
CRYP_DMAReq
;

695 
CRYP
->
DMACR
 &(
uöt8_t
)~
CRYP_DMAReq
;

697 
	}
}

799 
	$CRYP_ITC⁄fig
(
uöt8_t
 
CRYP_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

802 
	`as£π_∑øm
(
	`IS_CRYP_CONFIG_IT
(
CRYP_IT
));

803 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

805 i‡(
NewSèã
 !
DISABLE
)

808 
CRYP
->
IMSCR
 |
CRYP_IT
;

813 
CRYP
->
IMSCR
 &(
uöt8_t
)~
CRYP_IT
;

815 
	}
}

827 
ITSètus
 
	$CRYP_GëITSètus
(
uöt8_t
 
CRYP_IT
)

829 
ITSètus
 
bô°©us
 = 
RESET
;

831 
	`as£π_∑øm
(
	`IS_CRYP_GET_IT
(
CRYP_IT
));

834 i‡((
CRYP
->
MISR
 & 
CRYP_IT
Ë!(
uöt8_t
)
RESET
)

837 
bô°©us
 = 
SET
;

842 
bô°©us
 = 
RESET
;

845  
bô°©us
;

846 
	}
}

853 
Fun˘i⁄ÆSèã
 
	$CRYP_GëCmdSètus
()

855 
Fun˘i⁄ÆSèã
 
°©e
 = 
DISABLE
;

857 i‡((
CRYP
->
CR
 & 
CRYP_CR_CRYPEN
) != 0)

860 
°©e
 = 
ENABLE
;

865 
°©e
 = 
DISABLE
;

867  
°©e
;

868 
	}
}

883 
FœgSètus
 
	$CRYP_GëFœgSètus
(
uöt8_t
 
CRYP_FLAG
)

885 
FœgSètus
 
bô°©us
 = 
RESET
;

886 
uöt32_t
 
ãm¥eg
 = 0;

889 
	`as£π_∑øm
(
	`IS_CRYP_GET_FLAG
(
CRYP_FLAG
));

892 i‡((
CRYP_FLAG
 & 
FLAG_MASK
) != 0x00)

894 
ãm¥eg
 = 
CRYP
->
RISR
;

898 
ãm¥eg
 = 
CRYP
->
SR
;

903 i‡((
ãm¥eg
 & 
CRYP_FLAG
 ) !(
uöt8_t
)
RESET
)

906 
bô°©us
 = 
SET
;

911 
bô°©us
 = 
RESET
;

915  
bô°©us
;

916 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c

55 
	~"°m32f4xx_¸yp.h
"

68 
	#AESBUSY_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

106 
Eº‹Sètus
 
	$CRYP_AES_ECB
(
uöt8_t
 
Mode
, uöt8_t* 
Key
, 
uöt16_t
 
Keysize
,

107 
uöt8_t
* 
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_t* 
Ouçut
)

109 
CRYP_InôTy≥Def
 
AES_CRYP_InôSåu˘uª
;

110 
CRYP_KeyInôTy≥Def
 
AES_CRYP_KeyInôSåu˘uª
;

111 
__IO
 
uöt32_t
 
cou¡î
 = 0;

112 
uöt32_t
 
busy°©us
 = 0;

113 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

114 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

115 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

116 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

117 
uöt32_t
 
i
 = 0;

120 
	`CRYP_KeySåu˘Inô
(&
AES_CRYP_KeyInôSåu˘uª
);

122 
Keysize
)

125 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

126 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

127 
keyaddr
+=4;

128 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

129 
keyaddr
+=4;

130 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

131 
keyaddr
+=4;

132 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

135 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_192b
;

136 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

137 
keyaddr
+=4;

138 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

139 
keyaddr
+=4;

140 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

141 
keyaddr
+=4;

142 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

143 
keyaddr
+=4;

144 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

145 
keyaddr
+=4;

146 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

149 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_256b
;

150 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

151 
keyaddr
+=4;

152 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

153 
keyaddr
+=4;

154 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

155 
keyaddr
+=4;

156 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

157 
keyaddr
+=4;

158 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

159 
keyaddr
+=4;

160 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

161 
keyaddr
+=4;

162 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

163 
keyaddr
+=4;

164 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

171 if(
Mode
 =
MODE_DECRYPT
)

174 
	`CRYP_FIFOFlush
();

177 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

178 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_Key
;

179 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_32b
;

180 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

183 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

186 
	`CRYP_Cmd
(
ENABLE
);

191 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

192 
cou¡î
++;

193 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

195 i‡(
busy°©us
 !
RESET
)

197 
°©us
 = 
ERROR
;

202 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

209 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

212 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

215 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_ECB
;

216 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

217 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

220 
	`CRYP_FIFOFlush
();

223 
	`CRYP_Cmd
(
ENABLE
);

225 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

229 (
ERROR
);

232 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=16)

236 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

237 
öpuèddr
+=4;

238 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

239 
öpuèddr
+=4;

240 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

241 
öpuèddr
+=4;

242 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

243 
öpuèddr
+=4;

246 
cou¡î
 = 0;

249 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

250 
cou¡î
++;

251 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

253 i‡(
busy°©us
 !
RESET
)

255 
°©us
 = 
ERROR
;

261 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

262 
ouçuèddr
+=4;

263 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

264 
ouçuèddr
+=4;

265 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

266 
ouçuèddr
+=4;

267 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

268 
ouçuèddr
+=4;

273 
	`CRYP_Cmd
(
DISABLE
);

275  
°©us
;

276 
	}
}

294 
Eº‹Sètus
 
	$CRYP_AES_CBC
(
uöt8_t
 
Mode
, uöt8_à
InôVe˘‹s
[16], uöt8_à*
Key
,

295 
uöt16_t
 
Keysize
, 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

296 
uöt8_t
 *
Ouçut
)

298 
CRYP_InôTy≥Def
 
AES_CRYP_InôSåu˘uª
;

299 
CRYP_KeyInôTy≥Def
 
AES_CRYP_KeyInôSåu˘uª
;

300 
CRYP_IVInôTy≥Def
 
AES_CRYP_IVInôSåu˘uª
;

301 
__IO
 
uöt32_t
 
cou¡î
 = 0;

302 
uöt32_t
 
busy°©us
 = 0;

303 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

304 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

305 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

306 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

307 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

308 
uöt32_t
 
i
 = 0;

311 
	`CRYP_KeySåu˘Inô
(&
AES_CRYP_KeyInôSåu˘uª
);

313 
Keysize
)

316 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

317 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

318 
keyaddr
+=4;

319 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

320 
keyaddr
+=4;

321 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

322 
keyaddr
+=4;

323 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

326 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_192b
;

327 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

328 
keyaddr
+=4;

329 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

330 
keyaddr
+=4;

331 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

332 
keyaddr
+=4;

333 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

334 
keyaddr
+=4;

335 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

336 
keyaddr
+=4;

337 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

340 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_256b
;

341 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

342 
keyaddr
+=4;

343 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

344 
keyaddr
+=4;

345 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

346 
keyaddr
+=4;

347 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

348 
keyaddr
+=4;

349 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

350 
keyaddr
+=4;

351 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

352 
keyaddr
+=4;

353 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

354 
keyaddr
+=4;

355 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

362 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

363 
ivaddr
+=4;

364 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

365 
ivaddr
+=4;

366 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

367 
ivaddr
+=4;

368 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

372 if(
Mode
 =
MODE_DECRYPT
)

375 
	`CRYP_FIFOFlush
();

378 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

379 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_Key
;

380 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_32b
;

382 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

385 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

388 
	`CRYP_Cmd
(
ENABLE
);

393 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

394 
cou¡î
++;

395 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

397 i‡(
busy°©us
 !
RESET
)

399 
°©us
 = 
ERROR
;

404 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

410 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

413 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

415 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_CBC
;

416 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

417 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

420 
	`CRYP_IVInô
(&
AES_CRYP_IVInôSåu˘uª
);

423 
	`CRYP_FIFOFlush
();

426 
	`CRYP_Cmd
(
ENABLE
);

428 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

432 (
ERROR
);

435 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=16)

439 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

440 
öpuèddr
+=4;

441 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

442 
öpuèddr
+=4;

443 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

444 
öpuèddr
+=4;

445 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

446 
öpuèddr
+=4;

448 
cou¡î
 = 0;

451 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

452 
cou¡î
++;

453 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

455 i‡(
busy°©us
 !
RESET
)

457 
°©us
 = 
ERROR
;

463 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

464 
ouçuèddr
+=4;

465 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

466 
ouçuèddr
+=4;

467 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

468 
ouçuèddr
+=4;

469 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

470 
ouçuèddr
+=4;

475 
	`CRYP_Cmd
(
DISABLE
);

477  
°©us
;

478 
	}
}

496 
Eº‹Sètus
 
	$CRYP_AES_CTR
(
uöt8_t
 
Mode
, uöt8_à
InôVe˘‹s
[16], uöt8_à*
Key
,

497 
uöt16_t
 
Keysize
, 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

498 
uöt8_t
 *
Ouçut
)

500 
CRYP_InôTy≥Def
 
AES_CRYP_InôSåu˘uª
;

501 
CRYP_KeyInôTy≥Def
 
AES_CRYP_KeyInôSåu˘uª
;

502 
CRYP_IVInôTy≥Def
 
AES_CRYP_IVInôSåu˘uª
;

503 
__IO
 
uöt32_t
 
cou¡î
 = 0;

504 
uöt32_t
 
busy°©us
 = 0;

505 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

506 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

507 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

508 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

509 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

510 
uöt32_t
 
i
 = 0;

513 
	`CRYP_KeySåu˘Inô
(&
AES_CRYP_KeyInôSåu˘uª
);

515 
Keysize
)

518 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

519 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

520 
keyaddr
+=4;

521 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

522 
keyaddr
+=4;

523 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

524 
keyaddr
+=4;

525 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

528 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_192b
;

529 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

530 
keyaddr
+=4;

531 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

532 
keyaddr
+=4;

533 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

534 
keyaddr
+=4;

535 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

536 
keyaddr
+=4;

537 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

538 
keyaddr
+=4;

539 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

542 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_256b
;

543 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

544 
keyaddr
+=4;

545 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

546 
keyaddr
+=4;

547 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

548 
keyaddr
+=4;

549 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

550 
keyaddr
+=4;

551 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

552 
keyaddr
+=4;

553 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

554 
keyaddr
+=4;

555 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

556 
keyaddr
+=4;

557 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

563 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

564 
ivaddr
+=4;

565 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

566 
ivaddr
+=4;

567 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

568 
ivaddr
+=4;

569 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

572 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

575 if(
Mode
 =
MODE_DECRYPT
)

578 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

584 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

586 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_CTR
;

587 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

588 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

591 
	`CRYP_IVInô
(&
AES_CRYP_IVInôSåu˘uª
);

594 
	`CRYP_FIFOFlush
();

597 
	`CRYP_Cmd
(
ENABLE
);

599 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

603 (
ERROR
);

606 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=16)

610 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

611 
öpuèddr
+=4;

612 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

613 
öpuèddr
+=4;

614 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

615 
öpuèddr
+=4;

616 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

617 
öpuèddr
+=4;

619 
cou¡î
 = 0;

622 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

623 
cou¡î
++;

624 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

626 i‡(
busy°©us
 !
RESET
)

628 
°©us
 = 
ERROR
;

634 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

635 
ouçuèddr
+=4;

636 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

637 
ouçuèddr
+=4;

638 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

639 
ouçuèddr
+=4;

640 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

641 
ouçuèddr
+=4;

645 
	`CRYP_Cmd
(
DISABLE
);

647  
°©us
;

648 
	}
}

670 
Eº‹Sètus
 
	$CRYP_AES_GCM
(
uöt8_t
 
Mode
, uöt8_à
InôVe˘‹s
[16],

671 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

672 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
ILígth
,

673 
uöt8_t
 *
Hódî
, 
uöt32_t
 
HLígth
,

674 
uöt8_t
 *
Ouçut
, uöt8_à*
AuthTAG
)

676 
CRYP_InôTy≥Def
 
AES_CRYP_InôSåu˘uª
;

677 
CRYP_KeyInôTy≥Def
 
AES_CRYP_KeyInôSåu˘uª
;

678 
CRYP_IVInôTy≥Def
 
AES_CRYP_IVInôSåu˘uª
;

679 
__IO
 
uöt32_t
 
cou¡î
 = 0;

680 
uöt32_t
 
busy°©us
 = 0;

681 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

682 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

683 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

684 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

685 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

686 
uöt32_t
 
hódîaddr
 = (uöt32_t)
Hódî
;

687 
uöt32_t
 
ègaddr
 = (uöt32_t)
AuthTAG
;

688 
uöt64_t
 
hódîÀngth
 = 
HLígth
 * 8;

689 
uöt64_t
 
öpuéígth
 = 
ILígth
 * 8;

690 
uöt32_t
 
lo›cou¡î
 = 0;

693 
	`CRYP_KeySåu˘Inô
(&
AES_CRYP_KeyInôSåu˘uª
);

695 
Keysize
)

698 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

699 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

700 
keyaddr
+=4;

701 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

702 
keyaddr
+=4;

703 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

704 
keyaddr
+=4;

705 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

708 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_192b
;

709 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

710 
keyaddr
+=4;

711 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

712 
keyaddr
+=4;

713 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

714 
keyaddr
+=4;

715 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

716 
keyaddr
+=4;

717 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

718 
keyaddr
+=4;

719 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

722 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_256b
;

723 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

724 
keyaddr
+=4;

725 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

726 
keyaddr
+=4;

727 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

728 
keyaddr
+=4;

729 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

730 
keyaddr
+=4;

731 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

732 
keyaddr
+=4;

733 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

734 
keyaddr
+=4;

735 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

736 
keyaddr
+=4;

737 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

744 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

745 
ivaddr
+=4;

746 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

747 
ivaddr
+=4;

748 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

749 
ivaddr
+=4;

750 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

753 if(
Mode
 =
MODE_ENCRYPT
)

756 
	`CRYP_FIFOFlush
();

759 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

762 
	`CRYP_IVInô
(&
AES_CRYP_IVInôSåu˘uª
);

765 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

766 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_GCM
;

767 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

768 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

772 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Inô
);

775 
	`CRYP_Cmd
(
ENABLE
);

778 
	`CRYP_GëCmdSètus
(Ë=
ENABLE
)

783 if(
HLígth
 != 0)

786 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Hódî
);

789 
	`CRYP_Cmd
(
ENABLE
);

791 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

795 (
ERROR
);

798 
lo›cou¡î
 = 0; (lo›cou¡î < 
HLígth
);Üoopcounter+=16)

801 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_IFEM
Ë=
RESET
)

806 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

807 
hódîaddr
+=4;

808 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

809 
hódîaddr
+=4;

810 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

811 
hódîaddr
+=4;

812 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

813 
hódîaddr
+=4;

817 
cou¡î
 = 0;

820 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

821 
cou¡î
++;

822 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

824 i‡(
busy°©us
 !
RESET
)

826 
°©us
 = 
ERROR
;

831 if(
ILígth
 != 0)

834 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Paylﬂd
);

837 
	`CRYP_Cmd
(
ENABLE
);

839 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

843 (
ERROR
);

846 
lo›cou¡î
 = 0; (÷o›cou¡î < 
ILígth
Ë&& (
°©us
 !
ERROR
));Üoopcounter+=16)

849 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_IFEM
Ë=
RESET
)

853 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

854 
öpuèddr
+=4;

855 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

856 
öpuèddr
+=4;

857 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

858 
öpuèddr
+=4;

859 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

860 
öpuèddr
+=4;

863 
cou¡î
 = 0;

866 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

867 
cou¡î
++;

868 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

870 i‡(
busy°©us
 !
RESET
)

872 
°©us
 = 
ERROR
;

877 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_OFNE
Ë=
RESET
)

882 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

883 
ouçuèddr
+=4;

884 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

885 
ouçuèddr
+=4;

886 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

887 
ouçuèddr
+=4;

888 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

889 
ouçuèddr
+=4;

896 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_FöÆ
);

899 
	`CRYP_Cmd
(
ENABLE
);

901 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

905 (
ERROR
);

909 
	`CRYP_D©aIn
(
	`__REV
(
hódîÀngth
>>32));

910 
	`CRYP_D©aIn
(
	`__REV
(
hódîÀngth
));

911 
	`CRYP_D©aIn
(
	`__REV
(
öpuéígth
>>32));

912 
	`CRYP_D©aIn
(
	`__REV
(
öpuéígth
));

914 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_OFNE
Ë=
RESET
)

918 
ègaddr
 = (
uöt32_t
)
AuthTAG
;

920 *(
uöt32_t
*)(
ègaddr
Ë
	`CRYP_D©aOut
();

921 
ègaddr
+=4;

922 *(
uöt32_t
*)(
ègaddr
Ë
	`CRYP_D©aOut
();

923 
ègaddr
+=4;

924 *(
uöt32_t
*)(
ègaddr
Ë
	`CRYP_D©aOut
();

925 
ègaddr
+=4;

926 *(
uöt32_t
*)(
ègaddr
Ë
	`CRYP_D©aOut
();

927 
ègaddr
+=4;

933 
	`CRYP_FIFOFlush
();

936 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

939 
	`CRYP_IVInô
(&
AES_CRYP_IVInôSåu˘uª
);

942 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

943 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_GCM
;

944 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

945 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

949 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Inô
);

952 
	`CRYP_Cmd
(
ENABLE
);

955 
	`CRYP_GëCmdSètus
(Ë=
ENABLE
)

960 if(
HLígth
 != 0)

963 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Hódî
);

966 
	`CRYP_Cmd
(
ENABLE
);

968 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

972 (
ERROR
);

975 
lo›cou¡î
 = 0; (lo›cou¡î < 
HLígth
);Üoopcounter+=16)

978 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_IFEM
Ë=
RESET
)

983 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

984 
hódîaddr
+=4;

985 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

986 
hódîaddr
+=4;

987 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

988 
hódîaddr
+=4;

989 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

990 
hódîaddr
+=4;

994 
cou¡î
 = 0;

997 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

998 
cou¡î
++;

999 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

1001 i‡(
busy°©us
 !
RESET
)

1003 
°©us
 = 
ERROR
;

1008 if(
ILígth
 != 0)

1011 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Paylﬂd
);

1014 
	`CRYP_Cmd
(
ENABLE
);

1016 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

1020 (
ERROR
);

1023 
lo›cou¡î
 = 0; (÷o›cou¡î < 
ILígth
Ë&& (
°©us
 !
ERROR
));Üoopcounter+=16)

1026 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_IFEM
Ë=
RESET
)

1030 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1031 
öpuèddr
+=4;

1032 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1033 
öpuèddr
+=4;

1034 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1035 
öpuèddr
+=4;

1036 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1037 
öpuèddr
+=4;

1040 
cou¡î
 = 0;

1043 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

1044 
cou¡î
++;

1045 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

1047 i‡(
busy°©us
 !
RESET
)

1049 
°©us
 = 
ERROR
;

1054 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_OFNE
Ë=
RESET
)

1059 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1060 
ouçuèddr
+=4;

1061 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1062 
ouçuèddr
+=4;

1063 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1064 
ouçuèddr
+=4;

1065 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1066 
ouçuèddr
+=4;

1073 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_FöÆ
);

1076 
	`CRYP_Cmd
(
ENABLE
);

1078 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

1082 (
ERROR
);

1086 
	`CRYP_D©aIn
(
	`__REV
(
hódîÀngth
>>32));

1087 
	`CRYP_D©aIn
(
	`__REV
(
hódîÀngth
));

1088 
	`CRYP_D©aIn
(
	`__REV
(
öpuéígth
>>32));

1089 
	`CRYP_D©aIn
(
	`__REV
(
öpuéígth
));

1091 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_OFNE
Ë=
RESET
)

1095 
ègaddr
 = (
uöt32_t
)
AuthTAG
;

1097 *(
uöt32_t
*)(
ègaddr
Ë
	`CRYP_D©aOut
();

1098 
ègaddr
+=4;

1099 *(
uöt32_t
*)(
ègaddr
Ë
	`CRYP_D©aOut
();

1100 
ègaddr
+=4;

1101 *(
uöt32_t
*)(
ègaddr
Ë
	`CRYP_D©aOut
();

1102 
ègaddr
+=4;

1103 *(
uöt32_t
*)(
ègaddr
Ë
	`CRYP_D©aOut
();

1104 
ègaddr
+=4;

1107 
	`CRYP_Cmd
(
DISABLE
);

1109  
°©us
;

1110 
	}
}

1135 
Eº‹Sètus
 
	$CRYP_AES_CCM
(
uöt8_t
 
Mode
,

1136 
uöt8_t
* 
N⁄˚
, 
uöt32_t
 
N⁄˚Size
,

1137 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

1138 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
ILígth
,

1139 
uöt8_t
 *
Hódî
, 
uöt32_t
 
HLígth
, uöt8_à*
HBuf„r
,

1140 
uöt8_t
 *
Ouçut
,

1141 
uöt8_t
 *
AuthTAG
, 
uöt32_t
 
TAGSize
)

1143 
CRYP_InôTy≥Def
 
AES_CRYP_InôSåu˘uª
;

1144 
CRYP_KeyInôTy≥Def
 
AES_CRYP_KeyInôSåu˘uª
;

1145 
CRYP_IVInôTy≥Def
 
AES_CRYP_IVInôSåu˘uª
;

1146 
__IO
 
uöt32_t
 
cou¡î
 = 0;

1147 
uöt32_t
 
busy°©us
 = 0;

1148 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

1149 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

1150 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

1151 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

1152 
uöt32_t
 
hódîaddr
 = (uöt32_t)
Hódî
;

1153 
uöt32_t
 
ègaddr
 = (uöt32_t)
AuthTAG
;

1154 
uöt32_t
 
hódîsize
 = 
HLígth
;

1155 
uöt32_t
 
lo›cou¡î
 = 0;

1156 
uöt32_t
 
buf„ridx
 = 0;

1157 
uöt8_t
 
blockb0
[16] = {0};

1158 
uöt8_t
 
˘r
[16] = {0};

1159 
uöt32_t
 
ãm±ag
[4] = {0};

1160 
uöt32_t
 
˘øddr
 = (uöt32_t)
˘r
;

1161 
uöt32_t
 
b0addr
 = (uöt32_t)
blockb0
;

1164 if(
hódîsize
 != 0)

1167 if(
hódîsize
 < 65280)

1169 
HBuf„r
[
buf„ridx
++] = (
uöt8_t
Ë((
hódîsize
 >> 8) & 0xFF);

1170 
HBuf„r
[
buf„ridx
++] = (
uöt8_t
Ë((
hódîsize
) & 0xFF);

1171 
hódîsize
 += 2;

1176 
HBuf„r
[
buf„ridx
++] = 0xFF;

1177 
HBuf„r
[
buf„ridx
++] = 0xFE;

1178 
HBuf„r
[
buf„ridx
++] = 
hódîsize
 & 0xff000000;

1179 
HBuf„r
[
buf„ridx
++] = 
hódîsize
 & 0x00ff0000;

1180 
HBuf„r
[
buf„ridx
++] = 
hódîsize
 & 0x0000ff00;

1181 
HBuf„r
[
buf„ridx
++] = 
hódîsize
 & 0x000000ff;

1182 
hódîsize
 += 6;

1185 
lo›cou¡î
 = 0;Üo›cou¡î < 
hódîsize
;Üoopcounter++)

1187 
HBuf„r
[
buf„ridx
++] = 
Hódî
[
lo›cou¡î
];

1190 i‡((
hódîsize
 % 16) != 0)

1193 
lo›cou¡î
 = 
hódîsize
;Üoopcounter <= ((headersize/16) + 1) * 16;Üoopcounter++)

1195 
HBuf„r
[
lo›cou¡î
] = 0;

1198 
hódîsize
 = ((headersize/16) + 1) * 16;

1201 
hódîaddr
 = (
uöt32_t
)
HBuf„r
;

1204 if(
hódîsize
 != 0)

1206 
blockb0
[0] = 0x40;

1209 
blockb0
[0] |0u | (((–(
uöt8_t
Ë
TAGSize
 - 2Ë/ 2Ë& 0x07 ) << 3 ) | ( ( (uöt8_tË(15 - 
N⁄˚Size
) - 1) & 0x07);

1211 
lo›cou¡î
 = 0;Üo›cou¡î < 
N⁄˚Size
;Üoopcounter++)

1213 
blockb0
[
lo›cou¡î
+1] = 
N⁄˚
[loopcounter];

1215  ; 
lo›cou¡î
 < 13;Üoopcounter++)

1217 
blockb0
[
lo›cou¡î
+1] = 0;

1220 
blockb0
[14] = ((
ILígth
 >> 8) & 0xFF);

1221 
blockb0
[15] = (
ILígth
 & 0xFF);

1230 
˘r
[0] = 
blockb0
[0] & 0x07;

1232 
lo›cou¡î
 = 1;Üo›cou¡î < 
N⁄˚Size
 + 1;Üoopcounter++)

1234 
˘r
[
lo›cou¡î
] = 
blockb0
[loopcounter];

1237 
˘r
[15] |= 0x01;

1240 
	`CRYP_KeySåu˘Inô
(&
AES_CRYP_KeyInôSåu˘uª
);

1242 
Keysize
)

1245 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

1246 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1247 
keyaddr
+=4;

1248 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1249 
keyaddr
+=4;

1250 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1251 
keyaddr
+=4;

1252 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1255 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_192b
;

1256 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1257 
keyaddr
+=4;

1258 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1259 
keyaddr
+=4;

1260 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1261 
keyaddr
+=4;

1262 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1263 
keyaddr
+=4;

1264 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1265 
keyaddr
+=4;

1266 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1269 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_256b
;

1270 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1271 
keyaddr
+=4;

1272 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1273 
keyaddr
+=4;

1274 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1275 
keyaddr
+=4;

1276 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1277 
keyaddr
+=4;

1278 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1279 
keyaddr
+=4;

1280 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1281 
keyaddr
+=4;

1282 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1283 
keyaddr
+=4;

1284 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1291 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = (
	`__REV
(*(
uöt32_t
*)(
˘øddr
)));

1292 
˘øddr
+=4;

1293 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right
(
	`__REV
(*(
uöt32_t
*)(
˘øddr
)));

1294 
˘øddr
+=4;

1295 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Le·
 = (
	`__REV
(*(
uöt32_t
*)(
˘øddr
)));

1296 
˘øddr
+=4;

1297 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Right
(
	`__REV
(*(
uöt32_t
*)(
˘øddr
)));

1300 if(
Mode
 =
MODE_ENCRYPT
)

1303 
	`CRYP_FIFOFlush
();

1306 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

1309 
	`CRYP_IVInô
(&
AES_CRYP_IVInôSåu˘uª
);

1312 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

1313 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_CCM
;

1314 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

1315 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

1319 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Inô
);

1321 
b0addr
 = (
uöt32_t
)
blockb0
;

1323 
	`CRYP_D©aIn
((*(
uöt32_t
*)(
b0addr
)));

1324 
b0addr
+=4;

1325 
	`CRYP_D©aIn
((*(
uöt32_t
*)(
b0addr
)));

1326 
b0addr
+=4;

1327 
	`CRYP_D©aIn
((*(
uöt32_t
*)(
b0addr
)));

1328 
b0addr
+=4;

1329 
	`CRYP_D©aIn
((*(
uöt32_t
*)(
b0addr
)));

1332 
	`CRYP_Cmd
(
ENABLE
);

1335 
	`CRYP_GëCmdSètus
(Ë=
ENABLE
)

1339 if(
hódîsize
 != 0)

1342 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Hódî
);

1345 
	`CRYP_Cmd
(
ENABLE
);

1347 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

1351 (
ERROR
);

1354 
lo›cou¡î
 = 0; (lo›cou¡î < 
hódîsize
);Üoopcounter+=16)

1357 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_IFEM
Ë=
RESET
)

1362 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

1363 
hódîaddr
+=4;

1364 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

1365 
hódîaddr
+=4;

1366 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

1367 
hódîaddr
+=4;

1368 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

1369 
hódîaddr
+=4;

1373 
cou¡î
 = 0;

1376 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

1377 
cou¡î
++;

1378 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

1380 i‡(
busy°©us
 !
RESET
)

1382 
°©us
 = 
ERROR
;

1387 if(
ILígth
 != 0)

1390 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Paylﬂd
);

1393 
	`CRYP_Cmd
(
ENABLE
);

1395 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

1399 (
ERROR
);

1402 
lo›cou¡î
 = 0; (÷o›cou¡î < 
ILígth
Ë&& (
°©us
 !
ERROR
));Üoopcounter+=16)

1405 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_IFEM
Ë=
RESET
)

1410 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1411 
öpuèddr
+=4;

1412 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1413 
öpuèddr
+=4;

1414 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1415 
öpuèddr
+=4;

1416 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1417 
öpuèddr
+=4;

1420 
cou¡î
 = 0;

1423 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

1424 
cou¡î
++;

1425 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

1427 i‡(
busy°©us
 !
RESET
)

1429 
°©us
 = 
ERROR
;

1434 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_OFNE
Ë=
RESET
)

1439 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1440 
ouçuèddr
+=4;

1441 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1442 
ouçuèddr
+=4;

1443 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1444 
ouçuèddr
+=4;

1445 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1446 
ouçuèddr
+=4;

1453 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_FöÆ
);

1456 
	`CRYP_Cmd
(
ENABLE
);

1458 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

1462 (
ERROR
);

1465 
˘øddr
 = (
uöt32_t
)
˘r
;

1467 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
˘øddr
));

1468 
˘øddr
+=4;

1469 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
˘øddr
));

1470 
˘øddr
+=4;

1471 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
˘øddr
));

1472 
˘øddr
+=4;

1474 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
˘øddr
) & 0xfeffffff);

1477 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_OFNE
Ë=
RESET
)

1482 
ãm±ag
[0] = 
	`CRYP_D©aOut
();

1483 
ãm±ag
[1] = 
	`CRYP_D©aOut
();

1484 
ãm±ag
[2] = 
	`CRYP_D©aOut
();

1485 
ãm±ag
[3] = 
	`CRYP_D©aOut
();

1491 
	`CRYP_FIFOFlush
();

1494 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

1497 
	`CRYP_IVInô
(&
AES_CRYP_IVInôSåu˘uª
);

1500 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

1501 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_CCM
;

1502 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

1503 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

1507 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Inô
);

1509 
b0addr
 = (
uöt32_t
)
blockb0
;

1511 
	`CRYP_D©aIn
((*(
uöt32_t
*)(
b0addr
)));

1512 
b0addr
+=4;

1513 
	`CRYP_D©aIn
((*(
uöt32_t
*)(
b0addr
)));

1514 
b0addr
+=4;

1515 
	`CRYP_D©aIn
((*(
uöt32_t
*)(
b0addr
)));

1516 
b0addr
+=4;

1517 
	`CRYP_D©aIn
((*(
uöt32_t
*)(
b0addr
)));

1520 
	`CRYP_Cmd
(
ENABLE
);

1523 
	`CRYP_GëCmdSètus
(Ë=
ENABLE
)

1528 if(
hódîsize
 != 0)

1531 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Hódî
);

1534 
	`CRYP_Cmd
(
ENABLE
);

1536 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

1540 (
ERROR
);

1543 
lo›cou¡î
 = 0; (lo›cou¡î < 
hódîsize
);Üoopcounter+=16)

1546 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_IFEM
Ë=
RESET
)

1551 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

1552 
hódîaddr
+=4;

1553 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

1554 
hódîaddr
+=4;

1555 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

1556 
hódîaddr
+=4;

1557 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

1558 
hódîaddr
+=4;

1562 
cou¡î
 = 0;

1565 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

1566 
cou¡î
++;

1567 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

1569 i‡(
busy°©us
 !
RESET
)

1571 
°©us
 = 
ERROR
;

1576 if(
ILígth
 != 0)

1579 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Paylﬂd
);

1582 
	`CRYP_Cmd
(
ENABLE
);

1584 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

1588 (
ERROR
);

1591 
lo›cou¡î
 = 0; (÷o›cou¡î < 
ILígth
Ë&& (
°©us
 !
ERROR
));Üoopcounter+=16)

1594 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_IFEM
Ë=
RESET
)

1599 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1600 
öpuèddr
+=4;

1601 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1602 
öpuèddr
+=4;

1603 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1604 
öpuèddr
+=4;

1605 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1606 
öpuèddr
+=4;

1609 
cou¡î
 = 0;

1612 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

1613 
cou¡î
++;

1614 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

1616 i‡(
busy°©us
 !
RESET
)

1618 
°©us
 = 
ERROR
;

1623 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_OFNE
Ë=
RESET
)

1628 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1629 
ouçuèddr
+=4;

1630 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1631 
ouçuèddr
+=4;

1632 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1633 
ouçuèddr
+=4;

1634 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1635 
ouçuèddr
+=4;

1642 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_FöÆ
);

1645 
	`CRYP_Cmd
(
ENABLE
);

1647 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

1651 (
ERROR
);

1654 
˘øddr
 = (
uöt32_t
)
˘r
;

1656 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
˘øddr
));

1657 
˘øddr
+=4;

1658 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
˘øddr
));

1659 
˘øddr
+=4;

1660 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
˘øddr
));

1661 
˘øddr
+=4;

1663 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
˘øddr
) & 0xfeffffff);

1666 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_OFNE
Ë=
RESET
)

1671 
ãm±ag
[0] = 
	`CRYP_D©aOut
();

1672 
ãm±ag
[1] = 
	`CRYP_D©aOut
();

1673 
ãm±ag
[2] = 
	`CRYP_D©aOut
();

1674 
ãm±ag
[3] = 
	`CRYP_D©aOut
();

1678 
lo›cou¡î
 = 0; (lo›cou¡î < 
TAGSize
);Üoopcounter++)

1681 *((
uöt8_t
*)
ègaddr
+
lo›cou¡î
Ë*((uöt8_t*)
ãm±ag
+loopcounter);

1685 
	`CRYP_Cmd
(
DISABLE
);

1687  
°©us
;

1688 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c

48 
	~"°m32f4xx_¸yp.h
"

62 
	#DESBUSY_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

99 
Eº‹Sètus
 
	$CRYP_DES_ECB
(
uöt8_t
 
Mode
, uöt8_à
Key
[8], uöt8_à*
I≈ut
,

100 
uöt32_t
 
IÀngth
, 
uöt8_t
 *
Ouçut
)

102 
CRYP_InôTy≥Def
 
DES_CRYP_InôSåu˘uª
;

103 
CRYP_KeyInôTy≥Def
 
DES_CRYP_KeyInôSåu˘uª
;

104 
__IO
 
uöt32_t
 
cou¡î
 = 0;

105 
uöt32_t
 
busy°©us
 = 0;

106 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

107 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

108 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

109 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

110 
uöt32_t
 
i
 = 0;

113 
	`CRYP_KeySåu˘Inô
(&
DES_CRYP_KeyInôSåu˘uª
);

116 if–
Mode
 =
MODE_ENCRYPT
 )

118 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

122 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

125 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_DES_ECB
;

126 
DES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

127 
	`CRYP_Inô
(&
DES_CRYP_InôSåu˘uª
);

130 
DES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

131 
keyaddr
+=4;

132 
DES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

133 
	`CRYP_KeyInô
(& 
DES_CRYP_KeyInôSåu˘uª
);

136 
	`CRYP_FIFOFlush
();

139 
	`CRYP_Cmd
(
ENABLE
);

141 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

145 (
ERROR
);

147 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=8)

151 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

152 
öpuèddr
+=4;

153 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

154 
öpuèddr
+=4;

157 
cou¡î
 = 0;

160 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

161 
cou¡î
++;

162 }(
cou¡î
 !
DESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

164 i‡(
busy°©us
 !
RESET
)

166 
°©us
 = 
ERROR
;

172 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

173 
ouçuèddr
+=4;

174 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

175 
ouçuèddr
+=4;

180 
	`CRYP_Cmd
(
DISABLE
);

182  
°©us
;

183 
	}
}

200 
Eº‹Sètus
 
	$CRYP_DES_CBC
(
uöt8_t
 
Mode
, uöt8_à
Key
[8], uöt8_à
InôVe˘‹s
[8],

201 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_à*
Ouçut
)

203 
CRYP_InôTy≥Def
 
DES_CRYP_InôSåu˘uª
;

204 
CRYP_KeyInôTy≥Def
 
DES_CRYP_KeyInôSåu˘uª
;

205 
CRYP_IVInôTy≥Def
 
DES_CRYP_IVInôSåu˘uª
;

206 
__IO
 
uöt32_t
 
cou¡î
 = 0;

207 
uöt32_t
 
busy°©us
 = 0;

208 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

209 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

210 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

211 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

212 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

213 
uöt32_t
 
i
 = 0;

216 
	`CRYP_KeySåu˘Inô
(&
DES_CRYP_KeyInôSåu˘uª
);

219 if(
Mode
 =
MODE_ENCRYPT
)

221 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

225 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

228 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_DES_CBC
;

229 
DES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

230 
	`CRYP_Inô
(&
DES_CRYP_InôSåu˘uª
);

233 
DES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

234 
keyaddr
+=4;

235 
DES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

236 
	`CRYP_KeyInô
(& 
DES_CRYP_KeyInôSåu˘uª
);

239 
DES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

240 
ivaddr
+=4;

241 
DES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

242 
	`CRYP_IVInô
(&
DES_CRYP_IVInôSåu˘uª
);

245 
	`CRYP_FIFOFlush
();

248 
	`CRYP_Cmd
(
ENABLE
);

250 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

254 (
ERROR
);

256 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=8)

259 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

260 
öpuèddr
+=4;

261 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

262 
öpuèddr
+=4;

265 
cou¡î
 = 0;

268 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

269 
cou¡î
++;

270 }(
cou¡î
 !
DESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

272 i‡(
busy°©us
 !
RESET
)

274 
°©us
 = 
ERROR
;

279 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

280 
ouçuèddr
+=4;

281 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

282 
ouçuèddr
+=4;

287 
	`CRYP_Cmd
(
DISABLE
);

289  
°©us
;

290 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c

48 
	~"°m32f4xx_¸yp.h
"

62 
	#TDESBUSY_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

100 
Eº‹Sètus
 
	$CRYP_TDES_ECB
(
uöt8_t
 
Mode
, uöt8_à
Key
[24], uöt8_à*
I≈ut
,

101 
uöt32_t
 
IÀngth
, 
uöt8_t
 *
Ouçut
)

103 
CRYP_InôTy≥Def
 
TDES_CRYP_InôSåu˘uª
;

104 
CRYP_KeyInôTy≥Def
 
TDES_CRYP_KeyInôSåu˘uª
;

105 
__IO
 
uöt32_t
 
cou¡î
 = 0;

106 
uöt32_t
 
busy°©us
 = 0;

107 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

108 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

109 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

110 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

111 
uöt32_t
 
i
 = 0;

114 
	`CRYP_KeySåu˘Inô
(&
TDES_CRYP_KeyInôSåu˘uª
);

117 if(
Mode
 =
MODE_ENCRYPT
)

119 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

123 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

126 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_TDES_ECB
;

127 
TDES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

128 
	`CRYP_Inô
(&
TDES_CRYP_InôSåu˘uª
);

131 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

132 
keyaddr
+=4;

133 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

134 
keyaddr
+=4;

135 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

136 
keyaddr
+=4;

137 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

138 
keyaddr
+=4;

139 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

140 
keyaddr
+=4;

141 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

142 
	`CRYP_KeyInô
(& 
TDES_CRYP_KeyInôSåu˘uª
);

145 
	`CRYP_FIFOFlush
();

148 
	`CRYP_Cmd
(
ENABLE
);

150 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

154 (
ERROR
);

156 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=8)

159 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

160 
öpuèddr
+=4;

161 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

162 
öpuèddr
+=4;

165 
cou¡î
 = 0;

168 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

169 
cou¡î
++;

170 }(
cou¡î
 !
TDESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

172 i‡(
busy°©us
 !
RESET
)

174 
°©us
 = 
ERROR
;

180 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

181 
ouçuèddr
+=4;

182 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

183 
ouçuèddr
+=4;

188 
	`CRYP_Cmd
(
DISABLE
);

190  
°©us
;

191 
	}
}

208 
Eº‹Sètus
 
	$CRYP_TDES_CBC
(
uöt8_t
 
Mode
, uöt8_à
Key
[24], uöt8_à
InôVe˘‹s
[8],

209 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_à*
Ouçut
)

211 
CRYP_InôTy≥Def
 
TDES_CRYP_InôSåu˘uª
;

212 
CRYP_KeyInôTy≥Def
 
TDES_CRYP_KeyInôSåu˘uª
;

213 
CRYP_IVInôTy≥Def
 
TDES_CRYP_IVInôSåu˘uª
;

214 
__IO
 
uöt32_t
 
cou¡î
 = 0;

215 
uöt32_t
 
busy°©us
 = 0;

216 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

217 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

218 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

219 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

220 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

221 
uöt32_t
 
i
 = 0;

224 
	`CRYP_KeySåu˘Inô
(&
TDES_CRYP_KeyInôSåu˘uª
);

227 if(
Mode
 =
MODE_ENCRYPT
)

229 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

233 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

235 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_TDES_CBC
;

236 
TDES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

238 
	`CRYP_Inô
(&
TDES_CRYP_InôSåu˘uª
);

241 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

242 
keyaddr
+=4;

243 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

244 
keyaddr
+=4;

245 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

246 
keyaddr
+=4;

247 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

248 
keyaddr
+=4;

249 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

250 
keyaddr
+=4;

251 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

252 
	`CRYP_KeyInô
(& 
TDES_CRYP_KeyInôSåu˘uª
);

255 
TDES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

256 
ivaddr
+=4;

257 
TDES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

258 
	`CRYP_IVInô
(&
TDES_CRYP_IVInôSåu˘uª
);

261 
	`CRYP_FIFOFlush
();

264 
	`CRYP_Cmd
(
ENABLE
);

266 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

270 (
ERROR
);

273 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=8)

276 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

277 
öpuèddr
+=4;

278 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

279 
öpuèddr
+=4;

282 
cou¡î
 = 0;

285 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

286 
cou¡î
++;

287 }(
cou¡î
 !
TDESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

289 i‡(
busy°©us
 !
RESET
)

291 
°©us
 = 
ERROR
;

297 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

298 
ouçuèddr
+=4;

299 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

300 
ouçuèddr
+=4;

305 
	`CRYP_Cmd
(
DISABLE
);

307  
°©us
;

308 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dac.c

131 
	~"°m32f4xx_dac.h
"

132 
	~"°m32f4xx_rcc.h
"

147 
	#CR_CLEAR_MASK
 ((
uöt32_t
)0x00000FFE)

	)

150 
	#DUAL_SWTRIG_SET
 ((
uöt32_t
)0x00000003)

	)

151 
	#DUAL_SWTRIG_RESET
 ((
uöt32_t
)0xFFFFFFFC)

	)

154 
	#DHR12R1_OFFSET
 ((
uöt32_t
)0x00000008)

	)

155 
	#DHR12R2_OFFSET
 ((
uöt32_t
)0x00000014)

	)

156 
	#DHR12RD_OFFSET
 ((
uöt32_t
)0x00000020)

	)

159 
	#DOR_OFFSET
 ((
uöt32_t
)0x0000002C)

	)

187 
	$DAC_DeInô
()

190 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
ENABLE
);

192 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
DISABLE
);

193 
	}
}

206 
	$DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

208 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

211 
	`as£π_∑øm
(
	`IS_DAC_TRIGGER
(
DAC_InôSåu˘
->
DAC_Triggî
));

212 
	`as£π_∑øm
(
	`IS_DAC_GENERATE_WAVE
(
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
));

213 
	`as£π_∑øm
(
	`IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
));

214 
	`as£π_∑øm
(
	`IS_DAC_OUTPUT_BUFFER_STATE
(
DAC_InôSåu˘
->
DAC_OuçutBuf„r
));

218 
tm¥eg1
 = 
DAC
->
CR
;

220 
tm¥eg1
 &~(
CR_CLEAR_MASK
 << 
DAC_Ch™√l
);

227 
tm¥eg2
 = (
DAC_InôSåu˘
->
DAC_Triggî
 | DAC_InôSåu˘->
DAC_WaveGíî©i⁄
 |

228 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 | \

229 
DAC_InôSåu˘
->
DAC_OuçutBuf„r
);

231 
tm¥eg1
 |
tm¥eg2
 << 
DAC_Ch™√l
;

233 
DAC
->
CR
 = 
tm¥eg1
;

234 
	}
}

242 
	$DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

246 
DAC_InôSåu˘
->
DAC_Triggî
 = 
DAC_Triggî_N⁄e
;

248 
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
 = 
DAC_WaveGíî©i⁄_N⁄e
;

250 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 = 
DAC_LFSRUnmask_Bô0
;

252 
DAC_InôSåu˘
->
DAC_OuçutBuf„r
 = 
DAC_OuçutBuf„r_E«bÀ
;

253 
	}
}

266 
	$DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

269 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

270 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

272 i‡(
NewSèã
 !
DISABLE
)

275 
DAC
->
CR
 |(
DAC_CR_EN1
 << 
DAC_Ch™√l
);

280 
DAC
->
CR
 &(~(
DAC_CR_EN1
 << 
DAC_Ch™√l
));

282 
	}
}

294 
	$DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

297 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

298 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

300 i‡(
NewSèã
 !
DISABLE
)

303 
DAC
->
SWTRIGR
 |(
uöt32_t
)
DAC_SWTRIGR_SWTRIG1
 << (
DAC_Ch™√l
 >> 4);

308 
DAC
->
SWTRIGR
 &~((
uöt32_t
)
DAC_SWTRIGR_SWTRIG1
 << (
DAC_Ch™√l
 >> 4));

310 
	}
}

318 
	$DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

321 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

323 i‡(
NewSèã
 !
DISABLE
)

326 
DAC
->
SWTRIGR
 |
DUAL_SWTRIG_SET
;

331 
DAC
->
SWTRIGR
 &
DUAL_SWTRIG_RESET
;

333 
	}
}

349 
	$DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

352 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

353 
	`as£π_∑øm
(
	`IS_DAC_WAVE
(
DAC_Wave
));

354 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

356 i‡(
NewSèã
 !
DISABLE
)

359 
DAC
->
CR
 |
DAC_Wave
 << 
DAC_Ch™√l
;

364 
DAC
->
CR
 &~(
DAC_Wave
 << 
DAC_Ch™√l
);

366 
	}
}

378 
	$DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

380 
__IO
 
uöt32_t
 
tmp
 = 0;

383 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

384 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

386 
tmp
 = (
uöt32_t
)
DAC_BASE
;

387 
tmp
 +
DHR12R1_OFFSET
 + 
DAC_Align
;

390 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

391 
	}
}

403 
	$DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

405 
__IO
 
uöt32_t
 
tmp
 = 0;

408 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

409 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

411 
tmp
 = (
uöt32_t
)
DAC_BASE
;

412 
tmp
 +
DHR12R2_OFFSET
 + 
DAC_Align
;

415 *(
__IO
 
uöt32_t
 *)
tmp
 = 
D©a
;

416 
	}
}

431 
	$DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
)

433 
uöt32_t
 
d©a
 = 0, 
tmp
 = 0;

436 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

437 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a1
));

438 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a2
));

441 i‡(
DAC_Align
 =
DAC_Align_8b_R
)

443 
d©a
 = ((
uöt32_t
)
D©a2
 << 8Ë| 
D©a1
;

447 
d©a
 = ((
uöt32_t
)
D©a2
 << 16Ë| 
D©a1
;

450 
tmp
 = (
uöt32_t
)
DAC_BASE
;

451 
tmp
 +
DHR12RD_OFFSET
 + 
DAC_Align
;

454 *(
__IO
 
uöt32_t
 *)
tmp
 = 
d©a
;

455 
	}
}

465 
uöt16_t
 
	$DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
)

467 
__IO
 
uöt32_t
 
tmp
 = 0;

470 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

472 
tmp
 = (
uöt32_t
Ë
DAC_BASE
 ;

473 
tmp
 +
DOR_OFFSET
 + ((
uöt32_t
)
DAC_Ch™√l
 >> 2);

476  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

477 
	}
}

510 
	$DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

513 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

514 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

516 i‡(
NewSèã
 !
DISABLE
)

519 
DAC
->
CR
 |(
DAC_CR_DMAEN1
 << 
DAC_Ch™√l
);

524 
DAC
->
CR
 &(~(
DAC_CR_DMAEN1
 << 
DAC_Ch™√l
));

526 
	}
}

558 
	$DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

561 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

562 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

563 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

565 i‡(
NewSèã
 !
DISABLE
)

568 
DAC
->
CR
 |(
DAC_IT
 << 
DAC_Ch™√l
);

573 
DAC
->
CR
 &(~(
uöt32_t
)(
DAC_IT
 << 
DAC_Ch™√l
));

575 
	}
}

590 
FœgSètus
 
	$DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

592 
FœgSètus
 
bô°©us
 = 
RESET
;

594 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

595 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

598 i‡((
DAC
->
SR
 & (
DAC_FLAG
 << 
DAC_Ch™√l
)Ë!(
uöt8_t
)
RESET
)

601 
bô°©us
 = 
SET
;

606 
bô°©us
 = 
RESET
;

609  
bô°©us
;

610 
	}
}

625 
	$DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

628 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

629 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

632 
DAC
->
SR
 = (
DAC_FLAG
 << 
DAC_Ch™√l
);

633 
	}
}

648 
ITSètus
 
	$DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

650 
ITSètus
 
bô°©us
 = 
RESET
;

651 
uöt32_t
 
íabÀ°©us
 = 0;

654 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

655 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

658 
íabÀ°©us
 = (
DAC
->
CR
 & (
DAC_IT
 << 
DAC_Ch™√l
)) ;

661 i‡(((
DAC
->
SR
 & (
DAC_IT
 << 
DAC_Ch™√l
)Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

664 
bô°©us
 = 
SET
;

669 
bô°©us
 = 
RESET
;

672  
bô°©us
;

673 
	}
}

688 
	$DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

691 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

692 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

695 
DAC
->
SR
 = (
DAC_IT
 << 
DAC_Ch™√l
);

696 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dbgmcu.c

29 
	~"°m32f4xx_dbgmcu.h
"

42 
	#IDCODE_DEVID_MASK
 ((
uöt32_t
)0x00000FFF)

	)

58 
uöt32_t
 
	$DBGMCU_GëREVID
()

60 (
DBGMCU
->
IDCODE
 >> 16);

61 
	}
}

68 
uöt32_t
 
	$DBGMCU_GëDEVID
()

70 (
DBGMCU
->
IDCODE
 & 
IDCODE_DEVID_MASK
);

71 
	}
}

84 
	$DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

87 
	`as£π_∑øm
(
	`IS_DBGMCU_PERIPH
(
DBGMCU_Pîùh
));

88 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

89 i‡(
NewSèã
 !
DISABLE
)

91 
DBGMCU
->
CR
 |
DBGMCU_Pîùh
;

95 
DBGMCU
->
CR
 &~
DBGMCU_Pîùh
;

97 
	}
}

123 
	$DBGMCU_APB1PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

126 
	`as£π_∑øm
(
	`IS_DBGMCU_APB1PERIPH
(
DBGMCU_Pîùh
));

127 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

129 i‡(
NewSèã
 !
DISABLE
)

131 
DBGMCU
->
APB1FZ
 |
DBGMCU_Pîùh
;

135 
DBGMCU
->
APB1FZ
 &~
DBGMCU_Pîùh
;

137 
	}
}

152 
	$DBGMCU_APB2PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

155 
	`as£π_∑øm
(
	`IS_DBGMCU_APB2PERIPH
(
DBGMCU_Pîùh
));

156 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

158 i‡(
NewSèã
 !
DISABLE
)

160 
DBGMCU
->
APB2FZ
 |
DBGMCU_Pîùh
;

164 
DBGMCU
->
APB2FZ
 &~
DBGMCU_Pîùh
;

166 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c

86 
	~"°m32f4xx_dcmi.h
"

87 
	~"°m32f4xx_rcc.h
"

126 
	$DCMI_DeInô
()

128 
DCMI
->
CR
 = 0x0;

129 
DCMI
->
IER
 = 0x0;

130 
DCMI
->
ICR
 = 0x1F;

131 
DCMI
->
ESCR
 = 0x0;

132 
DCMI
->
ESUR
 = 0x0;

133 
DCMI
->
CWSTRTR
 = 0x0;

134 
DCMI
->
CWSIZER
 = 0x0;

135 
	}
}

143 
	$DCMI_Inô
(
DCMI_InôTy≥Def
* 
DCMI_InôSåu˘
)

145 
uöt32_t
 
ãmp
 = 0x0;

148 
	`as£π_∑øm
(
	`IS_DCMI_CAPTURE_MODE
(
DCMI_InôSåu˘
->
DCMI_C≠tuªMode
));

149 
	`as£π_∑øm
(
	`IS_DCMI_SYNCHRO
(
DCMI_InôSåu˘
->
DCMI_SynchroMode
));

150 
	`as£π_∑øm
(
	`IS_DCMI_PCKPOLARITY
(
DCMI_InôSåu˘
->
DCMI_PCKPﬁ¨ôy
));

151 
	`as£π_∑øm
(
	`IS_DCMI_VSPOLARITY
(
DCMI_InôSåu˘
->
DCMI_VSPﬁ¨ôy
));

152 
	`as£π_∑øm
(
	`IS_DCMI_HSPOLARITY
(
DCMI_InôSåu˘
->
DCMI_HSPﬁ¨ôy
));

153 
	`as£π_∑øm
(
	`IS_DCMI_CAPTURE_RATE
(
DCMI_InôSåu˘
->
DCMI_C≠tuªR©e
));

154 
	`as£π_∑øm
(
	`IS_DCMI_EXTENDED_DATA
(
DCMI_InôSåu˘
->
DCMI_ExãndedD©aMode
));

158 
DCMI
->
CR
 &~(
DCMI_CR_ENABLE
 | 
DCMI_CR_CAPTURE
);

161 
ãmp
 = 
DCMI
->
CR
;

163 
ãmp
 &~((
uöt32_t
)
DCMI_CR_CM
 | 
DCMI_CR_ESS
 | 
DCMI_CR_PCKPOL
 |

164 
DCMI_CR_HSPOL
 | 
DCMI_CR_VSPOL
 | 
DCMI_CR_FCRC_0
 |

165 
DCMI_CR_FCRC_1
 | 
DCMI_CR_EDM_0
 | 
DCMI_CR_EDM_1
);

168 
ãmp
 |((
uöt32_t
)
DCMI_InôSåu˘
->
DCMI_C≠tuªMode
 |

169 
DCMI_InôSåu˘
->
DCMI_SynchroMode
 |

170 
DCMI_InôSåu˘
->
DCMI_PCKPﬁ¨ôy
 |

171 
DCMI_InôSåu˘
->
DCMI_VSPﬁ¨ôy
 |

172 
DCMI_InôSåu˘
->
DCMI_HSPﬁ¨ôy
 |

173 
DCMI_InôSåu˘
->
DCMI_C≠tuªR©e
 |

174 
DCMI_InôSåu˘
->
DCMI_ExãndedD©aMode
);

176 
DCMI
->
CR
 = 
ãmp
;

177 
	}
}

185 
	$DCMI_Såu˘Inô
(
DCMI_InôTy≥Def
* 
DCMI_InôSåu˘
)

188 
DCMI_InôSåu˘
->
DCMI_C≠tuªMode
 = 
DCMI_C≠tuªMode_C⁄töuous
;

189 
DCMI_InôSåu˘
->
DCMI_SynchroMode
 = 
DCMI_SynchroMode_H¨dw¨e
;

190 
DCMI_InôSåu˘
->
DCMI_PCKPﬁ¨ôy
 = 
DCMI_PCKPﬁ¨ôy_FÆlög
;

191 
DCMI_InôSåu˘
->
DCMI_VSPﬁ¨ôy
 = 
DCMI_VSPﬁ¨ôy_Low
;

192 
DCMI_InôSåu˘
->
DCMI_HSPﬁ¨ôy
 = 
DCMI_HSPﬁ¨ôy_Low
;

193 
DCMI_InôSåu˘
->
DCMI_C≠tuªR©e
 = 
DCMI_C≠tuªR©e_AŒ_Føme
;

194 
DCMI_InôSåu˘
->
DCMI_ExãndedD©aMode
 = 
DCMI_ExãndedD©aMode_8b
;

195 
	}
}

205 
	$DCMI_CROPC⁄fig
(
DCMI_CROPInôTy≥Def
* 
DCMI_CROPInôSåu˘
)

208 
DCMI
->
CWSTRTR
 = (
uöt32_t
)((uöt32_t)
DCMI_CROPInôSåu˘
->
DCMI_H‹iz⁄èlOff£tCou¡
 |

209 ((
uöt32_t
)
DCMI_CROPInôSåu˘
->
DCMI_VîtiˇlSèπLöe
 << 16));

212 
DCMI
->
CWSIZER
 = (
uöt32_t
)(
DCMI_CROPInôSåu˘
->
DCMI_C≠tuªCou¡
 |

213 ((
uöt32_t
)
DCMI_CROPInôSåu˘
->
DCMI_VîtiˇlLöeCou¡
 << 16));

214 
	}
}

223 
	$DCMI_CROPCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

226 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

228 i‡(
NewSèã
 !
DISABLE
)

231 
DCMI
->
CR
 |(
uöt32_t
)
DCMI_CR_CROP
;

236 
DCMI
->
CR
 &~(
uöt32_t
)
DCMI_CR_CROP
;

238 
	}
}

246 
	$DCMI_SëEmbeddedSynchroCodes
(
DCMI_CodesInôTy≥Def
* 
DCMI_CodesInôSåu˘
)

248 
DCMI
->
ESCR
 = (
uöt32_t
)(
DCMI_CodesInôSåu˘
->
DCMI_FømeSèπCode
 |

249 ((
uöt32_t
)
DCMI_CodesInôSåu˘
->
DCMI_LöeSèπCode
 << 8)|

250 ((
uöt32_t
)
DCMI_CodesInôSåu˘
->
DCMI_LöeEndCode
 << 16)|

251 ((
uöt32_t
)
DCMI_CodesInôSåu˘
->
DCMI_FømeEndCode
 << 24));

252 
	}
}

261 
	$DCMI_JPEGCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

264 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

266 i‡(
NewSèã
 !
DISABLE
)

269 
DCMI
->
CR
 |(
uöt32_t
)
DCMI_CR_JPEG
;

274 
DCMI
->
CR
 &~(
uöt32_t
)
DCMI_CR_JPEG
;

276 
	}
}

299 
	$DCMI_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

302 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

304 i‡(
NewSèã
 !
DISABLE
)

307 
DCMI
->
CR
 |(
uöt32_t
)
DCMI_CR_ENABLE
;

312 
DCMI
->
CR
 &~(
uöt32_t
)
DCMI_CR_ENABLE
;

314 
	}
}

322 
	$DCMI_C≠tuªCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

325 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

327 i‡(
NewSèã
 !
DISABLE
)

330 
DCMI
->
CR
 |(
uöt32_t
)
DCMI_CR_CAPTURE
;

335 
DCMI
->
CR
 &~(
uöt32_t
)
DCMI_CR_CAPTURE
;

337 
	}
}

344 
uöt32_t
 
	$DCMI_RódD©a
()

346  
DCMI
->
DR
;

347 
	}
}

377 
	$DCMI_ITC⁄fig
(
uöt16_t
 
DCMI_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

380 
	`as£π_∑øm
(
	`IS_DCMI_CONFIG_IT
(
DCMI_IT
));

381 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

383 i‡(
NewSèã
 !
DISABLE
)

386 
DCMI
->
IER
 |
DCMI_IT
;

391 
DCMI
->
IER
 &(
uöt16_t
)(~
DCMI_IT
);

393 
	}
}

414 
FœgSètus
 
	$DCMI_GëFœgSètus
(
uöt16_t
 
DCMI_FLAG
)

416 
FœgSètus
 
bô°©us
 = 
RESET
;

417 
uöt32_t
 
dcmúeg
, 
ãm¥eg
 = 0;

420 
	`as£π_∑øm
(
	`IS_DCMI_GET_FLAG
(
DCMI_FLAG
));

423 
dcmúeg
 = (((
uöt16_t
)
DCMI_FLAG
) >> 12);

425 i‡(
dcmúeg
 == 0x00)

427 
ãm¥eg

DCMI
->
RISR
;

429 i‡(
dcmúeg
 == 0x02)

431 
ãm¥eg
 = 
DCMI
->
SR
;

435 
ãm¥eg
 = 
DCMI
->
MISR
;

438 i‡((
ãm¥eg
 & 
DCMI_FLAG
Ë!(
uöt16_t
)
RESET
 )

440 
bô°©us
 = 
SET
;

444 
bô°©us
 = 
RESET
;

447  
bô°©us
;

448 
	}
}

461 
	$DCMI_CÀ¨Fœg
(
uöt16_t
 
DCMI_FLAG
)

464 
	`as£π_∑øm
(
	`IS_DCMI_CLEAR_FLAG
(
DCMI_FLAG
));

469 
DCMI
->
ICR
 = 
DCMI_FLAG
;

470 
	}
}

483 
ITSètus
 
	$DCMI_GëITSètus
(
uöt16_t
 
DCMI_IT
)

485 
ITSètus
 
bô°©us
 = 
RESET
;

486 
uöt32_t
 
ô°©us
 = 0;

489 
	`as£π_∑øm
(
	`IS_DCMI_GET_IT
(
DCMI_IT
));

491 
ô°©us
 = 
DCMI
->
MISR
 & 
DCMI_IT
;

493 i‡((
ô°©us
 !(
uöt16_t
)
RESET
))

495 
bô°©us
 = 
SET
;

499 
bô°©us
 = 
RESET
;

501  
bô°©us
;

502 
	}
}

515 
	$DCMI_CÀ¨ITPídögBô
(
uöt16_t
 
DCMI_IT
)

520 
DCMI
->
ICR
 = 
DCMI_IT
;

521 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c

124 
	~"°m32f4xx_dma.h
"

125 
	~"°m32f4xx_rcc.h
"

140 
	#TRANSFER_IT_ENABLE_MASK
 (
uöt32_t
)(
DMA_SxCR_TCIE
 | 
DMA_SxCR_HTIE
 | \

	)

141 
	gDMA_SxCR_TEIE
 | 
	gDMA_SxCR_DMEIE
)

143 
	#DMA_Såóm0_IT_MASK
 (
uöt32_t
)(
DMA_LISR_FEIF0
 | 
DMA_LISR_DMEIF0
 | \

	)

144 
	gDMA_LISR_TEIF0
 | 
	gDMA_LISR_HTIF0
 | \

145 
	gDMA_LISR_TCIF0
)

147 
	#DMA_Såóm1_IT_MASK
 (
uöt32_t
)(
DMA_Såóm0_IT_MASK
 << 6)

	)

148 
	#DMA_Såóm2_IT_MASK
 (
uöt32_t
)(
DMA_Såóm0_IT_MASK
 << 16)

	)

149 
	#DMA_Såóm3_IT_MASK
 (
uöt32_t
)(
DMA_Såóm0_IT_MASK
 << 22)

	)

150 
	#DMA_Såóm4_IT_MASK
 (
uöt32_t
)(
DMA_Såóm0_IT_MASK
 | (uöt32_t)0x20000000)

	)

151 
	#DMA_Såóm5_IT_MASK
 (
uöt32_t
)(
DMA_Såóm1_IT_MASK
 | (uöt32_t)0x20000000)

	)

152 
	#DMA_Såóm6_IT_MASK
 (
uöt32_t
)(
DMA_Såóm2_IT_MASK
 | (uöt32_t)0x20000000)

	)

153 
	#DMA_Såóm7_IT_MASK
 (
uöt32_t
)(
DMA_Såóm3_IT_MASK
 | (uöt32_t)0x20000000)

	)

154 
	#TRANSFER_IT_MASK
 (
uöt32_t
)0x0F3C0F3C

	)

155 
	#HIGH_ISR_MASK
 (
uöt32_t
)0x20000000

	)

156 
	#RESERVED_MASK
 (
uöt32_t
)0x0F7D0F7D

	)

196 
	$DMA_DeInô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

199 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

202 
DMAy_Såómx
->
CR
 &~((
uöt32_t
)
DMA_SxCR_EN
);

205 
DMAy_Såómx
->
CR
 = 0;

208 
DMAy_Såómx
->
NDTR
 = 0;

211 
DMAy_Såómx
->
PAR
 = 0;

214 
DMAy_Såómx
->
M0AR
 = 0;

217 
DMAy_Såómx
->
M1AR
 = 0;

220 
DMAy_Såómx
->
FCR
 = (
uöt32_t
)0x00000021;

223 i‡(
DMAy_Såómx
 =
DMA1_Såóm0
)

226 
DMA1
->
LIFCR
 = 
DMA_Såóm0_IT_MASK
;

228 i‡(
DMAy_Såómx
 =
DMA1_Såóm1
)

231 
DMA1
->
LIFCR
 = 
DMA_Såóm1_IT_MASK
;

233 i‡(
DMAy_Såómx
 =
DMA1_Såóm2
)

236 
DMA1
->
LIFCR
 = 
DMA_Såóm2_IT_MASK
;

238 i‡(
DMAy_Såómx
 =
DMA1_Såóm3
)

241 
DMA1
->
LIFCR
 = 
DMA_Såóm3_IT_MASK
;

243 i‡(
DMAy_Såómx
 =
DMA1_Såóm4
)

246 
DMA1
->
HIFCR
 = 
DMA_Såóm4_IT_MASK
;

248 i‡(
DMAy_Såómx
 =
DMA1_Såóm5
)

251 
DMA1
->
HIFCR
 = 
DMA_Såóm5_IT_MASK
;

253 i‡(
DMAy_Såómx
 =
DMA1_Såóm6
)

256 
DMA1
->
HIFCR
 = (
uöt32_t
)
DMA_Såóm6_IT_MASK
;

258 i‡(
DMAy_Såómx
 =
DMA1_Såóm7
)

261 
DMA1
->
HIFCR
 = 
DMA_Såóm7_IT_MASK
;

263 i‡(
DMAy_Såómx
 =
DMA2_Såóm0
)

266 
DMA2
->
LIFCR
 = 
DMA_Såóm0_IT_MASK
;

268 i‡(
DMAy_Såómx
 =
DMA2_Såóm1
)

271 
DMA2
->
LIFCR
 = 
DMA_Såóm1_IT_MASK
;

273 i‡(
DMAy_Såómx
 =
DMA2_Såóm2
)

276 
DMA2
->
LIFCR
 = 
DMA_Såóm2_IT_MASK
;

278 i‡(
DMAy_Såómx
 =
DMA2_Såóm3
)

281 
DMA2
->
LIFCR
 = 
DMA_Såóm3_IT_MASK
;

283 i‡(
DMAy_Såómx
 =
DMA2_Såóm4
)

286 
DMA2
->
HIFCR
 = 
DMA_Såóm4_IT_MASK
;

288 i‡(
DMAy_Såómx
 =
DMA2_Såóm5
)

291 
DMA2
->
HIFCR
 = 
DMA_Såóm5_IT_MASK
;

293 i‡(
DMAy_Såómx
 =
DMA2_Såóm6
)

296 
DMA2
->
HIFCR
 = 
DMA_Såóm6_IT_MASK
;

300 i‡(
DMAy_Såómx
 =
DMA2_Såóm7
)

303 
DMA2
->
HIFCR
 = 
DMA_Såóm7_IT_MASK
;

306 
	}
}

319 
	$DMA_Inô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

321 
uöt32_t
 
tm¥eg
 = 0;

324 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

325 
	`as£π_∑øm
(
	`IS_DMA_CHANNEL
(
DMA_InôSåu˘
->
DMA_Ch™√l
));

326 
	`as£π_∑øm
(
	`IS_DMA_DIRECTION
(
DMA_InôSåu˘
->
DMA_DIR
));

327 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
DMA_InôSåu˘
->
DMA_Buf„rSize
));

328 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_INC_STATE
(
DMA_InôSåu˘
->
DMA_PîùhîÆInc
));

329 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_INC_STATE
(
DMA_InôSåu˘
->
DMA_Mem‹yInc
));

330 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
));

331 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
));

332 
	`as£π_∑øm
(
	`IS_DMA_MODE
(
DMA_InôSåu˘
->
DMA_Mode
));

333 
	`as£π_∑øm
(
	`IS_DMA_PRIORITY
(
DMA_InôSåu˘
->
DMA_Pri‹ôy
));

334 
	`as£π_∑øm
(
	`IS_DMA_FIFO_MODE_STATE
(
DMA_InôSåu˘
->
DMA_FIFOMode
));

335 
	`as£π_∑øm
(
	`IS_DMA_FIFO_THRESHOLD
(
DMA_InôSåu˘
->
DMA_FIFOThªshﬁd
));

336 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_BURST
(
DMA_InôSåu˘
->
DMA_Mem‹yBur°
));

337 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_BURST
(
DMA_InôSåu˘
->
DMA_PîùhîÆBur°
));

341 
tm¥eg
 = 
DMAy_Såómx
->
CR
;

344 
tm¥eg
 &((
uöt32_t
)~(
DMA_SxCR_CHSEL
 | 
DMA_SxCR_MBURST
 | 
DMA_SxCR_PBURST
 | \

345 
DMA_SxCR_PL
 | 
DMA_SxCR_MSIZE
 | 
DMA_SxCR_PSIZE
 | \

346 
DMA_SxCR_MINC
 | 
DMA_SxCR_PINC
 | 
DMA_SxCR_CIRC
 | \

347 
DMA_SxCR_DIR
));

360 
tm¥eg
 |
DMA_InôSåu˘
->
DMA_Ch™√l
 | DMA_InôSåu˘->
DMA_DIR
 |

361 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 | DMA_InôSåu˘->
DMA_Mem‹yInc
 |

362 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 | DMA_InôSåu˘->
DMA_Mem‹yD©aSize
 |

363 
DMA_InôSåu˘
->
DMA_Mode
 | DMA_InôSåu˘->
DMA_Pri‹ôy
 |

364 
DMA_InôSåu˘
->
DMA_Mem‹yBur°
 | DMA_InôSåu˘->
DMA_PîùhîÆBur°
;

367 
DMAy_Såómx
->
CR
 = 
tm¥eg
;

371 
tm¥eg
 = 
DMAy_Såómx
->
FCR
;

374 
tm¥eg
 &(
uöt32_t
)~(
DMA_SxFCR_DMDIS
 | 
DMA_SxFCR_FTH
);

379 
tm¥eg
 |
DMA_InôSåu˘
->
DMA_FIFOMode
 | DMA_InôSåu˘->
DMA_FIFOThªshﬁd
;

382 
DMAy_Såómx
->
FCR
 = 
tm¥eg
;

386 
DMAy_Såómx
->
NDTR
 = 
DMA_InôSåu˘
->
DMA_Buf„rSize
;

390 
DMAy_Såómx
->
PAR
 = 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
;

394 
DMAy_Såómx
->
M0AR
 = 
DMA_InôSåu˘
->
DMA_Mem‹y0Ba£Addr
;

395 
	}
}

403 
	$DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

407 
DMA_InôSåu˘
->
DMA_Ch™√l
 = 0;

410 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
 = 0;

413 
DMA_InôSåu˘
->
DMA_Mem‹y0Ba£Addr
 = 0;

416 
DMA_InôSåu˘
->
DMA_DIR
 = 
DMA_DIR_PîùhîÆToMem‹y
;

419 
DMA_InôSåu˘
->
DMA_Buf„rSize
 = 0;

422 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

425 
DMA_InôSåu˘
->
DMA_Mem‹yInc
 = 
DMA_Mem‹yInc_DißbÀ
;

428 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 = 
DMA_PîùhîÆD©aSize_Byã
;

431 
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
 = 
DMA_Mem‹yD©aSize_Byã
;

434 
DMA_InôSåu˘
->
DMA_Mode
 = 
DMA_Mode_N‹mÆ
;

437 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 = 
DMA_Pri‹ôy_Low
;

440 
DMA_InôSåu˘
->
DMA_FIFOMode
 = 
DMA_FIFOMode_DißbÀ
;

443 
DMA_InôSåu˘
->
DMA_FIFOThªshﬁd
 = 
DMA_FIFOThªshﬁd_1Qu¨ãrFuŒ
;

446 
DMA_InôSåu˘
->
DMA_Mem‹yBur°
 = 
DMA_Mem‹yBur°_SögÀ
;

449 
DMA_InôSåu˘
->
DMA_PîùhîÆBur°
 = 
DMA_PîùhîÆBur°_SögÀ
;

450 
	}
}

478 
	$DMA_Cmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

481 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

482 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

484 i‡(
NewSèã
 !
DISABLE
)

487 
DMAy_Såómx
->
CR
 |(
uöt32_t
)
DMA_SxCR_EN
;

492 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)
DMA_SxCR_EN
;

494 
	}
}

514 
	$DMA_PîùhIncOff£tSizeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_Pöcos
)

517 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

518 
	`as£π_∑øm
(
	`IS_DMA_PINCOS_SIZE
(
DMA_Pöcos
));

521 if(
DMA_Pöcos
 !
DMA_PINCOS_Psize
)

524 
DMAy_Såómx
->
CR
 |(
uöt32_t
)
DMA_SxCR_PINCOS
;

529 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)
DMA_SxCR_PINCOS
;

531 
	}
}

550 
	$DMA_FlowC⁄åﬁÀrC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FlowCål
)

553 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

554 
	`as£π_∑øm
(
	`IS_DMA_FLOW_CTRL
(
DMA_FlowCål
));

557 if(
DMA_FlowCål
 !
DMA_FlowCål_Mem‹y
)

560 
DMAy_Såómx
->
CR
 |(
uöt32_t
)
DMA_SxCR_PFCTRL
;

565 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)
DMA_SxCR_PFCTRL
;

567 
	}
}

632 
	$DMA_SëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt16_t
 
Cou¡î
)

635 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

638 
DMAy_Såómx
->
NDTR
 = (
uöt16_t
)
Cou¡î
;

639 
	}
}

647 
uöt16_t
 
	$DMA_GëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

650 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

653  ((
uöt16_t
)(
DMAy_Såómx
->
NDTR
));

654 
	}
}

730 
	$DMA_DoubÀBuf„rModeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹y1Ba£Addr
,

731 
uöt32_t
 
DMA_CuºítMem‹y
)

734 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

735 
	`as£π_∑øm
(
	`IS_DMA_CURRENT_MEM
(
DMA_CuºítMem‹y
));

737 i‡(
DMA_CuºítMem‹y
 !
DMA_Mem‹y_0
)

740 
DMAy_Såómx
->
CR
 |(
uöt32_t
)(
DMA_SxCR_CT
);

745 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)(
DMA_SxCR_CT
);

749 
DMAy_Såómx
->
M1AR
 = 
Mem‹y1Ba£Addr
;

750 
	}
}

761 
	$DMA_DoubÀBuf„rModeCmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

764 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

765 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

768 i‡(
NewSèã
 !
DISABLE
)

771 
DMAy_Såómx
->
CR
 |(
uöt32_t
)
DMA_SxCR_DBM
;

776 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)
DMA_SxCR_DBM
;

778 
	}
}

802 
	$DMA_Mem‹yT¨gëC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹yBa£Addr
,

803 
uöt32_t
 
DMA_Mem‹yT¨gë
)

806 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

807 
	`as£π_∑øm
(
	`IS_DMA_CURRENT_MEM
(
DMA_Mem‹yT¨gë
));

810 i‡(
DMA_Mem‹yT¨gë
 !
DMA_Mem‹y_0
)

813 
DMAy_Såómx
->
M1AR
 = 
Mem‹yBa£Addr
;

818 
DMAy_Såómx
->
M0AR
 = 
Mem‹yBa£Addr
;

820 
	}
}

828 
uöt32_t
 
	$DMA_GëCuºítMem‹yT¨gë
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

830 
uöt32_t
 
tmp
 = 0;

833 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

836 i‡((
DMAy_Såómx
->
CR
 & 
DMA_SxCR_CT
) != 0)

839 
tmp
 = 1;

844 
tmp
 = 0;

846  
tmp
;

847 
	}
}

943 
Fun˘i⁄ÆSèã
 
	$DMA_GëCmdSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

945 
Fun˘i⁄ÆSèã
 
°©e
 = 
DISABLE
;

948 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

950 i‡((
DMAy_Såómx
->
CR
 & (
uöt32_t
)
DMA_SxCR_EN
) != 0)

953 
°©e
 = 
ENABLE
;

959 
°©e
 = 
DISABLE
;

961  
°©e
;

962 
	}
}

977 
uöt32_t
 
	$DMA_GëFIFOSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

979 
uöt32_t
 
tm¥eg
 = 0;

982 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

985 
tm¥eg
 = (
uöt32_t
)((
DMAy_Såómx
->
FCR
 & 
DMA_SxFCR_FS
));

987  
tm¥eg
;

988 
	}
}

1004 
FœgSètus
 
	$DMA_GëFœgSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
)

1006 
FœgSètus
 
bô°©us
 = 
RESET
;

1007 
DMA_Ty≥Def
* 
DMAy
;

1008 
uöt32_t
 
tm¥eg
 = 0;

1011 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1012 
	`as£π_∑øm
(
	`IS_DMA_GET_FLAG
(
DMA_FLAG
));

1015 i‡(
DMAy_Såómx
 < 
DMA2_Såóm0
)

1018 
DMAy
 = 
DMA1
;

1023 
DMAy
 = 
DMA2
;

1027 i‡((
DMA_FLAG
 & 
HIGH_ISR_MASK
Ë!(
uöt32_t
)
RESET
)

1030 
tm¥eg
 = 
DMAy
->
HISR
;

1035 
tm¥eg
 = 
DMAy
->
LISR
;

1039 
tm¥eg
 &(
uöt32_t
)
RESERVED_MASK
;

1042 i‡((
tm¥eg
 & 
DMA_FLAG
Ë!(
uöt32_t
)
RESET
)

1045 
bô°©us
 = 
SET
;

1050 
bô°©us
 = 
RESET
;

1054  
bô°©us
;

1055 
	}
}

1071 
	$DMA_CÀ¨Fœg
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
)

1073 
DMA_Ty≥Def
* 
DMAy
;

1076 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1077 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_FLAG
(
DMA_FLAG
));

1080 i‡(
DMAy_Såómx
 < 
DMA2_Såóm0
)

1083 
DMAy
 = 
DMA1
;

1088 
DMAy
 = 
DMA2
;

1092 i‡((
DMA_FLAG
 & 
HIGH_ISR_MASK
Ë!(
uöt32_t
)
RESET
)

1095 
DMAy
->
HIFCR
 = (
uöt32_t
)(
DMA_FLAG
 & 
RESERVED_MASK
);

1100 
DMAy
->
LIFCR
 = (
uöt32_t
)(
DMA_FLAG
 & 
RESERVED_MASK
);

1102 
	}
}

1118 
	$DMA_ITC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1121 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1122 
	`as£π_∑øm
(
	`IS_DMA_CONFIG_IT
(
DMA_IT
));

1123 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1126 i‡((
DMA_IT
 & 
DMA_IT_FE
) != 0)

1128 i‡(
NewSèã
 !
DISABLE
)

1131 
DMAy_Såómx
->
FCR
 |(
uöt32_t
)
DMA_IT_FE
;

1136 
DMAy_Såómx
->
FCR
 &~(
uöt32_t
)
DMA_IT_FE
;

1141 i‡(
DMA_IT
 !
DMA_IT_FE
)

1143 i‡(
NewSèã
 !
DISABLE
)

1146 
DMAy_Såómx
->
CR
 |(
uöt32_t
)(
DMA_IT
 & 
TRANSFER_IT_ENABLE_MASK
);

1151 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)(
DMA_IT
 & 
TRANSFER_IT_ENABLE_MASK
);

1154 
	}
}

1170 
ITSètus
 
	$DMA_GëITSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
)

1172 
ITSètus
 
bô°©us
 = 
RESET
;

1173 
DMA_Ty≥Def
* 
DMAy
;

1174 
uöt32_t
 
tm¥eg
 = 0, 
íabÀ°©us
 = 0;

1177 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1178 
	`as£π_∑øm
(
	`IS_DMA_GET_IT
(
DMA_IT
));

1181 i‡(
DMAy_Såómx
 < 
DMA2_Såóm0
)

1184 
DMAy
 = 
DMA1
;

1189 
DMAy
 = 
DMA2
;

1193 i‡((
DMA_IT
 & 
TRANSFER_IT_MASK
Ë!(
uöt32_t
)
RESET
)

1196 
tm¥eg
 = (
uöt32_t
)((
DMA_IT
 >> 11Ë& 
TRANSFER_IT_ENABLE_MASK
);

1199 
íabÀ°©us
 = (
uöt32_t
)(
DMAy_Såómx
->
CR
 & 
tm¥eg
);

1204 
íabÀ°©us
 = (
uöt32_t
)(
DMAy_Såómx
->
FCR
 & 
DMA_IT_FE
);

1208 i‡((
DMA_IT
 & 
HIGH_ISR_MASK
Ë!(
uöt32_t
)
RESET
)

1211 
tm¥eg
 = 
DMAy
->
HISR
 ;

1216 
tm¥eg
 = 
DMAy
->
LISR
 ;

1220 
tm¥eg
 &(
uöt32_t
)
RESERVED_MASK
;

1223 i‡(((
tm¥eg
 & 
DMA_IT
Ë!(
uöt32_t
)
RESET
Ë&& (
íabÀ°©us
 != (uint32_t)RESET))

1226 
bô°©us
 = 
SET
;

1231 
bô°©us
 = 
RESET
;

1235  
bô°©us
;

1236 
	}
}

1252 
	$DMA_CÀ¨ITPídögBô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
)

1254 
DMA_Ty≥Def
* 
DMAy
;

1257 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1258 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_IT
(
DMA_IT
));

1261 i‡(
DMAy_Såómx
 < 
DMA2_Såóm0
)

1264 
DMAy
 = 
DMA1
;

1269 
DMAy
 = 
DMA2
;

1273 i‡((
DMA_IT
 & 
HIGH_ISR_MASK
Ë!(
uöt32_t
)
RESET
)

1276 
DMAy
->
HIFCR
 = (
uöt32_t
)(
DMA_IT
 & 
RESERVED_MASK
);

1281 
DMAy
->
LIFCR
 = (
uöt32_t
)(
DMA_IT
 & 
RESERVED_MASK
);

1283 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma2d.c

58 
	~"°m32f4xx_dma2d.h
"

59 
	~"°m32f4xx_rcc.h
"

77 
	#CR_MASK
 ((
uöt32_t
)0xFFFCE0FCË

	)

78 
	#PFCCR_MASK
 ((
uöt32_t
)0x00FC00C0Ë

	)

79 
	#DEAD_MASK
 ((
uöt32_t
)0xFFFF00FEË

	)

111 
	$DMA2D_DeInô
()

114 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_DMA2D
, 
ENABLE
);

116 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_DMA2D
, 
DISABLE
);

117 
	}
}

128 
	$DMA2D_Inô
(
DMA2D_InôTy≥Def
* 
DMA2D_InôSåu˘
)

131 
uöt32_t
 
outgªí
 = 0;

132 
uöt32_t
 
ouåed
 = 0;

133 
uöt32_t
 
ouèÕha
 = 0;

134 
uöt32_t
 
pixlöe
 = 0;

137 
	`as£π_∑øm
(
	`IS_DMA2D_MODE
(
DMA2D_InôSåu˘
->
DMA2D_Mode
));

138 
	`as£π_∑øm
(
	`IS_DMA2D_CMODE
(
DMA2D_InôSåu˘
->
DMA2D_CMode
));

139 
	`as£π_∑øm
(
	`IS_DMA2D_OGREEN
(
DMA2D_InôSåu˘
->
DMA2D_OuçutGªí
));

140 
	`as£π_∑øm
(
	`IS_DMA2D_ORED
(
DMA2D_InôSåu˘
->
DMA2D_OuçutRed
));

141 
	`as£π_∑øm
(
	`IS_DMA2D_OBLUE
(
DMA2D_InôSåu˘
->
DMA2D_OuçutBlue
));

142 
	`as£π_∑øm
(
	`IS_DMA2D_OALPHA
(
DMA2D_InôSåu˘
->
DMA2D_OuçutAÕha
));

143 
	`as£π_∑øm
(
	`IS_DMA2D_OUTPUT_OFFSET
(
DMA2D_InôSåu˘
->
DMA2D_OuçutOff£t
));

144 
	`as£π_∑øm
(
	`IS_DMA2D_LINE
(
DMA2D_InôSåu˘
->
DMA2D_NumbîOfLöe
));

145 
	`as£π_∑øm
(
	`IS_DMA2D_PIXEL
(
DMA2D_InôSåu˘
->
DMA2D_PixñPîLöe
));

148 
DMA2D
->
CR
 &(
uöt32_t
)
CR_MASK
;

149 
DMA2D
->
CR
 |(
DMA2D_InôSåu˘
->
DMA2D_Mode
);

152 
DMA2D
->
OPFCCR
 &~(
uöt32_t
)
DMA2D_OPFCCR_CM
;

153 
DMA2D
->
OPFCCR
 |(
DMA2D_InôSåu˘
->
DMA2D_CMode
);

157 i‡(
DMA2D_InôSåu˘
->
DMA2D_CMode
 =
DMA2D_ARGB8888
)

159 
outgªí
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutGªí
 << 8;

160 
ouåed
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutRed
 << 16;

161 
ouèÕha
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutAÕha
 << 24;

165 i‡(
DMA2D_InôSåu˘
->
DMA2D_CMode
 =
DMA2D_RGB888
)

167 
outgªí
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutGªí
 << 8;

168 
ouåed
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutRed
 << 16;

169 
ouèÕha
 = (
uöt32_t
)0x00000000;

174 i‡(
DMA2D_InôSåu˘
->
DMA2D_CMode
 =
DMA2D_RGB565
)

176 
outgªí
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutGªí
 << 5;

177 
ouåed
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutRed
 << 11;

178 
ouèÕha
 = (
uöt32_t
)0x00000000;

183 i‡(
DMA2D_InôSåu˘
->
DMA2D_CMode
 =
DMA2D_ARGB1555
)

185 
outgªí
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutGªí
 << 5;

186 
ouåed
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutRed
 << 10;

187 
ouèÕha
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutAÕha
 << 15;

192 
outgªí
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutGªí
 << 4;

193 
ouåed
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutRed
 << 8;

194 
ouèÕha
 = 
DMA2D_InôSåu˘
->
DMA2D_OuçutAÕha
 << 12;

196 
DMA2D
->
OCOLR
 |((
outgªí
Ë| (
ouåed
Ë| (
DMA2D_InôSåu˘
->
DMA2D_OuçutBlue
Ë| (
ouèÕha
));

199 
DMA2D
->
OMAR
 = (
DMA2D_InôSåu˘
->
DMA2D_OuçutMem‹yAdd
);

202 
DMA2D
->
OOR
 &~(
uöt32_t
)
DMA2D_OOR_LO
;

203 
DMA2D
->
OOR
 |(
DMA2D_InôSåu˘
->
DMA2D_OuçutOff£t
);

206 
pixlöe
 = 
DMA2D_InôSåu˘
->
DMA2D_PixñPîLöe
 << 16;

207 
DMA2D
->
NLR
 &~(
DMA2D_NLR_NL
 | 
DMA2D_NLR_PL
);

208 
DMA2D
->
NLR
 |((
DMA2D_InôSåu˘
->
DMA2D_NumbîOfLöe
Ë| (
pixlöe
));

216 
	}
}

217 
	$DMA2D_Såu˘Inô
(
DMA2D_InôTy≥Def
* 
DMA2D_InôSåu˘
)

220 
DMA2D_InôSåu˘
->
DMA2D_Mode
 = 
DMA2D_M2M
;

223 
DMA2D_InôSåu˘
->
DMA2D_CMode
 = 
DMA2D_ARGB8888
;

226 
DMA2D_InôSåu˘
->
DMA2D_OuçutGªí
 = 0x00;

227 
DMA2D_InôSåu˘
->
DMA2D_OuçutBlue
 = 0x00;

228 
DMA2D_InôSåu˘
->
DMA2D_OuçutRed
 = 0x00;

229 
DMA2D_InôSåu˘
->
DMA2D_OuçutAÕha
 = 0x00;

232 
DMA2D_InôSåu˘
->
DMA2D_OuçutMem‹yAdd
 = 0x00;

235 
DMA2D_InôSåu˘
->
DMA2D_OuçutOff£t
 = 0x00;

238 
DMA2D_InôSåu˘
->
DMA2D_NumbîOfLöe
 = 0x00;

239 
DMA2D_InôSåu˘
->
DMA2D_PixñPîLöe
 = 0x00;

240 
	}
}

248 
	$DMA2D_SèπTøns„r
()

251 
DMA2D
->
CR
 |(
uöt32_t
)
DMA2D_CR_START
;

252 
	}
}

260 
	$DMA2D_Ab‹tTøns„r
()

263 
DMA2D
->
CR
 |(
uöt32_t
)
DMA2D_CR_ABORT
;

265 
	}
}

273 
	$DMA2D_Su•íd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

276 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

278 i‡(
NewSèã
 !
DISABLE
)

281 
DMA2D
->
CR
 |(
uöt32_t
)
DMA2D_CR_SUSP
;

286 
DMA2D
->
CR
 &~(
uöt32_t
)
DMA2D_CR_SUSP
;

288 
	}
}

298 
	$DMA2D_FGC⁄fig
(
DMA2D_FG_InôTy≥Def
* 
DMA2D_FG_InôSåu˘
)

301 
uöt32_t
 
fg_˛utcﬁ‹mode
 = 0;

302 
uöt32_t
 
fg_˛utsize
 = 0;

303 
uöt32_t
 
fg_Æpha_mode
 = 0;

304 
uöt32_t
 
fg_ÆphavÆue
 = 0;

305 
uöt32_t
 
fg_cﬁ‹gªí
 = 0;

306 
uöt32_t
 
fg_cﬁ‹ªd
 = 0;

308 
	`as£π_∑øm
(
	`IS_DMA2D_FGO
(
DMA2D_FG_InôSåu˘
->
DMA2D_FGO
));

309 
	`as£π_∑øm
(
	`IS_DMA2D_FGCM
(
DMA2D_FG_InôSåu˘
->
DMA2D_FGCM
));

310 
	`as£π_∑øm
(
	`IS_DMA2D_FG_CLUT_CM
(
DMA2D_FG_InôSåu˘
->
DMA2D_FG_CLUT_CM
));

311 
	`as£π_∑øm
(
	`IS_DMA2D_FG_CLUT_SIZE
(
DMA2D_FG_InôSåu˘
->
DMA2D_FG_CLUT_SIZE
));

312 
	`as£π_∑øm
(
	`IS_DMA2D_FG_ALPHA_MODE
(
DMA2D_FG_InôSåu˘
->
DMA2D_FGPFC_ALPHA_MODE
));

313 
	`as£π_∑øm
(
	`IS_DMA2D_FG_ALPHA_VALUE
(
DMA2D_FG_InôSåu˘
->
DMA2D_FGPFC_ALPHA_VALUE
));

314 
	`as£π_∑øm
(
	`IS_DMA2D_FGC_BLUE
(
DMA2D_FG_InôSåu˘
->
DMA2D_FGC_BLUE
));

315 
	`as£π_∑øm
(
	`IS_DMA2D_FGC_GREEN
(
DMA2D_FG_InôSåu˘
->
DMA2D_FGC_GREEN
));

316 
	`as£π_∑øm
(
	`IS_DMA2D_FGC_RED
(
DMA2D_FG_InôSåu˘
->
DMA2D_FGC_RED
));

319 
DMA2D
->
FGMAR
 = (
DMA2D_FG_InôSåu˘
->
DMA2D_FGMA
);

322 
DMA2D
->
FGOR
 &~(
uöt32_t
)
DMA2D_FGOR_LO
;

323 
DMA2D
->
FGOR
 |(
DMA2D_FG_InôSåu˘
->
DMA2D_FGO
);

326 
DMA2D
->
FGPFCCR
 &(
uöt32_t
)
PFCCR_MASK
;

327 
fg_˛utcﬁ‹mode
 = 
DMA2D_FG_InôSåu˘
->
DMA2D_FG_CLUT_CM
 << 4;

328 
fg_˛utsize
 = 
DMA2D_FG_InôSåu˘
->
DMA2D_FG_CLUT_SIZE
 << 8;

329 
fg_Æpha_mode
 = 
DMA2D_FG_InôSåu˘
->
DMA2D_FGPFC_ALPHA_MODE
 << 16;

330 
fg_ÆphavÆue
 = 
DMA2D_FG_InôSåu˘
->
DMA2D_FGPFC_ALPHA_VALUE
 << 24;

331 
DMA2D
->
FGPFCCR
 |(
DMA2D_FG_InôSåu˘
->
DMA2D_FGCM
 | 
fg_˛utcﬁ‹mode
 | 
fg_˛utsize
 | \

332 
fg_Æpha_mode
 | 
fg_ÆphavÆue
);

335 
DMA2D
->
FGCOLR
 &~(
DMA2D_FGCOLR_BLUE
 | 
DMA2D_FGCOLR_GREEN
 | 
DMA2D_FGCOLR_RED
);

336 
fg_cﬁ‹gªí
 = 
DMA2D_FG_InôSåu˘
->
DMA2D_FGC_GREEN
 << 8;

337 
fg_cﬁ‹ªd
 = 
DMA2D_FG_InôSåu˘
->
DMA2D_FGC_RED
 << 16;

338 
DMA2D
->
FGCOLR
 |(
DMA2D_FG_InôSåu˘
->
DMA2D_FGC_BLUE
 | 
fg_cﬁ‹gªí
 | 
fg_cﬁ‹ªd
);

341 
DMA2D
->
FGCMAR
 = 
DMA2D_FG_InôSåu˘
->
DMA2D_FGCMAR
;

342 
	}
}

350 
	$DMA2D_FG_Såu˘Inô
(
DMA2D_FG_InôTy≥Def
* 
DMA2D_FG_InôSåu˘
)

353 
DMA2D_FG_InôSåu˘
->
DMA2D_FGMA
 = 0x00;

356 
DMA2D_FG_InôSåu˘
->
DMA2D_FGO
 = 0x00;

359 
DMA2D_FG_InôSåu˘
->
DMA2D_FGCM
 = 
CM_ARGB8888
;

362 
DMA2D_FG_InôSåu˘
->
DMA2D_FG_CLUT_CM
 = 
CLUT_CM_ARGB8888
;

365 
DMA2D_FG_InôSåu˘
->
DMA2D_FG_CLUT_SIZE
 = 0x00;

368 
DMA2D_FG_InôSåu˘
->
DMA2D_FGPFC_ALPHA_MODE
 = 
NO_MODIF_ALPHA_VALUE
;

371 
DMA2D_FG_InôSåu˘
->
DMA2D_FGPFC_ALPHA_VALUE
 = 0x00;

374 
DMA2D_FG_InôSåu˘
->
DMA2D_FGC_BLUE
 = 0x00;

377 
DMA2D_FG_InôSåu˘
->
DMA2D_FGC_GREEN
 = 0x00;

380 
DMA2D_FG_InôSåu˘
->
DMA2D_FGC_RED
 = 0x00;

383 
DMA2D_FG_InôSåu˘
->
DMA2D_FGCMAR
 = 0x00;

384 
	}
}

395 
	$DMA2D_BGC⁄fig
(
DMA2D_BG_InôTy≥Def
* 
DMA2D_BG_InôSåu˘
)

398 
uöt32_t
 
bg_˛utcﬁ‹mode
 = 0;

399 
uöt32_t
 
bg_˛utsize
 = 0;

400 
uöt32_t
 
bg_Æpha_mode
 = 0;

401 
uöt32_t
 
bg_ÆphavÆue
 = 0;

402 
uöt32_t
 
bg_cﬁ‹gªí
 = 0;

403 
uöt32_t
 
bg_cﬁ‹ªd
 = 0;

405 
	`as£π_∑øm
(
	`IS_DMA2D_BGO
(
DMA2D_BG_InôSåu˘
->
DMA2D_BGO
));

406 
	`as£π_∑øm
(
	`IS_DMA2D_BGCM
(
DMA2D_BG_InôSåu˘
->
DMA2D_BGCM
));

407 
	`as£π_∑øm
(
	`IS_DMA2D_BG_CLUT_CM
(
DMA2D_BG_InôSåu˘
->
DMA2D_BG_CLUT_CM
));

408 
	`as£π_∑øm
(
	`IS_DMA2D_BG_CLUT_SIZE
(
DMA2D_BG_InôSåu˘
->
DMA2D_BG_CLUT_SIZE
));

409 
	`as£π_∑øm
(
	`IS_DMA2D_BG_ALPHA_MODE
(
DMA2D_BG_InôSåu˘
->
DMA2D_BGPFC_ALPHA_MODE
));

410 
	`as£π_∑øm
(
	`IS_DMA2D_BG_ALPHA_VALUE
(
DMA2D_BG_InôSåu˘
->
DMA2D_BGPFC_ALPHA_VALUE
));

411 
	`as£π_∑øm
(
	`IS_DMA2D_BGC_BLUE
(
DMA2D_BG_InôSåu˘
->
DMA2D_BGC_BLUE
));

412 
	`as£π_∑øm
(
	`IS_DMA2D_BGC_GREEN
(
DMA2D_BG_InôSåu˘
->
DMA2D_BGC_GREEN
));

413 
	`as£π_∑øm
(
	`IS_DMA2D_BGC_RED
(
DMA2D_BG_InôSåu˘
->
DMA2D_BGC_RED
));

416 
DMA2D
->
BGMAR
 = (
DMA2D_BG_InôSåu˘
->
DMA2D_BGMA
);

419 
DMA2D
->
BGOR
 &~(
uöt32_t
)
DMA2D_BGOR_LO
;

420 
DMA2D
->
BGOR
 |(
DMA2D_BG_InôSåu˘
->
DMA2D_BGO
);

423 
DMA2D
->
BGPFCCR
 &(
uöt32_t
)
PFCCR_MASK
;

424 
bg_˛utcﬁ‹mode
 = 
DMA2D_BG_InôSåu˘
->
DMA2D_BG_CLUT_CM
 << 4;

425 
bg_˛utsize
 = 
DMA2D_BG_InôSåu˘
->
DMA2D_BG_CLUT_SIZE
 << 8;

426 
bg_Æpha_mode
 = 
DMA2D_BG_InôSåu˘
->
DMA2D_BGPFC_ALPHA_MODE
 << 16;

427 
bg_ÆphavÆue
 = 
DMA2D_BG_InôSåu˘
->
DMA2D_BGPFC_ALPHA_VALUE
 << 24;

428 
DMA2D
->
BGPFCCR
 |(
DMA2D_BG_InôSåu˘
->
DMA2D_BGCM
 | 
bg_˛utcﬁ‹mode
 | 
bg_˛utsize
 | \

429 
bg_Æpha_mode
 | 
bg_ÆphavÆue
);

432 
DMA2D
->
BGCOLR
 &~(
DMA2D_BGCOLR_BLUE
 | 
DMA2D_BGCOLR_GREEN
 | 
DMA2D_BGCOLR_RED
);

433 
bg_cﬁ‹gªí
 = 
DMA2D_BG_InôSåu˘
->
DMA2D_BGC_GREEN
 << 8;

434 
bg_cﬁ‹ªd
 = 
DMA2D_BG_InôSåu˘
->
DMA2D_BGC_RED
 << 16;

435 
DMA2D
->
BGCOLR
 |(
DMA2D_BG_InôSåu˘
->
DMA2D_BGC_BLUE
 | 
bg_cﬁ‹gªí
 | 
bg_cﬁ‹ªd
);

438 
DMA2D
->
BGCMAR
 = 
DMA2D_BG_InôSåu˘
->
DMA2D_BGCMAR
;

440 
	}
}

448 
	$DMA2D_BG_Såu˘Inô
(
DMA2D_BG_InôTy≥Def
* 
DMA2D_BG_InôSåu˘
)

451 
DMA2D_BG_InôSåu˘
->
DMA2D_BGMA
 = 0x00;

454 
DMA2D_BG_InôSåu˘
->
DMA2D_BGO
 = 0x00;

457 
DMA2D_BG_InôSåu˘
->
DMA2D_BGCM
 = 
CM_ARGB8888
;

460 
DMA2D_BG_InôSåu˘
->
DMA2D_BG_CLUT_CM
 = 
CLUT_CM_ARGB8888
;

463 
DMA2D_BG_InôSåu˘
->
DMA2D_BG_CLUT_SIZE
 = 0x00;

466 
DMA2D_BG_InôSåu˘
->
DMA2D_BGPFC_ALPHA_MODE
 = 
NO_MODIF_ALPHA_VALUE
;

469 
DMA2D_BG_InôSåu˘
->
DMA2D_BGPFC_ALPHA_VALUE
 = 0x00;

472 
DMA2D_BG_InôSåu˘
->
DMA2D_BGC_BLUE
 = 0x00;

475 
DMA2D_BG_InôSåu˘
->
DMA2D_BGC_GREEN
 = 0x00;

478 
DMA2D_BG_InôSåu˘
->
DMA2D_BGC_RED
 = 0x00;

481 
DMA2D_BG_InôSåu˘
->
DMA2D_BGCMAR
 = 0x00;

482 
	}
}

491 
	$DMA2D_FGSèπ
(
Fun˘i⁄ÆSèã
 
NewSèã
)

494 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

496 i‡(
NewSèã
 !
DISABLE
)

499 
DMA2D
->
FGPFCCR
 |
DMA2D_FGPFCCR_START
;

504 
DMA2D
->
FGPFCCR
 &(
uöt32_t
)~
DMA2D_FGPFCCR_START
;

506 
	}
}

515 
	$DMA2D_BGSèπ
(
Fun˘i⁄ÆSèã
 
NewSèã
)

518 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

520 i‡(
NewSèã
 !
DISABLE
)

523 
DMA2D
->
BGPFCCR
 |
DMA2D_BGPFCCR_START
;

528 
DMA2D
->
BGPFCCR
 &(
uöt32_t
)~
DMA2D_BGPFCCR_START
;

530 
	}
}

538 
	$DMA2D_DódTimeC⁄fig
(
uöt32_t
 
DMA2D_DódTime
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

540 
uöt32_t
 
DódTime
;

543 
	`as£π_∑øm
(
	`IS_DMA2D_DEAD_TIME
(
DMA2D_DódTime
));

544 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

546 i‡(
NewSèã
 !
DISABLE
)

549 
DMA2D
->
AMTCR
 &(
uöt32_t
)
DEAD_MASK
;

550 
DódTime
 = 
DMA2D_DódTime
 << 8;

551 
DMA2D
->
AMTCR
 |(
DódTime
 | 
DMA2D_AMTCR_EN
);

555 
DMA2D
->
AMTCR
 &~(
uöt32_t
)
DMA2D_AMTCR_EN
;

557 
	}
}

565 
	$DMA2D_LöeW©îm¨kC⁄fig
(
uöt32_t
 
DMA2D_LW©îm¨kC⁄fig
)

568 
	`as£π_∑øm
(
	`IS_DMA2D_LöeW©îm¨k
(
DMA2D_LW©îm¨kC⁄fig
));

571 
DMA2D
->
LWR
 = (
uöt32_t
)
DMA2D_LW©îm¨kC⁄fig
;

572 
	}
}

632 
	$DMA2D_ITC⁄fig
(
uöt32_t
 
DMA2D_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

635 
	`as£π_∑øm
(
	`IS_DMA2D_IT
(
DMA2D_IT
));

636 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

638 i‡(
NewSèã
 !
DISABLE
)

641 
DMA2D
->
CR
 |
DMA2D_IT
;

646 
DMA2D
->
CR
 &(
uöt32_t
)~
DMA2D_IT
;

648 
	}
}

663 
FœgSètus
 
	$DMA2D_GëFœgSètus
(
uöt32_t
 
DMA2D_FLAG
)

665 
FœgSètus
 
bô°©us
 = 
RESET
;

668 
	`as£π_∑øm
(
	`IS_DMA2D_GET_FLAG
(
DMA2D_FLAG
));

671 i‡(((
DMA2D
->
ISR
Ë& 
DMA2D_FLAG
Ë!(
uöt32_t
)
RESET
)

674 
bô°©us
 = 
SET
;

679 
bô°©us
 = 
RESET
;

682  
bô°©us
;

683 
	}
}

697 
	$DMA2D_CÀ¨Fœg
(
uöt32_t
 
DMA2D_FLAG
)

700 
	`as£π_∑øm
(
	`IS_DMA2D_GET_FLAG
(
DMA2D_FLAG
));

703 
DMA2D
->
IFCR
 = (
uöt32_t
)
DMA2D_FLAG
;

704 
	}
}

718 
ITSètus
 
	$DMA2D_GëITSètus
(
uöt32_t
 
DMA2D_IT
)

720 
ITSètus
 
bô°©us
 = 
RESET
;

721 
uöt32_t
 
DMA2D_IT_FLAG
 = 
DMA2D_IT
 >> 8;

724 
	`as£π_∑øm
(
	`IS_DMA2D_IT
(
DMA2D_IT
));

726 i‡((
DMA2D
->
ISR
 & 
DMA2D_IT_FLAG
Ë!(
uöt32_t
)
RESET
)

728 
bô°©us
 = 
SET
;

732 
bô°©us
 = 
RESET
;

735 i‡(((
DMA2D
->
CR
 & 
DMA2D_IT
Ë!(
uöt32_t
)
RESET
Ë&& (
bô°©us
 != (uint32_t)RESET))

737 
bô°©us
 = 
SET
;

741 
bô°©us
 = 
RESET
;

743  
bô°©us
;

744 
	}
}

758 
	$DMA2D_CÀ¨ITPídögBô
(
uöt32_t
 
DMA2D_IT
)

761 
	`as£π_∑øm
(
	`IS_DMA2D_IT
(
DMA2D_IT
));

762 
DMA2D_IT
 = DMA2D_IT >> 8;

765 
DMA2D
->
IFCR
 = (
uöt32_t
)
DMA2D_IT
;

766 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_exti.c

67 
	~"°m32f4xx_exti.h
"

81 
	#EXTI_LINENONE
 ((
uöt32_t
)0x00000Ë

	)

109 
	$EXTI_DeInô
()

111 
EXTI
->
IMR
 = 0x00000000;

112 
EXTI
->
EMR
 = 0x00000000;

113 
EXTI
->
RTSR
 = 0x00000000;

114 
EXTI
->
FTSR
 = 0x00000000;

115 
EXTI
->
PR
 = 0x007FFFFF;

116 
	}
}

125 
	$EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

127 
uöt32_t
 
tmp
 = 0;

130 
	`as£π_∑øm
(
	`IS_EXTI_MODE
(
EXTI_InôSåu˘
->
EXTI_Mode
));

131 
	`as£π_∑øm
(
	`IS_EXTI_TRIGGER
(
EXTI_InôSåu˘
->
EXTI_Triggî
));

132 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_InôSåu˘
->
EXTI_Löe
));

133 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
EXTI_InôSåu˘
->
EXTI_LöeCmd
));

135 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

137 i‡(
EXTI_InôSåu˘
->
EXTI_LöeCmd
 !
DISABLE
)

140 
EXTI
->
IMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

141 
EXTI
->
EMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

143 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

145 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

148 
EXTI
->
RTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

149 
EXTI
->
FTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

152 i‡(
EXTI_InôSåu˘
->
EXTI_Triggî
 =
EXTI_Triggî_Risög_FÆlög
)

155 
EXTI
->
RTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

156 
EXTI
->
FTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

160 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

161 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Triggî
;

163 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

168 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

171 *(
__IO
 
uöt32_t
 *Ë
tmp
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

173 
	}
}

181 
	$EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

183 
EXTI_InôSåu˘
->
EXTI_Löe
 = 
EXTI_LINENONE
;

184 
EXTI_InôSåu˘
->
EXTI_Mode
 = 
EXTI_Mode_I¡îru±
;

185 
EXTI_InôSåu˘
->
EXTI_Triggî
 = 
EXTI_Triggî_FÆlög
;

186 
EXTI_InôSåu˘
->
EXTI_LöeCmd
 = 
DISABLE
;

187 
	}
}

196 
	$EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
)

199 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

201 
EXTI
->
SWIER
 |
EXTI_Löe
;

202 
	}
}

226 
FœgSètus
 
	$EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
)

228 
FœgSètus
 
bô°©us
 = 
RESET
;

230 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

232 i‡((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
)

234 
bô°©us
 = 
SET
;

238 
bô°©us
 = 
RESET
;

240  
bô°©us
;

241 
	}
}

249 
	$EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
)

252 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

254 
EXTI
->
PR
 = 
EXTI_Löe
;

255 
	}
}

263 
ITSètus
 
	$EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
)

265 
FœgSètus
 
bô°©us
 = 
RESET
;

267 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

269 i‡((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
)

271 
bô°©us
 = 
SET
;

275 
bô°©us
 = 
RESET
;

277  
bô°©us
;

279 
	}
}

287 
	$EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
)

290 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

292 
EXTI
->
PR
 = 
EXTI_Löe
;

293 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_flash.c

72 
	~"°m32f4xx_Êash.h
"

85 
	#SECTOR_MASK
 ((
uöt32_t
)0xFFFFFF07)

	)

277 
	$FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
)

280 
	`as£π_∑øm
(
	`IS_FLASH_LATENCY
(
FLASH_L©ícy
));

283 *(
__IO
 
uöt8_t
 *)
ACR_BYTE0_ADDRESS
 = (uöt8_t)
FLASH_L©ícy
;

284 
	}
}

292 
	$FLASH_Pª„tchBuf„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

295 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

298 if(
NewSèã
 !
DISABLE
)

300 
FLASH
->
ACR
 |
FLASH_ACR_PRFTEN
;

304 
FLASH
->
ACR
 &(~
FLASH_ACR_PRFTEN
);

306 
	}
}

314 
	$FLASH_In°ru˘i⁄CacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

317 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

319 if(
NewSèã
 !
DISABLE
)

321 
FLASH
->
ACR
 |
FLASH_ACR_ICEN
;

325 
FLASH
->
ACR
 &(~
FLASH_ACR_ICEN
);

327 
	}
}

335 
	$FLASH_D©aCacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

338 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

340 if(
NewSèã
 !
DISABLE
)

342 
FLASH
->
ACR
 |
FLASH_ACR_DCEN
;

346 
FLASH
->
ACR
 &(~
FLASH_ACR_DCEN
);

348 
	}
}

356 
	$FLASH_In°ru˘i⁄CacheRe£t
()

358 
FLASH
->
ACR
 |
FLASH_ACR_ICRST
;

359 
	}
}

367 
	$FLASH_D©aCacheRe£t
()

369 
FLASH
->
ACR
 |
FLASH_ACR_DCRST
;

370 
	}
}

414 
	$FLASH_U∆ock
()

416 if((
FLASH
->
CR
 & 
FLASH_CR_LOCK
Ë!
RESET
)

419 
FLASH
->
KEYR
 = 
FLASH_KEY1
;

420 
FLASH
->
KEYR
 = 
FLASH_KEY2
;

422 
	}
}

429 
	$FLASH_Lock
()

432 
FLASH
->
CR
 |
FLASH_CR_LOCK
;

433 
	}
}

469 
FLASH_Sètus
 
	$FLASH_Eø£Se˘‹
(
uöt32_t
 
FLASH_Se˘‹
, 
uöt8_t
 
VﬁègeR™ge
)

471 
uöt32_t
 
tmp_psize
 = 0x0;

472 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

475 
	`as£π_∑øm
(
	`IS_FLASH_SECTOR
(
FLASH_Se˘‹
));

476 
	`as£π_∑øm
(
	`IS_VOLTAGERANGE
(
VﬁègeR™ge
));

478 if(
VﬁègeR™ge
 =
VﬁègeR™ge_1
)

480 
tmp_psize
 = 
FLASH_PSIZE_BYTE
;

482 if(
VﬁègeR™ge
 =
VﬁègeR™ge_2
)

484 
tmp_psize
 = 
FLASH_PSIZE_HALF_WORD
;

486 if(
VﬁègeR™ge
 =
VﬁègeR™ge_3
)

488 
tmp_psize
 = 
FLASH_PSIZE_WORD
;

492 
tmp_psize
 = 
FLASH_PSIZE_DOUBLE_WORD
;

495 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

497 if(
°©us
 =
FLASH_COMPLETE
)

500 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

501 
FLASH
->
CR
 |
tmp_psize
;

502 
FLASH
->
CR
 &
SECTOR_MASK
;

503 
FLASH
->
CR
 |
FLASH_CR_SER
 | 
FLASH_Se˘‹
;

504 
FLASH
->
CR
 |
FLASH_CR_STRT
;

507 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

510 
FLASH
->
CR
 &(~
FLASH_CR_SER
);

511 
FLASH
->
CR
 &
SECTOR_MASK
;

514  
°©us
;

515 
	}
}

537 
FLASH_Sètus
 
	$FLASH_Eø£AŒSe˘‹s
(
uöt8_t
 
VﬁègeR™ge
)

539 
uöt32_t
 
tmp_psize
 = 0x0;

540 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

543 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

544 
	`as£π_∑øm
(
	`IS_VOLTAGERANGE
(
VﬁègeR™ge
));

546 if(
VﬁègeR™ge
 =
VﬁègeR™ge_1
)

548 
tmp_psize
 = 
FLASH_PSIZE_BYTE
;

550 if(
VﬁègeR™ge
 =
VﬁègeR™ge_2
)

552 
tmp_psize
 = 
FLASH_PSIZE_HALF_WORD
;

554 if(
VﬁègeR™ge
 =
VﬁègeR™ge_3
)

556 
tmp_psize
 = 
FLASH_PSIZE_WORD
;

560 
tmp_psize
 = 
FLASH_PSIZE_DOUBLE_WORD
;

562 if(
°©us
 =
FLASH_COMPLETE
)

565 #i‡
	`deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
)

566 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

567 
FLASH
->
CR
 |
tmp_psize
;

568 
FLASH
->
CR
 |(
FLASH_CR_MER1
 | 
FLASH_CR_MER2
);

569 
FLASH
->
CR
 |
FLASH_CR_STRT
;

572 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

575 
FLASH
->
CR
 &~(
FLASH_CR_MER1
 | 
FLASH_CR_MER2
);

578 #i‡
	`deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
)

579 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

580 
FLASH
->
CR
 |
tmp_psize
;

581 
FLASH
->
CR
 |
FLASH_CR_MER
;

582 
FLASH
->
CR
 |
FLASH_CR_STRT
;

585 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

588 
FLASH
->
CR
 &(~
FLASH_CR_MER
);

593  
°©us
;

594 
	}
}

618 
FLASH_Sètus
 
	$FLASH_Eø£AŒB™k1Se˘‹s
(
uöt8_t
 
VﬁègeR™ge
)

620 
uöt32_t
 
tmp_psize
 = 0x0;

621 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

624 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

625 
	`as£π_∑øm
(
	`IS_VOLTAGERANGE
(
VﬁègeR™ge
));

627 if(
VﬁègeR™ge
 =
VﬁègeR™ge_1
)

629 
tmp_psize
 = 
FLASH_PSIZE_BYTE
;

631 if(
VﬁègeR™ge
 =
VﬁègeR™ge_2
)

633 
tmp_psize
 = 
FLASH_PSIZE_HALF_WORD
;

635 if(
VﬁègeR™ge
 =
VﬁègeR™ge_3
)

637 
tmp_psize
 = 
FLASH_PSIZE_WORD
;

641 
tmp_psize
 = 
FLASH_PSIZE_DOUBLE_WORD
;

643 if(
°©us
 =
FLASH_COMPLETE
)

646 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

647 
FLASH
->
CR
 |
tmp_psize
;

648 
FLASH
->
CR
 |
FLASH_CR_MER1
;

649 
FLASH
->
CR
 |
FLASH_CR_STRT
;

652 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

655 
FLASH
->
CR
 &(~
FLASH_CR_MER1
);

659  
°©us
;

660 
	}
}

685 
FLASH_Sètus
 
	$FLASH_Eø£AŒB™k2Se˘‹s
(
uöt8_t
 
VﬁègeR™ge
)

687 
uöt32_t
 
tmp_psize
 = 0x0;

688 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

691 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

692 
	`as£π_∑øm
(
	`IS_VOLTAGERANGE
(
VﬁègeR™ge
));

694 if(
VﬁègeR™ge
 =
VﬁègeR™ge_1
)

696 
tmp_psize
 = 
FLASH_PSIZE_BYTE
;

698 if(
VﬁègeR™ge
 =
VﬁègeR™ge_2
)

700 
tmp_psize
 = 
FLASH_PSIZE_HALF_WORD
;

702 if(
VﬁègeR™ge
 =
VﬁègeR™ge_3
)

704 
tmp_psize
 = 
FLASH_PSIZE_WORD
;

708 
tmp_psize
 = 
FLASH_PSIZE_DOUBLE_WORD
;

710 if(
°©us
 =
FLASH_COMPLETE
)

713 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

714 
FLASH
->
CR
 |
tmp_psize
;

715 
FLASH
->
CR
 |
FLASH_CR_MER2
;

716 
FLASH
->
CR
 |
FLASH_CR_STRT
;

719 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

722 
FLASH
->
CR
 &(~
FLASH_CR_MER2
);

726  
°©us
;

727 
	}
}

742 
FLASH_Sètus
 
	$FLASH_ProgømDoubÀW‹d
(
uöt32_t
 
Addªss
, 
uöt64_t
 
D©a
)

744 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

747 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

750 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

752 if(
°©us
 =
FLASH_COMPLETE
)

755 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

756 
FLASH
->
CR
 |
FLASH_PSIZE_DOUBLE_WORD
;

757 
FLASH
->
CR
 |
FLASH_CR_PG
;

759 *(
__IO
 
uöt64_t
*)
Addªss
 = 
D©a
;

762 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

765 
FLASH
->
CR
 &(~
FLASH_CR_PG
);

768  
°©us
;

769 
	}
}

785 
FLASH_Sètus
 
	$FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
)

787 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

790 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

793 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

795 if(
°©us
 =
FLASH_COMPLETE
)

798 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

799 
FLASH
->
CR
 |
FLASH_PSIZE_WORD
;

800 
FLASH
->
CR
 |
FLASH_CR_PG
;

802 *(
__IO
 
uöt32_t
*)
Addªss
 = 
D©a
;

805 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

808 
FLASH
->
CR
 &(~
FLASH_CR_PG
);

811  
°©us
;

812 
	}
}

827 
FLASH_Sètus
 
	$FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
)

829 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

832 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

835 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

837 if(
°©us
 =
FLASH_COMPLETE
)

840 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

841 
FLASH
->
CR
 |
FLASH_PSIZE_HALF_WORD
;

842 
FLASH
->
CR
 |
FLASH_CR_PG
;

844 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

847 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

850 
FLASH
->
CR
 &(~
FLASH_CR_PG
);

853  
°©us
;

854 
	}
}

869 
FLASH_Sètus
 
	$FLASH_ProgømByã
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
)

871 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

874 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

877 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

879 if(
°©us
 =
FLASH_COMPLETE
)

882 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

883 
FLASH
->
CR
 |
FLASH_PSIZE_BYTE
;

884 
FLASH
->
CR
 |
FLASH_CR_PG
;

886 *(
__IO
 
uöt8_t
*)
Addªss
 = 
D©a
;

889 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

892 
FLASH
->
CR
 &(~
FLASH_CR_PG
);

896  
°©us
;

897 
	}
}

968 
	$FLASH_OB_U∆ock
()

970 if((
FLASH
->
OPTCR
 & 
FLASH_OPTCR_OPTLOCK
Ë!
RESET
)

973 
FLASH
->
OPTKEYR
 = 
FLASH_OPT_KEY1
;

974 
FLASH
->
OPTKEYR
 = 
FLASH_OPT_KEY2
;

976 
	}
}

983 
	$FLASH_OB_Lock
()

986 
FLASH
->
OPTCR
 |
FLASH_OPTCR_OPTLOCK
;

987 
	}
}

1006 
	$FLASH_OB_WRPC⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1008 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1011 
	`as£π_∑øm
(
	`IS_OB_WRP
(
OB_WRP
));

1012 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1014 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1016 if(
°©us
 =
FLASH_COMPLETE
)

1018 if(
NewSèã
 !
DISABLE
)

1020 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 &(~
OB_WRP
);

1024 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 |(uöt16_t)
OB_WRP
;

1027 
	}
}

1048 
	$FLASH_OB_WRP1C⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1050 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1053 
	`as£π_∑øm
(
	`IS_OB_WRP
(
OB_WRP
));

1054 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1056 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1058 if(
°©us
 =
FLASH_COMPLETE
)

1060 if(
NewSèã
 !
DISABLE
)

1062 *(
__IO
 
uöt16_t
*)
OPTCR1_BYTE2_ADDRESS
 &(~
OB_WRP
);

1066 *(
__IO
 
uöt16_t
*)
OPTCR1_BYTE2_ADDRESS
 |(uöt16_t)
OB_WRP
;

1069 
	}
}

1098 
	$FLASH_OB_PCROPSñe˘i⁄C⁄fig
(
uöt8_t
 
OB_PcROP
)

1100 
uöt8_t
 
›ti⁄tmp
 = 0xFF;

1103 
	`as£π_∑øm
(
	`IS_OB_PCROP_SELECT
(
OB_PcROP
));

1106 
›ti⁄tmp
 = (
uöt8_t
)((*(
__IO
 uöt8_à*)
OPTCR_BYTE3_ADDRESS
) & (uint8_t)0x7F);

1108 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE3_ADDRESS
 = (uöt8_t)(
OB_PcROP
 | 
›ti⁄tmp
);

1110 
	}
}

1128 
	$FLASH_OB_PCROPC⁄fig
(
uöt32_t
 
OB_PCROP
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1130 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1133 
	`as£π_∑øm
(
	`IS_OB_PCROP
(
OB_PCROP
));

1134 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1136 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1138 if(
°©us
 =
FLASH_COMPLETE
)

1140 if(
NewSèã
 !
DISABLE
)

1142 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 |(uöt16_t)
OB_PCROP
;

1146 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 &(~
OB_PCROP
);

1149 
	}
}

1165 
	$FLASH_OB_PCROP1C⁄fig
(
uöt32_t
 
OB_PCROP
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1167 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1170 
	`as£π_∑øm
(
	`IS_OB_PCROP
(
OB_PCROP
));

1171 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1173 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1175 if(
°©us
 =
FLASH_COMPLETE
)

1177 if(
NewSèã
 !
DISABLE
)

1179 *(
__IO
 
uöt16_t
*)
OPTCR1_BYTE2_ADDRESS
 |(uöt16_t)
OB_PCROP
;

1183 *(
__IO
 
uöt16_t
*)
OPTCR1_BYTE2_ADDRESS
 &(~
OB_PCROP
);

1186 
	}
}

1201 
	$FLASH_OB_RDPC⁄fig
(
uöt8_t
 
OB_RDP
)

1203 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1206 
	`as£π_∑øm
(
	`IS_OB_RDP
(
OB_RDP
));

1208 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1210 if(
°©us
 =
FLASH_COMPLETE
)

1212 *(
__IO
 
uöt8_t
*)
OPTCR_BYTE1_ADDRESS
 = 
OB_RDP
;

1215 
	}
}

1233 
	$FLASH_OB_U£rC⁄fig
(
uöt8_t
 
OB_IWDG
, uöt8_à
OB_STOP
, uöt8_à
OB_STDBY
)

1235 
uöt8_t
 
›ti⁄tmp
 = 0xFF;

1236 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1239 
	`as£π_∑øm
(
	`IS_OB_IWDG_SOURCE
(
OB_IWDG
));

1240 
	`as£π_∑øm
(
	`IS_OB_STOP_SOURCE
(
OB_STOP
));

1241 
	`as£π_∑øm
(
	`IS_OB_STDBY_SOURCE
(
OB_STDBY
));

1244 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1246 if(
°©us
 =
FLASH_COMPLETE
)

1248 #i‡
	`deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
)

1250 
›ti⁄tmp
 = (
uöt8_t
)((*(
__IO
 uöt8_à*)
OPTCR_BYTE0_ADDRESS
) & (uint8_t)0x1F);

1253 #i‡
	`deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
)

1255 
›ti⁄tmp
 = (
uöt8_t
)((*(
__IO
 uöt8_à*)
OPTCR_BYTE0_ADDRESS
) & (uint8_t)0x0F);

1259 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 = 
OB_IWDG
 | (uöt8_t)(
OB_STDBY
 | (uöt8_t)(
OB_STOP
 | ((uöt8_t)
›ti⁄tmp
)));

1261 
	}
}

1274 
	$FLASH_OB_BoŸC⁄fig
(
uöt8_t
 
OB_BOOT
)

1277 
	`as£π_∑øm
(
	`IS_OB_BOOT
(
OB_BOOT
));

1280 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 &(~
FLASH_OPTCR_BFB2
);

1281 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 |
OB_BOOT
;

1283 
	}
}

1295 
	$FLASH_OB_BORC⁄fig
(
uöt8_t
 
OB_BOR
)

1298 
	`as£π_∑øm
(
	`IS_OB_BOR
(
OB_BOR
));

1301 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 &(~
FLASH_OPTCR_BOR_LEV
);

1302 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 |
OB_BOR
;

1304 
	}
}

1312 
FLASH_Sètus
 
	$FLASH_OB_Launch
()

1314 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1317 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 |
FLASH_OPTCR_OPTSTRT
;

1320 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1322  
°©us
;

1323 
	}
}

1331 
uöt8_t
 
	$FLASH_OB_GëU£r
()

1334  (
uöt8_t
)(
FLASH
->
OPTCR
 >> 5);

1335 
	}
}

1342 
uöt16_t
 
	$FLASH_OB_GëWRP
()

1345  (*(
__IO
 
uöt16_t
 *)(
OPTCR_BYTE2_ADDRESS
));

1346 
	}
}

1356 
uöt16_t
 
	$FLASH_OB_GëWRP1
()

1359  (*(
__IO
 
uöt16_t
 *)(
OPTCR1_BYTE2_ADDRESS
));

1360 
	}
}

1370 
uöt16_t
 
	$FLASH_OB_GëPCROP
()

1373  (*(
__IO
 
uöt16_t
 *)(
OPTCR_BYTE2_ADDRESS
));

1374 
	}
}

1384 
uöt16_t
 
	$FLASH_OB_GëPCROP1
()

1387  (*(
__IO
 
uöt16_t
 *)(
OPTCR1_BYTE2_ADDRESS
));

1388 
	}
}

1397 
FœgSètus
 
	$FLASH_OB_GëRDP
()

1399 
FœgSètus
 
ªad°©us
 = 
RESET
;

1401 i‡((*(
__IO
 
uöt8_t
*)(
OPTCR_BYTE1_ADDRESS
Ë!(uöt8_t)
OB_RDP_Levñ_0
))

1403 
ªad°©us
 = 
SET
;

1407 
ªad°©us
 = 
RESET
;

1409  
ªad°©us
;

1410 
	}
}

1421 
uöt8_t
 
	$FLASH_OB_GëBOR
()

1424  (
uöt8_t
)(*(
__IO
 uöt8_à*)(
OPTCR_BYTE0_ADDRESS
) & (uint8_t)0x0C);

1425 
	}
}

1450 
	$FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1453 
	`as£π_∑øm
(
	`IS_FLASH_IT
(
FLASH_IT
));

1454 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1456 if(
NewSèã
 !
DISABLE
)

1459 
FLASH
->
CR
 |
FLASH_IT
;

1464 
FLASH
->
CR
 &~(
uöt32_t
)
FLASH_IT
;

1466 
	}
}

1482 
FœgSètus
 
	$FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
)

1484 
FœgSètus
 
bô°©us
 = 
RESET
;

1486 
	`as£π_∑øm
(
	`IS_FLASH_GET_FLAG
(
FLASH_FLAG
));

1488 if((
FLASH
->
SR
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1490 
bô°©us
 = 
SET
;

1494 
bô°©us
 = 
RESET
;

1497  
bô°©us
;

1498 
	}
}

1513 
	$FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
)

1516 
	`as£π_∑øm
(
	`IS_FLASH_CLEAR_FLAG
(
FLASH_FLAG
));

1519 
FLASH
->
SR
 = 
FLASH_FLAG
;

1520 
	}
}

1528 
FLASH_Sètus
 
	$FLASH_GëSètus
()

1530 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

1532 if((
FLASH
->
SR
 & 
FLASH_FLAG_BSY
) == FLASH_FLAG_BSY)

1534 
Êash°©us
 = 
FLASH_BUSY
;

1538 if((
FLASH
->
SR
 & 
FLASH_FLAG_WRPERR
Ë!(
uöt32_t
)0x00)

1540 
Êash°©us
 = 
FLASH_ERROR_WRP
;

1544 if((
FLASH
->
SR
 & 
FLASH_FLAG_RDERR
Ë!(
uöt32_t
)0x00)

1546 
Êash°©us
 = 
FLASH_ERROR_RD
;

1550 if((
FLASH
->
SR
 & (
uöt32_t
)0xE0) != (uint32_t)0x00)

1552 
Êash°©us
 = 
FLASH_ERROR_PROGRAM
;

1556 if((
FLASH
->
SR
 & 
FLASH_FLAG_OPERR
Ë!(
uöt32_t
)0x00)

1558 
Êash°©us
 = 
FLASH_ERROR_OPERATION
;

1562 
Êash°©us
 = 
FLASH_COMPLETE
;

1569  
Êash°©us
;

1570 
	}
}

1578 
FLASH_Sètus
 
	$FLASH_WaôF‹La°O≥øti⁄
()

1580 
__IO
 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1583 
°©us
 = 
	`FLASH_GëSètus
();

1588 
°©us
 =
FLASH_BUSY
)

1590 
°©us
 = 
	`FLASH_GëSètus
();

1593  
°©us
;

1594 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_flash_ramfunc.c

58 
	~"°m32f4xx_Êash_ømfunc.h
"

105 
__RAM_FUNC
 
	$FLASH_FœshI¡îÁ˚Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

107 i‡(
NewSèã
 !
DISABLE
)

110 
	`CLEAR_BIT
(
PWR
->
CR
, 
PWR_CR_FISSR
);

115 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_FISSR
);

117 
	}
}

128 
__RAM_FUNC
 
	$FLASH_FœshSÀïModeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

130 i‡(
NewSèã
 !
DISABLE
)

133 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_FMSSR
);

138 
	`CLEAR_BIT
(
PWR
->
CR
, 
PWR_CR_FMSSR
);

140 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_fmc.c

36 
	~"°m32f4xx_fmc.h
"

37 
	~"°m32f4xx_rcc.h
"

49 c⁄° 
FMC_NORSRAMTimögInôTy≥Def
 
	gFMC_DeÁu…TimögSåu˘
 = {0x0F,

55 
FMC_Ac˚ssMode_A


59 
	#BCR_MBKEN_SET
 ((
uöt32_t
)0x00000001)

	)

60 
	#BCR_MBKEN_RESET
 ((
uöt32_t
)0x000FFFFE)

	)

61 
	#BCR_FACCEN_SET
 ((
uöt32_t
)0x00000040)

	)

64 
	#PCR_PBKEN_SET
 ((
uöt32_t
)0x00000004)

	)

65 
	#PCR_PBKEN_RESET
 ((
uöt32_t
)0x000FFFFB)

	)

66 
	#PCR_ECCEN_SET
 ((
uöt32_t
)0x00000040)

	)

67 
	#PCR_ECCEN_RESET
 ((
uöt32_t
)0x000FFFBF)

	)

68 
	#PCR_MEMORYTYPE_NAND
 ((
uöt32_t
)0x00000008)

	)

71 
	#SDCR_WrôePrŸe˘i⁄_RESET
 ((
uöt32_t
)0x00007DFF)

	)

74 
	#SDCMR_CTB1_RESET
 ((
uöt32_t
)0x003FFFEF)

	)

75 
	#SDCMR_CTB2_RESET
 ((
uöt32_t
)0x003FFFF7)

	)

76 
	#SDCMR_CTB1_2_RESET
 ((
uöt32_t
)0x003FFFE7)

	)

136 
	$FMC_NORSRAMDeInô
(
uöt32_t
 
FMC_B™k
)

139 
	`as£π_∑øm
(
	`IS_FMC_NORSRAM_BANK
(
FMC_B™k
));

142 if(
FMC_B™k
 =
FMC_B™k1_NORSRAM1
)

144 
FMC_B™k1
->
BTCR
[
FMC_B™k
] = 0x000030DB;

149 
FMC_B™k1
->
BTCR
[
FMC_B™k
] = 0x000030D2;

151 
FMC_B™k1
->
BTCR
[
FMC_B™k
 + 1] = 0x0FFFFFFF;

152 
FMC_B™k1E
->
BWTR
[
FMC_B™k
] = 0x0FFFFFFF;

153 
	}
}

163 
	$FMC_NORSRAMInô
(
FMC_NORSRAMInôTy≥Def
* 
FMC_NORSRAMInôSåu˘
)

165 
uöt32_t
 
tm¥
 = 0, 
tmpb¸
 = 0;

168 
	`as£π_∑øm
(
	`IS_FMC_NORSRAM_BANK
(
FMC_NORSRAMInôSåu˘
->
FMC_B™k
));

169 
	`as£π_∑øm
(
	`IS_FMC_MUX
(
FMC_NORSRAMInôSåu˘
->
FMC_D©aAddªssMux
));

170 
	`as£π_∑øm
(
	`IS_FMC_MEMORY
(
FMC_NORSRAMInôSåu˘
->
FMC_Mem‹yTy≥
));

171 
	`as£π_∑øm
(
	`IS_FMC_NORSRAM_MEMORY_WIDTH
(
FMC_NORSRAMInôSåu˘
->
FMC_Mem‹yD©aWidth
));

172 
	`as£π_∑øm
(
	`IS_FMC_BURSTMODE
(
FMC_NORSRAMInôSåu˘
->
FMC_Bur°Ac˚ssMode
));

173 
	`as£π_∑øm
(
	`IS_FMC_WAIT_POLARITY
(
FMC_NORSRAMInôSåu˘
->
FMC_WaôSig«lPﬁ¨ôy
));

174 
	`as£π_∑øm
(
	`IS_FMC_WRAP_MODE
(
FMC_NORSRAMInôSåu˘
->
FMC_WøpMode
));

175 
	`as£π_∑øm
(
	`IS_FMC_WAIT_SIGNAL_ACTIVE
(
FMC_NORSRAMInôSåu˘
->
FMC_WaôSig«lA˘ive
));

176 
	`as£π_∑øm
(
	`IS_FMC_WRITE_OPERATION
(
FMC_NORSRAMInôSåu˘
->
FMC_WrôeO≥øti⁄
));

177 
	`as£π_∑øm
(
	`IS_FMC_WAITE_SIGNAL
(
FMC_NORSRAMInôSåu˘
->
FMC_WaôSig«l
));

178 
	`as£π_∑øm
(
	`IS_FMC_EXTENDED_MODE
(
FMC_NORSRAMInôSåu˘
->
FMC_ExãndedMode
));

179 
	`as£π_∑øm
(
	`IS_FMC_ASYNWAIT
(
FMC_NORSRAMInôSåu˘
->
FMC_Asynchr⁄ousWaô
));

180 
	`as£π_∑øm
(
	`IS_FMC_WRITE_BURST
(
FMC_NORSRAMInôSåu˘
->
FMC_WrôeBur°
));

181 
	`as£π_∑øm
(
	`IS_FMC_CONTINOUS_CLOCK
(
FMC_NORSRAMInôSåu˘
->
FMC_C⁄töousClock
));

182 
	`as£π_∑øm
(
	`IS_FMC_ADDRESS_SETUP_TIME
(
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_AddªssSëupTime
));

183 
	`as£π_∑øm
(
	`IS_FMC_ADDRESS_HOLD_TIME
(
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_AddªssHﬁdTime
));

184 
	`as£π_∑øm
(
	`IS_FMC_DATASETUP_TIME
(
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_D©aSëupTime
));

185 
	`as£π_∑øm
(
	`IS_FMC_TURNAROUND_TIME
(
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_BusTu∫AroundDuøti⁄
));

186 
	`as£π_∑øm
(
	`IS_FMC_CLK_DIV
(
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_CLKDivisi⁄
));

187 
	`as£π_∑øm
(
	`IS_FMC_DATA_LATENCY
(
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_D©aL©ícy
));

188 
	`as£π_∑øm
(
	`IS_FMC_ACCESS_MODE
(
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_Ac˚ssMode
));

191 
tmpb¸
 = 
FMC_B™k1
->
BTCR
[
FMC_NORSRAMInôSåu˘
->
FMC_B™k
];

195 
tmpb¸
 &((
uöt32_t
)~(
FMC_BCR1_MBKEN
 | 
FMC_BCR1_MUXEN
 | 
FMC_BCR1_MTYP
 | \

196 
FMC_BCR1_MWID
 | 
FMC_BCR1_FACCEN
 | 
FMC_BCR1_BURSTEN
 | \

197 
FMC_BCR1_WAITPOL
 | 
FMC_BCR1_WRAPMOD
 | 
FMC_BCR1_WAITCFG
 | \

198 
FMC_BCR1_WREN
 | 
FMC_BCR1_WAITEN
 | 
FMC_BCR1_EXTMOD
 | \

199 
FMC_BCR1_ASYNCWAIT
| 
FMC_BCR1_CBURSTRW
 | 
FMC_BCR1_CCLKEN
));

202 
tmpb¸
 |(
uöt32_t
)
FMC_NORSRAMInôSåu˘
->
FMC_D©aAddªssMux
 |

203 
FMC_NORSRAMInôSåu˘
->
FMC_Mem‹yTy≥
 |

204 
FMC_NORSRAMInôSåu˘
->
FMC_Mem‹yD©aWidth
 |

205 
FMC_NORSRAMInôSåu˘
->
FMC_Bur°Ac˚ssMode
 |

206 
FMC_NORSRAMInôSåu˘
->
FMC_WaôSig«lPﬁ¨ôy
 |

207 
FMC_NORSRAMInôSåu˘
->
FMC_WøpMode
 |

208 
FMC_NORSRAMInôSåu˘
->
FMC_WaôSig«lA˘ive
 |

209 
FMC_NORSRAMInôSåu˘
->
FMC_WrôeO≥øti⁄
 |

210 
FMC_NORSRAMInôSåu˘
->
FMC_WaôSig«l
 |

211 
FMC_NORSRAMInôSåu˘
->
FMC_ExãndedMode
 |

212 
FMC_NORSRAMInôSåu˘
->
FMC_Asynchr⁄ousWaô
 |

213 
FMC_NORSRAMInôSåu˘
->
FMC_WrôeBur°
 |

214 
FMC_NORSRAMInôSåu˘
->
FMC_C⁄töousClock
;

216 
FMC_B™k1
->
BTCR
[
FMC_NORSRAMInôSåu˘
->
FMC_B™k
] = 
tmpb¸
;

218 if(
FMC_NORSRAMInôSåu˘
->
FMC_Mem‹yTy≥
 =
FMC_Mem‹yTy≥_NOR
)

220 
FMC_B™k1
->
BTCR
[
FMC_NORSRAMInôSåu˘
->
FMC_B™k
] |(
uöt32_t
)
BCR_FACCEN_SET
;

224 if((
FMC_NORSRAMInôSåu˘
->
FMC_C⁄töousClock
 =
FMC_CClock_SyncAsync
Ë&& (FMC_NORSRAMInôSåu˘->
FMC_B™k
 !
FMC_B™k1_NORSRAM1
))

226 
tm¥
 = (
uöt32_t
)((
FMC_B™k1
->
BTCR
[
FMC_B™k1_NORSRAM1
+1]) & ~(((uint32_t)0x0F) << 20));

228 
FMC_B™k1
->
BTCR
[
FMC_B™k1_NORSRAM1
] |
FMC_NORSRAMInôSåu˘
->
FMC_C⁄töousClock
;

229 
FMC_B™k1
->
BTCR
[
FMC_B™k1_NORSRAM1
] |
FMC_Bur°Ac˚ssMode_E«bÀ
;

230 
FMC_B™k1
->
BTCR
[
FMC_B™k1_NORSRAM1
+1] = (
uöt32_t
)(
tm¥
 | (((
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_CLKDivisi⁄
)-1) << 20));

234 
FMC_B™k1
->
BTCR
[
FMC_NORSRAMInôSåu˘
->
FMC_B™k
+1] =

235 (
uöt32_t
)
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_AddªssSëupTime
 |

236 (
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_AddªssHﬁdTime
 << 4) |

237 (
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_D©aSëupTime
 << 8) |

238 (
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_BusTu∫AroundDuøti⁄
 << 16) |

239 ((
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_CLKDivisi⁄
) << 20) |

240 ((
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_D©aL©ícy
) << 24) |

241 
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
->
FMC_Ac˚ssMode
;

244 if(
FMC_NORSRAMInôSåu˘
->
FMC_ExãndedMode
 =
FMC_ExãndedMode_E«bÀ
)

246 
	`as£π_∑øm
(
	`IS_FMC_ADDRESS_SETUP_TIME
(
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
->
FMC_AddªssSëupTime
));

247 
	`as£π_∑øm
(
	`IS_FMC_ADDRESS_HOLD_TIME
(
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
->
FMC_AddªssHﬁdTime
));

248 
	`as£π_∑øm
(
	`IS_FMC_DATASETUP_TIME
(
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
->
FMC_D©aSëupTime
));

249 
	`as£π_∑øm
(
	`IS_FMC_CLK_DIV
(
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
->
FMC_CLKDivisi⁄
));

250 
	`as£π_∑øm
(
	`IS_FMC_DATA_LATENCY
(
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
->
FMC_D©aL©ícy
));

251 
	`as£π_∑øm
(
	`IS_FMC_ACCESS_MODE
(
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
->
FMC_Ac˚ssMode
));

253 
FMC_B™k1E
->
BWTR
[
FMC_NORSRAMInôSåu˘
->
FMC_B™k
] =

254 (
uöt32_t
)
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
->
FMC_AddªssSëupTime
 |

255 (
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
->
FMC_AddªssHﬁdTime
 << 4 )|

256 (
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
->
FMC_D©aSëupTime
 << 8) |

257 ((
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
->
FMC_CLKDivisi⁄
) << 20) |

258 ((
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
->
FMC_D©aL©ícy
) << 24) |

259 
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
->
FMC_Ac˚ssMode
;

263 
FMC_B™k1E
->
BWTR
[
FMC_NORSRAMInôSåu˘
->
FMC_B™k
] = 0x0FFFFFFF;

266 
	}
}

274 
	$FMC_NORSRAMSåu˘Inô
(
FMC_NORSRAMInôTy≥Def
* 
FMC_NORSRAMInôSåu˘
)

277 
FMC_NORSRAMInôSåu˘
->
FMC_B™k
 = 
FMC_B™k1_NORSRAM1
;

278 
FMC_NORSRAMInôSåu˘
->
FMC_D©aAddªssMux
 = 
FMC_D©aAddªssMux_E«bÀ
;

279 
FMC_NORSRAMInôSåu˘
->
FMC_Mem‹yTy≥
 = 
FMC_Mem‹yTy≥_SRAM
;

280 
FMC_NORSRAMInôSåu˘
->
FMC_Mem‹yD©aWidth
 = 
FMC_NORSRAM_Mem‹yD©aWidth_16b
;

281 
FMC_NORSRAMInôSåu˘
->
FMC_Bur°Ac˚ssMode
 = 
FMC_Bur°Ac˚ssMode_DißbÀ
;

282 
FMC_NORSRAMInôSåu˘
->
FMC_Asynchr⁄ousWaô
 = 
FMC_Asynchr⁄ousWaô_DißbÀ
;

283 
FMC_NORSRAMInôSåu˘
->
FMC_WaôSig«lPﬁ¨ôy
 = 
FMC_WaôSig«lPﬁ¨ôy_Low
;

284 
FMC_NORSRAMInôSåu˘
->
FMC_WøpMode
 = 
FMC_WøpMode_DißbÀ
;

285 
FMC_NORSRAMInôSåu˘
->
FMC_WaôSig«lA˘ive
 = 
FMC_WaôSig«lA˘ive_Bef‹eWaôSèã
;

286 
FMC_NORSRAMInôSåu˘
->
FMC_WrôeO≥øti⁄
 = 
FMC_WrôeO≥øti⁄_E«bÀ
;

287 
FMC_NORSRAMInôSåu˘
->
FMC_WaôSig«l
 = 
FMC_WaôSig«l_E«bÀ
;

288 
FMC_NORSRAMInôSåu˘
->
FMC_ExãndedMode
 = 
FMC_ExãndedMode_DißbÀ
;

289 
FMC_NORSRAMInôSåu˘
->
FMC_WrôeBur°
 = 
FMC_WrôeBur°_DißbÀ
;

290 
FMC_NORSRAMInôSåu˘
->
FMC_C⁄töousClock
 = 
FMC_CClock_SyncO∆y
;

292 
FMC_NORSRAMInôSåu˘
->
FMC_RódWrôeTimögSåu˘
 = (
FMC_NORSRAMTimögInôTy≥Def
*)&
FMC_DeÁu…TimögSåu˘
;

293 
FMC_NORSRAMInôSåu˘
->
FMC_WrôeTimögSåu˘
 = (
FMC_NORSRAMTimögInôTy≥Def
*)&
FMC_DeÁu…TimögSåu˘
;

294 
	}
}

307 
	$FMC_NORSRAMCmd
(
uöt32_t
 
FMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

309 
	`as£π_∑øm
(
	`IS_FMC_NORSRAM_BANK
(
FMC_B™k
));

310 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

312 i‡(
NewSèã
 !
DISABLE
)

315 
FMC_B™k1
->
BTCR
[
FMC_B™k
] |
BCR_MBKEN_SET
;

320 
FMC_B™k1
->
BTCR
[
FMC_B™k
] &
BCR_MBKEN_RESET
;

322 
	}
}

380 
	$FMC_NANDDeInô
(
uöt32_t
 
FMC_B™k
)

383 
	`as£π_∑øm
(
	`IS_FMC_NAND_BANK
(
FMC_B™k
));

385 if(
FMC_B™k
 =
FMC_B™k2_NAND
)

388 
FMC_B™k2
->
PCR2
 = 0x00000018;

389 
FMC_B™k2
->
SR2
 = 0x00000040;

390 
FMC_B™k2
->
PMEM2
 = 0xFCFCFCFC;

391 
FMC_B™k2
->
PATT2
 = 0xFCFCFCFC;

397 
FMC_B™k3
->
PCR3
 = 0x00000018;

398 
FMC_B™k3
->
SR3
 = 0x00000040;

399 
FMC_B™k3
->
PMEM3
 = 0xFCFCFCFC;

400 
FMC_B™k3
->
PATT3
 = 0xFCFCFCFC;

402 
	}
}

411 
	$FMC_NANDInô
(
FMC_NANDInôTy≥Def
* 
FMC_NANDInôSåu˘
)

413 
uöt32_t
 
tmµ¸
 = 0x00000000, 
tmµmem
 = 0x00000000, 
tmµ©t
 = 0x00000000;

416 
	`as£π_∑øm
(
	`IS_FMC_NAND_BANK
(
FMC_NANDInôSåu˘
->
FMC_B™k
));

417 
	`as£π_∑øm
(
	`IS_FMC_WAIT_FEATURE
(
FMC_NANDInôSåu˘
->
FMC_Waô„©uª
));

418 
	`as£π_∑øm
(
	`IS_FMC_NAND_MEMORY_WIDTH
(
FMC_NANDInôSåu˘
->
FMC_Mem‹yD©aWidth
));

419 
	`as£π_∑øm
(
	`IS_FMC_ECC_STATE
(
FMC_NANDInôSåu˘
->
FMC_ECC
));

420 
	`as£π_∑øm
(
	`IS_FMC_ECCPAGE_SIZE
(
FMC_NANDInôSåu˘
->
FMC_ECCPageSize
));

421 
	`as£π_∑øm
(
	`IS_FMC_TCLR_TIME
(
FMC_NANDInôSåu˘
->
FMC_TCLRSëupTime
));

422 
	`as£π_∑øm
(
	`IS_FMC_TAR_TIME
(
FMC_NANDInôSåu˘
->
FMC_TARSëupTime
));

423 
	`as£π_∑øm
(
	`IS_FMC_SETUP_TIME
(
FMC_NANDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_SëupTime
));

424 
	`as£π_∑øm
(
	`IS_FMC_WAIT_TIME
(
FMC_NANDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_WaôSëupTime
));

425 
	`as£π_∑øm
(
	`IS_FMC_HOLD_TIME
(
FMC_NANDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
));

426 
	`as£π_∑øm
(
	`IS_FMC_HIZ_TIME
(
FMC_NANDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_HiZSëupTime
));

427 
	`as£π_∑øm
(
	`IS_FMC_SETUP_TIME
(
FMC_NANDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_SëupTime
));

428 
	`as£π_∑øm
(
	`IS_FMC_WAIT_TIME
(
FMC_NANDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_WaôSëupTime
));

429 
	`as£π_∑øm
(
	`IS_FMC_HOLD_TIME
(
FMC_NANDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
));

430 
	`as£π_∑øm
(
	`IS_FMC_HIZ_TIME
(
FMC_NANDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_HiZSëupTime
));

432 if(
FMC_NANDInôSåu˘
->
FMC_B™k
 =
FMC_B™k2_NAND
)

435 
tmµ¸
 = 
FMC_B™k2
->
PCR2
;

440 
tmµ¸
 = 
FMC_B™k3
->
PCR3
;

444 
tmµ¸
 &((
uöt32_t
)~(
FMC_PCR2_PWAITEN
 | 
FMC_PCR2_PBKEN
 | 
FMC_PCR2_PTYP
 | \

445 
FMC_PCR2_PWID
 | 
FMC_PCR2_ECCEN
 | 
FMC_PCR2_TCLR
 | \

446 
FMC_PCR2_TAR
 | 
FMC_PCR2_ECCPS
));

449 
tmµ¸
 |(
uöt32_t
)
FMC_NANDInôSåu˘
->
FMC_Waô„©uª
 |

450 
PCR_MEMORYTYPE_NAND
 |

451 
FMC_NANDInôSåu˘
->
FMC_Mem‹yD©aWidth
 |

452 
FMC_NANDInôSåu˘
->
FMC_ECC
 |

453 
FMC_NANDInôSåu˘
->
FMC_ECCPageSize
 |

454 (
FMC_NANDInôSåu˘
->
FMC_TCLRSëupTime
 << 9 )|

455 (
FMC_NANDInôSåu˘
->
FMC_TARSëupTime
 << 13);

457 if(
FMC_NANDInôSåu˘
->
FMC_B™k
 =
FMC_B™k2_NAND
)

460 
tmµmem
 = 
FMC_B™k2
->
PMEM2
;

465 
tmµmem
 = 
FMC_B™k3
->
PMEM3
;

469 
tmµmem
 &((
uöt32_t
)~(
FMC_PMEM2_MEMSET2
 | 
FMC_PMEM2_MEMWAIT2
 | 
FMC_PMEM2_MEMHOLD2
 | \

470 
FMC_PMEM2_MEMHIZ2
));

473 
tmµmem
 |(
uöt32_t
)
FMC_NANDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_SëupTime
 |

474 (
FMC_NANDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_WaôSëupTime
 << 8) |

475 (
FMC_NANDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
 << 16)|

476 (
FMC_NANDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_HiZSëupTime
 << 24);

478 if(
FMC_NANDInôSåu˘
->
FMC_B™k
 =
FMC_B™k2_NAND
)

481 
tmµ©t
 = 
FMC_B™k2
->
PATT2
;

486 
tmµ©t
 = 
FMC_B™k3
->
PATT3
;

490 
tmµ©t
 &((
uöt32_t
)~(
FMC_PATT2_ATTSET2
 | 
FMC_PATT2_ATTWAIT2
 | 
FMC_PATT2_ATTHOLD2
 | \

491 
FMC_PATT2_ATTHIZ2
));

494 
tmµ©t
 |(
uöt32_t
)
FMC_NANDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_SëupTime
 |

495 (
FMC_NANDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_WaôSëupTime
 << 8) |

496 (
FMC_NANDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
 << 16)|

497 (
FMC_NANDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_HiZSëupTime
 << 24);

499 if(
FMC_NANDInôSåu˘
->
FMC_B™k
 =
FMC_B™k2_NAND
)

502 
FMC_B™k2
->
PCR2
 = 
tmµ¸
;

503 
FMC_B™k2
->
PMEM2
 = 
tmµmem
;

504 
FMC_B™k2
->
PATT2
 = 
tmµ©t
;

509 
FMC_B™k3
->
PCR3
 = 
tmµ¸
;

510 
FMC_B™k3
->
PMEM3
 = 
tmµmem
;

511 
FMC_B™k3
->
PATT3
 = 
tmµ©t
;

513 
	}
}

522 
	$FMC_NANDSåu˘Inô
(
FMC_NANDInôTy≥Def
* 
FMC_NANDInôSåu˘
)

525 
FMC_NANDInôSåu˘
->
FMC_B™k
 = 
FMC_B™k2_NAND
;

526 
FMC_NANDInôSåu˘
->
FMC_Waô„©uª
 = 
FMC_Waô„©uª_DißbÀ
;

527 
FMC_NANDInôSåu˘
->
FMC_Mem‹yD©aWidth
 = 
FMC_NAND_Mem‹yD©aWidth_16b
;

528 
FMC_NANDInôSåu˘
->
FMC_ECC
 = 
FMC_ECC_DißbÀ
;

529 
FMC_NANDInôSåu˘
->
FMC_ECCPageSize
 = 
FMC_ECCPageSize_256Byãs
;

530 
FMC_NANDInôSåu˘
->
FMC_TCLRSëupTime
 = 0x0;

531 
FMC_NANDInôSåu˘
->
FMC_TARSëupTime
 = 0x0;

532 
FMC_NANDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_SëupTime
 = 252;

533 
FMC_NANDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_WaôSëupTime
 = 252;

534 
FMC_NANDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
 = 252;

535 
FMC_NANDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_HiZSëupTime
 = 252;

536 
FMC_NANDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_SëupTime
 = 252;

537 
FMC_NANDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_WaôSëupTime
 = 252;

538 
FMC_NANDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
 = 252;

539 
FMC_NANDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_HiZSëupTime
 = 252;

540 
	}
}

551 
	$FMC_NANDCmd
(
uöt32_t
 
FMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

553 
	`as£π_∑øm
(
	`IS_FMC_NAND_BANK
(
FMC_B™k
));

554 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

556 i‡(
NewSèã
 !
DISABLE
)

559 if(
FMC_B™k
 =
FMC_B™k2_NAND
)

561 
FMC_B™k2
->
PCR2
 |
PCR_PBKEN_SET
;

565 
FMC_B™k3
->
PCR3
 |
PCR_PBKEN_SET
;

571 if(
FMC_B™k
 =
FMC_B™k2_NAND
)

573 
FMC_B™k2
->
PCR2
 &
PCR_PBKEN_RESET
;

577 
FMC_B™k3
->
PCR3
 &
PCR_PBKEN_RESET
;

580 
	}
}

591 
	$FMC_NANDECCCmd
(
uöt32_t
 
FMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

593 
	`as£π_∑øm
(
	`IS_FMC_NAND_BANK
(
FMC_B™k
));

594 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

596 i‡(
NewSèã
 !
DISABLE
)

599 if(
FMC_B™k
 =
FMC_B™k2_NAND
)

601 
FMC_B™k2
->
PCR2
 |
PCR_ECCEN_SET
;

605 
FMC_B™k3
->
PCR3
 |
PCR_ECCEN_SET
;

611 if(
FMC_B™k
 =
FMC_B™k2_NAND
)

613 
FMC_B™k2
->
PCR2
 &
PCR_ECCEN_RESET
;

617 
FMC_B™k3
->
PCR3
 &
PCR_ECCEN_RESET
;

620 
	}
}

630 
uöt32_t
 
	$FMC_GëECC
(
uöt32_t
 
FMC_B™k
)

632 
uöt32_t
 
eccvÆ
 = 0x00000000;

634 if(
FMC_B™k
 =
FMC_B™k2_NAND
)

637 
eccvÆ
 = 
FMC_B™k2
->
ECCR2
;

642 
eccvÆ
 = 
FMC_B™k3
->
ECCR3
;

645 (
eccvÆ
);

646 
	}
}

694 
	$FMC_PCCARDDeInô
()

697 
FMC_B™k4
->
PCR4
 = 0x00000018;

698 
FMC_B™k4
->
SR4
 = 0x00000000;

699 
FMC_B™k4
->
PMEM4
 = 0xFCFCFCFC;

700 
FMC_B™k4
->
PATT4
 = 0xFCFCFCFC;

701 
FMC_B™k4
->
PIO4
 = 0xFCFCFCFC;

702 
	}
}

711 
	$FMC_PCCARDInô
(
FMC_PCCARDInôTy≥Def
* 
FMC_PCCARDInôSåu˘
)

714 
uöt32_t
 
tmµ¸
 = 0, 
tmpmem
 = 0, 
tmµ©t
 = 0, 
tmµio
 = 0;

717 
	`as£π_∑øm
(
	`IS_FMC_WAIT_FEATURE
(
FMC_PCCARDInôSåu˘
->
FMC_Waô„©uª
));

718 
	`as£π_∑øm
(
	`IS_FMC_TCLR_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_TCLRSëupTime
));

719 
	`as£π_∑øm
(
	`IS_FMC_TAR_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_TARSëupTime
));

721 
	`as£π_∑øm
(
	`IS_FMC_SETUP_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_SëupTime
));

722 
	`as£π_∑øm
(
	`IS_FMC_WAIT_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_WaôSëupTime
));

723 
	`as£π_∑øm
(
	`IS_FMC_HOLD_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
));

724 
	`as£π_∑øm
(
	`IS_FMC_HIZ_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_HiZSëupTime
));

726 
	`as£π_∑øm
(
	`IS_FMC_SETUP_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_SëupTime
));

727 
	`as£π_∑øm
(
	`IS_FMC_WAIT_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_WaôSëupTime
));

728 
	`as£π_∑øm
(
	`IS_FMC_HOLD_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
));

729 
	`as£π_∑øm
(
	`IS_FMC_HIZ_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_HiZSëupTime
));

730 
	`as£π_∑øm
(
	`IS_FMC_SETUP_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_IOS∑˚TimögSåu˘
->
FMC_SëupTime
));

731 
	`as£π_∑øm
(
	`IS_FMC_WAIT_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_IOS∑˚TimögSåu˘
->
FMC_WaôSëupTime
));

732 
	`as£π_∑øm
(
	`IS_FMC_HOLD_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_IOS∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
));

733 
	`as£π_∑øm
(
	`IS_FMC_HIZ_TIME
(
FMC_PCCARDInôSåu˘
->
FMC_IOS∑˚TimögSåu˘
->
FMC_HiZSëupTime
));

736 
tmµ¸
 = 
FMC_B™k4
->
PCR4
;

739 
tmµ¸
 &((
uöt32_t
)~(
FMC_PCR4_TAR
 | 
FMC_PCR4_TCLR
 | 
FMC_PCR4_PWAITEN
 | \

740 
FMC_PCR4_PWID
));

743 
tmµ¸
 |(
uöt32_t
)
FMC_PCCARDInôSåu˘
->
FMC_Waô„©uª
 |

744 
FMC_NAND_Mem‹yD©aWidth_16b
 |

745 (
FMC_PCCARDInôSåu˘
->
FMC_TCLRSëupTime
 << 9) |

746 (
FMC_PCCARDInôSåu˘
->
FMC_TARSëupTime
 << 13);

748 
FMC_B™k4
->
PCR4
 = 
tmµ¸
;

751 
tmpmem
 = 
FMC_B™k4
->
PMEM4
;

754 
tmpmem
 &((
uöt32_t
)~(
FMC_PMEM4_MEMSET4
 | 
FMC_PMEM4_MEMWAIT4
 | 
FMC_PMEM4_MEMHOLD4
 | \

755 
FMC_PMEM4_MEMHIZ4
));

758 
tmpmem
 |(
uöt32_t
)
FMC_PCCARDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_SëupTime
 |

759 (
FMC_PCCARDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_WaôSëupTime
 << 8) |

760 (
FMC_PCCARDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
 << 16)|

761 (
FMC_PCCARDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_HiZSëupTime
 << 24);

763 
FMC_B™k4
->
PMEM4
 = 
tmpmem
;

766 
tmµ©t
 = 
FMC_B™k4
->
PATT4
;

769 
tmµ©t
 &((
uöt32_t
)~(
FMC_PATT4_ATTSET4
 | 
FMC_PATT4_ATTWAIT4
 | 
FMC_PATT4_ATTHOLD4
 | \

770 
FMC_PATT4_ATTHIZ4
));

773 
tmµ©t
 |(
uöt32_t
)
FMC_PCCARDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_SëupTime
 |

774 (
FMC_PCCARDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_WaôSëupTime
 << 8) |

775 (
FMC_PCCARDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
 << 16)|

776 (
FMC_PCCARDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_HiZSëupTime
 << 24);

778 
FMC_B™k4
->
PATT4
 = 
tmµ©t
;

781 
tmµio
 = 
FMC_B™k4
->
PIO4
;

784 
tmµio
 &((
uöt32_t
)~(
FMC_PIO4_IOSET4
 | 
FMC_PIO4_IOWAIT4
 | 
FMC_PIO4_IOHOLD4
 | \

785 
FMC_PIO4_IOHIZ4
));

788 
tmµio
 |(
uöt32_t
)
FMC_PCCARDInôSåu˘
->
FMC_IOS∑˚TimögSåu˘
->
FMC_SëupTime
 |

789 (
FMC_PCCARDInôSåu˘
->
FMC_IOS∑˚TimögSåu˘
->
FMC_WaôSëupTime
 << 8) |

790 (
FMC_PCCARDInôSåu˘
->
FMC_IOS∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
 << 16)|

791 (
FMC_PCCARDInôSåu˘
->
FMC_IOS∑˚TimögSåu˘
->
FMC_HiZSëupTime
 << 24);

793 
FMC_B™k4
->
PIO4
 = 
tmµio
;

794 
	}
}

802 
	$FMC_PCCARDSåu˘Inô
(
FMC_PCCARDInôTy≥Def
* 
FMC_PCCARDInôSåu˘
)

805 
FMC_PCCARDInôSåu˘
->
FMC_Waô„©uª
 = 
FMC_Waô„©uª_DißbÀ
;

806 
FMC_PCCARDInôSåu˘
->
FMC_TCLRSëupTime
 = 0;

807 
FMC_PCCARDInôSåu˘
->
FMC_TARSëupTime
 = 0;

808 
FMC_PCCARDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_SëupTime
 = 252;

809 
FMC_PCCARDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_WaôSëupTime
 = 252;

810 
FMC_PCCARDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
 = 252;

811 
FMC_PCCARDInôSåu˘
->
FMC_Comm⁄S∑˚TimögSåu˘
->
FMC_HiZSëupTime
 = 252;

812 
FMC_PCCARDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_SëupTime
 = 252;

813 
FMC_PCCARDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_WaôSëupTime
 = 252;

814 
FMC_PCCARDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
 = 252;

815 
FMC_PCCARDInôSåu˘
->
FMC_AâribuãS∑˚TimögSåu˘
->
FMC_HiZSëupTime
 = 252;

816 
FMC_PCCARDInôSåu˘
->
FMC_IOS∑˚TimögSåu˘
->
FMC_SëupTime
 = 252;

817 
FMC_PCCARDInôSåu˘
->
FMC_IOS∑˚TimögSåu˘
->
FMC_WaôSëupTime
 = 252;

818 
FMC_PCCARDInôSåu˘
->
FMC_IOS∑˚TimögSåu˘
->
FMC_HﬁdSëupTime
 = 252;

819 
FMC_PCCARDInôSåu˘
->
FMC_IOS∑˚TimögSåu˘
->
FMC_HiZSëupTime
 = 252;

820 
	}
}

828 
	$FMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

830 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

832 i‡(
NewSèã
 !
DISABLE
)

835 
FMC_B™k4
->
PCR4
 |
PCR_PBKEN_SET
;

840 
FMC_B™k4
->
PCR4
 &
PCR_PBKEN_RESET
;

842 
	}
}

900 
	$FMC_SDRAMDeInô
(
uöt32_t
 
FMC_B™k
)

903 
	`as£π_∑øm
(
	`IS_FMC_SDRAM_BANK
(
FMC_B™k
));

905 
FMC_B™k5_6
->
SDCR
[
FMC_B™k
] = 0x000002D0;

906 
FMC_B™k5_6
->
SDTR
[
FMC_B™k
] = 0x0FFFFFFF;

907 
FMC_B™k5_6
->
SDCMR
 = 0x00000000;

908 
FMC_B™k5_6
->
SDRTR
 = 0x00000000;

909 
FMC_B™k5_6
->
SDSR
 = 0x00000000;

910 
	}
}

920 
	$FMC_SDRAMInô
(
FMC_SDRAMInôTy≥Def
* 
FMC_SDRAMInôSåu˘
)

923 
uöt32_t
 
tm¥1
 = 0, 
tm¥2
 = 0, 
tm¥3
 = 0, 
tm¥4
 = 0;

928 
	`as£π_∑øm
(
	`IS_FMC_SDRAM_BANK
(
FMC_SDRAMInôSåu˘
->
FMC_B™k
));

929 
	`as£π_∑øm
(
	`IS_FMC_COLUMNBITS_NUMBER
(
FMC_SDRAMInôSåu˘
->
FMC_CﬁumnBôsNumbî
));

930 
	`as£π_∑øm
(
	`IS_FMC_ROWBITS_NUMBER
(
FMC_SDRAMInôSåu˘
->
FMC_RowBôsNumbî
));

931 
	`as£π_∑øm
(
	`IS_FMC_SDMEMORY_WIDTH
(
FMC_SDRAMInôSåu˘
->
FMC_SDMem‹yD©aWidth
));

932 
	`as£π_∑øm
(
	`IS_FMC_INTERNALBANK_NUMBER
(
FMC_SDRAMInôSåu˘
->
FMC_I¡î«lB™kNumbî
));

933 
	`as£π_∑øm
(
	`IS_FMC_CAS_LATENCY
(
FMC_SDRAMInôSåu˘
->
FMC_CASL©ícy
));

934 
	`as£π_∑øm
(
	`IS_FMC_WRITE_PROTECTION
(
FMC_SDRAMInôSåu˘
->
FMC_WrôePrŸe˘i⁄
));

935 
	`as£π_∑øm
(
	`IS_FMC_SDCLOCK_PERIOD
(
FMC_SDRAMInôSåu˘
->
FMC_SDClockPîiod
));

936 
	`as£π_∑øm
(
	`IS_FMC_READ_BURST
(
FMC_SDRAMInôSåu˘
->
FMC_RódBur°
));

937 
	`as£π_∑øm
(
	`IS_FMC_READPIPE_DELAY
(
FMC_SDRAMInôSåu˘
->
FMC_RódPùeDñay
));

940 
	`as£π_∑øm
(
	`IS_FMC_LOADTOACTIVE_DELAY
(
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_LﬂdToA˘iveDñay
));

941 
	`as£π_∑øm
(
	`IS_FMC_EXITSELFREFRESH_DELAY
(
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_ExôSñfRe‰eshDñay
));

942 
	`as£π_∑øm
(
	`IS_FMC_SELFREFRESH_TIME
(
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_SñfRe‰eshTime
));

943 
	`as£π_∑øm
(
	`IS_FMC_ROWCYCLE_DELAY
(
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_RowCy˛eDñay
));

944 
	`as£π_∑øm
(
	`IS_FMC_WRITE_RECOVERY_TIME
(
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_WrôeRecovîyTime
));

945 
	`as£π_∑øm
(
	`IS_FMC_RP_DELAY
(
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_RPDñay
));

946 
	`as£π_∑øm
(
	`IS_FMC_RCD_DELAY
(
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_RCDDñay
));

949 
tm¥1
 = 
FMC_B™k5_6
->
SDCR
[
FMC_SDRAMInôSåu˘
->
FMC_B™k
];

952 
tm¥1
 &((
uöt32_t
)~(
FMC_SDCR1_NC
 | 
FMC_SDCR1_NR
 | 
FMC_SDCR1_MWID
 | \

953 
FMC_SDCR1_NB
 | 
FMC_SDCR1_CAS
 | 
FMC_SDCR1_WP
 | \

954 
FMC_SDCR1_SDCLK
 | 
FMC_SDCR1_RBURST
 | 
FMC_SDCR1_RPIPE
));

957 
tm¥1
 |(
uöt32_t
)
FMC_SDRAMInôSåu˘
->
FMC_CﬁumnBôsNumbî
 |

958 
FMC_SDRAMInôSåu˘
->
FMC_RowBôsNumbî
 |

959 
FMC_SDRAMInôSåu˘
->
FMC_SDMem‹yD©aWidth
 |

960 
FMC_SDRAMInôSåu˘
->
FMC_I¡î«lB™kNumbî
 |

961 
FMC_SDRAMInôSåu˘
->
FMC_CASL©ícy
 |

962 
FMC_SDRAMInôSåu˘
->
FMC_WrôePrŸe˘i⁄
 |

963 
FMC_SDRAMInôSåu˘
->
FMC_SDClockPîiod
 |

964 
FMC_SDRAMInôSåu˘
->
FMC_RódBur°
 |

965 
FMC_SDRAMInôSåu˘
->
FMC_RódPùeDñay
;

967 if(
FMC_SDRAMInôSåu˘
->
FMC_B™k
 =
FMC_B™k1_SDRAM
 )

969 
FMC_B™k5_6
->
SDCR
[
FMC_SDRAMInôSåu˘
->
FMC_B™k
] = 
tm¥1
;

974 
tm¥3
 = 
FMC_B™k5_6
->
SDCR
[
FMC_B™k1_SDRAM
];

977 
tm¥3
 &((
uöt32_t
)~(
FMC_SDCR1_NC
 | 
FMC_SDCR1_NR
 | 
FMC_SDCR1_MWID
 | \

978 
FMC_SDCR1_NB
 | 
FMC_SDCR1_CAS
 | 
FMC_SDCR1_WP
 | \

979 
FMC_SDCR1_SDCLK
 | 
FMC_SDCR1_RBURST
 | 
FMC_SDCR1_RPIPE
));

981 
tm¥3
 |(
uöt32_t
)
FMC_SDRAMInôSåu˘
->
FMC_SDClockPîiod
 |

982 
FMC_SDRAMInôSåu˘
->
FMC_RódBur°
 |

983 
FMC_SDRAMInôSåu˘
->
FMC_RódPùeDñay
;

985 
FMC_B™k5_6
->
SDCR
[
FMC_B™k1_SDRAM
] = 
tm¥3
;

986 
FMC_B™k5_6
->
SDCR
[
FMC_SDRAMInôSåu˘
->
FMC_B™k
] = 
tm¥1
;

989 if(
FMC_SDRAMInôSåu˘
->
FMC_B™k
 =
FMC_B™k1_SDRAM
 )

992 
tm¥2
 = 
FMC_B™k5_6
->
SDTR
[
FMC_SDRAMInôSåu˘
->
FMC_B™k
];

995 
tm¥2
 &((
uöt32_t
)~(
FMC_SDTR1_TMRD
 | 
FMC_SDTR1_TXSR
 | 
FMC_SDTR1_TRAS
 | \

996 
FMC_SDTR1_TRC
 | 
FMC_SDTR1_TWR
 | 
FMC_SDTR1_TRP
 | \

997 
FMC_SDTR1_TRCD
));

999 
tm¥2
 |(
uöt32_t
)((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_LﬂdToA˘iveDñay
)-1) |

1000 (((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_ExôSñfRe‰eshDñay
)-1) << 4) |

1001 (((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_SñfRe‰eshTime
)-1) << 8) |

1002 (((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_RowCy˛eDñay
)-1) << 12) |

1003 (((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_WrôeRecovîyTime
)-1) << 16) |

1004 (((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_RPDñay
)-1) << 20) |

1005 (((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_RCDDñay
)-1) << 24);

1007 
FMC_B™k5_6
->
SDTR
[
FMC_SDRAMInôSåu˘
->
FMC_B™k
] = 
tm¥2
;

1012 
tm¥2
 = 
FMC_B™k5_6
->
SDTR
[
FMC_SDRAMInôSåu˘
->
FMC_B™k
];

1015 
tm¥2
 &((
uöt32_t
)~(
FMC_SDTR1_TMRD
 | 
FMC_SDTR1_TXSR
 | 
FMC_SDTR1_TRAS
 | \

1016 
FMC_SDTR1_TRC
 | 
FMC_SDTR1_TWR
 | 
FMC_SDTR1_TRP
 | \

1017 
FMC_SDTR1_TRCD
));

1019 
tm¥2
 |(
uöt32_t
)((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_LﬂdToA˘iveDñay
)-1) |

1020 (((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_ExôSñfRe‰eshDñay
)-1) << 4) |

1021 (((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_SñfRe‰eshTime
)-1) << 8) |

1022 (((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_WrôeRecovîyTime
)-1) << 16);

1025 
tm¥4
 = 
FMC_B™k5_6
->
SDTR
[
FMC_B™k1_SDRAM
];

1028 
tm¥4
 &((
uöt32_t
)~(
FMC_SDTR1_TMRD
 | 
FMC_SDTR1_TXSR
 | 
FMC_SDTR1_TRAS
 | \

1029 
FMC_SDTR1_TRC
 | 
FMC_SDTR1_TWR
 | 
FMC_SDTR1_TRP
 | \

1030 
FMC_SDTR1_TRCD
));

1032 
tm¥4
 |(
uöt32_t
)(((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_RowCy˛eDñay
)-1) << 12) |

1033 (((
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_RPDñay
)-1) << 20);

1035 
FMC_B™k5_6
->
SDTR
[
FMC_B™k1_SDRAM
] = 
tm¥4
;

1036 
FMC_B™k5_6
->
SDTR
[
FMC_SDRAMInôSåu˘
->
FMC_B™k
] = 
tm¥2
;

1039 
	}
}

1047 
	$FMC_SDRAMSåu˘Inô
(
FMC_SDRAMInôTy≥Def
* 
FMC_SDRAMInôSåu˘
)

1050 
FMC_SDRAMInôSåu˘
->
FMC_B™k
 = 
FMC_B™k1_SDRAM
;

1051 
FMC_SDRAMInôSåu˘
->
FMC_CﬁumnBôsNumbî
 = 
FMC_CﬁumnBôs_Numbî_8b
;

1052 
FMC_SDRAMInôSåu˘
->
FMC_RowBôsNumbî
 = 
FMC_RowBôs_Numbî_11b
;

1053 
FMC_SDRAMInôSåu˘
->
FMC_SDMem‹yD©aWidth
 = 
FMC_SDMem‹y_Width_16b
;

1054 
FMC_SDRAMInôSåu˘
->
FMC_I¡î«lB™kNumbî
 = 
FMC_I¡î«lB™k_Numbî_4
;

1055 
FMC_SDRAMInôSåu˘
->
FMC_CASL©ícy
 = 
FMC_CAS_L©ícy_1
;

1056 
FMC_SDRAMInôSåu˘
->
FMC_WrôePrŸe˘i⁄
 = 
FMC_Wrôe_PrŸe˘i⁄_E«bÀ
;

1057 
FMC_SDRAMInôSåu˘
->
FMC_SDClockPîiod
 = 
FMC_SDClock_DißbÀ
;

1058 
FMC_SDRAMInôSåu˘
->
FMC_RódBur°
 = 
FMC_Ród_Bur°_DißbÀ
;

1059 
FMC_SDRAMInôSåu˘
->
FMC_RódPùeDñay
 = 
FMC_RódPùe_Dñay_0
;

1061 
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_LﬂdToA˘iveDñay
 = 16;

1062 
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_ExôSñfRe‰eshDñay
 = 16;

1063 
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_SñfRe‰eshTime
 = 16;

1064 
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_RowCy˛eDñay
 = 16;

1065 
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_WrôeRecovîyTime
 = 16;

1066 
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_RPDñay
 = 16;

1067 
FMC_SDRAMInôSåu˘
->
FMC_SDRAMTimögSåu˘
->
FMC_RCDDñay
 = 16;

1069 
	}
}

1077 
	$FMC_SDRAMCmdC⁄fig
(
FMC_SDRAMComm™dTy≥Def
* 
FMC_SDRAMComm™dSåu˘
)

1079 
uöt32_t
 
tm¥
 = 0x0;

1082 
	`as£π_∑øm
(
	`IS_FMC_COMMAND_MODE
(
FMC_SDRAMComm™dSåu˘
->
FMC_Comm™dMode
));

1083 
	`as£π_∑øm
(
	`IS_FMC_COMMAND_TARGET
(
FMC_SDRAMComm™dSåu˘
->
FMC_Comm™dT¨gë
));

1084 
	`as£π_∑øm
(
	`IS_FMC_AUTOREFRESH_NUMBER
(
FMC_SDRAMComm™dSåu˘
->
FMC_AutoRe‰eshNumbî
));

1085 
	`as£π_∑øm
(
	`IS_FMC_MODE_REGISTER
(
FMC_SDRAMComm™dSåu˘
->
FMC_ModeRegi°îDeföôi⁄
));

1087 
tm¥
 = (
uöt32_t
)(
FMC_SDRAMComm™dSåu˘
->
FMC_Comm™dMode
 |

1088 
FMC_SDRAMComm™dSåu˘
->
FMC_Comm™dT¨gë
 |

1089 (((
FMC_SDRAMComm™dSåu˘
->
FMC_AutoRe‰eshNumbî
)-1)<<5) |

1090 ((
FMC_SDRAMComm™dSåu˘
->
FMC_ModeRegi°îDeföôi⁄
)<<9));

1092 
FMC_B™k5_6
->
SDCMR
 = 
tm¥
;

1094 
	}
}

1103 
uöt32_t
 
	$FMC_GëModeSètus
(
uöt32_t
 
SDRAM_B™k
)

1105 
uöt32_t
 
tm¥eg
 = 0;

1108 
	`as£π_∑øm
(
	`IS_FMC_SDRAM_BANK
(
SDRAM_B™k
));

1111 if(
SDRAM_B™k
 =
FMC_B™k1_SDRAM
)

1113 
tm¥eg
 = (
uöt32_t
)(
FMC_B™k5_6
->
SDSR
 & 
FMC_SDSR_MODES1
);

1117 
tm¥eg
 = ((
uöt32_t
)(
FMC_B™k5_6
->
SDSR
 & 
FMC_SDSR_MODES2
) >> 2);

1121  
tm¥eg
;

1122 
	}
}

1129 
	$FMC_SëRe‰eshCou¡
(
uöt32_t
 
FMC_Cou¡
)

1132 
	`as£π_∑øm
(
	`IS_FMC_REFRESH_COUNT
(
FMC_Cou¡
));

1134 
FMC_B™k5_6
->
SDRTR
 |(
FMC_Cou¡
<<1);

1136 
	}
}

1143 
	$FMC_SëAutoRe‰esh_Numbî
(
uöt32_t
 
FMC_Numbî
)

1146 
	`as£π_∑øm
(
	`IS_FMC_AUTOREFRESH_NUMBER
(
FMC_Numbî
));

1148 
FMC_B™k5_6
->
SDCMR
 |(
FMC_Numbî
 << 5);

1149 
	}
}

1159 
	$FMC_SDRAMWrôePrŸe˘i⁄C⁄fig
(
uöt32_t
 
SDRAM_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1162 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1163 
	`as£π_∑øm
(
	`IS_FMC_SDRAM_BANK
(
SDRAM_B™k
));

1165 i‡(
NewSèã
 !
DISABLE
)

1167 
FMC_B™k5_6
->
SDCR
[
SDRAM_B™k
] |
FMC_Wrôe_PrŸe˘i⁄_E«bÀ
;

1171 
FMC_B™k5_6
->
SDCR
[
SDRAM_B™k
] &
SDCR_WrôePrŸe˘i⁄_RESET
;

1174 
	}
}

1211 
	$FMC_ITC⁄fig
(
uöt32_t
 
FMC_B™k
, uöt32_à
FMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1213 
	`as£π_∑øm
(
	`IS_FMC_IT_BANK
(
FMC_B™k
));

1214 
	`as£π_∑øm
(
	`IS_FMC_IT
(
FMC_IT
));

1215 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1217 i‡(
NewSèã
 !
DISABLE
)

1220 if(
FMC_B™k
 =
FMC_B™k2_NAND
)

1222 
FMC_B™k2
->
SR2
 |
FMC_IT
;

1225 i‡(
FMC_B™k
 =
FMC_B™k3_NAND
)

1227 
FMC_B™k3
->
SR3
 |
FMC_IT
;

1230 i‡(
FMC_B™k
 =
FMC_B™k4_PCCARD
)

1232 
FMC_B™k4
->
SR4
 |
FMC_IT
;

1238 
FMC_B™k5_6
->
SDRTR
 |
FMC_IT
;

1244 if(
FMC_B™k
 =
FMC_B™k2_NAND
)

1247 
FMC_B™k2
->
SR2
 &(
uöt32_t
)~
FMC_IT
;

1250 i‡(
FMC_B™k
 =
FMC_B™k3_NAND
)

1252 
FMC_B™k3
->
SR3
 &(
uöt32_t
)~
FMC_IT
;

1255 if(
FMC_B™k
 =
FMC_B™k4_PCCARD
)

1257 
FMC_B™k4
->
SR4
 &(
uöt32_t
)~
FMC_IT
;

1263 
FMC_B™k5_6
->
SDRTR
 &(
uöt32_t
)~
FMC_IT
;

1266 
	}
}

1288 
FœgSètus
 
	$FMC_GëFœgSètus
(
uöt32_t
 
FMC_B™k
, uöt32_à
FMC_FLAG
)

1290 
FœgSètus
 
bô°©us
 = 
RESET
;

1291 
uöt32_t
 
tmp§
 = 0x00000000;

1294 
	`as£π_∑øm
(
	`IS_FMC_GETFLAG_BANK
(
FMC_B™k
));

1295 
	`as£π_∑øm
(
	`IS_FMC_GET_FLAG
(
FMC_FLAG
));

1297 if(
FMC_B™k
 =
FMC_B™k2_NAND
)

1299 
tmp§
 = 
FMC_B™k2
->
SR2
;

1301 if(
FMC_B™k
 =
FMC_B™k3_NAND
)

1303 
tmp§
 = 
FMC_B™k3
->
SR3
;

1305 if(
FMC_B™k
 =
FMC_B™k4_PCCARD
)

1307 
tmp§
 = 
FMC_B™k4
->
SR4
;

1311 
tmp§
 = 
FMC_B™k5_6
->
SDSR
;

1315 i‡((
tmp§
 & 
FMC_FLAG
) != FMC_FLAG )

1317 
bô°©us
 = 
RESET
;

1321 
bô°©us
 = 
SET
;

1324  
bô°©us
;

1325 
	}
}

1344 
	$FMC_CÀ¨Fœg
(
uöt32_t
 
FMC_B™k
, uöt32_à
FMC_FLAG
)

1347 
	`as£π_∑øm
(
	`IS_FMC_GETFLAG_BANK
(
FMC_B™k
));

1348 
	`as£π_∑øm
(
	`IS_FMC_CLEAR_FLAG
(
FMC_FLAG
)) ;

1350 if(
FMC_B™k
 =
FMC_B™k2_NAND
)

1352 
FMC_B™k2
->
SR2
 &(~
FMC_FLAG
);

1354 if(
FMC_B™k
 =
FMC_B™k3_NAND
)

1356 
FMC_B™k3
->
SR3
 &(~
FMC_FLAG
);

1358 if(
FMC_B™k
 =
FMC_B™k4_PCCARD
)

1360 
FMC_B™k4
->
SR4
 &(~
FMC_FLAG
);

1365 
FMC_B™k5_6
->
SDRTR
 &(~
FMC_FLAG
);

1368 
	}
}

1387 
ITSètus
 
	$FMC_GëITSètus
(
uöt32_t
 
FMC_B™k
, uöt32_à
FMC_IT
)

1389 
ITSètus
 
bô°©us
 = 
RESET
;

1390 
uöt32_t
 
tmp§
 = 0x0;

1391 
uöt32_t
 
tmp§2
 = 0x0;

1392 
uöt32_t
 
ô°©us
 = 0x0;

1393 
uöt32_t
 
ôíabÀ
 = 0x0;

1396 
	`as£π_∑øm
(
	`IS_FMC_IT_BANK
(
FMC_B™k
));

1397 
	`as£π_∑øm
(
	`IS_FMC_GET_IT
(
FMC_IT
));

1399 if(
FMC_B™k
 =
FMC_B™k2_NAND
)

1401 
tmp§
 = 
FMC_B™k2
->
SR2
;

1403 if(
FMC_B™k
 =
FMC_B™k3_NAND
)

1405 
tmp§
 = 
FMC_B™k3
->
SR3
;

1407 if(
FMC_B™k
 =
FMC_B™k4_PCCARD
)

1409 
tmp§
 = 
FMC_B™k4
->
SR4
;

1414 
tmp§
 = 
FMC_B™k5_6
->
SDRTR
;

1415 
tmp§2
 = 
FMC_B™k5_6
->
SDSR
;

1419 
ôíabÀ
 = 
tmp§
 & 
FMC_IT
;

1422 if((
FMC_B™k
 =
FMC_B™k1_SDRAM
Ë|| (FMC_B™k =
FMC_B™k2_SDRAM
))

1424 
ô°©us
 = 
tmp§2
 & 
FMC_SDSR_RE
;

1428 
ô°©us
 = 
tmp§
 & (
FMC_IT
 >> 3);

1431 i‡((
ô°©us
 !(
uöt32_t
)
RESET
Ë&& (
ôíabÀ
 != (uint32_t)RESET))

1433 
bô°©us
 = 
SET
;

1437 
bô°©us
 = 
RESET
;

1439  
bô°©us
;

1440 
	}
}

1459 
	$FMC_CÀ¨ITPídögBô
(
uöt32_t
 
FMC_B™k
, uöt32_à
FMC_IT
)

1462 
	`as£π_∑øm
(
	`IS_FMC_IT_BANK
(
FMC_B™k
));

1463 
	`as£π_∑øm
(
	`IS_FMC_IT
(
FMC_IT
));

1465 if(
FMC_B™k
 =
FMC_B™k2_NAND
)

1467 
FMC_B™k2
->
SR2
 &~(
FMC_IT
 >> 3);

1469 if(
FMC_B™k
 =
FMC_B™k3_NAND
)

1471 
FMC_B™k3
->
SR3
 &~(
FMC_IT
 >> 3);

1473 if(
FMC_B™k
 =
FMC_B™k4_PCCARD
)

1475 
FMC_B™k4
->
SR4
 &~(
FMC_IT
 >> 3);

1480 
FMC_B™k5_6
->
SDRTR
 |
FMC_SDRTR_CRE
;

1482 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_fmpi2c.c

79 
	~"°m32f4xx_FMPI2C.h
"

80 
	~"°m32f4xx_rcc.h
"

94 
	#CR1_CLEAR_MASK
 ((
uöt32_t
)0x00CFE0FFË

	)

95 
	#CR2_CLEAR_MASK
 ((
uöt32_t
)0x07FF7FFFË

	)

96 
	#TIMING_CLEAR_MASK
 ((
uöt32_t
)0xF0FFFFFFË

	)

97 
	#ERROR_IT_MASK
 ((
uöt32_t
)0x00003F00Ë

	)

98 
	#TC_IT_MASK
 ((
uöt32_t
)0x000000C0Ë

	)

145 
	$FMPI2C_DeInô
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
)

148 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

150 i‡(
FMPI2Cx
 =
FMPI2C1
)

153 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_FMPI2C1
, 
ENABLE
);

155 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_FMPI2C1
, 
DISABLE
);

157 
	}
}

167 
	$FMPI2C_Inô
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
FMPI2C_InôTy≥Def
* 
FMPI2C_InôSåu˘
)

169 
uöt32_t
 
tm¥eg
 = 0;

172 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

173 
	`as£π_∑øm
(
	`IS_FMPI2C_ANALOG_FILTER
(
FMPI2C_InôSåu˘
->
FMPI2C_A«logFûãr
));

174 
	`as£π_∑øm
(
	`IS_FMPI2C_DIGITAL_FILTER
(
FMPI2C_InôSåu˘
->
FMPI2C_DigôÆFûãr
));

175 
	`as£π_∑øm
(
	`IS_FMPI2C_MODE
(
FMPI2C_InôSåu˘
->
FMPI2C_Mode
));

176 
	`as£π_∑øm
(
	`IS_FMPI2C_OWN_ADDRESS1
(
FMPI2C_InôSåu˘
->
FMPI2C_OwnAddªss1
));

177 
	`as£π_∑øm
(
	`IS_FMPI2C_ACK
(
FMPI2C_InôSåu˘
->
FMPI2C_Ack
));

178 
	`as£π_∑øm
(
	`IS_FMPI2C_ACKNOWLEDGE_ADDRESS
(
FMPI2C_InôSåu˘
->
FMPI2C_AcknowÀdgedAddªss
));

181 
FMPI2Cx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_CR1_PE
);

185 
tm¥eg
 = 
FMPI2Cx
->
CR1
;

187 
tm¥eg
 &
CR1_CLEAR_MASK
;

191 
tm¥eg
 |(
uöt32_t
)
FMPI2C_InôSåu˘
->
FMPI2C_A«logFûãr
 |(FMPI2C_InôSåu˘->
FMPI2C_DigôÆFûãr
 << 8);

194 
FMPI2Cx
->
CR1
 = 
tm¥eg
;

200 
FMPI2Cx
->
TIMINGR
 = 
FMPI2C_InôSåu˘
->
FMPI2C_Timög
 & 
TIMING_CLEAR_MASK
;

203 
FMPI2Cx
->
CR1
 |
FMPI2C_CR1_PE
;

207 
tm¥eg
 = 0;

209 
FMPI2Cx
->
OAR1
 = (
uöt32_t
)
tm¥eg
;

211 
FMPI2Cx
->
OAR2
 = (
uöt32_t
)
tm¥eg
;

215 
tm¥eg
 = (
uöt32_t
)((uöt32_t)
FMPI2C_InôSåu˘
->
FMPI2C_AcknowÀdgedAddªss
 | \

216 (
uöt32_t
)
FMPI2C_InôSåu˘
->
FMPI2C_OwnAddªss1
);

218 
FMPI2Cx
->
OAR1
 = 
tm¥eg
;

220 
FMPI2Cx
->
OAR1
 |
FMPI2C_OAR1_OA1EN
;

225 
tm¥eg
 = 
FMPI2C_InôSåu˘
->
FMPI2C_Mode
;

227 
FMPI2Cx
->
CR1
 |
tm¥eg
;

231 
tm¥eg
 = 
FMPI2Cx
->
CR2
;

233 
tm¥eg
 &
CR2_CLEAR_MASK
;

236 
tm¥eg
 |
FMPI2C_InôSåu˘
->
FMPI2C_Ack
;

238 
FMPI2Cx
->
CR2
 = 
tm¥eg
;

239 
	}
}

246 
	$FMPI2C_Såu˘Inô
(
FMPI2C_InôTy≥Def
* 
FMPI2C_InôSåu˘
)

250 
FMPI2C_InôSåu˘
->
FMPI2C_Timög
 = 0;

252 
FMPI2C_InôSåu˘
->
FMPI2C_A«logFûãr
 = 
FMPI2C_A«logFûãr_E«bÀ
;

254 
FMPI2C_InôSåu˘
->
FMPI2C_DigôÆFûãr
 = 0;

256 
FMPI2C_InôSåu˘
->
FMPI2C_Mode
 = 
FMPI2C_Mode_FMPI2C
;

258 
FMPI2C_InôSåu˘
->
FMPI2C_OwnAddªss1
 = 0;

260 
FMPI2C_InôSåu˘
->
FMPI2C_Ack
 = 
FMPI2C_Ack_DißbÀ
;

262 
FMPI2C_InôSåu˘
->
FMPI2C_AcknowÀdgedAddªss
 = 
FMPI2C_AcknowÀdgedAddªss_7bô
;

263 
	}
}

272 
	$FMPI2C_Cmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

275 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

276 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

277 i‡(
NewSèã
 !
DISABLE
)

280 
FMPI2Cx
->
CR1
 |
FMPI2C_CR1_PE
;

285 
FMPI2Cx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_CR1_PE
);

287 
	}
}

295 
	$FMPI2C_So·w¨eRe£tCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
)

298 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

301 
FMPI2Cx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_CR1_PE
);

305 *(
__IO
 
uöt32_t
 *)(uöt32_t)
FMPI2Cx
;

308 
FMPI2Cx
->
CR1
 |
FMPI2C_CR1_PE
;

309 
	}
}

327 
	$FMPI2C_ITC⁄fig
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt32_t
 
FMPI2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

330 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

331 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

332 
	`as£π_∑øm
(
	`IS_FMPI2C_CONFIG_IT
(
FMPI2C_IT
));

334 i‡(
NewSèã
 !
DISABLE
)

337 
FMPI2Cx
->
CR1
 |
FMPI2C_IT
;

342 
FMPI2Cx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_IT
);

344 
	}
}

353 
	$FMPI2C_SåëchClockCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

356 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

357 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

359 i‡(
NewSèã
 !
DISABLE
)

362 
FMPI2Cx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_CR1_NOSTRETCH
);

367 
FMPI2Cx
->
CR1
 |
FMPI2C_CR1_NOSTRETCH
;

369 
	}
}

378 
	$FMPI2C_St›ModeCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

381 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

382 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

384 i‡(
NewSèã
 !
DISABLE
)

387 
FMPI2Cx
->
CR1
 |
FMPI2C_CR1_WUPEN
;

392 
FMPI2Cx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_CR1_WUPEN
);

394 
	}
}

403 
	$FMPI2C_DuÆAddªssCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

406 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

407 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

409 i‡(
NewSèã
 !
DISABLE
)

412 
FMPI2Cx
->
OAR2
 |
FMPI2C_OAR2_OA2EN
;

417 
FMPI2Cx
->
OAR2
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_OAR2_OA2EN
);

419 
	}
}

437 
	$FMPI2C_OwnAddªss2C⁄fig
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt16_t
 
Addªss
, 
uöt8_t
 
Mask
)

439 
uöt32_t
 
tm¥eg
 = 0;

442 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

443 
	`as£π_∑øm
(
	`IS_FMPI2C_OWN_ADDRESS2
(
Addªss
));

444 
	`as£π_∑øm
(
	`IS_FMPI2C_OWN_ADDRESS2_MASK
(
Mask
));

447 
tm¥eg
 = 
FMPI2Cx
->
OAR2
;

450 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)(
FMPI2C_OAR2_OA2
 | 
FMPI2C_OAR2_OA2MSK
));

453 
tm¥eg
 |(
uöt32_t
)(((uöt32_t)
Addªss
 & 
FMPI2C_OAR2_OA2
) | \

454 (((
uöt32_t
)
Mask
 << 8Ë& 
FMPI2C_OAR2_OA2MSK
)) ;

457 
FMPI2Cx
->
OAR2
 = 
tm¥eg
;

458 
	}
}

467 
	$FMPI2C_GíîÆCÆlCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

470 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

471 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

473 i‡(
NewSèã
 !
DISABLE
)

476 
FMPI2Cx
->
CR1
 |
FMPI2C_CR1_GCEN
;

481 
FMPI2Cx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_CR1_GCEN
);

483 
	}
}

492 
	$FMPI2C_SœveByãC⁄åﬁCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

495 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

496 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

498 i‡(
NewSèã
 !
DISABLE
)

501 
FMPI2Cx
->
CR1
 |
FMPI2C_CR1_SBC
;

506 
FMPI2Cx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_CR1_SBC
);

508 
	}
}

517 
	$FMPI2C_SœveAddªssC⁄fig
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt16_t
 
Addªss
)

519 
uöt32_t
 
tm¥eg
 = 0;

522 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

523 
	`as£π_∑øm
(
	`IS_FMPI2C_SLAVE_ADDRESS
(
Addªss
));

526 
tm¥eg
 = 
FMPI2Cx
->
CR2
;

529 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_CR2_SADD
);

532 
tm¥eg
 |(
uöt32_t
)((uöt32_t)
Addªss
 & 
FMPI2C_CR2_SADD
);

535 
FMPI2Cx
->
CR2
 = 
tm¥eg
;

536 
	}
}

546 
	$FMPI2C_10BôAddªssögModeCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

549 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

550 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

552 i‡(
NewSèã
 !
DISABLE
)

555 
FMPI2Cx
->
CR2
 |
FMPI2C_CR2_ADD10
;

560 
FMPI2Cx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_CR2_ADD10
);

562 
	}
}

611 
	$FMPI2C_AutoEndCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

614 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

615 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

617 i‡(
NewSèã
 !
DISABLE
)

620 
FMPI2Cx
->
CR2
 |
FMPI2C_CR2_AUTOEND
;

625 
FMPI2Cx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_CR2_AUTOEND
);

627 
	}
}

636 
	$FMPI2C_RñﬂdCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

639 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

640 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

642 i‡(
NewSèã
 !
DISABLE
)

645 
FMPI2Cx
->
CR2
 |
FMPI2C_CR2_RELOAD
;

650 
FMPI2Cx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_CR2_RELOAD
);

652 
	}
}

660 
	$FMPI2C_NumbîOfByãsC⁄fig
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt8_t
 
Numbî_Byãs
)

662 
uöt32_t
 
tm¥eg
 = 0;

665 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

668 
tm¥eg
 = 
FMPI2Cx
->
CR2
;

671 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_CR2_NBYTES
);

674 
tm¥eg
 |(
uöt32_t
)(((uöt32_t)
Numbî_Byãs
 << 16 ) & 
FMPI2C_CR2_NBYTES
);

677 
FMPI2Cx
->
CR2
 = 
tm¥eg
;

678 
	}
}

689 
	$FMPI2C_Ma°îReque°C⁄fig
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt16_t
 
FMPI2C_Dúe˘i⁄
)

692 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

693 
	`as£π_∑øm
(
	`IS_FMPI2C_DIRECTION
(
FMPI2C_Dúe˘i⁄
));

696 i‡(
FMPI2C_Dúe˘i⁄
 =
FMPI2C_Dúe˘i⁄_Tønsmôãr
)

699 
FMPI2Cx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_CR2_RD_WRN
);

704 
FMPI2Cx
->
CR2
 |
FMPI2C_CR2_RD_WRN
;

706 
	}
}

715 
	$FMPI2C_Gíî©eSTART
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

718 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

719 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

721 i‡(
NewSèã
 !
DISABLE
)

724 
FMPI2Cx
->
CR2
 |
FMPI2C_CR2_START
;

729 
FMPI2Cx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_CR2_START
);

731 
	}
}

740 
	$FMPI2C_Gíî©eSTOP
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

743 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

744 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

746 i‡(
NewSèã
 !
DISABLE
)

749 
FMPI2Cx
->
CR2
 |
FMPI2C_CR2_STOP
;

754 
FMPI2Cx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_CR2_STOP
);

756 
	}
}

767 
	$FMPI2C_10BôAddªssHódîCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

770 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

771 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

773 i‡(
NewSèã
 !
DISABLE
)

776 
FMPI2Cx
->
CR2
 |
FMPI2C_CR2_HEAD10R
;

781 
FMPI2Cx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_CR2_HEAD10R
);

783 
	}
}

792 
	$FMPI2C_AcknowÀdgeC⁄fig
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

795 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

796 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

798 i‡(
NewSèã
 !
DISABLE
)

801 
FMPI2Cx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_CR2_NACK
);

806 
FMPI2Cx
->
CR2
 |
FMPI2C_CR2_NACK
;

808 
	}
}

815 
uöt8_t
 
	$FMPI2C_GëAddªssM©ched
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
)

818 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

821  (
uöt8_t
)(((
uöt32_t
)
FMPI2Cx
->
ISR
 & 
FMPI2C_ISR_ADDCODE
) >> 16) ;

822 
	}
}

829 
uöt16_t
 
	$FMPI2C_GëTøns„rDúe˘i⁄
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
)

831 
uöt32_t
 
tm¥eg
 = 0;

832 
uöt16_t
 
dúe˘i⁄
 = 0;

835 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

838 
tm¥eg
 = (
uöt32_t
)(
FMPI2Cx
->
ISR
 & 
FMPI2C_ISR_DIR
);

841 i‡(
tm¥eg
 == 0)

844 
dúe˘i⁄
 = 
FMPI2C_Dúe˘i⁄_Tønsmôãr
;

849 
dúe˘i⁄
 = 
FMPI2C_Dúe˘i⁄_Re˚ivî
;

851  
dúe˘i⁄
;

852 
	}
}

873 
	$FMPI2C_Tøns„rH™dlög
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt16_t
 
Addªss
, 
uöt8_t
 
Numbî_Byãs
, 
uöt32_t
 
RñﬂdEndMode
, uöt32_à
SèπSt›Mode
)

875 
uöt32_t
 
tm¥eg
 = 0;

878 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

879 
	`as£π_∑øm
(
	`IS_FMPI2C_SLAVE_ADDRESS
(
Addªss
));

880 
	`as£π_∑øm
(
	`IS_RELOAD_END_MODE
(
RñﬂdEndMode
));

881 
	`as£π_∑øm
(
	`IS_START_STOP_MODE
(
SèπSt›Mode
));

884 
tm¥eg
 = 
FMPI2Cx
->
CR2
;

887 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)(
FMPI2C_CR2_SADD
 | 
FMPI2C_CR2_NBYTES
 | 
FMPI2C_CR2_RELOAD
 | 
FMPI2C_CR2_AUTOEND
 | 
FMPI2C_CR2_RD_WRN
 | 
FMPI2C_CR2_START
 | 
FMPI2C_CR2_STOP
));

890 
tm¥eg
 |(
uöt32_t
)(((uöt32_t)
Addªss
 & 
FMPI2C_CR2_SADD
Ë| (((uöt32_t)
Numbî_Byãs
 << 16 ) & 
FMPI2C_CR2_NBYTES
) | \

891 (
uöt32_t
)
RñﬂdEndMode
 | (uöt32_t)
SèπSt›Mode
);

894 
FMPI2Cx
->
CR2
 = 
tm¥eg
;

895 
	}
}

944 
	$FMPI2C_SMBusAÀπCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

947 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

948 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

950 i‡(
NewSèã
 !
DISABLE
)

953 
FMPI2Cx
->
CR1
 |
FMPI2C_CR1_ALERTEN
;

958 
FMPI2Cx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_CR1_ALERTEN
);

960 
	}
}

969 
	$FMPI2C_ClockTimeoutCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

972 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

973 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

975 i‡(
NewSèã
 !
DISABLE
)

978 
FMPI2Cx
->
TIMEOUTR
 |
FMPI2C_TIMEOUTR_TIMOUTEN
;

983 
FMPI2Cx
->
TIMEOUTR
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_TIMEOUTR_TIMOUTEN
);

985 
	}
}

994 
	$FMPI2C_ExãndedClockTimeoutCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

997 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

998 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1000 i‡(
NewSèã
 !
DISABLE
)

1003 
FMPI2Cx
->
TIMEOUTR
 |
FMPI2C_TIMEOUTR_TEXTEN
;

1008 
FMPI2Cx
->
TIMEOUTR
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_TIMEOUTR_TEXTEN
);

1010 
	}
}

1020 
	$FMPI2C_IdÀClockTimeoutCmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1023 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

1024 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1026 i‡(
NewSèã
 !
DISABLE
)

1029 
FMPI2Cx
->
TIMEOUTR
 |
FMPI2C_TIMEOUTR_TIDLE
;

1034 
FMPI2Cx
->
TIMEOUTR
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_TIMEOUTR_TIDLE
);

1036 
	}
}

1045 
	$FMPI2C_TimeoutAC⁄fig
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt16_t
 
Timeout
)

1047 
uöt32_t
 
tm¥eg
 = 0;

1050 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

1051 
	`as£π_∑øm
(
	`IS_FMPI2C_TIMEOUT
(
Timeout
));

1054 
tm¥eg
 = 
FMPI2Cx
->
TIMEOUTR
;

1057 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_TIMEOUTR_TIMEOUTA
);

1060 
tm¥eg
 |(
uöt32_t
)((uöt32_t)
Timeout
 & 
FMPI2C_TIMEOUTR_TIMEOUTA
) ;

1063 
FMPI2Cx
->
TIMEOUTR
 = 
tm¥eg
;

1064 
	}
}

1072 
	$FMPI2C_TimeoutBC⁄fig
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt16_t
 
Timeout
)

1074 
uöt32_t
 
tm¥eg
 = 0;

1077 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

1078 
	`as£π_∑øm
(
	`IS_FMPI2C_TIMEOUT
(
Timeout
));

1081 
tm¥eg
 = 
FMPI2Cx
->
TIMEOUTR
;

1084 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_TIMEOUTR_TIMEOUTB
);

1087 
tm¥eg
 |(
uöt32_t
)(((uöt32_t)
Timeout
 << 16Ë& 
FMPI2C_TIMEOUTR_TIMEOUTB
) ;

1090 
FMPI2Cx
->
TIMEOUTR
 = 
tm¥eg
;

1091 
	}
}

1100 
	$FMPI2C_CÆcuœãPEC
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1103 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

1104 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1106 i‡(
NewSèã
 !
DISABLE
)

1109 
FMPI2Cx
->
CR1
 |
FMPI2C_CR1_PECEN
;

1114 
FMPI2Cx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_CR1_PECEN
);

1116 
	}
}

1125 
	$FMPI2C_PECReque°Cmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1128 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

1129 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1131 i‡(
NewSèã
 !
DISABLE
)

1134 
FMPI2Cx
->
CR1
 |
FMPI2C_CR2_PECBYTE
;

1139 
FMPI2Cx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
FMPI2C_CR2_PECBYTE
);

1141 
	}
}

1148 
uöt8_t
 
	$FMPI2C_GëPEC
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
)

1151 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

1154  (
uöt8_t
)((
uöt32_t
)
FMPI2Cx
->
PECR
 & 
FMPI2C_PECR_PEC
);

1155 
	}
}

1194 
uöt32_t
 
	$FMPI2C_RódRegi°î
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt8_t
 
FMPI2C_Regi°î
)

1196 
__IO
 
uöt32_t
 
tmp
 = 0;

1199 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

1200 
	`as£π_∑øm
(
	`IS_FMPI2C_REGISTER
(
FMPI2C_Regi°î
));

1202 
tmp
 = (
uöt32_t
)
FMPI2Cx
;

1203 
tmp
 +
FMPI2C_Regi°î
;

1206  (*(
__IO
 
uöt32_t
 *Ë
tmp
);

1207 
	}
}

1237 
	$FMPI2C_SídD©a
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt8_t
 
D©a
)

1240 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

1243 
FMPI2Cx
->
TXDR
 = (
uöt8_t
)
D©a
;

1244 
	}
}

1251 
uöt8_t
 
	$FMPI2C_Re˚iveD©a
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
)

1254 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

1257  (
uöt8_t
)
FMPI2Cx
->
RXDR
;

1258 
	}
}

1294 
	$FMPI2C_DMACmd
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt32_t
 
FMPI2C_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1297 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

1298 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1299 
	`as£π_∑øm
(
	`IS_FMPI2C_DMA_REQ
(
FMPI2C_DMAReq
));

1301 i‡(
NewSèã
 !
DISABLE
)

1304 
FMPI2Cx
->
CR1
 |
FMPI2C_DMAReq
;

1309 
FMPI2Cx
->
CR1
 &(
uöt32_t
)~
FMPI2C_DMAReq
;

1311 
	}
}

1414 
FœgSètus
 
	$FMPI2C_GëFœgSètus
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt32_t
 
FMPI2C_FLAG
)

1416 
uöt32_t
 
tm¥eg
 = 0;

1417 
FœgSètus
 
bô°©us
 = 
RESET
;

1420 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

1421 
	`as£π_∑øm
(
	`IS_FMPI2C_GET_FLAG
(
FMPI2C_FLAG
));

1424 
tm¥eg
 = 
FMPI2Cx
->
ISR
;

1427 
tm¥eg
 &
FMPI2C_FLAG
;

1429 if(
tm¥eg
 != 0)

1432 
bô°©us
 = 
SET
;

1437 
bô°©us
 = 
RESET
;

1439  
bô°©us
;

1440 
	}
}

1458 
	$FMPI2C_CÀ¨Fœg
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt32_t
 
FMPI2C_FLAG
)

1461 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

1462 
	`as£π_∑øm
(
	`IS_FMPI2C_CLEAR_FLAG
(
FMPI2C_FLAG
));

1465 
FMPI2Cx
->
ICR
 = 
FMPI2C_FLAG
;

1466 
	}
}

1488 
ITSètus
 
	$FMPI2C_GëITSètus
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt32_t
 
FMPI2C_IT
)

1490 
uöt32_t
 
tm¥eg
 = 0;

1491 
ITSètus
 
bô°©us
 = 
RESET
;

1492 
uöt32_t
 
íabÀ°©us
 = 0;

1495 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

1496 
	`as£π_∑øm
(
	`IS_FMPI2C_GET_IT
(
FMPI2C_IT
));

1500 if((
uöt32_t
)(
FMPI2C_IT
 & 
ERROR_IT_MASK
))

1502 
íabÀ°©us
 = (
uöt32_t
)((
FMPI2C_CR1_ERRIE
Ë& (
FMPI2Cx
->
CR1
));

1505 if((
uöt32_t
)(
FMPI2C_IT
 & 
TC_IT_MASK
))

1507 
íabÀ°©us
 = (
uöt32_t
)((
FMPI2C_CR1_TCIE
Ë& (
FMPI2Cx
->
CR1
));

1511 
íabÀ°©us
 = (
uöt32_t
)((
FMPI2C_IT
Ë& (
FMPI2Cx
->
CR1
));

1515 
tm¥eg
 = 
FMPI2Cx
->
ISR
;

1518 
tm¥eg
 &
FMPI2C_IT
;

1521 if((
tm¥eg
 !
RESET
Ë&& 
íabÀ°©us
)

1524 
bô°©us
 = 
SET
;

1529 
bô°©us
 = 
RESET
;

1533  
bô°©us
;

1534 
	}
}

1552 
	$FMPI2C_CÀ¨ITPídögBô
(
FMPI2C_Ty≥Def
* 
FMPI2Cx
, 
uöt32_t
 
FMPI2C_IT
)

1555 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_PERIPH
(
FMPI2Cx
));

1556 
	`as£π_∑øm
(
	`IS_FMPI2C_CLEAR_IT
(
FMPI2C_IT
));

1559 
FMPI2Cx
->
ICR
 = 
FMPI2C_IT
;

1560 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_fsmc.c

35 
	~"°m32f4xx_fsmc.h
"

36 
	~"°m32f4xx_rcc.h
"

48 c⁄° 
FSMC_NORSRAMTimögInôTy≥Def
 
	gFSMC_DeÁu…TimögSåu˘
 = {0x0F,

54 
FSMC_Ac˚ssMode_A


60 
	#BCR_MBKEN_SET
 ((
uöt32_t
)0x00000001)

	)

61 
	#BCR_MBKEN_RESET
 ((
uöt32_t
)0x000FFFFE)

	)

62 
	#BCR_FACCEN_SET
 ((
uöt32_t
)0x00000040)

	)

65 
	#PCR_PBKEN_SET
 ((
uöt32_t
)0x00000004)

	)

66 
	#PCR_PBKEN_RESET
 ((
uöt32_t
)0x000FFFFB)

	)

67 
	#PCR_ECCEN_SET
 ((
uöt32_t
)0x00000040)

	)

68 
	#PCR_ECCEN_RESET
 ((
uöt32_t
)0x000FFFBF)

	)

69 
	#PCR_MEMORYTYPE_NAND
 ((
uöt32_t
)0x00000008)

	)

129 
	$FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
)

132 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

135 if(
FSMC_B™k
 =
FSMC_B™k1_NORSRAM1
)

137 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030DB;

142 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030D2;

144 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
 + 1] = 0x0FFFFFFF;

145 
FSMC_B™k1E
->
BWTR
[
FSMC_B™k
] = 0x0FFFFFFF;

146 
	}
}

156 
	$FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

158 
uöt32_t
 
tmpb¸
 = 0, 
tmpbå
 = 0, 
tmpbwr
 = 0;

161 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
));

162 
	`as£π_∑øm
(
	`IS_FSMC_MUX
(
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
));

163 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
));

164 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY_WIDTH
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

165 
	`as£π_∑øm
(
	`IS_FSMC_BURSTMODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
));

166 
	`as£π_∑øm
(
	`IS_FSMC_ASYNWAIT
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
));

167 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_POLARITY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
));

168 
	`as£π_∑øm
(
	`IS_FSMC_WRAP_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
));

169 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_SIGNAL_ACTIVE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
));

170 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_OPERATION
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
));

171 
	`as£π_∑øm
(
	`IS_FSMC_WAITE_SIGNAL
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
));

172 
	`as£π_∑øm
(
	`IS_FSMC_EXTENDED_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
));

173 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_BURST
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
));

174 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

175 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

176 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

177 
	`as£π_∑øm
(
	`IS_FSMC_TURNAROUND_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
));

178 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

179 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

180 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

183 
tmpb¸
 = 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
];

187 
tmpb¸
 &((
uöt32_t
)~(
FSMC_BCR1_MBKEN
 | 
FSMC_BCR1_MUXEN
 | 
FSMC_BCR1_MTYP
 | \

188 
FSMC_BCR1_MWID
 | 
FSMC_BCR1_FACCEN
 | 
FSMC_BCR1_BURSTEN
 | \

189 
FSMC_BCR1_WAITPOL
 | 
FSMC_BCR1_WRAPMOD
 | 
FSMC_BCR1_WAITCFG
 | \

190 
FSMC_BCR1_WREN
 | 
FSMC_BCR1_WAITEN
 | 
FSMC_BCR1_EXTMOD
 | \

191 
FSMC_BCR1_ASYNCWAIT
 | 
FSMC_BCR1_CBURSTRW
));

194 
tmpb¸
 |(
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 |

195 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 |

196 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

197 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 |

198 
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
 |

199 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 |

200 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 |

201 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 |

202 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 |

203 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 |

204 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 |

205 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
;

207 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] = 
tmpb¸
;

209 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 =
FSMC_Mem‹yTy≥_NOR
)

211 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] |(
uöt32_t
)
BCR_FACCEN_SET
;

215 
tmpbå
 = 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
+1];

218 
tmpbå
 &((
uöt32_t
)~(
FSMC_BTR1_ADDSET
 | 
FSMC_BTR1_ADDHLD
 | 
FSMC_BTR1_DATAST
 | \

219 
FSMC_BTR1_BUSTURN
 | 
FSMC_BTR1_CLKDIV
 | 
FSMC_BTR1_DATLAT
 | \

220 
FSMC_BTR1_ACCMOD
));

223 
tmpbå
 |(
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

224 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4) |

225 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

226 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 << 16) |

227 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

228 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

229 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

231 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
+1] = 
tmpbå
;

234 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 =
FSMC_ExãndedMode_E«bÀ
)

236 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

237 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

238 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

239 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

240 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

241 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

244 
tmpbwr
 = 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
];

247 
tmpbwr
 &((
uöt32_t
)~(
FSMC_BWTR1_ADDSET
 | 
FSMC_BWTR1_ADDHLD
 | 
FSMC_BWTR1_DATAST
 | \

248 
FSMC_BWTR1_BUSTURN
 | 
FSMC_BWTR1_CLKDIV
 | 
FSMC_BWTR1_DATLAT
 | \

249 
FSMC_BWTR1_ACCMOD
));

251 
tmpbwr
 |(
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

252 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4 )|

253 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

254 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

255 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

256 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

258 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] = 
tmpbwr
;

262 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] = 0x0FFFFFFF;

264 
	}
}

272 
	$FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

275 
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k1_NORSRAM1
;

276 
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 = 
FSMC_D©aAddªssMux_E«bÀ
;

277 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 = 
FSMC_Mem‹yTy≥_SRAM
;

278 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

279 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 = 
FSMC_Bur°Ac˚ssMode_DißbÀ
;

280 
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
 = 
FSMC_Asynchr⁄ousWaô_DißbÀ
;

281 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 = 
FSMC_WaôSig«lPﬁ¨ôy_Low
;

282 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 = 
FSMC_WøpMode_DißbÀ
;

283 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 = 
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
;

284 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 = 
FSMC_WrôeO≥øti⁄_E«bÀ
;

285 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 = 
FSMC_WaôSig«l_E«bÀ
;

286 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 = 
FSMC_ExãndedMode_DißbÀ
;

287 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
 = 
FSMC_WrôeBur°_DißbÀ
;

288 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
 = (
FSMC_NORSRAMTimögInôTy≥Def
*)&
FSMC_DeÁu…TimögSåu˘
;

289 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
 = (
FSMC_NORSRAMTimögInôTy≥Def
*)&
FSMC_DeÁu…TimögSåu˘
;

290 
	}
}

303 
	$FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

305 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

306 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

308 i‡(
NewSèã
 !
DISABLE
)

311 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] |
BCR_MBKEN_SET
;

316 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] &
BCR_MBKEN_RESET
;

318 
	}
}

376 
	$FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
)

379 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

381 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

384 
FSMC_B™k2
->
PCR2
 = 0x00000018;

385 
FSMC_B™k2
->
SR2
 = 0x00000040;

386 
FSMC_B™k2
->
PMEM2
 = 0xFCFCFCFC;

387 
FSMC_B™k2
->
PATT2
 = 0xFCFCFCFC;

393 
FSMC_B™k3
->
PCR3
 = 0x00000018;

394 
FSMC_B™k3
->
SR3
 = 0x00000040;

395 
FSMC_B™k3
->
PMEM3
 = 0xFCFCFCFC;

396 
FSMC_B™k3
->
PATT3
 = 0xFCFCFCFC;

398 
	}
}

407 
	$FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

409 
uöt32_t
 
tmµ¸
 = 0x00000000, 
tmµmem
 = 0x00000000, 
tmµ©t
 = 0x00000000;

412 
	`as£π_∑øm
–
	`IS_FSMC_NAND_BANK
(
FSMC_NANDInôSåu˘
->
FSMC_B™k
));

413 
	`as£π_∑øm
–
	`IS_FSMC_WAIT_FEATURE
(
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
));

414 
	`as£π_∑øm
–
	`IS_FSMC_MEMORY_WIDTH
(
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

415 
	`as£π_∑øm
–
	`IS_FSMC_ECC_STATE
(
FSMC_NANDInôSåu˘
->
FSMC_ECC
));

416 
	`as£π_∑øm
–
	`IS_FSMC_ECCPAGE_SIZE
(
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
));

417 
	`as£π_∑øm
–
	`IS_FSMC_TCLR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
));

418 
	`as£π_∑øm
–
	`IS_FSMC_TAR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
));

419 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

420 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

421 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

422 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

423 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

424 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

425 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

426 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

428 if(
FSMC_NANDInôSåu˘
->
FSMC_B™k
 =
FSMC_B™k2_NAND
)

431 
tmµ¸
 = 
FSMC_B™k2
->
PCR2
;

436 
tmµ¸
 = 
FSMC_B™k3
->
PCR3
;

440 
tmµ¸
 &((
uöt32_t
)~(
FSMC_PCR2_PWAITEN
 | 
FSMC_PCR2_PBKEN
 | 
FSMC_PCR2_PTYP
 | \

441 
FSMC_PCR2_PWID
 | 
FSMC_PCR2_ECCEN
 | 
FSMC_PCR2_TCLR
 | \

442 
FSMC_PCR2_TAR
 | 
FSMC_PCR2_ECCPS
));

445 
tmµ¸
 |(
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 |

446 
PCR_MEMORYTYPE_NAND
 |

447 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

448 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 |

449 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 |

450 (
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9 )|

451 (
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

453 if(
FSMC_NANDInôSåu˘
->
FSMC_B™k
 =
FSMC_B™k2_NAND
)

456 
tmµmem
 = 
FSMC_B™k2
->
PMEM2
;

461 
tmµmem
 = 
FSMC_B™k3
->
PMEM3
;

465 
tmµmem
 &((
uöt32_t
)~(
FSMC_PMEM2_MEMSET2
 | 
FSMC_PMEM2_MEMWAIT2
 | 
FSMC_PMEM2_MEMHOLD2
 | \

466 
FSMC_PMEM2_MEMHIZ2
));

469 
tmµmem
 |(
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

470 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

471 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

472 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

474 if(
FSMC_NANDInôSåu˘
->
FSMC_B™k
 =
FSMC_B™k2_NAND
)

477 
tmµ©t
 = 
FSMC_B™k2
->
PATT2
;

482 
tmµ©t
 = 
FSMC_B™k2
->
PATT2
;

486 
tmµ©t
 &((
uöt32_t
)~(
FSMC_PATT2_ATTSET2
 | 
FSMC_PATT2_ATTWAIT2
 | 
FSMC_PATT2_ATTHOLD2
 | \

487 
FSMC_PATT2_ATTHIZ2
));

490 
tmµ©t
 |(
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

491 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

492 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

493 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

495 if(
FSMC_NANDInôSåu˘
->
FSMC_B™k
 =
FSMC_B™k2_NAND
)

498 
FSMC_B™k2
->
PCR2
 = 
tmµ¸
;

499 
FSMC_B™k2
->
PMEM2
 = 
tmµmem
;

500 
FSMC_B™k2
->
PATT2
 = 
tmµ©t
;

505 
FSMC_B™k3
->
PCR3
 = 
tmµ¸
;

506 
FSMC_B™k3
->
PMEM3
 = 
tmµmem
;

507 
FSMC_B™k3
->
PATT3
 = 
tmµ©t
;

509 
	}
}

518 
	$FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

521 
FSMC_NANDInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k2_NAND
;

522 
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

523 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

524 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 = 
FSMC_ECC_DißbÀ
;

525 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 = 
FSMC_ECCPageSize_256Byãs
;

526 
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

527 
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

528 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

529 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

530 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

531 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

532 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

533 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

534 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

535 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

536 
	}
}

547 
	$FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

549 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

550 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

552 i‡(
NewSèã
 !
DISABLE
)

555 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

557 
FSMC_B™k2
->
PCR2
 |
PCR_PBKEN_SET
;

561 
FSMC_B™k3
->
PCR3
 |
PCR_PBKEN_SET
;

567 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

569 
FSMC_B™k2
->
PCR2
 &
PCR_PBKEN_RESET
;

573 
FSMC_B™k3
->
PCR3
 &
PCR_PBKEN_RESET
;

576 
	}
}

587 
	$FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

589 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

590 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

592 i‡(
NewSèã
 !
DISABLE
)

595 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

597 
FSMC_B™k2
->
PCR2
 |
PCR_ECCEN_SET
;

601 
FSMC_B™k3
->
PCR3
 |
PCR_ECCEN_SET
;

607 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

609 
FSMC_B™k2
->
PCR2
 &
PCR_ECCEN_RESET
;

613 
FSMC_B™k3
->
PCR3
 &
PCR_ECCEN_RESET
;

616 
	}
}

626 
uöt32_t
 
	$FSMC_GëECC
(
uöt32_t
 
FSMC_B™k
)

628 
uöt32_t
 
eccvÆ
 = 0x00000000;

630 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

633 
eccvÆ
 = 
FSMC_B™k2
->
ECCR2
;

638 
eccvÆ
 = 
FSMC_B™k3
->
ECCR3
;

641 (
eccvÆ
);

642 
	}
}

690 
	$FSMC_PCCARDDeInô
()

693 
FSMC_B™k4
->
PCR4
 = 0x00000018;

694 
FSMC_B™k4
->
SR4
 = 0x00000000;

695 
FSMC_B™k4
->
PMEM4
 = 0xFCFCFCFC;

696 
FSMC_B™k4
->
PATT4
 = 0xFCFCFCFC;

697 
FSMC_B™k4
->
PIO4
 = 0xFCFCFCFC;

698 
	}
}

707 
	$FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

709 
uöt32_t
 
tmµ¸4
 = 0, 
tmµmem4
 = 0, 
tmµ©t4
 = 0, 
tmµio4
 = 0;

712 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_FEATURE
(
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
));

713 
	`as£π_∑øm
(
	`IS_FSMC_TCLR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
));

714 
	`as£π_∑øm
(
	`IS_FSMC_TAR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
));

716 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

717 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

718 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

719 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

721 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

722 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

723 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

724 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

725 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
));

726 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

727 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

728 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

731 
tmµ¸4
 = 
FSMC_B™k4
->
PCR4
;

734 
tmµ¸4
 &((
uöt32_t
)~(
FSMC_PCR4_TAR
 | 
FSMC_PCR4_TCLR
 | 
FSMC_PCR4_PWAITEN
 | \

735 
FSMC_PCR4_PWID
));

738 
tmµ¸4
 |(
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 |

739 
FSMC_Mem‹yD©aWidth_16b
 |

740 (
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9) |

741 (
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

743 
FSMC_B™k4
->
PCR4
 = 
tmµ¸4
;

746 
tmµmem4
 = 
FSMC_B™k4
->
PMEM4
;

749 
tmµmem4
 &((
uöt32_t
)~(
FSMC_PMEM4_MEMSET4
 | 
FSMC_PMEM4_MEMWAIT4
 | 
FSMC_PMEM4_MEMHOLD4
 | \

750 
FSMC_PMEM4_MEMHIZ4
));

753 
tmµmem4
 |(
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

754 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

755 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

756 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

758 
FSMC_B™k4
->
PMEM4
 = 
tmµmem4
;

761 
tmµ©t4
 = 
FSMC_B™k4
->
PATT4
;

764 
tmµ©t4
 &((
uöt32_t
)~(
FSMC_PATT4_ATTSET4
 | 
FSMC_PATT4_ATTWAIT4
 | 
FSMC_PATT4_ATTHOLD4
 | \

765 
FSMC_PATT4_ATTHIZ4
));

768 
tmµ©t4
 |(
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

769 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

770 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

771 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

773 
FSMC_B™k4
->
PATT4
 = 
tmµ©t4
;

776 
tmµio4
 = 
FSMC_B™k4
->
PIO4
;

779 
tmµio4
 &((
uöt32_t
)~(
FSMC_PIO4_IOSET4
 | 
FSMC_PIO4_IOWAIT4
 | 
FSMC_PIO4_IOHOLD4
 | \

780 
FSMC_PIO4_IOHIZ4
));

783 
tmµio4
 |(
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

784 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

785 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

786 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

788 
FSMC_B™k4
->
PIO4
 = 
tmµio4
;

789 
	}
}

797 
	$FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

800 
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

801 
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

802 
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

803 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

804 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

805 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

806 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

807 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

808 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

809 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

810 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

811 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

812 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

813 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

814 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

815 
	}
}

823 
	$FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

825 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

827 i‡(
NewSèã
 !
DISABLE
)

830 
FSMC_B™k4
->
PCR4
 |
PCR_PBKEN_SET
;

835 
FSMC_B™k4
->
PCR4
 &
PCR_PBKEN_RESET
;

837 
	}
}

870 
	$FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

872 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

873 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

874 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

876 i‡(
NewSèã
 !
DISABLE
)

879 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

881 
FSMC_B™k2
->
SR2
 |
FSMC_IT
;

884 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

886 
FSMC_B™k3
->
SR3
 |
FSMC_IT
;

891 
FSMC_B™k4
->
SR4
 |
FSMC_IT
;

897 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

900 
FSMC_B™k2
->
SR2
 &(
uöt32_t
)~
FSMC_IT
;

903 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

905 
FSMC_B™k3
->
SR3
 &(
uöt32_t
)~
FSMC_IT
;

910 
FSMC_B™k4
->
SR4
 &(
uöt32_t
)~
FSMC_IT
;

913 
	}
}

930 
FœgSètus
 
	$FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

932 
FœgSètus
 
bô°©us
 = 
RESET
;

933 
uöt32_t
 
tmp§
 = 0x00000000;

936 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

937 
	`as£π_∑øm
(
	`IS_FSMC_GET_FLAG
(
FSMC_FLAG
));

939 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

941 
tmp§
 = 
FSMC_B™k2
->
SR2
;

943 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

945 
tmp§
 = 
FSMC_B™k3
->
SR3
;

950 
tmp§
 = 
FSMC_B™k4
->
SR4
;

954 i‡((
tmp§
 & 
FSMC_FLAG
Ë!(
uöt16_t
)
RESET
 )

956 
bô°©us
 = 
SET
;

960 
bô°©us
 = 
RESET
;

963  
bô°©us
;

964 
	}
}

980 
	$FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

983 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

984 
	`as£π_∑øm
(
	`IS_FSMC_CLEAR_FLAG
(
FSMC_FLAG
)) ;

986 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

988 
FSMC_B™k2
->
SR2
 &~
FSMC_FLAG
;

990 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

992 
FSMC_B™k3
->
SR3
 &~
FSMC_FLAG
;

997 
FSMC_B™k4
->
SR4
 &~
FSMC_FLAG
;

999 
	}
}

1015 
ITSètus
 
	$FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

1017 
ITSètus
 
bô°©us
 = 
RESET
;

1018 
uöt32_t
 
tmp§
 = 0x0, 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

1021 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

1022 
	`as£π_∑øm
(
	`IS_FSMC_GET_IT
(
FSMC_IT
));

1024 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

1026 
tmp§
 = 
FSMC_B™k2
->
SR2
;

1028 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

1030 
tmp§
 = 
FSMC_B™k3
->
SR3
;

1035 
tmp§
 = 
FSMC_B™k4
->
SR4
;

1038 
ô°©us
 = 
tmp§
 & 
FSMC_IT
;

1040 
ôíabÀ
 = 
tmp§
 & (
FSMC_IT
 >> 3);

1041 i‡((
ô°©us
 !(
uöt32_t
)
RESET
Ë&& (
ôíabÀ
 != (uint32_t)RESET))

1043 
bô°©us
 = 
SET
;

1047 
bô°©us
 = 
RESET
;

1049  
bô°©us
;

1050 
	}
}

1066 
	$FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

1069 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

1070 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

1072 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

1074 
FSMC_B™k2
->
SR2
 &~(
FSMC_IT
 >> 3);

1076 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

1078 
FSMC_B™k3
->
SR3
 &~(
FSMC_IT
 >> 3);

1083 
FSMC_B™k4
->
SR4
 &~(
FSMC_IT
 >> 3);

1085 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_gpio.c

84 
	~"°m32f4xx_gpio.h
"

85 
	~"°m32f4xx_rcc.h
"

127 
	$GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
)

130 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

132 i‡(
GPIOx
 =
GPIOA
)

134 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOA
, 
ENABLE
);

135 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOA
, 
DISABLE
);

137 i‡(
GPIOx
 =
GPIOB
)

139 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOB
, 
ENABLE
);

140 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOB
, 
DISABLE
);

142 i‡(
GPIOx
 =
GPIOC
)

144 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOC
, 
ENABLE
);

145 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOC
, 
DISABLE
);

147 i‡(
GPIOx
 =
GPIOD
)

149 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOD
, 
ENABLE
);

150 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOD
, 
DISABLE
);

152 i‡(
GPIOx
 =
GPIOE
)

154 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOE
, 
ENABLE
);

155 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOE
, 
DISABLE
);

157 i‡(
GPIOx
 =
GPIOF
)

159 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOF
, 
ENABLE
);

160 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOF
, 
DISABLE
);

162 i‡(
GPIOx
 =
GPIOG
)

164 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOG
, 
ENABLE
);

165 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOG
, 
DISABLE
);

167 i‡(
GPIOx
 =
GPIOH
)

169 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOH
, 
ENABLE
);

170 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOH
, 
DISABLE
);

173 i‡(
GPIOx
 =
GPIOI
)

175 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOI
, 
ENABLE
);

176 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOI
, 
DISABLE
);

178 i‡(
GPIOx
 =
GPIOJ
)

180 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOJ
, 
ENABLE
);

181 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOJ
, 
DISABLE
);

185 i‡(
GPIOx
 =
GPIOK
)

187 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOK
, 
ENABLE
);

188 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOK
, 
DISABLE
);

191 
	}
}

202 
	$GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

204 
uöt32_t
 
pöpos
 = 0x00, 
pos
 = 0x00 , 
cuºíçö
 = 0x00;

207 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

208 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_InôSåu˘
->
GPIO_Pö
));

209 
	`as£π_∑øm
(
	`IS_GPIO_MODE
(
GPIO_InôSåu˘
->
GPIO_Mode
));

210 
	`as£π_∑øm
(
	`IS_GPIO_PUPD
(
GPIO_InôSåu˘
->
GPIO_PuPd
));

214 
pöpos
 = 0x00;Öinpos < 0x10;Öinpos++)

216 
pos
 = ((
uöt32_t
)0x01Ë<< 
pöpos
;

218 
cuºíçö
 = (
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
;

220 i‡(
cuºíçö
 =
pos
)

222 
GPIOx
->
MODER
 &~(
GPIO_MODER_MODER0
 << (
pöpos
 * 2));

223 
GPIOx
->
MODER
 |(((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
Ë<< (
pöpos
 * 2));

225 i‡((
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_OUT
Ë|| (GPIO_InôSåu˘->GPIO_Modê=
GPIO_Mode_AF
))

228 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_InôSåu˘
->
GPIO_S≥ed
));

231 
GPIOx
->
OSPEEDR
 &~(
GPIO_OSPEEDER_OSPEEDR0
 << (
pöpos
 * 2));

232 
GPIOx
->
OSPEEDR
 |((
uöt32_t
)(
GPIO_InôSåu˘
->
GPIO_S≥ed
Ë<< (
pöpos
 * 2));

235 
	`as£π_∑øm
(
	`IS_GPIO_OTYPE
(
GPIO_InôSåu˘
->
GPIO_OTy≥
));

238 
GPIOx
->
OTYPER
 &~((
GPIO_OTYPER_OT_0
Ë<< ((
uöt16_t
)
pöpos
)) ;

239 
GPIOx
->
OTYPER
 |(
uöt16_t
)(((uöt16_t)
GPIO_InôSåu˘
->
GPIO_OTy≥
Ë<< ((uöt16_t)
pöpos
));

243 
GPIOx
->
PUPDR
 &~(
GPIO_PUPDR_PUPDR0
 << ((
uöt16_t
)
pöpos
 * 2));

244 
GPIOx
->
PUPDR
 |(((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_PuPd
Ë<< (
pöpos
 * 2));

247 
	}
}

254 
	$GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

257 
GPIO_InôSåu˘
->
GPIO_Pö
 = 
GPIO_Pö_AŒ
;

258 
GPIO_InôSåu˘
->
GPIO_Mode
 = 
GPIO_Mode_IN
;

259 
GPIO_InôSåu˘
->
GPIO_S≥ed
 = 
GPIO_S≥ed_2MHz
;

260 
GPIO_InôSåu˘
->
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

261 
GPIO_InôSåu˘
->
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

262 
	}
}

277 
	$GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

279 
__IO
 
uöt32_t
 
tmp
 = 0x00010000;

282 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

283 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

285 
tmp
 |
GPIO_Pö
;

287 
GPIOx
->
LCKR
 = 
tmp
;

289 
GPIOx
->
LCKR
 = 
GPIO_Pö
;

291 
GPIOx
->
LCKR
 = 
tmp
;

293 
tmp
 = 
GPIOx
->
LCKR
;

295 
tmp
 = 
GPIOx
->
LCKR
;

296 
	}
}

323 
uöt8_t
 
	$GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

325 
uöt8_t
 
bô°©us
 = 0x00;

328 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

329 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

331 i‡((
GPIOx
->
IDR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

333 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

337 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

339  
bô°©us
;

340 
	}
}

349 
uöt16_t
 
	$GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

352 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

354  ((
uöt16_t
)
GPIOx
->
IDR
);

355 
	}
}

366 
uöt8_t
 
	$GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

368 
uöt8_t
 
bô°©us
 = 0x00;

371 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

372 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

374 i‡(((
GPIOx
->
ODR
Ë& 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

376 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

380 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

382  
bô°©us
;

383 
	}
}

392 
uöt16_t
 
	$GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

395 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

397  ((
uöt16_t
)
GPIOx
->
ODR
);

398 
	}
}

412 
	$GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

415 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

416 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

418 
GPIOx
->
BSRRL
 = 
GPIO_Pö
;

419 
	}
}

433 
	$GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

436 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

437 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

439 
GPIOx
->
BSRRH
 = 
GPIO_Pö
;

440 
	}
}

455 
	$GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
)

458 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

459 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

460 
	`as£π_∑øm
(
	`IS_GPIO_BIT_ACTION
(
BôVÆ
));

462 i‡(
BôVÆ
 !
Bô_RESET
)

464 
GPIOx
->
BSRRL
 = 
GPIO_Pö
;

468 
GPIOx
->
BSRRH
 = 
GPIO_Pö
 ;

470 
	}
}

480 
	$GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
)

483 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

485 
GPIOx
->
ODR
 = 
P‹tVÆ
;

486 
	}
}

496 
	$GPIO_ToggÀBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

499 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

501 
GPIOx
->
ODR
 ^
GPIO_Pö
;

502 
	}
}

579 
	$GPIO_PöAFC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_PöSour˚
, 
uöt8_t
 
GPIO_AF
)

581 
uöt32_t
 
ãmp
 = 0x00;

582 
uöt32_t
 
ãmp_2
 = 0x00;

585 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

586 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

587 
	`as£π_∑øm
(
	`IS_GPIO_AF
(
GPIO_AF
));

589 
ãmp
 = ((
uöt32_t
)(
GPIO_AF
Ë<< ((uöt32_t)((uöt32_t)
GPIO_PöSour˚
 & (uint32_t)0x07) * 4)) ;

590 
GPIOx
->
AFR
[
GPIO_PöSour˚
 >> 0x03] &~((
uöt32_t
)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;

591 
ãmp_2
 = 
GPIOx
->
AFR
[
GPIO_PöSour˚
 >> 0x03] | 
ãmp
;

592 
GPIOx
->
AFR
[
GPIO_PöSour˚
 >> 0x03] = 
ãmp_2
;

593 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c

123 
	~"°m32f4xx_hash.h
"

124 
	~"°m32f4xx_rcc.h
"

171 
	$HASH_DeInô
()

174 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_HASH
, 
ENABLE
);

176 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_HASH
, 
DISABLE
);

177 
	}
}

191 
	$HASH_Inô
(
HASH_InôTy≥Def
* 
HASH_InôSåu˘
)

194 
	`as£π_∑øm
(
	`IS_HASH_ALGOSELECTION
(
HASH_InôSåu˘
->
HASH_AlgoSñe˘i⁄
));

195 
	`as£π_∑øm
(
	`IS_HASH_DATATYPE
(
HASH_InôSåu˘
->
HASH_D©aTy≥
));

196 
	`as£π_∑øm
(
	`IS_HASH_ALGOMODE
(
HASH_InôSåu˘
->
HASH_AlgoMode
));

199 
HASH
->
CR
 &~ (
HASH_CR_ALGO
 | 
HASH_CR_DATATYPE
 | 
HASH_CR_MODE
);

200 
HASH
->
CR
 |(
HASH_InôSåu˘
->
HASH_AlgoSñe˘i⁄
 | \

201 
HASH_InôSåu˘
->
HASH_D©aTy≥
 | \

202 
HASH_InôSåu˘
->
HASH_AlgoMode
);

205 if(
HASH_InôSåu˘
->
HASH_AlgoMode
 =
HASH_AlgoMode_HMAC
)

207 
	`as£π_∑øm
(
	`IS_HASH_HMAC_KEYTYPE
(
HASH_InôSåu˘
->
HASH_HMACKeyTy≥
));

208 
HASH
->
CR
 &~
HASH_CR_LKEY
;

209 
HASH
->
CR
 |
HASH_InôSåu˘
->
HASH_HMACKeyTy≥
;

214 
HASH
->
CR
 |
HASH_CR_INIT
;

215 
	}
}

225 
	$HASH_Såu˘Inô
(
HASH_InôTy≥Def
* 
HASH_InôSåu˘
)

228 
HASH_InôSåu˘
->
HASH_AlgoSñe˘i⁄
 = 
HASH_AlgoSñe˘i⁄_SHA1
;

231 
HASH_InôSåu˘
->
HASH_AlgoMode
 = 
HASH_AlgoMode_HASH
;

234 
HASH_InôSåu˘
->
HASH_D©aTy≥
 = 
HASH_D©aTy≥_32b
;

237 
HASH_InôSåu˘
->
HASH_HMACKeyTy≥
 = 
HASH_HMACKeyTy≥_Sh‹tKey
;

238 
	}
}

249 
	$HASH_Re£t
()

252 
HASH
->
CR
 |
HASH_CR_INIT
;

253 
	}
}

291 
	$HASH_SëLa°W‹dVÆidBôsNbr
(
uöt16_t
 
VÆidNumbî
)

294 
	`as£π_∑øm
(
	`IS_HASH_VALIDBITSNUMBER
(
VÆidNumbî
));

297 
HASH
->
STR
 &~(
HASH_STR_NBW
);

298 
HASH
->
STR
 |
VÆidNumbî
;

299 
	}
}

306 
	$HASH_D©aIn
(
uöt32_t
 
D©a
)

309 
HASH
->
DIN
 = 
D©a
;

310 
	}
}

317 
uöt8_t
 
	$HASH_GëInFIFOW‹dsNbr
()

320  ((
HASH
->
CR
 & 
HASH_CR_NBW
) >> 8);

321 
	}
}

335 
	$HASH_GëDige°
(
HASH_MsgDige°
* 
HASH_MesßgeDige°
)

338 
HASH_MesßgeDige°
->
D©a
[0] = 
HASH
->
HR
[0];

339 
HASH_MesßgeDige°
->
D©a
[1] = 
HASH
->
HR
[1];

340 
HASH_MesßgeDige°
->
D©a
[2] = 
HASH
->
HR
[2];

341 
HASH_MesßgeDige°
->
D©a
[3] = 
HASH
->
HR
[3];

342 
HASH_MesßgeDige°
->
D©a
[4] = 
HASH
->
HR
[4];

343 
HASH_MesßgeDige°
->
D©a
[5] = 
HASH_DIGEST
->
HR
[5];

344 
HASH_MesßgeDige°
->
D©a
[6] = 
HASH_DIGEST
->
HR
[6];

345 
HASH_MesßgeDige°
->
D©a
[7] = 
HASH_DIGEST
->
HR
[7];

346 
	}
}

353 
	$HASH_SèπDige°
()

356 
HASH
->
STR
 |
HASH_STR_DCAL
;

357 
	}
}

396 
	$HASH_SaveC⁄ãxt
(
HASH_C⁄ãxt
* 
HASH_C⁄ãxtSave
)

398 
uöt8_t
 
i
 = 0;

401 
HASH_C⁄ãxtSave
->
HASH_IMR
 = 
HASH
->
IMR
;

402 
HASH_C⁄ãxtSave
->
HASH_STR
 = 
HASH
->
STR
;

403 
HASH_C⁄ãxtSave
->
HASH_CR
 = 
HASH
->
CR
;

404 
i
=0; i<=53;i++)

406 
HASH_C⁄ãxtSave
->
HASH_CSR
[
i
] = 
HASH
->
CSR
[i];

408 
	}
}

418 
	$HASH_Re°‹eC⁄ãxt
(
HASH_C⁄ãxt
* 
HASH_C⁄ãxtRe°‹e
)

420 
uöt8_t
 
i
 = 0;

423 
HASH
->
IMR
 = 
HASH_C⁄ãxtRe°‹e
->
HASH_IMR
;

424 
HASH
->
STR
 = 
HASH_C⁄ãxtRe°‹e
->
HASH_STR
;

425 
HASH
->
CR
 = 
HASH_C⁄ãxtRe°‹e
->
HASH_CR
;

428 
HASH
->
CR
 |
HASH_CR_INIT
;

431 
i
=0; i<=53;i++)

433 
HASH
->
CSR
[
i
] = 
HASH_C⁄ãxtRe°‹e
->
HASH_CSR
[i];

435 
	}
}

465 
	$HASH_AutoSèπDige°
(
Fun˘i⁄ÆSèã
 
NewSèã
)

468 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

470 i‡(
NewSèã
 !
DISABLE
)

473 
HASH
->
CR
 &~
HASH_CR_MDMAT
;

478 
HASH
->
CR
 |
HASH_CR_MDMAT
;

480 
	}
}

489 
	$HASH_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

492 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

494 i‡(
NewSèã
 !
DISABLE
)

497 
HASH
->
CR
 |
HASH_CR_DMAE
;

502 
HASH
->
CR
 &~
HASH_CR_DMAE
;

504 
	}
}

581 
	$HASH_ITC⁄fig
(
uöt32_t
 
HASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

584 
	`as£π_∑øm
(
	`IS_HASH_IT
(
HASH_IT
));

585 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

587 i‡(
NewSèã
 !
DISABLE
)

590 
HASH
->
IMR
 |
HASH_IT
;

595 
HASH
->
IMR
 &(
uöt32_t
)(~
HASH_IT
);

597 
	}
}

610 
FœgSètus
 
	$HASH_GëFœgSètus
(
uöt32_t
 
HASH_FLAG
)

612 
FœgSètus
 
bô°©us
 = 
RESET
;

613 
uöt32_t
 
ãm¥eg
 = 0;

616 
	`as£π_∑øm
(
	`IS_HASH_GET_FLAG
(
HASH_FLAG
));

619 i‡((
HASH_FLAG
 & 
HASH_FLAG_DINNE
Ë!(
uöt32_t
)
RESET
 )

621 
ãm¥eg
 = 
HASH
->
CR
;

625 
ãm¥eg
 = 
HASH
->
SR
;

629 i‡((
ãm¥eg
 & 
HASH_FLAG
Ë!(
uöt32_t
)
RESET
)

632 
bô°©us
 = 
SET
;

637 
bô°©us
 = 
RESET
;

641  
bô°©us
;

642 
	}
}

651 
	$HASH_CÀ¨Fœg
(
uöt32_t
 
HASH_FLAG
)

654 
	`as£π_∑øm
(
	`IS_HASH_CLEAR_FLAG
(
HASH_FLAG
));

657 
HASH
->
SR
 = ~(
uöt32_t
)
HASH_FLAG
;

658 
	}
}

667 
ITSètus
 
	$HASH_GëITSètus
(
uöt32_t
 
HASH_IT
)

669 
ITSètus
 
bô°©us
 = 
RESET
;

670 
uöt32_t
 
tm¥eg
 = 0;

673 
	`as£π_∑øm
(
	`IS_HASH_GET_IT
(
HASH_IT
));

677 
tm¥eg
 = 
HASH
->
SR
;

679 i‡(((
HASH
->
IMR
 & 
tm¥eg
Ë& 
HASH_IT
Ë!
RESET
)

682 
bô°©us
 = 
SET
;

687 
bô°©us
 = 
RESET
;

690  
bô°©us
;

691 
	}
}

701 
	$HASH_CÀ¨ITPídögBô
(
uöt32_t
 
HASH_IT
)

704 
	`as£π_∑øm
(
	`IS_HASH_IT
(
HASH_IT
));

707 
HASH
->
SR
 = (
uöt32_t
)(~
HASH_IT
);

708 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c

47 
	~"°m32f4xx_hash.h
"

60 
	#MD5BUSY_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

93 
Eº‹Sètus
 
	$HASH_MD5
(
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
, uöt8_à
Ouçut
[16])

95 
HASH_InôTy≥Def
 
MD5_HASH_InôSåu˘uª
;

96 
HASH_MsgDige°
 
MD5_MesßgeDige°
;

97 
__IO
 
uöt16_t
 
nbvÆidbôsd©a
 = 0;

98 
uöt32_t
 
i
 = 0;

99 
__IO
 
uöt32_t
 
cou¡î
 = 0;

100 
uöt32_t
 
busy°©us
 = 0;

101 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

102 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

103 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

107 
nbvÆidbôsd©a
 = 8 * (
IÀn
 % 4);

110 
	`HASH_DeInô
();

113 
MD5_HASH_InôSåu˘uª
.
HASH_AlgoSñe˘i⁄
 = 
HASH_AlgoSñe˘i⁄_MD5
;

114 
MD5_HASH_InôSåu˘uª
.
HASH_AlgoMode
 = 
HASH_AlgoMode_HASH
;

115 
MD5_HASH_InôSåu˘uª
.
HASH_D©aTy≥
 = 
HASH_D©aTy≥_8b
;

116 
	`HASH_Inô
(&
MD5_HASH_InôSåu˘uª
);

119 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôsd©a
);

122 
i
=0; i<
IÀn
; i+=4)

124 
	`HASH_D©aIn
(*(
uöt32_t
*)
öpuèddr
);

125 
öpuèddr
+=4;

129 
	`HASH_SèπDige°
();

134 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

135 
cou¡î
++;

136 }(
cou¡î
 !
MD5BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

138 i‡(
busy°©us
 !
RESET
)

140 
°©us
 = 
ERROR
;

145 
	`HASH_GëDige°
(&
MD5_MesßgeDige°
);

146 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[0]);

147 
ouçuèddr
+=4;

148 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[1]);

149 
ouçuèddr
+=4;

150 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[2]);

151 
ouçuèddr
+=4;

152 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[3]);

154  
°©us
;

155 
	}
}

168 
Eº‹Sètus
 
	$HMAC_MD5
(
uöt8_t
 *
Key
, 
uöt32_t
 
KeyÀn
, uöt8_à*
I≈ut
,

169 
uöt32_t
 
IÀn
, 
uöt8_t
 
Ouçut
[16])

171 
HASH_InôTy≥Def
 
MD5_HASH_InôSåu˘uª
;

172 
HASH_MsgDige°
 
MD5_MesßgeDige°
;

173 
__IO
 
uöt16_t
 
nbvÆidbôsd©a
 = 0;

174 
__IO
 
uöt16_t
 
nbvÆidbôskey
 = 0;

175 
uöt32_t
 
i
 = 0;

176 
__IO
 
uöt32_t
 
cou¡î
 = 0;

177 
uöt32_t
 
busy°©us
 = 0;

178 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

179 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

180 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

181 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

184 
nbvÆidbôsd©a
 = 8 * (
IÀn
 % 4);

187 
nbvÆidbôskey
 = 8 * (
KeyÀn
 % 4);

190 
	`HASH_DeInô
();

193 
MD5_HASH_InôSåu˘uª
.
HASH_AlgoSñe˘i⁄
 = 
HASH_AlgoSñe˘i⁄_MD5
;

194 
MD5_HASH_InôSåu˘uª
.
HASH_AlgoMode
 = 
HASH_AlgoMode_HMAC
;

195 
MD5_HASH_InôSåu˘uª
.
HASH_D©aTy≥
 = 
HASH_D©aTy≥_8b
;

196 if(
KeyÀn
 > 64)

199 
MD5_HASH_InôSåu˘uª
.
HASH_HMACKeyTy≥
 = 
HASH_HMACKeyTy≥_L⁄gKey
;

204 
MD5_HASH_InôSåu˘uª
.
HASH_HMACKeyTy≥
 = 
HASH_HMACKeyTy≥_Sh‹tKey
;

206 
	`HASH_Inô
(&
MD5_HASH_InôSåu˘uª
);

209 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôskey
);

212 
i
=0; i<
KeyÀn
; i+=4)

214 
	`HASH_D©aIn
(*(
uöt32_t
*)
keyaddr
);

215 
keyaddr
+=4;

219 
	`HASH_SèπDige°
();

224 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

225 
cou¡î
++;

226 }(
cou¡î
 !
MD5BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

228 i‡(
busy°©us
 !
RESET
)

230 
°©us
 = 
ERROR
;

235 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôsd©a
);

238 
i
=0; i<
IÀn
; i+=4)

240 
	`HASH_D©aIn
(*(
uöt32_t
*)
öpuèddr
);

241 
öpuèddr
+=4;

245 
	`HASH_SèπDige°
();

248 
cou¡î
 =0;

251 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

252 
cou¡î
++;

253 }(
cou¡î
 !
MD5BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

255 i‡(
busy°©us
 !
RESET
)

257 
°©us
 = 
ERROR
;

262 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôskey
);

265 
keyaddr
 = (
uöt32_t
)
Key
;

266 
i
=0; i<
KeyÀn
; i+=4)

268 
	`HASH_D©aIn
(*(
uöt32_t
*)
keyaddr
);

269 
keyaddr
+=4;

273 
	`HASH_SèπDige°
();

276 
cou¡î
 =0;

279 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

280 
cou¡î
++;

281 }(
cou¡î
 !
MD5BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

283 i‡(
busy°©us
 !
RESET
)

285 
°©us
 = 
ERROR
;

290 
	`HASH_GëDige°
(&
MD5_MesßgeDige°
);

291 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[0]);

292 
ouçuèddr
+=4;

293 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[1]);

294 
ouçuèddr
+=4;

295 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[2]);

296 
ouçuèddr
+=4;

297 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[3]);

301  
°©us
;

302 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c

47 
	~"°m32f4xx_hash.h
"

60 
	#SHA1BUSY_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

93 
Eº‹Sètus
 
	$HASH_SHA1
(
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
, uöt8_à
Ouçut
[20])

95 
HASH_InôTy≥Def
 
SHA1_HASH_InôSåu˘uª
;

96 
HASH_MsgDige°
 
SHA1_MesßgeDige°
;

97 
__IO
 
uöt16_t
 
nbvÆidbôsd©a
 = 0;

98 
uöt32_t
 
i
 = 0;

99 
__IO
 
uöt32_t
 
cou¡î
 = 0;

100 
uöt32_t
 
busy°©us
 = 0;

101 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

102 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

103 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

106 
nbvÆidbôsd©a
 = 8 * (
IÀn
 % 4);

109 
	`HASH_DeInô
();

112 
SHA1_HASH_InôSåu˘uª
.
HASH_AlgoSñe˘i⁄
 = 
HASH_AlgoSñe˘i⁄_SHA1
;

113 
SHA1_HASH_InôSåu˘uª
.
HASH_AlgoMode
 = 
HASH_AlgoMode_HASH
;

114 
SHA1_HASH_InôSåu˘uª
.
HASH_D©aTy≥
 = 
HASH_D©aTy≥_8b
;

115 
	`HASH_Inô
(&
SHA1_HASH_InôSåu˘uª
);

118 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôsd©a
);

121 
i
=0; i<
IÀn
; i+=4)

123 
	`HASH_D©aIn
(*(
uöt32_t
*)
öpuèddr
);

124 
öpuèddr
+=4;

128 
	`HASH_SèπDige°
();

133 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

134 
cou¡î
++;

135 }(
cou¡î
 !
SHA1BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

137 i‡(
busy°©us
 !
RESET
)

139 
°©us
 = 
ERROR
;

144 
	`HASH_GëDige°
(&
SHA1_MesßgeDige°
);

145 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[0]);

146 
ouçuèddr
+=4;

147 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[1]);

148 
ouçuèddr
+=4;

149 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[2]);

150 
ouçuèddr
+=4;

151 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[3]);

152 
ouçuèddr
+=4;

153 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[4]);

155  
°©us
;

156 
	}
}

169 
Eº‹Sètus
 
	$HMAC_SHA1
(
uöt8_t
 *
Key
, 
uöt32_t
 
KeyÀn
, uöt8_à*
I≈ut
,

170 
uöt32_t
 
IÀn
, 
uöt8_t
 
Ouçut
[20])

172 
HASH_InôTy≥Def
 
SHA1_HASH_InôSåu˘uª
;

173 
HASH_MsgDige°
 
SHA1_MesßgeDige°
;

174 
__IO
 
uöt16_t
 
nbvÆidbôsd©a
 = 0;

175 
__IO
 
uöt16_t
 
nbvÆidbôskey
 = 0;

176 
uöt32_t
 
i
 = 0;

177 
__IO
 
uöt32_t
 
cou¡î
 = 0;

178 
uöt32_t
 
busy°©us
 = 0;

179 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

180 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

181 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

182 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

185 
nbvÆidbôsd©a
 = 8 * (
IÀn
 % 4);

188 
nbvÆidbôskey
 = 8 * (
KeyÀn
 % 4);

191 
	`HASH_DeInô
();

194 
SHA1_HASH_InôSåu˘uª
.
HASH_AlgoSñe˘i⁄
 = 
HASH_AlgoSñe˘i⁄_SHA1
;

195 
SHA1_HASH_InôSåu˘uª
.
HASH_AlgoMode
 = 
HASH_AlgoMode_HMAC
;

196 
SHA1_HASH_InôSåu˘uª
.
HASH_D©aTy≥
 = 
HASH_D©aTy≥_8b
;

197 if(
KeyÀn
 > 64)

200 
SHA1_HASH_InôSåu˘uª
.
HASH_HMACKeyTy≥
 = 
HASH_HMACKeyTy≥_L⁄gKey
;

205 
SHA1_HASH_InôSåu˘uª
.
HASH_HMACKeyTy≥
 = 
HASH_HMACKeyTy≥_Sh‹tKey
;

207 
	`HASH_Inô
(&
SHA1_HASH_InôSåu˘uª
);

210 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôskey
);

213 
i
=0; i<
KeyÀn
; i+=4)

215 
	`HASH_D©aIn
(*(
uöt32_t
*)
keyaddr
);

216 
keyaddr
+=4;

220 
	`HASH_SèπDige°
();

225 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

226 
cou¡î
++;

227 }(
cou¡î
 !
SHA1BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

229 i‡(
busy°©us
 !
RESET
)

231 
°©us
 = 
ERROR
;

236 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôsd©a
);

239 
i
=0; i<
IÀn
; i+=4)

241 
	`HASH_D©aIn
(*(
uöt32_t
*)
öpuèddr
);

242 
öpuèddr
+=4;

246 
	`HASH_SèπDige°
();

250 
cou¡î
 =0;

253 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

254 
cou¡î
++;

255 }(
cou¡î
 !
SHA1BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

257 i‡(
busy°©us
 !
RESET
)

259 
°©us
 = 
ERROR
;

264 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôskey
);

267 
keyaddr
 = (
uöt32_t
)
Key
;

268 
i
=0; i<
KeyÀn
; i+=4)

270 
	`HASH_D©aIn
(*(
uöt32_t
*)
keyaddr
);

271 
keyaddr
+=4;

275 
	`HASH_SèπDige°
();

278 
cou¡î
 =0;

281 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

282 
cou¡î
++;

283 }(
cou¡î
 !
SHA1BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

285 i‡(
busy°©us
 !
RESET
)

287 
°©us
 = 
ERROR
;

292 
	`HASH_GëDige°
(&
SHA1_MesßgeDige°
);

293 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[0]);

294 
ouçuèddr
+=4;

295 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[1]);

296 
ouçuèddr
+=4;

297 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[2]);

298 
ouçuèddr
+=4;

299 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[3]);

300 
ouçuèddr
+=4;

301 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[4]);

305  
°©us
;

306 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c

92 
	~"°m32f4xx_i2c.h
"

93 
	~"°m32f4xx_rcc.h
"

107 
	#CR1_CLEAR_MASK
 ((
uöt16_t
)0xFBF5Ë

	)

108 
	#FLAG_MASK
 ((
uöt32_t
)0x00FFFFFFË

	)

109 
	#ITEN_MASK
 ((
uöt32_t
)0x07000000Ë

	)

137 
	$I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
)

140 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

142 i‡(
I2Cx
 =
I2C1
)

145 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
ENABLE
);

147 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
DISABLE
);

149 i‡(
I2Cx
 =
I2C2
)

152 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
ENABLE
);

154 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
DISABLE
);

158 i‡(
I2Cx
 =
I2C3
)

161 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C3
, 
ENABLE
);

163 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C3
, 
DISABLE
);

166 
	}
}

180 
	$I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

182 
uöt16_t
 
tm¥eg
 = 0, 
‰eqønge
 = 0;

183 
uöt16_t
 
ªsu…
 = 0x04;

184 
uöt32_t
 
p˛k1
 = 8000000;

185 
RCC_ClocksTy≥Def
 
rcc_˛ocks
;

187 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

188 
	`as£π_∑øm
(
	`IS_I2C_CLOCK_SPEED
(
I2C_InôSåu˘
->
I2C_ClockS≥ed
));

189 
	`as£π_∑øm
(
	`IS_I2C_MODE
(
I2C_InôSåu˘
->
I2C_Mode
));

190 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_InôSåu˘
->
I2C_DutyCy˛e
));

191 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS1
(
I2C_InôSåu˘
->
I2C_OwnAddªss1
));

192 
	`as£π_∑øm
(
	`IS_I2C_ACK_STATE
(
I2C_InôSåu˘
->
I2C_Ack
));

193 
	`as£π_∑øm
(
	`IS_I2C_ACKNOWLEDGE_ADDRESS
(
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
));

197 
tm¥eg
 = 
I2Cx
->
CR2
;

199 
tm¥eg
 &(
uöt16_t
)~((uöt16_t)
I2C_CR2_FREQ
);

201 
	`RCC_GëClocksFªq
(&
rcc_˛ocks
);

202 
p˛k1
 = 
rcc_˛ocks
.
PCLK1_Fªquícy
;

204 
‰eqønge
 = (
uöt16_t
)(
p˛k1
 / 1000000);

205 
tm¥eg
 |
‰eqønge
;

207 
I2Cx
->
CR2
 = 
tm¥eg
;

211 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_PE
);

214 
tm¥eg
 = 0;

217 i‡(
I2C_InôSåu˘
->
I2C_ClockS≥ed
 <= 100000)

220 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 << 1));

222 i‡(
ªsu…
 < 0x04)

225 
ªsu…
 = 0x04;

228 
tm¥eg
 |
ªsu…
;

230 
I2Cx
->
TRISE
 = 
‰eqønge
 + 1;

237 i‡(
I2C_InôSåu˘
->
I2C_DutyCy˛e
 =
I2C_DutyCy˛e_2
)

240 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 3));

245 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 25));

247 
ªsu…
 |
I2C_DutyCy˛e_16_9
;

251 i‡((
ªsu…
 & 
I2C_CCR_CCR
) == 0)

254 
ªsu…
 |(
uöt16_t
)0x0001;

257 
tm¥eg
 |(
uöt16_t
)(
ªsu…
 | 
I2C_CCR_FS
);

259 
I2Cx
->
TRISE
 = (
uöt16_t
)(((
‰eqønge
 * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);

263 
I2Cx
->
CCR
 = 
tm¥eg
;

265 
I2Cx
->
CR1
 |
I2C_CR1_PE
;

269 
tm¥eg
 = 
I2Cx
->
CR1
;

271 
tm¥eg
 &
CR1_CLEAR_MASK
;

275 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
I2C_InôSåu˘
->
I2C_Mode
 | I2C_InôSåu˘->
I2C_Ack
);

277 
I2Cx
->
CR1
 = 
tm¥eg
;

281 
I2Cx
->
OAR1
 = (
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 | I2C_InôSåu˘->
I2C_OwnAddªss1
);

282 
	}
}

289 
	$I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

293 
I2C_InôSåu˘
->
I2C_ClockS≥ed
 = 5000;

295 
I2C_InôSåu˘
->
I2C_Mode
 = 
I2C_Mode_I2C
;

297 
I2C_InôSåu˘
->
I2C_DutyCy˛e
 = 
I2C_DutyCy˛e_2
;

299 
I2C_InôSåu˘
->
I2C_OwnAddªss1
 = 0;

301 
I2C_InôSåu˘
->
I2C_Ack
 = 
I2C_Ack_DißbÀ
;

303 
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 = 
I2C_AcknowÀdgedAddªss_7bô
;

304 
	}
}

313 
	$I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

316 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

317 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

318 i‡(
NewSèã
 !
DISABLE
)

321 
I2Cx
->
CR1
 |
I2C_CR1_PE
;

326 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_PE
);

328 
	}
}

342 
	$I2C_A«logFûãrCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

345 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

346 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

347 i‡(
NewSèã
 !
DISABLE
)

350 
I2Cx
->
FLTR
 &(
uöt16_t
)~((uöt16_t)
I2C_FLTR_ANOFF
);

355 
I2Cx
->
FLTR
 |
I2C_FLTR_ANOFF
;

357 
	}
}

371 
	$I2C_DigôÆFûãrC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DigôÆFûãr
)

373 
uöt16_t
 
tm¥eg
 = 0;

376 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

377 
	`as£π_∑øm
(
	`IS_I2C_DIGITAL_FILTER
(
I2C_DigôÆFûãr
));

380 
tm¥eg
 = 
I2Cx
->
FLTR
;

383 
tm¥eg
 &(
uöt16_t
)~((uöt16_t)
I2C_FLTR_DNF
);

386 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
I2C_DigôÆFûãr
 & 
I2C_FLTR_DNF
);

389 
I2Cx
->
FLTR
 = 
tm¥eg
;

390 
	}
}

399 
	$I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

402 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

403 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

404 i‡(
NewSèã
 !
DISABLE
)

407 
I2Cx
->
CR1
 |
I2C_CR1_START
;

412 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_START
);

414 
	}
}

423 
	$I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

426 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

427 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

428 i‡(
NewSèã
 !
DISABLE
)

431 
I2Cx
->
CR1
 |
I2C_CR1_STOP
;

436 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_STOP
);

438 
	}
}

451 
	$I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
)

454 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

455 
	`as£π_∑øm
(
	`IS_I2C_DIRECTION
(
I2C_Dúe˘i⁄
));

457 i‡(
I2C_Dúe˘i⁄
 !
I2C_Dúe˘i⁄_Tønsmôãr
)

460 
Addªss
 |
I2C_OAR1_ADD0
;

465 
Addªss
 &(
uöt8_t
)~((uöt8_t)
I2C_OAR1_ADD0
);

468 
I2Cx
->
DR
 = 
Addªss
;

469 
	}
}

478 
	$I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

481 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

482 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

483 i‡(
NewSèã
 !
DISABLE
)

486 
I2Cx
->
CR1
 |
I2C_CR1_ACK
;

491 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_ACK
);

493 
	}
}

501 
	$I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
)

503 
uöt16_t
 
tm¥eg
 = 0;

506 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

509 
tm¥eg
 = 
I2Cx
->
OAR2
;

512 
tm¥eg
 &(
uöt16_t
)~((uöt16_t)
I2C_OAR2_ADD2
);

515 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
Addªss
 & (uint16_t)0x00FE);

518 
I2Cx
->
OAR2
 = 
tm¥eg
;

519 
	}
}

528 
	$I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

531 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

532 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

533 i‡(
NewSèã
 !
DISABLE
)

536 
I2Cx
->
OAR2
 |
I2C_OAR2_ENDUAL
;

541 
I2Cx
->
OAR2
 &(
uöt16_t
)~((uöt16_t)
I2C_OAR2_ENDUAL
);

543 
	}
}

552 
	$I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

555 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

556 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

557 i‡(
NewSèã
 !
DISABLE
)

560 
I2Cx
->
CR1
 |
I2C_CR1_ENGC
;

565 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_ENGC
);

567 
	}
}

578 
	$I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

581 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

582 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

583 i‡(
NewSèã
 !
DISABLE
)

586 
I2Cx
->
CR1
 |
I2C_CR1_SWRST
;

591 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_SWRST
);

593 
	}
}

602 
	$I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

605 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

606 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

607 i‡(
NewSèã
 =
DISABLE
)

610 
I2Cx
->
CR1
 |
I2C_CR1_NOSTRETCH
;

615 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_NOSTRETCH
);

617 
	}
}

628 
	$I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
)

631 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

632 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_DutyCy˛e
));

633 i‡(
I2C_DutyCy˛e
 !
I2C_DutyCy˛e_16_9
)

636 
I2Cx
->
CCR
 &
I2C_DutyCy˛e_2
;

641 
I2Cx
->
CCR
 |
I2C_DutyCy˛e_16_9
;

643 
	}
}

666 
	$I2C_NACKPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_NACKPosôi⁄
)

669 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

670 
	`as£π_∑øm
(
	`IS_I2C_NACK_POSITION
(
I2C_NACKPosôi⁄
));

673 i‡(
I2C_NACKPosôi⁄
 =
I2C_NACKPosôi⁄_Next
)

676 
I2Cx
->
CR1
 |
I2C_NACKPosôi⁄_Next
;

681 
I2Cx
->
CR1
 &
I2C_NACKPosôi⁄_Cuºít
;

683 
	}
}

694 
	$I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
)

697 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

698 
	`as£π_∑øm
(
	`IS_I2C_SMBUS_ALERT
(
I2C_SMBusAÀπ
));

699 i‡(
I2C_SMBusAÀπ
 =
I2C_SMBusAÀπ_Low
)

702 
I2Cx
->
CR1
 |
I2C_SMBusAÀπ_Low
;

707 
I2Cx
->
CR1
 &
I2C_SMBusAÀπ_High
;

709 
	}
}

718 
	$I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

721 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

722 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

723 i‡(
NewSèã
 !
DISABLE
)

726 
I2Cx
->
CR1
 |
I2C_CR1_ENARP
;

731 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_ENARP
);

733 
	}
}

756 
	$I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
)

759 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

761 
I2Cx
->
DR
 = 
D©a
;

762 
	}
}

769 
uöt8_t
 
	$I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
)

772 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

774  (
uöt8_t
)
I2Cx
->
DR
;

775 
	}
}

800 
	$I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

803 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

804 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

805 i‡(
NewSèã
 !
DISABLE
)

808 
I2Cx
->
CR1
 |
I2C_CR1_PEC
;

813 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_PEC
);

815 
	}
}

831 
	$I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
)

834 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

835 
	`as£π_∑øm
(
	`IS_I2C_PEC_POSITION
(
I2C_PECPosôi⁄
));

836 i‡(
I2C_PECPosôi⁄
 =
I2C_PECPosôi⁄_Next
)

839 
I2Cx
->
CR1
 |
I2C_PECPosôi⁄_Next
;

844 
I2Cx
->
CR1
 &
I2C_PECPosôi⁄_Cuºít
;

846 
	}
}

855 
	$I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

858 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

859 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

860 i‡(
NewSèã
 !
DISABLE
)

863 
I2Cx
->
CR1
 |
I2C_CR1_ENPEC
;

868 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_ENPEC
);

870 
	}
}

877 
uöt8_t
 
	$I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
)

880 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

882  ((
I2Cx
->
SR2
) >> 8);

883 
	}
}

910 
	$I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

913 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

914 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

915 i‡(
NewSèã
 !
DISABLE
)

918 
I2Cx
->
CR2
 |
I2C_CR2_DMAEN
;

923 
I2Cx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
I2C_CR2_DMAEN
);

925 
	}
}

934 
	$I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

937 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

938 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

939 i‡(
NewSèã
 !
DISABLE
)

942 
I2Cx
->
CR2
 |
I2C_CR2_LAST
;

947 
I2Cx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
I2C_CR2_LAST
);

949 
	}
}

1072 
uöt16_t
 
	$I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
)

1074 
__IO
 
uöt32_t
 
tmp
 = 0;

1077 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1078 
	`as£π_∑øm
(
	`IS_I2C_REGISTER
(
I2C_Regi°î
));

1080 
tmp
 = (
uöt32_t
Ë
I2Cx
;

1081 
tmp
 +
I2C_Regi°î
;

1084  (*(
__IO
 
uöt16_t
 *Ë
tmp
);

1085 
	}
}

1099 
	$I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1102 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1103 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1104 
	`as£π_∑øm
(
	`IS_I2C_CONFIG_IT
(
I2C_IT
));

1106 i‡(
NewSèã
 !
DISABLE
)

1109 
I2Cx
->
CR2
 |
I2C_IT
;

1114 
I2Cx
->
CR2
 &(
uöt16_t
)~
I2C_IT
;

1116 
	}
}

1158 
Eº‹Sètus
 
	$I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
)

1160 
uöt32_t
 
œ°evít
 = 0;

1161 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

1162 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1165 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1166 
	`as£π_∑øm
(
	`IS_I2C_EVENT
(
I2C_EVENT
));

1169 
Êag1
 = 
I2Cx
->
SR1
;

1170 
Êag2
 = 
I2Cx
->
SR2
;

1171 
Êag2
 = flag2 << 16;

1174 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_MASK
;

1177 i‡((
œ°evít
 & 
I2C_EVENT
) == I2C_EVENT)

1180 
°©us
 = 
SUCCESS
;

1185 
°©us
 = 
ERROR
;

1188  
°©us
;

1189 
	}
}

1206 
uöt32_t
 
	$I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
)

1208 
uöt32_t
 
œ°evít
 = 0;

1209 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

1212 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1215 
Êag1
 = 
I2Cx
->
SR1
;

1216 
Êag2
 = 
I2Cx
->
SR2
;

1217 
Êag2
 = flag2 << 16;

1220 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_MASK
;

1223  
œ°evít
;

1224 
	}
}

1261 
FœgSètus
 
	$I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1263 
FœgSètus
 
bô°©us
 = 
RESET
;

1264 
__IO
 
uöt32_t
 
i2¸eg
 = 0, 
i2cxba£
 = 0;

1267 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1268 
	`as£π_∑øm
(
	`IS_I2C_GET_FLAG
(
I2C_FLAG
));

1271 
i2cxba£
 = (
uöt32_t
)
I2Cx
;

1274 
i2¸eg
 = 
I2C_FLAG
 >> 28;

1277 
I2C_FLAG
 &
FLAG_MASK
;

1279 if(
i2¸eg
 != 0)

1282 
i2cxba£
 += 0x14;

1287 
I2C_FLAG
 = (
uöt32_t
)(I2C_FLAG >> 16);

1289 
i2cxba£
 += 0x18;

1292 if(((*(
__IO
 
uöt32_t
 *)
i2cxba£
Ë& 
I2C_FLAG
Ë!(uöt32_t)
RESET
)

1295 
bô°©us
 = 
SET
;

1300 
bô°©us
 = 
RESET
;

1304  
bô°©us
;

1305 
	}
}

1338 
	$I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1340 
uöt32_t
 
Êagpos
 = 0;

1342 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1343 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_FLAG
(
I2C_FLAG
));

1345 
Êagpos
 = 
I2C_FLAG
 & 
FLAG_MASK
;

1347 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1348 
	}
}

1372 
ITSètus
 
	$I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1374 
ITSètus
 
bô°©us
 = 
RESET
;

1375 
uöt32_t
 
íabÀ°©us
 = 0;

1378 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1379 
	`as£π_∑øm
(
	`IS_I2C_GET_IT
(
I2C_IT
));

1382 
íabÀ°©us
 = (
uöt32_t
)(((
I2C_IT
 & 
ITEN_MASK
Ë>> 16Ë& (
I2Cx
->
CR2
)) ;

1385 
I2C_IT
 &
FLAG_MASK
;

1388 i‡(((
I2Cx
->
SR1
 & 
I2C_IT
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1391 
bô°©us
 = 
SET
;

1396 
bô°©us
 = 
RESET
;

1399  
bô°©us
;

1400 
	}
}

1432 
	$I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1434 
uöt32_t
 
Êagpos
 = 0;

1436 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1437 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_IT
(
I2C_IT
));

1440 
Êagpos
 = 
I2C_IT
 & 
FLAG_MASK
;

1443 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1444 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_iwdg.c

85 
	~"°m32f4xx_iwdg.h
"

100 
	#KR_KEY_RELOAD
 ((
uöt16_t
)0xAAAA)

	)

101 
	#KR_KEY_ENABLE
 ((
uöt16_t
)0xCCCC)

	)

132 
	$IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
)

135 
	`as£π_∑øm
(
	`IS_IWDG_WRITE_ACCESS
(
IWDG_WrôeAc˚ss
));

136 
IWDG
->
KR
 = 
IWDG_WrôeAc˚ss
;

137 
	}
}

152 
	$IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
)

155 
	`as£π_∑øm
(
	`IS_IWDG_PRESCALER
(
IWDG_PªsˇÀr
));

156 
IWDG
->
PR
 = 
IWDG_PªsˇÀr
;

157 
	}
}

165 
	$IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
)

168 
	`as£π_∑øm
(
	`IS_IWDG_RELOAD
(
Rñﬂd
));

169 
IWDG
->
RLR
 = 
Rñﬂd
;

170 
	}
}

178 
	$IWDG_RñﬂdCou¡î
()

180 
IWDG
->
KR
 = 
KR_KEY_RELOAD
;

181 
	}
}

204 
	$IWDG_E«bÀ
()

206 
IWDG
->
KR
 = 
KR_KEY_ENABLE
;

207 
	}
}

233 
FœgSètus
 
	$IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
)

235 
FœgSètus
 
bô°©us
 = 
RESET
;

237 
	`as£π_∑øm
(
	`IS_IWDG_FLAG
(
IWDG_FLAG
));

238 i‡((
IWDG
->
SR
 & 
IWDG_FLAG
Ë!(
uöt32_t
)
RESET
)

240 
bô°©us
 = 
SET
;

244 
bô°©us
 = 
RESET
;

247  
bô°©us
;

248 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_ltdc.c

76 
	~"°m32f4xx_…dc.h
"

77 
	~"°m32f4xx_rcc.h
"

95 
	#GCR_MASK
 ((
uöt32_t
)0x0FFE888FË

	)

129 
	$LTDC_DeInô
()

132 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_LTDC
, 
ENABLE
);

134 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_LTDC
, 
DISABLE
);

135 
	}
}

146 
	$LTDC_Inô
(
LTDC_InôTy≥Def
* 
LTDC_InôSåu˘
)

148 
uöt32_t
 
h‹iz⁄èlsync
 = 0;

149 
uöt32_t
 
accumuœãdHBP
 = 0;

150 
uöt32_t
 
accumuœãda˘iveW
 = 0;

151 
uöt32_t
 
tŸÆwidth
 = 0;

152 
uöt32_t
 
backgªí
 = 0;

153 
uöt32_t
 
backªd
 = 0;

156 
	`as£π_∑øm
(
	`IS_LTDC_HSYNC
(
LTDC_InôSåu˘
->
LTDC_H‹iz⁄èlSync
));

157 
	`as£π_∑øm
(
	`IS_LTDC_VSYNC
(
LTDC_InôSåu˘
->
LTDC_VîtiˇlSync
));

158 
	`as£π_∑øm
(
	`IS_LTDC_AHBP
(
LTDC_InôSåu˘
->
LTDC_AccumuœãdHBP
));

159 
	`as£π_∑øm
(
	`IS_LTDC_AVBP
(
LTDC_InôSåu˘
->
LTDC_AccumuœãdVBP
));

160 
	`as£π_∑øm
(
	`IS_LTDC_AAH
(
LTDC_InôSåu˘
->
LTDC_AccumuœãdA˘iveH
));

161 
	`as£π_∑øm
(
	`IS_LTDC_AAW
(
LTDC_InôSåu˘
->
LTDC_AccumuœãdA˘iveW
));

162 
	`as£π_∑øm
(
	`IS_LTDC_TOTALH
(
LTDC_InôSåu˘
->
LTDC_TŸÆHeigh
));

163 
	`as£π_∑øm
(
	`IS_LTDC_TOTALW
(
LTDC_InôSåu˘
->
LTDC_TŸÆWidth
));

164 
	`as£π_∑øm
(
	`IS_LTDC_HSPOL
(
LTDC_InôSåu˘
->
LTDC_HSPﬁ¨ôy
));

165 
	`as£π_∑øm
(
	`IS_LTDC_VSPOL
(
LTDC_InôSåu˘
->
LTDC_VSPﬁ¨ôy
));

166 
	`as£π_∑øm
(
	`IS_LTDC_DEPOL
(
LTDC_InôSåu˘
->
LTDC_DEPﬁ¨ôy
));

167 
	`as£π_∑øm
(
	`IS_LTDC_PCPOL
(
LTDC_InôSåu˘
->
LTDC_PCPﬁ¨ôy
));

168 
	`as£π_∑øm
(
	`IS_LTDC_BackBlueVÆue
(
LTDC_InôSåu˘
->
LTDC_BackgroundBlueVÆue
));

169 
	`as£π_∑øm
(
	`IS_LTDC_BackGªíVÆue
(
LTDC_InôSåu˘
->
LTDC_BackgroundGªíVÆue
));

170 
	`as£π_∑øm
(
	`IS_LTDC_BackRedVÆue
(
LTDC_InôSåu˘
->
LTDC_BackgroundRedVÆue
));

173 
LTDC
->
SSCR
 &~(
LTDC_SSCR_VSH
 | 
LTDC_SSCR_HSW
);

174 
h‹iz⁄èlsync
 = (
LTDC_InôSåu˘
->
LTDC_H‹iz⁄èlSync
 << 16);

175 
LTDC
->
SSCR
 |(
h‹iz⁄èlsync
 | 
LTDC_InôSåu˘
->
LTDC_VîtiˇlSync
);

178 
LTDC
->
BPCR
 &~(
LTDC_BPCR_AVBP
 | 
LTDC_BPCR_AHBP
);

179 
accumuœãdHBP
 = (
LTDC_InôSåu˘
->
LTDC_AccumuœãdHBP
 << 16);

180 
LTDC
->
BPCR
 |(
accumuœãdHBP
 | 
LTDC_InôSåu˘
->
LTDC_AccumuœãdVBP
);

183 
LTDC
->
AWCR
 &~(
LTDC_AWCR_AAH
 | 
LTDC_AWCR_AAW
);

184 
accumuœãda˘iveW
 = (
LTDC_InôSåu˘
->
LTDC_AccumuœãdA˘iveW
 << 16);

185 
LTDC
->
AWCR
 |(
accumuœãda˘iveW
 | 
LTDC_InôSåu˘
->
LTDC_AccumuœãdA˘iveH
);

188 
LTDC
->
TWCR
 &~(
LTDC_TWCR_TOTALH
 | 
LTDC_TWCR_TOTALW
);

189 
tŸÆwidth
 = (
LTDC_InôSåu˘
->
LTDC_TŸÆWidth
 << 16);

190 
LTDC
->
TWCR
 |(
tŸÆwidth
 | 
LTDC_InôSåu˘
->
LTDC_TŸÆHeigh
);

192 
LTDC
->
GCR
 &(
uöt32_t
)
GCR_MASK
;

193 
LTDC
->
GCR
 |(
uöt32_t
)(
LTDC_InôSåu˘
->
LTDC_HSPﬁ¨ôy
 | LTDC_InôSåu˘->
LTDC_VSPﬁ¨ôy
 | \

194 
LTDC_InôSåu˘
->
LTDC_DEPﬁ¨ôy
 | LTDC_InôSåu˘->
LTDC_PCPﬁ¨ôy
);

197 
backgªí
 = (
LTDC_InôSåu˘
->
LTDC_BackgroundGªíVÆue
 << 8);

198 
backªd
 = (
LTDC_InôSåu˘
->
LTDC_BackgroundRedVÆue
 << 16);

200 
LTDC
->
BCCR
 &~(
LTDC_BCCR_BCBLUE
 | 
LTDC_BCCR_BCGREEN
 | 
LTDC_BCCR_BCRED
);

201 
LTDC
->
BCCR
 |(
backªd
 | 
backgªí
 | 
LTDC_InôSåu˘
->
LTDC_BackgroundBlueVÆue
);

202 
	}
}

211 
	$LTDC_Såu˘Inô
(
LTDC_InôTy≥Def
* 
LTDC_InôSåu˘
)

214 
LTDC_InôSåu˘
->
LTDC_HSPﬁ¨ôy
 = 
LTDC_HSPﬁ¨ôy_AL
;

215 
LTDC_InôSåu˘
->
LTDC_VSPﬁ¨ôy
 = 
LTDC_VSPﬁ¨ôy_AL
;

216 
LTDC_InôSåu˘
->
LTDC_DEPﬁ¨ôy
 = 
LTDC_DEPﬁ¨ôy_AL
;

217 
LTDC_InôSåu˘
->
LTDC_PCPﬁ¨ôy
 = 
LTDC_PCPﬁ¨ôy_IPC
;

218 
LTDC_InôSåu˘
->
LTDC_H‹iz⁄èlSync
 = 0x00;

219 
LTDC_InôSåu˘
->
LTDC_VîtiˇlSync
 = 0x00;

220 
LTDC_InôSåu˘
->
LTDC_AccumuœãdHBP
 = 0x00;

221 
LTDC_InôSåu˘
->
LTDC_AccumuœãdVBP
 = 0x00;

222 
LTDC_InôSåu˘
->
LTDC_AccumuœãdA˘iveW
 = 0x00;

223 
LTDC_InôSåu˘
->
LTDC_AccumuœãdA˘iveH
 = 0x00;

224 
LTDC_InôSåu˘
->
LTDC_TŸÆWidth
 = 0x00;

225 
LTDC_InôSåu˘
->
LTDC_TŸÆHeigh
 = 0x00;

226 
LTDC_InôSåu˘
->
LTDC_BackgroundRedVÆue
 = 0x00;

227 
LTDC_InôSåu˘
->
LTDC_BackgroundGªíVÆue
 = 0x00;

228 
LTDC_InôSåu˘
->
LTDC_BackgroundBlueVÆue
 = 0x00;

229 
	}
}

238 
	$LTDC_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

241 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

243 i‡(
NewSèã
 !
DISABLE
)

246 
LTDC
->
GCR
 |(
uöt32_t
)
LTDC_GCR_LTDCEN
;

251 
LTDC
->
GCR
 &~(
uöt32_t
)
LTDC_GCR_LTDCEN
;

253 
	}
}

262 
	$LTDC_DôhîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

265 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

267 i‡(
NewSèã
 !
DISABLE
)

270 
LTDC
->
GCR
 |(
uöt32_t
)
LTDC_GCR_DTEN
;

275 
LTDC
->
GCR
 &~(
uöt32_t
)
LTDC_GCR_DTEN
;

277 
	}
}

286 
LTDC_RGBTy≥Def
 
	$LTDC_GëRGBWidth
()

288 
LTDC_RGBTy≥Def
 
LTDC_RGB_InôSåu˘
;

290 
LTDC
->
GCR
 &(
uöt32_t
)
GCR_MASK
;

292 
LTDC_RGB_InôSåu˘
.
LTDC_BlueWidth
 = (
uöt32_t
)((
LTDC
->
GCR
 >> 4) & 0x7);

293 
LTDC_RGB_InôSåu˘
.
LTDC_GªíWidth
 = (
uöt32_t
)((
LTDC
->
GCR
 >> 8) & 0x7);

294 
LTDC_RGB_InôSåu˘
.
LTDC_RedWidth
 = (
uöt32_t
)((
LTDC
->
GCR
 >> 12) & 0x7);

296  
LTDC_RGB_InôSåu˘
;

297 
	}
}

306 
	$LTDC_RGBSåu˘Inô
(
LTDC_RGBTy≥Def
* 
LTDC_RGB_InôSåu˘
)

308 
LTDC_RGB_InôSåu˘
->
LTDC_BlueWidth
 = 0x02;

309 
LTDC_RGB_InôSåu˘
->
LTDC_GªíWidth
 = 0x02;

310 
LTDC_RGB_InôSåu˘
->
LTDC_RedWidth
 = 0x02;

311 
	}
}

320 
	$LTDC_LIPC⁄fig
(
uöt32_t
 
LTDC_LIPosôi⁄C⁄fig
)

323 
	`as£π_∑øm
(
	`IS_LTDC_LIPOS
(
LTDC_LIPosôi⁄C⁄fig
));

326 
LTDC
->
LIPCR
 = (
uöt32_t
)
LTDC_LIPosôi⁄C⁄fig
;

327 
	}
}

338 
	$LTDC_RñﬂdC⁄fig
(
uöt32_t
 
LTDC_Rñﬂd
)

341 
	`as£π_∑øm
(
	`IS_LTDC_RELOAD
(
LTDC_Rñﬂd
));

344 
LTDC
->
SRCR
 = (
uöt32_t
)
LTDC_Rñﬂd
;

345 
	}
}

359 
	$LTDC_LayîInô
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
LTDC_Layî_InôTy≥Def
* 
LTDC_Layî_InôSåu˘
)

362 
uöt32_t
 
wh•pos
 = 0;

363 
uöt32_t
 
wv•pos
 = 0;

364 
uöt32_t
 
dcgªí
 = 0;

365 
uöt32_t
 
d¸ed
 = 0;

366 
uöt32_t
 
dˇÕha
 = 0;

367 
uöt32_t
 
cfbp
 = 0;

370 
	`as£π_∑øm
(
	`IS_LTDC_Pixñf‹m©
(
LTDC_Layî_InôSåu˘
->
LTDC_PixñF‹m©
));

371 
	`as£π_∑øm
(
	`IS_LTDC_BÀndögFa˘‹1
(
LTDC_Layî_InôSåu˘
->
LTDC_BÀndögFa˘‹_1
));

372 
	`as£π_∑øm
(
	`IS_LTDC_BÀndögFa˘‹2
(
LTDC_Layî_InôSåu˘
->
LTDC_BÀndögFa˘‹_2
));

373 
	`as£π_∑øm
(
	`IS_LTDC_HCONFIGST
(
LTDC_Layî_InôSåu˘
->
LTDC_H‹iz⁄èlSèπ
));

374 
	`as£π_∑øm
(
	`IS_LTDC_HCONFIGSP
(
LTDC_Layî_InôSåu˘
->
LTDC_H‹iz⁄èlSt›
));

375 
	`as£π_∑øm
(
	`IS_LTDC_VCONFIGST
(
LTDC_Layî_InôSåu˘
->
LTDC_VîtiˇlSèπ
));

376 
	`as£π_∑øm
(
	`IS_LTDC_VCONFIGSP
(
LTDC_Layî_InôSåu˘
->
LTDC_VîtiˇlSt›
));

377 
	`as£π_∑øm
(
	`IS_LTDC_DEFAULTCOLOR
(
LTDC_Layî_InôSåu˘
->
LTDC_DeÁu…Cﬁ‹Blue
));

378 
	`as£π_∑øm
(
	`IS_LTDC_DEFAULTCOLOR
(
LTDC_Layî_InôSåu˘
->
LTDC_DeÁu…Cﬁ‹Gªí
));

379 
	`as£π_∑øm
(
	`IS_LTDC_DEFAULTCOLOR
(
LTDC_Layî_InôSåu˘
->
LTDC_DeÁu…Cﬁ‹Red
));

380 
	`as£π_∑øm
(
	`IS_LTDC_DEFAULTCOLOR
(
LTDC_Layî_InôSåu˘
->
LTDC_DeÁu…Cﬁ‹AÕha
));

381 
	`as£π_∑øm
(
	`IS_LTDC_CFBP
(
LTDC_Layî_InôSåu˘
->
LTDC_CFBPôch
));

382 
	`as£π_∑øm
(
	`IS_LTDC_CFBLL
(
LTDC_Layî_InôSåu˘
->
LTDC_CFBLöeLígth
));

383 
	`as£π_∑øm
(
	`IS_LTDC_CFBLNBR
(
LTDC_Layî_InôSåu˘
->
LTDC_CFBLöeNumbî
));

386 
wh•pos
 = 
LTDC_Layî_InôSåu˘
->
LTDC_H‹iz⁄èlSt›
 << 16;

387 
LTDC_Layîx
->
WHPCR
 &~(
LTDC_LxWHPCR_WHSTPOS
 | 
LTDC_LxWHPCR_WHSPPOS
);

388 
LTDC_Layîx
->
WHPCR
 = (
LTDC_Layî_InôSåu˘
->
LTDC_H‹iz⁄èlSèπ
 | 
wh•pos
);

391 
wv•pos
 = 
LTDC_Layî_InôSåu˘
->
LTDC_VîtiˇlSt›
 << 16;

392 
LTDC_Layîx
->
WVPCR
 &~(
LTDC_LxWVPCR_WVSTPOS
 | 
LTDC_LxWVPCR_WVSPPOS
);

393 
LTDC_Layîx
->
WVPCR
 = (
LTDC_Layî_InôSåu˘
->
LTDC_VîtiˇlSèπ
 | 
wv•pos
);

396 
LTDC_Layîx
->
PFCR
 &~(
LTDC_LxPFCR_PF
);

397 
LTDC_Layîx
->
PFCR
 = (
LTDC_Layî_InôSåu˘
->
LTDC_PixñF‹m©
);

400 
dcgªí
 = (
LTDC_Layî_InôSåu˘
->
LTDC_DeÁu…Cﬁ‹Gªí
 << 8);

401 
d¸ed
 = (
LTDC_Layî_InôSåu˘
->
LTDC_DeÁu…Cﬁ‹Red
 << 16);

402 
dˇÕha
 = (
LTDC_Layî_InôSåu˘
->
LTDC_DeÁu…Cﬁ‹AÕha
 << 24);

403 
LTDC_Layîx
->
DCCR
 &~(
LTDC_LxDCCR_DCBLUE
 | 
LTDC_LxDCCR_DCGREEN
 | 
LTDC_LxDCCR_DCRED
 | 
LTDC_LxDCCR_DCALPHA
);

404 
LTDC_Layîx
->
DCCR
 = (
LTDC_Layî_InôSåu˘
->
LTDC_DeÁu…Cﬁ‹Blue
 | 
dcgªí
 | \

405 
d¸ed
 | 
dˇÕha
);

408 
LTDC_Layîx
->
CACR
 &~(
LTDC_LxCACR_CONSTA
);

409 
LTDC_Layîx
->
CACR
 = (
LTDC_Layî_InôSåu˘
->
LTDC_C⁄°™tAÕha
);

412 
LTDC_Layîx
->
BFCR
 &~(
LTDC_LxBFCR_BF2
 | 
LTDC_LxBFCR_BF1
);

413 
LTDC_Layîx
->
BFCR
 = (
LTDC_Layî_InôSåu˘
->
LTDC_BÀndögFa˘‹_1
 | LTDC_Layî_InôSåu˘->
LTDC_BÀndögFa˘‹_2
);

416 
LTDC_Layîx
->
CFBAR
 &~(
LTDC_LxCFBAR_CFBADD
);

417 
LTDC_Layîx
->
CFBAR
 = (
LTDC_Layî_InôSåu˘
->
LTDC_CFBSèπAdªss
);

420 
cfbp
 = (
LTDC_Layî_InôSåu˘
->
LTDC_CFBPôch
 << 16);

421 
LTDC_Layîx
->
CFBLR
 &~(
LTDC_LxCFBLR_CFBLL
 | 
LTDC_LxCFBLR_CFBP
);

422 
LTDC_Layîx
->
CFBLR
 = (
LTDC_Layî_InôSåu˘
->
LTDC_CFBLöeLígth
 | 
cfbp
);

425 
LTDC_Layîx
->
CFBLNR
 &~(
LTDC_LxCFBLNR_CFBLNBR
);

426 
LTDC_Layîx
->
CFBLNR
 = (
LTDC_Layî_InôSåu˘
->
LTDC_CFBLöeNumbî
);

428 
	}
}

437 
	$LTDC_LayîSåu˘Inô
(
LTDC_Layî_InôTy≥Def
 * 
LTDC_Layî_InôSåu˘
)

442 
LTDC_Layî_InôSåu˘
->
LTDC_H‹iz⁄èlSèπ
 = 0x00;

443 
LTDC_Layî_InôSåu˘
->
LTDC_H‹iz⁄èlSt›
 = 0x00;

446 
LTDC_Layî_InôSåu˘
->
LTDC_VîtiˇlSèπ
 = 0x00;

447 
LTDC_Layî_InôSåu˘
->
LTDC_VîtiˇlSt›
 = 0x00;

450 
LTDC_Layî_InôSåu˘
->
LTDC_PixñF‹m©
 = 
LTDC_Pixñf‹m©_ARGB8888
;

453 
LTDC_Layî_InôSåu˘
->
LTDC_C⁄°™tAÕha
 = 0xFF;

456 
LTDC_Layî_InôSåu˘
->
LTDC_DeÁu…Cﬁ‹Blue
 = 0x00;

457 
LTDC_Layî_InôSåu˘
->
LTDC_DeÁu…Cﬁ‹Gªí
 = 0x00;

458 
LTDC_Layî_InôSåu˘
->
LTDC_DeÁu…Cﬁ‹Red
 = 0x00;

459 
LTDC_Layî_InôSåu˘
->
LTDC_DeÁu…Cﬁ‹AÕha
 = 0x00;

462 
LTDC_Layî_InôSåu˘
->
LTDC_BÀndögFa˘‹_1
 = 
LTDC_BÀndögFa˘‹1_PAxCA
;

463 
LTDC_Layî_InôSåu˘
->
LTDC_BÀndögFa˘‹_2
 = 
LTDC_BÀndögFa˘‹2_PAxCA
;

466 
LTDC_Layî_InôSåu˘
->
LTDC_CFBSèπAdªss
 = 0x00;

469 
LTDC_Layî_InôSåu˘
->
LTDC_CFBLöeLígth
 = 0x00;

470 
LTDC_Layî_InôSåu˘
->
LTDC_CFBPôch
 = 0x00;

473 
LTDC_Layî_InôSåu˘
->
LTDC_CFBLöeNumbî
 = 0x00;

474 
	}
}

486 
	$LTDC_LayîCmd
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

489 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

491 i‡(
NewSèã
 !
DISABLE
)

494 
LTDC_Layîx
->
CR
 |(
uöt32_t
)
LTDC_LxCR_LEN
;

499 
LTDC_Layîx
->
CR
 &~(
uöt32_t
)
LTDC_LxCR_LEN
;

501 
	}
}

511 
LTDC_PosTy≥Def
 
	$LTDC_GëPosSètus
()

513 
LTDC_PosTy≥Def
 
LTDC_Pos_InôSåu˘
;

515 
LTDC
->
CPSR
 &~(
LTDC_CPSR_CYPOS
 | 
LTDC_CPSR_CXPOS
);

517 
LTDC_Pos_InôSåu˘
.
LTDC_POSX
 = (
uöt32_t
)(
LTDC
->
CPSR
 >> 16);

518 
LTDC_Pos_InôSåu˘
.
LTDC_POSY
 = (
uöt32_t
)(
LTDC
->
CPSR
 & 0xFFFF);

520  
LTDC_Pos_InôSåu˘
;

521 
	}
}

530 
	$LTDC_PosSåu˘Inô
(
LTDC_PosTy≥Def
* 
LTDC_Pos_InôSåu˘
)

532 
LTDC_Pos_InôSåu˘
->
LTDC_POSX
 = 0x00;

533 
LTDC_Pos_InôSåu˘
->
LTDC_POSY
 = 0x00;

534 
	}
}

547 
FœgSètus
 
	$LTDC_GëCDSètus
(
uöt32_t
 
LTDC_CD
)

549 
FœgSètus
 
bô°©us
;

552 
	`as£π_∑øm
(
	`IS_LTDC_GET_CD
(
LTDC_CD
));

554 i‡((
LTDC
->
CDSR
 & 
LTDC_CD
Ë!(
uöt32_t
)
RESET
)

556 
bô°©us
 = 
SET
;

560 
bô°©us
 = 
RESET
;

562  
bô°©us
;

563 
	}
}

574 
	$LTDC_Cﬁ‹KeyögC⁄fig
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
LTDC_Cﬁ‹Keyög_InôTy≥Def
* 
LTDC_cﬁ‹keyög_InôSåu˘
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

576 
uöt32_t
 
ckgªí
 = 0;

577 
uöt32_t
 
ckªd
 = 0;

580 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

581 
	`as£π_∑øm
(
	`IS_LTDC_CKEYING
(
LTDC_cﬁ‹keyög_InôSåu˘
->
LTDC_Cﬁ‹KeyBlue
));

582 
	`as£π_∑øm
(
	`IS_LTDC_CKEYING
(
LTDC_cﬁ‹keyög_InôSåu˘
->
LTDC_Cﬁ‹KeyGªí
));

583 
	`as£π_∑øm
(
	`IS_LTDC_CKEYING
(
LTDC_cﬁ‹keyög_InôSåu˘
->
LTDC_Cﬁ‹KeyRed
));

585 i‡(
NewSèã
 !
DISABLE
)

588 
LTDC_Layîx
->
CR
 |(
uöt32_t
)
LTDC_LxCR_COLKEN
;

591 
ckgªí
 = (
LTDC_cﬁ‹keyög_InôSåu˘
->
LTDC_Cﬁ‹KeyGªí
 << 8);

592 
ckªd
 = (
LTDC_cﬁ‹keyög_InôSåu˘
->
LTDC_Cﬁ‹KeyRed
 << 16);

593 
LTDC_Layîx
->
CKCR
 &~(
LTDC_LxCKCR_CKBLUE
 | 
LTDC_LxCKCR_CKGREEN
 | 
LTDC_LxCKCR_CKRED
);

594 
LTDC_Layîx
->
CKCR
 |(
LTDC_cﬁ‹keyög_InôSåu˘
->
LTDC_Cﬁ‹KeyBlue
 | 
ckgªí
 | 
ckªd
);

599 
LTDC_Layîx
->
CR
 &~(
uöt32_t
)
LTDC_LxCR_COLKEN
;

603 
LTDC
->
SRCR
 = 
LTDC_IMRñﬂd
;

604 
	}
}

613 
	$LTDC_Cﬁ‹KeyögSåu˘Inô
(
LTDC_Cﬁ‹Keyög_InôTy≥Def
* 
LTDC_cﬁ‹keyög_InôSåu˘
)

616 
LTDC_cﬁ‹keyög_InôSåu˘
->
LTDC_Cﬁ‹KeyBlue
 = 0x00;

617 
LTDC_cﬁ‹keyög_InôSåu˘
->
LTDC_Cﬁ‹KeyGªí
 = 0x00;

618 
LTDC_cﬁ‹keyög_InôSåu˘
->
LTDC_Cﬁ‹KeyRed
 = 0x00;

619 
	}
}

631 
	$LTDC_CLUTCmd
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

634 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

636 i‡(
NewSèã
 !
DISABLE
)

639 
LTDC_Layîx
->
CR
 |(
uöt32_t
)
LTDC_LxCR_CLUTEN
;

644 
LTDC_Layîx
->
CR
 &~(
uöt32_t
)
LTDC_LxCR_CLUTEN
;

648 
LTDC
->
SRCR
 = 
LTDC_IMRñﬂd
;

649 
	}
}

660 
	$LTDC_CLUTInô
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
LTDC_CLUT_InôTy≥Def
* 
LTDC_CLUT_InôSåu˘
)

662 
uöt32_t
 
gªí
 = 0;

663 
uöt32_t
 
ªd
 = 0;

664 
uöt32_t
 
˛uèdd
 = 0;

667 
	`as£π_∑øm
(
	`IS_LTDC_CLUTWR
(
LTDC_CLUT_InôSåu˘
->
LTDC_CLUTAdªss
));

668 
	`as£π_∑øm
(
	`IS_LTDC_CLUTWR
(
LTDC_CLUT_InôSåu˘
->
LTDC_RedVÆue
));

669 
	`as£π_∑øm
(
	`IS_LTDC_CLUTWR
(
LTDC_CLUT_InôSåu˘
->
LTDC_GªíVÆue
));

670 
	`as£π_∑øm
(
	`IS_LTDC_CLUTWR
(
LTDC_CLUT_InôSåu˘
->
LTDC_BlueVÆue
));

673 
gªí
 = (
LTDC_CLUT_InôSåu˘
->
LTDC_GªíVÆue
 << 8);

674 
ªd
 = (
LTDC_CLUT_InôSåu˘
->
LTDC_RedVÆue
 << 16);

675 
˛uèdd
 = (
LTDC_CLUT_InôSåu˘
->
LTDC_CLUTAdªss
 << 24);

676 
LTDC_Layîx
->
CLUTWR
 = (
˛uèdd
 | 
LTDC_CLUT_InôSåu˘
->
LTDC_BlueVÆue
 | \

677 
gªí
 | 
ªd
);

678 
	}
}

687 
	$LTDC_CLUTSåu˘Inô
(
LTDC_CLUT_InôTy≥Def
* 
LTDC_CLUT_InôSåu˘
)

690 
LTDC_CLUT_InôSåu˘
->
LTDC_CLUTAdªss
 = 0x00;

691 
LTDC_CLUT_InôSåu˘
->
LTDC_BlueVÆue
 = 0x00;

692 
LTDC_CLUT_InôSåu˘
->
LTDC_GªíVÆue
 = 0x00;

693 
LTDC_CLUT_InôSåu˘
->
LTDC_RedVÆue
 = 0x00;

694 
	}
}

707 
	$LTDC_LayîPosôi⁄
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
uöt16_t
 
Off£tX
, uöt16_à
Off£tY
)

710 
uöt32_t
 
ãm¥eg
, 
ãmp
;

711 
uöt32_t
 
h‹iz⁄èl_°¨t
;

712 
uöt32_t
 
h‹iz⁄èl_°›
;

713 
uöt32_t
 
vîtiˇl_°¨t
;

714 
uöt32_t
 
vîtiˇl_°›
;

716 
LTDC_Layîx
->
WHPCR
 &~(
LTDC_LxWHPCR_WHSTPOS
 | 
LTDC_LxWHPCR_WHSPPOS
);

717 
LTDC_Layîx
->
WVPCR
 &~(
LTDC_LxWVPCR_WVSTPOS
 | 
LTDC_LxWVPCR_WVSPPOS
);

720 
ãm¥eg
 = 
LTDC
->
BPCR
;

721 
h‹iz⁄èl_°¨t
 = (
ãm¥eg
 >> 16Ë+ 1 + 
Off£tX
;

722 
vîtiˇl_°¨t
 = (
ãm¥eg
 & 0xFFFFË+ 1 + 
Off£tY
;

727 
ãm¥eg
 = 
LTDC_Layîx
->
PFCR
;

729 i‡(
ãm¥eg
 =
LTDC_Pixñf‹m©_ARGB8888
)

731 
ãmp
 = 4;

733 i‡(
ãm¥eg
 =
LTDC_Pixñf‹m©_RGB888
)

735 
ãmp
 = 3;

737 i‡((
ãm¥eg
 =
LTDC_Pixñf‹m©_ARGB4444
) ||

738 (
ãm¥eg
 =
LTDC_Pixñf‹m©_RGB565
) ||

739 (
ãm¥eg
 =
LTDC_Pixñf‹m©_ARGB1555
) ||

740 (
ãm¥eg
 =
LTDC_Pixñf‹m©_AL88
))

742 
ãmp
 = 2;

746 
ãmp
 = 1;

749 
ãm¥eg
 = 
LTDC_Layîx
->
CFBLR
;

750 
h‹iz⁄èl_°›
 = (((
ãm¥eg
 & 0x1FFFË- 3)/
ãmp
Ë+ 
h‹iz⁄èl_°¨t
 - 1;

752 
ãm¥eg
 = 
LTDC_Layîx
->
CFBLNR
;

753 
vîtiˇl_°›
 = (
ãm¥eg
 & 0x7FFË+ 
vîtiˇl_°¨t
 - 1;

755 
LTDC_Layîx
->
WHPCR
 = 
h‹iz⁄èl_°¨t
 | (
h‹iz⁄èl_°›
 << 16);

756 
LTDC_Layîx
->
WVPCR
 = 
vîtiˇl_°¨t
 | (
vîtiˇl_°›
 << 16);

757 
	}
}

768 
	$LTDC_LayîAÕha
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
uöt8_t
 
C⁄°™tAÕha
)

771 
LTDC_Layîx
->
CACR
 = 
C⁄°™tAÕha
;

772 
	}
}

783 
	$LTDC_LayîAddªss
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
uöt32_t
 
Addªss
)

786 
LTDC_Layîx
->
CFBAR
 = 
Addªss
;

787 
	}
}

799 
	$LTDC_LayîSize
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
uöt32_t
 
Width
, uöt32_à
Height
)

802 
uöt8_t
 
ãmp
;

803 
uöt32_t
 
ãm¥eg
;

804 
uöt32_t
 
h‹iz⁄èl_°¨t
;

805 
uöt32_t
 
h‹iz⁄èl_°›
;

806 
uöt32_t
 
vîtiˇl_°¨t
;

807 
uöt32_t
 
vîtiˇl_°›
;

809 
ãm¥eg
 = 
LTDC_Layîx
->
PFCR
;

811 i‡(
ãm¥eg
 =
LTDC_Pixñf‹m©_ARGB8888
)

813 
ãmp
 = 4;

815 i‡(
ãm¥eg
 =
LTDC_Pixñf‹m©_RGB888
)

817 
ãmp
 = 3;

819 i‡((
ãm¥eg
 =
LTDC_Pixñf‹m©_ARGB4444
) || \

820 (
ãm¥eg
 =
LTDC_Pixñf‹m©_RGB565
) || \

821 (
ãm¥eg
 =
LTDC_Pixñf‹m©_ARGB1555
) || \

822 (
ãm¥eg
 =
LTDC_Pixñf‹m©_AL88
))

824 
ãmp
 = 2;

828 
ãmp
 = 1;

832 
ãm¥eg
 = 
LTDC_Layîx
->
WHPCR
;

833 
h‹iz⁄èl_°¨t
 = (
ãm¥eg
 & 0x1FFF);

834 
h‹iz⁄èl_°›
 = 
Width
 + 
h‹iz⁄èl_°¨t
 - 1;

836 
ãm¥eg
 = 
LTDC_Layîx
->
WVPCR
;

837 
vîtiˇl_°¨t
 = (
ãm¥eg
 & 0x1FFF);

838 
vîtiˇl_°›
 = 
Height
 + 
vîtiˇl_°¨t
 - 1;

840 
LTDC_Layîx
->
WHPCR
 = 
h‹iz⁄èl_°¨t
 | (
h‹iz⁄èl_°›
 << 16);

841 
LTDC_Layîx
->
WVPCR
 = 
vîtiˇl_°¨t
 | (
vîtiˇl_°›
 << 16);

844 
LTDC_Layîx
->
CFBLR
 = ((
Width
 * 
ãmp
) << 16) | ((Width *Åemp) + 3);

847 
LTDC_Layîx
->
CFBLNR
 = 
Height
;

849 
	}
}

861 
	$LTDC_LayîPixñF‹m©
(
LTDC_Layî_Ty≥Def
* 
LTDC_Layîx
, 
uöt32_t
 
PixñF‹m©
)

864 
uöt8_t
 
ãmp
;

865 
uöt32_t
 
ãm¥eg
;

867 
ãm¥eg
 = 
LTDC_Layîx
->
PFCR
;

869 i‡(
ãm¥eg
 =
LTDC_Pixñf‹m©_ARGB8888
)

871 
ãmp
 = 4;

873 i‡(
ãm¥eg
 =
LTDC_Pixñf‹m©_RGB888
)

875 
ãmp
 = 3;

877 i‡((
ãm¥eg
 =
LTDC_Pixñf‹m©_ARGB4444
) || \

878 (
ãm¥eg
 =
LTDC_Pixñf‹m©_RGB565
) || \

879 (
ãm¥eg
 =
LTDC_Pixñf‹m©_ARGB1555
) || \

880 (
ãm¥eg
 =
LTDC_Pixñf‹m©_AL88
))

882 
ãmp
 = 2;

886 
ãmp
 = 1;

889 
ãm¥eg
 = (
LTDC_Layîx
->
CFBLR
 >> 16);

890 
ãm¥eg
 = (ãm¥eg / 
ãmp
);

892 i‡(
PixñF‹m©
 =
LTDC_Pixñf‹m©_ARGB8888
)

894 
ãmp
 = 4;

896 i‡(
PixñF‹m©
 =
LTDC_Pixñf‹m©_RGB888
)

898 
ãmp
 = 3;

900 i‡((
PixñF‹m©
 =
LTDC_Pixñf‹m©_ARGB4444
) || \

901 (
PixñF‹m©
 =
LTDC_Pixñf‹m©_RGB565
) || \

902 (
PixñF‹m©
 =
LTDC_Pixñf‹m©_ARGB1555
) || \

903 (
PixñF‹m©
 =
LTDC_Pixñf‹m©_AL88
))

905 
ãmp
 = 2;

909 
ãmp
 = 1;

913 
LTDC_Layîx
->
CFBLR
 = ((
ãm¥eg
 * 
ãmp
) << 16) | ((tempreg *Åemp) + 3);

916 
LTDC_Layîx
->
PFCR
 = 
PixñF‹m©
;

918 
	}
}

975 
	$LTDC_ITC⁄fig
(
uöt32_t
 
LTDC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

978 
	`as£π_∑øm
(
	`IS_LTDC_IT
(
LTDC_IT
));

979 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

981 i‡(
NewSèã
 !
DISABLE
)

983 
LTDC
->
IER
 |
LTDC_IT
;

987 
LTDC
->
IER
 &(
uöt32_t
)~
LTDC_IT
;

989 
	}
}

1001 
FœgSètus
 
	$LTDC_GëFœgSètus
(
uöt32_t
 
LTDC_FLAG
)

1003 
FœgSètus
 
bô°©us
 = 
RESET
;

1006 
	`as£π_∑øm
(
	`IS_LTDC_FLAG
(
LTDC_FLAG
));

1008 i‡((
LTDC
->
ISR
 & 
LTDC_FLAG
Ë!(
uöt32_t
)
RESET
)

1010 
bô°©us
 = 
SET
;

1014 
bô°©us
 = 
RESET
;

1016  
bô°©us
;

1017 
	}
}

1029 
	$LTDC_CÀ¨Fœg
(
uöt32_t
 
LTDC_FLAG
)

1032 
	`as£π_∑øm
(
	`IS_LTDC_FLAG
(
LTDC_FLAG
));

1035 
LTDC
->
ICR
 = (
uöt32_t
)
LTDC_FLAG
;

1036 
	}
}

1048 
ITSètus
 
	$LTDC_GëITSètus
(
uöt32_t
 
LTDC_IT
)

1050 
ITSètus
 
bô°©us
 = 
RESET
;

1053 
	`as£π_∑øm
(
	`IS_LTDC_IT
(
LTDC_IT
));

1055 i‡((
LTDC
->
ISR
 & 
LTDC_IT
Ë!(
uöt32_t
)
RESET
)

1057 
bô°©us
 = 
SET
;

1061 
bô°©us
 = 
RESET
;

1064 i‡(((
LTDC
->
IER
 & 
LTDC_IT
Ë!(
uöt32_t
)
RESET
Ë&& (
bô°©us
 != (uint32_t)RESET))

1066 
bô°©us
 = 
SET
;

1070 
bô°©us
 = 
RESET
;

1072  
bô°©us
;

1073 
	}
}

1086 
	$LTDC_CÀ¨ITPídögBô
(
uöt32_t
 
LTDC_IT
)

1089 
	`as£π_∑øm
(
	`IS_LTDC_IT
(
LTDC_IT
));

1092 
LTDC
->
ICR
 = (
uöt32_t
)
LTDC_IT
;

1093 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c

38 
	~"°m32f4xx_pwr.h
"

39 
	~"°m32f4xx_rcc.h
"

53 
	#PWR_OFFSET
 (
PWR_BASE
 - 
PERIPH_BASE
)

	)

58 
	#CR_OFFSET
 (
PWR_OFFSET
 + 0x00)

	)

59 
	#DBP_BôNumbî
 0x08

	)

60 
	#CR_DBP_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
DBP_BôNumbî
 * 4))

	)

63 
	#PVDE_BôNumbî
 0x04

	)

64 
	#CR_PVDE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PVDE_BôNumbî
 * 4))

	)

67 
	#FPDS_BôNumbî
 0x09

	)

68 
	#CR_FPDS_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
FPDS_BôNumbî
 * 4))

	)

71 
	#PMODE_BôNumbî
 0x0E

	)

72 
	#CR_PMODE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PMODE_BôNumbî
 * 4))

	)

75 
	#ODEN_BôNumbî
 0x10

	)

76 
	#CR_ODEN_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
ODEN_BôNumbî
 * 4))

	)

79 
	#ODSWEN_BôNumbî
 0x11

	)

80 
	#CR_ODSWEN_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
ODSWEN_BôNumbî
 * 4))

	)

82 #i‡
deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
)

84 
	#MRUDS_BôNumbî
 0x0B

	)

85 
	#CR_MRUDS_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
MRUDS_BôNumbî
 * 4))

	)

88 
	#LPUDS_BôNumbî
 0x0A

	)

89 
	#CR_LPUDS_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
LPUDS_BôNumbî
 * 4))

	)

92 #i‡
deföed
(
STM32F401xx
Ë|| deföed(
STM32F411xE
)

94 
	#MRLVDS_BôNumbî
 0x0B

	)

95 
	#CR_MRLVDS_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
MRLVDS_BôNumbî
 * 4))

	)

98 
	#LPLVDS_BôNumbî
 0x0A

	)

99 
	#CR_LPLVDS_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
LPLVDS_BôNumbî
 * 4))

	)

103 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F411xE
)

105 
	#CSR_OFFSET
 (
PWR_OFFSET
 + 0x04)

	)

106 
	#EWUP_BôNumbî
 0x08

	)

107 
	#CSR_EWUP_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
EWUP_BôNumbî
 * 4))

	)

110 #i‡
deföed
(
STM32F446xx
)

112 
	#CSR_OFFSET
 (
PWR_OFFSET
 + 0x04)

	)

113 
	#EWUP1_BôNumbî
 0x08

	)

114 
	#CSR_EWUP1_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
EWUP1_BôNumbî
 * 4))

	)

115 
	#EWUP2_BôNumbî
 0x07

	)

116 
	#CSR_EWUP2_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
EWUP2_BôNumbî
 * 4))

	)

120 
	#BRE_BôNumbî
 0x09

	)

121 
	#CSR_BRE_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
BRE_BôNumbî
 * 4))

	)

126 
	#CR_DS_MASK
 ((
uöt32_t
)0xFFFFF3FC)

	)

127 
	#CR_PLS_MASK
 ((
uöt32_t
)0xFFFFFF1F)

	)

128 
	#CR_VOS_MASK
 ((
uöt32_t
)0xFFFF3FFF)

	)

164 
	$PWR_DeInô
()

166 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
ENABLE
);

167 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
DISABLE
);

168 
	}
}

179 
	$PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

182 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

184 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
NewSèã
;

185 
	}
}

227 
	$PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
)

229 
uöt32_t
 
tm¥eg
 = 0;

232 
	`as£π_∑øm
(
	`IS_PWR_PVD_LEVEL
(
PWR_PVDLevñ
));

234 
tm¥eg
 = 
PWR
->
CR
;

237 
tm¥eg
 &
CR_PLS_MASK
;

240 
tm¥eg
 |
PWR_PVDLevñ
;

243 
PWR
->
CR
 = 
tm¥eg
;

244 
	}
}

252 
	$PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

255 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

257 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
NewSèã
;

258 
	}
}

279 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F411xE
)

286 
	$PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

289 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

291 *(
__IO
 
uöt32_t
 *Ë
CSR_EWUP_BB
 = (uöt32_t)
NewSèã
;

292 
	}
}

295 #i‡
deföed
(
STM32F446xx
)

306 
	$PWR_WakeUpPöCmd
(
uöt32_t
 
PWR_WakeUpPöx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

309 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

310 
	`as£π_∑øm
(
	`IS_PWR_WAKEUP_PIN
(
NewSèã
));

311 if(
PWR_WakeUpPöx
 =
PWR_WakeUp_Pö1
)

313 *(
__IO
 
uöt32_t
 *Ë
CSR_EWUP1_BB
 = (uöt32_t)
NewSèã
;

317 *(
__IO
 
uöt32_t
 *Ë
CSR_EWUP2_BB
 = (uöt32_t)
NewSèã
;

319 
	}
}

411 
	$PWR_BackupReguœt‹Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

414 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

416 *(
__IO
 
uöt32_t
 *Ë
CSR_BRE_BB
 = (uöt32_t)
NewSèã
;

417 
	}
}

433 
	$PWR_MaöReguœt‹ModeC⁄fig
(
uöt32_t
 
PWR_Reguœt‹_Vﬁège
)

435 
uöt32_t
 
tm¥eg
 = 0;

438 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR_VOLTAGE
(
PWR_Reguœt‹_Vﬁège
));

440 
tm¥eg
 = 
PWR
->
CR
;

443 
tm¥eg
 &
CR_VOS_MASK
;

446 
tm¥eg
 |
PWR_Reguœt‹_Vﬁège
;

449 
PWR
->
CR
 = 
tm¥eg
;

450 
	}
}

468 
	$PWR_OvîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

471 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

474 *(
__IO
 
uöt32_t
 *Ë
CR_ODEN_BB
 = (uöt32_t)
NewSèã
;

475 
	}
}

486 
	$PWR_OvîDriveSWCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

489 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

492 *(
__IO
 
uöt32_t
 *Ë
CR_ODSWEN_BB
 = (uöt32_t)
NewSèã
;

493 
	}
}

513 
	$PWR_UndîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

516 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

518 i‡(
NewSèã
 !
DISABLE
)

521 
PWR
->
CR
 |(
uöt32_t
)
PWR_CR_UDEN
;

526 
PWR
->
CR
 &(
uöt32_t
)(~
PWR_CR_UDEN
);

528 
	}
}

530 #i‡
deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
)

540 
	$PWR_MaöReguœt‹UndîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

543 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

545 i‡(
NewSèã
 !
DISABLE
)

547 *(
__IO
 
uöt32_t
 *Ë
CR_MRUDS_BB
 = (uöt32_t)
ENABLE
;

551 *(
__IO
 
uöt32_t
 *Ë
CR_MRUDS_BB
 = (uöt32_t)
DISABLE
;

553 
	}
}

564 
	$PWR_LowReguœt‹UndîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

567 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

569 i‡(
NewSèã
 !
DISABLE
)

571 *(
__IO
 
uöt32_t
 *Ë
CR_LPUDS_BB
 = (uöt32_t)
ENABLE
;

575 *(
__IO
 
uöt32_t
 *Ë
CR_LPUDS_BB
 = (uöt32_t)
DISABLE
;

577 
	}
}

580 #i‡
deföed
(
STM32F401xx
Ë|| deföed(
STM32F411xE
)

590 
	$PWR_MaöReguœt‹LowVﬁègeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

593 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

595 i‡(
NewSèã
 !
DISABLE
)

597 *(
__IO
 
uöt32_t
 *Ë
CR_MRLVDS_BB
 = (uöt32_t)
ENABLE
;

601 *(
__IO
 
uöt32_t
 *Ë
CR_MRLVDS_BB
 = (uöt32_t)
DISABLE
;

603 
	}
}

614 
	$PWR_LowReguœt‹LowVﬁègeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

617 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

619 i‡(
NewSèã
 !
DISABLE
)

621 *(
__IO
 
uöt32_t
 *Ë
CR_LPLVDS_BB
 = (uöt32_t)
ENABLE
;

625 *(
__IO
 
uöt32_t
 *Ë
CR_LPLVDS_BB
 = (uöt32_t)
DISABLE
;

627 
	}
}

657 
	$PWR_FœshPowîDownCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

660 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

662 *(
__IO
 
uöt32_t
 *Ë
CR_FPDS_BB
 = (uöt32_t)
NewSèã
;

663 
	}
}

803 
	$PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
)

805 
uöt32_t
 
tm¥eg
 = 0;

808 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
PWR_Reguœt‹
));

809 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
PWR_STOPE¡ry
));

812 
tm¥eg
 = 
PWR
->
CR
;

814 
tm¥eg
 &
CR_DS_MASK
;

817 
tm¥eg
 |
PWR_Reguœt‹
;

820 
PWR
->
CR
 = 
tm¥eg
;

823 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP_Msk
;

826 if(
PWR_STOPE¡ry
 =
PWR_STOPE¡ry_WFI
)

829 
	`__WFI
();

834 
	`__WFE
();

837 
SCB
->
SCR
 &(
uöt32_t
)~((uöt32_t)
SCB_SCR_SLEEPDEEP_Msk
);

838 
	}
}

867 
	$PWR_E¡îUndîDriveSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
)

869 
uöt32_t
 
tm¥eg
 = 0;

872 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR_UNDERDRIVE
(
PWR_Reguœt‹
));

873 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
PWR_STOPE¡ry
));

876 
tm¥eg
 = 
PWR
->
CR
;

878 
tm¥eg
 &
CR_DS_MASK
;

881 
tm¥eg
 |
PWR_Reguœt‹
;

884 
PWR
->
CR
 = 
tm¥eg
;

887 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP_Msk
;

890 if(
PWR_STOPE¡ry
 =
PWR_STOPE¡ry_WFI
)

893 
	`__WFI
();

898 
	`__WFE
();

901 
SCB
->
SCR
 &(
uöt32_t
)~((uöt32_t)
SCB_SCR_SLEEPDEEP_Msk
);

902 
	}
}

916 
	$PWR_E¡îSTANDBYMode
()

919 
PWR
->
CR
 |
PWR_CR_PDDS
;

922 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP_Msk
;

925 #i‡
	`deföed
 ( 
__CC_ARM
 )

926 
	`__f‹˚_°‹es
();

929 
	`__WFI
();

930 
	}
}

976 
FœgSètus
 
	$PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
)

978 
FœgSètus
 
bô°©us
 = 
RESET
;

981 
	`as£π_∑øm
(
	`IS_PWR_GET_FLAG
(
PWR_FLAG
));

983 i‡((
PWR
->
CSR
 & 
PWR_FLAG
Ë!(
uöt32_t
)
RESET
)

985 
bô°©us
 = 
SET
;

989 
bô°©us
 = 
RESET
;

992  
bô°©us
;

993 
	}
}

1004 
	$PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
)

1007 
	`as£π_∑øm
(
	`IS_PWR_CLEAR_FLAG
(
PWR_FLAG
));

1009 #i‡
	`deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

1010 i‡(
PWR_FLAG
 !
PWR_FLAG_UDRDY
)

1012 
PWR
->
CR
 |
PWR_FLAG
 << 2;

1016 
PWR
->
CSR
 |
PWR_FLAG_UDRDY
;

1020 #i‡
	`deföed
 (
STM32F40_41xxx
Ë|| deföed (
STM32F401xx
Ë|| deföed (
STM32F411xE
)

1021 
PWR
->
CR
 |
PWR_FLAG
 << 2;

1023 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_qspi.c

82 
	~"°m32f4xx_q•i.h
"

95 
	#QSPI_CR_CLEAR_MASK
 0x00FFFFCF

	)

96 
	#QSPI_DCR_CLEAR_MASK
 0xFFE0F7FE

	)

97 
	#QSPI_CCR_CLEAR_MASK
 0x90800000

	)

98 
	#QSPI_PIR_CLEAR_MASK
 0xFFFF0000

	)

99 
	#QSPI_LPTR_CLEAR_MASK
 0xFFFF0000

	)

100 
	#QSPI_CCR_CLEAR_INSTRUCTION_MASK
 0xFFFFFF00

	)

101 
	#QSPI_CCR_CLEAR_DCY_MASK
 0xFFC3FFFF

	)

102 
	#QSPI_CR_CLEAR_FIFOTHRESHOLD_MASK
 0xFFFFF0FF

	)

103 
	#QSPI_CR_INTERRUPT_MASK
 0x001F0000

	)

104 
	#QSPI_SR_INTERRUPT_MASK
 0x0000001F

	)

105 
	#QSPI_FSR_INTERRUPT_MASK
 0x0000001B

	)

144 
	$QSPI_DeInô
()

147 
	`RCC_AHB3PîùhRe£tCmd
(
RCC_AHB3Pîùh_QSPI
, 
ENABLE
);

149 
	`RCC_AHB3PîùhRe£tCmd
(
RCC_AHB3Pîùh_QSPI
, 
DISABLE
);

150 
	}
}

157 
	$QSPI_Såu˘Inô
(
QSPI_InôTy≥Def
* 
QSPI_InôSåu˘
)

161 
QSPI_InôSåu˘
->
QSPI_SShi·
 = 
QSPI_SShi·_NoShi·
 ;

163 
QSPI_InôSåu˘
->
QSPI_PªsˇÀr
 = 0 ;

165 
QSPI_InôSåu˘
->
QSPI_CKMode
 = 
QSPI_CKMode_Mode0
 ;

167 
QSPI_InôSåu˘
->
QSPI_CSHTime
 = 
QSPI_CSHTime_1Cy˛e
 ;

169 
QSPI_InôSåu˘
->
QSPI_FSize
 = 0 ;

171 
QSPI_InôSåu˘
->
QSPI_FSñe˘
 = 
QSPI_FSñe˘_1
 ;

173 
QSPI_InôSåu˘
->
QSPI_DFœsh
 = 
QSPI_DFœsh_DißbÀ
 ;

174 
	}
}

181 
	$QSPI_ComC⁄fig_Såu˘Inô
(
QSPI_ComC⁄fig_InôTy≥Def
* 
QSPI_ComC⁄fig_InôSåu˘
)

187 
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_DDRMode
 = 
QSPI_ComC⁄fig_DDRMode_DißbÀ
 ;

189 
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_DHHC
 = 
QSPI_ComC⁄fig_DHHC_DißbÀ
 ;

191 
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_SIOOMode
 = 
QSPI_ComC⁄fig_SIOOMode_DißbÀ
 ;

193 
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_FMode
 = 
QSPI_ComC⁄fig_FMode_Indúe˘_Wrôe
 ;

195 
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_DMode
 = 
QSPI_ComC⁄fig_DMode_NoD©a
 ;

197 
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_DummyCy˛es
 = 0 ;

199 
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_ABSize
 = 
QSPI_ComC⁄fig_ABSize_8bô
 ;

201 
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_ABMode
 = 
QSPI_ComC⁄fig_ABMode_NoA…î«ãByã
 ;

203 
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_ADSize
 = 
QSPI_ComC⁄fig_ADSize_8bô
 ;

205 
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_ADMode
 = 
QSPI_ComC⁄fig_ADMode_NoAddªss
 ;

207 
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_IMode
 = 
QSPI_ComC⁄fig_IMode_NoIn°ru˘i⁄
 ;

209 
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_Ins
 = 0 ;

210 
	}
}

219 
	$QSPI_Inô
(
QSPI_InôTy≥Def
* 
QSPI_InôSåu˘
)

221 
uöt32_t
 
tm¥eg
 = 0;

224 
	`as£π_∑øm
(
	`IS_QSPI_SSHIFT
(
QSPI_InôSåu˘
->
QSPI_SShi·
));

225 
	`as£π_∑øm
(
	`IS_QSPI_PRESCALER
(
QSPI_InôSåu˘
->
QSPI_PªsˇÀr
));

226 
	`as£π_∑øm
(
	`IS_QSPI_CKMODE
(
QSPI_InôSåu˘
->
QSPI_CKMode
));

227 
	`as£π_∑øm
(
	`IS_QSPI_CSHTIME
(
QSPI_InôSåu˘
->
QSPI_CSHTime
));

228 
	`as£π_∑øm
(
	`IS_QSPI_FSIZE
(
QSPI_InôSåu˘
->
QSPI_FSize
));

229 
	`as£π_∑øm
(
	`IS_QSPI_FSEL
(
QSPI_InôSåu˘
->
QSPI_FSñe˘
));

230 
	`as£π_∑øm
(
	`IS_QSPI_DFM
(
QSPI_InôSåu˘
->
QSPI_DFœsh
));

234 
tm¥eg
 = 
QUADSPI
->
CR
;

236 
tm¥eg
 &
QSPI_CR_CLEAR_MASK
;

238 
tm¥eg
 |(
uöt32_t
)(((
QSPI_InôSåu˘
->
QSPI_PªsˇÀr
)<<24)

239 |(
QSPI_InôSåu˘
->
QSPI_SShi·
)

240 |(
QSPI_InôSåu˘
->
QSPI_FSñe˘
)

241 |(
QSPI_InôSåu˘
->
QSPI_DFœsh
));

243 
QUADSPI
->
CR
 = 
tm¥eg
;

247 
tm¥eg
 = 
QUADSPI
->
DCR
;

249 
tm¥eg
 &
QSPI_DCR_CLEAR_MASK
;

251 
tm¥eg
 |(
uöt32_t
)(((
QSPI_InôSåu˘
->
QSPI_FSize
)<<16)

252 |(
QSPI_InôSåu˘
->
QSPI_CSHTime
)

253 |(
QSPI_InôSåu˘
->
QSPI_CKMode
));

255 
QUADSPI
->
DCR
 = 
tm¥eg
;

256 
	}
}

265 
	$QSPI_ComC⁄fig_Inô
(
QSPI_ComC⁄fig_InôTy≥Def
* 
QSPI_ComC⁄fig_InôSåu˘
)

267 
uöt32_t
 
tm¥eg
 = 0;

270 
	`as£π_∑øm
(
	`IS_QSPI_FMODE
 (
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_FMode
));

271 
	`as£π_∑øm
(
	`IS_QSPI_SIOOMODE
 (
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_SIOOMode
));

272 
	`as£π_∑øm
(
	`IS_QSPI_DMODE
 (
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_DMode
));

273 
	`as£π_∑øm
(
	`IS_QSPI_DCY
 (
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_DummyCy˛es
));

274 
	`as£π_∑øm
(
	`IS_QSPI_ABSIZE
 (
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_ABSize
));

275 
	`as£π_∑øm
(
	`IS_QSPI_ABMODE
 (
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_ABMode
));

276 
	`as£π_∑øm
(
	`IS_QSPI_ADSIZE
 (
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_ADSize
));

277 
	`as£π_∑øm
(
	`IS_QSPI_ADMODE
 (
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_ADMode
));

278 
	`as£π_∑øm
(
	`IS_QSPI_IMODE
 (
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_IMode
));

279 
	`as£π_∑øm
(
	`IS_QSPI_INSTRUCTION
 (
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_Ins
));

280 
	`as£π_∑øm
(
	`IS_QSPI_DDRMODE
 (
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_DDRMode
));

281 
	`as£π_∑øm
(
	`IS_QSPI_DHHC
 (
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_DHHC
));

285 
tm¥eg
 = 
QUADSPI
->
CCR
;

287 
tm¥eg
 &
QSPI_CCR_CLEAR_MASK
;

289 
tm¥eg
 |(
uöt32_t
)–(
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_FMode
)

290 | (
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_DDRMode
)

291 | (
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_DHHC
)

292 | (
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_SIOOMode
)

293 | (
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_DMode
)

294 | (
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_ABSize
)

295 | (
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_ABMode
)

296 | (
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_ADSize
)

297 | (
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_ADMode
)

298 | (
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_IMode
)

299 | (
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_Ins
)

300 |((
QSPI_ComC⁄fig_InôSåu˘
->
QSPI_ComC⁄fig_DummyCy˛es
)<<18));

302 
QUADSPI
->
CCR
 = 
tm¥eg
;

303 
	}
}

311 
	$QSPI_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

314 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

316 i‡(
NewSèã
 !
DISABLE
)

319 
QUADSPI
->
CR
 |
QUADSPI_CR_EN
;

324 
QUADSPI
->
CR
 &~ 
QUADSPI_CR_EN
;

326 
	}
}

344 
	$QSPI_AutoPﬁlögMode_C⁄fig
(
uöt32_t
 
QSPI_M©ch
, uöt32_à
QSPI_Mask
 , uöt32_à
QSPI_M©ch_Mode
)

347 
	`as£π_∑øm
(
	`IS_QSPI_PMM
(
QSPI_M©ch_Mode
));

349 i‡(!(
QUADSPI
->
SR
 & 
QUADSPI_SR_BUSY
))

353 
QUADSPI
->
PSMAR
 = 
QSPI_M©ch
 ;

356 
QUADSPI
->
PSMKR
 = 
QSPI_Mask
 ;

359 if(
QSPI_M©ch_Mode
)

363 
QUADSPI
->
CR
 |
QUADSPI_CR_PMM
;

369 
QUADSPI
->
CR
 &~ 
QUADSPI_CR_PMM
;

372 
	}
}

381 
	$QSPI_AutoPﬁlögMode_SëI¡îvÆ
(
uöt32_t
 
QSPI_I¡îvÆ
)

383 
uöt32_t
 
tm¥eg
 = 0;

386 
	`as£π_∑øm
(
	`IS_QSPI_PIR
(
QSPI_I¡îvÆ
));

388 i‡(!(
QUADSPI
->
SR
 & 
QUADSPI_SR_BUSY
))

392 
tm¥eg
 = 
QUADSPI
->
PIR
 ;

394 
tm¥eg
 &
QSPI_PIR_CLEAR_MASK
 ;

396 
tm¥eg
 |
QSPI_I¡îvÆ
;

398 
QUADSPI
->
PIR
 = 
tm¥eg
;

400 
	}
}

411 
	$QSPI_Mem‹yM≠≥dMode_SëTimeout
(
uöt32_t
 
QSPI_Timeout
)

413 
uöt32_t
 
tm¥eg
 = 0;

416 
	`as£π_∑øm
(
	`IS_QSPI_TIMEOUT
(
QSPI_Timeout
));

418 i‡(!(
QUADSPI
->
SR
 & 
QUADSPI_SR_BUSY
))

422 
tm¥eg
 = 
QUADSPI
->
LPTR
 ;

424 
tm¥eg
 &
QSPI_LPTR_CLEAR_MASK
 ;

426 
tm¥eg
 |
QSPI_Timeout
;

428 
QUADSPI
->
LPTR
 = 
tm¥eg
;

430 
	}
}

439 
	$QSPI_SëAddªss
(
uöt32_t
 
QSPI_Addªss
)

441 i‡(!(
QUADSPI
->
SR
 & 
QUADSPI_SR_BUSY
))

445 
QUADSPI
->
AR
 = 
QSPI_Addªss
;

447 
	}
}

456 
	$QSPI_SëA…î«ãByã
(
uöt32_t
 
QSPI_A…î«ãByã
)

458 i‡(!(
QUADSPI
->
SR
 & 
QUADSPI_SR_BUSY
))

462 
QUADSPI
->
ABR
 = 
QSPI_A…î«ãByã
;

464 
	}
}

474 
	$QSPI_SëFIFOThªshﬁd
(
uöt32_t
 
QSPI_FIFOThªshﬁd
)

476 
uöt32_t
 
tm¥eg
 = 0;

479 
	`as£π_∑øm
(
	`IS_QSPI_FIFOTHRESHOLD
(
QSPI_FIFOThªshﬁd
));

482 
tm¥eg
 = 
QUADSPI
->
CR
 ;

484 
tm¥eg
 &
QSPI_CR_CLEAR_FIFOTHRESHOLD_MASK
 ;

486 
tm¥eg
 |(
QSPI_FIFOThªshﬁd
 << 8);

488 
QUADSPI
->
CR
 = 
tm¥eg
;

489 
	}
}

511 
	$QSPI_SëD©aLígth
(
uöt32_t
 
QSPI_D©aLígth
)

513 i‡(!(
QUADSPI
->
SR
 & 
QUADSPI_SR_BUSY
))

517 
QUADSPI
->
DLR
 = 
QSPI_D©aLígth
;

519 
	}
}

528 
	$QSPI_TimeoutCou¡îCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

531 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

533 i‡(!(
QUADSPI
->
SR
 & 
QUADSPI_SR_BUSY
))

536 i‡(
NewSèã
 !
DISABLE
)

539 
QUADSPI
->
CR
 |
QUADSPI_CR_TCEN
;

544 
QUADSPI
->
CR
 &~ 
QUADSPI_CR_TCEN
;

547 
	}
}

556 
	$QSPI_AutoPﬁlögModeSt›Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

559 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

561 i‡(!(
QUADSPI
->
SR
 & 
QUADSPI_SR_BUSY
))

564 i‡(
NewSèã
 !
DISABLE
)

567 
QUADSPI
->
CR
 |
QUADSPI_CR_APMS
;

572 
QUADSPI
->
CR
 &~ 
QUADSPI_CR_APMS
;

575 
	}
}

582 
	$QSPI_Ab‹tReque°
()

585 
QUADSPI
->
CR
 |
QUADSPI_CR_ABORT
;

586 
	}
}

595 
	$QSPI_SídD©a8
(
uöt8_t
 
D©a
)

597 
uöt32_t
 
quad•iba£
 = 0;

599 
quad•iba£
 = (
uöt32_t
)
QUADSPI
;

600 
quad•iba£
 += 0x20;

602 *(
__IO
 
uöt8_t
 *Ë
quad•iba£
 = 
D©a
;

603 
	}
}

610 
	$QSPI_SídD©a16
(
uöt16_t
 
D©a
)

612 
uöt32_t
 
quad•iba£
 = 0;

614 
quad•iba£
 = (
uöt32_t
)
QUADSPI
;

615 
quad•iba£
 += 0x20;

617 *(
__IO
 
uöt16_t
 *Ë
quad•iba£
 = 
D©a
;

618 
	}
}

625 
	$QSPI_SídD©a32
(
uöt32_t
 
D©a
)

627 
QUADSPI
->
DR
 = 
D©a
;

628 
	}
}

634 
uöt8_t
 
	$QSPI_Re˚iveD©a8
()

636 
uöt32_t
 
quad•iba£
 = 0;

638 
quad•iba£
 = (
uöt32_t
)
QUADSPI
;

639 
quad•iba£
 += 0x20;

641  *(
__IO
 
uöt8_t
 *Ë
quad•iba£
;

642 
	}
}

648 
uöt16_t
 
	$QSPI_Re˚iveD©a16
()

650 
uöt32_t
 
quad•iba£
 = 0;

652 
quad•iba£
 = (
uöt32_t
)
QUADSPI
;

653 
quad•iba£
 += 0x20;

655  *(
__IO
 
uöt16_t
 *Ë
quad•iba£
;

656 
	}
}

662 
uöt32_t
 
	$QSPI_Re˚iveD©a32
()

664  
QUADSPI
->
DR
;

665 
	}
}

675 
	$QSPI_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

678 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

680 i‡(
NewSèã
 !
DISABLE
)

683 
QUADSPI
->
CR
 |
QUADSPI_CR_DMAEN
;

688 
QUADSPI
->
CR
 &~ 
QUADSPI_CR_DMAEN
;

690 
	}
}

707 
	$QSPI_ITC⁄fig
(
uöt32_t
 
QSPI_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

709 
uöt32_t
 
tm¥eg
 = 0;

712 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

713 
	`as£π_∑øm
(
	`IS_QSPI_IT
(
QSPI_IT
));

716 
tm¥eg
 = 
QUADSPI
->
CR
 ;

718 if(
NewSèã
 !
DISABLE
)

721 
tm¥eg
 |(
uöt32_t
)(
QSPI_IT
 & 
QSPI_CR_INTERRUPT_MASK
);

726 
tm¥eg
 &~(
uöt32_t
)(
QSPI_IT
 & 
QSPI_CR_INTERRUPT_MASK
);

729 
QUADSPI
->
CR
 = 
tm¥eg
 ;

730 
	}
}

738 
uöt32_t
 
	$QSPI_GëFIFOLevñ
()

741  ((
QUADSPI
->
SR
 & 
QUADSPI_SR_FLEVEL
)>> 8);

742 
	}
}

753 
uöt32_t
 
	$QSPI_GëFMode
()

756  (
QUADSPI
->
CCR
 & 
QUADSPI_CCR_FMODE
);

757 
	}
}

771 
FœgSètus
 
	$QSPI_GëFœgSètus
(
uöt32_t
 
QSPI_FLAG
)

773 
FœgSètus
 
bô°©us
 = 
RESET
;

775 
	`as£π_∑øm
(
	`IS_QSPI_GET_FLAG
(
QSPI_FLAG
));

778 i‡(
QUADSPI
->
SR
 & 
QSPI_FLAG
)

781 
bô°©us
 = 
SET
;

786 
bô°©us
 = 
RESET
;

789  
bô°©us
;

790 
	}
}

802 
	$QSPI_CÀ¨Fœg
(
uöt32_t
 
QSPI_FLAG
)

805 
	`as£π_∑øm
(
	`IS_QSPI_CLEAR_FLAG
(
QSPI_FLAG
));

808 
QUADSPI
->
FCR
 = 
QSPI_FLAG
;

809 
	}
}

822 
ITSètus
 
	$QSPI_GëITSètus
(
uöt32_t
 
QSPI_IT
)

824 
ITSètus
 
bô°©us
 = 
RESET
;

825 
__IO
 
uöt32_t
 
tmp¸eg
 = 0, 
tmp§eg
 = 0;

828 
	`as£π_∑øm
(
	`IS_QSPI_IT
(
QSPI_IT
));

831 
tmp¸eg
 = 
QUADSPI
->
CR
;

832 
tmp¸eg
 &(
uöt32_t
)(
QSPI_IT
 & 
QSPI_CR_INTERRUPT_MASK
);

835 
tmp§eg
 = 
QUADSPI
->
SR
;

836 
tmp§eg
 &(
uöt32_t
)(
QSPI_IT
 & 
QSPI_SR_INTERRUPT_MASK
);

839 if((
tmp¸eg
 !
RESET
Ë&& (
tmp§eg
 != RESET))

842 
bô°©us
 = 
SET
;

847 
bô°©us
 = 
RESET
;

850  
bô°©us
;

851 
	}
}

863 
	$QSPI_CÀ¨ITPídögBô
(
uöt32_t
 
QSPI_IT
)

866 
	`as£π_∑øm
(
	`IS_QSPI_CLEAR_IT
(
QSPI_IT
));

868 
QUADSPI
->
FCR
 = (
uöt32_t
)(
QSPI_IT
 & 
QSPI_FSR_INTERRUPT_MASK
);

869 
	}
}

877 
	$QSPI_DuÆFœshMode_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

880 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

882 i‡(
NewSèã
 !
DISABLE
)

885 
QUADSPI
->
CR
 |
QUADSPI_CR_DFM
;

890 
QUADSPI
->
CR
 &~ 
QUADSPI_CR_DFM
;

892 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c

59 
	~"°m32f4xx_rcc.h
"

73 
	#RCC_OFFSET
 (
RCC_BASE
 - 
PERIPH_BASE
)

	)

76 
	#CR_OFFSET
 (
RCC_OFFSET
 + 0x00)

	)

77 
	#HSION_BôNumbî
 0x00

	)

78 
	#CR_HSION_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
HSION_BôNumbî
 * 4))

	)

80 
	#CSSON_BôNumbî
 0x13

	)

81 
	#CR_CSSON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
CSSON_BôNumbî
 * 4))

	)

83 
	#PLLON_BôNumbî
 0x18

	)

84 
	#CR_PLLON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLON_BôNumbî
 * 4))

	)

86 
	#PLLI2SON_BôNumbî
 0x1A

	)

87 
	#CR_PLLI2SON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLI2SON_BôNumbî
 * 4))

	)

90 
	#PLLSAION_BôNumbî
 0x1C

	)

91 
	#CR_PLLSAION_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLSAION_BôNumbî
 * 4))

	)

95 
	#CFGR_OFFSET
 (
RCC_OFFSET
 + 0x08)

	)

96 
	#I2SSRC_BôNumbî
 0x17

	)

97 
	#CFGR_I2SSRC_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
I2SSRC_BôNumbî
 * 4))

	)

101 
	#BDCR_OFFSET
 (
RCC_OFFSET
 + 0x70)

	)

102 
	#RTCEN_BôNumbî
 0x0F

	)

103 
	#BDCR_RTCEN_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
RTCEN_BôNumbî
 * 4))

	)

105 
	#BDRST_BôNumbî
 0x10

	)

106 
	#BDCR_BDRST_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
BDRST_BôNumbî
 * 4))

	)

110 
	#CSR_OFFSET
 (
RCC_OFFSET
 + 0x74)

	)

111 
	#LSION_BôNumbî
 0x00

	)

112 
	#CSR_LSION_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
LSION_BôNumbî
 * 4))

	)

116 
	#DCKCFGR_OFFSET
 (
RCC_OFFSET
 + 0x8C)

	)

117 
	#TIMPRE_BôNumbî
 0x18

	)

118 
	#DCKCFGR_TIMPRE_BB
 (
PERIPH_BB_BASE
 + (
DCKCFGR_OFFSET
 * 32Ë+ (
TIMPRE_BôNumbî
 * 4))

	)

121 
	#CFGR_MCO2_RESET_MASK
 ((
uöt32_t
)0x07FFFFFF)

	)

122 
	#CFGR_MCO1_RESET_MASK
 ((
uöt32_t
)0xF89FFFFF)

	)

125 
	#FLAG_MASK
 ((
uöt8_t
)0x1F)

	)

128 
	#CR_BYTE3_ADDRESS
 ((
uöt32_t
)0x40023802)

	)

131 
	#CIR_BYTE2_ADDRESS
 ((
uöt32_t
)(
RCC_BASE
 + 0x0C + 0x01))

	)

134 
	#CIR_BYTE3_ADDRESS
 ((
uöt32_t
)(
RCC_BASE
 + 0x0C + 0x02))

	)

137 
	#BDCR_ADDRESS
 (
PERIPH_BASE
 + 
BDCR_OFFSET
)

	)

141 
__I
 
uöt8_t
 
	gAPBAHBPªscTabÀ
[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};

213 
	$RCC_DeInô
()

216 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

219 
RCC
->
CFGR
 = 0x00000000;

222 
RCC
->
CR
 &(
uöt32_t
)0xEAF6FFFF;

225 
RCC
->
PLLCFGR
 = 0x24003010;

228 
RCC
->
PLLI2SCFGR
 = 0x20003000;

231 
RCC
->
PLLSAICFGR
 = 0x24003000;

234 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

237 
RCC
->
CIR
 = 0x00000000;

240 
RCC
->
DCKCFGR
 = 0x00000000;

241 
	}
}

263 
	$RCC_HSEC⁄fig
(
uöt8_t
 
RCC_HSE
)

266 
	`as£π_∑øm
(
	`IS_RCC_HSE
(
RCC_HSE
));

269 *(
__IO
 
uöt8_t
 *Ë
CR_BYTE3_ADDRESS
 = 
RCC_HSE_OFF
;

272 *(
__IO
 
uöt8_t
 *Ë
CR_BYTE3_ADDRESS
 = 
RCC_HSE
;

273 
	}
}

287 
Eº‹Sètus
 
	$RCC_WaôF‹HSESèπUp
()

289 
__IO
 
uöt32_t
 
°¨tupcou¡î
 = 0;

290 
Eº‹Sètus
 
°©us
 = 
ERROR
;

291 
FœgSètus
 
h£°©us
 = 
RESET
;

295 
h£°©us
 = 
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
);

296 
°¨tupcou¡î
++;

297 } (
°¨tupcou¡î
 !
HSE_STARTUP_TIMEOUT
Ë&& (
h£°©us
 =
RESET
));

299 i‡(
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
Ë!
RESET
)

301 
°©us
 = 
SUCCESS
;

305 
°©us
 = 
ERROR
;

307  (
°©us
);

308 
	}
}

318 
	$RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
)

320 
uöt32_t
 
tm¥eg
 = 0;

322 
	`as£π_∑øm
(
	`IS_RCC_CALIBRATION_VALUE
(
HSICÆibøti⁄VÆue
));

324 
tm¥eg
 = 
RCC
->
CR
;

327 
tm¥eg
 &~
RCC_CR_HSITRIM
;

330 
tm¥eg
 |(
uöt32_t
)
HSICÆibøti⁄VÆue
 << 3;

333 
RCC
->
CR
 = 
tm¥eg
;

334 
	}
}

354 
	$RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

357 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

359 *(
__IO
 
uöt32_t
 *Ë
CR_HSION_BB
 = (uöt32_t)
NewSèã
;

360 
	}
}

379 
	$RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
)

382 
	`as£π_∑øm
(
	`IS_RCC_LSE
(
RCC_LSE
));

386 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

389 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

392 
RCC_LSE
)

394 
RCC_LSE_ON
:

396 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_ON
;

398 
RCC_LSE_By∑ss
:

400 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_By∑ss
 | 
RCC_LSE_ON
;

405 
	}
}

419 
	$RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

422 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

424 *(
__IO
 
uöt32_t
 *Ë
CSR_LSION_BB
 = (uöt32_t)
NewSèã
;

425 
	}
}

427 #i‡
deföed
(
STM32F446xx
)

467 
	$RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
PLLM
, uöt32_à
PLLN
, uöt32_à
PLLP
, uöt32_à
PLLQ
, uöt32_à
PLLR
)

470 
	`as£π_∑øm
(
	`IS_RCC_PLL_SOURCE
(
RCC_PLLSour˚
));

471 
	`as£π_∑øm
(
	`IS_RCC_PLLM_VALUE
(
PLLM
));

472 
	`as£π_∑øm
(
	`IS_RCC_PLLN_VALUE
(
PLLN
));

473 
	`as£π_∑øm
(
	`IS_RCC_PLLP_VALUE
(
PLLP
));

474 
	`as£π_∑øm
(
	`IS_RCC_PLLQ_VALUE
(
PLLQ
));

475 
	`as£π_∑øm
(
	`IS_RCC_PLLR_VALUE
(
PLLR
));

477 
RCC
->
PLLCFGR
 = 
PLLM
 | (
PLLN
 << 6Ë| (((
PLLP
 >> 1Ë-1Ë<< 16Ë| (
RCC_PLLSour˚
) |

478 (
PLLQ
 << 24Ë| (
PLLR
 << 28);

479 
	}
}

482 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F411xE
)

518 
	$RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
PLLM
, uöt32_à
PLLN
, uöt32_à
PLLP
, uöt32_à
PLLQ
)

521 
	`as£π_∑øm
(
	`IS_RCC_PLL_SOURCE
(
RCC_PLLSour˚
));

522 
	`as£π_∑øm
(
	`IS_RCC_PLLM_VALUE
(
PLLM
));

523 
	`as£π_∑øm
(
	`IS_RCC_PLLN_VALUE
(
PLLN
));

524 
	`as£π_∑øm
(
	`IS_RCC_PLLP_VALUE
(
PLLP
));

525 
	`as£π_∑øm
(
	`IS_RCC_PLLQ_VALUE
(
PLLQ
));

527 
RCC
->
PLLCFGR
 = 
PLLM
 | (
PLLN
 << 6Ë| (((
PLLP
 >> 1Ë-1Ë<< 16Ë| (
RCC_PLLSour˚
) |

528 (
PLLQ
 << 24);

529 
	}
}

542 
	$RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

545 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

546 *(
__IO
 
uöt32_t
 *Ë
CR_PLLON_BB
 = (uöt32_t)
NewSèã
;

547 
	}
}

549 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F401xx
)

572 
	$RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SR
)

575 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SN_VALUE
(
PLLI2SN
));

576 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SR_VALUE
(
PLLI2SR
));

578 
RCC
->
PLLI2SCFGR
 = (
PLLI2SN
 << 6Ë| (
PLLI2SR
 << 28);

579 
	}
}

582 #i‡
deföed
(
STM32F411xE
)

610 
	$RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SR
, uöt32_à
PLLI2SM
)

613 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SN_VALUE
(
PLLI2SN
));

614 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SM_VALUE
(
PLLI2SM
));

615 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SR_VALUE
(
PLLI2SR
));

617 
RCC
->
PLLI2SCFGR
 = (
PLLI2SN
 << 6Ë| (
PLLI2SR
 << 28Ë| 
PLLI2SM
;

618 
	}
}

621 #i‡
deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
)

646 
	$RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SQ
, uöt32_à
PLLI2SR
)

649 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SN_VALUE
(
PLLI2SN
));

650 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SQ_VALUE
(
PLLI2SQ
));

651 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SR_VALUE
(
PLLI2SR
));

653 
RCC
->
PLLI2SCFGR
 = (
PLLI2SN
 << 6Ë| (
PLLI2SQ
 << 24Ë| (
PLLI2SR
 << 28);

654 
	}
}

657 #i‡
deföed
(
STM32F446xx
)

692 
	$RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SM
, uöt32_à
PLLI2SN
, uöt32_à
PLLI2SP
, uöt32_à
PLLI2SQ
, uöt32_à
PLLI2SR
)

695 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SM_VALUE
(
PLLI2SM
));

696 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SN_VALUE
(
PLLI2SN
));

697 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SP_VALUE
(
PLLI2SP
));

698 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SQ_VALUE
(
PLLI2SQ
));

699 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SR_VALUE
(
PLLI2SR
));

701 
RCC
->
PLLI2SCFGR
 = 
PLLI2SM
 | (
PLLI2SN
 << 6Ë| (((
PLLI2SP
 >> 1Ë-1Ë<< 16Ë| (
PLLI2SQ
 << 24Ë| (
PLLI2SR
 << 28);

702 
	}
}

711 
	$RCC_PLLI2SCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

714 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

715 *(
__IO
 
uöt32_t
 *Ë
CR_PLLI2SON_BB
 = (uöt32_t)
NewSèã
;

716 
	}
}

718 #i‡
deföed
(
STM32F446xx
)

747 
	$RCC_PLLSAIC⁄fig
(
uöt32_t
 
PLLSAIM
, uöt32_à
PLLSAIN
, uöt32_à
PLLSAIP
, uöt32_à
PLLSAIQ
)

750 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIM_VALUE
(
PLLSAIM
));

751 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIN_VALUE
(
PLLSAIN
));

752 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIP_VALUE
(
PLLSAIP
));

753 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIQ_VALUE
(
PLLSAIQ
));

755 
RCC
->
PLLSAICFGR
 = 
PLLSAIM
 | (
PLLSAIN
 << 6Ë| (((
PLLSAIP
 >> 1Ë-1Ë<< 16Ë| (
PLLSAIQ
 << 24);

756 
	}
}

759 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F411xE
)

782 
	$RCC_PLLSAIC⁄fig
(
uöt32_t
 
PLLSAIN
, uöt32_à
PLLSAIQ
, uöt32_à
PLLSAIR
)

785 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIN_VALUE
(
PLLSAIN
));

786 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIR_VALUE
(
PLLSAIR
));

787 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIQ_VALUE
(
PLLSAIQ
));

789 
RCC
->
PLLSAICFGR
 = (
PLLSAIN
 << 6Ë| (
PLLSAIQ
 << 24Ë| (
PLLSAIR
 << 28);

790 
	}
}

802 
	$RCC_PLLSAICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

805 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

806 *(
__IO
 
uöt32_t
 *Ë
CR_PLLSAION_BB
 = (uöt32_t)
NewSèã
;

807 
	}
}

820 
	$RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

823 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

824 *(
__IO
 
uöt32_t
 *Ë
CR_CSSON_BB
 = (uöt32_t)
NewSèã
;

825 
	}
}

845 
	$RCC_MCO1C⁄fig
(
uöt32_t
 
RCC_MCO1Sour˚
, uöt32_à
RCC_MCO1Div
)

847 
uöt32_t
 
tm¥eg
 = 0;

850 
	`as£π_∑øm
(
	`IS_RCC_MCO1SOURCE
(
RCC_MCO1Sour˚
));

851 
	`as£π_∑øm
(
	`IS_RCC_MCO1DIV
(
RCC_MCO1Div
));

853 
tm¥eg
 = 
RCC
->
CFGR
;

856 
tm¥eg
 &
CFGR_MCO1_RESET_MASK
;

859 
tm¥eg
 |
RCC_MCO1Sour˚
 | 
RCC_MCO1Div
;

862 
RCC
->
CFGR
 = 
tm¥eg
;

863 
	}
}

883 
	$RCC_MCO2C⁄fig
(
uöt32_t
 
RCC_MCO2Sour˚
, uöt32_à
RCC_MCO2Div
)

885 
uöt32_t
 
tm¥eg
 = 0;

888 
	`as£π_∑øm
(
	`IS_RCC_MCO2SOURCE
(
RCC_MCO2Sour˚
));

889 
	`as£π_∑øm
(
	`IS_RCC_MCO2DIV
(
RCC_MCO2Div
));

891 
tm¥eg
 = 
RCC
->
CFGR
;

894 
tm¥eg
 &
CFGR_MCO2_RESET_MASK
;

897 
tm¥eg
 |
RCC_MCO2Sour˚
 | 
RCC_MCO2Div
;

900 
RCC
->
CFGR
 = 
tm¥eg
;

901 
	}
}

1079 
	$RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
)

1081 
uöt32_t
 
tm¥eg
 = 0;

1084 
	`as£π_∑øm
(
	`IS_RCC_SYSCLK_SOURCE
(
RCC_SYSCLKSour˚
));

1086 
tm¥eg
 = 
RCC
->
CFGR
;

1089 
tm¥eg
 &~
RCC_CFGR_SW
;

1092 
tm¥eg
 |
RCC_SYSCLKSour˚
;

1095 
RCC
->
CFGR
 = 
tm¥eg
;

1096 
	}
}

1108 
uöt8_t
 
	$RCC_GëSYSCLKSour˚
()

1110  ((
uöt8_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_SWS
));

1111 
	}
}

1133 
	$RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
)

1135 
uöt32_t
 
tm¥eg
 = 0;

1138 
	`as£π_∑øm
(
	`IS_RCC_HCLK
(
RCC_SYSCLK
));

1140 
tm¥eg
 = 
RCC
->
CFGR
;

1143 
tm¥eg
 &~
RCC_CFGR_HPRE
;

1146 
tm¥eg
 |
RCC_SYSCLK
;

1149 
RCC
->
CFGR
 = 
tm¥eg
;

1150 
	}
}

1165 
	$RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
)

1167 
uöt32_t
 
tm¥eg
 = 0;

1170 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

1172 
tm¥eg
 = 
RCC
->
CFGR
;

1175 
tm¥eg
 &~
RCC_CFGR_PPRE1
;

1178 
tm¥eg
 |
RCC_HCLK
;

1181 
RCC
->
CFGR
 = 
tm¥eg
;

1182 
	}
}

1196 
	$RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
)

1198 
uöt32_t
 
tm¥eg
 = 0;

1201 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

1203 
tm¥eg
 = 
RCC
->
CFGR
;

1206 
tm¥eg
 &~
RCC_CFGR_PPRE2
;

1209 
tm¥eg
 |
RCC_HCLK
 << 3;

1212 
RCC
->
CFGR
 = 
tm¥eg
;

1213 
	}
}

1248 
	$RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
)

1250 
uöt32_t
 
tmp
 = 0, 
¥esc
 = 0, 
∂lvco
 = 0, 
∂Õ
 = 2, 
∂lsour˚
 = 0, 
∂lm
 = 2;

1251 #i‡
	`deföed
(
STM32F446xx
)

1252 
uöt32_t
 
∂Ã
 = 2;

1256 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

1258 
tmp
)

1261 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VALUE
;

1264 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VALUE
;

1271 
∂lsour˚
 = (
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
) >> 22;

1272 
∂lm
 = 
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
;

1274 i‡(
∂lsour˚
 != 0)

1277 
∂lvco
 = (
HSE_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

1282 
∂lvco
 = (
HSI_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

1285 
∂Õ
 = (((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLP
) >>16) + 1 ) *2;

1286 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
∂lvco
/
∂Õ
;

1289 #i‡
	`deföed
(
STM32F446xx
)

1294 
∂lsour˚
 = (
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
) >> 22;

1295 
∂lm
 = 
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
;

1297 i‡(
∂lsour˚
 != 0)

1300 
∂lvco
 = (
HSE_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

1305 
∂lvco
 = (
HSI_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

1308 
∂Ã
 = (((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLR
) >>28) + 1 ) *2;

1309 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
∂lvco
/
∂Ã
;

1314 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VALUE
;

1320 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
;

1321 
tmp
 =Åmp >> 4;

1322 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1324 
RCC_Clocks
->
HCLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
 >> 
¥esc
;

1327 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PPRE1
;

1328 
tmp
 =Åmp >> 10;

1329 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1331 
RCC_Clocks
->
PCLK1_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

1334 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PPRE2
;

1335 
tmp
 =Åmp >> 13;

1336 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1338 
RCC_Clocks
->
PCLK2_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

1339 
	}
}

1401 
	$RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
)

1403 
uöt32_t
 
tm¥eg
 = 0;

1406 
	`as£π_∑øm
(
	`IS_RCC_RTCCLK_SOURCE
(
RCC_RTCCLKSour˚
));

1408 i‡((
RCC_RTCCLKSour˚
 & 0x00000300) == 0x00000300)

1410 
tm¥eg
 = 
RCC
->
CFGR
;

1413 
tm¥eg
 &~
RCC_CFGR_RTCPRE
;

1416 
tm¥eg
 |(
RCC_RTCCLKSour˚
 & 0xFFFFCFF);

1419 
RCC
->
CFGR
 = 
tm¥eg
;

1423 
RCC
->
BDCR
 |(
RCC_RTCCLKSour˚
 & 0x00000FFF);

1424 
	}
}

1433 
	$RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1436 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1438 *(
__IO
 
uöt32_t
 *Ë
BDCR_RTCEN_BB
 = (uöt32_t)
NewSèã
;

1439 
	}
}

1450 
	$RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1453 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1454 *(
__IO
 
uöt32_t
 *Ë
BDCR_BDRST_BB
 = (uöt32_t)
NewSèã
;

1455 
	}
}

1457 #i‡
deföed
(
STM32F446xx
)

1476 
	$RCC_I2SCLKC⁄fig
(
uöt32_t
 
RCC_I2SAPBx
, uöt32_à
RCC_I2SCLKSour˚
)

1479 
	`as£π_∑øm
(
	`IS_RCC_I2SCLK_SOURCE
(
RCC_I2SCLKSour˚
));

1480 
	`as£π_∑øm
(
	`IS_RCC_I2S_APBx
(
RCC_I2SAPBx
));

1482 if(
RCC_I2SAPBx
 =
RCC_I2SBus_APB1
)

1485 
RCC
->
DCKCFGR
 &~
RCC_DCKCFGR_I2S1SRC
;

1487 
RCC
->
DCKCFGR
 |
RCC_I2SCLKSour˚
;

1492 
RCC
->
DCKCFGR
 &~
RCC_DCKCFGR_I2S2SRC
;

1494 
RCC
->
DCKCFGR
 |(
RCC_I2SCLKSour˚
 << 2);

1496 
	}
}

1515 
	$RCC_SAICLKC⁄fig
(
uöt32_t
 
RCC_SAIIn°™˚
, uöt32_à
RCC_SAICLKSour˚
)

1518 
	`as£π_∑øm
(
	`IS_RCC_SAICLK_SOURCE
(
RCC_SAICLKSour˚
));

1519 
	`as£π_∑øm
(
	`IS_RCC_SAI_INSTANCE
(
RCC_SAIIn°™˚
));

1521 if(
RCC_SAIIn°™˚
 =
RCC_SAIIn°™˚_SAI1
)

1524 
RCC
->
DCKCFGR
 &~
RCC_DCKCFGR_SAI1SRC
;

1526 
RCC
->
DCKCFGR
 |
RCC_SAICLKSour˚
;

1531 
RCC
->
DCKCFGR
 &~
RCC_DCKCFGR_SAI2SRC
;

1533 
RCC
->
DCKCFGR
 |(
RCC_SAICLKSour˚
 << 2);

1535 
	}
}

1538 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F411xE
)

1549 
	$RCC_I2SCLKC⁄fig
(
uöt32_t
 
RCC_I2SCLKSour˚
)

1552 
	`as£π_∑øm
(
	`IS_RCC_I2SCLK_SOURCE
(
RCC_I2SCLKSour˚
));

1554 *(
__IO
 
uöt32_t
 *Ë
CFGR_I2SSRC_BB
 = 
RCC_I2SCLKSour˚
;

1555 
	}
}

1574 
	$RCC_SAIBlockACLKC⁄fig
(
uöt32_t
 
RCC_SAIBlockACLKSour˚
)

1576 
uöt32_t
 
tm¥eg
 = 0;

1579 
	`as£π_∑øm
(
	`IS_RCC_SAIACLK_SOURCE
(
RCC_SAIBlockACLKSour˚
));

1581 
tm¥eg
 = 
RCC
->
DCKCFGR
;

1584 
tm¥eg
 &~
RCC_DCKCFGR_SAI1ASRC
;

1587 
tm¥eg
 |
RCC_SAIBlockACLKSour˚
;

1590 
RCC
->
DCKCFGR
 = 
tm¥eg
;

1591 
	}
}

1610 
	$RCC_SAIBlockBCLKC⁄fig
(
uöt32_t
 
RCC_SAIBlockBCLKSour˚
)

1612 
uöt32_t
 
tm¥eg
 = 0;

1615 
	`as£π_∑øm
(
	`IS_RCC_SAIBCLK_SOURCE
(
RCC_SAIBlockBCLKSour˚
));

1617 
tm¥eg
 = 
RCC
->
DCKCFGR
;

1620 
tm¥eg
 &~
RCC_DCKCFGR_SAI1BSRC
;

1623 
tm¥eg
 |
RCC_SAIBlockBCLKSour˚
;

1626 
RCC
->
DCKCFGR
 = 
tm¥eg
;

1627 
	}
}

1643 
	$RCC_SAIPLLI2SClkDivC⁄fig
(
uöt32_t
 
RCC_PLLI2SDivQ
)

1645 
uöt32_t
 
tm¥eg
 = 0;

1648 
	`as£π_∑øm
(
	`IS_RCC_PLLI2S_DIVQ_VALUE
(
RCC_PLLI2SDivQ
));

1650 
tm¥eg
 = 
RCC
->
DCKCFGR
;

1653 
tm¥eg
 &~(
RCC_DCKCFGR_PLLI2SDIVQ
);

1656 
tm¥eg
 |(
RCC_PLLI2SDivQ
 - 1);

1659 
RCC
->
DCKCFGR
 = 
tm¥eg
;

1660 
	}
}

1675 
	$RCC_SAIPLLSAIClkDivC⁄fig
(
uöt32_t
 
RCC_PLLSAIDivQ
)

1677 
uöt32_t
 
tm¥eg
 = 0;

1680 
	`as£π_∑øm
(
	`IS_RCC_PLLSAI_DIVQ_VALUE
(
RCC_PLLSAIDivQ
));

1682 
tm¥eg
 = 
RCC
->
DCKCFGR
;

1685 
tm¥eg
 &~(
RCC_DCKCFGR_PLLSAIDIVQ
);

1688 
tm¥eg
 |((
RCC_PLLSAIDivQ
 - 1) << 8);

1691 
RCC
->
DCKCFGR
 = 
tm¥eg
;

1692 
	}
}

1711 
	$RCC_LTDCCLKDivC⁄fig
(
uöt32_t
 
RCC_PLLSAIDivR
)

1713 
uöt32_t
 
tm¥eg
 = 0;

1716 
	`as£π_∑øm
(
	`IS_RCC_PLLSAI_DIVR_VALUE
(
RCC_PLLSAIDivR
));

1718 
tm¥eg
 = 
RCC
->
DCKCFGR
;

1721 
tm¥eg
 &~
RCC_DCKCFGR_PLLSAIDIVR
;

1724 
tm¥eg
 |
RCC_PLLSAIDivR
;

1727 
RCC
->
DCKCFGR
 = 
tm¥eg
;

1728 
	}
}

1748 
	$RCC_TIMCLKPªsC⁄fig
(
uöt32_t
 
RCC_TIMCLKPªsˇÀr
)

1751 
	`as£π_∑øm
(
	`IS_RCC_TIMCLK_PRESCALER
(
RCC_TIMCLKPªsˇÀr
));

1753 *(
__IO
 
uöt32_t
 *Ë
DCKCFGR_TIMPRE_BB
 = 
RCC_TIMCLKPªsˇÀr
;

1754 
	}
}

1790 
	$RCC_AHB1PîùhClockCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1793 
	`as£π_∑øm
(
	`IS_RCC_AHB1_CLOCK_PERIPH
(
RCC_AHB1Pîùh
));

1795 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1796 i‡(
NewSèã
 !
DISABLE
)

1798 
RCC
->
AHB1ENR
 |
RCC_AHB1Pîùh
;

1802 
RCC
->
AHB1ENR
 &~
RCC_AHB1Pîùh
;

1804 
	}
}

1822 
	$RCC_AHB2PîùhClockCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1825 
	`as£π_∑øm
(
	`IS_RCC_AHB2_PERIPH
(
RCC_AHB2Pîùh
));

1826 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1828 i‡(
NewSèã
 !
DISABLE
)

1830 
RCC
->
AHB2ENR
 |
RCC_AHB2Pîùh
;

1834 
RCC
->
AHB2ENR
 &~
RCC_AHB2Pîùh
;

1836 
	}
}

1838 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
)

1852 
	$RCC_AHB3PîùhClockCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1855 
	`as£π_∑øm
(
	`IS_RCC_AHB3_PERIPH
(
RCC_AHB3Pîùh
));

1856 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1858 i‡(
NewSèã
 !
DISABLE
)

1860 
RCC
->
AHB3ENR
 |
RCC_AHB3Pîùh
;

1864 
RCC
->
AHB3ENR
 &~
RCC_AHB3Pîùh
;

1866 
	}
}

1908 
	$RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1911 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1912 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1914 i‡(
NewSèã
 !
DISABLE
)

1916 
RCC
->
APB1ENR
 |
RCC_APB1Pîùh
;

1920 
RCC
->
APB1ENR
 &~
RCC_APB1Pîùh
;

1922 
	}
}

1954 
	$RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1957 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1958 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1960 i‡(
NewSèã
 !
DISABLE
)

1962 
RCC
->
APB2ENR
 |
RCC_APB2Pîùh
;

1966 
RCC
->
APB2ENR
 &~
RCC_APB2Pîùh
;

1968 
	}
}

1996 
	$RCC_AHB1PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1999 
	`as£π_∑øm
(
	`IS_RCC_AHB1_RESET_PERIPH
(
RCC_AHB1Pîùh
));

2000 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2002 i‡(
NewSèã
 !
DISABLE
)

2004 
RCC
->
AHB1RSTR
 |
RCC_AHB1Pîùh
;

2008 
RCC
->
AHB1RSTR
 &~
RCC_AHB1Pîùh
;

2010 
	}
}

2025 
	$RCC_AHB2PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2028 
	`as£π_∑øm
(
	`IS_RCC_AHB2_PERIPH
(
RCC_AHB2Pîùh
));

2029 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2031 i‡(
NewSèã
 !
DISABLE
)

2033 
RCC
->
AHB2RSTR
 |
RCC_AHB2Pîùh
;

2037 
RCC
->
AHB2RSTR
 &~
RCC_AHB2Pîùh
;

2039 
	}
}

2041 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
)

2052 
	$RCC_AHB3PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2055 
	`as£π_∑øm
(
	`IS_RCC_AHB3_PERIPH
(
RCC_AHB3Pîùh
));

2056 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2058 i‡(
NewSèã
 !
DISABLE
)

2060 
RCC
->
AHB3RSTR
 |
RCC_AHB3Pîùh
;

2064 
RCC
->
AHB3RSTR
 &~
RCC_AHB3Pîùh
;

2066 
	}
}

2105 
	$RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2108 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

2109 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2110 i‡(
NewSèã
 !
DISABLE
)

2112 
RCC
->
APB1RSTR
 |
RCC_APB1Pîùh
;

2116 
RCC
->
APB1RSTR
 &~
RCC_APB1Pîùh
;

2118 
	}
}

2147 
	$RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2150 
	`as£π_∑øm
(
	`IS_RCC_APB2_RESET_PERIPH
(
RCC_APB2Pîùh
));

2151 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2152 i‡(
NewSèã
 !
DISABLE
)

2154 
RCC
->
APB2RSTR
 |
RCC_APB2Pîùh
;

2158 
RCC
->
APB2RSTR
 &~
RCC_APB2Pîùh
;

2160 
	}
}

2196 
	$RCC_AHB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2199 
	`as£π_∑øm
(
	`IS_RCC_AHB1_LPMODE_PERIPH
(
RCC_AHB1Pîùh
));

2200 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2201 i‡(
NewSèã
 !
DISABLE
)

2203 
RCC
->
AHB1LPENR
 |
RCC_AHB1Pîùh
;

2207 
RCC
->
AHB1LPENR
 &~
RCC_AHB1Pîùh
;

2209 
	}
}

2228 
	$RCC_AHB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2231 
	`as£π_∑øm
(
	`IS_RCC_AHB2_PERIPH
(
RCC_AHB2Pîùh
));

2232 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2233 i‡(
NewSèã
 !
DISABLE
)

2235 
RCC
->
AHB2LPENR
 |
RCC_AHB2Pîùh
;

2239 
RCC
->
AHB2LPENR
 &~
RCC_AHB2Pîùh
;

2241 
	}
}

2243 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
)

2258 
	$RCC_AHB3PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2261 
	`as£π_∑øm
(
	`IS_RCC_AHB3_PERIPH
(
RCC_AHB3Pîùh
));

2262 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2263 i‡(
NewSèã
 !
DISABLE
)

2265 
RCC
->
AHB3LPENR
 |
RCC_AHB3Pîùh
;

2269 
RCC
->
AHB3LPENR
 &~
RCC_AHB3Pîùh
;

2271 
	}
}

2314 
	$RCC_APB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2317 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

2318 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2319 i‡(
NewSèã
 !
DISABLE
)

2321 
RCC
->
APB1LPENR
 |
RCC_APB1Pîùh
;

2325 
RCC
->
APB1LPENR
 &~
RCC_APB1Pîùh
;

2327 
	}
}

2360 
	$RCC_APB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2363 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

2364 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2365 i‡(
NewSèã
 !
DISABLE
)

2367 
RCC
->
APB2LPENR
 |
RCC_APB2Pîùh
;

2371 
RCC
->
APB2LPENR
 &~
RCC_APB2Pîùh
;

2373 
	}
}

2384 
	$RCC_LSEModeC⁄fig
(
uöt8_t
 
RCC_Mode
)

2387 
	`as£π_∑øm
(
	`IS_RCC_LSE_MODE
(
RCC_Mode
));

2389 if(
RCC_Mode
 =
RCC_LSE_HIGHDRIVE_MODE
)

2391 
	`SET_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEMOD
);

2395 
	`CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEMOD
);

2397 
	}
}

2399 #i‡
deföed
(
STM32F446xx
)

2409 
	$RCC_48MHzClockSour˚C⁄fig
(
uöt8_t
 
RCC_ClockSour˚
)

2412 
	`as£π_∑øm
(
	`IS_RCC_48MHZ_CLOCKSOURCE
(
RCC_ClockSour˚
));

2414 if(
RCC_ClockSour˚
 =
RCC_48MHZCLKSour˚_PLLSAI
)

2416 
	`SET_BIT
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_CK48MSEL
);

2420 
	`CLEAR_BIT
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_CK48MSEL
);

2422 
	}
}

2433 
	$RCC_SDIOClockSour˚C⁄fig
(
uöt8_t
 
RCC_ClockSour˚
)

2436 
	`as£π_∑øm
(
	`IS_RCC_SDIO_CLOCKSOURCE
(
RCC_ClockSour˚
));

2438 if(
RCC_ClockSour˚
 =
RCC_SDIOCLKSour˚_SYSCLK
)

2440 
	`SET_BIT
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_SDIOSEL
);

2444 
	`CLEAR_BIT
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_SDIOSEL
);

2446 
	}
}

2449 #i‡
deföed
(
STM32F446xx
)

2466 
	$RCC_AHB1ClockG©ögCmd
(
uöt32_t
 
RCC_AHB1ClockG©ög
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2469 
	`as£π_∑øm
(
	`IS_RCC_AHB1_CLOCKGATING
(
RCC_AHB1ClockG©ög
));

2471 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2472 i‡(
NewSèã
 !
DISABLE
)

2474 
RCC
->
CKGATENR
 &~
RCC_AHB1ClockG©ög
;

2478 
RCC
->
CKGATENR
 |
RCC_AHB1ClockG©ög
;

2480 
	}
}

2491 
	$RCC_SPDIFRXClockSour˚C⁄fig
(
uöt8_t
 
RCC_ClockSour˚
)

2494 
	`as£π_∑øm
(
	`IS_RCC_SPDIFRX_CLOCKSOURCE
(
RCC_ClockSour˚
));

2496 if(
RCC_ClockSour˚
 =
RCC_SPDIFRXCLKSour˚_PLLI2SP
)

2498 
	`SET_BIT
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_SPDIFRXSEL
);

2502 
	`CLEAR_BIT
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_SPDIFRXSEL
);

2504 
	}
}

2515 
	$RCC_CECClockSour˚C⁄fig
(
uöt8_t
 
RCC_ClockSour˚
)

2518 
	`as£π_∑øm
(
	`IS_RCC_CEC_CLOCKSOURCE
(
RCC_ClockSour˚
));

2520 if(
RCC_ClockSour˚
 =
RCC_CECCLKSour˚_LSE
)

2522 
	`SET_BIT
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_CECSEL
);

2526 
	`CLEAR_BIT
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_CECSEL
);

2528 
	}
}

2540 
	$RCC_FMPI2C1ClockSour˚C⁄fig
(
uöt32_t
 
RCC_ClockSour˚
)

2543 
	`as£π_∑øm
(
	`IS_RCC_FMPI2C1_CLOCKSOURCE
(
RCC_ClockSour˚
));

2546 
RCC
->
DCKCFGR2
 &~
RCC_DCKCFGR2_FMPI2C1SEL
;

2548 
RCC
->
DCKCFGR2
 |
RCC_ClockSour˚
;

2549 
	}
}

2582 
	$RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2585 
	`as£π_∑øm
(
	`IS_RCC_IT
(
RCC_IT
));

2586 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2587 i‡(
NewSèã
 !
DISABLE
)

2590 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 |
RCC_IT
;

2595 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 &(uöt8_t)~
RCC_IT
;

2597 
	}
}

2619 
FœgSètus
 
	$RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
)

2621 
uöt32_t
 
tmp
 = 0;

2622 
uöt32_t
 
°©u§eg
 = 0;

2623 
FœgSètus
 
bô°©us
 = 
RESET
;

2626 
	`as£π_∑øm
(
	`IS_RCC_FLAG
(
RCC_FLAG
));

2629 
tmp
 = 
RCC_FLAG
 >> 5;

2630 i‡(
tmp
 == 1)

2632 
°©u§eg
 = 
RCC
->
CR
;

2634 i‡(
tmp
 == 2)

2636 
°©u§eg
 = 
RCC
->
BDCR
;

2640 
°©u§eg
 = 
RCC
->
CSR
;

2644 
tmp
 = 
RCC_FLAG
 & 
FLAG_MASK
;

2645 i‡((
°©u§eg
 & ((
uöt32_t
)1 << 
tmp
)Ë!(uöt32_t)
RESET
)

2647 
bô°©us
 = 
SET
;

2651 
bô°©us
 = 
RESET
;

2654  
bô°©us
;

2655 
	}
}

2664 
	$RCC_CÀ¨Fœg
()

2667 
RCC
->
CSR
 |
RCC_CSR_RMVF
;

2668 
	}
}

2684 
ITSètus
 
	$RCC_GëITSètus
(
uöt8_t
 
RCC_IT
)

2686 
ITSètus
 
bô°©us
 = 
RESET
;

2689 
	`as£π_∑øm
(
	`IS_RCC_GET_IT
(
RCC_IT
));

2692 i‡((
RCC
->
CIR
 & 
RCC_IT
Ë!(
uöt32_t
)
RESET
)

2694 
bô°©us
 = 
SET
;

2698 
bô°©us
 = 
RESET
;

2701  
bô°©us
;

2702 
	}
}

2718 
	$RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
)

2721 
	`as£π_∑øm
(
	`IS_RCC_CLEAR_IT
(
RCC_IT
));

2725 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE3_ADDRESS
 = 
RCC_IT
;

2726 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c

56 
	~"°m32f4xx_∫g.h
"

57 
	~"°m32f4xx_rcc.h
"

99 
	$RNG_DeInô
()

102 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_RNG
, 
ENABLE
);

105 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_RNG
, 
DISABLE
);

106 
	}
}

114 
	$RNG_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

117 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

119 i‡(
NewSèã
 !
DISABLE
)

122 
RNG
->
CR
 |
RNG_CR_RNGEN
;

127 
RNG
->
CR
 &~
RNG_CR_RNGEN
;

129 
	}
}

176 
uöt32_t
 
	$RNG_GëR™domNumbî
()

179  
RNG
->
DR
;

180 
	}
}

267 
	$RNG_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
)

270 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

272 i‡(
NewSèã
 !
DISABLE
)

275 
RNG
->
CR
 |
RNG_CR_IE
;

280 
RNG
->
CR
 &~
RNG_CR_IE
;

282 
	}
}

293 
FœgSètus
 
	$RNG_GëFœgSètus
(
uöt8_t
 
RNG_FLAG
)

295 
FœgSètus
 
bô°©us
 = 
RESET
;

297 
	`as£π_∑øm
(
	`IS_RNG_GET_FLAG
(
RNG_FLAG
));

300 i‡((
RNG
->
SR
 & 
RNG_FLAG
Ë!(
uöt8_t
)
RESET
)

303 
bô°©us
 = 
SET
;

308 
bô°©us
 = 
RESET
;

311  
bô°©us
;

312 
	}
}

326 
	$RNG_CÀ¨Fœg
(
uöt8_t
 
RNG_FLAG
)

329 
	`as£π_∑øm
(
	`IS_RNG_CLEAR_FLAG
(
RNG_FLAG
));

331 
RNG
->
SR
 = ~(
uöt32_t
)(((uöt32_t)
RNG_FLAG
) << 4);

332 
	}
}

342 
ITSètus
 
	$RNG_GëITSètus
(
uöt8_t
 
RNG_IT
)

344 
ITSètus
 
bô°©us
 = 
RESET
;

346 
	`as£π_∑øm
(
	`IS_RNG_GET_IT
(
RNG_IT
));

349 i‡((
RNG
->
SR
 & 
RNG_IT
Ë!(
uöt8_t
)
RESET
)

352 
bô°©us
 = 
SET
;

357 
bô°©us
 = 
RESET
;

360  
bô°©us
;

361 
	}
}

372 
	$RNG_CÀ¨ITPídögBô
(
uöt8_t
 
RNG_IT
)

375 
	`as£π_∑øm
(
	`IS_RNG_IT
(
RNG_IT
));

378 
RNG
->
SR
 = (
uöt8_t
)~
RNG_IT
;

379 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c

285 
	~"°m32f4xx_πc.h
"

300 
	#RTC_TR_RESERVED_MASK
 ((
uöt32_t
)0x007F7F7F)

	)

301 
	#RTC_DR_RESERVED_MASK
 ((
uöt32_t
)0x00FFFF3F)

	)

302 
	#RTC_INIT_MASK
 ((
uöt32_t
)0xFFFFFFFF)

	)

303 
	#RTC_RSF_MASK
 ((
uöt32_t
)0xFFFFFF5F)

	)

304 
	#RTC_FLAGS_MASK
 ((
uöt32_t
)(
RTC_FLAG_TSOVF
 | 
RTC_FLAG_TSF
 | 
RTC_FLAG_WUTF
 | \

	)

305 
	gRTC_FLAG_ALRBF
 | 
	gRTC_FLAG_ALRAF
 | 
	gRTC_FLAG_INITF
 | \

306 
	gRTC_FLAG_RSF
 | 
	gRTC_FLAG_INITS
 | 
	gRTC_FLAG_WUTWF
 | \

307 
	gRTC_FLAG_ALRBWF
 | 
	gRTC_FLAG_ALRAWF
 | 
	gRTC_FLAG_TAMP1F
 | \

308 
	gRTC_FLAG_RECALPF
 | 
	gRTC_FLAG_SHPF
))

310 
	#INITMODE_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

311 
	#SYNCHRO_TIMEOUT
 ((
uöt32_t
Ë0x00020000)

	)

312 
	#RECALPF_TIMEOUT
 ((
uöt32_t
Ë0x00020000)

	)

313 
	#SHPF_TIMEOUT
 ((
uöt32_t
Ë0x00001000)

	)

318 
uöt8_t
 
RTC_ByãToBcd2
(uöt8_à
VÆue
);

319 
uöt8_t
 
RTC_Bcd2ToByã
(uöt8_à
VÆue
);

375 
Eº‹Sètus
 
	$RTC_DeInô
()

377 
__IO
 
uöt32_t
 
wutcou¡î
 = 0x00;

378 
uöt32_t
 
wutwf°©us
 = 0x00;

379 
Eº‹Sètus
 
°©us
 = 
ERROR
;

382 
RTC
->
WPR
 = 0xCA;

383 
RTC
->
WPR
 = 0x53;

386 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

388 
°©us
 = 
ERROR
;

393 
RTC
->
TR
 = (
uöt32_t
)0x00000000;

394 
RTC
->
DR
 = (
uöt32_t
)0x00002101;

396 
RTC
->
CR
 &(
uöt32_t
)0x00000007;

401 
wutwf°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_WUTWF
;

402 
wutcou¡î
++;

403 } (
wutcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
wutwf°©us
 == 0x00));

405 i‡((
RTC
->
ISR
 & 
RTC_ISR_WUTWF
Ë=
RESET
)

407 
°©us
 = 
ERROR
;

412 
RTC
->
CR
 &(
uöt32_t
)0x00000000;

413 
RTC
->
WUTR
 = (
uöt32_t
)0x0000FFFF;

414 
RTC
->
PRER
 = (
uöt32_t
)0x007F00FF;

415 
RTC
->
CALIBR
 = (
uöt32_t
)0x00000000;

416 
RTC
->
ALRMAR
 = (
uöt32_t
)0x00000000;

417 
RTC
->
ALRMBR
 = (
uöt32_t
)0x00000000;

418 
RTC
->
SHIFTR
 = (
uöt32_t
)0x00000000;

419 
RTC
->
CALR
 = (
uöt32_t
)0x00000000;

420 
RTC
->
ALRMASSR
 = (
uöt32_t
)0x00000000;

421 
RTC
->
ALRMBSSR
 = (
uöt32_t
)0x00000000;

424 
RTC
->
ISR
 = (
uöt32_t
)0x00000000;

427 
RTC
->
TAFCR
 = 0x00000000;

429 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

431 
°©us
 = 
ERROR
;

435 
°©us
 = 
SUCCESS
;

441 
RTC
->
WPR
 = 0xFF;

443  
°©us
;

444 
	}
}

457 
Eº‹Sètus
 
	$RTC_Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
)

459 
Eº‹Sètus
 
°©us
 = 
ERROR
;

462 
	`as£π_∑øm
(
	`IS_RTC_HOUR_FORMAT
(
RTC_InôSåu˘
->
RTC_HourF‹m©
));

463 
	`as£π_∑øm
(
	`IS_RTC_ASYNCH_PREDIV
(
RTC_InôSåu˘
->
RTC_AsynchPªdiv
));

464 
	`as£π_∑øm
(
	`IS_RTC_SYNCH_PREDIV
(
RTC_InôSåu˘
->
RTC_SynchPªdiv
));

467 
RTC
->
WPR
 = 0xCA;

468 
RTC
->
WPR
 = 0x53;

471 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

473 
°©us
 = 
ERROR
;

478 
RTC
->
CR
 &((
uöt32_t
)~(
RTC_CR_FMT
));

480 
RTC
->
CR
 |((
uöt32_t
)(
RTC_InôSåu˘
->
RTC_HourF‹m©
));

483 
RTC
->
PRER
 = (
uöt32_t
)(
RTC_InôSåu˘
->
RTC_SynchPªdiv
);

484 
RTC
->
PRER
 |(
uöt32_t
)(
RTC_InôSåu˘
->
RTC_AsynchPªdiv
 << 16);

487 
	`RTC_ExôInôMode
();

489 
°©us
 = 
SUCCESS
;

492 
RTC
->
WPR
 = 0xFF;

494  
°©us
;

495 
	}
}

503 
	$RTC_Såu˘Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
)

506 
RTC_InôSåu˘
->
RTC_HourF‹m©
 = 
RTC_HourF‹m©_24
;

509 
RTC_InôSåu˘
->
RTC_AsynchPªdiv
 = (
uöt32_t
)0x7F;

512 
RTC_InôSåu˘
->
RTC_SynchPªdiv
 = (
uöt32_t
)0xFF;

513 
	}
}

525 
	$RTC_WrôePrŸe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

528 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

530 i‡(
NewSèã
 !
DISABLE
)

533 
RTC
->
WPR
 = 0xFF;

538 
RTC
->
WPR
 = 0xCA;

539 
RTC
->
WPR
 = 0x53;

541 
	}
}

552 
Eº‹Sètus
 
	$RTC_E¡îInôMode
()

554 
__IO
 
uöt32_t
 
öôcou¡î
 = 0x00;

555 
Eº‹Sètus
 
°©us
 = 
ERROR
;

556 
uöt32_t
 
öô°©us
 = 0x00;

559 i‡((
RTC
->
ISR
 & 
RTC_ISR_INITF
Ë=(
uöt32_t
)
RESET
)

562 
RTC
->
ISR
 = (
uöt32_t
)
RTC_INIT_MASK
;

567 
öô°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_INITF
;

568 
öôcou¡î
++;

569 } (
öôcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
öô°©us
 == 0x00));

571 i‡((
RTC
->
ISR
 & 
RTC_ISR_INITF
Ë!
RESET
)

573 
°©us
 = 
SUCCESS
;

577 
°©us
 = 
ERROR
;

582 
°©us
 = 
SUCCESS
;

585  (
°©us
);

586 
	}
}

597 
	$RTC_ExôInôMode
()

600 
RTC
->
ISR
 &(
uöt32_t
)~
RTC_ISR_INIT
;

601 
	}
}

619 
Eº‹Sètus
 
	$RTC_WaôF‹Synchro
()

621 
__IO
 
uöt32_t
 
synchrocou¡î
 = 0;

622 
Eº‹Sètus
 
°©us
 = 
ERROR
;

623 
uöt32_t
 
synchro°©us
 = 0x00;

626 
RTC
->
WPR
 = 0xCA;

627 
RTC
->
WPR
 = 0x53;

630 
RTC
->
ISR
 &(
uöt32_t
)
RTC_RSF_MASK
;

635 
synchro°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_RSF
;

636 
synchrocou¡î
++;

637 } (
synchrocou¡î
 !
SYNCHRO_TIMEOUT
Ë&& (
synchro°©us
 == 0x00));

639 i‡((
RTC
->
ISR
 & 
RTC_ISR_RSF
Ë!
RESET
)

641 
°©us
 = 
SUCCESS
;

645 
°©us
 = 
ERROR
;

649 
RTC
->
WPR
 = 0xFF;

651  (
°©us
);

652 
	}
}

662 
Eº‹Sètus
 
	$RTC_RefClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

664 
Eº‹Sètus
 
°©us
 = 
ERROR
;

667 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

670 
RTC
->
WPR
 = 0xCA;

671 
RTC
->
WPR
 = 0x53;

674 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

676 
°©us
 = 
ERROR
;

680 i‡(
NewSèã
 !
DISABLE
)

683 
RTC
->
CR
 |
RTC_CR_REFCKON
;

688 
RTC
->
CR
 &~
RTC_CR_REFCKON
;

691 
	`RTC_ExôInôMode
();

693 
°©us
 = 
SUCCESS
;

697 
RTC
->
WPR
 = 0xFF;

699  
°©us
;

700 
	}
}

710 
	$RTC_By∑ssShadowCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

713 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

716 
RTC
->
WPR
 = 0xCA;

717 
RTC
->
WPR
 = 0x53;

719 i‡(
NewSèã
 !
DISABLE
)

722 
RTC
->
CR
 |(
uöt8_t
)
RTC_CR_BYPSHAD
;

727 
RTC
->
CR
 &(
uöt8_t
)~
RTC_CR_BYPSHAD
;

731 
RTC
->
WPR
 = 0xFF;

732 
	}
}

765 
Eº‹Sètus
 
	$RTC_SëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
)

767 
uöt32_t
 
tm¥eg
 = 0;

768 
Eº‹Sètus
 
°©us
 = 
ERROR
;

771 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

773 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

775 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

777 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
RTC_TimeSåu˘
->
RTC_Hours
));

778 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_TimeSåu˘
->
RTC_H12
));

782 
RTC_TimeSåu˘
->
RTC_H12
 = 0x00;

783 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
RTC_TimeSåu˘
->
RTC_Hours
));

785 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
RTC_TimeSåu˘
->
RTC_Möuãs
));

786 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
RTC_TimeSåu˘
->
RTC_Sec⁄ds
));

790 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

792 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Hours
);

793 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
tm¥eg
));

794 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_TimeSåu˘
->
RTC_H12
));

798 
RTC_TimeSåu˘
->
RTC_H12
 = 0x00;

799 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Hours
)));

801 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Möuãs
)));

802 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Sec⁄ds
)));

806 i‡(
RTC_F‹m©
 !
RTC_F‹m©_BIN
)

808 
tm¥eg
 = (((
uöt32_t
)(
RTC_TimeSåu˘
->
RTC_Hours
) << 16) | \

809 ((
uöt32_t
)(
RTC_TimeSåu˘
->
RTC_Möuãs
) << 8) | \

810 ((
uöt32_t
)
RTC_TimeSåu˘
->
RTC_Sec⁄ds
) | \

811 ((
uöt32_t
)(
RTC_TimeSåu˘
->
RTC_H12
) << 16));

815 
tm¥eg
 = (
uöt32_t
)(((uöt32_t)
	`RTC_ByãToBcd2
(
RTC_TimeSåu˘
->
RTC_Hours
) << 16) | \

816 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_TimeSåu˘
->
RTC_Möuãs
) << 8) | \

817 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_TimeSåu˘
->
RTC_Sec⁄ds
)) | \

818 (((
uöt32_t
)
RTC_TimeSåu˘
->
RTC_H12
) << 16));

822 
RTC
->
WPR
 = 0xCA;

823 
RTC
->
WPR
 = 0x53;

826 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

828 
°©us
 = 
ERROR
;

833 
RTC
->
TR
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_TR_RESERVED_MASK
);

836 
	`RTC_ExôInôMode
();

839 i‡((
RTC
->
CR
 & 
RTC_CR_BYPSHAD
Ë=
RESET
)

841 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

843 
°©us
 = 
ERROR
;

847 
°©us
 = 
SUCCESS
;

852 
°©us
 = 
SUCCESS
;

856 
RTC
->
WPR
 = 0xFF;

858  
°©us
;

859 
	}
}

868 
	$RTC_TimeSåu˘Inô
(
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
)

871 
RTC_TimeSåu˘
->
RTC_H12
 = 
RTC_H12_AM
;

872 
RTC_TimeSåu˘
->
RTC_Hours
 = 0;

873 
RTC_TimeSåu˘
->
RTC_Möuãs
 = 0;

874 
RTC_TimeSåu˘
->
RTC_Sec⁄ds
 = 0;

875 
	}
}

887 
	$RTC_GëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
)

889 
uöt32_t
 
tm¥eg
 = 0;

892 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

895 
tm¥eg
 = (
uöt32_t
)(
RTC
->
TR
 & 
RTC_TR_RESERVED_MASK
);

898 
RTC_TimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_HT
 | 
RTC_TR_HU
)) >> 16);

899 
RTC_TimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_MNT
 | 
RTC_TR_MNU
)) >>8);

900 
RTC_TimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)(
tm¥eg
 & (
RTC_TR_ST
 | 
RTC_TR_SU
));

901 
RTC_TimeSåu˘
->
RTC_H12
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_PM
)) >> 16);

904 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

907 
RTC_TimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_TimeStruct->RTC_Hours);

908 
RTC_TimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_TimeStruct->RTC_Minutes);

909 
RTC_TimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_TimeStruct->RTC_Seconds);

911 
	}
}

920 
uöt32_t
 
	$RTC_GëSubSec⁄d
()

922 
uöt32_t
 
tm¥eg
 = 0;

925 
tm¥eg
 = (
uöt32_t
)(
RTC
->
SSR
);

928 (Ë(
RTC
->
DR
);

930  (
tm¥eg
);

931 
	}
}

945 
Eº‹Sètus
 
	$RTC_SëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
)

947 
uöt32_t
 
tm¥eg
 = 0;

948 
Eº‹Sètus
 
°©us
 = 
ERROR
;

951 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

953 i‡((
RTC_F‹m©
 =
RTC_F‹m©_BIN
Ë&& ((
RTC_D©eSåu˘
->
RTC_M⁄th
 & 0x10) == 0x10))

955 
RTC_D©eSåu˘
->
RTC_M⁄th
 = (RTC_D©eSåu˘->RTC_M⁄th & (
uöt32_t
)~(0x10)) + 0x0A;

957 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

959 
	`as£π_∑øm
(
	`IS_RTC_YEAR
(
RTC_D©eSåu˘
->
RTC_Yór
));

960 
	`as£π_∑øm
(
	`IS_RTC_MONTH
(
RTC_D©eSåu˘
->
RTC_M⁄th
));

961 
	`as£π_∑øm
(
	`IS_RTC_DATE
(
RTC_D©eSåu˘
->
RTC_D©e
));

965 
	`as£π_∑øm
(
	`IS_RTC_YEAR
(
	`RTC_Bcd2ToByã
(
RTC_D©eSåu˘
->
RTC_Yór
)));

966 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_D©eSåu˘
->
RTC_M⁄th
);

967 
	`as£π_∑øm
(
	`IS_RTC_MONTH
(
tm¥eg
));

968 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_D©eSåu˘
->
RTC_D©e
);

969 
	`as£π_∑øm
(
	`IS_RTC_DATE
(
tm¥eg
));

971 
	`as£π_∑øm
(
	`IS_RTC_WEEKDAY
(
RTC_D©eSåu˘
->
RTC_WìkDay
));

974 i‡(
RTC_F‹m©
 !
RTC_F‹m©_BIN
)

976 
tm¥eg
 = ((((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_Yór
) << 16) | \

977 (((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_M⁄th
) << 8) | \

978 ((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_D©e
) | \

979 (((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_WìkDay
) << 13));

983 
tm¥eg
 = (((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_D©eSåu˘
->
RTC_Yór
) << 16) | \

984 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_D©eSåu˘
->
RTC_M⁄th
) << 8) | \

985 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_D©eSåu˘
->
RTC_D©e
)) | \

986 ((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_WìkDay
 << 13));

990 
RTC
->
WPR
 = 0xCA;

991 
RTC
->
WPR
 = 0x53;

994 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

996 
°©us
 = 
ERROR
;

1001 
RTC
->
DR
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_DR_RESERVED_MASK
);

1004 
	`RTC_ExôInôMode
();

1007 i‡((
RTC
->
CR
 & 
RTC_CR_BYPSHAD
Ë=
RESET
)

1009 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

1011 
°©us
 = 
ERROR
;

1015 
°©us
 = 
SUCCESS
;

1020 
°©us
 = 
SUCCESS
;

1024 
RTC
->
WPR
 = 0xFF;

1026  
°©us
;

1027 
	}
}

1036 
	$RTC_D©eSåu˘Inô
(
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
)

1039 
RTC_D©eSåu˘
->
RTC_WìkDay
 = 
RTC_Wìkday_M⁄day
;

1040 
RTC_D©eSåu˘
->
RTC_D©e
 = 1;

1041 
RTC_D©eSåu˘
->
RTC_M⁄th
 = 
RTC_M⁄th_J™u¨y
;

1042 
RTC_D©eSåu˘
->
RTC_Yór
 = 0;

1043 
	}
}

1055 
	$RTC_GëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
)

1057 
uöt32_t
 
tm¥eg
 = 0;

1060 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1063 
tm¥eg
 = (
uöt32_t
)(
RTC
->
DR
 & 
RTC_DR_RESERVED_MASK
);

1066 
RTC_D©eSåu˘
->
RTC_Yór
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_DR_YT
 | 
RTC_DR_YU
)) >> 16);

1067 
RTC_D©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_DR_MT
 | 
RTC_DR_MU
)) >> 8);

1068 
RTC_D©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)(
tm¥eg
 & (
RTC_DR_DT
 | 
RTC_DR_DU
));

1069 
RTC_D©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_DR_WDU
)) >> 13);

1072 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1075 
RTC_D©eSåu˘
->
RTC_Yór
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_DateStruct->RTC_Year);

1076 
RTC_D©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_DateStruct->RTC_Month);

1077 
RTC_D©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_DateStruct->RTC_Date);

1079 
	}
}

1115 
	$RTC_SëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
)

1117 
uöt32_t
 
tm¥eg
 = 0;

1120 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1121 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
RTC_Aœrm
));

1122 
	`as£π_∑øm
(
	`IS_ALARM_MASK
(
RTC_AœrmSåu˘
->
RTC_AœrmMask
));

1123 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_SEL
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
));

1125 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1127 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

1129 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
));

1130 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
));

1134 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = 0x00;

1135 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
));

1137 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
));

1138 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
));

1140 if(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 =
RTC_AœrmD©eWìkDaySñ_D©e
)

1142 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
));

1146 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
));

1151 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

1153 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
);

1154 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
tm¥eg
));

1155 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
));

1159 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = 0x00;

1160 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
)));

1163 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
)));

1164 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
)));

1166 if(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 =
RTC_AœrmD©eWìkDaySñ_D©e
)

1168 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
);

1169 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
tm¥eg
));

1173 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
);

1174 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
tm¥eg
));

1179 i‡(
RTC_F‹m©
 !
RTC_F‹m©_BIN
)

1181 
tm¥eg
 = (((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
) << 16) | \

1182 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
) << 8) | \

1183 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
) | \

1184 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
) << 16) | \

1185 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
) << 24) | \

1186 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
) | \

1187 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmMask
));

1191 
tm¥eg
 = (((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
) << 16) | \

1192 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
) << 8) | \

1193 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
)) | \

1194 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
) << 16) | \

1195 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
) << 24) | \

1196 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
) | \

1197 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmMask
));

1201 
RTC
->
WPR
 = 0xCA;

1202 
RTC
->
WPR
 = 0x53;

1205 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1207 
RTC
->
ALRMAR
 = (
uöt32_t
)
tm¥eg
;

1211 
RTC
->
ALRMBR
 = (
uöt32_t
)
tm¥eg
;

1215 
RTC
->
WPR
 = 0xFF;

1216 
	}
}

1226 
	$RTC_AœrmSåu˘Inô
(
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
)

1229 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = 
RTC_H12_AM
;

1230 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
 = 0;

1231 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
 = 0;

1232 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
 = 0;

1235 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 = 
RTC_AœrmD©eWìkDaySñ_D©e
;

1236 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
 = 1;

1239 
RTC_AœrmSåu˘
->
RTC_AœrmMask
 = 
RTC_AœrmMask_N⁄e
;

1240 
	}
}

1256 
	$RTC_GëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
)

1258 
uöt32_t
 
tm¥eg
 = 0;

1261 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1262 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
RTC_Aœrm
));

1265 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1267 
tm¥eg
 = (
uöt32_t
)(
RTC
->
ALRMAR
);

1271 
tm¥eg
 = (
uöt32_t
)(
RTC
->
ALRMBR
);

1275 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_HT
 | \

1276 
RTC_ALRMAR_HU
)) >> 16);

1277 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_MNT
 | \

1278 
RTC_ALRMAR_MNU
)) >> 8);

1279 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
 = (
uöt32_t
)(
tm¥eg
 & (
RTC_ALRMAR_ST
 | \

1280 
RTC_ALRMAR_SU
));

1281 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = (
uöt32_t
)((
tm¥eg
 & 
RTC_ALRMAR_PM
) >> 16);

1282 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_DT
 | 
RTC_ALRMAR_DU
)) >> 24);

1283 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_ALRMAR_WDSEL
);

1284 
RTC_AœrmSåu˘
->
RTC_AœrmMask
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_AœrmMask_AŒ
);

1286 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1288 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct-> \

1289 
RTC_AœrmTime
.
RTC_Hours
);

1290 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct-> \

1291 
RTC_AœrmTime
.
RTC_Möuãs
);

1292 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct-> \

1293 
RTC_AœrmTime
.
RTC_Sec⁄ds
);

1294 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct->RTC_AlarmDateWeekDay);

1296 
	}
}

1310 
Eº‹Sètus
 
	$RTC_AœrmCmd
(
uöt32_t
 
RTC_Aœrm
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1312 
__IO
 
uöt32_t
 
Æ¨mcou¡î
 = 0x00;

1313 
uöt32_t
 
Æ¨m°©us
 = 0x00;

1314 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1317 
	`as£π_∑øm
(
	`IS_RTC_CMD_ALARM
(
RTC_Aœrm
));

1318 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1321 
RTC
->
WPR
 = 0xCA;

1322 
RTC
->
WPR
 = 0x53;

1325 i‡(
NewSèã
 !
DISABLE
)

1327 
RTC
->
CR
 |(
uöt32_t
)
RTC_Aœrm
;

1329 
°©us
 = 
SUCCESS
;

1334 
RTC
->
CR
 &(
uöt32_t
)~
RTC_Aœrm
;

1339 
Æ¨m°©us
 = 
RTC
->
ISR
 & (
RTC_Aœrm
 >> 8);

1340 
Æ¨mcou¡î
++;

1341 } (
Æ¨mcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
Æ¨m°©us
 == 0x00));

1343 i‡((
RTC
->
ISR
 & (
RTC_Aœrm
 >> 8)Ë=
RESET
)

1345 
°©us
 = 
ERROR
;

1349 
°©us
 = 
SUCCESS
;

1354 
RTC
->
WPR
 = 0xFF;

1356  
°©us
;

1357 
	}
}

1404 
	$RTC_AœrmSubSec⁄dC⁄fig
(
uöt32_t
 
RTC_Aœrm
, uöt32_à
RTC_AœrmSubSec⁄dVÆue
, uöt32_à
RTC_AœrmSubSec⁄dMask
)

1406 
uöt32_t
 
tm¥eg
 = 0;

1409 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
RTC_Aœrm
));

1410 
	`as£π_∑øm
(
	`IS_RTC_ALARM_SUB_SECOND_VALUE
(
RTC_AœrmSubSec⁄dVÆue
));

1411 
	`as£π_∑øm
(
	`IS_RTC_ALARM_SUB_SECOND_MASK
(
RTC_AœrmSubSec⁄dMask
));

1414 
RTC
->
WPR
 = 0xCA;

1415 
RTC
->
WPR
 = 0x53;

1418 
tm¥eg
 = (
uöt32_t
Ë(uöt32_t)(
RTC_AœrmSubSec⁄dVÆue
Ë| (uöt32_t)(
RTC_AœrmSubSec⁄dMask
);

1420 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1423 
RTC
->
ALRMASSR
 = 
tm¥eg
;

1428 
RTC
->
ALRMBSSR
 = 
tm¥eg
;

1432 
RTC
->
WPR
 = 0xFF;

1434 
	}
}

1445 
uöt32_t
 
	$RTC_GëAœrmSubSec⁄d
(
uöt32_t
 
RTC_Aœrm
)

1447 
uöt32_t
 
tm¥eg
 = 0;

1450 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1452 
tm¥eg
 = (
uöt32_t
)((
RTC
->
ALRMASSR
Ë& 
RTC_ALRMASSR_SS
);

1456 
tm¥eg
 = (
uöt32_t
)((
RTC
->
ALRMBSSR
Ë& 
RTC_ALRMBSSR_SS
);

1459  (
tm¥eg
);

1460 
	}
}

1494 
	$RTC_WakeUpClockC⁄fig
(
uöt32_t
 
RTC_WakeUpClock
)

1497 
	`as£π_∑øm
(
	`IS_RTC_WAKEUP_CLOCK
(
RTC_WakeUpClock
));

1500 
RTC
->
WPR
 = 0xCA;

1501 
RTC
->
WPR
 = 0x53;

1504 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_WUCKSEL
;

1507 
RTC
->
CR
 |(
uöt32_t
)
RTC_WakeUpClock
;

1510 
RTC
->
WPR
 = 0xFF;

1511 
	}
}

1521 
	$RTC_SëWakeUpCou¡î
(
uöt32_t
 
RTC_WakeUpCou¡î
)

1524 
	`as£π_∑øm
(
	`IS_RTC_WAKEUP_COUNTER
(
RTC_WakeUpCou¡î
));

1527 
RTC
->
WPR
 = 0xCA;

1528 
RTC
->
WPR
 = 0x53;

1531 
RTC
->
WUTR
 = (
uöt32_t
)
RTC_WakeUpCou¡î
;

1534 
RTC
->
WPR
 = 0xFF;

1535 
	}
}

1542 
uöt32_t
 
	$RTC_GëWakeUpCou¡î
()

1545  ((
uöt32_t
)(
RTC
->
WUTR
 & 
RTC_WUTR_WUT
));

1546 
	}
}

1554 
Eº‹Sètus
 
	$RTC_WakeUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1556 
__IO
 
uöt32_t
 
wutcou¡î
 = 0x00;

1557 
uöt32_t
 
wutwf°©us
 = 0x00;

1558 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1561 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1564 
RTC
->
WPR
 = 0xCA;

1565 
RTC
->
WPR
 = 0x53;

1567 i‡(
NewSèã
 !
DISABLE
)

1570 
RTC
->
CR
 |(
uöt32_t
)
RTC_CR_WUTE
;

1571 
°©us
 = 
SUCCESS
;

1576 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_WUTE
;

1580 
wutwf°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_WUTWF
;

1581 
wutcou¡î
++;

1582 } (
wutcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
wutwf°©us
 == 0x00));

1584 i‡((
RTC
->
ISR
 & 
RTC_ISR_WUTWF
Ë=
RESET
)

1586 
°©us
 = 
ERROR
;

1590 
°©us
 = 
SUCCESS
;

1595 
RTC
->
WPR
 = 0xFF;

1597  
°©us
;

1598 
	}
}

1631 
	$RTC_DayLightSavögC⁄fig
(
uöt32_t
 
RTC_DayLightSavög
, uöt32_à
RTC_St‹eO≥øti⁄
)

1634 
	`as£π_∑øm
(
	`IS_RTC_DAYLIGHT_SAVING
(
RTC_DayLightSavög
));

1635 
	`as£π_∑øm
(
	`IS_RTC_STORE_OPERATION
(
RTC_St‹eO≥øti⁄
));

1638 
RTC
->
WPR
 = 0xCA;

1639 
RTC
->
WPR
 = 0x53;

1642 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_CR_BCK
);

1645 
RTC
->
CR
 |(
uöt32_t
)(
RTC_DayLightSavög
 | 
RTC_St‹eO≥øti⁄
);

1648 
RTC
->
WPR
 = 0xFF;

1649 
	}
}

1658 
uöt32_t
 
	$RTC_GëSt‹eO≥øti⁄
()

1660  (
RTC
->
CR
 & 
RTC_CR_BCK
);

1661 
	}
}

1697 
	$RTC_OuçutC⁄fig
(
uöt32_t
 
RTC_Ouçut
, uöt32_à
RTC_OuçutPﬁ¨ôy
)

1700 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT
(
RTC_Ouçut
));

1701 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT_POL
(
RTC_OuçutPﬁ¨ôy
));

1704 
RTC
->
WPR
 = 0xCA;

1705 
RTC
->
WPR
 = 0x53;

1708 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_CR_OSEL
 | 
RTC_CR_POL
);

1711 
RTC
->
CR
 |(
uöt32_t
)(
RTC_Ouçut
 | 
RTC_OuçutPﬁ¨ôy
);

1714 
RTC
->
WPR
 = 0xFF;

1715 
	}
}

1751 
Eº‹Sètus
 
	$RTC_Cﬂr£CÆibC⁄fig
(
uöt32_t
 
RTC_CÆibSign
, uöt32_à
VÆue
)

1753 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1756 
	`as£π_∑øm
(
	`IS_RTC_CALIB_SIGN
(
RTC_CÆibSign
));

1757 
	`as£π_∑øm
(
	`IS_RTC_CALIB_VALUE
(
VÆue
));

1760 
RTC
->
WPR
 = 0xCA;

1761 
RTC
->
WPR
 = 0x53;

1764 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

1766 
°©us
 = 
ERROR
;

1771 
RTC
->
CALIBR
 = (
uöt32_t
)(
RTC_CÆibSign
 | 
VÆue
);

1773 
	`RTC_ExôInôMode
();

1775 
°©us
 = 
SUCCESS
;

1779 
RTC
->
WPR
 = 0xFF;

1781  
°©us
;

1782 
	}
}

1792 
Eº‹Sètus
 
	$RTC_Cﬂr£CÆibCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1794 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1797 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1800 
RTC
->
WPR
 = 0xCA;

1801 
RTC
->
WPR
 = 0x53;

1804 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

1806 
°©us
 = 
ERROR
;

1810 i‡(
NewSèã
 !
DISABLE
)

1813 
RTC
->
CR
 |(
uöt32_t
)
RTC_CR_DCE
;

1818 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_DCE
;

1821 
	`RTC_ExôInôMode
();

1823 
°©us
 = 
SUCCESS
;

1827 
RTC
->
WPR
 = 0xFF;

1829  
°©us
;

1830 
	}
}

1838 
	$RTC_CÆibOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1841 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1844 
RTC
->
WPR
 = 0xCA;

1845 
RTC
->
WPR
 = 0x53;

1847 i‡(
NewSèã
 !
DISABLE
)

1850 
RTC
->
CR
 |(
uöt32_t
)
RTC_CR_COE
;

1855 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_COE
;

1859 
RTC
->
WPR
 = 0xFF;

1860 
	}
}

1870 
	$RTC_CÆibOuçutC⁄fig
(
uöt32_t
 
RTC_CÆibOuçut
)

1873 
	`as£π_∑øm
(
	`IS_RTC_CALIB_OUTPUT
(
RTC_CÆibOuçut
));

1876 
RTC
->
WPR
 = 0xCA;

1877 
RTC
->
WPR
 = 0x53;

1880 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_CR_COSEL
);

1883 
RTC
->
CR
 |(
uöt32_t
)
RTC_CÆibOuçut
;

1886 
RTC
->
WPR
 = 0xFF;

1887 
	}
}

1906 
Eº‹Sètus
 
	$RTC_SmoŸhCÆibC⁄fig
(
uöt32_t
 
RTC_SmoŸhCÆibPîiod
,

1907 
uöt32_t
 
RTC_SmoŸhCÆibPlusPul£s
,

1908 
uöt32_t
 
RTC_SmouthCÆibMöusPul£sVÆue
)

1910 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1911 
uöt32_t
 
ªˇÕfcou¡
 = 0;

1914 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_PERIOD
(
RTC_SmoŸhCÆibPîiod
));

1915 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_PLUS
(
RTC_SmoŸhCÆibPlusPul£s
));

1916 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_MINUS
(
RTC_SmouthCÆibMöusPul£sVÆue
));

1919 
RTC
->
WPR
 = 0xCA;

1920 
RTC
->
WPR
 = 0x53;

1923 i‡((
RTC
->
ISR
 & 
RTC_ISR_RECALPF
Ë!
RESET
)

1926 ((
RTC
->
ISR
 & 
RTC_ISR_RECALPF
Ë!
RESET
Ë&& (
ªˇÕfcou¡
 !
RECALPF_TIMEOUT
))

1928 
ªˇÕfcou¡
++;

1933 i‡((
RTC
->
ISR
 & 
RTC_ISR_RECALPF
Ë=
RESET
)

1936 
RTC
->
CALR
 = (
uöt32_t
)((uöt32_t)
RTC_SmoŸhCÆibPîiod
 | (uöt32_t)
RTC_SmoŸhCÆibPlusPul£s
 | (uöt32_t)
RTC_SmouthCÆibMöusPul£sVÆue
);

1938 
°©us
 = 
SUCCESS
;

1942 
°©us
 = 
ERROR
;

1946 
RTC
->
WPR
 = 0xFF;

1948  (
Eº‹Sètus
)(
°©us
);

1949 
	}
}

1982 
	$RTC_TimeSèmpCmd
(
uöt32_t
 
RTC_TimeSèmpEdge
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1984 
uöt32_t
 
tm¥eg
 = 0;

1987 
	`as£π_∑øm
(
	`IS_RTC_TIMESTAMP_EDGE
(
RTC_TimeSèmpEdge
));

1988 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1991 
tm¥eg
 = (
uöt32_t
)(
RTC
->
CR
 & (uöt32_t)~(
RTC_CR_TSEDGE
 | 
RTC_CR_TSE
));

1994 i‡(
NewSèã
 !
DISABLE
)

1996 
tm¥eg
 |(
uöt32_t
)(
RTC_TimeSèmpEdge
 | 
RTC_CR_TSE
);

2000 
tm¥eg
 |(
uöt32_t
)(
RTC_TimeSèmpEdge
);

2004 
RTC
->
WPR
 = 0xCA;

2005 
RTC
->
WPR
 = 0x53;

2008 
RTC
->
CR
 = (
uöt32_t
)
tm¥eg
;

2011 
RTC
->
WPR
 = 0xFF;

2012 
	}
}

2026 
	$RTC_GëTimeSèmp
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_SèmpTimeSåu˘
,

2027 
RTC_D©eTy≥Def
* 
RTC_SèmpD©eSåu˘
)

2029 
uöt32_t
 
tm±ime
 = 0, 
tmpd©e
 = 0;

2032 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

2035 
tm±ime
 = (
uöt32_t
)(
RTC
->
TSTR
 & 
RTC_TR_RESERVED_MASK
);

2036 
tmpd©e
 = (
uöt32_t
)(
RTC
->
TSDR
 & 
RTC_DR_RESERVED_MASK
);

2039 
RTC_SèmpTimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_HT
 | 
RTC_TR_HU
)) >> 16);

2040 
RTC_SèmpTimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_MNT
 | 
RTC_TR_MNU
)) >> 8);

2041 
RTC_SèmpTimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)(
tm±ime
 & (
RTC_TR_ST
 | 
RTC_TR_SU
));

2042 
RTC_SèmpTimeSåu˘
->
RTC_H12
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_PM
)) >> 16);

2045 
RTC_SèmpD©eSåu˘
->
RTC_Yór
 = 0;

2046 
RTC_SèmpD©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)((
tmpd©e
 & (
RTC_DR_MT
 | 
RTC_DR_MU
)) >> 8);

2047 
RTC_SèmpD©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)(
tmpd©e
 & (
RTC_DR_DT
 | 
RTC_DR_DU
));

2048 
RTC_SèmpD©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)((
tmpd©e
 & (
RTC_DR_WDU
)) >> 13);

2051 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

2054 
RTC_SèmpTimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampTimeStruct->RTC_Hours);

2055 
RTC_SèmpTimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampTimeStruct->RTC_Minutes);

2056 
RTC_SèmpTimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampTimeStruct->RTC_Seconds);

2059 
RTC_SèmpD©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampDateStruct->RTC_Month);

2060 
RTC_SèmpD©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampDateStruct->RTC_Date);

2061 
RTC_SèmpD©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampDateStruct->RTC_WeekDay);

2063 
	}
}

2070 
uöt32_t
 
	$RTC_GëTimeSèmpSubSec⁄d
()

2073  (
uöt32_t
)(
RTC
->
TSSSR
);

2074 
	}
}

2105 
	$RTC_Tam≥rTriggîC⁄fig
(
uöt32_t
 
RTC_Tam≥r
, uöt32_à
RTC_Tam≥rTriggî
)

2108 
	`as£π_∑øm
(
	`IS_RTC_TAMPER
(
RTC_Tam≥r
));

2109 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_TRIGGER
(
RTC_Tam≥rTriggî
));

2111 i‡(
RTC_Tam≥rTriggî
 =
RTC_Tam≥rTriggî_RisögEdge
)

2114 
RTC
->
TAFCR
 &(
uöt32_t
)((uöt32_t)~(
RTC_Tam≥r
 << 1));

2119 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_Tam≥r
 << 1);

2121 
	}
}

2131 
	$RTC_Tam≥rCmd
(
uöt32_t
 
RTC_Tam≥r
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2134 
	`as£π_∑øm
(
	`IS_RTC_TAMPER
(
RTC_Tam≥r
));

2135 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2137 i‡(
NewSèã
 !
DISABLE
)

2140 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥r
;

2145 
RTC
->
TAFCR
 &(
uöt32_t
)~
RTC_Tam≥r
;

2147 
	}
}

2162 
	$RTC_Tam≥rFûãrC⁄fig
(
uöt32_t
 
RTC_Tam≥rFûãr
)

2165 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_FILTER
(
RTC_Tam≥rFûãr
));

2168 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPFLT
);

2171 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥rFûãr
;

2172 
	}
}

2196 
	$RTC_Tam≥rSam∂ögFªqC⁄fig
(
uöt32_t
 
RTC_Tam≥rSam∂ögFªq
)

2199 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_SAMPLING_FREQ
(
RTC_Tam≥rSam∂ögFªq
));

2202 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPFREQ
);

2205 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥rSam∂ögFªq
;

2206 
	}
}

2219 
	$RTC_Tam≥rPösPªch¨geDuøti⁄
(
uöt32_t
 
RTC_Tam≥rPªch¨geDuøti⁄
)

2222 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_PRECHARGE_DURATION
(
RTC_Tam≥rPªch¨geDuøti⁄
));

2225 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPPRCH
);

2228 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥rPªch¨geDuøti⁄
;

2229 
	}
}

2239 
	$RTC_TimeSèmpOnTam≥rDëe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

2242 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2244 i‡(
NewSèã
 !
DISABLE
)

2247 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_TAFCR_TAMPTS
;

2252 
RTC
->
TAFCR
 &(
uöt32_t
)~
RTC_TAFCR_TAMPTS
;

2254 
	}
}

2262 
	$RTC_Tam≥rPuŒUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

2265 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2267 i‡(
NewSèã
 !
DISABLE
)

2270 
RTC
->
TAFCR
 &(
uöt32_t
)~
RTC_TAFCR_TAMPPUDIS
;

2275 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_TAFCR_TAMPPUDIS
;

2277 
	}
}

2303 
	$RTC_WrôeBackupRegi°î
(
uöt32_t
 
RTC_BKP_DR
, uöt32_à
D©a
)

2305 
__IO
 
uöt32_t
 
tmp
 = 0;

2308 
	`as£π_∑øm
(
	`IS_RTC_BKP
(
RTC_BKP_DR
));

2310 
tmp
 = 
RTC_BASE
 + 0x50;

2311 
tmp
 +(
RTC_BKP_DR
 * 4);

2314 *(
__IO
 
uöt32_t
 *)
tmp
 = (uöt32_t)
D©a
;

2315 
	}
}

2324 
uöt32_t
 
	$RTC_RódBackupRegi°î
(
uöt32_t
 
RTC_BKP_DR
)

2326 
__IO
 
uöt32_t
 
tmp
 = 0;

2329 
	`as£π_∑øm
(
	`IS_RTC_BKP
(
RTC_BKP_DR
));

2331 
tmp
 = 
RTC_BASE
 + 0x50;

2332 
tmp
 +(
RTC_BKP_DR
 * 4);

2335  (*(
__IO
 
uöt32_t
 *)
tmp
);

2336 
	}
}

2363 
	$RTC_Tam≥rPöSñe˘i⁄
(
uöt32_t
 
RTC_Tam≥rPö
)

2366 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_PIN
(
RTC_Tam≥rPö
));

2368 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPINSEL
);

2369 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_Tam≥rPö
);

2370 
	}
}

2380 
	$RTC_TimeSèmpPöSñe˘i⁄
(
uöt32_t
 
RTC_TimeSèmpPö
)

2383 
	`as£π_∑øm
(
	`IS_RTC_TIMESTAMP_PIN
(
RTC_TimeSèmpPö
));

2385 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TSINSEL
);

2386 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_TimeSèmpPö
);

2387 
	}
}

2399 
	$RTC_OuçutTy≥C⁄fig
(
uöt32_t
 
RTC_OuçutTy≥
)

2402 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT_TYPE
(
RTC_OuçutTy≥
));

2404 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_ALARMOUTTYPE
);

2405 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_OuçutTy≥
);

2406 
	}
}

2437 
Eº‹Sètus
 
	$RTC_SynchroShi·C⁄fig
(
uöt32_t
 
RTC_Shi·Add1S
, uöt32_à
RTC_Shi·SubFS
)

2439 
Eº‹Sètus
 
°©us
 = 
ERROR
;

2440 
uöt32_t
 
shpfcou¡
 = 0;

2443 
	`as£π_∑øm
(
	`IS_RTC_SHIFT_ADD1S
(
RTC_Shi·Add1S
));

2444 
	`as£π_∑øm
(
	`IS_RTC_SHIFT_SUBFS
(
RTC_Shi·SubFS
));

2447 
RTC
->
WPR
 = 0xCA;

2448 
RTC
->
WPR
 = 0x53;

2451 i‡((
RTC
->
ISR
 & 
RTC_ISR_SHPF
Ë!
RESET
)

2454 ((
RTC
->
ISR
 & 
RTC_ISR_SHPF
Ë!
RESET
Ë&& (
shpfcou¡
 !
SHPF_TIMEOUT
))

2456 
shpfcou¡
++;

2461 i‡((
RTC
->
ISR
 & 
RTC_ISR_SHPF
Ë=
RESET
)

2464 if((
RTC
->
CR
 & 
RTC_CR_REFCKON
Ë=
RESET
)

2467 
RTC
->
SHIFTR
 = (
uöt32_t
)(uöt32_t)(
RTC_Shi·SubFS
Ë| (uöt32_t)(
RTC_Shi·Add1S
);

2469 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

2471 
°©us
 = 
ERROR
;

2475 
°©us
 = 
SUCCESS
;

2480 
°©us
 = 
ERROR
;

2485 
°©us
 = 
ERROR
;

2489 
RTC
->
WPR
 = 0xFF;

2491  (
Eº‹Sètus
)(
°©us
);

2492 
	}
}

2557 
	$RTC_ITC⁄fig
(
uöt32_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2560 
	`as£π_∑øm
(
	`IS_RTC_CONFIG_IT
(
RTC_IT
));

2561 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2564 
RTC
->
WPR
 = 0xCA;

2565 
RTC
->
WPR
 = 0x53;

2567 i‡(
NewSèã
 !
DISABLE
)

2570 
RTC
->
CR
 |(
uöt32_t
)(
RTC_IT
 & ~
RTC_TAFCR_TAMPIE
);

2572 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_IT
 & 
RTC_TAFCR_TAMPIE
);

2577 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_IT
 & (uöt32_t)~
RTC_TAFCR_TAMPIE
);

2579 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_IT
 & 
RTC_TAFCR_TAMPIE
);

2582 
RTC
->
WPR
 = 0xFF;

2583 
	}
}

2605 
FœgSètus
 
	$RTC_GëFœgSètus
(
uöt32_t
 
RTC_FLAG
)

2607 
FœgSètus
 
bô°©us
 = 
RESET
;

2608 
uöt32_t
 
tm¥eg
 = 0;

2611 
	`as£π_∑øm
(
	`IS_RTC_GET_FLAG
(
RTC_FLAG
));

2614 
tm¥eg
 = (
uöt32_t
)(
RTC
->
ISR
 & 
RTC_FLAGS_MASK
);

2617 i‡((
tm¥eg
 & 
RTC_FLAG
Ë!(
uöt32_t
)
RESET
)

2619 
bô°©us
 = 
SET
;

2623 
bô°©us
 = 
RESET
;

2625  
bô°©us
;

2626 
	}
}

2641 
	$RTC_CÀ¨Fœg
(
uöt32_t
 
RTC_FLAG
)

2644 
	`as£π_∑øm
(
	`IS_RTC_CLEAR_FLAG
(
RTC_FLAG
));

2647 
RTC
->
ISR
 = (
uöt32_t
)((uöt32_t)(~((
RTC_FLAG
 | 
RTC_ISR_INIT
)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));

2648 
	}
}

2661 
ITSètus
 
	$RTC_GëITSètus
(
uöt32_t
 
RTC_IT
)

2663 
ITSètus
 
bô°©us
 = 
RESET
;

2664 
uöt32_t
 
tm¥eg
 = 0, 
íabÀ°©us
 = 0;

2667 
	`as£π_∑øm
(
	`IS_RTC_GET_IT
(
RTC_IT
));

2670 
tm¥eg
 = (
uöt32_t
)(
RTC
->
TAFCR
 & (
RTC_TAFCR_TAMPIE
));

2673 
íabÀ°©us
 = (
uöt32_t
)((
RTC
->
CR
 & 
RTC_IT
Ë| (
tm¥eg
 & (RTC_IT >> 15)));

2676 
tm¥eg
 = (
uöt32_t
)((
RTC
->
ISR
 & (uöt32_t)(
RTC_IT
 >> 4)));

2679 i‡((
íabÀ°©us
 !(
uöt32_t
)
RESET
Ë&& ((
tm¥eg
 & 0x0000FFFF) != (uint32_t)RESET))

2681 
bô°©us
 = 
SET
;

2685 
bô°©us
 = 
RESET
;

2687  
bô°©us
;

2688 
	}
}

2701 
	$RTC_CÀ¨ITPídögBô
(
uöt32_t
 
RTC_IT
)

2703 
uöt32_t
 
tm¥eg
 = 0;

2706 
	`as£π_∑øm
(
	`IS_RTC_CLEAR_IT
(
RTC_IT
));

2709 
tm¥eg
 = (
uöt32_t
)(
RTC_IT
 >> 4);

2712 
RTC
->
ISR
 = (
uöt32_t
)((uöt32_t)(~((
tm¥eg
 | 
RTC_ISR_INIT
)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));

2713 
	}
}

2724 
uöt8_t
 
	$RTC_ByãToBcd2
(
uöt8_t
 
VÆue
)

2726 
uöt8_t
 
bcdhigh
 = 0;

2728 
VÆue
 >= 10)

2730 
bcdhigh
++;

2731 
VÆue
 -= 10;

2734  ((
uöt8_t
)(
bcdhigh
 << 4Ë| 
VÆue
);

2735 
	}
}

2742 
uöt8_t
 
	$RTC_Bcd2ToByã
(
uöt8_t
 
VÆue
)

2744 
uöt8_t
 
tmp
 = 0;

2745 
tmp
 = ((
uöt8_t
)(
VÆue
 & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;

2746  (
tmp
 + (
VÆue
 & (
uöt8_t
)0x0F));

2747 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_sai.c

126 
	~"°m32f4xx_ßi.h
"

127 
	~"°m32f4xx_rcc.h
"

142 
	#CR1_CLEAR_MASK
 ((
uöt32_t
)0xFF07C010)

	)

143 
	#FRCR_CLEAR_MASK
 ((
uöt32_t
)0xFFF88000)

	)

144 
	#SLOTR_CLEAR_MASK
 ((
uöt32_t
)0x0000F020)

	)

182 
	$SAI_DeInô
(
SAI_Ty≥Def
* 
SAIx
)

185 
	`as£π_∑øm
(
	`IS_SAI_PERIPH
(
SAIx
));

187 if(
SAIx
 =
SAI1
)

190 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SAI1
, 
ENABLE
);

192 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SAI1
, 
DISABLE
);

196 #i‡
	`deföed
(
STM32F446xx
)

197 if(
SAIx
 =
SAI2
)

200 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SAI2
, 
ENABLE
);

202 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SAI2
, 
DISABLE
);

206 
	}
}

220 
	$SAI_Inô
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
SAI_InôTy≥Def
* 
SAI_InôSåu˘
)

222 
uöt32_t
 
tm¥eg
 = 0;

225 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

228 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_MODE
(
SAI_InôSåu˘
->
SAI_AudioMode
));

229 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PROTOCOL
(
SAI_InôSåu˘
->
SAI_PrŸocﬁ
));

230 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_DATASIZE
(
SAI_InôSåu˘
->
SAI_D©aSize
));

231 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_FIRST_BIT
(
SAI_InôSåu˘
->
SAI_Fú°Bô
));

232 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_CLOCK_STROBING
(
SAI_InôSåu˘
->
SAI_ClockSåobög
));

233 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_SYNCHRO
(
SAI_InôSåu˘
->
SAI_Synchro
));

234 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_OUTPUT_DRIVE
(
SAI_InôSåu˘
->
SAI_OUTDRIV
));

235 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_NODIVIDER
(
SAI_InôSåu˘
->
SAI_NoDividî
));

236 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_MASTER_DIVIDER
(
SAI_InôSåu˘
->
SAI_Ma°îDividî
));

237 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_FIFO_THRESHOLD
(
SAI_InôSåu˘
->
SAI_FIFOThªshﬁd
));

241 
tm¥eg
 = 
SAI_Block_x
->
CR1
;

243 
tm¥eg
 &
CR1_CLEAR_MASK
;

255 
tm¥eg
 |(
uöt32_t
)(
SAI_InôSåu˘
->
SAI_AudioMode
 | SAI_InôSåu˘->
SAI_PrŸocﬁ
 |

256 
SAI_InôSåu˘
->
SAI_D©aSize
 | SAI_InôSåu˘->
SAI_Fú°Bô
 |

257 
SAI_InôSåu˘
->
SAI_ClockSåobög
 | SAI_InôSåu˘->
SAI_Synchro
 |

258 
SAI_InôSåu˘
->
SAI_OUTDRIV
 | SAI_InôSåu˘->
SAI_NoDividî
 |

259 (
uöt32_t
)((
SAI_InôSåu˘
->
SAI_Ma°îDividî
) << 20));

261 
SAI_Block_x
->
CR1
 = 
tm¥eg
;

265 
tm¥eg
 = 
SAI_Block_x
->
CR2
;

267 
tm¥eg
 &~(
SAI_xCR2_FTH
);

270 
tm¥eg
 |(
uöt32_t
)(
SAI_InôSåu˘
->
SAI_FIFOThªshﬁd
);

272 
SAI_Block_x
->
CR2
 = 
tm¥eg
;

273 
	}
}

287 
	$SAI_FømeInô
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
SAI_FømeInôTy≥Def
* 
SAI_FømeInôSåu˘
)

289 
uöt32_t
 
tm¥eg
 = 0;

292 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

295 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_FRAME_LENGTH
(
SAI_FømeInôSåu˘
->
SAI_FømeLígth
));

296 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_ACTIVE_FRAME
(
SAI_FømeInôSåu˘
->
SAI_A˘iveFømeLígth
));

297 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_FS_DEFINITION
(
SAI_FømeInôSåu˘
->
SAI_FSDeföôi⁄
));

298 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_FS_POLARITY
(
SAI_FømeInôSåu˘
->
SAI_FSPﬁ¨ôy
));

299 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_FS_OFFSET
(
SAI_FømeInôSåu˘
->
SAI_FSOff£t
));

303 
tm¥eg
 = 
SAI_Block_x
->
FRCR
;

305 
tm¥eg
 &
FRCR_CLEAR_MASK
;

313 
tm¥eg
 |(
uöt32_t
)((uöt32_t)(
SAI_FømeInôSåu˘
->
SAI_FømeLígth
 - 1) |

314 
SAI_FømeInôSåu˘
->
SAI_FSOff£t
 |

315 
SAI_FømeInôSåu˘
->
SAI_FSDeföôi⁄
 |

316 
SAI_FømeInôSåu˘
->
SAI_FSPﬁ¨ôy
 |

317 (
uöt32_t
)((
SAI_FømeInôSåu˘
->
SAI_A˘iveFømeLígth
 - 1) << 8));

320 
SAI_Block_x
->
FRCR
 = 
tm¥eg
;

321 
	}
}

335 
	$SAI_SlŸInô
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
SAI_SlŸInôTy≥Def
* 
SAI_SlŸInôSåu˘
)

337 
uöt32_t
 
tm¥eg
 = 0;

340 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

343 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_FIRSTBIT_OFFSET
(
SAI_SlŸInôSåu˘
->
SAI_Fú°BôOff£t
));

344 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_SLOT_SIZE
(
SAI_SlŸInôSåu˘
->
SAI_SlŸSize
));

345 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_SLOT_NUMBER
(
SAI_SlŸInôSåu˘
->
SAI_SlŸNumbî
));

346 
	`as£π_∑øm
(
	`IS_SAI_SLOT_ACTIVE
(
SAI_SlŸInôSåu˘
->
SAI_SlŸA˘ive
));

350 
tm¥eg
 = 
SAI_Block_x
->
SLOTR
;

352 
tm¥eg
 &
SLOTR_CLEAR_MASK
;

359 
tm¥eg
 |(
uöt32_t
)(
SAI_SlŸInôSåu˘
->
SAI_Fú°BôOff£t
 |

360 
SAI_SlŸInôSåu˘
->
SAI_SlŸSize
 |

361 
SAI_SlŸInôSåu˘
->
SAI_SlŸA˘ive
 |

362 (
uöt32_t
)((
SAI_SlŸInôSåu˘
->
SAI_SlŸNumbî
 - 1) << 8));

365 
SAI_Block_x
->
SLOTR
 = 
tm¥eg
;

366 
	}
}

374 
	$SAI_Såu˘Inô
(
SAI_InôTy≥Def
* 
SAI_InôSåu˘
)

378 
SAI_InôSåu˘
->
SAI_AudioMode
 = 
SAI_Mode_Ma°îTx
;

380 
SAI_InôSåu˘
->
SAI_PrŸocﬁ
 = 
SAI_Fªe_PrŸocﬁ
;

382 
SAI_InôSåu˘
->
SAI_D©aSize
 = 
SAI_D©aSize_8b
;

384 
SAI_InôSåu˘
->
SAI_Fú°Bô
 = 
SAI_Fú°Bô_MSB
;

386 
SAI_InôSåu˘
->
SAI_ClockSåobög
 = 
SAI_ClockSåobög_FÆlögEdge
;

388 
SAI_InôSåu˘
->
SAI_Synchro
 = 
SAI_Asynchr⁄ous
;

390 
SAI_InôSåu˘
->
SAI_OUTDRIV
 = 
SAI_OuçutDrive_DißbÀd
;

392 
SAI_InôSåu˘
->
SAI_NoDividî
 = 
SAI_Ma°îDividî_E«bÀd
;

394 
SAI_InôSåu˘
->
SAI_Ma°îDividî
 = 0;

396 
SAI_InôSåu˘
->
SAI_FIFOThªshﬁd
 = 
SAI_Thªshﬁd_FIFOEm±y
;

397 
	}
}

405 
	$SAI_FømeSåu˘Inô
(
SAI_FømeInôTy≥Def
* 
SAI_FømeInôSåu˘
)

409 
SAI_FømeInôSåu˘
->
SAI_FømeLígth
 = 8;

411 
SAI_FømeInôSåu˘
->
SAI_A˘iveFømeLígth
 = 1;

413 
SAI_FømeInôSåu˘
->
SAI_FSDeföôi⁄
 = 
SAI_FS_SèπFøme
;

415 
SAI_FømeInôSåu˘
->
SAI_FSPﬁ¨ôy
 = 
SAI_FS_A˘iveLow
;

417 
SAI_FømeInôSåu˘
->
SAI_FSOff£t
 = 
SAI_FS_Fú°Bô
;

418 
	}
}

426 
	$SAI_SlŸSåu˘Inô
(
SAI_SlŸInôTy≥Def
* 
SAI_SlŸInôSåu˘
)

430 
SAI_SlŸInôSåu˘
->
SAI_Fú°BôOff£t
 = 0;

432 
SAI_SlŸInôSåu˘
->
SAI_SlŸSize
 = 
SAI_SlŸSize_D©aSize
;

434 
SAI_SlŸInôSåu˘
->
SAI_SlŸNumbî
 = 1;

436 
SAI_SlŸInôSåu˘
->
SAI_SlŸA˘ive
 = 
SAI_SlŸ_NŸA˘ive
;

438 
	}
}

447 
	$SAI_Cmd
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

450 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

451 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

452 i‡(
NewSèã
 !
DISABLE
)

455 
SAI_Block_x
->
CR1
 |
SAI_xCR1_SAIEN
;

460 
SAI_Block_x
->
CR1
 &~(
SAI_xCR1_SAIEN
);

462 
	}
}

476 
	$SAI_M⁄oModeC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_M⁄o_SåeoMode
)

479 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

480 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_MONO_STREO_MODE
(
SAI_M⁄oMode
));

482 
SAI_Block_x
->
CR1
 &~(
SAI_xCR1_MONO
);

484 
SAI_Block_x
->
CR1
 |
SAI_M⁄oMode
;

485 
	}
}

499 
	$SAI_TRISèãC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_TRISèã
)

502 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

503 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_TRISTATE_MANAGEMENT
(
SAI_TRISèã
));

505 
SAI_Block_x
->
CR1
 &~(
SAI_xCR1_MONO
);

507 
SAI_Block_x
->
CR1
 |
SAI_M⁄oMode
;

509 
	}
}

527 
	$SAI_Com∑ndögModeC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_Com∑ndögMode
)

530 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

531 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_COMPANDING_MODE
(
SAI_Com∑ndögMode
));

533 
SAI_Block_x
->
CR2
 &~(
SAI_xCR2_COMP
);

535 
SAI_Block_x
->
CR2
 |
SAI_Com∑ndögMode
;

536 
	}
}

551 
	$SAI_MuãModeCmd
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

554 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

555 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

556 i‡(
NewSèã
 !
DISABLE
)

559 
SAI_Block_x
->
CR2
 |
SAI_xCR2_MUTE
;

564 
SAI_Block_x
->
CR2
 &~(
SAI_xCR2_MUTE
);

566 
	}
}

582 
	$SAI_MuãVÆueC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_MuãVÆue
)

585 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

586 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_MUTE_VALUE
(
SAI_MuãVÆue
));

589 
SAI_Block_x
->
CR2
 &~(
SAI_xCR2_MUTEVAL
);

591 
SAI_Block_x
->
CR2
 |
SAI_MuãVÆue
;

592 
	}
}

604 
	$SAI_MuãFømeCou¡îC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_MuãCou¡î
)

607 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

608 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_MUTE_COUNTER
(
SAI_MuãCou¡î
));

611 
SAI_Block_x
->
CR2
 &~(
SAI_xCR2_MUTECNT
);

613 
SAI_Block_x
->
CR2
 |(
SAI_MuãCou¡î
 << 7);

614 
	}
}

627 
	$SAI_FlushFIFO
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
)

630 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

633 
SAI_Block_x
->
CR2
 |
SAI_xCR2_FFLUSH
;

634 
	}
}

669 
uöt32_t
 
	$SAI_Re˚iveD©a
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
)

672 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

675  
SAI_Block_x
->
DR
;

676 
	}
}

685 
	$SAI_SídD©a
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
D©a
)

688 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

691 
SAI_Block_x
->
DR
 = 
D©a
;

692 
	}
}

717 
	$SAI_DMACmd
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

720 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

721 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

723 i‡(
NewSèã
 !
DISABLE
)

726 
SAI_Block_x
->
CR1
 |
SAI_xCR1_DMAEN
;

731 
SAI_Block_x
->
CR1
 &~(
SAI_xCR1_DMAEN
);

733 
	}
}

861 
	$SAI_ITC⁄fig
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

864 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

865 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

866 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_CONFIG_IT
(
SAI_IT
));

868 i‡(
NewSèã
 !
DISABLE
)

871 
SAI_Block_x
->
IMR
 |
SAI_IT
;

876 
SAI_Block_x
->
IMR
 &~(
SAI_IT
);

878 
	}
}

894 
FœgSètus
 
	$SAI_GëFœgSètus
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_FLAG
)

896 
FœgSètus
 
bô°©us
 = 
RESET
;

899 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

900 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_GET_FLAG
(
SAI_FLAG
));

903 i‡((
SAI_Block_x
->
SR
 & 
SAI_FLAG
Ë!(
uöt32_t
)
RESET
)

906 
bô°©us
 = 
SET
;

911 
bô°©us
 = 
RESET
;

914  
bô°©us
;

915 
	}
}

937 
	$SAI_CÀ¨Fœg
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_FLAG
)

940 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

941 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_CLEAR_FLAG
(
SAI_FLAG
));

944 
SAI_Block_x
->
CLRFR
 |
SAI_FLAG
;

945 
	}
}

962 
ITSètus
 
	$SAI_GëITSètus
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_IT
)

964 
ITSètus
 
bô°©us
 = 
RESET
;

965 
uöt32_t
 
íabÀ°©us
 = 0;

968 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

969 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_CONFIG_IT
(
SAI_IT
));

972 
íabÀ°©us
 = (
SAI_Block_x
->
IMR
 & 
SAI_IT
) ;

975 i‡(((
SAI_Block_x
->
SR
 & 
SAI_IT
Ë!(
uöt32_t
)
RESET
Ë&& (
íabÀ°©us
 != (uint32_t)RESET))

978 
bô°©us
 = 
SET
;

983 
bô°©us
 = 
RESET
;

986  
bô°©us
;

987 
	}
}

1009 
	$SAI_CÀ¨ITPídögBô
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
, 
uöt32_t
 
SAI_IT
)

1012 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

1013 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_CONFIG_IT
(
SAI_IT
));

1016 
SAI_Block_x
->
CLRFR
 |
SAI_IT
;

1017 
	}
}

1031 
Fun˘i⁄ÆSèã
 
	$SAI_GëCmdSètus
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
)

1033 
Fun˘i⁄ÆSèã
 
°©e
 = 
DISABLE
;

1036 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

1037 i‡((
SAI_Block_x
->
CR1
 & (
uöt32_t
)
SAI_xCR1_SAIEN
) != 0)

1040 
°©e
 = 
ENABLE
;

1046 
°©e
 = 
DISABLE
;

1048  
°©e
;

1049 
	}
}

1064 
uöt32_t
 
	$SAI_GëFIFOSètus
(
SAI_Block_Ty≥Def
* 
SAI_Block_x
)

1066 
uöt32_t
 
tm¥eg
 = 0;

1069 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PERIPH
(
SAI_Block_x
));

1072 
tm¥eg
 = (
uöt32_t
)((
SAI_Block_x
->
SR
 & 
SAI_xSR_FLVL
));

1074  
tm¥eg
;

1075 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_sdio.c

156 
	~"°m32f4xx_sdio.h
"

157 
	~"°m32f4xx_rcc.h
"

172 
	#SDIO_OFFSET
 (
SDIO_BASE
 - 
PERIPH_BASE
)

	)

176 
	#CLKCR_OFFSET
 (
SDIO_OFFSET
 + 0x04)

	)

177 
	#CLKEN_BôNumbî
 0x08

	)

178 
	#CLKCR_CLKEN_BB
 (
PERIPH_BB_BASE
 + (
CLKCR_OFFSET
 * 32Ë+ (
CLKEN_BôNumbî
 * 4))

	)

182 
	#CMD_OFFSET
 (
SDIO_OFFSET
 + 0x0C)

	)

183 
	#SDIOSUSPEND_BôNumbî
 0x0B

	)

184 
	#CMD_SDIOSUSPEND_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
SDIOSUSPEND_BôNumbî
 * 4))

	)

187 
	#ENCMDCOMPL_BôNumbî
 0x0C

	)

188 
	#CMD_ENCMDCOMPL_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ENCMDCOMPL_BôNumbî
 * 4))

	)

191 
	#NIEN_BôNumbî
 0x0D

	)

192 
	#CMD_NIEN_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
NIEN_BôNumbî
 * 4))

	)

195 
	#ATACMD_BôNumbî
 0x0E

	)

196 
	#CMD_ATACMD_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ATACMD_BôNumbî
 * 4))

	)

200 
	#DCTRL_OFFSET
 (
SDIO_OFFSET
 + 0x2C)

	)

201 
	#DMAEN_BôNumbî
 0x03

	)

202 
	#DCTRL_DMAEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
DMAEN_BôNumbî
 * 4))

	)

205 
	#RWSTART_BôNumbî
 0x08

	)

206 
	#DCTRL_RWSTART_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTART_BôNumbî
 * 4))

	)

209 
	#RWSTOP_BôNumbî
 0x09

	)

210 
	#DCTRL_RWSTOP_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTOP_BôNumbî
 * 4))

	)

213 
	#RWMOD_BôNumbî
 0x0A

	)

214 
	#DCTRL_RWMOD_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWMOD_BôNumbî
 * 4))

	)

217 
	#SDIOEN_BôNumbî
 0x0B

	)

218 
	#DCTRL_SDIOEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
SDIOEN_BôNumbî
 * 4))

	)

223 
	#CLKCR_CLEAR_MASK
 ((
uöt32_t
)0xFFFF8100)

	)

227 
	#PWR_PWRCTRL_MASK
 ((
uöt32_t
)0xFFFFFFFC)

	)

231 
	#DCTRL_CLEAR_MASK
 ((
uöt32_t
)0xFFFFFF08)

	)

235 
	#CMD_CLEAR_MASK
 ((
uöt32_t
)0xFFFFF800)

	)

238 
	#SDIO_RESP_ADDR
 ((
uöt32_t
)(
SDIO_BASE
 + 0x14))

	)

266 
	$SDIO_DeInô
()

268 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SDIO
, 
ENABLE
);

269 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SDIO
, 
DISABLE
);

270 
	}
}

279 
	$SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

281 
uöt32_t
 
tm¥eg
 = 0;

284 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_EDGE
(
SDIO_InôSåu˘
->
SDIO_ClockEdge
));

285 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_BYPASS
(
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
));

286 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_POWER_SAVE
(
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
));

287 
	`as£π_∑øm
(
	`IS_SDIO_BUS_WIDE
(
SDIO_InôSåu˘
->
SDIO_BusWide
));

288 
	`as£π_∑øm
(
	`IS_SDIO_HARDWARE_FLOW_CONTROL
(
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
));

292 
tm¥eg
 = 
SDIO
->
CLKCR
;

295 
tm¥eg
 &
CLKCR_CLEAR_MASK
;

303 
tm¥eg
 |(
SDIO_InôSåu˘
->
SDIO_ClockDiv
 | SDIO_InôSåu˘->
SDIO_ClockPowîSave
 |

304 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 | SDIO_InôSåu˘->
SDIO_BusWide
 |

305 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 | SDIO_InôSåu˘->
SDIO_H¨dw¨eFlowC⁄åﬁ
);

308 
SDIO
->
CLKCR
 = 
tm¥eg
;

309 
	}
}

317 
	$SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

320 
SDIO_InôSåu˘
->
SDIO_ClockDiv
 = 0x00;

321 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 = 
SDIO_ClockEdge_Risög
;

322 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 = 
SDIO_ClockBy∑ss_DißbÀ
;

323 
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
 = 
SDIO_ClockPowîSave_DißbÀ
;

324 
SDIO_InôSåu˘
->
SDIO_BusWide
 = 
SDIO_BusWide_1b
;

325 
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
 = 
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
;

326 
	}
}

334 
	$SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

337 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

339 *(
__IO
 
uöt32_t
 *Ë
CLKCR_CLKEN_BB
 = (uöt32_t)
NewSèã
;

340 
	}
}

350 
	$SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
)

353 
	`as£π_∑øm
(
	`IS_SDIO_POWER_STATE
(
SDIO_PowîSèã
));

355 
SDIO
->
POWER
 = 
SDIO_PowîSèã
;

356 
	}
}

367 
uöt32_t
 
	$SDIO_GëPowîSèã
()

369  (
SDIO
->
POWER
 & (~
PWR_PWRCTRL_MASK
));

370 
	}
}

399 
	$SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
)

401 
uöt32_t
 
tm¥eg
 = 0;

404 
	`as£π_∑øm
(
	`IS_SDIO_CMD_INDEX
(
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
));

405 
	`as£π_∑øm
(
	`IS_SDIO_RESPONSE
(
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
));

406 
	`as£π_∑øm
(
	`IS_SDIO_WAIT
(
SDIO_CmdInôSåu˘
->
SDIO_Waô
));

407 
	`as£π_∑øm
(
	`IS_SDIO_CPSM
(
SDIO_CmdInôSåu˘
->
SDIO_CPSM
));

411 
SDIO
->
ARG
 = 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
;

415 
tm¥eg
 = 
SDIO
->
CMD
;

417 
tm¥eg
 &
CMD_CLEAR_MASK
;

422 
tm¥eg
 |(
uöt32_t
)
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 | SDIO_CmdInôSåu˘->
SDIO_Re•⁄£


423 | 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 | SDIO_CmdInôSåu˘->
SDIO_CPSM
;

426 
SDIO
->
CMD
 = 
tm¥eg
;

427 
	}
}

435 
	$SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
)

438 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
 = 0x00;

439 
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 = 0x00;

440 
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
 = 
SDIO_Re•⁄£_No
;

441 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 = 
SDIO_Waô_No
;

442 
SDIO_CmdInôSåu˘
->
SDIO_CPSM
 = 
SDIO_CPSM_DißbÀ
;

443 
	}
}

450 
uöt8_t
 
	$SDIO_GëComm™dRe•⁄£
()

452  (
uöt8_t
)(
SDIO
->
RESPCMD
);

453 
	}
}

465 
uöt32_t
 
	$SDIO_GëRe•⁄£
(
uöt32_t
 
SDIO_RESP
)

467 
__IO
 
uöt32_t
 
tmp
 = 0;

470 
	`as£π_∑øm
(
	`IS_SDIO_RESP
(
SDIO_RESP
));

472 
tmp
 = 
SDIO_RESP_ADDR
 + 
SDIO_RESP
;

474  (*(
__IO
 
uöt32_t
 *Ë
tmp
);

475 
	}
}

503 
	$SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

505 
uöt32_t
 
tm¥eg
 = 0;

508 
	`as£π_∑øm
(
	`IS_SDIO_DATA_LENGTH
(
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
));

509 
	`as£π_∑øm
(
	`IS_SDIO_BLOCK_SIZE
(
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
));

510 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_DIR
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
));

511 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_MODE
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
));

512 
	`as£π_∑øm
(
	`IS_SDIO_DPSM
(
SDIO_D©aInôSåu˘
->
SDIO_DPSM
));

516 
SDIO
->
DTIMER
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
;

520 
SDIO
->
DLEN
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
;

524 
tm¥eg
 = 
SDIO
->
DCTRL
;

526 
tm¥eg
 &
DCTRL_CLEAR_MASK
;

531 
tm¥eg
 |(
uöt32_t
)
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 | SDIO_D©aInôSåu˘->
SDIO_Tøns„rDú


532 | 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 | SDIO_D©aInôSåu˘->
SDIO_DPSM
;

535 
SDIO
->
DCTRL
 = 
tm¥eg
;

536 
	}
}

544 
	$SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

547 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
 = 0xFFFFFFFF;

548 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
 = 0x00;

549 
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 = 
SDIO_D©aBlockSize_1b
;

550 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
 = 
SDIO_Tøns„rDú_ToC¨d
;

551 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 = 
SDIO_Tøns„rMode_Block
;

552 
SDIO_D©aInôSåu˘
->
SDIO_DPSM
 = 
SDIO_DPSM_DißbÀ
;

553 
	}
}

560 
uöt32_t
 
	$SDIO_GëD©aCou¡î
()

562  
SDIO
->
DCOUNT
;

563 
	}
}

570 
uöt32_t
 
	$SDIO_RódD©a
()

572  
SDIO
->
FIFO
;

573 
	}
}

580 
	$SDIO_WrôeD©a
(
uöt32_t
 
D©a
)

582 
SDIO
->
FIFO
 = 
D©a
;

583 
	}
}

590 
uöt32_t
 
	$SDIO_GëFIFOCou¡
()

592  
SDIO
->
FIFOCNT
;

593 
	}
}

619 
	$SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

622 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

624 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTART_BB
 = (uöt32_tË
NewSèã
;

625 
	}
}

633 
	$SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

636 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

638 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTOP_BB
 = (uöt32_tË
NewSèã
;

639 
	}
}

649 
	$SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
)

652 
	`as£π_∑øm
(
	`IS_SDIO_READWAIT_MODE
(
SDIO_RódWaôMode
));

654 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWMOD_BB
 = 
SDIO_RódWaôMode
;

655 
	}
}

663 
	$SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
)

666 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

668 *(
__IO
 
uöt32_t
 *Ë
DCTRL_SDIOEN_BB
 = (uöt32_t)
NewSèã
;

669 
	}
}

677 
	$SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

680 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

682 *(
__IO
 
uöt32_t
 *Ë
CMD_SDIOSUSPEND_BB
 = (uöt32_t)
NewSèã
;

683 
	}
}

709 
	$SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

712 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

714 *(
__IO
 
uöt32_t
 *Ë
CMD_ENCMDCOMPL_BB
 = (uöt32_t)
NewSèã
;

715 
	}
}

723 
	$SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

726 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

728 *(
__IO
 
uöt32_t
 *Ë
CMD_NIEN_BB
 = (uöt32_t)((~((uöt32_t)
NewSèã
)) & ((uint32_t)0x1));

729 
	}
}

737 
	$SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

740 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

742 *(
__IO
 
uöt32_t
 *Ë
CMD_ATACMD_BB
 = (uöt32_t)
NewSèã
;

743 
	}
}

769 
	$SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

772 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

774 *(
__IO
 
uöt32_t
 *Ë
DCTRL_DMAEN_BB
 = (uöt32_t)
NewSèã
;

775 
	}
}

827 
	$SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

830 
	`as£π_∑øm
(
	`IS_SDIO_IT
(
SDIO_IT
));

831 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

833 i‡(
NewSèã
 !
DISABLE
)

836 
SDIO
->
MASK
 |
SDIO_IT
;

841 
SDIO
->
MASK
 &~
SDIO_IT
;

843 
	}
}

875 
FœgSètus
 
	$SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
)

877 
FœgSètus
 
bô°©us
 = 
RESET
;

880 
	`as£π_∑øm
(
	`IS_SDIO_FLAG
(
SDIO_FLAG
));

882 i‡((
SDIO
->
STA
 & 
SDIO_FLAG
Ë!(
uöt32_t
)
RESET
)

884 
bô°©us
 = 
SET
;

888 
bô°©us
 = 
RESET
;

890  
bô°©us
;

891 
	}
}

912 
	$SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
)

915 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_FLAG
(
SDIO_FLAG
));

917 
SDIO
->
ICR
 = 
SDIO_FLAG
;

918 
	}
}

951 
ITSètus
 
	$SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
)

953 
ITSètus
 
bô°©us
 = 
RESET
;

956 
	`as£π_∑øm
(
	`IS_SDIO_GET_IT
(
SDIO_IT
));

957 i‡((
SDIO
->
STA
 & 
SDIO_IT
Ë!(
uöt32_t
)
RESET
)

959 
bô°©us
 = 
SET
;

963 
bô°©us
 = 
RESET
;

965  
bô°©us
;

966 
	}
}

987 
	$SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
)

990 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_IT
(
SDIO_IT
));

992 
SDIO
->
ICR
 = 
SDIO_IT
;

993 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spdifrx.c

34 
	~"°m32f4xx_•di‰x.h
"

35 
	~"°m32f4xx_rcc.h
"

48 
	#CR_CLEAR_MASK
 0x000000FE7

	)

85 
	$SPDIFRX_DeInô
()

88 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPDIFRX
, 
ENABLE
);

90 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPDIFRX
, 
DISABLE
);

91 
	}
}

104 
	$SPDIFRX_Inô
(
SPDIFRX_InôTy≥Def
* 
SPDIFRX_InôSåu˘
)

106 
uöt32_t
 
tm¥eg
 = 0;

109 
	`as£π_∑øm
(
	`IS_STEREO_MODE
(
SPDIFRX_InôSåu˘
->
SPDIFRX_SãªoMode
));

110 
	`as£π_∑øm
(
	`IS_SPDIFRX_INPUT_SELECT
(
SPDIFRX_InôSåu˘
->
SPDIFRX_I≈utSñe˘i⁄
));

111 
	`as£π_∑øm
(
	`IS_SPDIFRX_MAX_RETRIES
(
SPDIFRX_InôSåu˘
->
SPDIFRX_Rërõs
));

112 
	`as£π_∑øm
(
	`IS_SPDIFRX_WAIT_FOR_ACTIVITY
(
SPDIFRX_InôSåu˘
->
SPDIFRX_WaôF‹A˘ivôy
));

113 
	`as£π_∑øm
(
	`IS_SPDIFRX_CHANNEL
(
SPDIFRX_InôSåu˘
->
SPDIFRX_Ch™√lSñe˘i⁄
));

114 
	`as£π_∑øm
(
	`IS_SPDIFRX_DATA_FORMAT
(
SPDIFRX_InôSåu˘
->
SPDIFRX_D©aF‹m©
));

118 
tm¥eg
 = 
SPDIFRX
->
CR
;

120 
tm¥eg
 &
CR_CLEAR_MASK
;

130 
tm¥eg
 |(
uöt32_t
)(
SPDIFRX_InôSåu˘
->
SPDIFRX_I≈utSñe˘i⁄
 | SPDIFRX_InôSåu˘->
SPDIFRX_WaôF‹A˘ivôy
 |

131 
SPDIFRX_InôSåu˘
->
SPDIFRX_Rërõs
 | SPDIFRX_InôSåu˘->
SPDIFRX_Ch™√lSñe˘i⁄
 |

132 
SPDIFRX_InôSåu˘
->
SPDIFRX_D©aF‹m©
 | SPDIFRX_InôSåu˘->
SPDIFRX_SãªoMode


136 
SPDIFRX
->
CR
 = 
tm¥eg
;

137 
	}
}

145 
	$SPDIFRX_Såu˘Inô
(
SPDIFRX_InôTy≥Def
* 
SPDIFRX_InôSåu˘
)

149 
SPDIFRX_InôSåu˘
->
SPDIFRX_I≈utSñe˘i⁄
 = 
SPDIFRX_I≈ut_IN0
;

151 
SPDIFRX_InôSåu˘
->
SPDIFRX_WaôF‹A˘ivôy
 = 
SPDIFRX_WaôF‹A˘ivôy_On
;

153 
SPDIFRX_InôSåu˘
->
SPDIFRX_Rërõs
 = 
SPDIFRX_16MAX_RETRIES
;

155 
SPDIFRX_InôSåu˘
->
SPDIFRX_Ch™√lSñe˘i⁄
 = 
SPDIFRX_Sñe˘_Ch™√l_A
;

157 
SPDIFRX_InôSåu˘
->
SPDIFRX_D©aF‹m©
 = 
SPDIFRX_MSB_D©aF‹m©
;

159 
SPDIFRX_InôSåu˘
->
SPDIFRX_SãªoMode
 = 
SPDIFRX_SãªoMode_E«bÀd
;

160 
	}
}

168 
	$SPDIFRX_SëPªambÀTy≥Bô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

171 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

173 i‡(
NewSèã
 !
DISABLE
)

176 
SPDIFRX
->
CR
 |
SPDIFRX_CR_PTMSK
;

181 
SPDIFRX
->
CR
 &~(
SPDIFRX_CR_PTMSK
);

183 
	}
}

191 
	$SPDIFRX_SëU£rD©aCh™√lSètusBôs
(
Fun˘i⁄ÆSèã
 
NewSèã
)

194 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

196 i‡(
NewSèã
 !
DISABLE
)

199 
SPDIFRX
->
CR
 |
SPDIFRX_CR_CUMSK
;

204 
SPDIFRX
->
CR
 &~(
SPDIFRX_CR_CUMSK
);

206 
	}
}

214 
	$SPDIFRX_SëVÆidôyBô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

217 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

219 i‡(
NewSèã
 !
DISABLE
)

222 
SPDIFRX
->
CR
 |
SPDIFRX_CR_VMSK
;

227 
SPDIFRX
->
CR
 &~(
SPDIFRX_CR_VMSK
);

229 
	}
}

237 
	$SPDIFRX_SëP¨ôyBô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

240 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

242 i‡(
NewSèã
 !
DISABLE
)

245 
SPDIFRX
->
CR
 |
SPDIFRX_CR_PMSK
;

250 
SPDIFRX
->
CR
 &~(
SPDIFRX_CR_PMSK
);

252 
	}
}

260 
	$SPDIFRX_RxDMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

263 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

265 i‡(
NewSèã
 !
DISABLE
)

268 
SPDIFRX
->
CR
 |
SPDIFRX_CR_RXDMAEN
;

273 
SPDIFRX
->
CR
 &~(
SPDIFRX_CR_RXDMAEN
);

275 
	}
}

283 
	$SPDIFRX_CbDMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

286 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

288 i‡(
NewSèã
 !
DISABLE
)

291 
SPDIFRX
->
CR
 |
SPDIFRX_CR_CBDMAEN
;

296 
SPDIFRX
->
CR
 &~(
SPDIFRX_CR_CBDMAEN
);

298 
	}
}

309 
	$SPDIFRX_Cmd
(
uöt32_t
 
SPDIFRX_Sèã
)

312 
	`as£π_∑øm
(
	`IS_SPDIFRX_STATE
(
SPDIFRX_Sèã
));

315 
SPDIFRX
->
CR
 &~(
SPDIFRX_CR_SPDIFEN
);

317 
SPDIFRX
->
CR
 |
SPDIFRX_Sèã
;

318 
	}
}

335 
	$SPDIFRX_ITC⁄fig
(
uöt32_t
 
SPDIFRX_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

338 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

339 
	`as£π_∑øm
(
	`IS_SPDIFRX_CONFIG_IT
(
SPDIFRX_IT
));

341 i‡(
NewSèã
 !
DISABLE
)

344 
SPDIFRX
->
IMR
 |
SPDIFRX_IT
;

349 
SPDIFRX
->
IMR
 &~(
SPDIFRX_IT
);

351 
	}
}

368 
FœgSètus
 
	$SPDIFRX_GëFœgSètus
(
uöt32_t
 
SPDIFRX_FLAG
)

370 
FœgSètus
 
bô°©us
 = 
RESET
;

373 
	`as£π_∑øm
(
	`IS_SPDIFRX_FLAG
(
SPDIFRX_FLAG
));

376 i‡((
SPDIFRX
->
SR
 & 
SPDIFRX_FLAG
Ë!(
uöt32_t
)
RESET
)

379 
bô°©us
 = 
SET
;

384 
bô°©us
 = 
RESET
;

387  
bô°©us
;

388 
	}
}

401 
	$SPDIFRX_CÀ¨Fœg
(
uöt32_t
 
SPDIFRX_FLAG
)

404 
	`as£π_∑øm
(
	`IS_SPDIFRX_CLEAR_FLAG
(
SPDIFRX_FLAG
));

407 
SPDIFRX
->
IFCR
 |
SPDIFRX_FLAG
;

408 
	}
}

423 
ITSètus
 
	$SPDIFRX_GëITSètus
(
uöt32_t
 
SPDIFRX_IT
)

425 
ITSètus
 
bô°©us
 = 
RESET
;

426 
uöt32_t
 
íabÀ°©us
 = 0;

429 
	`as£π_∑øm
(
	`IS_SPDIFRX_CONFIG_IT
(
SPDIFRX_IT
));

432 
íabÀ°©us
 = (
SPDIFRX
->
IMR
 & 
SPDIFRX_IT
) ;

435 i‡(((
SPDIFRX
->
SR
 & 
SPDIFRX_IT
Ë!(
uöt32_t
)
RESET
Ë&& (
íabÀ°©us
 != (uint32_t)RESET))

438 
bô°©us
 = 
SET
;

443 
bô°©us
 = 
RESET
;

446  
bô°©us
;

447 
	}
}

468 
	$SPDIFRX_CÀ¨ITPídögBô
(
uöt32_t
 
SPDIFRX_IT
)

471 
	`as£π_∑øm
(
	`IS_SPDIFRX_CLEAR_FLAG
(
SPDIFRX_IT
));

474 
SPDIFRX
->
IFCR
 |
SPDIFRX_IT
;

475 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c

159 
	~"°m32f4xx_•i.h
"

160 
	~"°m32f4xx_rcc.h
"

175 
	#CR1_CLEAR_MASK
 ((
uöt16_t
)0x3040)

	)

176 
	#I2SCFGR_CLEAR_MASK
 ((
uöt16_t
)0xF040)

	)

179 
	#PLLCFGR_PPLR_MASK
 ((
uöt32_t
)0x70000000)

	)

180 
	#PLLCFGR_PPLN_MASK
 ((
uöt32_t
)0x00007FC0)

	)

182 
	#SPI_CR2_FRF
 ((
uöt16_t
)0x0010)

	)

183 
	#SPI_SR_TIFRFE
 ((
uöt16_t
)0x0100)

	)

224 
	$SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
)

227 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

229 i‡(
SPIx
 =
SPI1
)

232 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
ENABLE
);

234 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
DISABLE
);

236 i‡(
SPIx
 =
SPI2
)

239 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
ENABLE
);

241 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
DISABLE
);

243 i‡(
SPIx
 =
SPI3
)

246 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
ENABLE
);

248 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
DISABLE
);

250 i‡(
SPIx
 =
SPI4
)

253 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI4
, 
ENABLE
);

255 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI4
, 
DISABLE
);

257 i‡(
SPIx
 =
SPI5
)

260 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI5
, 
ENABLE
);

262 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI5
, 
DISABLE
);

266 i‡(
SPIx
 =
SPI6
)

269 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI6
, 
ENABLE
);

271 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI6
, 
DISABLE
);

274 
	}
}

284 
	$SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

286 
uöt16_t
 
tm¥eg
 = 0;

289 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

292 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_MODE
(
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
));

293 
	`as£π_∑øm
(
	`IS_SPI_MODE
(
SPI_InôSåu˘
->
SPI_Mode
));

294 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_InôSåu˘
->
SPI_D©aSize
));

295 
	`as£π_∑øm
(
	`IS_SPI_CPOL
(
SPI_InôSåu˘
->
SPI_CPOL
));

296 
	`as£π_∑øm
(
	`IS_SPI_CPHA
(
SPI_InôSåu˘
->
SPI_CPHA
));

297 
	`as£π_∑øm
(
	`IS_SPI_NSS
(
SPI_InôSåu˘
->
SPI_NSS
));

298 
	`as£π_∑øm
(
	`IS_SPI_BAUDRATE_PRESCALER
(
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
));

299 
	`as£π_∑øm
(
	`IS_SPI_FIRST_BIT
(
SPI_InôSåu˘
->
SPI_Fú°Bô
));

300 
	`as£π_∑øm
(
	`IS_SPI_CRC_POLYNOMIAL
(
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
));

304 
tm¥eg
 = 
SPIx
->
CR1
;

306 
tm¥eg
 &
CR1_CLEAR_MASK
;

315 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 | SPI_InôSåu˘->
SPI_Mode
 |

316 
SPI_InôSåu˘
->
SPI_D©aSize
 | SPI_InôSåu˘->
SPI_CPOL
 |

317 
SPI_InôSåu˘
->
SPI_CPHA
 | SPI_InôSåu˘->
SPI_NSS
 |

318 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 | SPI_InôSåu˘->
SPI_Fú°Bô
);

320 
SPIx
->
CR1
 = 
tm¥eg
;

323 
SPIx
->
I2SCFGR
 &(
uöt16_t
)~((uöt16_t)
SPI_I2SCFGR_I2SMOD
);

326 
SPIx
->
CRCPR
 = 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
;

327 
	}
}

348 
	$I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

350 
uöt16_t
 
tm¥eg
 = 0, 
i2sdiv
 = 2, 
i2sodd
 = 0, 
∑ckëÀngth
 = 1;

351 
uöt32_t
 
tmp
 = 0, 
i2s˛k
 = 0;

352 #i‚de‡
I2S_EXTERNAL_CLOCK_VAL


353 
uöt32_t
 
∂lm
 = 0, 
∂ 
 = 0, 
∂Ã
 = 0;

357 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

358 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
I2S_InôSåu˘
->
I2S_Mode
));

359 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
I2S_InôSåu˘
->
I2S_Sènd¨d
));

360 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
I2S_InôSåu˘
->
I2S_D©aF‹m©
));

361 
	`as£π_∑øm
(
	`IS_I2S_MCLK_OUTPUT
(
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

362 
	`as£π_∑øm
(
	`IS_I2S_AUDIO_FREQ
(
I2S_InôSåu˘
->
I2S_AudioFªq
));

363 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
I2S_InôSåu˘
->
I2S_CPOL
));

367 
SPIx
->
I2SCFGR
 &
I2SCFGR_CLEAR_MASK
;

368 
SPIx
->
I2SPR
 = 0x0002;

371 
tm¥eg
 = 
SPIx
->
I2SCFGR
;

374 if(
I2S_InôSåu˘
->
I2S_AudioFªq
 =
I2S_AudioFªq_DeÁu…
)

376 
i2sodd
 = (
uöt16_t
)0;

377 
i2sdiv
 = (
uöt16_t
)2;

383 if(
I2S_InôSåu˘
->
I2S_D©aF‹m©
 =
I2S_D©aF‹m©_16b
)

386 
∑ckëÀngth
 = 1;

391 
∑ckëÀngth
 = 2;

398 #ifde‡
I2S_EXTERNAL_CLOCK_VAL


400 i‡((
RCC
->
CFGR
 & 
RCC_CFGR_I2SSRC
) == 0)

402 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_I2SSRC
;

406 
i2s˛k
 = 
I2S_EXTERNAL_CLOCK_VAL
;

410 i‡((
RCC
->
CFGR
 & 
RCC_CFGR_I2SSRC
) != 0)

412 
RCC
->
CFGR
 &~(
uöt32_t
)
RCC_CFGR_I2SSRC
;

416 
∂ 
 = (
uöt32_t
)(((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SN
) >> 6) & \

417 (
RCC_PLLI2SCFGR_PLLI2SN
 >> 6));

420 
∂Ã
 = (
uöt32_t
)(((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SR
) >> 28) & \

421 (
RCC_PLLI2SCFGR_PLLI2SR
 >> 28));

424 
∂lm
 = (
uöt32_t
)(
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
);

426 if((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
Ë=
RCC_PLLCFGR_PLLSRC_HSE
)

429 
i2s˛k
 = (
uöt32_t
)(((
HSE_VALUE
 / 
∂lm
Ë* 
∂ 
Ë/ 
∂Ã
);

433 
i2s˛k
 = (
uöt32_t
)(((
HSI_VALUE
 / 
∂lm
Ë* 
∂ 
Ë/ 
∂Ã
);

438 if(
I2S_InôSåu˘
->
I2S_MCLKOuçut
 =
I2S_MCLKOuçut_E«bÀ
)

441 
tmp
 = (
uöt16_t
)(((((
i2s˛k
 / 256Ë* 10Ë/ 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

446 
tmp
 = (
uöt16_t
)(((((
i2s˛k
 / (32 * 
∑ckëÀngth
)Ë*10 ) / 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

450 
tmp
 =Åmp / 10;

453 
i2sodd
 = (
uöt16_t
)(
tmp
 & (uint16_t)0x0001);

456 
i2sdiv
 = (
uöt16_t
)((
tmp
 - 
i2sodd
) / 2);

459 
i2sodd
 = (
uöt16_t
) (i2sodd << 8);

463 i‡((
i2sdiv
 < 2) || (i2sdiv > 0xFF))

466 
i2sdiv
 = 2;

467 
i2sodd
 = 0;

471 
SPIx
->
I2SPR
 = (
uöt16_t
)((uöt16_t)
i2sdiv
 | (uöt16_t)(
i2sodd
 | (uöt16_t)
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

474 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
SPI_I2SCFGR_I2SMOD
 | (uöt16_t)(
I2S_InôSåu˘
->
I2S_Mode
 | \

475 (
uöt16_t
)(
I2S_InôSåu˘
->
I2S_Sènd¨d
 | (uöt16_t)(I2S_InôSåu˘->
I2S_D©aF‹m©
 | \

476 (
uöt16_t
)
I2S_InôSåu˘
->
I2S_CPOL
))));

479 
SPIx
->
I2SCFGR
 = 
tm¥eg
;

480 
	}
}

487 
	$SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

491 
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 = 
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
;

493 
SPI_InôSåu˘
->
SPI_Mode
 = 
SPI_Mode_Sœve
;

495 
SPI_InôSåu˘
->
SPI_D©aSize
 = 
SPI_D©aSize_8b
;

497 
SPI_InôSåu˘
->
SPI_CPOL
 = 
SPI_CPOL_Low
;

499 
SPI_InôSåu˘
->
SPI_CPHA
 = 
SPI_CPHA_1Edge
;

501 
SPI_InôSåu˘
->
SPI_NSS
 = 
SPI_NSS_H¨d
;

503 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 = 
SPI_BaudR©ePªsˇÀr_2
;

505 
SPI_InôSåu˘
->
SPI_Fú°Bô
 = 
SPI_Fú°Bô_MSB
;

507 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
 = 7;

508 
	}
}

515 
	$I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

519 
I2S_InôSåu˘
->
I2S_Mode
 = 
I2S_Mode_SœveTx
;

522 
I2S_InôSåu˘
->
I2S_Sènd¨d
 = 
I2S_Sènd¨d_Phûlùs
;

525 
I2S_InôSåu˘
->
I2S_D©aF‹m©
 = 
I2S_D©aF‹m©_16b
;

528 
I2S_InôSåu˘
->
I2S_MCLKOuçut
 = 
I2S_MCLKOuçut_DißbÀ
;

531 
I2S_InôSåu˘
->
I2S_AudioFªq
 = 
I2S_AudioFªq_DeÁu…
;

534 
I2S_InôSåu˘
->
I2S_CPOL
 = 
I2S_CPOL_Low
;

535 
	}
}

544 
	$SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

547 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

548 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

549 i‡(
NewSèã
 !
DISABLE
)

552 
SPIx
->
CR1
 |
SPI_CR1_SPE
;

557 
SPIx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
SPI_CR1_SPE
);

559 
	}
}

569 
	$I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

572 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH_EXT
(
SPIx
));

573 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

575 i‡(
NewSèã
 !
DISABLE
)

578 
SPIx
->
I2SCFGR
 |
SPI_I2SCFGR_I2SE
;

583 
SPIx
->
I2SCFGR
 &(
uöt16_t
)~((uöt16_t)
SPI_I2SCFGR_I2SE
);

585 
	}
}

596 
	$SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
)

599 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

600 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_D©aSize
));

602 
SPIx
->
CR1
 &(
uöt16_t
)~
SPI_D©aSize_16b
;

604 
SPIx
->
CR1
 |
SPI_D©aSize
;

605 
	}
}

616 
	$SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
)

619 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

620 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION
(
SPI_Dúe˘i⁄
));

621 i‡(
SPI_Dúe˘i⁄
 =
SPI_Dúe˘i⁄_Tx
)

624 
SPIx
->
CR1
 |
SPI_Dúe˘i⁄_Tx
;

629 
SPIx
->
CR1
 &
SPI_Dúe˘i⁄_Rx
;

631 
	}
}

642 
	$SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
)

645 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

646 
	`as£π_∑øm
(
	`IS_SPI_NSS_INTERNAL
(
SPI_NSSI¡î«lSo·
));

647 i‡(
SPI_NSSI¡î«lSo·
 !
SPI_NSSI¡î«lSo·_Re£t
)

650 
SPIx
->
CR1
 |
SPI_NSSI¡î«lSo·_Së
;

655 
SPIx
->
CR1
 &
SPI_NSSI¡î«lSo·_Re£t
;

657 
	}
}

666 
	$SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

669 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

670 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

671 i‡(
NewSèã
 !
DISABLE
)

674 
SPIx
->
CR2
 |(
uöt16_t
)
SPI_CR2_SSOE
;

679 
SPIx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
SPI_CR2_SSOE
);

681 
	}
}

697 
	$SPI_TIModeCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

700 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

701 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

703 i‡(
NewSèã
 !
DISABLE
)

706 
SPIx
->
CR2
 |
SPI_CR2_FRF
;

711 
SPIx
->
CR2
 &(
uöt16_t
)~
SPI_CR2_FRF
;

713 
	}
}

734 
	$I2S_FuŒDu∂exC⁄fig
(
SPI_Ty≥Def
* 
I2Sxext
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

736 
uöt16_t
 
tm¥eg
 = 0, 
tmp
 = 0;

739 
	`as£π_∑øm
(
	`IS_I2S_EXT_PERIPH
(
I2Sxext
));

740 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
I2S_InôSåu˘
->
I2S_Mode
));

741 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
I2S_InôSåu˘
->
I2S_Sènd¨d
));

742 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
I2S_InôSåu˘
->
I2S_D©aF‹m©
));

743 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
I2S_InôSåu˘
->
I2S_CPOL
));

747 
I2Sxext
->
I2SCFGR
 &
I2SCFGR_CLEAR_MASK
;

748 
I2Sxext
->
I2SPR
 = 0x0002;

751 
tm¥eg
 = 
I2Sxext
->
I2SCFGR
;

754 i‡((
I2S_InôSåu˘
->
I2S_Mode
 =
I2S_Mode_Ma°îTx
Ë|| (I2S_InôSåu˘->I2S_Modê=
I2S_Mode_SœveTx
))

756 
tmp
 = 
I2S_Mode_SœveRx
;

760 i‡((
I2S_InôSåu˘
->
I2S_Mode
 =
I2S_Mode_Ma°îRx
Ë|| (I2S_InôSåu˘->I2S_Modê=
I2S_Mode_SœveRx
))

762 
tmp
 = 
I2S_Mode_SœveTx
;

768 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
SPI_I2SCFGR_I2SMOD
 | (uöt16_t)(
tmp
 | \

769 (
uöt16_t
)(
I2S_InôSåu˘
->
I2S_Sènd¨d
 | (uöt16_t)(I2S_InôSåu˘->
I2S_D©aF‹m©
 | \

770 (
uöt16_t
)
I2S_InôSåu˘
->
I2S_CPOL
))));

773 
I2Sxext
->
I2SCFGR
 = 
tm¥eg
;

774 
	}
}

808 
uöt16_t
 
	$SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
)

811 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

814  
SPIx
->
DR
;

815 
	}
}

824 
	$SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
)

827 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

830 
SPIx
->
DR
 = 
D©a
;

831 
	}
}

914 
	$SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

917 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

918 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

919 i‡(
NewSèã
 !
DISABLE
)

922 
SPIx
->
CR1
 |
SPI_CR1_CRCEN
;

927 
SPIx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
SPI_CR1_CRCEN
);

929 
	}
}

936 
	$SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
)

939 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

942 
SPIx
->
CR1
 |
SPI_CR1_CRCNEXT
;

943 
	}
}

954 
uöt16_t
 
	$SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
)

956 
uöt16_t
 
¸¸eg
 = 0;

958 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

959 
	`as£π_∑øm
(
	`IS_SPI_CRC
(
SPI_CRC
));

960 i‡(
SPI_CRC
 !
SPI_CRC_Rx
)

963 
¸¸eg
 = 
SPIx
->
TXCRCR
;

968 
¸¸eg
 = 
SPIx
->
RXCRCR
;

971  
¸¸eg
;

972 
	}
}

979 
uöt16_t
 
	$SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
)

982 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

985  
SPIx
->
CRCPR
;

986 
	}
}

1016 
	$SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1019 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1020 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1021 
	`as£π_∑øm
(
	`IS_SPI_I2S_DMAREQ
(
SPI_I2S_DMAReq
));

1023 i‡(
NewSèã
 !
DISABLE
)

1026 
SPIx
->
CR2
 |
SPI_I2S_DMAReq
;

1031 
SPIx
->
CR2
 &(
uöt16_t
)~
SPI_I2S_DMAReq
;

1033 
	}
}

1124 
	$SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1126 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0 ;

1129 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1130 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1131 
	`as£π_∑øm
(
	`IS_SPI_I2S_CONFIG_IT
(
SPI_I2S_IT
));

1134 
ôpos
 = 
SPI_I2S_IT
 >> 4;

1137 
ômask
 = (
uöt16_t
)1 << (uöt16_t)
ôpos
;

1139 i‡(
NewSèã
 !
DISABLE
)

1142 
SPIx
->
CR2
 |
ômask
;

1147 
SPIx
->
CR2
 &(
uöt16_t
)~
ômask
;

1149 
	}
}

1168 
FœgSètus
 
	$SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

1170 
FœgSètus
 
bô°©us
 = 
RESET
;

1172 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1173 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_FLAG
(
SPI_I2S_FLAG
));

1176 i‡((
SPIx
->
SR
 & 
SPI_I2S_FLAG
Ë!(
uöt16_t
)
RESET
)

1179 
bô°©us
 = 
SET
;

1184 
bô°©us
 = 
RESET
;

1187  
bô°©us
;

1188 
	}
}

1209 
	$SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

1212 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1213 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_FLAG
(
SPI_I2S_FLAG
));

1216 
SPIx
->
SR
 = (
uöt16_t
)~
SPI_I2S_FLAG
;

1217 
	}
}

1234 
ITSètus
 
	$SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

1236 
ITSètus
 
bô°©us
 = 
RESET
;

1237 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0, 
íabÀ°©us
 = 0;

1240 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1241 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_IT
(
SPI_I2S_IT
));

1244 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

1247 
ômask
 = 
SPI_I2S_IT
 >> 4;

1250 
ômask
 = 0x01 << itmask;

1253 
íabÀ°©us
 = (
SPIx
->
CR2
 & 
ômask
) ;

1256 i‡(((
SPIx
->
SR
 & 
ôpos
Ë!(
uöt16_t
)
RESET
Ë&& 
íabÀ°©us
)

1259 
bô°©us
 = 
SET
;

1264 
bô°©us
 = 
RESET
;

1267  
bô°©us
;

1268 
	}
}

1289 
	$SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

1291 
uöt16_t
 
ôpos
 = 0;

1293 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1294 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_IT
(
SPI_I2S_IT
));

1297 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

1300 
SPIx
->
SR
 = (
uöt16_t
)~
ôpos
;

1301 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_syscfg.c

50 
	~"°m32f4xx_syscfg.h
"

51 
	~"°m32f4xx_rcc.h
"

65 
	#SYSCFG_OFFSET
 (
SYSCFG_BASE
 - 
PERIPH_BASE
)

	)

68 
	#MEMRMP_OFFSET
 
SYSCFG_OFFSET


	)

69 
	#UFB_MODE_BôNumbî
 ((
uöt8_t
)0x8)

	)

70 
	#UFB_MODE_BB
 (
PERIPH_BB_BASE
 + (
MEMRMP_OFFSET
 * 32Ë+ (
UFB_MODE_BôNumbî
 * 4))

	)

75 
	#PMC_OFFSET
 (
SYSCFG_OFFSET
 + 0x04)

	)

76 
	#MII_RMII_SEL_BôNumbî
 ((
uöt8_t
)0x17)

	)

77 
	#PMC_MII_RMII_SEL_BB
 (
PERIPH_BB_BASE
 + (
PMC_OFFSET
 * 32Ë+ (
MII_RMII_SEL_BôNumbî
 * 4))

	)

81 
	#CMPCR_OFFSET
 (
SYSCFG_OFFSET
 + 0x20)

	)

82 
	#CMP_PD_BôNumbî
 ((
uöt8_t
)0x00)

	)

83 
	#CMPCR_CMP_PD_BB
 (
PERIPH_BB_BASE
 + (
CMPCR_OFFSET
 * 32Ë+ (
CMP_PD_BôNumbî
 * 4))

	)

100 
	$SYSCFG_DeInô
()

102 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SYSCFG
, 
ENABLE
);

103 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SYSCFG
, 
DISABLE
);

104 
	}
}

119 
	$SYSCFG_Mem‹yRem≠C⁄fig
(
uöt8_t
 
SYSCFG_Mem‹yRem≠
)

122 
	`as£π_∑øm
(
	`IS_SYSCFG_MEMORY_REMAP_CONFING
(
SYSCFG_Mem‹yRem≠
));

124 
SYSCFG
->
MEMRMP
 = 
SYSCFG_Mem‹yRem≠
;

125 
	}
}

140 
	$SYSCFG_Mem‹ySw≠pögB™k
(
Fun˘i⁄ÆSèã
 
NewSèã
)

143 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

145 *(
__IO
 
uöt32_t
 *Ë
UFB_MODE_BB
 = (uöt32_t)
NewSèã
;

146 
	}
}

163 
	$SYSCFG_EXTILöeC⁄fig
(
uöt8_t
 
EXTI_P‹tSour˚GPIOx
, uöt8_à
EXTI_PöSour˚x
)

165 
uöt32_t
 
tmp
 = 0x00;

168 
	`as£π_∑øm
(
	`IS_EXTI_PORT_SOURCE
(
EXTI_P‹tSour˚GPIOx
));

169 
	`as£π_∑øm
(
	`IS_EXTI_PIN_SOURCE
(
EXTI_PöSour˚x
));

171 
tmp
 = ((
uöt32_t
)0x0FË<< (0x04 * (
EXTI_PöSour˚x
 & (
uöt8_t
)0x03));

172 
SYSCFG
->
EXTICR
[
EXTI_PöSour˚x
 >> 0x02] &~
tmp
;

173 
SYSCFG
->
EXTICR
[
EXTI_PöSour˚x
 >> 0x02] |(((
uöt32_t
)
EXTI_P‹tSour˚GPIOx
Ë<< (0x04 * (EXTI_PöSour˚x & (
uöt8_t
)0x03)));

174 
	}
}

184 
	$SYSCFG_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
SYSCFG_ETH_MedüI¡îÁ˚
)

186 
	`as£π_∑øm
(
	`IS_SYSCFG_ETH_MEDIA_INTERFACE
(
SYSCFG_ETH_MedüI¡îÁ˚
));

188 *(
__IO
 
uöt32_t
 *Ë
PMC_MII_RMII_SEL_BB
 = 
SYSCFG_ETH_MedüI¡îÁ˚
;

189 
	}
}

201 
	$SYSCFG_Com≥nßti⁄CñlCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

204 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

206 *(
__IO
 
uöt32_t
 *Ë
CMPCR_CMP_PD_BB
 = (uöt32_t)
NewSèã
;

207 
	}
}

214 
FœgSètus
 
	$SYSCFG_GëCom≥nßti⁄CñlSètus
()

216 
FœgSètus
 
bô°©us
 = 
RESET
;

218 i‡((
SYSCFG
->
CMPCR
 & 
SYSCFG_CMPCR_READY
 ) !(
uöt32_t
)
RESET
)

220 
bô°©us
 = 
SET
;

224 
bô°©us
 = 
RESET
;

226  
bô°©us
;

227 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_tim.c

119 
	~"°m32f4xx_tim.h
"

120 
	~"°m32f4xx_rcc.h
"

135 
	#SMCR_ETR_MASK
 ((
uöt16_t
)0x00FF)

	)

136 
	#CCMR_OFFSET
 ((
uöt16_t
)0x0018)

	)

137 
	#CCER_CCE_SET
 ((
uöt16_t
)0x0001)

	)

138 
	#CCER_CCNE_SET
 ((
uöt16_t
)0x0004)

	)

139 
	#CCMR_OC13M_MASK
 ((
uöt16_t
)0xFF8F)

	)

140 
	#CCMR_OC24M_MASK
 ((
uöt16_t
)0x8FFF)

	)

145 
TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

146 
uöt16_t
 
TIM_ICFûãr
);

147 
TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

148 
uöt16_t
 
TIM_ICFûãr
);

149 
TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

150 
uöt16_t
 
TIM_ICFûãr
);

151 
TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

152 
uöt16_t
 
TIM_ICFûãr
);

200 
	$TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
)

203 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

205 i‡(
TIMx
 =
TIM1
)

207 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
ENABLE
);

208 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
DISABLE
);

210 i‡(
TIMx
 =
TIM2
)

212 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
ENABLE
);

213 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
DISABLE
);

215 i‡(
TIMx
 =
TIM3
)

217 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
ENABLE
);

218 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
DISABLE
);

220 i‡(
TIMx
 =
TIM4
)

222 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
ENABLE
);

223 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
DISABLE
);

225 i‡(
TIMx
 =
TIM5
)

227 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
ENABLE
);

228 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
DISABLE
);

230 i‡(
TIMx
 =
TIM6
)

232 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
ENABLE
);

233 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
DISABLE
);

235 i‡(
TIMx
 =
TIM7
)

237 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
ENABLE
);

238 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
DISABLE
);

240 i‡(
TIMx
 =
TIM8
)

242 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
ENABLE
);

243 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
DISABLE
);

245 i‡(
TIMx
 =
TIM9
)

247 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
ENABLE
);

248 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
DISABLE
);

250 i‡(
TIMx
 =
TIM10
)

252 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
ENABLE
);

253 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
DISABLE
);

255 i‡(
TIMx
 =
TIM11
)

257 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
ENABLE
);

258 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
DISABLE
);

260 i‡(
TIMx
 =
TIM12
)

262 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
ENABLE
);

263 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
DISABLE
);

265 i‡(
TIMx
 =
TIM13
)

267 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
ENABLE
);

268 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
DISABLE
);

272 i‡(
TIMx
 =
TIM14
)

274 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
ENABLE
);

275 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
DISABLE
);

278 
	}
}

288 
	$TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

290 
uöt16_t
 
tmp¸1
 = 0;

293 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

294 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
));

295 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
));

297 
tmp¸1
 = 
TIMx
->
CR1
;

299 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)||

300 (
TIMx
 =
TIM2
Ë|| (TIMx =
TIM3
)||

301 (
TIMx
 =
TIM4
Ë|| (TIMx =
TIM5
))

304 
tmp¸1
 &(
uöt16_t
)(~(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
));

305 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
;

308 if((
TIMx
 !
TIM6
Ë&& (TIMx !
TIM7
))

311 
tmp¸1
 &(
uöt16_t
)(~
TIM_CR1_CKD
);

312 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
;

315 
TIMx
->
CR1
 = 
tmp¸1
;

318 
TIMx
->
ARR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 ;

321 
TIMx
->
PSC
 = 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
;

323 i‡((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

326 
TIMx
->
RCR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
;

331 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode_Immedüã
;

332 
	}
}

340 
	$TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

343 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 = 0xFFFFFFFF;

344 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
 = 0x0000;

345 
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
 = 
TIM_CKD_DIV1
;

346 
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

347 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
 = 0x0000;

348 
	}
}

360 
	$TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
)

363 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

364 
	`as£π_∑øm
(
	`IS_TIM_PRESCALER_RELOAD
(
TIM_PSCRñﬂdMode
));

366 
TIMx
->
PSC
 = 
PªsˇÀr
;

368 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode
;

369 
	}
}

383 
	$TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
)

385 
uöt16_t
 
tmp¸1
 = 0;

388 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

389 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_Cou¡îMode
));

391 
tmp¸1
 = 
TIMx
->
CR1
;

394 
tmp¸1
 &(
uöt16_t
)~(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
);

397 
tmp¸1
 |
TIM_Cou¡îMode
;

400 
TIMx
->
CR1
 = 
tmp¸1
;

401 
	}
}

409 
	$TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Cou¡î
)

412 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

415 
TIMx
->
CNT
 = 
Cou¡î
;

416 
	}
}

424 
	$TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Aut‹ñﬂd
)

427 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

430 
TIMx
->
ARR
 = 
Aut‹ñﬂd
;

431 
	}
}

438 
uöt32_t
 
	$TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
)

441 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

444  
TIMx
->
CNT
;

445 
	}
}

452 
uöt16_t
 
	$TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
)

455 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

458  
TIMx
->
PSC
;

459 
	}
}

468 
	$TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

471 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

472 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

474 i‡(
NewSèã
 !
DISABLE
)

477 
TIMx
->
CR1
 |
TIM_CR1_UDIS
;

482 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_UDIS
;

484 
	}
}

497 
	$TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
)

500 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

501 
	`as£π_∑øm
(
	`IS_TIM_UPDATE_SOURCE
(
TIM_Upd©eSour˚
));

503 i‡(
TIM_Upd©eSour˚
 !
TIM_Upd©eSour˚_GlobÆ
)

506 
TIMx
->
CR1
 |
TIM_CR1_URS
;

511 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_URS
;

513 
	}
}

522 
	$TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

525 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

526 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

528 i‡(
NewSèã
 !
DISABLE
)

531 
TIMx
->
CR1
 |
TIM_CR1_ARPE
;

536 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_ARPE
;

538 
	}
}

549 
	$TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
)

552 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

553 
	`as£π_∑øm
(
	`IS_TIM_OPM_MODE
(
TIM_OPMode
));

556 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_OPM
;

559 
TIMx
->
CR1
 |
TIM_OPMode
;

560 
	}
}

572 
	$TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
)

575 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

576 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_CKD
));

579 
TIMx
->
CR1
 &(
uöt16_t
)(~
TIM_CR1_CKD
);

582 
TIMx
->
CR1
 |
TIM_CKD
;

583 
	}
}

592 
	$TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

595 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

596 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

598 i‡(
NewSèã
 !
DISABLE
)

601 
TIMx
->
CR1
 |
TIM_CR1_CEN
;

606 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_CEN
;

608 
	}
}

673 
	$TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

675 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

678 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

679 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

680 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

681 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

684 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC1E
;

687 
tmpc˚r
 = 
TIMx
->
CCER
;

689 
tmp¸2
 = 
TIMx
->
CR2
;

692 
tmpccmrx
 = 
TIMx
->
CCMR1
;

695 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR1_OC1M
;

696 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR1_CC1S
;

698 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

701 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC1P
;

703 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
;

706 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutSèã
;

708 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

710 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

711 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

712 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

713 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

716 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC1NP
;

718 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
;

720 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC1NE
;

723 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
;

725 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS1
;

726 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS1N
;

728 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
;

730 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
;

733 
TIMx
->
CR2
 = 
tmp¸2
;

736 
TIMx
->
CCMR1
 = 
tmpccmrx
;

739 
TIMx
->
CCR1
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

742 
TIMx
->
CCER
 = 
tmpc˚r
;

743 
	}
}

754 
	$TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

756 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

759 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

760 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

761 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

762 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

765 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC2E
;

768 
tmpc˚r
 = 
TIMx
->
CCER
;

770 
tmp¸2
 = 
TIMx
->
CR2
;

773 
tmpccmrx
 = 
TIMx
->
CCMR1
;

776 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR1_OC2M
;

777 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR1_CC2S
;

780 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

783 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC2P
;

785 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 4);

788 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 4);

790 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

792 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

793 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

794 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

795 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

798 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC2NP
;

800 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 4);

802 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC2NE
;

805 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 4);

807 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS2
;

808 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS2N
;

810 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 2);

812 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 2);

815 
TIMx
->
CR2
 = 
tmp¸2
;

818 
TIMx
->
CCMR1
 = 
tmpccmrx
;

821 
TIMx
->
CCR2
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

824 
TIMx
->
CCER
 = 
tmpc˚r
;

825 
	}
}

835 
	$TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

837 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

840 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

841 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

842 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

843 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

846 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC3E
;

849 
tmpc˚r
 = 
TIMx
->
CCER
;

851 
tmp¸2
 = 
TIMx
->
CR2
;

854 
tmpccmrx
 = 
TIMx
->
CCMR2
;

857 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR2_OC3M
;

858 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR2_CC3S
;

860 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

863 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3P
;

865 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 8);

868 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 8);

870 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

872 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

873 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

874 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

875 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

878 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3NP
;

880 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 8);

882 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3NE
;

885 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 8);

887 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS3
;

888 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS3N
;

890 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 4);

892 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 4);

895 
TIMx
->
CR2
 = 
tmp¸2
;

898 
TIMx
->
CCMR2
 = 
tmpccmrx
;

901 
TIMx
->
CCR3
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

904 
TIMx
->
CCER
 = 
tmpc˚r
;

905 
	}
}

915 
	$TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

917 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

920 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

921 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

922 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

923 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

926 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC4E
;

929 
tmpc˚r
 = 
TIMx
->
CCER
;

931 
tmp¸2
 = 
TIMx
->
CR2
;

934 
tmpccmrx
 = 
TIMx
->
CCMR2
;

937 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR2_OC4M
;

938 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR2_CC4S
;

941 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

944 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC4P
;

946 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 12);

949 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 12);

951 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

953 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

955 
tmp¸2
 &=(
uöt16_t
Ë~
TIM_CR2_OIS4
;

957 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 6);

960 
TIMx
->
CR2
 = 
tmp¸2
;

963 
TIMx
->
CCMR2
 = 
tmpccmrx
;

966 
TIMx
->
CCR4
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

969 
TIMx
->
CCER
 = 
tmpc˚r
;

970 
	}
}

978 
	$TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

981 
TIM_OCInôSåu˘
->
TIM_OCMode
 = 
TIM_OCMode_Timög
;

982 
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 = 
TIM_OuçutSèã_DißbÀ
;

983 
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 = 
TIM_OuçutNSèã_DißbÀ
;

984 
TIM_OCInôSåu˘
->
TIM_Pul£
 = 0x00000000;

985 
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

986 
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

987 
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 = 
TIM_OCIdÀSèã_Re£t
;

988 
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 = 
TIM_OCNIdÀSèã_Re£t
;

989 
	}
}

1014 
	$TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
)

1016 
uöt32_t
 
tmp
 = 0;

1017 
uöt16_t
 
tmp1
 = 0;

1020 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1021 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

1022 
	`as£π_∑øm
(
	`IS_TIM_OCM
(
TIM_OCMode
));

1024 
tmp
 = (
uöt32_t
Ë
TIMx
;

1025 
tmp
 +
CCMR_OFFSET
;

1027 
tmp1
 = 
CCER_CCE_SET
 << (
uöt16_t
)
TIM_Ch™√l
;

1030 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp1
;

1032 if((
TIM_Ch™√l
 =
TIM_Ch™√l_1
Ë||(TIM_Ch™√»=
TIM_Ch™√l_3
))

1034 
tmp
 +(
TIM_Ch™√l
>>1);

1037 *(
__IO
 
uöt32_t
 *Ë
tmp
 &
CCMR_OC13M_MASK
;

1040 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
TIM_OCMode
;

1044 
tmp
 +(
uöt16_t
)(
TIM_Ch™√l
 - (uint16_t)4)>> (uint16_t)1;

1047 *(
__IO
 
uöt32_t
 *Ë
tmp
 &
CCMR_OC24M_MASK
;

1050 *(
__IO
 
uöt32_t
 *Ë
tmp
 |(
uöt16_t
)(
TIM_OCMode
 << 8);

1052 
	}
}

1060 
	$TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª1
)

1063 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1066 
TIMx
->
CCR1
 = 
Com∑ª1
;

1067 
	}
}

1076 
	$TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª2
)

1079 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1082 
TIMx
->
CCR2
 = 
Com∑ª2
;

1083 
	}
}

1091 
	$TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª3
)

1094 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1097 
TIMx
->
CCR3
 = 
Com∑ª3
;

1098 
	}
}

1106 
	$TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª4
)

1109 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1112 
TIMx
->
CCR4
 = 
Com∑ª4
;

1113 
	}
}

1124 
	$TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1126 
uöt16_t
 
tmpccmr1
 = 0;

1129 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1130 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1131 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1134 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC1M
;

1137 
tmpccmr1
 |
TIM_F‹˚dA˘i⁄
;

1140 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1141 
	}
}

1153 
	$TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1155 
uöt16_t
 
tmpccmr1
 = 0;

1158 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1159 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1160 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1163 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC2M
;

1166 
tmpccmr1
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1169 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1170 
	}
}

1181 
	$TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1183 
uöt16_t
 
tmpccmr2
 = 0;

1186 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1187 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1189 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1192 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC3M
;

1195 
tmpccmr2
 |
TIM_F‹˚dA˘i⁄
;

1198 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1199 
	}
}

1210 
	$TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1212 
uöt16_t
 
tmpccmr2
 = 0;

1215 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1216 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1217 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1220 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC4M
;

1223 
tmpccmr2
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1226 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1227 
	}
}

1238 
	$TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1240 
uöt16_t
 
tmpccmr1
 = 0;

1243 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1244 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1246 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1249 
tmpccmr1
 &(
uöt16_t
)(~
TIM_CCMR1_OC1PE
);

1252 
tmpccmr1
 |
TIM_OCPªlﬂd
;

1255 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1256 
	}
}

1268 
	$TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1270 
uöt16_t
 
tmpccmr1
 = 0;

1273 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1274 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1276 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1279 
tmpccmr1
 &(
uöt16_t
)(~
TIM_CCMR1_OC2PE
);

1282 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1285 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1286 
	}
}

1297 
	$TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1299 
uöt16_t
 
tmpccmr2
 = 0;

1302 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1303 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1305 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1308 
tmpccmr2
 &(
uöt16_t
)(~
TIM_CCMR2_OC3PE
);

1311 
tmpccmr2
 |
TIM_OCPªlﬂd
;

1314 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1315 
	}
}

1326 
	$TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1328 
uöt16_t
 
tmpccmr2
 = 0;

1331 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1332 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1334 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1337 
tmpccmr2
 &(
uöt16_t
)(~
TIM_CCMR2_OC4PE
);

1340 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1343 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1344 
	}
}

1355 
	$TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1357 
uöt16_t
 
tmpccmr1
 = 0;

1360 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1361 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1364 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1367 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC1FE
;

1370 
tmpccmr1
 |
TIM_OCFa°
;

1373 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1374 
	}
}

1386 
	$TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1388 
uöt16_t
 
tmpccmr1
 = 0;

1391 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1392 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1395 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1398 
tmpccmr1
 &(
uöt16_t
)(~
TIM_CCMR1_OC2FE
);

1401 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1404 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1405 
	}
}

1416 
	$TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1418 
uöt16_t
 
tmpccmr2
 = 0;

1421 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1422 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1425 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1428 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC3FE
;

1431 
tmpccmr2
 |
TIM_OCFa°
;

1434 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1435 
	}
}

1446 
	$TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1448 
uöt16_t
 
tmpccmr2
 = 0;

1451 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1452 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1455 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1458 
tmpccmr2
 &(
uöt16_t
)(~
TIM_CCMR2_OC4FE
);

1461 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1464 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1465 
	}
}

1476 
	$TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1478 
uöt16_t
 
tmpccmr1
 = 0;

1481 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1482 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1484 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1487 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC1CE
;

1490 
tmpccmr1
 |
TIM_OCCÀ¨
;

1493 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1494 
	}
}

1506 
	$TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1508 
uöt16_t
 
tmpccmr1
 = 0;

1511 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1512 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1514 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1517 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC2CE
;

1520 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1523 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1524 
	}
}

1535 
	$TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1537 
uöt16_t
 
tmpccmr2
 = 0;

1540 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1541 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1543 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1546 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC3CE
;

1549 
tmpccmr2
 |
TIM_OCCÀ¨
;

1552 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1553 
	}
}

1564 
	$TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1566 
uöt16_t
 
tmpccmr2
 = 0;

1569 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1570 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1572 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1575 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC4CE
;

1578 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1581 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1582 
	}
}

1593 
	$TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1595 
uöt16_t
 
tmpc˚r
 = 0;

1598 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1599 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1601 
tmpc˚r
 = 
TIMx
->
CCER
;

1604 
tmpc˚r
 &(
uöt16_t
)(~
TIM_CCER_CC1P
);

1605 
tmpc˚r
 |
TIM_OCPﬁ¨ôy
;

1608 
TIMx
->
CCER
 = 
tmpc˚r
;

1609 
	}
}

1620 
	$TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1622 
uöt16_t
 
tmpc˚r
 = 0;

1624 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1625 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1627 
tmpc˚r
 = 
TIMx
->
CCER
;

1630 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC1NP
;

1631 
tmpc˚r
 |
TIM_OCNPﬁ¨ôy
;

1634 
TIMx
->
CCER
 = 
tmpc˚r
;

1635 
	}
}

1647 
	$TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1649 
uöt16_t
 
tmpc˚r
 = 0;

1652 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1653 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1655 
tmpc˚r
 = 
TIMx
->
CCER
;

1658 
tmpc˚r
 &(
uöt16_t
)(~
TIM_CCER_CC2P
);

1659 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 4);

1662 
TIMx
->
CCER
 = 
tmpc˚r
;

1663 
	}
}

1674 
	$TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1676 
uöt16_t
 
tmpc˚r
 = 0;

1679 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1680 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1682 
tmpc˚r
 = 
TIMx
->
CCER
;

1685 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC2NP
;

1686 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 4);

1689 
TIMx
->
CCER
 = 
tmpc˚r
;

1690 
	}
}

1701 
	$TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1703 
uöt16_t
 
tmpc˚r
 = 0;

1706 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1707 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1709 
tmpc˚r
 = 
TIMx
->
CCER
;

1712 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3P
;

1713 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 8);

1716 
TIMx
->
CCER
 = 
tmpc˚r
;

1717 
	}
}

1728 
	$TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1730 
uöt16_t
 
tmpc˚r
 = 0;

1733 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1734 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1736 
tmpc˚r
 = 
TIMx
->
CCER
;

1739 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3NP
;

1740 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 8);

1743 
TIMx
->
CCER
 = 
tmpc˚r
;

1744 
	}
}

1755 
	$TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1757 
uöt16_t
 
tmpc˚r
 = 0;

1760 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1761 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1763 
tmpc˚r
 = 
TIMx
->
CCER
;

1766 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC4P
;

1767 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 12);

1770 
TIMx
->
CCER
 = 
tmpc˚r
;

1771 
	}
}

1786 
	$TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
)

1788 
uöt16_t
 
tmp
 = 0;

1791 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1792 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

1793 
	`as£π_∑øm
(
	`IS_TIM_CCX
(
TIM_CCx
));

1795 
tmp
 = 
CCER_CCE_SET
 << 
TIM_Ch™√l
;

1798 
TIMx
->
CCER
 &(
uöt16_t
)~ 
tmp
;

1801 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCx
 << 
TIM_Ch™√l
);

1802 
	}
}

1816 
	$TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
)

1818 
uöt16_t
 
tmp
 = 0;

1821 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1822 
	`as£π_∑øm
(
	`IS_TIM_COMPLEMENTARY_CHANNEL
(
TIM_Ch™√l
));

1823 
	`as£π_∑øm
(
	`IS_TIM_CCXN
(
TIM_CCxN
));

1825 
tmp
 = 
CCER_CCNE_SET
 << 
TIM_Ch™√l
;

1828 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp
;

1831 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCxN
 << 
TIM_Ch™√l
);

1832 
	}
}

1900 
	$TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

1903 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1904 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
));

1905 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
));

1906 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
));

1907 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
TIM_ICInôSåu˘
->
TIM_ICFûãr
));

1909 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

1912 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1913 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1914 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1916 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1918 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_2
)

1921 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1922 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1923 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1924 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1926 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1928 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_3
)

1931 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1932 
	`TI3_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1933 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1934 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1936 
	`TIM_SëIC3PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1941 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1942 
	`TI4_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1943 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1944 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1946 
	`TIM_SëIC4PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1948 
	}
}

1956 
	$TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

1959 
TIM_ICInôSåu˘
->
TIM_Ch™√l
 = 
TIM_Ch™√l_1
;

1960 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

1961 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

1962 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
 = 
TIM_ICPSC_DIV1
;

1963 
TIM_ICInôSåu˘
->
TIM_ICFûãr
 = 0x00;

1964 
	}
}

1975 
	$TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

1977 
uöt16_t
 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

1978 
uöt16_t
 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

1981 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1984 i‡(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 =
TIM_ICPﬁ¨ôy_Risög
)

1986 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_FÆlög
;

1990 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

1993 i‡(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 =
TIM_ICSñe˘i⁄_Dúe˘TI
)

1995 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Indúe˘TI
;

1999 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

2001 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

2004 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

2005 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2007 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2009 
	`TI2_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2011 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2016 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

2017 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2019 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2021 
	`TI1_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2023 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2025 
	}
}

2032 
uöt32_t
 
	$TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
)

2035 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2038  
TIMx
->
CCR1
;

2039 
	}
}

2047 
uöt32_t
 
	$TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
)

2050 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2053  
TIMx
->
CCR2
;

2054 
	}
}

2061 
uöt32_t
 
	$TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
)

2064 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2067  
TIMx
->
CCR3
;

2068 
	}
}

2075 
uöt32_t
 
	$TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
)

2078 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2081  
TIMx
->
CCR4
;

2082 
	}
}

2095 
	$TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2098 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2099 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2102 
TIMx
->
CCMR1
 &(
uöt16_t
)~
TIM_CCMR1_IC1PSC
;

2105 
TIMx
->
CCMR1
 |
TIM_ICPSC
;

2106 
	}
}

2120 
	$TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2123 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2124 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2127 
TIMx
->
CCMR1
 &(
uöt16_t
)~
TIM_CCMR1_IC2PSC
;

2130 
TIMx
->
CCMR1
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2131 
	}
}

2144 
	$TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2147 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2148 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2151 
TIMx
->
CCMR2
 &(
uöt16_t
)~
TIM_CCMR2_IC3PSC
;

2154 
TIMx
->
CCMR2
 |
TIM_ICPSC
;

2155 
	}
}

2168 
	$TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2171 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2172 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2175 
TIMx
->
CCMR2
 &(
uöt16_t
)~
TIM_CCMR2_IC4PSC
;

2178 
TIMx
->
CCMR2
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2179 
	}
}

2221 
	$TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
)

2224 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2225 
	`as£π_∑øm
(
	`IS_TIM_OSSR_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
));

2226 
	`as£π_∑øm
(
	`IS_TIM_OSSI_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
));

2227 
	`as£π_∑øm
(
	`IS_TIM_LOCK_LEVEL
(
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
));

2228 
	`as£π_∑øm
(
	`IS_TIM_BREAK_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Bªak
));

2229 
	`as£π_∑øm
(
	`IS_TIM_BREAK_POLARITY
(
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
));

2230 
	`as£π_∑øm
(
	`IS_TIM_AUTOMATIC_OUTPUT_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
));

2234 
TIMx
->
BDTR
 = (
uöt32_t
)
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 | TIM_BDTRInôSåu˘->
TIM_OSSISèã
 |

2235 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 | TIM_BDTRInôSåu˘->
TIM_DódTime
 |

2236 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 | TIM_BDTRInôSåu˘->
TIM_BªakPﬁ¨ôy
 |

2237 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
;

2238 
	}
}

2246 
	$TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
)

2249 
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 = 
TIM_OSSRSèã_DißbÀ
;

2250 
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
 = 
TIM_OSSISèã_DißbÀ
;

2251 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 = 
TIM_LOCKLevñ_OFF
;

2252 
TIM_BDTRInôSåu˘
->
TIM_DódTime
 = 0x00;

2253 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 = 
TIM_Bªak_DißbÀ
;

2254 
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
 = 
TIM_BªakPﬁ¨ôy_Low
;

2255 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
 = 
TIM_Autom©icOuçut_DißbÀ
;

2256 
	}
}

2265 
	$TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2268 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2269 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2271 i‡(
NewSèã
 !
DISABLE
)

2274 
TIMx
->
BDTR
 |
TIM_BDTR_MOE
;

2279 
TIMx
->
BDTR
 &(
uöt16_t
)~
TIM_BDTR_MOE
;

2281 
	}
}

2290 
	$TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2293 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2294 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2296 i‡(
NewSèã
 !
DISABLE
)

2299 
TIMx
->
CR2
 |
TIM_CR2_CCUS
;

2304 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_CCUS
;

2306 
	}
}

2315 
	$TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2318 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2319 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2320 i‡(
NewSèã
 !
DISABLE
)

2323 
TIMx
->
CR2
 |
TIM_CR2_CCPC
;

2328 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_CCPC
;

2330 
	}
}

2372 
	$TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2375 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2376 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

2377 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2379 i‡(
NewSèã
 !
DISABLE
)

2382 
TIMx
->
DIER
 |
TIM_IT
;

2387 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_IT
;

2389 
	}
}

2410 
	$TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
)

2413 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2414 
	`as£π_∑øm
(
	`IS_TIM_EVENT_SOURCE
(
TIM_EvítSour˚
));

2417 
TIMx
->
EGR
 = 
TIM_EvítSour˚
;

2418 
	}
}

2443 
FœgSètus
 
	$TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2445 
ITSètus
 
bô°©us
 = 
RESET
;

2447 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2448 
	`as£π_∑øm
(
	`IS_TIM_GET_FLAG
(
TIM_FLAG
));

2451 i‡((
TIMx
->
SR
 & 
TIM_FLAG
Ë!(
uöt16_t
)
RESET
)

2453 
bô°©us
 = 
SET
;

2457 
bô°©us
 = 
RESET
;

2459  
bô°©us
;

2460 
	}
}

2485 
	$TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2488 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2491 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_FLAG
;

2492 
	}
}

2513 
ITSètus
 
	$TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2515 
ITSètus
 
bô°©us
 = 
RESET
;

2516 
uöt16_t
 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

2518 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2519 
	`as£π_∑øm
(
	`IS_TIM_GET_IT
(
TIM_IT
));

2521 
ô°©us
 = 
TIMx
->
SR
 & 
TIM_IT
;

2523 
ôíabÀ
 = 
TIMx
->
DIER
 & 
TIM_IT
;

2524 i‡((
ô°©us
 !(
uöt16_t
)
RESET
Ë&& (
ôíabÀ
 != (uint16_t)RESET))

2526 
bô°©us
 = 
SET
;

2530 
bô°©us
 = 
RESET
;

2532  
bô°©us
;

2533 
	}
}

2554 
	$TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2557 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2560 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_IT
;

2561 
	}
}

2591 
	$TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
)

2594 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2595 
	`as£π_∑øm
(
	`IS_TIM_DMA_BASE
(
TIM_DMABa£
));

2596 
	`as£π_∑øm
(
	`IS_TIM_DMA_LENGTH
(
TIM_DMABur°Lígth
));

2599 
TIMx
->
DCR
 = 
TIM_DMABa£
 | 
TIM_DMABur°Lígth
;

2600 
	}
}

2618 
	$TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2621 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

2622 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
TIM_DMASour˚
));

2623 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2625 i‡(
NewSèã
 !
DISABLE
)

2628 
TIMx
->
DIER
 |
TIM_DMASour˚
;

2633 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_DMASour˚
;

2635 
	}
}

2644 
	$TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2647 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2648 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2650 i‡(
NewSèã
 !
DISABLE
)

2653 
TIMx
->
CR2
 |
TIM_CR2_CCDS
;

2658 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_CCDS
;

2660 
	}
}

2683 
	$TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
)

2686 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2689 
TIMx
->
SMCR
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

2690 
	}
}

2704 
	$TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

2707 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2708 
	`as£π_∑øm
(
	`IS_TIM_INTERNAL_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

2711 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_I≈utTriggîSour˚
);

2714 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

2715 
	}
}

2734 
	$TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

2735 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
)

2738 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2739 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICPﬁ¨ôy
));

2740 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
ICFûãr
));

2743 i‡(
TIM_TIxExã∫ÆCLKSour˚
 =
TIM_TIxExã∫ÆCLK1Sour˚_TI2
)

2745 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

2749 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

2752 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_TIxExã∫ÆCLKSour˚
);

2754 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

2755 
	}
}

2774 
	$TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

2775 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

2777 
uöt16_t
 
tmpsm¸
 = 0;

2780 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2781 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

2782 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

2783 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

2785 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

2788 
tmpsm¸
 = 
TIMx
->
SMCR
;

2791 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

2794 
tmpsm¸
 |
TIM_SœveMode_Exã∫Æ1
;

2797 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_TS
;

2798 
tmpsm¸
 |
TIM_TS_ETRF
;

2801 
TIMx
->
SMCR
 = 
tmpsm¸
;

2802 
	}
}

2821 
	$TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

2822 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

2825 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2826 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

2827 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

2828 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

2831 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

2834 
TIMx
->
SMCR
 |
TIM_SMCR_ECE
;

2835 
	}
}

2892 
	$TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

2894 
uöt16_t
 
tmpsm¸
 = 0;

2897 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2898 
	`as£π_∑øm
(
	`IS_TIM_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

2901 
tmpsm¸
 = 
TIMx
->
SMCR
;

2904 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_TS
;

2907 
tmpsm¸
 |
TIM_I≈utTriggîSour˚
;

2910 
TIMx
->
SMCR
 = 
tmpsm¸
;

2911 
	}
}

2935 
	$TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
)

2938 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

2939 
	`as£π_∑øm
(
	`IS_TIM_TRGO_SOURCE
(
TIM_TRGOSour˚
));

2942 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_MMS
;

2944 
TIMx
->
CR2
 |
TIM_TRGOSour˚
;

2945 
	}
}

2959 
	$TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
)

2962 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2963 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_MODE
(
TIM_SœveMode
));

2966 
TIMx
->
SMCR
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

2969 
TIMx
->
SMCR
 |
TIM_SœveMode
;

2970 
	}
}

2982 
	$TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
)

2985 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2986 
	`as£π_∑øm
(
	`IS_TIM_MSM_STATE
(
TIM_Ma°îSœveMode
));

2989 
TIMx
->
SMCR
 &(
uöt16_t
)~
TIM_SMCR_MSM
;

2992 
TIMx
->
SMCR
 |
TIM_Ma°îSœveMode
;

2993 
	}
}

3012 
	$TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

3013 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

3015 
uöt16_t
 
tmpsm¸
 = 0;

3018 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

3019 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

3020 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

3021 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

3023 
tmpsm¸
 = 
TIMx
->
SMCR
;

3026 
tmpsm¸
 &
SMCR_ETR_MASK
;

3029 
tmpsm¸
 |(
uöt16_t
)(
TIM_ExtTRGPªsˇÀr
 | (uöt16_t)(
TIM_ExtTRGPﬁ¨ôy
 | (uöt16_t)(
ExtTRGFûãr
 << (uint16_t)8)));

3032 
TIMx
->
SMCR
 = 
tmpsm¸
;

3033 
	}
}

3070 
	$TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

3071 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
)

3073 
uöt16_t
 
tmpsm¸
 = 0;

3074 
uöt16_t
 
tmpccmr1
 = 0;

3075 
uöt16_t
 
tmpc˚r
 = 0;

3078 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

3079 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_MODE
(
TIM_EncodîMode
));

3080 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC1Pﬁ¨ôy
));

3081 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC2Pﬁ¨ôy
));

3084 
tmpsm¸
 = 
TIMx
->
SMCR
;

3087 
tmpccmr1
 = 
TIMx
->
CCMR1
;

3090 
tmpc˚r
 = 
TIMx
->
CCER
;

3093 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

3094 
tmpsm¸
 |
TIM_EncodîMode
;

3097 
tmpccmr1
 &((
uöt16_t
)~
TIM_CCMR1_CC1S
Ë& ((uöt16_t)~
TIM_CCMR1_CC2S
);

3098 
tmpccmr1
 |
TIM_CCMR1_CC1S_0
 | 
TIM_CCMR1_CC2S_0
;

3101 
tmpc˚r
 &((
uöt16_t
)~
TIM_CCER_CC1P
Ë& ((uöt16_t)~
TIM_CCER_CC2P
);

3102 
tmpc˚r
 |(
uöt16_t
)(
TIM_IC1Pﬁ¨ôy
 | (uöt16_t)(
TIM_IC2Pﬁ¨ôy
 << (uint16_t)4));

3105 
TIMx
->
SMCR
 = 
tmpsm¸
;

3108 
TIMx
->
CCMR1
 = 
tmpccmr1
;

3111 
TIMx
->
CCER
 = 
tmpc˚r
;

3112 
	}
}

3122 
	$TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

3125 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

3126 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

3128 i‡(
NewSèã
 !
DISABLE
)

3131 
TIMx
->
CR2
 |
TIM_CR2_TI1S
;

3136 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_TI1S
;

3138 
	}
}

3173 
	$TIM_Rem≠C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Rem≠
)

3176 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

3177 
	`as£π_∑øm
(
	`IS_TIM_REMAP
(
TIM_Rem≠
));

3180 
TIMx
->
OR
 = 
TIM_Rem≠
;

3181 
	}
}

3204 
	$TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3205 
uöt16_t
 
TIM_ICFûãr
)

3207 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0;

3210 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC1E
;

3211 
tmpccmr1
 = 
TIMx
->
CCMR1
;

3212 
tmpc˚r
 = 
TIMx
->
CCER
;

3215 
tmpccmr1
 &((
uöt16_t
)~
TIM_CCMR1_CC1S
Ë& ((uöt16_t)~
TIM_CCMR1_IC1F
);

3216 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

3219 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
);

3220 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC1E
);

3223 
TIMx
->
CCMR1
 = 
tmpccmr1
;

3224 
TIMx
->
CCER
 = 
tmpc˚r
;

3225 
	}
}

3245 
	$TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3246 
uöt16_t
 
TIM_ICFûãr
)

3248 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

3251 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC2E
;

3252 
tmpccmr1
 = 
TIMx
->
CCMR1
;

3253 
tmpc˚r
 = 
TIMx
->
CCER
;

3254 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 4);

3257 
tmpccmr1
 &((
uöt16_t
)~
TIM_CCMR1_CC2S
Ë& ((uöt16_t)~
TIM_CCMR1_IC2F
);

3258 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

3259 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

3262 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
);

3263 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC2E
);

3266 
TIMx
->
CCMR1
 = 
tmpccmr1
 ;

3267 
TIMx
->
CCER
 = 
tmpc˚r
;

3268 
	}
}

3287 
	$TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3288 
uöt16_t
 
TIM_ICFûãr
)

3290 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

3293 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC3E
;

3294 
tmpccmr2
 = 
TIMx
->
CCMR2
;

3295 
tmpc˚r
 = 
TIMx
->
CCER
;

3296 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 8);

3299 
tmpccmr2
 &((
uöt16_t
)~
TIM_CCMR1_CC1S
Ë& ((uöt16_t)~
TIM_CCMR2_IC3F
);

3300 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

3303 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC3P
 | 
TIM_CCER_CC3NP
);

3304 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC3E
);

3307 
TIMx
->
CCMR2
 = 
tmpccmr2
;

3308 
TIMx
->
CCER
 = 
tmpc˚r
;

3309 
	}
}

3328 
	$TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3329 
uöt16_t
 
TIM_ICFûãr
)

3331 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

3334 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC4E
;

3335 
tmpccmr2
 = 
TIMx
->
CCMR2
;

3336 
tmpc˚r
 = 
TIMx
->
CCER
;

3337 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 12);

3340 
tmpccmr2
 &((
uöt16_t
)~
TIM_CCMR1_CC2S
Ë& ((uöt16_t)~
TIM_CCMR1_IC2F
);

3341 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

3342 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

3345 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC4P
 | 
TIM_CCER_CC4NP
);

3346 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC4E
);

3349 
TIMx
->
CCMR2
 = 
tmpccmr2
;

3350 
TIMx
->
CCER
 = 
tmpc˚r
 ;

3351 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c

92 
	~"°m32f4xx_ußπ.h
"

93 
	~"°m32f4xx_rcc.h
"

108 
	#CR1_CLEAR_MASK
 ((
uöt16_t
)(
USART_CR1_M
 | 
USART_CR1_PCE
 | \

	)

109 
	gUSART_CR1_PS
 | 
	gUSART_CR1_TE
 | \

110 
	gUSART_CR1_RE
))

113 
	#CR2_CLOCK_CLEAR_MASK
 ((
uöt16_t
)(
USART_CR2_CLKEN
 | 
USART_CR2_CPOL
 | \

	)

114 
	gUSART_CR2_CPHA
 | 
	gUSART_CR2_LBCL
))

117 
	#CR3_CLEAR_MASK
 ((
uöt16_t
)(
USART_CR3_RTSE
 | 
USART_CR3_CTSE
))

	)

120 
	#IT_MASK
 ((
uöt16_t
)0x001F)

	)

187 
	$USART_DeInô
(
USART_Ty≥Def
* 
USARTx
)

190 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

192 i‡(
USARTx
 =
USART1
)

194 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
ENABLE
);

195 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
DISABLE
);

197 i‡(
USARTx
 =
USART2
)

199 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
ENABLE
);

200 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
DISABLE
);

202 i‡(
USARTx
 =
USART3
)

204 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
ENABLE
);

205 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
DISABLE
);

207 i‡(
USARTx
 =
UART4
)

209 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
ENABLE
);

210 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
DISABLE
);

212 i‡(
USARTx
 =
UART5
)

214 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
ENABLE
);

215 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
DISABLE
);

217 i‡(
USARTx
 =
USART6
)

219 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART6
, 
ENABLE
);

220 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART6
, 
DISABLE
);

222 i‡(
USARTx
 =
UART7
)

224 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART7
, 
ENABLE
);

225 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART7
, 
DISABLE
);

229 i‡(
USARTx
 =
UART8
)

231 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART8
, 
ENABLE
);

232 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART8
, 
DISABLE
);

235 
	}
}

246 
	$USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
)

248 
uöt32_t
 
tm¥eg
 = 0x00, 
≠b˛ock
 = 0x00;

249 
uöt32_t
 
öãgîdividî
 = 0x00;

250 
uöt32_t
 
‰a˘i⁄Ædividî
 = 0x00;

251 
RCC_ClocksTy≥Def
 
RCC_ClocksSètus
;

254 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

255 
	`as£π_∑øm
(
	`IS_USART_BAUDRATE
(
USART_InôSåu˘
->
USART_BaudR©e
));

256 
	`as£π_∑øm
(
	`IS_USART_WORD_LENGTH
(
USART_InôSåu˘
->
USART_W‹dLígth
));

257 
	`as£π_∑øm
(
	`IS_USART_STOPBITS
(
USART_InôSåu˘
->
USART_St›Bôs
));

258 
	`as£π_∑øm
(
	`IS_USART_PARITY
(
USART_InôSåu˘
->
USART_P¨ôy
));

259 
	`as£π_∑øm
(
	`IS_USART_MODE
(
USART_InôSåu˘
->
USART_Mode
));

260 
	`as£π_∑øm
(
	`IS_USART_HARDWARE_FLOW_CONTROL
(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
));

263 i‡(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 !
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
)

265 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

269 
tm¥eg
 = 
USARTx
->
CR2
;

272 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
USART_CR2_STOP
);

276 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_St›Bôs
;

279 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

282 
tm¥eg
 = 
USARTx
->
CR1
;

285 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
CR1_CLEAR_MASK
);

291 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_W‹dLígth
 | USART_InôSåu˘->
USART_P¨ôy
 |

292 
USART_InôSåu˘
->
USART_Mode
;

295 
USARTx
->
CR1
 = (
uöt16_t
)
tm¥eg
;

298 
tm¥eg
 = 
USARTx
->
CR3
;

301 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
CR3_CLEAR_MASK
);

305 
tm¥eg
 |
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
;

308 
USARTx
->
CR3
 = (
uöt16_t
)
tm¥eg
;

312 
	`RCC_GëClocksFªq
(&
RCC_ClocksSètus
);

314 i‡((
USARTx
 =
USART1
Ë|| (USARTx =
USART6
))

316 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK2_Fªquícy
;

320 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK1_Fªquícy
;

324 i‡((
USARTx
->
CR1
 & 
USART_CR1_OVER8
) != 0)

327 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (2 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

332 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (4 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

334 
tm¥eg
 = (
öãgîdividî
 / 100) << 4;

337 
‰a˘i⁄Ædividî
 = 
öãgîdividî
 - (100 * (
tm¥eg
 >> 4));

340 i‡((
USARTx
->
CR1
 & 
USART_CR1_OVER8
) != 0)

342 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 8Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x07);

346 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 16Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x0F);

350 
USARTx
->
BRR
 = (
uöt16_t
)
tm¥eg
;

351 
	}
}

359 
	$USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
)

362 
USART_InôSåu˘
->
USART_BaudR©e
 = 9600;

363 
USART_InôSåu˘
->
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

364 
USART_InôSåu˘
->
USART_St›Bôs
 = 
USART_St›Bôs_1
;

365 
USART_InôSåu˘
->
USART_P¨ôy
 = 
USART_P¨ôy_No
 ;

366 
USART_InôSåu˘
->
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

367 
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

368 
	}
}

379 
	$USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

381 
uöt32_t
 
tm¥eg
 = 0x00;

383 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

384 
	`as£π_∑øm
(
	`IS_USART_CLOCK
(
USART_ClockInôSåu˘
->
USART_Clock
));

385 
	`as£π_∑øm
(
	`IS_USART_CPOL
(
USART_ClockInôSåu˘
->
USART_CPOL
));

386 
	`as£π_∑øm
(
	`IS_USART_CPHA
(
USART_ClockInôSåu˘
->
USART_CPHA
));

387 
	`as£π_∑øm
(
	`IS_USART_LASTBIT
(
USART_ClockInôSåu˘
->
USART_La°Bô
));

390 
tm¥eg
 = 
USARTx
->
CR2
;

392 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
CR2_CLOCK_CLEAR_MASK
);

398 
tm¥eg
 |(
uöt32_t
)
USART_ClockInôSåu˘
->
USART_Clock
 | USART_ClockInôSåu˘->
USART_CPOL
 |

399 
USART_ClockInôSåu˘
->
USART_CPHA
 | USART_ClockInôSåu˘->
USART_La°Bô
;

401 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

402 
	}
}

410 
	$USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

413 
USART_ClockInôSåu˘
->
USART_Clock
 = 
USART_Clock_DißbÀ
;

414 
USART_ClockInôSåu˘
->
USART_CPOL
 = 
USART_CPOL_Low
;

415 
USART_ClockInôSåu˘
->
USART_CPHA
 = 
USART_CPHA_1Edge
;

416 
USART_ClockInôSåu˘
->
USART_La°Bô
 = 
USART_La°Bô_DißbÀ
;

417 
	}
}

427 
	$USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

430 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

431 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

433 i‡(
NewSèã
 !
DISABLE
)

436 
USARTx
->
CR1
 |
USART_CR1_UE
;

441 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_UE
);

443 
	}
}

453 
	$USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
)

456 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

459 
USARTx
->
GTPR
 &
USART_GTPR_GT
;

461 
USARTx
->
GTPR
 |
USART_PªsˇÀr
;

462 
	}
}

474 
	$USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

477 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

478 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

480 i‡(
NewSèã
 !
DISABLE
)

483 
USARTx
->
CR1
 |
USART_CR1_OVER8
;

488 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_OVER8
);

490 
	}
}

500 
	$USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

503 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

504 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

506 i‡(
NewSèã
 !
DISABLE
)

509 
USARTx
->
CR3
 |
USART_CR3_ONEBIT
;

514 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_ONEBIT
);

516 
	}
}

557 
	$USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
)

560 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

561 
	`as£π_∑øm
(
	`IS_USART_DATA
(
D©a
));

564 
USARTx
->
DR
 = (
D©a
 & (
uöt16_t
)0x01FF);

565 
	}
}

573 
uöt16_t
 
	$USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
)

576 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

579  (
uöt16_t
)(
USARTx
->
DR
 & (uint16_t)0x01FF);

580 
	}
}

625 
	$USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
)

628 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

629 
	`as£π_∑øm
(
	`IS_USART_ADDRESS
(
USART_Addªss
));

632 
USARTx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
USART_CR2_ADD
);

634 
USARTx
->
CR2
 |
USART_Addªss
;

635 
	}
}

645 
	$USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

648 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

649 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

651 i‡(
NewSèã
 !
DISABLE
)

654 
USARTx
->
CR1
 |
USART_CR1_RWU
;

659 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_RWU
);

661 
	}
}

672 
	$USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
)

675 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

676 
	`as£π_∑øm
(
	`IS_USART_WAKEUP
(
USART_WakeUp
));

678 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_WAKE
);

679 
USARTx
->
CR1
 |
USART_WakeUp
;

680 
	}
}

741 
	$USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
)

744 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

745 
	`as£π_∑øm
(
	`IS_USART_LIN_BREAK_DETECT_LENGTH
(
USART_LINBªakDëe˘Lígth
));

747 
USARTx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
USART_CR2_LBDL
);

748 
USARTx
->
CR2
 |
USART_LINBªakDëe˘Lígth
;

749 
	}
}

759 
	$USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

762 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

763 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

765 i‡(
NewSèã
 !
DISABLE
)

768 
USARTx
->
CR2
 |
USART_CR2_LINEN
;

773 
USARTx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
USART_CR2_LINEN
);

775 
	}
}

783 
	$USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
)

786 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

789 
USARTx
->
CR1
 |
USART_CR1_SBK
;

790 
	}
}

836 
	$USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

839 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

840 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

842 i‡(
NewSèã
 !
DISABLE
)

845 
USARTx
->
CR3
 |
USART_CR3_HDSEL
;

850 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_HDSEL
);

852 
	}
}

920 
	$USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
)

923 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

926 
USARTx
->
GTPR
 &
USART_GTPR_PSC
;

928 
USARTx
->
GTPR
 |(
uöt16_t
)((uöt16_t)
USART_Gu¨dTime
 << 0x08);

929 
	}
}

939 
	$USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

942 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

943 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

944 i‡(
NewSèã
 !
DISABLE
)

947 
USARTx
->
CR3
 |
USART_CR3_SCEN
;

952 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_SCEN
);

954 
	}
}

964 
	$USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

967 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

968 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

969 i‡(
NewSèã
 !
DISABLE
)

972 
USARTx
->
CR3
 |
USART_CR3_NACK
;

977 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_NACK
);

979 
	}
}

1035 
	$USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
)

1038 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1039 
	`as£π_∑øm
(
	`IS_USART_IRDA_MODE
(
USART_IrDAMode
));

1041 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_IRLP
);

1042 
USARTx
->
CR3
 |
USART_IrDAMode
;

1043 
	}
}

1053 
	$USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1056 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1057 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1059 i‡(
NewSèã
 !
DISABLE
)

1062 
USARTx
->
CR3
 |
USART_CR3_IREN
;

1067 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_IREN
);

1069 
	}
}

1099 
	$USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1102 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1103 
	`as£π_∑øm
(
	`IS_USART_DMAREQ
(
USART_DMAReq
));

1104 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1106 i‡(
NewSèã
 !
DISABLE
)

1110 
USARTx
->
CR3
 |
USART_DMAReq
;

1116 
USARTx
->
CR3
 &(
uöt16_t
)~
USART_DMAReq
;

1118 
	}
}

1231 
	$USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1233 
uöt32_t
 
ußπªg
 = 0x00, 
ôpos
 = 0x00, 
ômask
 = 0x00;

1234 
uöt32_t
 
ußπxba£
 = 0x00;

1236 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1237 
	`as£π_∑øm
(
	`IS_USART_CONFIG_IT
(
USART_IT
));

1238 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1241 i‡(
USART_IT
 =
USART_IT_CTS
)

1243 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1246 
ußπxba£
 = (
uöt32_t
)
USARTx
;

1249 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

1252 
ôpos
 = 
USART_IT
 & 
IT_MASK
;

1253 
ômask
 = (((
uöt32_t
)0x01Ë<< 
ôpos
);

1255 i‡(
ußπªg
 == 0x01)

1257 
ußπxba£
 += 0x0C;

1259 i‡(
ußπªg
 == 0x02)

1261 
ußπxba£
 += 0x10;

1265 
ußπxba£
 += 0x14;

1267 i‡(
NewSèã
 !
DISABLE
)

1269 *(
__IO
 
uöt32_t
*)
ußπxba£
 |
ômask
;

1273 *(
__IO
 
uöt32_t
*)
ußπxba£
 &~
ômask
;

1275 
	}
}

1295 
FœgSètus
 
	$USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

1297 
FœgSètus
 
bô°©us
 = 
RESET
;

1299 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1300 
	`as£π_∑øm
(
	`IS_USART_FLAG
(
USART_FLAG
));

1303 i‡(
USART_FLAG
 =
USART_FLAG_CTS
)

1305 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1308 i‡((
USARTx
->
SR
 & 
USART_FLAG
Ë!(
uöt16_t
)
RESET
)

1310 
bô°©us
 = 
SET
;

1314 
bô°©us
 = 
RESET
;

1316  
bô°©us
;

1317 
	}
}

1344 
	$USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

1347 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1348 
	`as£π_∑øm
(
	`IS_USART_CLEAR_FLAG
(
USART_FLAG
));

1351 i‡((
USART_FLAG
 & 
USART_FLAG_CTS
) == USART_FLAG_CTS)

1353 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1356 
USARTx
->
SR
 = (
uöt16_t
)~
USART_FLAG
;

1357 
	}
}

1378 
ITSètus
 
	$USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

1380 
uöt32_t
 
bôpos
 = 0x00, 
ômask
 = 0x00, 
ußπªg
 = 0x00;

1381 
ITSètus
 
bô°©us
 = 
RESET
;

1383 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1384 
	`as£π_∑øm
(
	`IS_USART_GET_IT
(
USART_IT
));

1387 i‡(
USART_IT
 =
USART_IT_CTS
)

1389 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1393 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

1395 
ômask
 = 
USART_IT
 & 
IT_MASK
;

1396 
ômask
 = (
uöt32_t
)0x01 << itmask;

1398 i‡(
ußπªg
 == 0x01)

1400 
ômask
 &
USARTx
->
CR1
;

1402 i‡(
ußπªg
 == 0x02)

1404 
ômask
 &
USARTx
->
CR2
;

1408 
ômask
 &
USARTx
->
CR3
;

1411 
bôpos
 = 
USART_IT
 >> 0x08;

1412 
bôpos
 = (
uöt32_t
)0x01 << bitpos;

1413 
bôpos
 &
USARTx
->
SR
;

1414 i‡((
ômask
 !(
uöt16_t
)
RESET
)&&(
bôpos
 != (uint16_t)RESET))

1416 
bô°©us
 = 
SET
;

1420 
bô°©us
 = 
RESET
;

1423  
bô°©us
;

1424 
	}
}

1452 
	$USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

1454 
uöt16_t
 
bôpos
 = 0x00, 
ômask
 = 0x00;

1456 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1457 
	`as£π_∑øm
(
	`IS_USART_CLEAR_IT
(
USART_IT
));

1460 i‡(
USART_IT
 =
USART_IT_CTS
)

1462 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1465 
bôpos
 = 
USART_IT
 >> 0x08;

1466 
ômask
 = ((
uöt16_t
)0x01 << (uöt16_t)
bôpos
);

1467 
USARTx
->
SR
 = (
uöt16_t
)~
ômask
;

1468 
	}
}

	@STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c

84 
	~"°m32f4xx_wwdg.h
"

85 
	~"°m32f4xx_rcc.h
"

100 
	#WWDG_OFFSET
 (
WWDG_BASE
 - 
PERIPH_BASE
)

	)

102 
	#CFR_OFFSET
 (
WWDG_OFFSET
 + 0x04)

	)

103 
	#EWI_BôNumbî
 0x09

	)

104 
	#CFR_EWI_BB
 (
PERIPH_BB_BASE
 + (
CFR_OFFSET
 * 32Ë+ (
EWI_BôNumbî
 * 4))

	)

108 
	#CFR_WDGTB_MASK
 ((
uöt32_t
)0xFFFFFE7F)

	)

109 
	#CFR_W_MASK
 ((
uöt32_t
)0xFFFFFF80)

	)

110 
	#BIT_MASK
 ((
uöt8_t
)0x7F)

	)

138 
	$WWDG_DeInô
()

140 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
ENABLE
);

141 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
DISABLE
);

142 
	}
}

154 
	$WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
)

156 
uöt32_t
 
tm¥eg
 = 0;

158 
	`as£π_∑øm
(
	`IS_WWDG_PRESCALER
(
WWDG_PªsˇÀr
));

160 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_WDGTB_MASK
;

162 
tm¥eg
 |
WWDG_PªsˇÀr
;

164 
WWDG
->
CFR
 = 
tm¥eg
;

165 
	}
}

173 
	$WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
)

175 
__IO
 
uöt32_t
 
tm¥eg
 = 0;

178 
	`as£π_∑øm
(
	`IS_WWDG_WINDOW_VALUE
(
WödowVÆue
));

181 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_W_MASK
;

184 
tm¥eg
 |
WödowVÆue
 & (
uöt32_t
Ë
BIT_MASK
;

187 
WWDG
->
CFR
 = 
tm¥eg
;

188 
	}
}

196 
	$WWDG_E«bÀIT
()

198 *(
__IO
 
uöt32_t
 *Ë
CFR_EWI_BB
 = (uöt32_t)
ENABLE
;

199 
	}
}

208 
	$WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
)

211 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

214 
WWDG
->
CR
 = 
Cou¡î
 & 
BIT_MASK
;

215 
	}
}

239 
	$WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
)

242 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

243 
WWDG
->
CR
 = 
WWDG_CR_WDGA
 | 
Cou¡î
;

244 
	}
}

266 
FœgSètus
 
	$WWDG_GëFœgSètus
()

268 
FœgSètus
 
bô°©us
 = 
RESET
;

270 i‡((
WWDG
->
SR
Ë!(
uöt32_t
)
RESET
)

272 
bô°©us
 = 
SET
;

276 
bô°©us
 = 
RESET
;

278  
bô°©us
;

279 
	}
}

286 
	$WWDG_CÀ¨Fœg
()

288 
WWDG
->
SR
 = (
uöt32_t
)
RESET
;

289 
	}
}

	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


32 
	~<bôs/huge_vÆ.h
>

33 #ifde‡
__USE_ISOC99


34 
	~<bôs/huge_vÆf.h
>

35 
	~<bôs/huge_vÆl.h
>

38 
	~<bôs/öf.h
>

41 
	~<bôs/«n.h
>

45 
	~<bôs/m©hdef.h
>

52 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

53 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

54 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

56 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

57 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

58 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

59 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

61 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

62 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

63 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

65 
	#_MdoubÀ_
 

	)

66 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

67 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

68 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

69 
	~<bôs/m©hˇŒs.h
>

70 #unde‡
_MdoubÀ_


71 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


72 #unde‡
_MdoubÀ_END_NAMESPACE


73 #unde‡
__MATH_PRECNAME


75 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


81 #i‚de‡
_MÊﬂt_


82 
	#_MÊﬂt_
 

	)

84 
	#_MdoubÀ_
 
_MÊﬂt_


	)

85 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

86 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

87 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

88 
	~<bôs/m©hˇŒs.h
>

89 #unde‡
_MdoubÀ_


90 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


91 #unde‡
_MdoubÀ_END_NAMESPACE


92 #unde‡
__MATH_PRECNAME


94 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

95 || 
deföed
 
__LDBL_COMPAT


96 #ifde‡
__LDBL_COMPAT


98 #ifde‡
__USE_ISOC99


99 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

100 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

101 #ifde‡
__REDIRECT_NTH


102 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

103 
__∆dbl_√xâow¨df
)

104 
	`__©åibuã__
 ((
__c⁄°__
));

105 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

106 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

107 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

108 (
__x
, 
__y
),

109 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

113 #unde‡
__MATHDECL_1


114 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

115 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

116 
¨gs
, 
Æüs
)

	)

117 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

118 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

124 #i‚de‡
_Ml⁄g_doubÀ_


125 
	#_Ml⁄g_doubÀ_
 

	)

127 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

128 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

129 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

130 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

131 
	#__MATH_DECLARE_LDOUBLE
 1

	)

132 
	~<bôs/m©hˇŒs.h
>

133 #unde‡
_MdoubÀ_


134 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


135 #unde‡
_MdoubÀ_END_NAMESPACE


136 #unde‡
__MATH_PRECNAME


141 #unde‡
__MATHDECL_1


142 #unde‡
__MATHDECL


143 #unde‡
__MATHCALL


146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


148 
signgam
;

153 #ifde‡
__USE_ISOC99


191 
FP_NAN
 =

192 
	#FP_NAN
 0

	)

193 
FP_NAN
,

194 
FP_INFINITE
 =

195 
	#FP_INFINITE
 1

	)

196 
FP_INFINITE
,

197 
FP_ZERO
 =

198 
	#FP_ZERO
 2

	)

199 
FP_ZERO
,

200 
FP_SUBNORMAL
 =

201 
	#FP_SUBNORMAL
 3

	)

202 
FP_SUBNORMAL
,

203 
FP_NORMAL
 =

204 
	#FP_NORMAL
 4

	)

205 
FP_NORMAL


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
	#Â˛assify
(
x
) \

211 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

213 
	#Â˛assify
(
x
) \

214 ( (
x
) ==  () \

215 ? 
	`__Â˛assifyf
 (
x
) \

216 :  (
x
) ==  () \

217 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

221 #ifde‡
__NO_LONG_DOUBLE_MATH


222 
	#signbô
(
x
) \

223 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

225 
	#signbô
(
x
) \

226 ( (
x
) ==  () \

227 ? 
	`__signbôf
 (
x
) \

228 :  (
x
) ==  () \

229 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

233 #ifde‡
__NO_LONG_DOUBLE_MATH


234 
	#isföôe
(
x
) \

235 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

237 
	#isföôe
(
x
) \

238 ( (
x
) ==  () \

239 ? 
	`__föôef
 (
x
) \

240 :  (
x
) ==  () \

241 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

245 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

249 #ifde‡
__NO_LONG_DOUBLE_MATH


250 
	#i¢™
(
x
) \

251 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

253 
	#i¢™
(
x
) \

254 ( (
x
) ==  () \

255 ? 
	`__i¢™f
 (
x
) \

256 :  (
x
) ==  () \

257 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

261 #ifde‡
__NO_LONG_DOUBLE_MATH


262 
	#isöf
(
x
) \

263 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

265 
	#isöf
(
x
) \

266 ( (
x
) ==  () \

267 ? 
	`__isöff
 (
x
) \

268 :  (
x
) ==  () \

269 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

273 
	#MATH_ERRNO
 1

	)

274 
	#MATH_ERREXCEPT
 2

	)

279 #i‚de‡
__FAST_MATH__


280 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

285 #ifde‡
__USE_GNU


287 #ifde‡
__NO_LONG_DOUBLE_MATH


288 
	#issig«lög
(
x
) \

289 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

291 
	#issig«lög
(
x
) \

292 ( (
x
) ==  () \

293 ? 
	`__issig«lögf
 (
x
) \

294 :  (
x
) ==  () \

295 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

299 #ifdef 
__USE_MISC


303 
_IEEE_
 = -1,

304 
_SVID_
,

305 
_XOPEN_
,

306 
_POSIX_
,

307 
_ISOC_


308 } 
	t_LIB_VERSION_TYPE
;

313 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

317 #ifde‡
__USE_SVID


323 #ifde‡
__˝lu•lus


324 
__ex˚±i⁄


326 
ex˚±i⁄


329 
ty≥
;

330 *
«me
;

331 
¨g1
;

332 
¨g2
;

333 
ªtvÆ
;

334 
	}
};

336 #ifde‡
__˝lu•lus


337 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

339 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

342 
	#X_TLOSS
 1.41484755040568800000e+16

	)

345 
	#DOMAIN
 1

	)

346 
	#SING
 2

	)

347 
	#OVERFLOW
 3

	)

348 
	#UNDERFLOW
 4

	)

349 
	#TLOSS
 5

	)

350 
	#PLOSS
 6

	)

353 
	#HUGE
 3.40282347e+38F

	)

357 #ifde‡
__USE_XOPEN


359 
	#MAXFLOAT
 3.40282347e+38F

	)

366 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


367 
	#M_E
 2.7182818284590452354

	)

368 
	#M_LOG2E
 1.4426950408889634074

	)

369 
	#M_LOG10E
 0.43429448190325182765

	)

370 
	#M_LN2
 0.69314718055994530942

	)

371 
	#M_LN10
 2.30258509299404568402

	)

372 
	#M_PI
 3.14159265358979323846

	)

373 
	#M_PI_2
 1.57079632679489661923

	)

374 
	#M_PI_4
 0.78539816339744830962

	)

375 
	#M_1_PI
 0.31830988618379067154

	)

376 
	#M_2_PI
 0.63661977236758134308

	)

377 
	#M_2_SQRTPI
 1.12837916709551257390

	)

378 
	#M_SQRT2
 1.41421356237309504880

	)

379 
	#M_SQRT1_2
 0.70710678118654752440

	)

385 #ifde‡
__USE_GNU


386 
	#M_El
 2.718281828459045235360287471352662498L

	)

387 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

388 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

389 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

390 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

391 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

392 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

393 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

394 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

395 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

396 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

397 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

398 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

405 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


406 
	#__NO_MATH_INLINES
 1

	)

409 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

416 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

417 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

418 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

419 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

420 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

421 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

425 #ifde‡
__USE_EXTERN_INLINES


426 
	~<bôs/m©hölöe.h
>

431 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

432 
	~<bôs/m©h-föôe.h
>

435 #ifde‡
__USE_ISOC99


439 #i‚de‡
isgª©î


440 
	#isgª©î
(
x
, 
y
) \

441 (
__exãnsi⁄__
 \

442 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

443 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

447 #i‚de‡
isgª©îequÆ


448 
	#isgª©îequÆ
(
x
, 
y
) \

449 (
__exãnsi⁄__
 \

450 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

451 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

455 #i‚de‡
i¶ess


456 
	#i¶ess
(
x
, 
y
) \

457 (
__exãnsi⁄__
 \

458 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

459 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

463 #i‚de‡
i¶es£quÆ


464 
	#i¶es£quÆ
(
x
, 
y
) \

465 (
__exãnsi⁄__
 \

466 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

467 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

471 #i‚de‡
i¶essgª©î


472 
	#i¶essgª©î
(
x
, 
y
) \

473 (
__exãnsi⁄__
 \

474 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

475 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

479 #i‚de‡
isun‹dîed


480 
	#isun‹dîed
(
u
, 
v
) \

481 (
__exãnsi⁄__
 \

482 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

483 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

488 
	g__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 
	#SIZE_MAX
 (4294967295U)

	)

267 #i‚de‡
WCHAR_MIN


269 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

270 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

274 
	#WINT_MIN
 (0u)

	)

275 
	#WINT_MAX
 (4294967295u)

	)

278 
	#INT8_C
(
c
Ë
	)
c

279 
	#INT16_C
(
c
Ë
	)
c

280 
	#INT32_C
(
c
Ë
	)
c

281 #i‡
__WORDSIZE
 == 64

282 
	#INT64_C
(
c
Ë¯## 
L


	)

284 
	#INT64_C
(
c
Ë¯## 
LL


	)

288 
	#UINT8_C
(
c
Ë
	)
c

289 
	#UINT16_C
(
c
Ë
	)
c

290 
	#UINT32_C
(
c
Ë¯## 
U


	)

291 #i‡
__WORDSIZE
 == 64

292 
	#UINT64_C
(
c
Ë¯## 
UL


	)

294 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

298 #i‡
__WORDSIZE
 == 64

299 
	#INTMAX_C
(
c
Ë¯## 
L


	)

300 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

302 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

303 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

174 || 
deföed
 
__USE_XOPEN2K8


176 *
	$°rdup
 (c⁄° *
__s
)

177 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_XOPEN2K8


184 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

185 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

188 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


190 
	#°rdu∑
(
s
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

196 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

197 
	}
}))

	)

200 
	#°∫du∑
(
s
, 
n
) \

201 (
__exãnsi⁄__
 \

203 c⁄° *
__ﬁd
 = (
s
); \

204 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

205 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

206 
__√w
[
__Àn
] = '\0'; \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 }))

	)

211 
	g__BEGIN_NAMESPACE_STD


213 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


216 *
°rchr
 (*
__s
, 
__c
)

217 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

219 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

221 #ifde‡
__OPTIMIZE__


222 
__exã∫_Æways_ölöe
 *

223 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


225  
__buûtö_°rchr
 (
__s
, 
__c
);

228 
__exã∫_Æways_ölöe
 const *

229 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


231  
__buûtö_°rchr
 (
__s
, 
__c
);

236 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

237 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


243 *
	`°ºchr
 (*
__s
, 
__c
)

244 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

246 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

248 #ifde‡
__OPTIMIZE__


249 
__exã∫_Æways_ölöe
 *

250 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


252  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

255 
__exã∫_Æways_ölöe
 const *

256 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


258  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

261 
	}
}

263 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 
__END_NAMESPACE_STD


268 #ifde‡
__USE_GNU


271 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


272 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

273 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

275 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

282 
__BEGIN_NAMESPACE_STD


285 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

290 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


295 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

296 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__OPTIMIZE__


301 
__exã∫_Æways_ölöe
 *

302 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


304  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

307 
__exã∫_Æways_ölöe
 const *

308 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


310  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

313 
	}
}

315 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

316 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


322 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

324 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 const *

335 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 c⁄° *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

370 c⁄° *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (c⁄° *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 const *

482 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (c⁄° *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 const *

510 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (c⁄° *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

530 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 c⁄° *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #unde‡
__USE_ISOC11


102 #unde‡
__USE_ISOC99


103 #unde‡
__USE_ISOC95


104 #unde‡
__USE_ISOCXX11


105 #unde‡
__USE_POSIX


106 #unde‡
__USE_POSIX2


107 #unde‡
__USE_POSIX199309


108 #unde‡
__USE_POSIX199506


109 #unde‡
__USE_XOPEN


110 #unde‡
__USE_XOPEN_EXTENDED


111 #unde‡
__USE_UNIX98


112 #unde‡
__USE_XOPEN2K


113 #unde‡
__USE_XOPEN2KXSI


114 #unde‡
__USE_XOPEN2K8


115 #unde‡
__USE_XOPEN2K8XSI


116 #unde‡
__USE_LARGEFILE


117 #unde‡
__USE_LARGEFILE64


118 #unde‡
__USE_FILE_OFFSET64


119 #unde‡
__USE_BSD


120 #unde‡
__USE_SVID


121 #unde‡
__USE_MISC


122 #unde‡
__USE_ATFILE


123 #unde‡
__USE_GNU


124 #unde‡
__USE_REENTRANT


125 #unde‡
__USE_FORTIFY_LEVEL


126 #unde‡
__KERNEL_STRICT_NAMES


130 #i‚de‡
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

143 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

150 #ifde‡
_GNU_SOURCE


151 #unde‡
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #unde‡
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #unde‡
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #unde‡
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #unde‡
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #unde‡
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #unde‡
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
 \

184 && !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
))

185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #unde‡
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #unde‡
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #i‡(
deföed
 
_ISOC11_SOURCE
 \

195 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

201 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

207 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

216 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifde‡
_DEFAULT_SOURCE


224 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #unde‡
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #unde‡
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #unde‡
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #unde‡
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #unde‡
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #unde‡
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #unde‡
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #unde‡
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifde‡
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifde‡
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifde‡
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #i‡
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<°dc-¥edef.h
>

360 #unde‡
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

369 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

372 #i‚de‡
__ASSEMBLER__


373 #i‚de‡
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

388 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

389 && 
deföed
 
	g__exã∫_ölöe


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/°ubs.h
>

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@
1
.
1
/usr/include
405
23147
CMSIS/DSP_Lib/Examples/arm_class_marks_example/ARM/arm_class_marks_example_f32.c
CMSIS/DSP_Lib/Examples/arm_class_marks_example/GCC/arm_class_marks_example_f32.c
CMSIS/DSP_Lib/Examples/arm_convolution_example/ARM/arm_convolution_example_f32.c
CMSIS/DSP_Lib/Examples/arm_convolution_example/ARM/math_helper.c
CMSIS/DSP_Lib/Examples/arm_convolution_example/ARM/math_helper.h
CMSIS/DSP_Lib/Examples/arm_convolution_example/GCC/arm_convolution_example_f32.c
CMSIS/DSP_Lib/Examples/arm_convolution_example/GCC/math_helper.c
CMSIS/DSP_Lib/Examples/arm_convolution_example/GCC/math_helper.h
CMSIS/DSP_Lib/Examples/arm_dotproduct_example/ARM/arm_dotproduct_example_f32.c
CMSIS/DSP_Lib/Examples/arm_dotproduct_example/GCC/arm_dotproduct_example_f32.c
CMSIS/DSP_Lib/Examples/arm_fft_bin_example/ARM/arm_fft_bin_data.c
CMSIS/DSP_Lib/Examples/arm_fft_bin_example/ARM/arm_fft_bin_example_f32.c
CMSIS/DSP_Lib/Examples/arm_fft_bin_example/GCC/arm_fft_bin_data.c
CMSIS/DSP_Lib/Examples/arm_fft_bin_example/GCC/arm_fft_bin_example_f32.c
CMSIS/DSP_Lib/Examples/arm_fir_example/ARM/arm_fir_data.c
CMSIS/DSP_Lib/Examples/arm_fir_example/ARM/arm_fir_example_f32.c
CMSIS/DSP_Lib/Examples/arm_fir_example/ARM/math_helper.c
CMSIS/DSP_Lib/Examples/arm_fir_example/ARM/math_helper.h
CMSIS/DSP_Lib/Examples/arm_graphic_equalizer_example/ARM/arm_graphic_equalizer_data.c
CMSIS/DSP_Lib/Examples/arm_graphic_equalizer_example/ARM/arm_graphic_equalizer_example_q31.c
CMSIS/DSP_Lib/Examples/arm_graphic_equalizer_example/ARM/math_helper.c
CMSIS/DSP_Lib/Examples/arm_graphic_equalizer_example/ARM/math_helper.h
CMSIS/DSP_Lib/Examples/arm_linear_interp_example/ARM/arm_linear_interp_data.c
CMSIS/DSP_Lib/Examples/arm_linear_interp_example/ARM/arm_linear_interp_example_f32.c
CMSIS/DSP_Lib/Examples/arm_linear_interp_example/ARM/math_helper.c
CMSIS/DSP_Lib/Examples/arm_linear_interp_example/ARM/math_helper.h
CMSIS/DSP_Lib/Examples/arm_matrix_example/ARM/arm_matrix_example_f32.c
CMSIS/DSP_Lib/Examples/arm_matrix_example/ARM/math_helper.c
CMSIS/DSP_Lib/Examples/arm_matrix_example/ARM/math_helper.h
CMSIS/DSP_Lib/Examples/arm_signal_converge_example/ARM/arm_signal_converge_data.c
CMSIS/DSP_Lib/Examples/arm_signal_converge_example/ARM/arm_signal_converge_example_f32.c
CMSIS/DSP_Lib/Examples/arm_signal_converge_example/ARM/math_helper.c
CMSIS/DSP_Lib/Examples/arm_signal_converge_example/ARM/math_helper.h
CMSIS/DSP_Lib/Examples/arm_sin_cos_example/ARM/arm_sin_cos_example_f32.c
CMSIS/DSP_Lib/Examples/arm_variance_example/ARM/arm_variance_example_f32.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_abs_f32.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_abs_q15.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_abs_q31.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_abs_q7.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_add_f32.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_add_q15.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_add_q31.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_add_q7.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_dot_prod_f32.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_dot_prod_q15.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_dot_prod_q31.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_dot_prod_q7.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_mult_f32.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_mult_q15.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_mult_q31.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_mult_q7.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_negate_f32.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_negate_q15.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_negate_q31.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_negate_q7.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_offset_f32.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_offset_q15.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_offset_q31.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_offset_q7.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_scale_f32.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_scale_q15.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_scale_q31.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_scale_q7.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_shift_q15.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_shift_q31.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_shift_q7.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_sub_f32.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_sub_q15.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_sub_q31.c
CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_sub_q7.c
CMSIS/DSP_Lib/Source/CommonTables/arm_common_tables.c
CMSIS/DSP_Lib/Source/CommonTables/arm_const_structs.c
CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_conj_f32.c
CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_conj_q15.c
CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_conj_q31.c
CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c
CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_dot_prod_q15.c
CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_dot_prod_q31.c
CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mag_f32.c
CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mag_q15.c
CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mag_q31.c
CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c
CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mag_squared_q15.c
CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c
CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c
CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c
CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c
CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c
CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mult_real_q15.c
CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mult_real_q31.c
CMSIS/DSP_Lib/Source/ControllerFunctions/arm_pid_init_f32.c
CMSIS/DSP_Lib/Source/ControllerFunctions/arm_pid_init_q15.c
CMSIS/DSP_Lib/Source/ControllerFunctions/arm_pid_init_q31.c
CMSIS/DSP_Lib/Source/ControllerFunctions/arm_pid_reset_f32.c
CMSIS/DSP_Lib/Source/ControllerFunctions/arm_pid_reset_q15.c
CMSIS/DSP_Lib/Source/ControllerFunctions/arm_pid_reset_q31.c
CMSIS/DSP_Lib/Source/ControllerFunctions/arm_sin_cos_f32.c
CMSIS/DSP_Lib/Source/ControllerFunctions/arm_sin_cos_q31.c
CMSIS/DSP_Lib/Source/FastMathFunctions/arm_cos_f32.c
CMSIS/DSP_Lib/Source/FastMathFunctions/arm_cos_q15.c
CMSIS/DSP_Lib/Source/FastMathFunctions/arm_cos_q31.c
CMSIS/DSP_Lib/Source/FastMathFunctions/arm_sin_f32.c
CMSIS/DSP_Lib/Source/FastMathFunctions/arm_sin_q15.c
CMSIS/DSP_Lib/Source/FastMathFunctions/arm_sin_q31.c
CMSIS/DSP_Lib/Source/FastMathFunctions/arm_sqrt_q15.c
CMSIS/DSP_Lib/Source/FastMathFunctions/arm_sqrt_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_32x64_init_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_32x64_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_fast_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_fast_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_init_f32.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_init_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_init_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df2T_f32.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df2T_f64.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df2T_init_f32.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df2T_init_f64.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_stereo_df2T_f32.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_stereo_df2T_init_f32.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_f32.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_fast_opt_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_fast_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_fast_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_opt_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_opt_q7.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_f32.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_fast_opt_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_fast_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_fast_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_opt_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_opt_q7.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_q7.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_q7.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_f32.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_fast_opt_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_fast_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_fast_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_opt_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_opt_q7.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_q7.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_f32.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_fast_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_fast_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_init_f32.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_init_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_init_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_f32.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_fast_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_fast_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_init_f32.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_init_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_init_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_init_q7.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_interpolate_f32.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_interpolate_init_f32.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_interpolate_init_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_interpolate_init_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_interpolate_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_interpolate_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_lattice_f32.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_lattice_init_f32.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_lattice_init_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_lattice_init_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_lattice_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_lattice_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_q7.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_f32.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_init_f32.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_init_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_init_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_init_q7.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_q7.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_iir_lattice_f32.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_iir_lattice_init_f32.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_iir_lattice_init_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_iir_lattice_init_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_iir_lattice_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_iir_lattice_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_f32.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_init_f32.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_init_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_init_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_norm_f32.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_norm_init_f32.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_norm_init_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_norm_init_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_norm_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_norm_q31.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_q15.c
CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_q31.c
CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_add_f32.c
CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_add_q15.c
CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_add_q31.c
CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c
CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_cmplx_mult_q15.c
CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c
CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_init_f32.c
CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_init_q15.c
CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_init_q31.c
CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_inverse_f32.c
CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_inverse_f64.c
CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_mult_f32.c
CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_mult_fast_q15.c
CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_mult_fast_q31.c
CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_mult_q15.c
CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_mult_q31.c
CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_scale_f32.c
CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_scale_q15.c
CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_scale_q31.c
CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_sub_f32.c
CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_sub_q15.c
CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_sub_q31.c
CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_trans_f32.c
CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_trans_q15.c
CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_trans_q31.c
CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_max_f32.c
CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_max_q15.c
CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_max_q31.c
CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_max_q7.c
CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_mean_f32.c
CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_mean_q15.c
CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_mean_q31.c
CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_mean_q7.c
CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_min_f32.c
CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_min_q15.c
CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_min_q31.c
CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_min_q7.c
CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_power_f32.c
CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_power_q15.c
CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_power_q31.c
CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_power_q7.c
CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_rms_f32.c
CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_rms_q15.c
CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_rms_q31.c
CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_std_f32.c
CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_std_q15.c
CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_std_q31.c
CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_var_f32.c
CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_var_q15.c
CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_var_q31.c
CMSIS/DSP_Lib/Source/SupportFunctions/arm_copy_f32.c
CMSIS/DSP_Lib/Source/SupportFunctions/arm_copy_q15.c
CMSIS/DSP_Lib/Source/SupportFunctions/arm_copy_q31.c
CMSIS/DSP_Lib/Source/SupportFunctions/arm_copy_q7.c
CMSIS/DSP_Lib/Source/SupportFunctions/arm_fill_f32.c
CMSIS/DSP_Lib/Source/SupportFunctions/arm_fill_q15.c
CMSIS/DSP_Lib/Source/SupportFunctions/arm_fill_q31.c
CMSIS/DSP_Lib/Source/SupportFunctions/arm_fill_q7.c
CMSIS/DSP_Lib/Source/SupportFunctions/arm_float_to_q15.c
CMSIS/DSP_Lib/Source/SupportFunctions/arm_float_to_q31.c
CMSIS/DSP_Lib/Source/SupportFunctions/arm_float_to_q7.c
CMSIS/DSP_Lib/Source/SupportFunctions/arm_q15_to_float.c
CMSIS/DSP_Lib/Source/SupportFunctions/arm_q15_to_q31.c
CMSIS/DSP_Lib/Source/SupportFunctions/arm_q15_to_q7.c
CMSIS/DSP_Lib/Source/SupportFunctions/arm_q31_to_float.c
CMSIS/DSP_Lib/Source/SupportFunctions/arm_q31_to_q15.c
CMSIS/DSP_Lib/Source/SupportFunctions/arm_q31_to_q7.c
CMSIS/DSP_Lib/Source/SupportFunctions/arm_q7_to_float.c
CMSIS/DSP_Lib/Source/SupportFunctions/arm_q7_to_q15.c
CMSIS/DSP_Lib/Source/SupportFunctions/arm_q7_to_q31.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_bitreversal.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_f32.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_q15.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_q31.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix2_f32.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix2_init_f32.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix2_init_q15.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix2_init_q31.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix2_q15.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix2_q31.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix4_f32.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix4_init_f32.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix4_init_q15.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix4_init_q31.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix4_q15.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix4_q31.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix8_f32.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_dct4_f32.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_dct4_init_f32.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_dct4_init_q15.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_dct4_init_q31.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_dct4_q15.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_dct4_q31.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_f32.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_fast_f32.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_fast_init_f32.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_init_f32.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_init_q15.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_init_q31.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_q15.c
CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_q31.c
CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h
CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h
CMSIS/Device/ST/STM32F4xx/Source/Templates/system_stm32f4xx.c
CMSIS/Include/arm_common_tables.h
CMSIS/Include/arm_const_structs.h
CMSIS/Include/arm_math.h
CMSIS/Include/core_cm0.h
CMSIS/Include/core_cm0plus.h
CMSIS/Include/core_cm3.h
CMSIS/Include/core_cm4.h
CMSIS/Include/core_cm7.h
CMSIS/Include/core_cmFunc.h
CMSIS/Include/core_cmInstr.h
CMSIS/Include/core_cmSimd.h
CMSIS/Include/core_sc000.h
CMSIS/Include/core_sc300.h
CMSIS/Include/stm32f4xx_conf.h
CMSIS/RTOS/Template/cmsis_os.h
STM32F4xx_StdPeriph_Driver/inc/misc.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_adc.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_can.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_cec.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_crc.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_cryp.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dac.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dbgmcu.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dcmi.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dma.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dma2d.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_exti.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_flash.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_flash_ramfunc.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_fmc.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_fmpi2c.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_fsmc.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_gpio.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_hash.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_i2c.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_iwdg.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_ltdc.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_pwr.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_qspi.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rng.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rtc.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_sai.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_sdio.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_spdifrx.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_spi.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_syscfg.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_tim.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_usart.h
STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_wwdg.h
STM32F4xx_StdPeriph_Driver/src/misc.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cec.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_crc.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dac.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dbgmcu.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma2d.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_exti.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_flash.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_flash_ramfunc.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_fmc.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_fmpi2c.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_fsmc.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_gpio.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_iwdg.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_ltdc.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_qspi.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_sai.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_sdio.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spdifrx.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_syscfg.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_tim.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c
STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c
/usr/include/math.h
/usr/include/stdint.h
/usr/include/string.h
/usr/include/features.h
/usr/include/xlocale.h
/usr/include/stdc-predef.h
